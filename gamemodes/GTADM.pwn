/*==============================================================================
GTADM - Grand Theft Auto Deathmatch
															By RoNz Since 2012
==============================================================================*/
#include a_samp
//#include OPVD
//#include fixes

#undef MAX_PLAYERS
#define MAX_PLAYERS 104 //(max players + 10)

#define USEDRIFT         //(comment to disable)
//#define USEKILLIST    //(comment to disable)
//#define USE_WeaponDrop    //(comment to disable)
//#define WeaponDestroy    30    //(comment to disable)
//#define BulletsDivide    2     //Amount of ammo is divided by this number
//#define USE_ANTI_SOBIET    //(comment to disable)
//#define USE_POOL    //(comment to disable)
//#define ANTI_SOBIET_FREEZE_SECONDS  4 //(for how many seconds should the player be freezed during s0biet check , its recommended to be higher than 3)
//#define USE_OLDBANK //(comment to disable)
#define USE_NEWBANK //(comment to disable)
#define USE_LOTTO //(comment to disable)
//#define USE_NEWINFOMSG //(comment to disable)
//#define useirc //(comment to disable)
#define useovh //(comment to disable)
//#define usevps //(comment to disable)
//#define usefrag //(comment to disable)

#include YSI\y_iterate
#include streamer
#include sscanf2
#include zcmd

#include "../gamemodes/subscripts/myfuncs.pwn"

#include YSI\y_ini
#include neons

#include PauseINC
#include geoip
#include a_mysql
#include floodcontrol
#include FuckCleo

#if defined USE_POOL
new poolmode;
#include physics
#endif

#define INVALID_PLAYERTEXT_DRAW       PlayerText:0xFFFF

//No 2nd rcon
new secondrconoff[MAX_PLAYERS];
new pGz[MAX_PLAYERS];

new PMChattingID[MAX_PLAYERS];
new RoNzCar;
new lolRoNz[6];
//headshot
new bool:HideHeadShottRunning[MAX_PLAYERS];
new HideHeadShott[MAX_PLAYERS];
new Text:TdHeadShot;
//intro

new Text:Textdraw0;
new Text:Textdraw1;
new Text:Textdraw2;
new Text:Textdraw3;
new Text:Textdraw4;
new Text:Textdraw5;
new Text:Textdraw6;
new Text:Textdraw7;
new Text:Textdraw8;
new Text:Textdraw9;

/*
new Text:Textdraw01;
new Text:Textdraw011;
new Text:Textdraw02;
new Text:Textdraw03;
new Text:Textdraw04;
new Text:Textdraw05;
new Text:Textdraw06;
new Text:Textdraw07;
*/

new GwPingLimit;
new GwFpsLimit;
new PingLimit;
//Sounds
#define ErrorSound 1058
#define CheckSound 1139
#define BuySound		1150
#define LoseMoneySound	1084
#define GetMoneySound	1083

//lms
/*new Text:LMSwaiting;
new Text:Fwaiting;
new Text:Pwaiting;
new Text:Hwaiting;
new Text:Mwaiting;*/

//events
new CSTer[MAX_PLAYERS];
new CSCT[MAX_PLAYERS];
new CTFB[MAX_PLAYERS];
new CTFG[MAX_PLAYERS];
new FB1[MAX_PLAYERS];
new FB2[MAX_PLAYERS];
new DD1[MAX_PLAYERS];
new DD2[MAX_PLAYERS];
new CO1[MAX_PLAYERS];
new CO2[MAX_PLAYERS];

#define TIMER_CHECK_VIP 1// Minutes - Check expired VIP every X minutes //vipexpiresin

//class selection not spawned
#define PLAYER_COLOR_TEAM_0FF 0xBABABAFF

//CarHop
new CarHopOn[MAX_PLAYERS];

//SpeedBoost
new SpeedBoostOn[MAX_PLAYERS];

//kill the player event
//new eventhit[MAX_PLAYERS];

//INFO
new Text:InfoText;
new InfoTextShown;
new HideInfoTextTimer;

new PlayerText:pInfoText[MAX_PLAYERS];
new pInfoTextShown[MAX_PLAYERS];
new HidepInfoTextTimer[MAX_PLAYERS];
new PlayerText:pIntroTD[MAX_PLAYERS][2];

//shit
//new PlayerHealthCount;
//new PlayerArmourCount;

#define darkgreen 0x12900BBF
#define green 0x33AA33AA
#define neutralgreen 0x81CFAB00
#define lightgreen 0x24FF0AB9

//Trucking
new Vans[10];
new Tanks[10];
new b_Vans[10];
new Tanks2[6];

new v_Mission_cps[19];
new v_Mission_icons[19];

new v_Mission2_cps[9];
new v_Mission2_icons[9];

new Trucking_Start;
new Trucking_Start2;


new Float:Tank2Dis[][3]=
{
	{1255.6870, -2026.0487, 58.8239},
	{-62.8836, -314.0802, 4.5859},
	{1409.5454, -1310.3125, 9.8248},
	{-557.6264, -504.9924, 24.0431},
	{-2533.6108, -609.8857, 131.7249},
	{-1994.2599, -1557.0258, 84.3133},
	{-2410.0461, 1139.3431, 54.7131},
	{-2542.1001, 2365.6587, 4.1088}
};
new Float:pcx[MAX_PLAYERS], Float:pcy[MAX_PLAYERS], Float:pcz[MAX_PLAYERS];
new Float:camX[MAX_PLAYERS], Float:camY[MAX_PLAYERS], Float:camZ[MAX_PLAYERS];

//cs
new Float:BombX[MAX_PLAYERS], Float:BombY[MAX_PLAYERS], Float:BombZ[MAX_PLAYERS];
new BombObject[MAX_PLAYERS];

#if defined USE_NEWINFOMSG
//
//InfoTextdraw
new bool:InfoTextmsgShown[MAX_PLAYERS];
new DestroyInfoTextmsgt[MAX_PLAYERS];
forward DestroyInfoTextmsg(playerid);
new bool:DestroyInfoTextmsgtRunning[MAX_PLAYERS];
new Text:InfoTextdrawmsg[MAX_PLAYERS];
new bool:InfoTextCreatedmsg[MAX_PLAYERS];
new Text:LMBtoClose;
//new InfoTextmsgShown;
new DestroyInfoTextmsgt2[MAX_PLAYERS];
forward DestroyInfoTextmsg2(playerid);
new bool:DestroyInfoTextmsgtRunning2[MAX_PLAYERS];
new Text:InfoTextdrawmsg2[MAX_PLAYERS];
new bool:InfoTextCreatedmsg2[MAX_PLAYERS];
new DEBUG_TextDrawsUsed;
#endif

//lotto
#if defined USE_LOTTO
new Iterator:lotoplayers<MAX_PLAYERS>;
new Iterator:lotonumbers<MAX_PLAYERS>;
new LotoStarted, LotoNumber[MAX_PLAYERS];
#endif

//OutRun
new Iterator:OutRun_Follower<MAX_PLAYERS>;
new PlayerText:pOutRunTD[MAX_PLAYERS][6];
new Float:outVX[MAX_PLAYERS];
new Float:outVY[MAX_PLAYERS];
new Float:outVZ[MAX_PLAYERS];
new Float:outSP[MAX_PLAYERS];

//anti deamx
#include <core>
#include <float>

#if defined USEKILLIST
new Text:Killist[15];
new oldreasons[5];
new oldname1[5][50];
new oldname2[5][50];
new DontShowKills[MAX_PLAYERS];

new oldcolor1[5][50];
new oldcolor2[5][50];
new killistempty;
#endif

#if defined USE_WeaponDrop
new isDroped[MAX_PLAYERS][13];
new WeaponArray[MAX_PLAYERS][13][3];
new WeaponDestroyTimer[MAX_PLAYERS];
#endif
//-----------
//   Map loader
//-----------
#define MAX_MAPS 250
enum Maps
{
	mapname[64],
	objects[1000],
	m_world,
	m_int
};
new MI[MAX_MAPS][Maps], curmap;

//Cars
enum hCar
{
  hCarIndex,
  Blockcar,
  hCarHouse[4]
}
new HouseCar[MAX_VEHICLES][hCar];

new IsHouseCar[MAX_VEHICLES];
new FpsWarnings[MAX_PLAYERS];
new PingWarnings[MAX_PLAYERS];
new partyarea;
new AllowForbidWeap[MAX_PLAYERS];
new falloutarea;
//new Tile_Area, Tile_Win;
#if defined USE_POOL

//---POOL

new Text:PoolTD1;
new Text:PoolTD2;
new Text:PoolTD3;

new PoolBall[16];
new poolturn;
new poollasthit;
new poolin;
new ballscount;
new lockshooting;
new poolguy1;
new poolguy2;
new poolscore1;
new poolscore2;

forward Float:GetVectorAngle_XY(Float:fx, Float:fy, Float:tx, Float:ty);
forward Float:GetVectorDistance_PL(playerid, obja);

enum EnumPlayer
{
	bool:Sighting,
	bool:AfterSighting,
	SelectLR,
	Float:SelectUD,
	Float:pooa
};
new poPlayer[MAX_PLAYERS][EnumPlayer];
#endif

new ClanTag[MAX_PLAYERS];
//------------------------
new HeadShotOff;
new musiclock;
new pRIcon[MAX_PLAYERS];
new lockctf=0;
new locksumo=0;
new con;
new AdminCar[MAX_VEHICLES];
new InCar[MAX_PLAYERS];
//Targetting system
/*
new PlayerTargetID[MAX_PLAYERS];
new PlayerText3D:PlayerTargetText[MAX_PLAYERS];
new bool:PlayerTargetTextCreated[MAX_PLAYERS];
new PlayerTargetUpdatet[MAX_PLAYERS];
new bool:PlayerTargetUpdatetRunning[MAX_PLAYERS];
forward PlayerTargetUpdate(playerid);*/

new bMSG[200];
new cMSG[200];
new dMSG[200];
//new ClockOn[MAX_PLAYERS];
new SCar[MAX_VEHICLES];
new SOwner[MAX_VEHICLES];
new CarNitro[MAX_VEHICLES];

new PhoneCP;

new PowerUpPickup[5];
new PowerUpPlayer[5];
new HideShit[MAX_PLAYERS];
new Text:RaceStartTD;
new Float:pRacePos[MAX_PLAYERS][3];

new PlayerText:pRRTD[MAX_PLAYERS][60];

new PlayerText:pGwTD1[MAX_PLAYERS][7];
new PlayerText:pGwTD2[MAX_PLAYERS][30];

//ask / answer
new BlockAsk[MAX_PLAYERS];

//Attachments for vips in market
//new MarketVPI8[MAX_PLAYERS];

//anti cs team kill
new csteam1[MAX_PLAYERS];
new csteam2[MAX_PLAYERS];

//Anti teamkill CTF
new inctf[MAX_PLAYERS];
new ctfteam1[MAX_PLAYERS];
new ctfteam2[MAX_PLAYERS];
//new gTeam[MAX_PLAYERS];

//admin duty
new aduty[MAX_PLAYERS];

//shit
//°°°//

//nxsdm
new nxsdm[MAX_PLAYERS];

//hit sound
new HitSound[MAX_PLAYERS];

new Jonny[MAX_PLAYERS];
new HFA[MAX_PLAYERS];

//antibikefallof
#define Driver 0
#define Passanger 2

new WhatCar[MAX_PLAYERS];
new antifallon[MAX_PLAYERS];
//
new antifallvip[MAX_PLAYERS];

//free permit
new freepermit[MAX_PLAYERS];

//attachments
new attach[MAX_PLAYERS];

// damage txds
new damagetxds[MAX_PLAYERS];

//spec ramp
new specramp[MAX_PLAYERS];

//TickTak
new ticbox[MAX_PLAYERS][9];
new PlayerText:TickTD[MAX_PLAYERS][17];
new TikCreated[MAX_PLAYERS];
new TickOP[MAX_PLAYERS];
new TickType[MAX_PLAYERS];
new TickTurn[MAX_PLAYERS];
new TickRound[MAX_PLAYERS];
new TickWon[MAX_PLAYERS];

new PlayerText:pAchTD[MAX_PLAYERS];


//freeze bug
new Float:PreToggleHealth[MAX_PLAYERS];
new Float:PreToggleArmour[MAX_PLAYERS];

new bool:PlayerIsFrozen[MAX_PLAYERS];

//#include vChange
new MySQL:GTADM; //mysql
new PMReply[MAX_PLAYERS];
new Footballer[MAX_PLAYERS];
new ssTimer[MAX_PLAYERS];
new StuntCP[MAX_PLAYERS];
new STUNTING[MAX_PLAYERS];
new STUNTTk[MAX_PLAYERS];
new InCW[MAX_PLAYERS];
new StuntMap[MAX_PLAYERS];
new GOD[MAX_PLAYERS];
new Blocked[MAX_PLAYERS][5];
//Vehicle Owning
enum veinfo
{
   ID,
   Owned,
   Player
}
new VehicleInfo[MAX_VEHICLES][veinfo];
new SMSID[MAX_PLAYERS][10];
new tramsf;
new train;
new TDMScore[3][2];
//==============================================================================
#include "../gamemodes/subscripts/gtazones.pwn"
#include "../gamemodes/subscripts/objects.pwn"

#define islower(%1) ('a' <= %1 <= 'z')
#define isupper(%1) ('A' <= %1 <= 'Z')
#define HOLDING(%0) \
	((newkeys & (%0)) == (%0))


#undef INVALID_3DTEXT_ID
#define INVALID_3DTEXT_ID Text3D:0xFFFF

new Text3D:p3D[MAX_PLAYERS] = {INVALID_3DTEXT_ID, ...};
new Text3D:Sumo3D[MAX_PLAYERS] = {INVALID_3DTEXT_ID, ...};

new repaircount;

//==========================CTF=================================================
new ctftype;
new ctf;
new ctfflag[2];
new Float:flagpos[2][3];
new ctfmapicon[4];
new CTFstarttime, CTFStartTimer, CTFStartTimer2, CTFtimer;
new CTFtime;
//new Text:CTFwaiting;

new Flag1Player;
new Flag2Player;

new CTF1Score;
new CTF2Score;

new CTFCount1;
new CTFCount2;
new inFG1;
new inFG2;
new FlagCaptured[2];
new ctfcp[6];

/*
new CTF_WEAPON[][3]=
{
 {31, 24, 34},
 {26, 29, 39},
 {31, 27, 34}
};*/
new CTF_WEAPON[][6]=
{
 {31, 27, 34, 24, 28, 9},
 {31, 27, 34, 24, 28, 9},
 {31, 27, 34, 24, 28, 9}
};
/*
new Float:CTF_Flag1_Spawn[3][3]  =
{
	{405.8049, 2507.7627, 16.2374},
	{-1113.3037, -1623.0773, 76.3739},
	{2225.2368, -1164.9199, 25.7266}
};
new Float:CTF_Flag2_Spawn[3][3]  =
{
	{-49.6786, 2497.1204, 16.3392},
	{-843.6460, -1844.8003, 91.0953},
	{2264.9341, -1027.1709, 59.2856}
};
new Float:CTF_Team1_Spawn[3][4]  =
{
	{370.5601, 2496.4854, 16.3392, 90.0},
	{-1112.9667, -1654.9498, 76.3672, 273.875},
	{2223.7690, -1148.3424, 25.8136, 6.5626}
};

new Float:CTF_Team2_Spawn[3][4]  =
{
	{-14.6924, 2509.2290, 16.3392, -90.0},
	{-858.5999, -1831.7738, 91.4495, 49.7830},
	{2229.6199, -1018.0104, 59.5760, 147.3361}
};*/
new Float:CTF_Flag1_Spawn[3][3]  =
{
	{2225.2368, -1164.9199, 25.7266},
	{2225.2368, -1164.9199, 25.7266},
	{2225.2368, -1164.9199, 25.7266}
};
new Float:CTF_Flag2_Spawn[3][3]  =
{
	{2264.9341, -1027.1709, 59.2856},
	{2264.9341, -1027.1709, 59.2856},
	{2264.9341, -1027.1709, 59.2856}
};
new Float:CTF_Team1_Spawn[3][4]  =
{
	{2223.7690, -1148.3424, 25.8136, 6.5626},
	{2223.7690, -1148.3424, 25.8136, 6.5626},
	{2223.7690, -1148.3424, 25.8136, 6.5626}
};

new Float:CTF_Team2_Spawn[3][4]  =
{
	{2229.6199, -1018.0104, 59.5760, 147.3361},
	{2229.6199, -1018.0104, 59.5760, 147.3361},
	{2229.6199, -1018.0104, 59.5760, 147.3361}
};
//==============================================================================
//static pTarget[MAX_PLAYERS] = {INVALID_PLAYER_ID, ...};
//new pTargetToggle[MAX_PLAYERS];
//
native gpci (playerid, serial [], len);
native IsValidVehicle(vehicleid);

#define MAX_GANGS 500
#define MAX_SAMS 100
#define GwMini 2
#define GetRangeIP(%0, %1) \
		GetPlayerIp(%0, %1, sizeof(%1)); \
		strdel(%1, strfind(%1, ".", false, 4), sizeof(%1))


#define MAX_RACES 150
#define MAX_sRACES 5


enum Sinfo
{
   Work,
   House[10],
   isKiller,
   Float:SamPos[4],
   Float:SamkPos[4],
   Obj,
   kObj,
   SamMissle,
   MissleFired,
   TimerCheck,
   Float:SDist
}
new SAMS[MAX_SAMS][Sinfo];

new ServerWeather;
//
new AttachObjectTo[MAX_PLAYERS];
//=========================pLevel[playerid][driving]  Garage========================================
enum tunes
{
	Fbumps,
	Rbumps,
	Hood,
	SS,
	Spoiler,
	Ex,
	Wheel
}
enum tunes2
{
	Fbumps,
	Rbumps,
	Hood,
	SS[2],
	Spoiler,
	Ex[2],
	Wheel[4]
}

new	v_HasTune[MAX_VEHICLES][tunes],
	v_TuneObject[MAX_VEHICLES][tunes2];


//3rd person
new obj[MAX_PLAYERS];
new pWarned[MAX_PLAYERS];
new pAirBreakWarned[MAX_PLAYERS];
new pSpeedWarned[MAX_PLAYERS];
new pRCONWarned[MAX_PLAYERS];
new pTeleportWarned[MAX_PLAYERS]; // ban for teleport hack
new pSecRCON[MAX_PLAYERS];
new Driving[MAX_PLAYERS];
new PlayerText:pPMTD[MAX_PLAYERS][2];
new PlayerText:pMoneyTD[MAX_PLAYERS][3];
//==========================Event======
new EventStarted, EventType, EventCooks, EventScore, EventMoney;
new EventPickup, EventRaceType, EventStartTime, EventKS, Float:EventPickupCoords[3];
new EventInfo[512];
new Text:EventTD;
new Text:PartyTD;
new Text:PartyTD2;
new EventAnswer[256];
new EventExports[MAX_PLAYERS];
new EventMoneyBags[MAX_PLAYERS];
//==========================Money on Tab========================================
new Tab=0;
new PlayerList[MAX_PLAYERS][MAX_PLAYERS];
new MovingLand;
//=============================Mobile===========================================
#define MAX_PHONE_TD 67
new PhoneCreated[MAX_PLAYERS];
new PlayerText:PhoneTD[MAX_PLAYERS][MAX_PHONE_TD];


new PlayerText:GwTD[MAX_PLAYERS][26];

//new PlayerText:PingTD[MAX_PLAYERS][3];

new DialString[MAX_PLAYERS][20];
new pPhone[MAX_PLAYERS];
new PhoneOff[MAX_PLAYERS];
new OnPhone[MAX_PLAYERS];
new CallID[MAX_PLAYERS];
new ContactName[MAX_PLAYERS][7][12];
new ContactID[MAX_PLAYERS][7][10];
new pRingTone[MAX_PLAYERS];
new pWallpaper[MAX_PLAYERS];
//============================Airbreak==========================================
new Float:AirbPos[MAX_PLAYERS][3];
new LastCheck[MAX_PLAYERS];
new LastSpeed[MAX_PLAYERS];
enum sInfo
{
  sSyncTime,
  sLastSyncUpdate
};
new posSYNC[MAX_PLAYERS][sInfo];
//================================Hay Game======================================
new haygamestarted;
new haygametimer;
new haygametimer2;
new HayStartTime;
new HayPickup;
new HayPickup2;
new HayPickup3;
new HayMap;
//===============================MGGAME=========================================
#define mgslots 98
new Iterator:mgiter<mgslots>;
new Iterator:mgiter2<mgslots>;
new Iterator:mgiter3<mgslots>;
new mgObjects_[mgslots];
new MgStartTime, mgstarted, mgtimer, mgtimer2, mgtimer3, MgTime;
new Mgpickup;
new Float:mgCoords[mgslots][3] =
{
    {2783.8999023, -2667.1000977, 208.0000000}, //object(roofstuff16) (2)
    {2783.8999023, -2671.6000977, 201.0000000}, //object(roofstuff16) (3)
    {2783.8999023, -2676.1000977, 202.3000031}, //object(roofstuff16) (4)
    {2783.8999023, -2680.6000977, 200.3000031}, //object(roofstuff16) (5)
    {2783.8999023, -2689.6000977, 201.0000000}, //object(roofstuff16) (7)
    {2783.8999023, -2694.1000977, 200.0000000}, //object(roofstuff16) (8)
    {2783.8999023, -2698.6000977, 207.0000000}, //object(roofstuff16) (9)
    {2783.8999023, -2703.1000977, 200.0000000}, //object(roofstuff16) (10)
    {2783.8999023, -2658.1000977, 200.0000000}, //object(roofstuff16) (11)
    {2778.5000000, -2658.1000977, 206.0000000}, //object(roofstuff16) (12)
    {2773.1000977, -2658.1000977, 211.0000000}, //object(roofstuff16) (13)
    {2767.6999512, -2658.1000977, 204.0000000}, //object(roofstuff16) (14)
    {2762.3000488, -2658.1000977, 207.0000000}, //object(roofstuff16) (15)
    {2756.8999023, -2658.1000977, 212.0000000}, //object(roofstuff16) (16)
    {2751.5000000, -2658.1000977, 206.0000000}, //object(roofstuff16) (17)
    {2746.1000977, -2658.1000977, 208.0000000}, //object(roofstuff16) (18)
    {2740.6999512, -2658.1000977, 203.0000000}, //object(roofstuff16) (19)
    {2778.5000000, -2703.1000977, 206.0000000}, //object(roofstuff16) (20)
    {2773.1000977, -2703.1000977, 204.0000000}, //object(roofstuff16) (22)
    {2767.6999512, -2703.1000977, 208.0000000}, //object(roofstuff16) (23)
    {2762.3000488, -2703.1000977, 199.0000000}, //object(roofstuff16) (24)
    {2756.8999023, -2703.1000977, 214.0000000}, //object(roofstuff16) (25)
    {2751.5000000, -2703.1000977, 202.0000000}, //object(roofstuff16) (26)
    {2746.1000977, -2703.1000977, 199.0000000}, //object(roofstuff16) (27)
    {2740.6999512, -2703.1000977, 206.0000000}, //object(roofstuff16) (28)
    {2778.5000000, -2662.6000977, 204.0000000}, //object(roofstuff16) (29)
    {2773.1000977, -2662.6000977, 199.0000000}, //object(roofstuff16) (30)
    {2773.1000977, -2667.1000977, 206.0000000}, //object(roofstuff16) (31)
    {2778.5000000, -2667.1000977, 200.0000000}, //object(roofstuff16) (32)
    {2778.5000000, -2671.6000977, 204.0000000}, //object(roofstuff16) (33)
    {2778.5000000, -2676.1000977, 202.0000000}, //object(roofstuff16) (34)
    {2773.1000977, -2671.6000977, 211.0000000}, //object(roofstuff16) (35)
    {2773.1000977, -2676.1000977, 201.0000000}, //object(roofstuff16) (36)
    {2778.5000000, -2680.6000977, 204.0000000}, //object(roofstuff16) (37)
    {2778.5000000, -2685.1000977, 205.0000000}, //object(roofstuff16) (38)
    {2778.5000000, -2689.6000977, 213.0000000}, //object(roofstuff16) (39)
    {2778.5000000, -2694.1000977, 210.0000000}, //object(roofstuff16) (40)
    {2778.5000000, -2698.6000977, 199.0000000}, //object(roofstuff16) (41)
    {2773.1000977, -2698.6000977, 209.0000000}, //object(roofstuff16) (42)
    {2773.1000977, -2694.1000977, 202.0000000}, //object(roofstuff16) (43)
    {2773.1000977, -2680.6000977, 202.0000000}, //object(roofstuff16) (44)
    {2773.1000977, -2685.1000977, 209.0000000}, //object(roofstuff16) (45)
    {2773.1000977, -2689.6000977, 200.0000000}, //object(roofstuff16) (46)
    {2740.6999512, -2662.6000977, 214.0000000}, //object(roofstuff16) (47)
    {2740.6999512, -2667.1000977, 211.0000000}, //object(roofstuff16) (48)
    {2740.6999512, -2671.6000977, 203.0000000}, //object(roofstuff16) (49)
    {2740.6999512, -2676.1000977, 209.0000000}, //object(roofstuff16) (50)
    {2740.6999512, -2680.6000977, 201.0000000}, //object(roofstuff16) (51)
    {2740.6999512, -2685.1000977, 215.0000000}, //object(roofstuff16) (52)
    {2740.6999512, -2689.6000977, 205.0000000}, //object(roofstuff16) (53)
    {2740.6999512, -2694.1000977, 204.0000000}, //object(roofstuff16) (54)
    {2740.6999512, -2698.6000977, 211.0000000}, //object(roofstuff16) (55)
    {2746.1000977, -2662.6000977, 205.0000000}, //object(roofstuff16) (56)
    {2746.1000977, -2667.1000977, 206.0000000}, //object(roofstuff16) (57)
    {2751.5000000, -2662.6000977, 200.0000000}, //object(roofstuff16) (58)
    {2751.5000000, -2667.1000977, 199.0000000}, //object(roofstuff16) (59)
    {2746.1000977, -2671.6000977, 202.0000000}, //object(roofstuff16) (60)
    {2751.5000000, -2671.6000977, 205.0000000}, //object(roofstuff16) (61)
    {2746.1000977, -2676.1000977, 208.0000000}, //object(roofstuff16) (62)
    {2751.5000000, -2676.1000977, 207.0000000}, //object(roofstuff16) (63)
    {2746.1000977, -2685.1000977, 209.0000000}, //object(roofstuff16) (64)
    {2751.5000000, -2685.1000977, 201.0000000}, //object(roofstuff16) (65)
    {2746.1000977, -2689.6000977, 211.0000000}, //object(roofstuff16) (66)
    {2751.5000000, -2689.6000977, 211.0000000}, //object(roofstuff16) (67)
    {2751.5000000, -2680.6000977, 202.0000000}, //object(roofstuff16) (69)
    {2746.1000977, -2680.6000977, 207.0000000}, //object(roofstuff16) (70)
    {2751.5000000, -2694.1000977, 210.0000000}, //object(roofstuff16) (71)
    {2746.1000977, -2694.1000977, 210.0000000}, //object(roofstuff16) (72)
    {2746.1000977, -2698.6000977, 203.0000000}, //object(roofstuff16) (73)
    {2751.5000000, -2698.6000977, 211.0000000}, //object(roofstuff16) (74)
    {2756.8999023, -2662.6000977, 203.0000000}, //object(roofstuff16) (75)
    {2762.3000488, -2662.6000977, 200.0000000}, //object(roofstuff16) (76)
    {2756.8999023, -2667.1000977, 213.0000000}, //object(roofstuff16) (77)
    {2756.8999023, -2671.6000977, 211.0000000}, //object(roofstuff16) (78)
    {2756.8999023, -2698.6000977, 200.0000000}, //object(roofstuff16) (79)
    {2756.8999023, -2676.1000977, 209.0000000}, //object(roofstuff16) (80)
    {2756.8999023, -2680.6000977, 215.0000000}, //object(roofstuff16) (81)
    {2756.8999023, -2685.1000977, 199.0000000}, //object(roofstuff16) (82)
    {2756.8999023, -2689.6000977, 206.0000000}, //object(roofstuff16) (83)
    {2756.8999023, -2694.1000977, 202.0000000}, //object(roofstuff16) (84)
    {2767.6999512, -2662.6000977, 204.0000000}, //object(roofstuff16) (85)
    {2762.3000488, -2667.1000977, 211.0000000}, //object(roofstuff16) (86)
    {2762.3000488, -2671.6000977, 210.0000000}, //object(roofstuff16) (87)
    {2762.3000488, -2676.1000977, 211.0000000}, //object(roofstuff16) (88)
    {2762.3000488, -2680.6000977, 207.0000000}, //object(roofstuff16) (89)
    {2767.6999512, -2667.1000977, 206.0000000}, //object(roofstuff16) (90)
    {2767.6999512, -2671.6000977, 204.0000000}, //object(roofstuff16) (91)
    {2767.6999512, -2676.1000977, 200.0000000}, //object(roofstuff16) (92)
    {2767.6999512, -2680.6000977, 209.0000000}, //object(roofstuff16) (93)
    {2767.6999512, -2685.1000977, 213.0000000}, //object(roofstuff16) (95)
    {2762.3000488, -2685.1000977, 205.0000000}, //object(roofstuff16) (96)
    {2767.6999512, -2689.6000977, 205.0000000}, //object(roofstuff16) (97)
    {2762.3000488, -2689.6000977, 207.0000000}, //object(roofstuff16) (98)
    {2767.6999512, -2694.1000977, 207.0000000}, //object(roofstuff16) (99)
    {2762.3000488, -2694.1000977, 211.0000000}, //object(roofstuff16) (100)
    {2767.6999512, -2698.6000977, 206.0000000}, //object(roofstuff16) (101)
    {2762.3000488, -2698.6000977, 206.0000000}, //object(roofstuff16) (102)
    {2735.3000488, -2658.1000977, 204.0000000} //object(roofstuff16) (103)
};


//==============================TextDraws=======================================

new Text:PPEarned;


new PlayerText:pInfoTD[MAX_PLAYERS];
new PlayerText:damagetd[MAX_PLAYERS][2];
new PlayerText:hittd[MAX_PLAYERS][2];
new PlayerText:Textdraw022[MAX_PLAYERS];
new PlayerText:Textdraw023[MAX_PLAYERS];
new PlayerText:Textdraw024[MAX_PLAYERS];
new PlayerText:GarageTD[MAX_PLAYERS][21];
new Text:blackTD;
//new Text:Logo[5];
new LogoCount, sNameCount, sNameCount2;
new PlayerText:ScoreTD[MAX_PLAYERS];
new PlayerText:SpeedO[MAX_PLAYERS][9];
new Iterator:pNos<MAX_PLAYERS>;

new pSpeedo[MAX_PLAYERS];
new Text:ExportTD[6];

new PlayerText:gCol[MAX_PLAYERS][26];
new gColCreated[MAX_PLAYERS];
//new PlayerText:pTargetTD[MAX_PLAYERS][6];
#define StatsTDS 20
new PlayerText:pStatsTD[MAX_PLAYERS][StatsTDS];

new PlayerText:wantedTD[MAX_PLAYERS][2];
new PlayerText:PropTD[MAX_PLAYERS][8];
new PlayerText:VDP[MAX_PLAYERS][10];


new Text:ScreenTXDS[12];
new TeleShowC;
new Text:clock;
new Text:dayTD;
new Text:TdTimeLeftClock;
new Text:DateTD;
new PlayerText:FPS[MAX_PLAYERS];
new Spawned[MAX_PLAYERS];
new CanFps[MAX_PLAYERS];
new PlayerText:DMpTD[MAX_PLAYERS][8],
    Text:GunBattleTD[6],
    PlayerText:pGunBattle[MAX_PLAYERS];
new BotVehicle;

new ChatLocked;

//new ExportABLE[MAX_VEHICLES];
new BankCP[5], BankPickup[5], xMasPickUp[6];
new BankArea[3];
//new MarketArea;
//new MarketArea2;
new JailArea;
new BoboBitch[MAX_PLAYERS];
new CanonRecordPlayers[5][50];
new Float:CanonRecordDistance[5];

new lecanonarea[3];
new InCanon[MAX_PLAYERS];
new InDive[MAX_PLAYERS];
//new Partycp;

new CarDealerCP[9];

new rTestcount;
new DuelCount;
new rTestStr[256];
new rMoney;
new rTest=0;
new rTestTimer;

new PlayerText:HealthBar[MAX_PLAYERS],
	PlayerText:ArmourBar[MAX_PLAYERS];
new CountDownTimer[MAX_PLAYERS];

new gmxcount;

new Party;
new ShipPartyCount;
new Float:partyX, Float:partyY, Float:partyZ, partyVw;
new Ship1, Ship2, Ship3;

new Balloon;
new BalloonMoving;

new Float:v_Dealer_Cam[][6] =
{
      {-1656.7263, 1204.6628, 23.9139, -1649.7770, 1206.5537, 20.8610},
      {-1656.1594, 1204.4027, 23.9139, -1653.6705, 1211.8158, 20.8610},
      {-1662.0554, 1210.0977, 23.6090, -1659.6633, 1217.4447, 20.8610},

      {-1663.6553, 1214.6686, 24.5402, -1665.9857, 1223.5977, 20.8610},
      {-1660.2551, 1216.3279, 23.6563, -1663.0129, 1207.6506, 20.8610},

      {-1668.0054, 1213.9723, 23.7030, -1671.9613, 1206.0613, 20.8610},
      {-1660.7493, 1206.0320, 16.9900, -1654.0251, 1211.5647, 13.8610},

      {-1661.1619, 1208.3552, 17.5224, -1658.8164, 1217.4502, 13.4230},
      {-1668.1578, 1209.0616, 16.1953, -1678.3502, 1208.8379, 13.8612},
      {-1657.6957, 1208.4226, 9.5863, -1663.0093, 1213.5084, 7.0722},
      {-1651.4689, 1236.5039, 11.0850, -1652.5338, 1227.6162, 6.6342},
      {-1631.5970, 1214.2302, 10.4668, -1639.2550, 1213.9758, 7.0722}
};

new Float:v_Dealer_Cam2[][6] =
{
      {205.0031, -260.3615, 6.1361, 200.1308, -268.3527, 1.4520},
      {204.2565, -260.7723, 7.1554, 209.1727, -269.4899, 1.4520},
      {213.0986, -261.1779, 7.4536, 218.9167, -268.1016, 1.4520},
      {212.2929, -264.9301, 5.0905, 218.8846, -259.9986, 1.4520},
      {212.0781, -255.1220, 5.2961, 218.9139, -250.3793, 1.4520},
      {212.2722, -247.0914, 5.7266, 219.2654, -240.2833, 1.4520},
      {203.8109, -246.7350, 4.5532, 197.0967, -241.2842, 1.4520},
      {201.5733, -256.0944, 6.1528, 196.9142, -250.5588, 1.4520},
      {204.7783, -252.5337, 6.3038, 197.4783, -259.2195, 1.8900},
      {203.8091, -241.2221, 6.9885, 207.9366, -249.7951, 1.2330},
      {203.4302, -240.2001, 5.9945, 209.1252, -244.4852, 1.2330},
      {208.4611, -239.6906, 3.2918, 204.6197, -232.4356, 1.4520}
};
new Float:v_Dealer_Cam3[][6] =
{
      {2143.8835, 1415.6329, 14.4518, 2148.6980, 1408.7145, 10.6917},
      {2137.5010, 1415.8077, 15.0331, 2142.2222, 1408.9690, 10.9107},
      {2131.6563, 1416.2507, 15.8018, 2135.8845, 1409.0376, 10.9107},
      {2124.3040, 1415.6890, 13.2705, 2129.5151, 1408.9973, 10.6917},
      {2119.3113, 1414.6096, 13.2705, 2123.1479, 1409.1702, 10.6917},
      {2110.9722, 1415.0294, 13.7361, 2116.7661, 1409.3435, 10.4727},
      {2105.2822, 1415.7952, 13.1799, 2110.2192, 1409.4955, 10.6917},
      {2097.8389, 1414.9127, 13.2349, 2104.0100, 1409.6641, 10.6917},
      {2099.7549, 1391.7115, 13.4929, 2104.0408, 1397.9691, 10.6917},
      {2105.8987, 1391.7480, 13.4929, 2110.2810, 1397.7881, 10.6917},
      {2111.0769, 1392.8212, 13.4929, 2116.7620, 1397.8595, 10.6917},
      {2118.0769, 1393.8212, 13.4929, 2123.1458, 1398.2184, 10.6917}
};

new Float:v_Dealer_Cam4[][6] =
{
      {2129.5330, -1131.0984, 30.0985, 2136.4561, -1126.9408, 25.0848},
      {2131.1309, -1132.0719, 29.0140, 2136.7354, -1135.4905, 25.0848},
      {2132.7952, -1139.5251, 27.1683, 2136.2874, -1143.0586, 24.4848},
      {2135.9209, -1144.6062, 25.8017, 2136.6257, -1149.9530, 23.9848},
      {2122.8809, -1145.0902, 26.9538, 2118.3303, -1146.8735, 24.4848},
      {2122.8809, -1145.0902, 26.9538, 2118.4961, -1141.9974, 24.4848},
      {2122.2966, -1139.6688, 26.4787, 2118.8047, -1136.7280, 24.9848},
      {2120.4580, -1134.0482, 26.2177, 2118.8723, -1131.4517, 24.9848},
      {2122.2891, -1128.8926, 26.9770, 2118.8857, -1126.1407, 25.4848},
      {2122.4187, -1124.7881, 26.7551, 2119.2708, -1122.3726, 25.4848},
      {2126.0518, -1111.0950, 26.9355, 2121.1941, -1115.0839, 24.9848},
      {2131.9297, -1114.1133, 26.9355, 2131.6033, -1118.1989, 24.9848}
};


new Float:v_Dealer_Cam5[][6] =
{
      { -1960.2180, 298.1718, 43.4567, -1955.2244, 304.8512, 40.6652},
      { -1958.4270, 302.9115, 43.8224, -1954.1698, 297.8695, 40.6652},
      { -1957.4923, 297.8636, 43.3973, -1953.2952, 291.7023, 40.6652},
      { -1951.5302, 269.1762, 43.5883, -1946.0688, 274.2183, 40.6652},
      { -1949.9523, 263.9052, 44.3258, -1945.8435, 258.0250, 40.6652},
      { -1951.6733, 267.0446, 43.0177, -1955.7736, 260.4286, 40.6652},
      { -1956.4443, 296.2280, 37.5123, -1955.0641, 304.5766, 35.1331},
      { -1959.0919, 302.7368, 38.2112, -1955.1816, 297.5734, 35.1331},
      { -1950.4119, 255.7396, 38.0370, -1945.5983, 260.9276, 35.1331},
      { -1950.4573, 265.3572, 38.9477, -1946.1061, 271.4795, 35.1331},
      { -1981.2290, 301.0260, 39.4040, -1975.3865, 306.1211, 34.9141},
      { -1980.4124, 300.0826, 40.0822, -1985.2689, 306.7773, 34.9141}
};
new Float:v_Dealer_Cam6[][6] =
{
      {559.1574, -1283.1252, 21.0346, 564.4639, -1290.1797, 17.0028},
      {553.7360, -1283.6926, 21.0189, 558.0061, -1289.9794, 17.0028},
      {545.8597, -1282.6686, 21.0189, 551.0356, -1290.0228, 17.0028},
      {538.9960, -1283.7822, 20.6565, 543.6786, -1290.2620, 17.0028},
      {531.0998, -1283.8927, 21.0065, 536.3710, -1290.3136, 17.0028},
      {534.2816, -1284.5455, 21.5221, 533.7218, -1276.6769, 17.0028},
      {541.7775, -1281.7090, 21.2596, 539.6473, -1272.2108, 17.0028},
      {545.4966, -1276.9670, 20.4649, 544.9549, -1268.3191, 17.0028},
      {549.5588, -1273.9889, 20.6173, 550.4936, -1264.4331, 17.0028},
      {555.1600, -1264.3873, 20.3455, 562.1191, -1267.7461, 17.0028},
      {556.2802, -1269.3593, 20.6268, 563.4847, -1274.1029, 17.0028},
      {557.4399, -1273.3616, 22.0623, 564.7656, -1279.7179, 17.0028}
};
new Float:v_Dealer_Cam7[][6] =
{
      {1727.2750, 1880.8992, 12.6828, 1731.4641, 1886.3473, 10.4226},
      {1740.0725, 1864.9373, 15.9018, 1745.5807, 1856.8529, 11.4226},
      {1729.7423, 1864.9734, 16.2424, 1734.3033, 1856.4357, 10.9226},
      {1723.8386, 1864.1168, 15.5487, 1728.2397, 1856.8690, 10.9226},
      {1718.6426, 1865.1011, 15.5956, 1722.1454, 1856.8627, 10.9226},
      {1748.8337, 1893.7206, 15.0308, 1742.6505, 1886.8822, 10.9226},
      {1743.5153, 1864.3915, 15.2377, 1752.0797, 1874.4775, 11.4226},
      {1740.0808, 1869.2922, 17.1470, 1724.0759, 1871.7944, 12.0933},
      {1746.8464, 1917.0118, 13.2888, 1741.4337, 1912.0637, 10.5933},
      {1744.0435, 1917.0784, 12.6420, 1741.7202, 1921.5477, 10.5933},
      {1747.7111, 1921.9207, 15.4895, 1742.2646, 1930.0449, 11.0933},
      {1750.7052, 1951.3805, 12.8475, 1742.9127, 1943.9741, 11.0933}
};
new Float:v_Dealer_Cam8[][6] =
{
      {373.9022, 2522.3582, 25.9788, 365.1404, 2536.8909, 17.2045},
      {400.2729, 2520.1733, 29.2549, 385.6014, 2537.8237, 18.2045},
      {355.5651, 2524.1816, 23.7173, 346.6374, 2535.3704, 17.2045},
      { 333.7065, 2526.3909, 24.2144, 325.4587, 2538.2236, 17.2045},
      {336.6490, 2487.7480, 28.9683, 317.0185, 2498.2461, 18.2045},
      {343.4074, 2491.5227, 25.3195, 346.8497, 2505.5469, 17.2045},
      {386.9197, 2483.0386, 30.7401, 413.3745, 2501.9792, 18.7045},
      {302.3631, 2521.8418, 23.0426, 292.1422, 2537.4226, 18.2045},
      {295.4257, 2501.6348, 28.4629, 277.3446, 2513.1523, 16.7045},
      {300.5120, 2492.4487, 26.4402, 287.9230, 2483.7126, 17.2045},
      {245.0876, 2507.3413, 27.0115, 251.4063, 2489.7908, 17.2045},
      {162.9198, 2573.7041, 59.5607, 188.1707, 2501.0303, 16.2045}
};
new Float:v_Dealer_Cam9[][6] =
{
      { -561.8897, 2611.3181, 69.6129, -558.0089, 2606.6321, 65.0272},
      { -561.6201, 2608.1436, 67.7820, -562.3956, 2603.8687, 65.0272},
      { -566.2383, 2608.6313, 68.1288, -567.8146, 2603.5803, 65.0272},
      { -577.9128, 2602.8535, 67.4491, -573.1581, 2606.0625, 65.0272},
      { -578.1312, 2595.1948, 69.3096, -572.4229, 2593.9172, 65.0272},
      { -536.8695, 2618.1824, 58.7403, -527.9128, 2626.2722, 53.0272},
      { -535.6573, 2601.1748, 58.2356, -529.1263, 2606.7915, 53.5272},
      { -536.4846, 2589.9556, 58.7066, -529.0888, 2581.4346, 53.5272},
      { -522.3820, 2593.8745, 61.6583, -509.4685, 2604.4097, 54.0272},
      { -522.2092, 2567.7642, 60.2581, -512.0492, 2574.4924, 54.0272},
      { -515.4317, 2571.0139, 57.2730, -520.3167, 2566.9519, 53.5272},
      { -514.2452, 2564.5308, 58.0267, -520.8105, 2558.8599, 53.5272}
};

new Float:BallonCords[][3] =
{
      {-2289.7161, -1637.6492, 483.0000},
      {-2289.7161, -1637.6492, 550.0000},
      {-1903.8715, -1644.6964, 540.0000},
      {-1829.8638, -656.0658, 540.0000},
      {-1896.8696, -83.7276, 200.0000},
      {-1986.8634, 165.5894, 150.0000},
      {-1948.1128, 404.4624, 150.0000},
      {-2034.3503, 522.9493, 150.0000},
      {-2360.9995, 674.7373, 200.0000},
      {-2447.8843, 928.7947, 200.0000},
      {-2445.8701, 1124.6885, 200.0000},
      {-2532.2971, 1238.1860, 150.0000},
      {-2445.8701, 1124.6885, 200.0000},
      {-2447.8843, 928.7947, 200.0000},
      {-2360.9995, 674.7373, 200.0000},
      {-2034.3503, 522.9493, 150.0000},
      {-1948.1128, 404.4624, 150.0000},
      {-1986.8634, 165.5894, 150.0000},
      {-1896.8696, -83.7276, 200.0000},
      {-1829.8638, -656.0658, 540.0000},
      {-1903.8715, -1644.6964, 540.0000},
      {-2289.7161, -1637.6492, 550.0000},
      {-2289.7161, -1637.6492, 483.0000}
};

new Float:Titanic1Coords[][6] = //93
{
      {-1415.2278, 178.8590, 35.5700 , 0.0000, 0.0000, 45.0000},
      {-1046.8055, 545.8651, 35.5700, 0.0000, 0.0000, 45.0000},
      {-1068.0116, 597.9653, 35.5700, 0.0000, 0.0000, 0.0000},
      {-984.4982, 597.2338, 35.5700, 0.0000, 0.0000, -14.0000},
      {-693.9249, 514.3314, 35.5700, 0.0000, 0.0000, -16.0000},
      {-343.6650, 386.5757, 35.5700, 0.0000, 0.0000, -5.0000}, //start the shit
      {99.7249, 310.9523, 35.5700, 0.0000, 0.0000, 10.0000}, //crashed
      {115.8157, 276.7807, 35.5700, 0.0000, 0.0000, 40.0000},
      {290.2462, 418.0674, 71.3000, 0.0000, 50.0000, 40.0000},
      {290.2462, 418.0674, 29.9000, 0.0000, 50.0000, 40.0000}
};
new Float:Titanic2Coords[][6] = //94
{
      {-1361.5927, 232.4753, 7.0000, 0.0000, 0.0000, 45.0000},
      {-993.9478, 598.6451, 7.0000, 0.0000, 0.0000, 45.0000},
      {-993.3140, 597.5258, 7.0000, 0.0000, 0.0000, 0.0000},
      {-911.5853, 578.8046, 7.0000, 0.0000, 0.0000, -14.0000},
      {-621.7428, 493.4192, 7.0000, 0.0000, 0.0000, -16.0000},
      {-268.5040, 379.8922, 7.0000, 0.0000, 0.0000, -5.0000}, //start the shit
      {174.1780, 324.1174, 7.0000, 0.0000, 0.0000, 10.0000}, //crashed
      {173.6760, 324.8739, 7.0000, 0.0000, 0.0000, 40.0000},
      {313.2526, 437.4551, 1.0000, 0.0000, 50.0000, 40.0000},
      {313.2526, 437.4551, -39.0000, 0.0000, 50.0000, 40.0000}
};
new Float:Titanic3Coords[][6] = //95
{
      {-1363.3668, 230.5191, 17.0500, 0.0000, 0.0000, 45.0000},
      {-995.2252, 597.4672, 17.0500, 0.0000, 0.0000, 45.0000},
      {-995.1288, 597.9356, 17.0500, 0.0000, 0.0000, 0.0000},
      {-913.5530, 579.4688, 17.0500, 0.0000, 0.0000, -14.0000},
      {-624.0149, 494.0974, 17.0500, 0.0000, 0.0000, -16.0000},
      {-270.9716, 380.1544, 17.0500, 0.0000, 0.0000, -5.0000}, // start the shit
      {171.8441, 323.7453, 17.0500, 0.0000, 0.0000, 10.0000}, //crashed
      {171.8441, 323.7453, 17.0500, 0.0000, 0.0000, 40.0000},
      {315.9788, 439.8584, 4.0000, 0.0000, 50.0000, 40.0000},
      {315.9645, 439.8445, -37.0000, 0.0000, 50.0000, 40.0000}
};

//-----------------------------Vip - Cookies Menu-------------------------------
new CookCP;
new VIPCP;
new Menu:CookMenu;
new Menu:VipMenu;

//-----------------------------Level System ------------------------------------
#define combat 0
#define fist 1
#define hitpoint 2
#define drugdealing 3
#define driving 4
#define gangster 5
#define medicine 6
#define justice 7
new skullname[][15]={
{"Combat"},
{"Fist"},
{"HitPoint"},
{"Dealing"},
{"Driving"},
{"Gangster"},
{"Medicine"},
{"Justice"}
};

new PlayerText:ShiText[MAX_PLAYERS][35];
new pEXP[MAX_PLAYERS][8];
new pLevel[MAX_PLAYERS][8];
//-------------------------------Speed Records----------------------------------
new SpeedRecords[20];
new SpeedRecordArea[20];

new SpeedRecordNames[20][50]=
{
{"King's"},
{"Juniper Hill"},
{"Ocean Flats"},
{"Gant Bridge"},
{"Calton Heights"},
{"Downtown"},
{"The Strip"},
{"The Emerald Isle"},
{"Julius Thruway North"},
{"Julius Thruway East"},
{"Julius Thruway South"},
{"Abandoned Airport"},
{"Ganton"},
{"Glen Park"},
{"Market Station"},
{"Verona Beach"},
{"Rodeo"},
{"Las Colinas"},
{"Shady Creeks"},
{"Red Country"}
};
//-----------------------------Houses& properties-------------------------------
#define MAX_PROPS                   150
#define MAX_HOUSES                  800

new HousePickup[MAX_HOUSES];

new HouseIcon[MAX_HOUSES];

new CanOpenMenu[MAX_PLAYERS];
new CantBotChat[MAX_PLAYERS];
enum HouseInfo
{
  Owner[24],
  Name[64],
  Cost,
  Score,
  PP,
  Interior,
  VirtualWorld,
  Locked,
  HInt,
  Float:InteriorX,
  Float:InteriorY,
  Float:InteriorZ,
  Float:InteriorA,
  Float:ExteriorX,
  Float:ExteriorY,
  Float:ExteriorZ,
  Float:CarX,
  Float:CarY,
  Float:CarZ,
  Float:CarA,
  Float:sX,
  Float:sY,
  Float:sZ,
  Float:SpawnA,
  LastVisit,
  hOwnerID
}
new hInfo[MAX_HOUSES][HouseInfo];
new hExist[MAX_HOUSES];
new Hvw=100;

enum properties
{
  ID,
  Owner[24],
  Name[64],
  Pickup,
  Float:Pos[3],
  Earnings
}



new pInfo[MAX_PROPS][properties];

new Menu:Cars_Discount[9];
new Menu:Cars[11];
new Menu:NotOwnedMenu;
new Menu:OwnedMenu;
new Menu:NotOwnedMenu2;
new Menu:OwnedMenu2;

new Menu:PropMenu1;
new Menu:PropMenu2;

#if defined USE_OLDBANK
new PlayerText:BankTD[MAX_PLAYERS];
new Menu:BankMainMenu;
new Menu:BankMainMenu2;
new Menu:BankMenu;
new Menu:BankMenu2;
new Menu:BankMenu3;
#endif

new Menu:InsideHouseMenu;
new Menu:CanonMenu;
new Menu:StuntMenu;

#if defined USE_OLDBANK
new Menu:BankMenu_;
new Menu:BankMenu2_;
new Menu:BankMenu3_;
#endif

new Menu:BaseMenu_NoSell;
new Menu:BaseMenu_NoBuy;
new Menu:BaseMenu2;
new Menu:BaseMenu2_;
new Menu:PhoneMenu;

new InHouse[MAX_PLAYERS];

enum OMG
{
   ch,
   chr,
   cg,
   cmodel[3]
}
new AttachedOBJ[MAX_PLAYERS][OMG];
//
#define MAX_GATES 200
//=================================Gates========================================
enum GanfoGTFO
{
   ObjectID,
   Float:gPos[6],
   Float:gmovedPos[6],
   Houses[10],
   IsOpened,
   gKeypad1,
   gKeypad2,
   gKeypad3,
   g_type,
   g_range,
   Float:k1[4],
   Float:k2[4],
   Float:k3[6],
   Float:ok3[6],
   gModel,
   HideObj,
   Float:gSpeed
}
new GateInfo[MAX_GATES][GanfoGTFO];

new VipGarCP;
//===========================FPS================================================
new fps[MAX_PLAYERS], lastDrunkLeve[MAX_PLAYERS], drunkLevel[MAX_PLAYERS];
//==========================Fire Works==========================================

#define MAX_FIREWORKS 15 //fireworks shown at one time
enum jects
{
   Color,
   ColorObj[10],
   ColorObj2[15],
   mis[2],
   Float:fPos[3],
   active
}
new FireWork[MAX_FIREWORKS][jects];

//=============================Dialogs==========================================
#define DM_DIALOG 1440

#define DIALOG_REGISTER 1
#define DIALOG_LOGIN 2
//#define DIALOG_REGISTER2 5
#define DIALOG_DUEL    	1770
#define DIALOG_SELL_HOUSE 1771

//=======================SavingSys+pStates======================================
new Paused[MAX_PLAYERS];
new Pauseda[MAX_PLAYERS];
new Float:pPausex[MAX_PLAYERS];
new Float:pPausey[MAX_PLAYERS];
new Float:pPausez[MAX_PLAYERS];
new PassCount[MAX_PLAYERS];
new rampobj[MAX_PLAYERS];

enum tk
{
	AskTick, ReportTick, FineTick, VTick, MeSpam, SumoJoin, PoolJoin, TTTJoin, LastSumo, TakePickup, OffetTK, RobTK, StunTK, DrugTK, SpeedTK, TagTK, tSpawned, Fight, heal, arrest, export, ramp, Knock, vDamage, bJob, repair, cuff, house, bomb, GangCreating, carpark, lastfp
};
new TickCount[MAX_PLAYERS][tk];


new JumpTK[MAX_PLAYERS];
new GangTK[MAX_GANGS];
new LastGangAttack[MAX_GANGS];
enum prInfo2
{
	numplate[32],
	Fbumps,
	Rbumps,
	Hood,
	SS,
	Spoiler,
	Ex,
	Wheel

};
new Player_Info[MAX_PLAYERS][prInfo2];
new PourPlaces[12];
new pMods[MAX_PLAYERS][20];
new p_A_Level[MAX_PLAYERS];
enum prInfo
{
    UserID, pCash, pScore, pAdmin, pKills, pDeaths, IsVIP, pVip, pOurAdmin, pRaceAdmin, pCwAdmin, Mission,
	HeadText[54], HeadTextColor, pHours, pMins, pHouse, pCar, pGang, pGangRank, pBank, pExported, Ramp, pDriftW,
	pWDerby, pWLms, pWpOurs, pWRace, pWDuel, HS, vDamage, rTestWon, pBeatUp, ksHighScore,
	pGWinz, pGWlost, pRrecord, pDrecord, pBounty, PfOutW, currentks, SumoWinz, pTrucking, DelevryType, DelevryTime,
	pVipSkin, pVipJob, pVipWeapon1, pVipWeapon2, pVipWeapon3, pVipAmmo1, pVipAmmo2, pVipAmmo3, Muted, Jailed,
	DDWins, COWins, CSWins, FCWins, HayWins, MGWins, FBWins, TTTWins, GGWins, Heals, blowjobs, carsrepaired, bountiesearned, diveswon, Arrests, pBombed, Drunk, pFS, pCook, VipItems[5], premiumItems[5], pSecV, pSecVc1, pSecVc2, pSecNitro, pSecWheel,
	PoolWon, rTs, pWCTF, readgchat, readvchat, readcmds, SRWins, TileWins, vipexpiresin, inHours, HouseFix, inScore, pOutRunz, pTile, inKills, inHS, inExport, pCommands, StatsMSG[50], pDrugs, pDrugLevel, pSpeedR, PDrugSp, pEventWon
};

new RconPass[MAX_PLAYERS][50];
new IsRCON[MAX_PLAYERS];

new DrugsEffect[MAX_PLAYERS];
new dOffered[MAX_PLAYERS];
new dOffers[MAX_PLAYERS];
new dOfferMoney[MAX_PLAYERS];
new AdminPass[MAX_PLAYERS][50];
new pMedKets[MAX_PLAYERS];
new pRepairKets[MAX_PLAYERS];
new PlayerInfo[MAX_PLAYERS][prInfo];
new Blowjobbing[MAX_PLAYERS];
new SecV[MAX_PLAYERS];
enum cloth
{
   Glass,
   GlassString[200],
   Caps,
   HatString[200]
}
new PlayerClothes[MAX_PLAYERS][cloth];

new pMoney[MAX_PLAYERS];
new pName[MAX_PLAYERS][MAX_PLAYER_NAME+1];
new pEscName[MAX_PLAYERS][30];

new NEON[MAX_PLAYERS];

new GangInfoView[MAX_PLAYERS];

new Float:Interiors[][5] = // Random Spawns
{
    {5.00, 140.1788, 1369.1936, 1083.8641, 359.2263}, //0 // mansions
    {12.00, 2324.4490, -1145.2841, 1050.7101, 357.5873}, //1
    {9.00, 2320.0730, -1023.9533, 1050.2109, 358.4915}, //2 //normal
    {8.00, 2365.2883, -1132.5228, 1050.8750, 358.0393}, //3
    {3.00, 2495.8035, -1695.0997, 1014.7422, 181.9661}, //4 //cjhouse
    {1.00, 2214.8909, -1076.0967, 1050.4844, 88.8910}, //5 //normal
    {5.00, 2233.6057, -1111.7039, 1050.8828, 2.9124}, //6 //smal house
    {6.00, 2193.9001, -1202.4185, 1049.0234, 91.9386}, //7 //Villa
    {0.00, -11.8886, 1505.7557, 77.8156,  257.3651}, //8//ufo house 20
    {0.00, 49.4335,  1488.6993, 77.8156,  87.31626}, //9//ufo house 21
    {0.00, -1635.7112,  -2239.0850, 31.4766,  262.0000}, //10
	{5.00, 1263.0787, -785.3076, 1091.9063, 275.0000}, //11 // Maddog
	{1.00, 1.808619, 32.384357, 1199.593750, 180.00}, //12	  //Shamal
    {0.0, 1254.3190, -823.5728, 89.6144, 268.399}, //13
    {0.0, 1909.1932, -4418.1992, 119.2238, 89.3520}, //14
    {0.0, 2352.6855, -655.9788, 128.0547, 91.8349}, //15
    {0.0, -2084.5889, 1371.0323, 7.1016, 357.9261}//16
};


new Float:Jail[][4] =
{
    {-1087.1406, -979.2577, 129.2688, 93.2327},
    {-1087.4220, -984.0989, 129.2688, 85.8797},
    {-1087.6196, -988.2892, 129.2688, 86.6342},
    {-1092.1074, -993.7301, 129.2688, 358.6936},
    {-1096.4094, -993.2579, 129.2688, 359.6127},
    {-1101.6910, -993.2438, 129.2688, 359.6127},
    {-1087.1406, -979.2577, 133.4554, 93.2327},
    {-1087.4220, -984.0989, 133.4554, 85.8797},
    {-1087.6196, -988.2892, 133.4554, 86.6342},
    {-1092.1074, -993.7301, 133.4554, 358.6936},
    {-1096.4094, -993.2579, 133.4554, 359.6127},
    {-1101.6910, -993.2438, 133.4554, 359.6127}
};

new Float:wwcoords[][4]=
{
   {-1226.9396, 455.9844, 7.1875, 90.6050},
   {-1263.0525, 439.5345, 7.1809, 358.1709},
   {-1317.6240, 462.2152, 7.1875, 270.7500},
   {-1272.6660, 478.8489, 7.1875, 174.5557}
};


new Float:ww2coords[][4]=
{
   {-1444.2783, 998.2486, 1024.2339, 268.5609},
   {-1360.6357, 997.6739, 1024.0713, 94.6592},
   {-1398.4031, 970.2747, 1024.3242, 7.5517},
   {-1398.8025, 1025.0803, 1025.6927, 182.3700}
};
new Float:BFCoords[][4] =
{
        {260.5606, 1808.7671, 33.8984, 40.5779},
        {221.5981, 1813.7551, 17.6406, 50.3382},
        {174.1036, 1846.3524, 17.6406, 42.1914},
        {104.2321, 1889.7118, 18.1396, 300.6938},
        {228.6232, 1893.2021, 17.6481, 42.6858},
        {211.3941, 1810.7582, 21.8672, 359.7001}
};



new Float:TDm1SP1[3][4] =
{
{2506.9231, 2745.4146, 10.8203, 343.1541},
{2531.4355, 2748.0732, 10.8203, 6.9678},
{2566.8567, 2747.3784, 10.8203, 35.4814}
};
new Float:TDm1SP2[3][4] =
{
{2570.0901, 2816.1819, 10.8203, 79.6617},
{2569.1633, 2836.0505, 10.8203, 116.9487},
{2583.4070, 2825.5032, 10.8203, 91.8818}
};
new Float:TDm2SP1[3][4] =
{
/*{2767.9990, -2429.5305, 13.6484, 166.7691},
{2757.1729, -2431.1648, 13.4831, 166.7691},
{2740.0059, -2432.8406, 13.6297, 186.5093}*/
{1306.8712, 2108.9302, 11.0156, 329.0936},
{1389.4056, 2108.5623, 11.0156, 33.3275},
{1349.9060, 2109.0222, 11.0156, 358.8605}
};
new Float:TDm2SP2[3][4] =
{
/*{2702.5078, -2507.6292, 13.4547, 278.3404},
{2702.4700, -2497.7642, 13.6641, 257.6602},
{2695.8572, -2500.8025, 13.4753, 257.6602}*/
{1305.7428, 2191.2920, 11.0234, 220.9925},
{1350.9998, 2191.1003, 11.0234, 178.6921},
{1389.8568, 2191.1260, 11.0234, 152.9986}
};


new Float:TDm3SP1[3][4] =
{
/*{-1431.0819, 489.9099, 3.0391, 284.2703},
{-1417.9038, 499.0768, 3.0391, 281.7635},
{-1431.7233, 505.9820, 3.0414, 234.7631}*/
{-2150.2139, -165.6002, 35.3203, 210.4093},
{-2121.2617, -200.2557, 35.3203, 119.8551},
{-2119.6279, -258.3741, 35.3203, 1.4140}
};
new Float:TDm3SP2[3][4] =
{
/*{-1346.3855, 506.7912, 11.1953, 194.0295},
{-1339.4581, 497.8766, 11.1953, 81.2285},
{-1347.1277, 493.0895, 11.2027, 28.2746}*/
{-2187.8284, -232.7240, 36.5156, 356.0639},
{-2158.3235, -261.0154, 36.5156, 358.5472},
{-2146.0459, -231.6538, 36.5156, 91.2713}
};




new Float:Dm1SP[3][4] =
{
{-2187.7495, -236.3353, 37.9595, 278.1712},
{-2183.4138, -207.8275, 36.5156, 163.6990},
{-2144.0620, -233.9885, 36.5156, 93.0938}
};
new Float:Dm2SP[3][4] =
{
{-2303.4502, 139.5448, 35.3125, 149.6335},
{-2305.4363, 91.7739, 35.3125, 43.0993},
{-2369.7217, 77.4284, 35.3125, 299.6982}
};

new Float:Dm3SP[3][4] =
{
{1306.1936, 2109.8308, 11.0156, 320.0303},
{1309.4669, 2187.0706, 11.0234, 224.9848},
{1387.1461, 2188.2690, 11.0234, 136.4570}
};
new Float:Dm4SP[3][4] =
{
{-2358.0461, 94.6873, 35.3125, 290.7809},
{-2297.2285, 137.4780, 35.3125, 133.3634},
{-2292.5383, 82.2072, 35.3125, 61.1290}
};
new Float:Dm5SP[8][4] =
{
{-1130.8344, 1057.8409, 1348.4141, 272.7591},
{-1133.9729, 1097.0062, 1347.8094, 219.2021},
{-1131.3218, 1029.1992, 1346.7289, 275.8925},
{-1062.9312, 1058.5775, 1349.3822, 91.1677},
{-974.7604, 1061.1040, 1347.6774, 94.9042},
{-972.7958, 1021.5626, 1347.0566, 49.5304},
{-976.0079, 1089.5007, 1345.9685, 91.9407},
{-1043.2842, 1059.1163, 1347.6653, 271.7724}
};
new Float:Dm6SP[3][4] =
{
{764.6176, -66.7972, 1001.5692, 220.2815},
{768.9840, -70.7650, 1001.5692, 48.7416},
{764.2773, -68.6134, 1001.5692, 270.7421}
};

new Float:Dm7SP[3][4] =
{
{-596.0815, -3756.7095, 7.4455, 10.4507},
{-510.5476, -3545.3325, 17.6705, 150.0264},
{-588.3386, -3682.2703, 57.9123, 21.6475}
};
new Float:Dm8SP[3][4] =
{
{327.9462, -64.3996, 1002.5156, 90.8314},
{306.0549, -70.5473, 1002.5156, 287.4031},
{305.2140, -58.2362, 1002.5156, 241.2800}
};
new Float:Dm9SP[3][4] =
{
{-1396.5200, 1275.2949, 1041.8672, 180.0000},
{-1397.5731, 1208.6052, 1041.8672, 359.6333},
{-1362.3287, 1233.9620, 1041.8672, 72.3273}
};

new Float:Dm10SP[3][4] =
{
{-794.806396, 497.738037, 1376.195312, 270.7141},
{-781.1926, 496.8490, 1371.7490, 88.9108},
{-808.3407, 508.1689, 1360.2565, 176.2272}
};
new Float:Dm11SP[3][4] =
{
{-2258.2292, 871.3826, 66.5000, 181.159},
{-2260.8721, 718.7744, 49.2969, 358.5075},
{-2283.9436, 809.2576, 49.2969, 270.7734}
};

new Float:Dm12SP[3][4] =
{
{2551.8474, -1292.5571, 1054.6406, 248.0013},
{2560.3525, -1295.6908, 1060.9844, 275.6793},
{2581.2886, -1284.5146, 1065.3571, 92.3775}
};

new Float:Dm13SP[3][4] =
{
{1728.7793, -1668.0795, 22.6094, 130.6992},
{1722.0125, -1646.7245, 20.2273, 90.7006},
{1704.2716, -1655.2793, 20.2201, 180.0459}
};

new Float:Dm14SP[3][4] =
{
{-801.4204, -2079.8784, 24.7671, 214.2876},
{-804.6208, -2081.4805, 24.7671, 208.5431},
{-716.1715, -2128.5190, 26.2950, 105.1421}
};

new Float:Dm15SP[3][4] =
{
{441.7771, -2600.3967, -33.1172, 174.4654},
{435.5923, -2731.9790, -37.7500, 19.2987},
{404.5169, -2688.9531, -37.7500, 327.3684}
};


new Float:Dm17SP[3][4] =
{
{1845.4323, -3530.1995, 7.4263, 13.0738},
{1803.0786, -3445.1167, 4.6489, 222.1736},
{2000.1263, -3486.6184, 4.4505, 89.1962}
};

new Float:Dm18SP[3][4] =
{
{817.1397, -1143.8878, 23.8864, 265.7600},
{963.1319, -1143.0342, 24.0665, 90.9417},
{962.9384, -1029.9045, 30.0921, 177.7359}
};
/*
new Float:Dm20SP[3][4] =
{
{83.0719, 2024.6490, 17.7138, 160.7314},
{89.1326, 2006.5129, 17.9802, 56.3904},
{67.9317, 2011.2893, 17.6406, 301.0826}
};*/
new aWeaponNames[][33] =
{
    {"Reset weaps"}, {"Brass-Knuckles"}, {"GolfClub"}, {"NightStick"}, {"Assault Knife "}, {"BaseballBat"},
    {"Shovel"}, {"PoolCue"}, {"Katana Sword"}, {"Chainsaw"}, {"PurpleDildo"}, {"BigWhiteVibrator"},
    {"MedWhiteVibrator"}, {"SmlWhiteVibrator"}, {"Flowers"}, {"Cane"}, {"Grenade"}, {"Teargas"},
    {"Molotov"}, {"Empty Slot 1"}, {"Empty Slot 2"}, {"Empty Slot 3"},  {"Colt45"}, {"SDPistol"},
    {"Deagle"}, {"Shotgun"}, {"Sawnoff"}, {"Spas12"}, {"Uzi"},
    {"MP5"}, {"AK47"}, {"M4"}, {"Tec9"}, {"Country Rifle"}, {"Sniper"}, {"RPG"},
    {"HeatRPG"}, {"Flamethrower"}, {"Minigun"}, {"Satchel"}, {"Detonator"},
    {"SprayCan"}, {"Extinguisher"}, {"Camera"}, {"NVGoggles"}, {"IRGoggles"},
    {"Parachute"}, {"Fake Pistol"}, {"Reset weaps"}
};
//===========================Gang Bases=========================================
new PlayerGangShow[MAX_PLAYERS][30][30];
new pganggo[MAX_PLAYERS];
new pganggo2[MAX_PLAYERS];

#define MAX_BASES 6
enum gbinfo
{
	BaseName[50],
	zID,
	gbGang,
	gbIcon,
	gbPickup,
	Float:gbPos[3],
	Interior,
	Float:intpos[4],
	Price,
	Float:gSP[4]
}

new GangBases[MAX_BASES][gbinfo]=
{
	{"Chinatown", 29, -255, -255, -255, {-2185.0710, 700.3676, 53.8906}, 1, {-2169.4465, 636.3400, 1052.3750, 262.7769}, 3500000, {-2182.7822, 700.0579, 53.8906, 268.9731}},
	{"The big ear", 0, -255, -255, -255, {-376.6737, 1557.0177, 76.6127}, 1, {681.2532, -452.7944, -25.6172, 182.1304}, 4200000, {-379.1544, 1557.4486, 75.5625, 84.7756}},
	{"The Fanny batter", 15, -255, -255, -255, {1069.6498, 1254.4286, 10.9109}, 6, {759.6971, 1441.3088, 1102.7031, 173.7968}, 5880100, {1071.8369, 1254.5920, 10.9109, 270.9391}},
	{"Glen Park", 119, -255, -255, -255, {1939.1393, -1115.1835, 27.4523}, 5, {318.3654, 1117.7427, 1083.8828, 353.2761}, 2500000, {1939.1774, -1117.8762, 26.4455, 181.3666}},
	{"The Warehouse", 2, -255, -255, -255, {-2002.7148, -2409.8816, 30.6250}, 18, {1302.0889, 4.3607, 1001.0259, 102.5453}, 4500000, {-2004.7681, -2411.3975, 30.6250, 127.8905}},
	{"Meat factory", 281, -255, -255, -255, {2873.7114, 892.2039, 10.7500}, 1, {962.4008, 2107.6399, 1011.0303, 87.1709}, 5200000, {2873.3315, 894.9926, 10.7500, 2.8903}}
};
new InBase[MAX_PLAYERS];

//============================Drift=============================================
#if defined USEDRIFT

#define MAX_DRIFTS 7
new Menu:DriftMenu;

new Text:pDriftTD[MAX_PLAYERS][5];
//new DriftStartTimer;
//new DriftSecs, DriftTimer, DrfitStartCount;

//new bool:DriftStarted;


enum _Rinfo
{
   driftTOP1[24], D_Top1Car[32],
   driftTOP2[24], D_Top2Car[32],
   driftTOP3[24], D_Top3Car[32],
   driftTOP4[24], D_Top4Car[32],
   driftTOP5[24], D_Top5Car[32],
   driftTOP[5]
}
new DriftRecords[MAX_DRIFTS][_Rinfo];




new pDCP[MAX_PLAYERS], pDCOUNTER[MAX_PLAYERS];
#endif
//Spec
new SpecMoney[MAX_PLAYERS], SpecWorld[MAX_PLAYERS], SpecInter[MAX_PLAYERS];
new IsSpecing[MAX_PLAYERS], IsBeingSpeced[MAX_PLAYERS], spectatorid[MAX_PLAYERS];
new PlayerText:SpecInfo[MAX_PLAYERS][3];

//===============================Sumo===========================================
new Iterator:InSumo<MAX_PLAYERS>;
new nextroundtimer;
new SumoLastHitTimer[MAX_PLAYERS];
new SumoSpecID[MAX_PLAYERS];
new SumoDied[MAX_PLAYERS];
new SumoSecs[MAX_PLAYERS];
new bool:FallDown[MAX_PLAYERS];
new bool:UnderZ[MAX_PLAYERS];
new bool:Suicide[MAX_PLAYERS];
new bool:SumoPaused[MAX_PLAYERS];
new bool:SumoCamping[MAX_PLAYERS];

new ring;
new sumocam;
new SumoSpec[MAX_PLAYERS];

new Float:SumoMinZ[13]= {87.0, 69.0, 530.0, 45.0, 8.0, 62.0, 324.0, 187.0, 17.0, 195.0, -37.0, 76.2, 39.0};
new SumoAutoRepair[13]= {0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1};

new Float:SpawnsRing1[20][4]={
{1802.2799, -2673.6528, 96.6046, 3.1001},
{1781.1876, -2661.9636, 96.6099, 317.5768},
{1775.6852, -2647.4617, 96.5965, 286.7687},
{1772.9495, -2636.4641, 96.6075, 261.0931},
{1779.1248, -2623.3608, 96.6112, 232.3085},
{1823.9664, -2621.4236, 96.6049, 137.3243},
{1828.4612, -2635.6980, 96.6153, 109.2683},
{1829.8654, -2651.5657, 96.6064, 71.3779},
{1820.9661, -2664.9253, 96.6117, 37.6368},
{1858.4418, -2530.3840, 132.4982, 12.0392},
{1872.3510, -2523.9878, 132.5094, 43.8086},
{1880.7839, -2508.0486, 132.5134, 79.0171},
{1878.8354, -2490.2366, 132.5021, 115.4371},
{1869.3744, -2477.3132, 132.5020, 146.1791},
{1855.4965, -2473.3274, 132.5121, 170.3858},
{1839.9347, -2474.0720, 132.4971, 202.5722},
{1791.3048, -2480.5117, 132.5158, 137.4400},
{1759.9108, -2473.9124, 132.5159, 202.8804},
{1741.2611, -2496.2749, 132.5174, 258.9339},
{1755.4440, -2528.0762, 132.5146, 331.0424}};

new Float:SpawnsRing2[5][4]={
{729.0725, -2646.1335, 76.8671, 60.6083},
{693.1920, -2662.1565, 76.8671, 339.4124},
{593.9853, -2626.1223, 76.9052, 336.4252},
{584.8421, -2550.3667, 78.9859, 208.8360},
{705.7959, -2508.1138, 96.5128, 154.2959}};

new Float:SpawnsRing3[19][4]={
{-2337.4287, -1713.4640, 554.0666, 297.6270},
{-2339.8306, -1699.9788, 554.0682, 268.1289},
{-2330.6765, -1679.2428, 554.0656, 224.7538},
{-2320.1611, -1673.7482, 554.0673, 196.4079},
{-2294.2620, -1676.6917, 554.0659, 144.8076},
{-2287.0510, -1685.7084, 554.0663, 123.6972},
{-2293.2751, -1723.5050, 554.0657, 35.6352},
{-2426.2820, -1675.5948, 542.8969, 23.8151},
{-2447.3857, -1679.0760, 542.8988, 345.7341},
{-2465.3469, -1664.2875, 542.8997, 302.2426},
{-2467.4824, -1641.5477, 542.8978, 255.1965},
{-2455.0735, -1625.0472, 542.9045, 214.8483},
{-2435.2102, -1619.5549, 542.8986, 175.9368},
{-2415.7327, -1629.1371, 542.8988, 132.1872},
{-2278.6833, -1648.3630, 533.4091, 86.5386},
{-2289.8149, -1618.2448, 533.4097, 149.2518},
{-2285.4661, -1664.8865, 533.4100, 49.2274},
{-2311.1211, -1655.4094, 533.4095, 268.8034},
{-2305.8347, -1639.5468, 533.4100, 90.0958}};

new Float:SpawnsRing4[8][4]={
{-570.0596, 2221.9485, 55.1034, 94.3204},
{-605.2085, 2251.4583, 55.4058, 188.0670},
{-598.0959, 2190.1826, 55.4039, 4.1234},
{-702.7939, 2239.0825, 60.2432, 184.2716},
{-702.1513, 2180.3159, 60.2436, 1.7423},
{-805.3382, 2215.9585, 48.4425, 180.9480},
{-803.4691, 2155.0862, 48.4428, 0.5676},
{-836.0911, 2181.8650, 48.4413, 280.0583}};

new Float:SpawnsRing5[9][4]={
{-1120.6115, 540.7006, 22.8170, 55.0068},
{-1158.3928, 530.3494, 22.8169, 334.8416},
{-1135.3656, 586.5719, 22.8172, 159.8822},
{-1309.7593, 659.2261, 22.8469, 237.5228},
{-1267.0413, 666.2107, 22.8470, 143.8399},
{-1301.7775, 617.7354, 22.8474, 324.5504},
{-1097.2816, 638.5151, 11.4449, 89.2806},
{-1128.0029, 671.7103, 11.4448, 182.6281},
{-1127.4153, 608.9083, 11.4446, 359.6035}};

new Float:SpawnsRing6[8][4]={
{196.7772, 1998.4811, 65.4732, 269.5986},
{254.3988, 1997.7982, 65.4713, 87.5181},
{222.4711, 2023.6421, 65.4713, 181.6738},
{226.4392, 1971.3391, 65.4713, 1.3041},
{244.0874, 1978.4348, 65.4713, 46.8208},
{203.8367, 1979.6730, 65.4701, 310.3884},
{247.0987, 2017.1185, 65.4713, 130.6066},
{203.6942, 2015.3740, 65.4731, 233.5192}};

new Float:SpawnsRing7[8][4]={
{1532.1282, -1325.7006, 332.4148, 206.0833},
{1558.8931, -1380.0851, 332.4147, 33.9037},
{1529.6022, -1373.3229, 332.4131, 319.7408},
{1560.1918, -1334.5363, 332.4137, 147.6775},
{1464.1587, -1336.3518, 348.2748, 203.3580},
{1487.5605, -1384.0277, 348.2786, 30.0852},
{1452.7302, -1378.8151, 348.2787, 309.7181},
{1495.9752, -1342.1721, 348.2750, 138.4522}};

new Float:SpawnsRing8[8][4]={
{1484.3822, -1344.3405, 201.2271, 87.4087},
{1440.4242, -1335.3738, 201.2278, 269.4857},
{1380.9933, -1330.9642, 220.6651, 105.5744},
{1329.1873, -1345.5267, 220.6653, 287.0988},
{1360.4409, -1366.1482, 220.6652, 9.0078},
{1353.5685, -1313.0338, 220.6652, 182.8571},
{1513.2701, -1404.2122, 192.2665, 45.6329},
{1469.3497, -1399.5327, 192.2668, 319.3099}};

new Float:SpawnsRing9[11][4]={
{3117.1228, -1048.6152, 18.0183, 120.6829},
{3099.3384, -1039.1682, 18.0182, 165.3510},
{3080.5605, -1041.6949, 18.0198, 210.8929},
{3068.0479, -1050.1368, 18.0184, 249.7459},
{3069.3772, -1075.4022, 18.0188, 296.8059},
{3080.5852, -1086.0391, 18.0195, 324.9739},
{3094.5361, -1090.6443, 18.0181, 2.3491},
{3110.3704, -1086.2529, 18.0193, 41.1107},
{3120.6143, -1073.7777, 18.0168, 68.4642},
{3086.7080, -1110.3030, 27.4171, 268.8910},
{3096.2048, -1012.8736, 27.4741, 90.4617}};

new Float:SpawnsRing10[23][4]={
{3889.1274, -2414.0732, 198.1390, 244.4877},
{3886.6934, -2425.7092, 198.1370, 263.5406},
{3890.1489, -2436.7666, 198.1370, 288.9408},
{3897.4258, -2448.9675, 198.1336, 315.3203},
{3897.3677, -2406.1230, 198.1396, 219.1977},
{3910.8311, -2399.9436, 198.1429, 191.4952},
{3923.5764, -2400.7307, 198.1367, 163.4666},
{3936.8152, -2409.0581, 198.1340, 129.7011},
{3941.1895, -2440.6150, 198.1371, 64.1378},
{3927.2554, -2452.8018, 198.1377, 27.2756},
{3906.2156, -2565.1755, 240.7390, 253.5494},
{3982.4023, -2573.6436, 237.8385, 272.1209},
{4021.2561, -2553.1089, 241.2020, 211.2943},
{4023.6494, -2571.3936, 242.8179, 321.8889},
{4076.0757, -2457.7410, 226.3104, 15.3185},
{4087.7188, -2451.1292, 226.3137, 38.2388},
{4095.6211, -2439.6497, 226.3179, 64.2974},
{4097.3203, -2423.8716, 226.3137, 98.1656},
{4092.6204, -2410.5664, 226.3152, 124.9719},
{4081.8860, -2401.7502, 226.3114, 151.7395},
{4065.3572, -2399.5862, 226.3149, 181.9975},
{4047.5034, -2408.9934, 226.3228, 225.0177},
{4044.6477, -2447.2063, 226.3145, 309.4354}};

new Float:SpawnsRing11[11][4]={
{3027.3835, -1695.6217, -14.6973, 224.1319},
{3069.2415, -1739.2610, -14.6993, 44.2032},
{3028.0803, -1738.3268, -14.6977, 317.1615},
{3065.1582, -1694.8657, -14.6995, 147.0974},
{3204.4375, -1589.5708, -14.5222, 81.3407},
{3125.0732, -1581.8779, -21.3921, 255.2384},
{3149.1333, -1655.8119, -34.7512, 39.9809},
{3112.3914, -1610.4755, -34.7477, 218.4523},
{3147.8999, -1607.2365, -34.7513, 142.9311},
{3112.7732, -1657.4525, -34.7510, 329.1555},
{3080.5603, -1603.9962, -31.6205, 246.3742}};

new Float:SpawnsRing12[11][4]={
{990.0643, -329.2604, 77.6672, 186.1526},
{1007.7096, -378.3532, 78.3088, 20.6416},
{1003.5234, -344.6908, 78.3065, 248.8151},
{1017.4886, -328.7381, 78.3091, 211.2707},
{1050.8030, -327.5492, 78.3083, 151.6754},
{1059.4774, -336.7283, 78.3072, 126.8860},
{1058.8300, -371.2990, 78.3077, 67.9211},
{1021.8289, -249.5020, 91.4407, 88.6747},
{997.7797, -262.0758, 92.1816, 273.4837},
{1051.9064, -281.0961, 78.4251, 91.1755},
{1008.3467, -280.7044, 78.5342, 267.8582}};

new Float:SpawnsRing13[22][4]={
{2216.5522, 1041.8923, 48.3622, 291.7377},
{2226.5803, 1057.6077, 46.4457, 290.4020},
{2270.7476, 1070.7711, 43.5495, 55.3130},
{2274.0647, 1081.1979, 43.5492, 80.9526},
{2275.3904, 1093.1438, 43.5487, 100.0185},
{2255.6951, 1115.0371, 43.5486, 159.9848},
{2246.9004, 1117.4451, 43.5490, 179.6421},
{2235.3352, 1116.5076, 43.5513, 203.2923},
{2214.5835, 1089.9614, 43.5526, 261.9047},
{2216.1218, 1080.5181, 43.5514, 283.9174},
{2316.7087, 1136.7216, 83.2163, 63.2962},
{2315.0493, 1170.9915, 83.2171, 119.5056},
{2300.8152, 1182.9369, 83.2169, 160.7815},
{2263.6726, 1173.1218, 83.2173, 231.2062},
{2263.7734, 1139.9438, 83.2161, 301.1402},
{2272.6514, 1127.0083, 83.2175, 327.4999},
{2289.7729, 1120.4689, 83.2170, 358.8497},
{2308.0295, 1156.2732, 86.6837, 107.4496},
{2284.6997, 1173.1813, 86.6837, 198.1161},
{2223.4866, 1144.3533, 80.3007, 289.4505},
{2192.6982, 1014.3938, 80.3002, 20.7244},
{2172.4333, 1067.2499, 80.3007, 196.7466}};



new AviableCars[84]=
{
400, 402, 403, 404, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416,
420, 423, 424, 427, 428, 429, 431, 433, 434, 437, 438, 439, 442, 443,
444, 448, 451, 455, 456, 461, 462, 463, 466, 470, 471, 475, 480, 481,
482, 486, 489, 490, 494, 495, 500, 502, 503, 504, 505, 506, 514, 515,
522, 524, 528, 532, 534, 535, 539, 541, 542, 544, 549, 555, 556, 549,
560, 561, 562, 565, 568, 573, 578, 579, 588, 596, 597, 598, 599, 603
};

new SumoCar[MAX_PLAYERS];

//==============================ParkOur=========================================
#define MAX_POURS 150

new ParkStartTime, ParkStartTimer69;

enum qao
{
  Float:SpawnsX[12],
  Float:SpawnsY[12],
  Float:SpawnsZ[12],
  Float:SpawnsA[12],
  CPcount,
  PourName[50]
}
new ParkOurInfo[MAX_POURS][qao];

new PourEditOn;
new PourEditCount;
new PourEditID;

enum toto
{
  Float:CPposX,
  Float:CPposY,
  Float:CPposZ,
  CPCar,
}
new ParkOurCPS[MAX_POURS][50][toto];
//============================================================================

new Text:ShopTD[7];

new Pour, PourStat, pOurTickCount, PourStartTimer, PourTimer, finishedpours;
new pOurStartCount;
new pOurRank[MAX_PLAYERS];


new POURCARS[12];
enum Pinfo
{
   Top1Player[24],
   Top2Player[24],
   Top3Player[24],
   Top4Player[24],
   Top5Player[24],
   toptime[5]
}
new pOurRecords[MAX_POURS][Pinfo];

new DivingCP;
new DivingCP2;
//new FlappyCarCP;//flappycarshit
//===================================CS=========================================
#define CS_MAPS 9
new CSStartTime, CStime;
new CS, CSStartTimer, CSStartTimer2, CSMAP;
new CSCPs[CS_MAPS];
new CanCsVote[MAX_PLAYERS];
new Text:CSTimeTD;
//new Text:CSwaiting;
new Text:CSNameTD;
new CSUpdateTimer;
new CSKeyHold[MAX_PLAYERS], canhold=-255, csplanted, csplantedtime;
enum CShehe
{
   CsMapName[25],
   Float:cspos[4],
   Float:cs2pos[4],
   Float:csCPPos[3],
   Float:cscam[3],
   Float:cscamlookat[3]
}
new CSMapPos[CS_MAPS][CShehe]=
{
      {"cs_iceworld", {1550.4846, -8776.8857, 10.1542, 180.0}, {1549.9568, -8837.5137, 10.1542, 0.0}, {1538.9734, -8775.4092, 8.1542}, {1510.9310, -8848.4336, 62.6006}, {1511.6017, -8847.6777, 61.7106}}, //ICEWORLD
	  {"cs_detrain", {-4179.6011, -6752.8218, 15.9596, 0.0}, {-4398.1743, -6760.2051, 17.6338, 0.0}, {-4185.1025, -6772.9736, 10.5452}, {-4312.0469, -6740.9956, 35.7674}, {-4311.1851, -6741.4946, 35.2574}}, //TRAIN
//	  {"cs_assault", {2280.0, -1330.5, 74.0, 0.0}, {8073.2129, -7576.5808, 15.7131, 0.0}, {2320.0, -1391.0, 80.0}, {2330.9065, -1343.0923, 97.819}, {2330.4670, -1343.9895, 97.0049}}, //assult
	  {"cs_assault", {8152.4375, -7547.0854, 15.3666, 355.3636}, {8072.3130, -7583.9785, 15.3666, 357.5803}, {8151.3911, -7526.3887, 15.3666}, {8166.2163, -7519.7134, 35.6160}, {8125.7456, -7549.3311, 16.0763}}, //assult
	  {"cs_inferno", {9439.1729, -8759.1982, 30.2518, 0.0}, {9573.2861, -8785.6182, 24.3444, 88.0000}, {9427.0313, -8749.8574, 27.0258}, {9480.8535, -8765.2363, 51.0971}, {9481.2236, -8766.1406, 50.5921}}, //inferno
	  {"cs_dust", {245.1104, 1825.4648, 51.5178, 180.8887}, {51.9249, 1804.2605, 46.8078, 209.3790}, {208.7736, 1802.7628, 51.6078}, {272.8564, 1810.8070, 83.3484}, {271.9741, 1810.3427, 82.7235}}, //dust
	  {"cs_island", {3797.5667, -1634.7748, 3.8150, 172.3860}, {3763.8213, -1889.6355, 3.3892, 358.2245}, {3824.6250, -1619.9845, 2.8150}, {3800.0112, -1724.7094, 35.0318}, {3762.5938, -1878.6675, 3.3892}}, //island
	  {"cs_roman", {598.9727, -3021.2573, 20.4660, 357.2609}, {738.5101, -2983.1538, 19.7697, 86.8163}, {578.2579, -3011.1467, 19.4660}, {688.1867, -2911.6299, 45.5300}, {584.9479, -2981.5146, 27.7966}}, //irq
	 // {"cs_pipe", {2922.5913, 4045.7229, 41.9413, 358.5125}, {2927.1733, 4311.6182, 41.9413, 181.8142}, {2938.7629, 4049.3047, 40.9413}, {2953.6660, 4207.4053, 65.8397}, {2899.7375, 4137.7495, 45.1359}}, //airport roads =pipe
	  {"cs_italy", {716.4195, -2308.2939, 107.9117, 175.5944}, {668.0918, -2319.7583, 107.6574, 209.1680}, {707.9160, -2316.0728, 106.7205}, {706.0847, -2322.5879, 115.1703}, {727.4588, -2300.9385, 107.97200}}, //Italy
	  {"cs_station", {1653.4188, -1163.0259, 83.8286, 358.4580}, {1608.4973, -1090.3340, 74.5407, 268.2172}, {1663.5549, -1168.5890, 83.8286}, {1600.2635, -1137.4736, 86.2158}, {1642.9386, -1165.4233, 74.9688}}//Train2
};
new NextMap[CS_MAPS];
//=============================Race=============================================
enum rifo
{
	RaceCpCount,
	Float:StartCP[3],
	RaceInt,
	Float:Spawnp[4],
	Creator[30]
};
new RaceInfo[MAX_RACES][rifo];

new Float:RaceCPs[MAX_RACES][50][3];
new EDITORCPS[MAX_RACES][50];
new RaceIDCount;
new PlayerText:RaceCon[MAX_PLAYERS][2];

enum Rinfo
{
   Top1Player[24],
   Top2Player[24],
   Top3Player[24],
   Top4Player[24],
   Top5Player[24],
   Top1Car[32],
   Top2Car[32],
   Top3Car[32],
   Top4Car[32],
   Top5Car[32],
   toptime[5],

}
new RaceRecords[MAX_RACES][Rinfo];
new sRaceRecords[MAX_RACES][Rinfo];


new RaceStarted;
new RaceTimer;
new finishedracers;
new RaceTicks;
new Text:RaceTD[11];
new PlayerText:pRaceTD[MAX_PLAYERS][11];
new RaceEnd, RaceEndCount;
new RaceStartTK;
//==============================================================================

new Iterator:countdownin<MAX_PLAYERS>;
new CountDownRunning;
new CanCountDown[MAX_PLAYERS];

new pCount[MAX_PLAYERS];
new CwWinTime=0, CwWinTimer;
new statpage;
new pagecount;

//=======================Duel===================================================
enum dueling
{
   stat,
   xloc,
   player1,
   player2,
   weapon,
   startcount, starttimer
}
new DuelInfo[dueling];

enum Coords
{
   xName[30],
   Float:xpos[3],
   Float:p1pos[4],
   Float:p2pos[4],
   xint
}
new DuelCoords[][Coords]=
{
   {"Driving School", {-2032.0276, -97.5020, 35.1641}, {-2051.1450, -146.2792, 35.3203, 178.6213}, {-2052.4778, -193.0329, 35.3274, 358.6213}, 0},
   {"Ghost Town", {-380.9594, 2225.8379, 42.0938}, {-389.2607, 2262.2354, 41.7669, 193.9177}, {-375.5359, 2204.8149, 42.0938, 13.5116}, 0},
   {"Oil Station", {282.0979, 1395.4600, 9.7289}, {267.4892, 1369.4155, 10.5859, 1.5598}, {266.8622, 1410.6157, 10.4810, 182.0193}, 0},
   {"Blood Bowl", {-2161.3438, -407.6000, 35.3359}, {-1409.5453, 1214.7429, 1039.8672, 335.1070}, {-1384.8824, 1267.5298, 1039.8672, 154.5639}, 16},
   {"Farm", {-54.7528, 81.7931, 3.1172}, {-58.1106, 56.8101, 3.1103, 159.1615}, {-66.2019, 35.2580, 3.1103, 340.5402}, 0},
   {"Factroy", {-1029.5332, -580.4794, 32.0078}, {-1050.8500, -648.0135, 32.0078, 270.7827}, {-1008.0201, -647.6733, 32.0078, 90.7827}, 0},
   {"BaseBall", {-2276.7883, 70.6745, 35.1641}, {-2305.9705, 92.5696, 35.3516, 46.6129}, {-2322.1516, 108.6371, 35.3984, 225.8412}, 0},
   {"The bridge", {-2667.6692, 1269.4652, 55.4297}, {-2668.6553, 1933.8392, 217.2739, 89.9599}, {-2693.1416, 1933.8779, 217.2739, 268.8933}, 0},
   {"Groove", {2528.1936, -1667.0275, 15.1684}, {2474.1729, -1658.4263, 13.3354, 247.1295}, {2505.6704, -1672.1265, 13.3698, 65.7508}, 0},
   {"Casino roof", {1931.0233, 948.1838, 10.8127}, {1905.5229, 1001.0027, 52.7387, 249.7565}, {1975.6261, 961.4224, 52.7387, 59.3341}, 0},
   {"SF roofs", {-1783.8645, 672.6219, 35.1719}, {-1747.1079, 714.9505, 105.1406, 179.1146}, {-1746.7019, 640.6433, 105.1406, 0.9529}, 0}
};

new DuelCP[sizeof(DuelCoords)];
//=======================FALLOUT================================================

#define MAX_SLOTS   99 //99


#define fOUT 0x3DCCCAFF
#define fOUT2 0x006E99FF

#define fOUT_ "{3DCCCA}"
#define fOUT2_ "{006E99}"

forward SpeedUp( object, Float:x, Float:y, Float:z);
forward f_RespawnPlayer( player );
forward FalloutCountdown( );
forward MinigameUpdate( );

new FallOut, uTimer;
new Objects_[100];
//new FalloutType;

new Iterator:FalloutPlayers<MAX_PLAYERS>;
new Iterator:_Objects<100>;

new pReadyText[3][64] =
{
	"~y~stand by...",
	"~y~get Ready!",
	"~y~are you ready?"
};
new pFellOffText[4][64] =
{
	"~y~Can you swim?",
	"~r~You lost",
	"~r~Wasted!",
	"~y~Swim with fish!"
};
new Float:pgCoords[][4] =
{

   { 126.3032, 102.4873, 538.4703, 38.6539},
   { 128.2953, 122.7151, 538.4703, 96.0989},
   { 126.4937, 138.9391, 538.4703, 139.2975},
   { 110.2602, 138.5353, 538.4703, 183.8748},
   { 98.3720, 137.8295, 538.4703, 217.8822},
   { 97.4732, 120.9911, 538.4703, 270.7316},
   { 97.0097, 101.9951, 538.4703, 316.2281},
   { 113.3913, 100.3194, 538.4703, 358.9672},
   { 110.6298, 110.3556, 538.4703, 319.4450},
   { 124.1753, 130.5944, 538.4703, 143.5811},
   { 103.3059, 131.4600, 538.4703, 222.3133},
   { 120.1661, 111.9005, 538.4703, 39.0963}
};


enum tenum
{
 tid,
 Float:tix,
 Float:tiy,
 Float:tiz,
 Float:trix,
 Float:triy,
 Float:triz
};

//new pO_Time[MAX_PLAYERS];

/*

new Animals[][tenum]=
{

//Rx to 0
{1586, 803.10675, 1653.17126, 3.9798, -90.00000, 0.00000, 178.00000},
{1586, 800.12488, 1646.52795, 3.9798, -90.00000, 0.00000, 178.00000},
{1586, 805.43170, 1637.74622, 3.9798, -90.00000, 0.00000, 178.00000},
{1586, 793.90143, 1629.16211, 3.9798, -90.00000, 0.00000, 178.00000},
{1586, 806.23132, 1625.04675, 3.9798, -90.00000, 0.00000, 178.00000},
{1586, 807.10626, 1659.33765, 3.9798, -90.00000, 0.00000, 178.00000},
{1584, 794.89227, 1655.49402, 3.9798, -90.00000, 0.00000, 178.00000},
{1586, 799.36670, 1624.49048, 3.9798, -90.00000, 0.00000, 178.00000},
{1584, 808.62988, 1647.12488, 3.9798, -90.00000, 0.00000, 178.00000},
{1586, 800.41016, 1634.87415, 3.9798, -90.00000, 0.00000, 178.00000},
{1586, 793.45392, 1645.30396, 3.9798, -90.00000, 0.00000, 178.00000},

{1583, 799.43018, 1650.65173, 3.97980, -90.00000, 0.00000, 178.00000},
{1583, 808.64038, 1651.50635, 3.97980, -90.00000, 0.00000, 178.00000},
{1586, 794.28699, 1641.73120, 3.97980, -90.00000, 0.00000, 178.00000},
{1586, 803.57697, 1635.58447, 3.97980, -90.00000, 0.00000, 178.00000},
{1586, 795.66040, 1651.61682, 3.97980, -90.00000, 0.00000, 178.00000},
{1586, 804.39624, 1659.91675, 3.97980, -90.00000, 0.00000, 178.00000},
{1586, 805.95117, 1647.29736, 3.97980, -90.00000, 0.00000, 178.00000},


//x to 789
{1586, 811.7916, 1641.38330, 3.97980, 0.00000, 0.00000, 178.00000},
{1586, 811.7916, 1652.08862, 3.97980, 0.00000, 0.00000, 178.00000},
{1586, 811.7916, 1655.65051, 3.97980, 0.00000, 0.00000, 178.00000},
//x to 812
{1586, 790.7197, 1633.59436, 3.97980, 0.00000, 0.00000, 178.00000},
{1586, 790.7197, 1633.21179, 3.97980, 0.00000, 0.00000, 178.00000},
{1586, 790.7197, 1656.82312, 3.97980, 0.00000, 0.00000, 178.00000},


//not moving
{19315, 803.65082, 1645.05005, 4.51570, 0.00000, 0.00000, 0.00000},
{19315, 799.87189, 1654.62207, 4.51570, 0.00000, 0.00000, 0.00000},
{19315, 797.23969, 1638.48901, 4.51570, 0.00000, 0.00000, 80.00000},
{19315, 806.55566, 1631.52966, 4.51570, 0.00000, 0.00000, 0.00000},
{19315, 793.21954, 1657.32776, 4.51570, 0.00000, 0.00000, 90.00000},
{19315, 807.31696, 1656.30042, 4.51570, 0.00000, 0.00000, 127.00000},
{19315, 802.43152, 1627.53113, 4.51570, 0.00000, 0.00000, 100.00000},



//z to 0
{19332, 782.15747, 1390.33557, 88.47680, 0.00000, 0.00000, 0.00000},
{19332, 817.39648, 1322.13806, 88.47680, 0.00000, 0.00000, 0.00000},
{19332, 761.28851, 1272.27258, 88.47680, 0.00000, 0.00000, 0.00000}

};
*/
//new f_Objects[sizeof(Animals)];
//new go_rtimer[MAX_PLAYERS];

new Float:gCoords[MAX_SLOTS][3] =
{
{ 97.05, 112.46, 537.40},
{ 97.05, 116.42, 537.40},
{ 97.05, 108.55, 537.40},
{ 97.05, 104.62, 537.40},
{ 97.05, 100.64, 537.40},
{ 97.05, 120.42, 537.40},
{ 97.05, 124.41, 537.40},
{ 97.05, 128.32, 537.40},
{ 97.05, 132.31, 537.40},
{ 97.05, 136.26, 537.40},
{ 97.05, 140.2313, 537.40},

{ 101.0430, 112.46, 537.40},
{ 101.0430, 116.42, 537.40},
{ 101.0430, 108.55, 537.40},
{ 101.0430, 104.62, 537.40},
{ 101.0430, 100.64, 537.40},
{ 101.0430, 120.42, 537.40},
{ 101.0430, 124.41, 537.40},
{ 101.0430, 128.32, 537.40},
{ 101.0430, 132.31, 537.40},
{ 101.0430, 136.26, 537.40},
{ 101.0430, 140.2313, 537.40},

{ 105.036, 112.46, 537.40},
{ 105.036, 116.42, 537.40},
{ 105.036, 108.55, 537.40},
{ 105.036, 104.62, 537.40},
{ 105.036, 100.64, 537.40},
{ 105.036, 120.42, 537.40},
{ 105.036, 124.41, 537.40},
{ 105.036, 128.32, 537.40},
{ 105.036, 132.31, 537.40},
{ 105.036, 136.26, 537.40},
{ 105.036, 140.2313, 537.40},

{ 109.028991, 112.46, 537.40},
{ 109.028991, 116.42, 537.40},
{ 109.028991, 108.55, 537.40},
{ 109.028991, 104.62, 537.40},
{ 109.028991, 100.64, 537.40},
{ 109.028991, 120.42, 537.40},
{ 109.028991, 124.41, 537.40},
{ 109.028991, 128.32, 537.40},
{ 109.028991, 132.31, 537.40},
{ 109.028991, 136.26, 537.40},
{ 109.028991, 140.2313, 537.40},

{ 113.021987, 112.46, 537.40},
{ 113.021987, 116.42, 537.40},
{ 113.021987, 108.55, 537.40},
{ 113.021987, 104.62, 537.40},
{ 113.021987, 100.64, 537.40},
{ 113.021987, 120.42, 537.40},
{ 113.021987, 124.41, 537.40},
{ 113.021987, 128.32, 537.40},
{ 113.021987, 132.31, 537.40},
{ 113.021987, 136.26, 537.40},
{ 113.021987, 140.2313, 537.40},

{ 117.014984, 112.46, 537.40},
{ 117.014984, 116.42, 537.40},
{ 117.014984, 108.55, 537.40},
{ 117.014984, 104.62, 537.40},
{ 117.014984, 100.64, 537.40},
{ 117.014984, 120.42, 537.40},
{ 117.014984, 124.41, 537.40},
{ 117.014984, 128.32, 537.40},
{ 117.014984, 132.31, 537.40},
{ 117.014984, 136.26, 537.40},
{ 117.014984, 140.2313, 537.40},

{ 121.007980, 112.46, 537.40},
{ 121.007980, 116.42, 537.40},
{ 121.007980, 108.55, 537.40},
{ 121.007980, 104.62, 537.40},
{ 121.007980, 100.64, 537.40},
{ 121.007980, 120.42, 537.40},
{ 121.007980, 124.41, 537.40},
{ 121.007980, 128.32, 537.40},
{ 121.007980, 132.31, 537.40},
{ 121.007980, 136.26, 537.40},
{ 121.007980, 140.2313, 537.40},

{ 125.000976, 112.46, 537.40},
{ 125.000976, 116.42, 537.40},
{ 125.000976, 108.55, 537.40},
{ 125.000976, 104.62, 537.40},
{ 125.000976, 100.64, 537.40},
{ 125.000976, 120.42, 537.40},
{ 125.000976, 124.41, 537.40},
{ 125.000976, 128.32, 537.40},
{ 125.000976, 132.31, 537.40},
{ 125.000976, 136.26, 537.40},
{ 125.000976, 140.2313, 537.40},

{ 128.993972, 112.46, 537.40},
{ 128.993972, 116.42, 537.40},
{ 128.993972, 108.55, 537.40},
{ 128.993972, 104.62, 537.40},
{ 128.993972, 100.64, 537.40},
{ 128.993972, 120.42, 537.40},
{ 128.993972, 124.41, 537.40},
{ 128.993972, 128.32, 537.40},
{ 128.993972, 132.31, 537.40},
{ 128.993972, 136.26, 537.40},
{ 128.993972, 140.2313, 537.40}
};
//
//==============================================================================
new Hats[]=
{
18891, 18892, 18893, 18894, 18895, 18896, 18897, 18898, 18899, 18900,
18901, 18902, 18903, 18904, 18905, 18906, 18907, 18908, 18909, 18910,
18911, 18912, 18913, 18914, 18915, 18916, 18917, 18918, 18919, 18920,
18921, 18922, 18923, 18924, 18925, 18926, 18927, 18928, 18929, 18930,
18931, 18932, 18933, 18934, 18935, 18936, 18937, 18938, 18939, 18940,
18941, 18942, 18943, 18944, 18945, 18946, 18947, 18948, 18949, 18950,
18951, 18952, 18953, 18954, 18955, 18956, 18957, 18958, 18959, 18960,
18961, 18962, 18964, 18965, 18966, 18967, 18968, 18969, 18970, 18971,
18972, 18973, 18974, 18975, 18976, 18977, 18978, 18979, 19064, 19065, 19066,
19067, 19068, 19069, 19093, 19095, 19096, 19097, 19098, 19099, 19100,
19101, 19102, 19103, 19104, 19105, 19106, 19107, 19108, 19109, 19110,
19111, 19112, 19113, 19114, 19115, 19116, 19117, 19118, 19119, 19120,
19136, 19162, 19161, 19330, 19331, 19352, 19469
};

new Float:HatsRot[][3]=
{
{100.0000, 0.0000, 0.1416},
{100.0000, 0.0000, 0.1416},
{100.0000, 0.0000, 0.1416},
{100.0000, 0.0000, 0.1416},
{100.0000, 0.0000, 0.1416},
{100.0000, 0.0000, 0.1416},
{100.0000, 0.0000, 0.1416},
{100.0000, 0.0000, 0.1416},
{100.0000, 0.0000, 0.1416},
{100.0000, 0.0000, 0.1416},
{100.0000, 0.0000, 0.1416},
{100.0000, 0.0000, 0.1416},
{100.0000, 0.0000, 0.1416},
{100.0000, 0.0000, 0.1416},
{100.0000, 0.0000, 0.1416},
{55.0000, 185.0000, 113.0000}, //1906
{55.0000, 185.0000, 113.0000},
{55.0000, 185.0000, 113.0000},
{55.0000, 185.0000, 113.0000},
{55.0000, 185.0000, 113.0000}, //18910
{152.0000, -185.0000, 165.0000}, //18911
{152.0000, -185.0000, 165.0000},
{152.0000, -185.0000, 165.0000},
{152.0000, -185.0000, 165.0000},
{152.0000, -185.0000, 165.0000},
{152.0000, -185.0000, 165.0000},
{152.0000, -185.0000, 165.0000},
{152.0000, -185.0000, 165.0000},
{152.0000, -185.0000, 165.0000},
{152.0000, -185.0000, 165.0000},
{-174.0000, 91.0000, -14.0000},
{-174.0000, 91.0000, -14.0000},
{-174.0000, 91.0000, -14.0000},
{-174.0000, 91.0000, -14.0000},
{-174.0000, 91.0000, -14.0000},
{-174.0000, 91.0000, -14.0000},
{-174.0000, 91.0000, -14.0000},
{-174.0000, 91.0000, -14.0000},
{-174.0000, 91.0000, -14.0000},
{-174.0000, 91.0000, -14.0000},
{-174.0000, 91.0000, -14.0000},
{-174.0000, 91.0000, -14.0000},
{-174.0000, 91.0000, -14.0000},
{-174.0000, 91.0000, -14.0000},
{-174.0000, 91.0000, -14.0000},
{-174.0000, 91.0000, -14.0000},
{-174.0000, 91.0000, -14.0000},
{-174.0000, 91.0000, -14.0000},
{-162.0000, 89.0000, -185.0000},
{-162.0000, 89.0000, -185.0000},
{-162.0000, 89.0000, -185.0000},
{-162.0000, 89.0000, -185.0000},
{-162.0000, 89.0000, -185.0000},
{-162.0000, 89.0000, -185.0000},
{-162.0000, 89.0000, -185.0000},
{-162.0000, 89.0000, -185.0000},
{-162.0000, 89.0000, -185.0000},
{-162.0000, 89.0000, -185.0000},
{-162.0000, 89.0000, -185.0000},
{-162.0000, 89.0000, -185.0000},
{-162.0000, 89.0000, -185.0000},
{-162.0000, 89.0000, -185.0000},
{-162.0000, 89.0000, -185.0000},
{-162.0000, 89.0000, -185.0000},
{-1.0000, 27.0000, 127.0000},
{-1.0000, 27.0000, 127.0000},
{-1.0000, 27.0000, 127.0000},
{-1.0000, 27.0000, 127.0000},
{-1.0000, 27.0000, 127.0000},
{-1.0000, 27.0000, 127.0000},
{-1.0000, 9.0000, -76.0000},
{-1.0000, -91.0000, -4.0000},
{-1.0000, 11.0000, -69.0000},
{-1.0000, 11.0000, -69.0000},
{-1.0000, 11.0000, -69.0000},
{-1.0000, 11.0000, -69.0000},
{-1.0000, 11.0000, -69.0000},
{-1.0000, 11.0000, -69.0000},
{-1.0000, 11.0000, -69.0000},
{-1.0000, 11.0000, -69.0000},
{-1.0000, 11.0000, -69.0000},
{-1.0000, 11.0000, -69.0000},
{-1.0000, 11.0000, -69.0000},
{-6.0000, -18.0000, -63.0000},
{-6.0000, -18.0000, -63.0000},
{-6.0000, -18.0000, -63.0000},
{-6.0000, -18.0000, -63.0000},
{-6.0000, 22.0000, -67.0000},
{-6.0000, 22.0000, -67.0000},
{-6.0000, 22.0000, -67.0000},
{-6.0000, 22.0000, -67.0000},
{-6.0000, 22.0000, -67.0000},
{-6.0000, 22.0000, -67.0000},
{-6.0000, -91.0000, -185.0000},
{-6.0000, -91.0000, -185.0000},
{-6.0000, -91.0000, -185.0000},
{-6.0000, -91.0000, -185.0000},
{-6.0000, -91.0000, -185.0000},
{-6.0000, -91.0000, -185.0000},
{-6.0000, -91.0000, -185.0000},
{-6.0000, -91.0000, -185.0000},
{-6.0000, -91.0000, -185.0000},
{-6.0000, -91.0000, -185.0000},
{-6.0000, -91.0000, -185.0000},
{-6.0000, -91.0000, -185.0000},
{-6.0000, -91.0000, -185.0000},
{-6.0000, -91.0000, -185.0000},
{-6.0000, -91.0000, -185.0000},
{-6.0000, -91.0000, -185.0000},
{-6.0000, -91.0000, -185.0000},
{-6.0000, -91.0000, -185.0000},
{-6.0000, -91.0000, -185.0000},
{-6.0000, -91.0000, -185.0000},
{-6.0000, -91.0000, -185.0000},
{-6.0000, -91.0000, -185.0000},
{-6.0000, -91.0000, -185.0000},
{-6.0000, -91.0000, -185.0000},
{-6.0000, -91.0000, -185.0000},
{-6.0000, -91.0000, -185.0000},
{-6.0000, -91.0000, -185.0000},
{13.0000, -91.0000, -185.0000},
{13.0000, -91.0000, -185.0000},
{13.0000, -91.0000, -185.0000},
{13.0000, -91.0000, -185.0000},
{13.0000, -91.0000, -185.0000},
{13.0000, -91.0000, -185.0000}, //19331
{-15.0000, 76.0000, -29.0000},
{0.0000, 0.0000, 0.0000},
{0.0000, 0.0000, 0.0000}
};

new Glasses[]=
{
19006, 19007, 19008, 19008, 19010, 19011, 19012, 19013, 19014, 19015, 19016, 19017, 19018, 19019, 19020,
19021, 19022, 19023, 19024, 19025, 19026, 19027, 19028, 19029, 19030, 19031, 19032, 19033, 19034, 19035,
19138, 19139, 19140, 19085
};
/*
//================================Disco Dodgebomb===============================//ddshit
new DDStartTime, DDStartTimer, DDStartTimer2, DDUpdateTimer;
new DDtime;
new DDGreenScore;
new DDBlueScore;
new DDCount1, DDCount2;
new DD;
//================================Colosseum=====================================//coshit
new COStartTime, COStartTimer, COStartTimer2, COUpdateTimer;
new COtime;
new COGreenScore;
new COBlueScore;
new COCount1, COCount2;
new CO;
*/
//================================Derby=========================================
#define DERBYCOLOR_ "{F29D94}"
#define DERBYCOLOR 0xFF4D3BFF

#define Derby_Min 2
new DerbyGate[10];
new DerbyPlayers;
enum DSpawn
{
   DcarType,
   Float:Dpos[4]
}
new DerbySpawns[][DSpawn] =
{
	{494, {-1506.9481, 970.1569, 1037.0000, -55.0000}},
	{494, {-1497.2273, 960.6135, 1037.0000, -46.0000}},
	{494, {-1487.1355, 952.0715, 1037.0000, -34.0000}},
	{494, {-1462.7974, 936.2397, 1036.5000, -14.0000}},
	{494, {-1443.3896, 932.9627, 1036.5000, -6.0000}},
	{494, {-1423.9103, 930.7865, 1036.5000, -2.0000}},
	{494, {-1362.4010, 932.9819, 1036.5000, 0.0000}},
	{494, {-1348.2965, 933.8939, 1036.5000, 14.0000}},
	{411, {-1322.1140, 944.3889, 1036.5000, 26.0000}},
	{411, {-1326.1855, 942.8721, 1036.5000, 22.0000}},
	{411, {-1338.8816, 938.0684, 1036.5000, 20.0000}},
	{411, {-1335.3535, 939.6886, 1036.5000, 20.0000}},

	{411, {2775.9695, -1737.7944, 42.0000, 116.0000}},
	{411, {2760.9565, -1720.6038, 42.0000, 140.0000}},
	{411, {2738.0684, -1712.7086, 42.0000, 165.0000}},
	{411, {2721.0947, -1715.7341, 42.0000, 207.0000}},
	{411, {2705.4131, -1727.5927, 42.0000, 229.0000}},
	{411, {2696.0449, -1742.5597, 42.0000, 245.0000}},
	{411, {2779.2546, -1761.8802, 42.0000, 84.0000}},
	{411, {2771.5256, -1788.8003, 42.0000, 47.0000}},
	{411, {2750.8975, -1801.7542, 42.0000, 23.0000}},
	{411, {2722.6472, -1801.5959, 41.5000, -25.0000}},
	{411, {2704.5337, -1787.6610, 42.0000, -55.0000}},
	{411, {2695.0574, -1764.7439, 42.0000, -87.0000}},

	{502, {-4260.8638, -710.6443, 4.5169, -12.0000}},
	{502, {-4255.0195, -676.6334, 4.5169, -190.0000}},
	{502, {-4299.6865, -667.5970, 4.5169, -190.0000}},
	{502, {-4351.4629, -697.1658, 4.5169, -12.0000}},
	{502, {-4306.1870, -704.4468, 4.5169, -12.0000}},
	{502, {-4345.3682, -659.9465, 4.5169, -190.0000}},
	{502, {-4324.2852, -543.6854, 4.5169, -11.0000}},
	{502, {-4234.9570, -560.3625, 4.5169, -11.0000}},
	{502, {-4317.8101, -505.7209, 4.5169, -190.0000}},
	{502, {-4273.2417, -512.6200, 4.5169, -190.0000}},
	{502, {-4228.0649, -521.7099, 4.5169, -190.0000}},
	{502, {-4279.8711, -552.2034, 4.5169, -11.0000}},

	{531, {-1209.2899, -1010.5074, 128.4000, -88.0000}},
	{555, {-1210.1110, -987.0284, 128.4000, -88.0000}},
	{552, {-1210.0859, -999.0384, 128.4000, -88.0000}},
	{565, {-1210.6746, -974.7964, 128.4000, -88.0000}},
	{550, {-1211.5729, -962.8107, 128.4000, -88.0000}},
	{535, {-1210.2743, -1021.5380, 128.4000, -88.0000}},
	{544, {-1210.5631, -1033.0542, 128.4000, -88.0000}},
	{541, {-1210.8761, -1044.8910, 128.4000, -88.0000}},
	{575, {-1091.7129, -1040.2606, 128.9000, 0.0000}},
	{576, {-1076.8129, -1040.3098, 128.9000, 0.0000}},
	{541, {-1142.1863, -954.4272, 128.9000, -179.0000}},
	{541, {-1128.4282, -954.9179, 128.9000, -179.0000}},

	{444, {-1365.3866, 343.7144, 31.0000, 0.0000}},
	{444, {-1371.7086, 343.9980, 31.0000, 0.0000}},
	{444, {-1377.3308, 343.8959, 31.0000, 0.0000}},
	{444, {-1415.0343, 344.0777, 31.0000, 0.0000}},
	{444, {-1421.7734, 343.8407, 31.0000, 0.0000}},
	{444, {-1428.4719, 343.6042, 31.0000, 0.0000}},
	{556, {-1500.5873, 294.0393, 54.0000, 0.0000}},
	{556, {-1506.1979, 294.3741, 54.0000, 0.0000}},
	{556, {-1511.5762, 294.3159, 54.0000, 0.0000}},
	{556, {-1509.1656, 370.5038, 45.0000, 0.0000}},
	{556, {-1513.9928, 370.5794, 45.0000, 0.0000}},
	{556, {-1516.9714, 294.6074, 54.0000, 0.0000}},

	{556, {5120.4072, -3740.2288, 3.0000, -180.0000}},
	{556, {5047.7593, -3740.8381, 3.0000, -180.0000}},
	{556, {5085.3447, -3740.6384, 3.0000, -180.0000}},
	{556, {5079.7354, -3740.6680, 3.0000, -180.0000}},
	{556, {5074.5479, -3740.6956, 3.0000, -180.0000}},
	{556, {5067.9009, -3740.7302, 3.0000, -180.0000}},
	{556, {5061.3130, -3740.7659, 3.0000, -180.0000}},
	{556, {5091.4800, -3740.3831, 3.0000, -180.0000}},
	{556, {5099.1118, -3740.3420, 3.0000, -180.0000}},
	{556, {5106.0098, -3740.3059, 3.0000, -180.0000}},
	{556, {5054.7031, -3740.8010, 3.0000, -180.0000}},
	{556, {5113.2939, -3740.2668, 3.0000, -180.0000}},

	{415, {4004.0095, -84.7204, 39.1548, -91.1400}},
	{415, {4114.5132, -85.0844, 39.1548, 88.8600}},
	{415, {4138.8643, -79.9988, 19.2108, 88.8600}},
	{415, {4136.2822, -35.7935, 19.2108, 88.860}},
	{415, {4138.2285, 4.2975, 19.2108, 88.8600}},
	{415, {4118.0054, -1.0187, 39.1728, 90.1800}},
	{415, {4005.9685, 0.0145, 39.1548, -91.1400}},
	{415, {4023.9702, 5.2390, 19.1592, -91.1400}},
	{415, {4023.7366, -80.1971, 19.1592, -91.1400}},
	{415, {4023.8110, -56.0848, 19.1592, -91.1400}},
	{415, {4061.7673, -36.1900, 19.1592, -91.1400}},
	{415, {4084.9412, -12.2565, 19.1592, -91.1400}},

	{402, { 419.5699, 3431.6516, 68.9178, -4.0000}},
	{402, { 402.2867, 3432.5715, 68.9178, -4.0000}},
	{402, { 436.5622, 3430.5396, 68.9178, -4.0000}},
	{402, { 440.6201, 3484.5422, 68.9178, 176.0000}},
	{402, { 423.4068, 3486.7136, 68.9178, 176.0000}},
	{402, { 406.0974, 3487.7632, 68.9178, 176.0000}},
	{402, { 406.0974, 3487.7632, 63.5718, 176.0000}},
	{402, { 423.3870, 3487.3943, 58.7118, 176.0000}},
	{402, { 440.6201, 3484.5422, 63.5718, 176.0000}},
	{402, { 402.2867, 3432.5715, 63.5718, -4.0000}},
	{402, { 436.5622, 3430.5396, 63.5718, -4.0000}},
	{402, { 419.5699, 3431.6516, 58.0638, -4.0000}},

	{429, {1414.4697, 3647.7886, 58.2112, -2.0000}},
	{541, {1406.3699, 3648.5928, 58.2112, -2.0000}},
	{429, {1398.3768, 3648.9919, 58.2112, -2.0000}},
	{541, {1389.7638, 3649.4282, 58.2112, -2.0000}},
	{429, {1392.5156, 3678.2883, 58.2112, -92.0000}},
	{541, {1392.2538, 3668.9900, 58.2112, -92.0000}},
	{429, {1413.9657, 3667.9607, 58.2112, 92.0000}},
	{541, {1414.7426, 3676.7551, 58.2112, 92.0000}},
	{429, {1416.4529, 3703.2742, 58.2112, 180.0000}},
	{541, {1408.6564, 3703.7422, 58.2112, 180.0000}},
	{429, {1400.7017, 3704.3713, 58.2112, 180.0000}},
	{541, {1392.0814, 3704.4460, 58.2112, 180.0000}},

	{545, { 558.0788, 3526.7402, 759.7712, -25.0000}},
	{546, { 566.3405, 3525.7998, 759.7712, 11.0000}},
	{547, { 591.9821, 3602.1489, 759.7712, 149.0000}},
	{549, { 608.6387, 3549.9009, 759.7712, 89.0000}},
	{550, { 486.3920, 3492.1802, 759.7712, -25.0000}},
	{550, { 522.0254, 3509.3967, 759.7712, -91.0000}},
	{551, { 518.1583, 3467.8242, 759.7712, -91.0000}},
	{552, { 549.8100, 3463.3040, 759.7712, -10.0000}},
	{555, { 556.9165, 3502.5173, 759.7712, -10.0000}},
	{558, { 589.5329, 3497.5935, 759.7712, -280.0000}},
	{560, { 583.5535, 3457.2036, 759.7712, -280.0000}},
	{562, { 479.2719, 3495.5068, 759.7712, -25.0000}},

	{554, { 470.2973, 5259.3403, 12.0174, 47.0000}},
	{554, { 320.3962, 5409.2285, 12.0174, -136.0000}},
	{554, { 356.5089, 5373.3765, 12.0174, -135.0000}},
	{554, { 437.5951, 5291.4541, 12.0174, 45.0000}},
	{554, { 321.1334, 5259.8867, 12.0174, -47.0000}},
	{554, { 346.5128, 5284.5591, 12.0174, -47.0000}},
	{554, { 436.5185, 5375.8623, 12.0174, -226.0000}},
	{554, { 469.4312, 5409.0386, 12.0174, -226.0000}},
	{554, { 471.6175, 5347.4512, 12.0174, -181.0000}},
	{554, { 318.8278, 5346.5830, 12.0174, -181.0000}},
	{554, { 317.8340, 5322.1792, 12.0174, 0.0000}},
	{554, { 470.9913, 5320.3325, 12.0174, 0.0000}},

	{603, {-3446.8506, 430.3241, 2.6503, -181.0000}},
	{603, {-3427.0569, 420.5523, 2.6503, -181.0000}},
	{603, {-3406.9109, 379.7254, 2.6503, -181.0000}},
	{603, {-3407.0879, 338.7674, 2.6503, -181.0000}},
	{603, {-3406.7046, 292.3170, 2.6503, -181.0000}},
	{603, {-3447.1248, 295.5022, 2.6503, -181.0000}},
	{603, {-3482.6133, 296.0771, 2.6503, -181.0000}},
	{603, {-3522.3538, 294.8604, 2.6503, -181.0000}},
	{603, {-3492.8135, 336.3420, 2.6503, -181.0000}},
	{603, {-3492.3777, 381.3316, 2.6503, -181.0000}},
	{603, {-3492.6396, 419.5936, 2.6503, -181.0000}},
	{603, {-3472.7146, 258.5599, 13.3423, -181.0000}},

	{601, { 212.7569, 2486.6157, 16.4570, -0.8100}},
	{601, { 227.7207, 2485.6509, 16.4570, -0.8100}},
	{601, { 242.5609, 2484.5349, 16.4570, -0.8100}},
	{601, { 256.2000, 2483.7202, 16.4570, -0.8100}},
	{601, { 270.3158, 2482.9885, 16.4570, -0.8100}},
	{601, { 213.7360, 2520.5774, 16.4570, 180.8100}},
	{601, { 227.7712, 2520.4497, 16.4570, 180.8100}},
	{601, { 242.4840, 2519.3940, 16.4570, 180.8100}},
	{601, { 256.1620, 2518.5840, 16.4570, 180.8100}},
	{601, { 270.3327, 2516.7161, 16.4570, 180.8100}},
	{601, { 220.0390, 2504.6379, 16.4570, -92.0000}},
	{601, { 264.0302, 2502.5779, 16.4570, 90.0000}}
};

enum DInfo
{
   DerbyMaps[30],
   Float:LowestPoint,
   DerbyInterior
}
new DerbyMapsTroll[13];

new DerbyInfo[][DInfo] =
{
     {"Blood Bowl", 10.0, 15},
     {"Ls Forum", 31.4, 0},
     {"Feel So Close", -0.8, 0},
     {"The Farm", 110.0295, 0},
     {"Playing on roofs", 17.7724, 0},
     {"Moving Land", 1.0, 0},
     {"Eye' of the Cheetah", 5.0, 0},
     {"On the Edge I", 50.0, 0},
     {"On the Edge II", 50.0, 0},
     {"Hanging City", 720.0, 0},
     {"World Center", 0.417, 0},
     {"WTF!!@!@#@!", -1.1340, 0},
     {"Maze", -1000.0, 0}
};


new DERBY, DerbyID, DerbyVote[sizeof(DerbyInfo)], DerbyTimer, DerbyTime, DerbyTime2;
new DerbyStartTimer, DerbyStartTimer2, DerbyStartTime, Derbyposition[MAX_PLAYERS];
new DerbyCars[12];
//new Text:DerbyWaiting;

new FootballStartTimer, FootballStartTimer2, FootballStartTime;
new FootballStarted;
//===========================Lms================================================
#define LMS_Min 2

new LmsStartTime, LmsStartTimer69;

new Iterator:InLms<MAX_PLAYERS>;

new LMS;
new LmsWeapon;
new LmsPlayers;
new LmsTimer, LmsStartTimer;
//new LMSstarttime, LMSStartTimer, LMSStartTimer2

new Float:LmsPos[][] =
{
    {1523.7545, 1621.4788, 117.9512, 4.0066},
    {1526.1373, 1645.4772, 117.8537, 81.4006},
    {1525.9894, 1667.4734, 117.7750, 89.8607},
    {1526.0535, 1692.1115, 117.7114, 99.2608},
    {1525.4613, 1712.6997, 117.8099, 92.6807},
    {1514.9291, 1724.0585, 118.1125, 173.8348},
    {1489.0840, 1722.9731, 118.1125, 185.4282},
    {1463.9091, 1724.1107, 118.1125, 186.6815},
    {1445.4679, 1723.9893, 118.1125, 181.0415},
    {1429.2882, 1724.5780, 118.1125, 185.4282},
    {1413.2714, 1723.9797, 118.1125, 186.0548},
    {1403.3770, 1723.3588, 118.1125, 178.8480},
    {1391.4823, 1723.7777, 118.1125, 186.6815},
    {1382.1436, 1719.6548, 118.1125, 265.6422},
    {1382.0452, 1706.4066, 118.1125, 270.0289},
    {1381.2952, 1696.5492, 118.1125, 268.7756},
    {1381.1356, 1686.6265, 118.1125, 267.2090},
    {1382.4418, 1674.9465, 118.1125, 268.4622},
    {1382.1448, 1661.6818, 118.1125, 275.3558},
    {1382.1459, 1651.0122, 118.1125, 273.7892},
    {1381.6422, 1638.3140, 118.1200, 272.5358},
    {1381.6160, 1628.8525, 118.1125, 272.2225},
    {1392.5582, 1621.3337, 118.1125, 358.0767},
    {1408.0490, 1621.7874, 118.1125, 354.6300},
    {1415.8247, 1621.6147, 118.1125, 349.3033},
    {1430.2406, 1622.1117, 118.1125, 3.7168},
    {1440.8032, 1622.1158, 118.1125, 1.5235},
    {1454.6741, 1621.4825, 118.1125, 359.9568},
    {1467.8739, 1621.1116, 118.1125, 9.9836},
    {1488.1622, 1622.2506, 118.1125, 2.4400}
};
//Mp3Skull search
new Results_Links[MAX_PLAYERS][16][128];
new Results_Names[MAX_PLAYERS][16][128];
new Songs_Found[MAX_PLAYERS];
new Dialog_String[16 * 128];
new Last_Search[MAX_PLAYERS][128];
new Request_Type[MAX_PLAYERS];
new Request_ID[MAX_PLAYERS];

//==============================Skin pickups====================================

enum milll
{
	 sSkin,
	 Float:SPos[3]
};

new sPickup[][milll] =
{
	  {91, {2267.8506, 1661.6597, 98.9959}},
	  {62, {2800.8259, -1172.8934, 25.5861}},
	  {293, {2317.0596, -1527.4802, 25.3438}},
	  {177, {411.4484, -49.7094, 1001.8984}},
	  {270, {2533.6184, -1675.4225, 19.9302}},
	  {0, {2492.0361, -1701.3353, 1018.3438}}
};
new sSPickup[6];
//Drug Pickup
new DrugPickups[15];
//==============================Weapon Pickups==================================
#define MAX_C_PICKUPS 600
enum mill
{
	 Model_,
	 Spawn,
	 Float:WPos[3],
	 Wworld
};
new wPickup[MAX_C_PICKUPS][mill];
new wWPickup[MAX_C_PICKUPS];


new armedbody_pTick[MAX_PLAYERS];

//==============================Teleport Pickups==================================
//
enum mill2
{
	 TypeID,
	 Float:Pos[3],
	 Float:Possp[4],
	 inter,
	 wrld,
	 towrld

};

new TelePickup[][mill2] =
{
   {19133, {1579.2954, -2687.2356, 13.5469}, {1266.8850, -2839.7866, 118.9000, 180.0}, 0, -1, -1},
   {19133, {1258.0051, -2843.3557, 117.4047}, {1585.2407, -2674.3325, 14.0000, 90.0}, 0, -1, -1},
//   {19130, {1165.1992, -3012.8994, 6.3000}, {1160.8994140625, -3016.69921875, 17.60000038147, 90.0}, 0},
//   {19130, {1190.1177, -3007.4446, 13.2000}, {1187.1999511719, -3012.3000488281, 13.0, 90.0}, 0},
   {19132, {1254.7202, -2859.2068, 117.7047}, {1128.7164, -3002.0481, 18.6766, 256.7813}, 0, -1, -1},

   {19197, {-1405.3092, -260.9158, 1043.6563}, {2800.0249, -1722.4929, 11.0956, 293.9187}, 0, -1, -1}, //inside kickstart to outside
   {19197, {2794.2261, -1722.5220, 11.8438}, {-1401.9575, -244.5173, 1043.4193, 343.8801}, 7, -1, -1},  //outside kickstart to inside
   {19197, {-1368.5875, -692.7736, 1055.2762}, {-2114.3855, -444.3761, 37.8454, 89.7239}, 0, -1, -1}, //inside dirttrack to outside
   {19197, {-2110.7102, -444.4851, 38.7344}, {-1373.3596, -687.9955, 1054.4989, 41.7995}, 4, -1, -1}, //outside dirttrack to inside

   {19197, {963.9642, -53.1761, 1001.1246}, {287.6542, 1815.2386, 4.7266, 359.6913}, 0, -1, -1},
   {19197, {287.6475, 1813.8364, 4.7031}, {961.7211, -53.3498, 1001.1172, 94.4309}, 3, -1, -1},

   {19197, {-2914.8853, -1411.0120, 11.4353}, {-3088.7668, -1323.8860, 7.5291, 86.2023}, 0, -1, -1},
   {19197, {-3085.5195, -1324.1311, 7.5572}, {-2918.6296, -1410.8213, 11.4258, 86.3325}, 0, -1, -1},

   {19133, {-3128.5520, -1302.3640, 7.3415}, {-3132.8203, -1307.4294, 1.6688, 136.7539}, 0, -1, -1},
   {19130, {-3130.2708, -1304.7177, 1.6688}, {-3132.4797, -1303.5814, 6.7001, 96.6077}, 0, -1, -1},

   {19133, {-3128.5520, -1302.3640, 7.3415}, {-3132.8203, -1307.4294, 1.6688, 136.7539}, 0, -1, -1},
   {19130, {-3130.2708, -1304.7177, 1.6688}, {-3132.4797, -1303.5814, 6.7001, 96.6077}, 0, -1, -1},

   {19130, {336.9280, 2632.7920, 16.1793}, {2674.3853, 3163.9812, 11.4438, 359.9600}, 0, -1, -1},
   {19130, {2813.0618, 3218.3911, 7.2317}, {332.8440, 2626.8750, 16.2676, 140.5854}, 0, -1, -1},
   {19130, {2523.7869, 3137.2166, 5.6941}, {332.8440, 2626.8750, 16.2676, 140.5854}, 0, -1, -1},

   {19197, {-1605.6204, 712.2692, 13.8672}, {246.3296, 111.0078, 1003.2188, 357.4427}, 10, -1, -1},
   {19197, {246.4845, 108.8073, 1003.2188}, {-1606.1537, 715.5994, 12.2181, 1.4352}, 0, -1, -1},

   {19197, {1124.8804, 1350.9979, 10.8278}, {1023.1254, -1123.8048, 23.8715, 179.7701}, 0, 81745, 0},
   {19197, {1022.6045, -1121.9139, 23.8719}, {1125.1301, 1348.8853, 10.8278, 178.0614}, 0, 0, 81745},

   {19197, {421.5014, 2445.2261, 16.5535}, {338.5328, -2441.4084, 7.3672, 228.3979}, 0, 0, 0},
   {19197, {336.2788, -2439.3137, 7.5234}, {416.2451, 2441.9189, 16.5535, 98.0266}, 0, 0, 0},

   {19197, {43349.8735, -1632.8972, 19.0559}, {2195.6370, -1974.3113, 13.5589, 182.1979}, 0, 0, 0},
   {19197, {2200.5195, -1970.1035, 13.7841}, {3353.3347, -1632.5538, 18.6334, 267.5470}, 0, 0, 0},


   {19197, {-1785.4785, 3114.8950, 13.8556}, {390.2900, 2437.3896, 16.5000, 1.0768}, 0, 0, 0},
   {19197, {390.3255, 2435.5010, 16.5000}, {-1785.4001, 3117.1042, 14.8556, 357.9757}, 0, 0, 0}


};

new wTPickup[sizeof(TelePickup)];



//===============================Animations=====================================
enum AnimEnum
{
  Lib[30],
  AnimName[30],
  AnimExplain[30],
  playonce
}
new Anims[][AnimEnum] =
{
   {"BEACH",  "bather",  "lay down", 0},
   {"BEACH",  "Lay_Bac_Loop",  "lay down waiting", 0},
   {"BEACH",  "SitnWait_loop_W",  "celebrate", 1},
   {"CAMERA",  "camcrch_cmon",  "Come on", 1},
   {"COP_AMBIENT",  "Coplook_think",  "Cop thinking", 0},
   {"COP_AMBIENT",  "Coplook_loop",  "Cop stand", 0},
   {"CRACK",  "crckdeth1",  "Want Drugs1", 1},
   {"CRACK",  "crckdeth2",  "Want Drugs2", 1},
   {"CRACK",  "crckdeth3",  "Want Drugs3", 1},
   {"CRACK",  "crckdeth4",  "Want Drugs4", 1},
   {"CRACK",  "crckidle1",  "Druge Dealer lay1", 0},
   {"CRACK",  "crckidle2",  "Druge Dealer lay2", 0},
   {"CRACK",  "crckidle3",  "Druge Dealer lay3", 0},
   {"CRACK",  "crckidle4",  "Druge Dealer lay4", 0},
   {"CRACK",  "Bbalbat_Idle_01",  "Taking Crack", 0},
   {"CRACK",  "Bbalbat_Idle_01",  "Taking Crack2", 0},
   {"DAM_JUMP",  "Jump_Roll",  "Jump roll", 1},
   {"DANCING",  "bd_clap",  "retard dance1", 0},
   {"DANCING",  "bd_clap1",  "retard dance2", 0},
   {"DILDO",  "DILDO_IDLE",  "Ready", 0},
   {"DILDO",  "DILDO_G",  "Onground hit", 1},
   {"FOOD",  "EAT_Vomit_SK",  "Enough", 1},
   {"INT_HOUSE",  "BED_Loop_L",  "Bed sleep", 0},
   {"INT_HOUSE",  "LOU_Loop",  "sofa sit", 0},
   {"INT_HOUSE",  "OFF_Sit_Idle_Loop",  "Office sit", 0},
   {"INT_HOUSE",  "OFF_Sit_Type_Loop",  "Office sit2", 0},
   {"JST_BUISNESS",  "girl_02",  "Lady sit", 0},
   {"KISSING",  "BD_GF_Wave",  "Back wave", 1},
   {"KISSING",  "gfwave2",  "wave", 1},
   {"KISSING",  "Grlfrd_Kiss_01",  "Kiss1", 1},
   {"KISSING",  "Grlfrd_Kiss_02",  "Kiss2", 1},
   {"KISSING",  "Grlfrd_Kiss_03",  "Kiss3", 1},
   {"GANGS",  "Invite_No",  "Gangster No", 1},
   {"GANGS",  "Invite_Yes",  "Gangster Ye", 1},
   {"GANGS",  "hndshkaa",  "Gangster Shake1", 1},
   {"GANGS",  "hndshkba",  "Gangster Shake2", 1},
   {"GANGS",  "hndshkca",  "Gangster Shake3", 1},
   {"GANGS",  "hndshkea",  "Gangster Shake4", 1},
   {"GANGS",  "hndshkfa",  "Gangster hugShake", 1},
   {"GANGS",  "leanIDLE",  "Gangster lean", 0},
   {"GANGS",  "prtial_gngtlkA",  "Gangster talk1", 0},
   {"GANGS",  "prtial_gngtlkB",  "Gangster talk2", 0},
   {"GANGS",  "shake_carK",  "Gangster Kick", 1},
   {"GHANDS",  "gsign1",  "Gangster Sign1", 1},
   {"GHANDS",  "gsign1LH",  "Gangster Sign2", 1},
   {"GHANDS",  "gsign2",  "Gangster Sign3", 1},
   {"MEDIC",  "CPR",  "Medic", 0},
   {"MISC",  "bitchslap",  "bitch ass slap", 0},
   {"MISC",  "Plyrlean_loop",  "Leen", 0},
   {"ON_LOOKERS",  "shout_01",  "Shout1", 0},
   {"ON_LOOKERS",  "shout_02",  "Shout2", 0},
   {"ON_LOOKERS",  "panic_point",  "point", 1},
   {"ON_LOOKERS",  "Pointup_loop",  "point up", 1},
   {"ON_LOOKERS",  "wave_loop",  "wave", 0},
   {"ON_LOOKERS",  "lkup_loop",  "look up", 0},
   {"ped",  "DUCK_cower",  "Hide", 0},
   {"ped",  "gum_eat",  "eat gum", 1},
   {"ped",  "handscower",  "scared", 1},
   {"ped",  "IDLE_tired",  "tired", 0},
   {"PLAYIDLES",  "shift",  "waiting stand", 0},
   {"RAPPING",  "Laugh_01",  "Laugh", 1},
   {"RIOT",  "RIOT_ANGRY",  "riot angry", 0},
   {"RIOT",  "RIOT_ANGRY_B",  "riot angry2", 0},
   {"SUNBATHE",  "ParkSit_M_IdleA",  "Lay1", 0},
   {"SUNBATHE",  "ParkSit_M_IdleB",  "LAy2", 0},
   {"SUNBATHE",  "ParkSit_M_IdleC",  "Lay3", 0},
   {"WUZI",  "CS_Dead_Guy",  "Dead Guy", 0},
   {"WUZI",  "Wuzi_follow",  "Follow me", 1},
   {"GRAVEYARD",  "mrnF_loop",  "Cry", 0},
   {"MISC",  "plyr_shkhead",  "Facepalm", 1},
   {"DANCING", "DAN_Down_A", "Dancing00", 0},
   {"DANCING", "DAN_Left_A", "Dancing01", 0},
   {"DANCING", "DAN_Loop_A", "Dancing02", 0},
   {"DANCING", "DAN_Right_A", "Dancing03", 0},
   {"DANCING", "DAN_Up_A", "Dancing04", 0},
   {"DANCING", "dnce_M_a", "Dancing05", 0},
   {"DANCING", "dnce_M_b", "Dancing06", 0},
   {"DANCING", "dnce_M_c", "Dancing07", 0},
   {"DANCING", "dnce_M_d", "Dancing08", 0},
   {"DANCING", "dnce_M_e", "Dancing09", 0}
};

//================================Oysters=======================================
new Float:Oysters[50][3] =
{
    //X   Y     Z
   // {979.0, -2210.0, -3.0},
    {951.0831, -2148.5239, -3.0},
    {2750.0, -2584.0, -5.0},
    {1279.0, -806.0, 85.0},
    {2945.1299, -2051.9299, -3.0},
    {67.0, -1018.0, -5.0},
    {2327.0, -2662.0, -5.0},
    {2621.0, -2506.0, -5.0},
    {1249.0, -2687.0, -1.0},
    {725.0, -1849.0, -5.0},
    {723.0, -1586.0, -3.0},
    {155.0, -1975.0, -8.0},
    {1968.0, -1203.0, 17.0},
    {-2657.0, 1564.0, -6.0},
    {-1252.0, 501.0, -8.0},
    {-1625.0, 4.0, -10.0},
    {-1484.0, 1489.0, -10.0},
    {-2505.4058, 1543.7236, -22.5553},
    {-2727.0, -469.0, -5.0},
    {-1266.0, 966.0, -10.0},
    {-1013.0, 478.0, -7.0},
    {-1364.0, 390.0, -5.0},
    {2578.0, 2382.0, 16.0},
    {2090.0, 1898.0, 8.0},
    {2130.0, 1152.0, 7.0},
    {2013.0, 1670.0, 7.0},
    {2531.0, 1569.0, 9.0},
    {2998.0, 2998.0, -10.0},
    {-832.0, 925.0, -2.0},
    {486.0, -253.0, -4.0},
    {-90.0, -910.0, -5.0},
    {26.43, -1320.9399, -10.04},
    {-207.0, -1682.0, -8.0},
    {-1672.0, -1641.0, -2.0},
    {-1175.0, -2639.0, -2.5},
    {-1097.0, -2858.0, -8.0},
    {-2889.0, -1042.0, -9.0},
    {-659.0, 874.0, -2.0},
    {-955.0, 2628.0, 35.0},
    {-1066.0, 2197.0, 32.0},
    {40.0, -531.0, -8.0},
    {-765.0, 247.0, -8.0},
    {2098.0, -108.0, -2.0},
    {2767.0, 470.0, -8.0},
    {-783.0, 2116.0, 35.0},
    {-821.0, 1374.0, -8.0},
    {-2110.5, 2329.72, -7.5},
    {-1538.0, 1708.0, -3.27},
    {-2685.0, 2153.0, -5.0},
    {796.0, 2939.0, -5.0},
    {2179.0, 235.0, -5.0}
};
new OystersPickup[50];
new MyOysters[MAX_PLAYERS][50];

//================================Spray Tags=======================================
new Float:Spray[100][4]=
{
    {2797.8220, -1096.6389, 30.7188, 178.4936},
    {2820.4546, -1189.2142, 25.2165, 177.6814},
    {2767.4463, -1196.7509, 68.9323, 100.2873},
    {2841.5981, -1313.6809, 18.5467,  9.0204},
    {2820.1011, -1465.1730, 16.2568, 267.4344},
    {2769.1284, -1621.1461, 10.9272, 89.6081},
    {2768.2563, -1821.1127, 11.8478, 22.5334},
    {2875.5303, -1909.4677, 7.9068, 85.6393},
    {2794.6177, -1905.2269, 13.5394, 176.1308},
    {2814.2163, -1942.0989, 11.1094, 90.3837},

    {2764.2063, -2012.0367, 13.5547, 88.3992},
    {2705.5571, -1966.7732, 13.5469, 86.8116},
    {2705.6936, -2144.3718, 11.0720, 89.9868},
    {2588.5718, -2063.4800, 4.2415, 88.0023},
    {2430.3323, -1999.0354, 13.5469, 356.7170},
    {2489.1951, -1958.2125, 13.5856, 181.2719},
    {2392.3057, -1915.7626, 13.5469, 359.0799},
    {2421.6873, -1682.0786, 13.7875, 260.2352},
    {2399.5503, -1551.0206, 28.0000, 177.2663},
    {2462.1873, -1542.3044, 24.3438, 357.8525},

    {2352.5762, -1508.2314, 24.0000, 269.3270},
    {2393.9260, -1469.5836, 24.0000, 359.4401},
    {2521.4133, -1478.6417, 23.9924, 260.5770},
    {2668.9482, -1469.0967, 30.5609, 86.7380},
    {2754.4724, -1388.2097, 39.3755, 268.1180},
    {2612.9714, -1391.8751, 34.7904, 359.4034},
    {2541.8374, -1363.2571, 31.3770, 267.3244},
    {2537.5071, -1352.6163, 30.8023, 91.0857},
    {2579.9363, -1274.2095, 46.1420, 266.1337},
    {2603.0386, -1196.6466, 61.5290, 176.8144},

    {2576.9087, -1144.4353, 47.8692,  0.9727},
    {2621.3794, -1093.2952, 69.6081, 356.2099},
    {2240.6201, -998.7141, 59.5577, 136.3130},
    {2282.5591, -1119.0227, 26.8984, 87.4768},
    {2224.5503, -1194.2247, 25.3742, 356.9853},
    {2119.2200, -1195.5690, 23.8165, 175.2084},
    {2132.1533, -1259.1013, 23.9922,  3.7324},
    {2323.5845, -1254.4792, 22.5000, 89.0274},
    {2346.4233, -1351.9185, 24.0179,  5.2831},
    {2234.8423, -1367.6643, 24.5313, 89.0274},

    {2093.7429, -1414.4178, 23.9824,  6.8523},
    {2182.2148, -1466.8687, 25.5391, 181.8821},
    {2272.9299, -1688.4259, 13.6521,  4.0558},
    {2162.6599, -1787.0502, 13.5190,  6.8341},
    {2034.4702, -1802.6708, 13.5469,  9.2155},
    {2065.3657, -1898.3278, 13.5538, 14.7720},
    {2134.8560, -2011.7184, 9.4485, 50.8892},
    {2378.5845, -2166.8413, 24.3050, 312.4598},
    {2274.8005, -2266.6367, 13.5469, 51.6830},
    {2274.2424, -2529.1736, 8.2896, 95.3413},

    {2174.4526, -2166.2207, 13.5469, 47.3173},
    {1936.9192, -2135.8142, 13.7023, 359.6903},
    {1783.9282, -2157.5994, 13.5469,  3.2623},
    {1809.4135, -2092.3525, 13.5469, 90.5969},
    {1951.8884, -2034.4567, 13.5469, 92.5814},
    {1888.0923, -1982.5509, 13.5469, 271.5433},
    {1849.8905, -1877.7300, 13.5327,  5.1547},
    {1837.4305, -1813.2817, 3.9844, 168.2959},
    {1910.0239, -1778.7949, 17.9766, 191.3158},
    {2045.3475, -1635.8098, 13.5469, 283.8101},

    {2101.2141, -1648.7527, 13.4116, 272.6971},
    {2067.5242, -1652.6517, 13.5469, 88.9174},
    {2073.2859, -1579.0610, 13.4560, 281.4287},
    {1958.7642, -1577.1290, 13.5880, 226.2424},
    {1974.0750, -1352.3345, 23.8195, 355.6294},
    {1968.7018, -1289.6909, 23.9844, 270.6943},
    {1966.9719, -1175.6644, 20.0307,  0.7891},
    {2075.7651, -1070.5535, 27.2460, 236.5619},
    {2121.7390, -1060.1364, 25.1981, 243.2724},
    {2061.9626, -996.1541, 47.9766, 258.7328},

    {1913.1558, -1064.3879, 24.1247, 95.5916},
    {1731.4802, -963.1080, 40.9502, 278.1805},
    {1520.5123, -1011.0164, 23.9168, 97.9360},
    {1498.4860, -1206.3647, 23.5973, 184.8740},
    {1687.3203, -1238.1456, 14.9844, 185.2525},
    {1746.6873, -1358.5365, 15.7674, 185.2342},
    {1767.5319, -1616.4915, 14.4802, 165.3711},
    {1836.6057, -1640.3440, 13.3409, 272.9473},
    {1800.3809, -1708.6440, 13.5291, 99.4868},
    {1724.6675, -1739.9553, 13.5469, 182.8344},

    {1549.9283, -1715.5770, 13.5469,  2.6562},
    {1448.0944, -1755.2695, 13.5469, 186.0391},
    {1624.7053, -2297.3489, 13.5398,  1.4656},
    {1573.3630, -2693.7258, 13.5497, 272.9400},
    {1119.5428, -2009.2360, 74.4297, 32.8017},
    {1070.0676, -1863.8125, 13.5469, 272.1464},
    {1332.2217, -1723.1298, 13.5469,  4.2255},
    {1271.5541, -1663.3373, 19.7344,  3.0347},
    {1295.1844, -1464.1504, 10.0469, 180.0672},
    {1097.9066, -1292.6833, 17.0469, 270.9555},

    {1207.6121, -1161.8607, 23.4814, 97.4656},
    {1074.0736, -1012.8420, 34.8681, 95.0842},
    { 944.1566, -984.5141, 38.7030, 193.9105},
    { 466.4322, -1284.1754, 15.4286, 336.3950},
    { 584.2311, -1501.9821, 15.2976, 102.2283},
    { 730.4562, -1482.7980, 1.9688,  9.7524},
    { 811.5734, -1796.5508, 13.0234, 129.6323},
    { 482.7314, -1762.6064, 5.5392,  6.1988},
    { 400.0860, -2066.7952, 10.7473, 94.7058},
    { 948.7913, -1466.6056, 17.1484, 91.1633}
};
new MySprays[MAX_PLAYERS][100];

//================================Horse Shoeses=======================================
new Float:Horseshoes[50][3] = {
	//X      Y         Z
	{1224.0, 2617.0, 11.0},
	{2323.0, 1284.0, 97.0},
	{2035.0, 2305.0, 18.0},
	{2491.0, 2263.0, 15.0},
	{1433.0, 2796.0, 20.0},
	{2071.0, 712.0, 11.0},
	{2239.0, 1839.0, 18.0},
	{2583.0, 2387.0, 16.0},
	{2864.0, 857.0, 13.0},
	{2612.0, 2200.0, -1.0},
	{2274.0, 1507.0, 24.0},
	{2184.0, 2529.0, 11.0},
	{1863.0, 2314.0, 15.0},
	{2054.0, 2434.0, 166.0},
	{1603.0, 1435.0, 11.0},
	{1362.92, 1015.24, 11.0},
	{2058.7, 2159.1001, 16.0},
	{2003.0, 1672.0, 12.0},
	{2238.0, 1135.0, 49.0},
	{1934.0601, 988.79, 22.0},
	{1768.0, 2847.0, 9.0},
	{1003.6667, 1068.0282, 11.9635},
	{2879.0, 2522.0, 11.0},
	{2371.0, 2009.0, 15.0},
	{1521.0, 1690.0, 10.6},
	{2417.0, 1281.0, 21.0},
	{1376.0, 2304.0, 15.0},
	{1393.0, 1832.0, 12.34},
	{984.0, 2563.0, 12.0},
	{1767.0, 601.0, 13.0},
	{2108.0, 1003.0, 46.0},
	{2705.98, 1862.52, 24.41},
	{2493.0, 922.0, 16.0},
	{1881.0, 2846.0, 11.0},
	{2020.0, 2352.0, 11.0},
	{1680.3, 2226.8601, 16.11},
	{1462.0, 936.0, 10.0},
	{2125.5, 789.23, 11.45},
	{2588.0, 1902.0, 15.0},
	{919.0, 2070.0, 11.0},
	{2173.0, 2465.0, 11.0},
	{2031.25, 2207.3301, 11.0},
	{2509.0, 1144.0, 19.0},
	{2215.0, 1968.0, 11.0},
	{2626.0, 2841.0, 11.0},
	{2440.0801, 2161.0701, 20.0},
	{1582.0, 2401.0, 19.0},
	{2077.0, 1912.0, 14.0},
	{970.0, 1787.0, 11.0},
	{1526.22, 751.0, 33.2828}
};
new ShoesPickup[50];
new MyShoeses[MAX_PLAYERS][50];
//==============================Easter Eggs=====================================

enum eInfo
{
	  tip[80],
      Float:Epos[3]
};
new EasterEgg[][eInfo]=
{
	{"A new casino is under construction!", {2690.4526, 867.1161, 9.8000}},
	{"Have you ever seen a pyramid in Las Venturas?", {2323.7305, 1283.2560, 95.9000}},
	{"The pirates ship will never set sail again...", {2000.3872, 1526.9734, 14.1000}},
	{"A casino with a clown on it!", {2138.1614, 1785.8660, 10.4000}},
	{"The Visage motel is very famous in San Andreas!", {2075.9736, 1922.1576, 13.9000}},
	{"Home of the Bandits!", {1483.6501, 2229.8201, 11.4000}},
	{"Girls XXX , Live nude girls!", {2488.6299, 2126.7817, 25.3000}},
	{"Do you want to ROCK&ROLL?", {2640.4092, 2327.5684, 17.3000}},
	{"Xoomer in the desert...", {621.6111, 1681.6711, 6.5000}},
	{"Fort C... Wait what?", {170.9185, 1220.1047, 22.8000}},
	{"Red bridge connects between two countries!", {-1497.7028, 589.4399, 41.8000}},
	{"Have you ever seen the top of the world?", {-2877.1907, 2554.5935, 259.7000}},
	{"What are these Indian tents for?", {-859.7420, 2753.9412, 45.3000}},
	{"The dam is a great way to impound water!", {-892.6245, 1972.0618, 60.3000}},
	{"The smoking beef grill has a cow!", {-859.6649, 1525.7800, 27.7000}},
	{"A chicken has laid an easter egg!", {-237.0469, 2663.3486, 63.3000}},
	{"A neglected airport!", {414.8091, 2533.1072, 18.6000}},
	{"Welcome to Las venturas!", {984.5703, 2562.8738, 10.3000}},
	{"Do you like golfing?", {1493.4673, 2773.5403, 10.3000}},
	{"K.A.C.C - Restricted Area! Stay away!", {2543.7009, 2797.0344, 10.5000}},
	{"Emerald I. in Las Venturas has a huge parking lot!", {2072.4712, 2439.7766, 50.0000}},
	{"Do you like trains?", {2858.7356, 1267.4175, 11.3000}},
	{"Someone call the cops! Ryder plants weed in groove street!", {2464.9551, -1714.5767, 13.000}},
	{"The BIGGEST round thing on the map in Los Santos!", {2737.5132, -1760.3297, 43.7000}},
	{"Do you remember singleplayer version where u needed a forklift to steal crates?", {2744.3438, -2453.3770, 13.3000}},
	{"Los Santos Airport is so huge!", {1716.9100, -2678.6357, 13.3000}},
	{"Where is the lowrider meet?", {1763.8136, -1913.6129, 13.1000}},
	{"Everyone likes skating right? But where to skate...", {1953.8499, -1372.6798, 19.3000}},
	{"Which one is the first turf you attack in Singleplayer? G PARK!", {1966.1033, -1157.2660, 20.4000}},

	{"Coutt and Schutz!", {2115.9985, -1158.1235, 23.9000}},
	{"Inside the drain tunnel!", {2649.0359, -1453.7507, 15.7000}},
	{"Wheels scrap!", {2181.4875, -1996.4261, 13.3000}},
	{"The beach is a great way to train you muscles & show off!", {660.2039, -1869.7808, 5.1000}},
	{"Watchtower is a good way to protect a beach!", {154.0728, -1943.1287, 3.29900}},
	{"Market station!", {824.9611, -1353.6527, 13.3000}},
	{"Only rich people live in Vinewood!", {1378.1924, -806.4984, 84.4000}},
	{"Under the rail ways of Los Santos!", {1728.3096, -1031.0570, 23.4400}},
	{"CJ, Get on the BMX NOW!", {2245.0894, -1260.7599, 23.4000}},
	{"Bow Wow - Basketball - Who want to play?", {2290.7908, -1528.4020, 26.4000}},
	{"Pipe , beach , and two scrap cars?", {2871.0518, -2124.8667, 4.4000}},
	{"Saints boulevard, East beach Los Santos!", {2730.2461, -1642.2843, 12.7000}},
	{"Burning Desire!", {2357.2195, -1169.9604, 27.5000}},
	{"Does Mount Everest exist in San Andreas?", {-2432.4751, -1619.7983, 527.0152}},
	{"Get the hell out of here burgler! ... CJ?!", {2494.6929, -1704.4829, 1018.6438}},
	{"There are no Easter Eggs up here! Go away!", {-2666.8276, 1594.9418, 217.5739}},
	{"Are there any Cargo Ship in San Fierro?", {-2432.9309, 1536.2261, 34.7020}},
	{"The 4 Dragons casino is huge!", {1943.0436, 1018.0239, 992.7688}},
	{"NO SMOKING in Caligula's Casino!", {2161.6970, 1599.9595, 1000.2736}},
	{"Steak House!", {1693.9080, 2208.5542, 15.8412}},
	{"Feel like suiciding or killing someone? Plant a bomb in the car!", {1846.7745, -1855.5188, 18.2780}},
	{"Excuse me!? where is the Unity Station?", {1726.0673, -1838.0248, 13.8576}},
	{"Have you ever seen a broken statue anywhere?", {1721.9282, -1654.4810, 20.2688}},

	{"Try betting on horses, maybe you'll win something!", {820.5815, 9.0130, 1004.4963}},
	{"Exporting cars is a well paid job!", {-1536.9352, 125.9484, 3.8547}},
	{"It's time for a party!", {487.7654, -4.5528, 1002.3781}},
	{"DRUGS!", {-2188.7451, -247.9088, 41.0195}},
	{"Well Stacked Pizza's make the best pizzas!", {379.0127, -116.2872, 1001.7922}},
	{"Shall we get a Tattoo?", {-201.7688, -23.0449, 1002.5734}},
	{"CALL NOW 555-3478!", {1970.7280, -1793.0056, 18.1350}},
	{"I need a piece man, where can i buy a gun?", {298.8676, -40.6517, 1001.8156}},
	{"A ghost has been seen in the Graveyard!", {811.2281, -1098.3167, 26.2063}},
	{"A little spinning UFO!", {-218.4164, 1405.5988, 28.0734}},
	{"Some rumors say that Big Foot is living somewhere in a secret cave!", {-410.7504, 1334.7590, 13.3469}},
	{"New ZIP store opens soon!", {-2035.7490, 336.8936, 35.4719}},
	{"Woozie lived in Chinatown!", {-2181.8074, 713.7638, 54.1912}},
	{"You should cut your hair!", {414.1041, -49.3694, 1002.1984}},
	{"Taste The Cock!", {380.2898, -9.8332, 1002.9757}},
	{"What does LC stands for?", {-827.9551, 521.7527, 1357.4016}},
	{"An Army Ship with 2 numbers!", {-1290.3600, 491.0156, 11.4953}},
	{"The cells in SFPD are small! Really small...", {226.0592, 121.4767, 999.3571}},
	{"Self-Defence is good, what about learning Kung Foo?", {774.1239, -60.2343, 1001.0184}},
	{"Welding & Weddings!", {2005.9048, 2315.1206, 11.1203}},
	{"PIER 69!", {-1679.3331, 1378.6428, 13.1284}},
	{"Bait-Shop!", {-1353.1823, 2057.6831, 53.4172}},
	{"I wish they had McDonald's here, do they have burgers anywhere?", {-2350.3508, 1008.9117, 56.2219}},
	{"Have you ever competed in Retards Party race?", {-2707.6765, 378.0910, 12.2795}},
	{"A lake in a garden near a bridge!@#!%%^", {-2819.4734, 1081.5220, 28.0422}},
	{"The Pleasure Domes!", {-2670.3018, 1410.4170, 913.0240}},
	{"Sinister Zombie , Virus Research , Corporation!", {-1943.7085, 702.1638, 46.8625}},
	{"Where can you find blood? I mean clothes...", {205.9059, -8.2650, 1005.5109}},
	{"Help EMERGENCY needed!", {2030.0952, -1410.2573, 17.2989}},
	{"FIRE! FIRE! FIRE!", {-2049.7595, 75.1570, 28.6906}},
	{"Learn to drive!", {-2034.6075, -115.4128, 1035.4719}},
	{"Area 69 is a very secured place!", {299.4015, 1818.5774, 1.7000}},
	{"Have you ever seen the big ear?", {-347.9887, 1580.4646, 75.8000}},
	{"Your one stop shop!", {2013.7985, 2478.5601, 11.3000}},
	{"Rockstar North is a huge rock!", {2565.3042, -643.1229, 136.3000}},
	{"What are adult toys?", {1942.3889, -2132.8684, 13.3000}},
	{"A pretty small island!", {-1509.0162, 1370.6704, 2.6000}},
	{"The highest tower of San Fierro!", {-1753.5201, 885.7187, 295.29000}},
	{"We'll dump your load!", {-2198.9526, -415.5975, 50.2900}},
	{"Where does mountain deathmactch take place?", {-2490.1785, -715.6370, 138.790}},
	{"Parking lot near 5 big towers? Where is that?", {-2147.1392, -863.5040, 31.8000}},
	{"There are many tunnels on the way to Chilliad!", {-2052.6250, 150.4688, 30.2375}},
	{"Star Fish!?", {2629.9167, 1824.4089, 11.0234}},
	{"Motel 26 32?", {-23.9273, -2528.9783, 36.3000}},
	{"A yard that is full of junk!", {-1913.8904, -1672.7314, 22.5000}},
    {"A bridge conntects between the two parts of San Fierro Airport!", {-1613.5491, -497.9952, 22.2000}},
	{"Tune your lowrider!", {2645.8977, -2051.7266, 13.6334}},
	{"Wang dealer sells some fast cars!", {-1952.6089, 305.8391, 41.0471}}
};

new EasterPickup[sizeof(EasterEgg)];
new MyEggs[MAX_PLAYERS][sizeof(EasterEgg)];

//==============================Medals==========================================
new STRING[4100];

new Text:AN2;
new ANshowin;
new ANText[128];

new Text:mTD[4];
new PlayerText:pmTD[MAX_PLAYERS][2];

enum medalinfo
{
	 mName[30],
	 HowTo[80],
	 Done[80],
	 mType,
     Price[2]
};
new Medals[95][medalinfo] =
{
        {"Master of GTADM", "Complete all the medals", "Complete all the medals", 4,  {20000000, 25}}, //0
        {"My first visit", "?????????", "Welcome", 1,  {25000, 3}}, //1
        {"Addicted", "Play for 24 hours", "That was easy!", 4, {50000, 8}}, //2
        {"First blood", "DIE", "did you feel the pain?", 1,  {10000, 3}}, //3
        {"MultiKill", "Reach 3 killing streak in any dm", "Good", 1,  {3000, 2}}, //4
        {"Baby killer", "Reach 7 killing streak in any dm", "Sweet", 1,  {7000, 3}}, //5
        {"UltraKill", "Reach 10 killing streak in any dm", "Great", 1,  {8000, 3}}, //6
        {"Dominating", "Reach 15 killing streak in any dm", "Wow", 2,  {25000, 5}}, //7
        {"Unstoppable", "Reach 20 killing streak in any dm", "Amazing", 2,  {25000, 5}}, //8
        {"MonsterKill", "Reach 25 killing streak in any dm", "Extreme", 3,  {30000, 5}}, //9
        {"Elite killer", "Reach 30 killing streak in any dm", "Fantastic", 3,  {30000, 5}}, //10
        {"LudicrousKill", "Reach 40 killing streak in any dm", "Splendid", 4,  {50000, 8}}, //11
        {"GodLike", "Reach 50 killing streak in any dm", "No way", 4,  {50000, 8}}, //12
        {"My first car", "buy a car", "Congratulations", 2,  {25000, 3}}, //13
        {"My first house", "buy a house", "Congratulations", 2,  {25000, 3}}, //14
        {"STFU", "???", "Watch your mouth", 1,  {10000, 2}}, //15
        {"MP3", "Listen to the Music! (/Music)", "Listen to the Music! (/Music)", 1,  {10000, 2}}, //16
        {"Pro Racer", "Place in top 1 in a race", "Lets hope no one breaks your record", 3, {30000, 5}}, //17
        {"Pro Drifter", "Place in top 3 in a drift", "Lets hope no one breaks your record", 3,  {30000, 5}}, //18
        {"Street fighter", "Win 150 gangwars", "You are a real street fighter", 3,  {30000, 5}}, //19
        {"Walkies pro", "reach 15 ratio in walkies deathmatch (dm2)", "reach 15 ratio in walkies deathmatch (dm2)", 2,  {25000, 5}}, //20
        {"Runnies pro", "reach 15 ratio in runnies deathmatch (dm3)", "reach 15 ratio in runnies deathmatch (dm3)", 2,  {25000, 5}}, //21
        {"Dance with a devil", "Kill an admin (level 1337)", "How dare you", 2,  {10000, 3}}, //22
        {"VIP Killer", "Kill a VIP player", "Was that necessary?", 1,  {10000, 3}}, //23
        {"Jonny's bitch", "????", "You have been insulted by a bot", 1,  {10000, 3}}, //24
        {"Cover my head", "Cover your ugly head", "nice hat", 2,  {10000, 3}}, //25
        {"Alcoholic", "Drink Beer", "Drink Beer", 2,  {10000, 3}}, //26
        {"Sun Glasses", "Its sunny outside isnt it?", "nice glasses", 2,  {10000, 3}}, //27
        {"Straight man", "read the rules (/rules)", "/rules", 1,  {5000, 1}}, //28
        {"Rich Dude", "Deposit 100 mil in your bank", "You can call yourself rich now", 3, {50000, 8}}, //29
        {"Lucky kill", "Gain 25 mill from one kill", "Gain 25 mill from one kill", 3, {50000, 8}}, //30
        {"Duel freak", "Win 200 duels in total", "win 200 duels in total", 4, {20000, 5}}, //31
        {"Never fall", "Win 50 fallouts in total", "win 50 fallouts in total", 2, {15000, 3}}, //32
        {"Worst driver", "????", "You are a real bad driver", 3, {30000, 5}}, //33
        {"Thankful", "/Credits", "/Credits", 1, {30000, 5}}, //34
        {"Criminal", "Kill 10000 players", "Kill 10000 players", 4, {30000, 5}}, //35
        {"Deagle Gamer", "Reach the Deagle level in GunGame", "Reach the Deagle level in GunGame", 2, {10000, 5}}, //36
        {"Sawnoff Gamer", "Reach the SawnOff level in GunGame", "Reach the SawnOff level in GunGame", 3, {20000, 5}}, //37
        {"Weapons Freak", "Reach the maximum level in GunGame", "Reach the maximum level in GunGame", 4, {30000, 5}}, //38
        {"Derby Master", "Win 35 derby matches in total", "Win 35 derby matches in total", 4, {30000, 5}}, //39
        {"GTA Player", "Complete 9 missions", "Complete 9 missions", 3, {30000, 5}}, //40
        {"Golden Foot", "Goal!", "Goal!", 1, {10000, 3}}, //41
        {"CS freak!", "Win 30 CS games!", "Win 30 CS games!", 1, {10000, 3}}, //42
        {"Rampage!", "Reach a killing spree in CS!", "Reach a killing spree in CS!", 2, {20000, 4}}, //43
        {"Money Hungry", "Win 30 Money Games!", "Money Hungry", 2, {20000, 4}}, //44
        {"Farmer", "Win 30 Hay Games!", "Win 30 Hay Games!", 3, {25000, 4}}, //45
        {"Sheriff!", "Arrest 50 Players", "Arrest 50 Players!", 3, {30000, 7}}, //46
        {"Doctor!", "Heal 50 Players", "Heal 50 Players!", 3, {30000, 7}}, //47
        {"Bomber!", "Bomb 50 Players", "Bomb 50 Players!", 3, {30000, 7}}, //48
        {"I Hate Gravity!", "??", "Die by falling from a high place!", 1, {10000, 2}}, //49
        {"Swim With Fish!", "Drown", "Drown!", 1, {10000, 2}}, //50
        {"Trap!", "Kill someone using the satchel charge in the Minigun deathmatch", "Kill someone using the satchel charge in the Minigun deathmatch!", 2, {20000, 3}}, //51
        {"Cry!", "Cry!", "Cry!", 1, {10000, 1}}, //52
        {"Pro Mechanic!", "Repair a Rhino!", "Repair a Rhino!", 3, {30000, 4}}, //53
        {"Bot Owner!", "PM Jonny and make him say 'Please'!", "PM Jonny and make him say 'Please'!", 4, {40000, 5}}, //54
        {"Uranus!", "Tune an Uranus with a paintjob in Wheel Arch Angels!", "Tune an Uranus with a paintjob in Wheel Arch Angels!", 1, {10000, 2}}, //55
        {"S.W.A.T!", "Export a SWAT Van!", "Export a SWAT Van", 2, {20000, 3}}, //56
        {"Reaction Master", "Win a reaction test in less than 2 seconds!", "Win a reaction test in less than 2 seconds!", 4, {50000, 5}}, //57
        {"Fly to the sky", "Perform a skydive!", "Perform a skydive!", 1, {10000, 2}}, //58
        {"Hello", "Call someone!", "Call someone!", 3, {30000, 5}}, //59
        {"Cruel Life", "Commit Suicide!", "Bye Cruel Life!", 1, {10000, 2}}, //60
        {"Ass Kicker", "Reach 120 players beaten up!", "Reach 120 players beaten up!", 4, {30000, 10}}, //61
        {"Pro Stunter", "Finish the STF stunt map!", "Finish the STF stunt map!", 2, {10000, 2}}, //62
        {"Human Missile", "Reach the distance of 220 meters in the Cannon challenge", "Reach the distance of 220 meters in the Cannon challenge", 2, {10000, 2}}, //63
        {"Mr.Muscle", "Kill 20 Players in Beat Em up Deathmatch!", "Kill 20 Players in Beat Em up Deathmatch!", 3, {30000, 4}}, //64
        {"Ride the clouds", "Compelete the Diving Challege (/DIVE)!", "Compelete the Diving Challege (/DIVE)!", 2, {30000, 2}}, //65
		{"Chuck Norris Reflection", "Win 5 reaction test in row", "Win 5 reaction test in row", 3, {45000, 3}}, //66
		{"Score Maker!", "Earn 500score during one game session.", "Earn 500score during one game session.", 3, {45000, 3}}, //67
		{"No Lifer!", "Spend 5 hours ingame during one game session.", "Spend 5 hours ingame during one game session.", 4, {100000, 5}}, //68
		{"Killing Machine", "Kill 150 people during one game session.", "Kill 150 people during one game session.", 4, {100000, 5}}, //69
		{"The Event Star", "Win an Event", "Win an Event", 2, {25000, 2}}, //70
		{"Premium Player", "Collect 5 Premium Points", "Collect 5 Premium Points", 2, {25000, 2}}, //71
		{"Ooops", "Die Drunk!", "Die Drunk!", 1, {45000, 3}}, //72
		{"Elite Drifter", "Score 10k in one drift without crashing", "Score 10k in one drift without crashing", 3, {45000, 3}}, //73
		{"Sharp Shooter", "Headshoot 50 people during one game session", "Headshoot 50 people during one game session", 4, {50000, 5}}, //74
		{"Pro Exporter", "Export 20 Vehicles in one game session", "Export 20 Vehicles in one game session", 4, {50000, 5}}, //75
		{"Kurt Cobain", "Die like Kurt Cobain", "Die like Kurt Cobain", 2, {40000, 3}}, //76
		{"Thunderball", "Break 15 Speed Records", "Break 15 Speed Records", 3, {50000, 4}}, //77
		{"Flag master", "Win 25 Capture the flag minigames!", "Win 25 Capture the flag minigames!", 3, {50000, 4}}, //78
		{"Rikishi", "Win 30 Sumo matches!", "Win 30 Sumo matches!", 3, {30000, 8}}, //79
		{"I Feel Lucky", "?!?!", "Drive a Dumper in the Sumo!", 3, {30000, 4}}, //80
		{"The Man", "Win the sumo without being eliminated!", "Win the sumo without being eliminated!", 3, {21000, 3}}, //81
		{"Thief!", "Rob someone", "Rob someone", 2, {21000, 3}}, //82
		{"First aid!", "Use a medkit", "Use a medkit", 2, {21000, 3}}, //83
		{"Safe driver!", "Use a repairing kit", "Use a repairing kit", 2, {21000, 3}}, //84
		{"Fast and Furious!", "Win 10 outrun races!", "Win 10 outrun races!", 3, {44000, 3}}, //85
		{"Welcome to RSHaul!", "Work as a trucker in RSHaul", "Work as a trucker in RSHaul", 3, {44000, 3}}, //86
		{"Sexy!", "Perform 50 blowjobs as a whore!", "Perform 50 blowjobs as a whore!", 3, {44000, 3}}, //87
		{"Ice Cold Killa", "Earn $100000000 from bounties as a hitman!", "Earn $100000000 from bounties as a hitman!", 3, {44000, 3}}, //88
		{"Last Man Standing", "Survive in 20 Last Man Standing matches!", "Survive in 20 Last Man Standing matches!", 3, {44000, 3}}, //89
		{"Smart Guy", "Win 20 Tic-Tac-Toes!", "Win 20 Tic-Tac-Toes!", 3, {44000, 3}}, //90
		{"Pro Wielder", "Win 10 GunGames!", "Win 10 GunGames!", 3, {44000, 3}}, //91
		{"Football Player", "Win 10 Football matches!", "Win 10 Football matches!", 3, {44000, 3}}, //92
		{"Ride or Die!", "Win 25 races!", "Win 25 races!", 3, {44000, 3}}, //93
		{"Quick Runner", "Win 25 parkours!", "Win 25 parkours!", 3, {44000, 3}}//94
		//{"Disco Dodgebomber", "Win 10 Disco Dodgebombs!", "Win 10 Disco Dodgebombs!", 3, {44000, 3}}, //95
		//{"Gladiator", "Win 10 Colosseum minigames!", "Win 10 Colosseum minigames!", 3, {44000, 3}}, //96
		//{"Flappy Bird", "Win 10 Flappy car minigames!", "Win 10 Flappy car minigames!", 3, {44000, 3}}//97
};
new MyMedals[MAX_PLAYERS][sizeof(Medals)];

//================================Derby=========================================

//====================Clan War==================================================
new TeamnXsScore;
new TeamAwayScore;
new CwWeaps[3];
//new CwWall[2][MAX_PLAYERS];
new cwplace=0;
//==============================================================================
//Cw 1
new Float:Cw1Pos[1][4] =
{
    {-1212.2687, -193.3475, 14.2, 46.8399}
};
new Float:Cw2Pos[][4] =
{
    {-1273.4426, -146.4854, 14.2, 226.6950}
};
new Float:CwSpec[][4] =
{
	{-1182.47, -119.10, 33.91, 180.0},
	{-1182.47, -119.10, 33.91, 180.0}
};
//Cw 2
new Float:c2Cw1Pos[][4] =
{
	{-2055.0132, -162.4520, 35.3203, 182.5104}
};
new Float:c2Cw2Pos[][4] =
{
	{-2052.7419, -241.0972, 35.3274, 0.4854}
};
new Float:c2CwSpec[][4] =
{
	{-2064.4434, -111.1841, 40.5240, 178.6211},
	{-2064.4434, -111.1841, 40.5240, 178.6211}
};

//Cw 3
new Float:c3Cw1Pos[1][4] =
{
	{1311.9515, 2129.5847, 11.0234, 315.3069}
};
new Float:c3Cw2Pos[1][4] =
{
	{1375.4498, 2177.3489, 11.0234, 136.1019}
};
new Float:c3CwSpec[][4] =
{
	{1398.7698, 2211.3723, 18.9766, 148.5957},
	{1411.1545, 2152.6714, 18.5391, 95.0153}
};
//cw 4
new Float:c4Cw1Pos[1][4] =
{
	{1680.5411, -3313.5222, 8.2822, 123.8186}
};
new Float:c4Cw2Pos[1][4] =
{
	{1622.5137, -3351.9509, 8.2844, 299.8903}
};
new Float:c4CwSpec[][4] =
{
	{1685.7555, -3307.0955, 17.2356, 124.0},
	{1685.7555, -3307.0955, 17.2356, 124.0}
};
new Float:WinnersPos[][4] =
{
	{-1268.0573, 35.5015, 32.8828, 134.1821}, // win1
	{-1266.3167, 33.4367, 32.8828, 136.6888}, // win2
	{-1264.4751, 31.0799, 32.8828, 135.7488}, // win3
	{-1262.1233, 28.8184, 32.8828, 136.3755}, // win4
	{-1259.5314, 26.2366, 32.8828, 132.6155}, // win5
	{-1256.9458, 23.7848, 32.8828, 132.9288}, // win6
	{-1253.7579, 20.1277, 32.8872, 133.2421}, // win7
	{-1255.9387, 25.2086, 32.8828, 136.0621}, // win8
	{-1259.8071, 29.0457, 32.8828, 135.1221}, // win9
	{-1263.2021, 33.1261, 32.8828, 136.3755} // win10
};

//=======================================================================
new pWeapons[MAX_PLAYERS][13], pAmmo[MAX_PLAYERS][13];

new LockDms;

enum ow
{
	 holding,
     storein
}

new hweapons[MAX_PLAYERS][ow][17];
//-===========Gang==============================================================

enum gInfo
{
	Name[32],
	ID,
	gCash,
	gColor,
	gMembers,
	leader[24],
	gBank,
	gKills,
	gDeaths,
	gWWon,
	gWLost,
}
new GangInfo[MAX_GANGS][gInfo];
new Invited[MAX_PLAYERS] = -255;

new ZoneAttack[sizeof(gSAZones)];

new aZone[sizeof(gSAZones)];
new inGw[MAX_GANGS];
new pInGW[MAX_PLAYERS];
new GwTurf[MAX_GANGS];
new GwTime[MAX_GANGS][2];
new GwEndTime[MAX_GANGS];
new GwEndON[MAX_GANGS];
new GwTimer[MAX_GANGS];
new GwKills[MAX_GANGS];
new pGwKills[MAX_PLAYERS];
new pGwDeaths[MAX_PLAYERS];
new JailPickUp[2];
new Clothes[3];
new PlayerText:Location[MAX_PLAYERS][2];
//new ff_area;
//new ff_zone;
//============Export Sys========================================================

new ExportCar[56], ExportCarid, ExportCp[3];
new ExportTimer;

//=============Jobs=============================================================

#define Gangster 0
#define Medic 1
#define Cop 2
#define Hitman 3
#define Mechanic 4
#define Drugdealer 5
#define Terrorist 6
#define Whore 7
#define Trucker 8
new Job[MAX_PLAYERS];
new PlayerBombs[MAX_PLAYERS];
new permit[MAX_PLAYERS];
//=============Colors===========================================================

#define GUNGAME 0xD86EFFFF
#define GUNGAME_ "{E0B6F0}"
#define WHITE 0xFFFFFFFF
#define GREEN 0x255F17FF
#define COLOR_GREEN 0x255F17FF
#define GRAY 0xBEBEBEFF
#define RED 0xE62525FF
#define RED2_ "{9E1010}"
#define RED2 0x9E1010FF
#define LIGHTRED 0xFF975EFF

#define YELLOW 0xFFA600FF
#define YELLOW2 0xFF3C00FF
#define YELLOW3 0xFF5500FF

//format(str, sizeof(str), "Teleport - "YELLOW_"%s has teleported to San Fierro "YELLOW3_"(/sf)", pName[playerid]);
#define YELLOW_ "{FFA600}"
#define YELLOW2_ "{FF3C00}"
#define YELLOW3_ "{FF5500}"

#define COL_RED "{F81414}"
#define COL_WHITE "{FFFFFF}"

//chat colors
#define COLOR_PURPLE 0x800080FF
#define COLOR_NXSCHAT 0x62AC32FF
#define NXSCHAT_ "{62AC32}"
//0x168BFFFF
#define COLOR_DARKVIOLET 0x9400D3FF
#define COLOR_SECRET     0xD19FE8FF
#define VIO_ "{9400D3}"
#define DB_ "{168BFF}"
#define DB2_ "{5EAFFF}"
#define COLOR_DEEPPINK 0xFF1493FF
#define COLOR_DARKBLUE 0x00008BFF
#define COLOR_5 "{294FC2}"
#define COLOR_MANG "{BA3AAB}"
#define DmCol1 0x419E28FF
#define DmCol1_ "{419E28}"
#define DmCol2 0x70AB5CFF
#define DmCol2_ "{70AB5C}"
#define DmCol3 0xB7FF00FF
#define DmCol3_ "{B7FF00}"

#define JOBINFO 0xC8F1FAFF
#define BLUE 0x168BFFFF
#define DARKORANGE 0xC03A00FF
#define ORANGE 0xFF9200FF
#define BLUE2 0x001F6AFF //dark blue
#define LIME 0x9DFF00FF

#define PURPLE 0xB10F4EFF
#define SKIN 0xFFA863FF
#define SKIN2 0xB77259FF
#define LIGHTYELLOW 0xFFFF6DFF
#define PINK 0xEB1CC1FF
#define WOOD 0x8B5A2BFF
#define GREENBLUE 0x1FC4A6FF
#define LIGHTBLUE 0x00E5EEFF
#define DARKBLUE 0x0040FFFF
#define BLACK 0x7A7A7AFF
#define DOOM 0xF4A460FF
//#define AdminInfo 0x02EBB8FF
#define AdminInfo 0x00D799FF
#define RACE 0x46E01BFF
#define LIME_ "{9DFF00}"
#define DOOM_ "{F4A460}"
//
#define ADMINTEXTCOLOR_ "{87CEFA}"
//
#define CTC1 0x80FA66FF
#define CTC2 0x3BB023FF

//#define CTC1_ "{80FA66}"
//#define CTC2_ "{3BB023}"
#define CTC1_ "{FFA600}"
#define CTC2_ "{FF5500}"

#define WHITE_  "{FFFFFF}"
#define RED_  "{E62525}"
#define LIGHTRED_ "{FF975E}"
#define JOBINFO_ "{C8F1FA}"
#define BLUE_ "{168BFF}"
#define DARK_ORANGE	"{C03A00}"
#define ORANGE_ "{FF9200}"
#define BLUE2_ "{001F6A}"
#define PURPLE_ "{B50D61}"
#define SKIN_ "{FFA863}"
#define SKIN2_ "{B77259}"
#define LIGHTYELLOW_ "{FFFF6D}"
#define PINK_ "{EB1CC1}"
#define WOOD_ "{8B5A2B}"
#define GREENBLUE_ "{1FC4A6}"
#define GREEN_ "{255F17}"
#define GRAY_ "{BEBEBE}"
#define LIGHTBLUE_ "{00E5EE}"
#define DARKBLUE_ "{0040FF}"
#define BLACK_ "{7A7A7A}"
#define AdminInfo_ "{00D799}"
#define RACE_ "{46E01B}"

#define cornsilk 0xFFED83AA
#define lime 0x9CD13FFF
#define gray 0x9C9C9CAA
#define warning 0xFF0000FF
#define coolblue 0x009DFFAA
#define orange	0xDB9428AA
#define lblue 0xADDEFFFF

#define cornsilk2  "{FBDF89}"
#define lime2 "{9CD13F}"
#define g2 "{9C9C9C}"
#define orange2	"{DB9428}"
#define cb2 "{009DFF}"
#define lblue2 "{ADDEFF}"
#define warning2 "{FF0000}"


//=====================Class Selection==========================================

#define player_x 1629.9243
#define player_y -2738.9995
#define player_z 51.6517
#define player_angle 148.1142


//================SpawnPoints===================================================

new Float:Rs[][4] = // Random Spawns
{
    {-2344.6543, -1619.9550, 483.6653, 280.2238}, //
    {1955.0811, -2639.9214, 13.6453, 1.4108}, //
    {1296.3363, -1868.3831, 13.5822, 357.8410}, //
    {535.1185, -1813.0817, 6.5713, 271.0002}, //
    {2784.0759, -1823.5920, 10.5248, 219.3466}, //
    {2249.2280, -2255.6711, 14.7647, 161.4980}, //
    {1550.7537, -1362.2297, 329.4668, 358.9157}, //
    {-1984.8248, 138.6430, 27.6875, 87.0552}, //
    {1885.4034, 959.4357, 10.8203, 267.3962}, //
    {2535.9861, -1712.7421, 13.4651, 62.2095}, //
    {2137.3499, 1449.3906, 10.8203, 180.4520}, //
    {-2262.3813, 2298.5085, 4.8202, 355.9203} //
//IF U WANNA ADD NEW SPAWN JUST MAKE NEW LINE HERE

};
//

//-----------------------weaps--------------------------------------------------
new pClass[MAX_PLAYERS];

new WeaponsCP;
new WeaponsCP2;
new WeaponsCP3;
new WeaponsCP4;
new WeaponsCP5;

new SpawnWeapPrices[]= {5000, 5000, 15000, 24000, 21000, 32000, 23000, 42000, 27000, 28000, 28000, 51000, 48000, 21000, 17000, 55000, 8000, 5000, 7800, 5500};
new SpawnWeapID[]= {1, 22, 24, 25, 26, 27, 31, 30, 29, 28, 32, 34, 33, 16, 9, 39, 8, 4, 42, 0};

//new cage[MAX_PLAYERS];
//new Text3D:Botinfo;
//new Text3D:Botinfo2;
new Text:EnDCwTD[16];
new Text:EnDCwTD_[6];
//==============================================================================
//==============================================================================
#if defined useovh
forward ConnectMySQL();
public ConnectMySQL()
{
	GTADM = mysql_connect("127.0.0.1", "root", "", "gtadm");
    if(mysql_errno() == 0)
    {
        mysql_log(ERROR | WARNING);
        //mysql_debug(1);
	    printf("[MYSQL]:first Connection to `DATABASE` successful!");
        con=1;
	}
	else
	{
         mysql_close(GTADM);
		 printf("[MYSQL]: [ERROR]:first Connection to `DATABASE` failed!");
	 	 GTADM = mysql_connect("94.23.162.196", "root", "!@#iloveurass69$%^", "sexyshit");
	     if(mysql_errno() == 0)
	     {
	        mysql_log(ERROR | WARNING);
	        //mysql_debug(1);
		    printf("[MYSQL]:second Connection to `DATABASE` successful!");
            con=2;
	 	 }
	 	 else
	 	 {
	         mysql_close(GTADM);
			 printf("[MYSQL]: [ERROR]:Second Connection to `DATABASE` failed!");
	 	 }
	}

	return 1;
}
#endif
#if defined usevps
forward ConnectMySQL();
public ConnectMySQL()
{
	GTADM = mysql_connect("31.220.27.37", "root", "!@#iloveurass69$%^", "sexyshit");
    if(mysql_errno() == 0)
    {
        mysql_log(ERROR | WARNING);
	    printf("[MYSQL]:first Connection to `DATABASE` successful!");
        con=1;
	}
	else
	{
         mysql_close(GTADM);
		 printf("[MYSQL]: [ERROR]:first Connection to `DATABASE` failed!");
	 	 GTADM = mysql_connect("31.220.27.37", "root", "!@#iloveurass69$%^", "sexyshit");
	     if(mysql_errno() == 0)
	     {
	        mysql_log(ERROR | WARNING);
		    printf("[MYSQL]:second Connection to `DATABASE` successful!");
            con=2;
	 	 }
	 	 else
	 	 {
	         mysql_close(GTADM);
			 printf("[MYSQL]: [ERROR]:Second Connection to `DATABASE` failed!");
	 	 }
	}

	return 1;
}
#endif
#if defined usefrag
forward ConnectMySQL();
public ConnectMySQL()
{
	GTADM = mysql_connect("mysqleu1.fragnet.net", "84821", "12886312", "84821_clientdb");
	if(mysql_errno() == 0)
    {
	    printf("[MYSQL]:first Connection to `DATABASE` successful!");
        con=1;
        mysql_log(ERROR | WARNING);
	}
	else
	{
         mysql_close(GTADM);
		 printf("[MYSQL]: [ERROR]:first Connection to `DATABASE` failed!");
	 	 GTADM = mysql_connect("mysqleu1.fragnet.net", "84821", "12886312", "84821_clientdb");
     	 if(mysql_errno() == 0)
	     {
		    printf("[MYSQL]:second Connection to `DATABASE` successful!");
            con=2;
            mysql_log(ERROR | WARNING);
	 	 }
	 	 else
	 	 {
	         mysql_close(GTADM);
			 printf("[MYSQL]: [ERROR]:Second Connection to `DATABASE` failed!");
	 	 }
	}

	return 1;
}
#endif

//=============================FootBall=========================================
new DisableAutoShoot;
new Team1Name[50], Team2Name[50];

new football;
new fLastPlayer;
new AllowPlaying;
new fTeamScore[2];
new fKeyChange;
new SavedSKIN[MAX_PLAYERS];
new GoalArea[2], FieldArea, PlayArea, GoalSaveArea[2];
new fcounter, fTime;

forward Ballposition();
//==
new MissionPickup[5];
new MissionCP[65];
new MissionMap[65];
new MissionObjects[MAX_PLAYERS][28];
new PlayerText:pMissionTD[MAX_PLAYERS];
//new Skins[] = {167, 106, 102, 114, 163, 164, 147, 70, 71, 276, 283, 281, 285, 29, 28, 30, 191, 179, 183, 50, 73, 72, 244, 252, 178, 195, 174, 108, 22, 107, 230};




//==============================================================================
//IRC
#if defined useirc
#include "../gamemodes/subscripts/irc.pwn"
#endif

#if defined USEDRIFT

#include "../gamemodes/subscripts/drift.pwn"
#endif
//==============================================================================
main()
{
     print("                                                    ");
     print(" _______ _________ _______         ______   _______");
     print("(  ____ ||__   __|(  ___  )       (  __  | (       )");
     print("| (    ||   ) (   | (   ) |       | (  |  )| () () |");
     print("| |         | |   | (___) | _____ | |   ) || || || |");
     print("| | ____    | |   |  ___  |(_____)| |   | || |(_)| |");
     print("| | |_  )   | |   | (   ) |       | |   ) || |   | |");
     print("| (___) |   | |   | )   ( |       | (__/  )| )   ( |");
     print("(_______)   )_(   ||     ||       (______/ ||     ||");
  	 print("                                                      by RoNz");
     print("                                                    ");
}
new pmax;
new cwwinscore;
new cwname[2][50];
//==============================================================================
public OnGameModeInit()
{
    Pour=0;
    PourStartTimer=-1;
    PourTimer=-1;
    ParkStartTimer69=-1;///-1
    PourStat=0;
    PingLimit=1500;
    GwFpsLimit=10;
    GwPingLimit=1500;
    RoNzCar=-1;
	//SendRconCommand("hostname .·¥·. GTADM »» Unique Freeroam Server ««");
	///SendRconCommand("hostname .·¥·. GTADM »» Freeroam/DM/Minigames/Gangs ««");
	AntiDeAMX();
    //UpdateHealtht = SetTimer("UpdateHealth", 100, 1);//100
    SetTimer("ExpirePlayersVIP", 1000*60*TIMER_CHECK_VIP, true);//vipexpiresin
    cwname[0]="Home";
    cwname[1]="Away";
    cwwinscore=30;
	for(new x=0; x<sizeof(gSAZones); x++)
	{
      ZoneAttack[x]=0;
	}
    SendRconCommand("weburl www.gtadm.com");
    ring=random(12);
    #if defined useirc
    IIRC_OnGameModeInit();//irc
    #endif
//    CreateObject(673, -586.31622, -2039.44800, 43.09479, 0.00000, 0.00000, 0.00000);

   // for(new f=0; f<sizeof(f_Objects); f++)
//	{
   //   f_Objects[f]=CreateDynamicObject(Animals[f][tid], Animals[f][tix], Animals[f][tiy], Animals[f][tiz], Animals[f][trix], Animals[f][triy], Animals[f][triz], 4545);
//	}


//	ff_area=CreateDynamicCube(793.3679, 1686.2236, 3.2529, 810.5109, 1676.8854, 7.0858, 4545);
	///ff_zone = GangZoneCreate(793.3679, 1686.2236, 810.5109, 1676.8854);
    CreateObject(16774, 800.2988, 1682.1525, 5.8750, 0.0, 0.00000, -90.0);

	format(rTestStr, sizeof(rTestStr), "YOUWONTGETIT");
    PowerUpPlayer[0]=-255, PowerUpPlayer[1]=-255, PowerUpPlayer[2]=-255, PowerUpPlayer[3]=-255, PowerUpPlayer[4]=-1;//, PowerUpPlayer[5]=-1;
    PowerUpPickup[0]=CreateDynamicPickup(1241, 23, -2511.0571, 775.0422, 35.1719, 0);
    PowerUpPickup[1]=CreateDynamicPickup(1241, 23, 2062.4978, -1785.6956, 13.5469, 0);
    PowerUpPickup[2]=CreateDynamicPickup(1241, 23, -852.6091, 1877.5527, 22.9245, 0);
    PowerUpPickup[3]=CreateDynamicPickup(1241, 23, 2089.0635, 2405.9089, 74.5786, 0);
    PowerUpPickup[4]=CreateDynamicPickup(1241, 23, -2473.6848, 1549.7599, 33.2273, 0);
    //PowerUpPickup[5]=CreateDynamicPickup(1241, 23, 2162.3809, -102.6472, 2.7500, 0);
    Streamer_VisibleItems(0, 950);
    RaceStartTK=0;
	for(new i = 0; i < MAX_PLAYERS; i++) format(Last_Search[i], 128, "- ");
	for(new x=0; x<MAX_PLAYERS; x++) TickCount[x][Fight]=0;
 	PhoneCP=CreateDynamicCP(833.6686, -2063.6416, 12.1280, 3.0, 0, 0);
	for(new x=0; x<sizeof(xMasPickUp); x++) xMasPickUp[x]=-1;
    DivingCP=CreateDynamicCP(-2547.9822, 1944.7694, -0.5147, 30.0, 19888, -1, -1);
    DivingCP2=CreateDynamicCP(-1192.5410, 650.5671, 2.0217, 30.0, 19888, -1, -1);
   /* FlappyCarCP=CreateDynamicCP(1425.3253, 3354.0298, 2.0000, 283.9337, 66699, -1, -1);//flappycarshit
    FlappyCarCP=CreateDynamicCP(1425.3253, 3354.0298, 2.0000, 283.9337, 66700, -1, -1);//flappycarshit
    FlappyCarCP=CreateDynamicCP(1425.3253, 3354.0298, 2.0000, 283.9337, 66701, -1, -1);//flappycarshit
    FlappyCarCP=CreateDynamicCP(1425.3253, 3354.0298, 2.0000, 283.9337, 66702, -1, -1);//flappycarshit
    FlappyCarCP=CreateDynamicCP(1425.3253, 3354.0298, 2.0000, 283.9337, 66703, -1, -1);//flappycarshit
    FlappyCarCP=CreateDynamicCP(1425.3253, 3354.0298, 2.0000, 283.9337, 66704, -1, -1);//flappycarshit*/
//    ManualVehicleEngineAndLights();
    SetGameModeText("Stunt/Race/Drift/DM/Freeroam");
    SendRconCommand("mapname Freeroam/Race/Stunt/Drift/DM");

    LoadObjects();
//
//======Trucking Trailers
    Trucking_Start=CreateDynamicCP(189.2106, -301.8249, 0.1048, 5.0, 0, 0);
    Trucking_Start2=CreateDynamicCP(-74.3129, -1131.7158, 1.0781, 5.0, 0, 0);

	v_Mission_cps[0]=CreateDynamicCP(59.6753, -262.8459, 2.2317, 5.0, 0, 0, INVALID_PLAYER_ID);
	v_Mission_icons[0]=CreateDynamicMapIcon(59.6753, -262.8459, 2.2317, 51, 0, 0, 0, INVALID_PLAYER_ID, 20000.0000);
	//mission 1 start
	v_Mission_cps[1]=CreateDynamicCP(-2.5573, -269.5432, 6.5799, 5.0, 0, 0, INVALID_PLAYER_ID);
	v_Mission_icons[1]=CreateDynamicMapIcon(-2.5573, -269.5432, 6.5799, 42, 0, 0, 0, INVALID_PLAYER_ID, 20000.0000);
	//mission 1
	v_Mission_cps[2]=CreateDynamicCP(-1644.5964, 435.7691, 6.1602, 5.0, 0, 0, INVALID_PLAYER_ID);
	v_Mission_icons[2]=CreateDynamicMapIcon(-1644.5964, 435.7691, 6.1602, 35, 0, 0, 0, INVALID_PLAYER_ID, 20000.0000);

	v_Mission_cps[3]=CreateDynamicCP(2202.7773, 2472.4204,  10.8203, 5.0, 0, 0, INVALID_PLAYER_ID);
	v_Mission_icons[3]=CreateDynamicMapIcon(2202.7773, 2472.4204,  10.8203, 35, 0, 0, 0, INVALID_PLAYER_ID, 20000.0000);

	v_Mission_cps[4]=CreateDynamicCP(2117.1340, 909.9761,  10.3778, 5.0, 0, 0, INVALID_PLAYER_ID);
	v_Mission_icons[4]=CreateDynamicMapIcon(2117.1340, 909.9761,  10.3778, 35, 0, 0, 0, INVALID_PLAYER_ID, 20000.0000);

	v_Mission_cps[5]=CreateDynamicCP(64.0212, 1219.8227,  18.3795, 5.0, 0, 0, INVALID_PLAYER_ID);
	v_Mission_icons[5]=CreateDynamicMapIcon(64.0212, 1219.8227,  18.3795, 35, 0, 0, 0, INVALID_PLAYER_ID, 20000.0000);

	v_Mission_cps[6]=CreateDynamicCP(-736.5397, 2742.1564,  46.7967, 5.0, 0, 0, INVALID_PLAYER_ID);
	v_Mission_icons[6]=CreateDynamicMapIcon(-736.5397, 2742.1564,  46.7967, 35, 0, 0, 0, INVALID_PLAYER_ID, 20000.0000);

	//mission 2 start
	v_Mission_cps[7]=CreateDynamicCP(-16.6817, -364.4333, 10.3828, 5.0, 0, 0, INVALID_PLAYER_ID);
	v_Mission_icons[7]=CreateDynamicMapIcon(-16.6817, -364.4333, 10.3828, 51, 0, 0, 0, INVALID_PLAYER_ID, 20000.0000);
	//mission 2
	v_Mission_cps[8]=CreateDynamicCP(615.7550, 856.7659, -43.96578, 5.0, 0, 0, INVALID_PLAYER_ID);
	v_Mission_icons[8]=CreateDynamicMapIcon(615.7550, 856.7659, -43.9657, 35, 0, 0, 0, INVALID_PLAYER_ID, 20000.0000);

	v_Mission_cps[9]=CreateDynamicCP(1405.6318, 972.4742, 10.5983, 5.0, 0, 0, INVALID_PLAYER_ID);
	v_Mission_icons[9]=CreateDynamicMapIcon(1405.6318, 972.4742, 10.5983, 35, 0, 0, 0, INVALID_PLAYER_ID, 20000.0000);

	v_Mission_cps[10]=CreateDynamicCP(956.6450, 1737.8849, 6.8596, 5.0, 0, 0, INVALID_PLAYER_ID);
	v_Mission_icons[10]=CreateDynamicMapIcon(956.6450, 1737.8849, 6.8596, 35, 0, 0, 0, INVALID_PLAYER_ID, 20000.0000);

	v_Mission_cps[11]=CreateDynamicCP(2473.8015, -1702.9253, 9.1257, 5.0, 0, 0, INVALID_PLAYER_ID);
	v_Mission_icons[11]=CreateDynamicMapIcon(2473.8015, -1702.9253, 9.1257, 35, 0, 0, 0, INVALID_PLAYER_ID, 20000.0000);

	v_Mission_cps[12]=CreateDynamicCP(2789.7717, -2417.8586, 13.6099, 5.0, 0, 0, INVALID_PLAYER_ID);
	v_Mission_icons[12]=CreateDynamicMapIcon(2789.7717, -2417.8586, 13.6099, 35, 0, 0, 0, INVALID_PLAYER_ID, 20000.0000);

	//mission 3 start
	v_Mission_cps[13]=CreateDynamicCP(-36.5231, -230.1329, 3.7153, 5.0, 0, 0, INVALID_PLAYER_ID);
	v_Mission_icons[13]=CreateDynamicMapIcon(-36.5231, -230.1329, 3.7153, 51, 0, 0, 0, INVALID_PLAYER_ID, 20000.0000);
	//mission 3
	v_Mission_cps[14]=CreateDynamicCP(2249.5059, -1659.0487, 14.8424, 5.0, 0, 0, INVALID_PLAYER_ID);
	v_Mission_icons[14]=CreateDynamicMapIcon(2249.5059, -1659.0487, 14.8424, 35, 0, 0, 0, INVALID_PLAYER_ID, 20000.0000);

	v_Mission_cps[15]=CreateDynamicCP(502.9564, -1356.2738, 15.7067, 5.0, 0, 0, INVALID_PLAYER_ID);
	v_Mission_icons[15]=CreateDynamicMapIcon(502.9564, -1356.2738, 15.7067, 35, 0, 0, 0, INVALID_PLAYER_ID, 20000.0000);

	v_Mission_cps[16]=CreateDynamicCP(2780.7502, 2440.1812, 10.8203, 5.0, 0, 0, INVALID_PLAYER_ID);
	v_Mission_icons[16]=CreateDynamicMapIcon(2780.7502, 2440.1812, 10.8203, 35, 0, 0, 0, INVALID_PLAYER_ID, 20000.0000);

	v_Mission_cps[17]=CreateDynamicCP(-2380.6511, 910.0615, 44.8579, 5.0, 0, 0, INVALID_PLAYER_ID);
	v_Mission_icons[17]=CreateDynamicMapIcon(-2380.6511, 910.0615, 44.8579, 35, 0, 0, 0, INVALID_PLAYER_ID, 20000.0000);

	v_Mission_cps[18]=CreateDynamicCP(-1719.5039, 1017.7803, 17.1473, 5.0, 0, 0, INVALID_PLAYER_ID);
	v_Mission_icons[18]=CreateDynamicMapIcon(-1719.5039, 1017.7803, 17.1473, 35, 0, 0, 0, INVALID_PLAYER_ID, 20000.0000);

	for(new x=0; x<8; x++)
	{
		v_Mission2_cps[x]=CreateDynamicCP(Tank2Dis[x][0], Tank2Dis[x][1], Tank2Dis[x][2], 5.0, 0, 0, INVALID_PLAYER_ID);
		v_Mission2_icons[x]=CreateDynamicMapIcon(Tank2Dis[x][0], Tank2Dis[x][1], Tank2Dis[x][2], 35, 0, 0, 0, INVALID_PLAYER_ID, 20000.0000);
	}
	v_Mission2_cps[8]=CreateDynamicCP(-73.1988, -1127.7130, -0.3661, 5.0, 0, 0, INVALID_PLAYER_ID);
	v_Mission2_icons[8]=CreateDynamicMapIcon(-73.1988, -1127.7130, -0.3661, 35, 0, 0, 0, INVALID_PLAYER_ID, 20000.0000);
	for(new x=0; x<sizeof(v_Mission2_icons); x++) Streamer_SetIntData(STREAMER_TYPE_MAP_ICON , v_Mission2_icons[x], E_STREAMER_STYLE, 1);


	for(new x=0; x<sizeof(v_Mission_icons); x++) Streamer_SetIntData(STREAMER_TYPE_MAP_ICON , v_Mission_icons[x], E_STREAMER_STYLE, 1);


	for(new g=0; g<sizeof(Vans); g++)
	{
	  Tanks[g]=CreateVehicle(403, 47.1292+(g*4), -268.2159, 2.2317, 0.0, -1, -1, 30);
	  SetVehicleParamsEx(Tanks[g], 1, 0, 0, 1, 0, 0, 0);

	  Vans[g]=CreateVehicle(455, 0.3627-(3.5*g), -375.1201, 5.2237, 0.0, -1, -1, 30);
	  SetVehicleParamsEx(Vans[g], 1, 0, 0, 1, 0, 0, 0);

	  b_Vans[g]=CreateVehicle(456, -54.4649+(4*g), -220.4216, 6.4248, 0.0, -1, -1, 30);
	  SetVehicleParamsEx(b_Vans[g], 1, 0, 0, 1, 0, 0, 0);

	}
	Tanks2[0]=CreateVehicle(515, -65.6106, -1142.5924, 1.6502, 0.0000, -1, -1, 30);
	Tanks2[1]=CreateVehicle(515, -61.3847, -1143.9955, 1.6502, 0.0000, -1, -1, 30);
	Tanks2[2]=CreateVehicle(515, -57.0328, -1145.9374, 1.6502, 0.0000, -1, -1, 30);
	Tanks2[3]=CreateVehicle(515, -52.7595, -1147.5988, 1.6502, 0.0000, -1, -1, 30);
	Tanks2[4]=CreateVehicle(515, -48.3458, -1149.6243, 1.6502, 0.0000, -1, -1, 30);
	Tanks2[5]=CreateVehicle(515, -43.1562, -1151.7108, 1.6502, 0.0000, -1, -1, 30);

//Trailers
	CreateVehicle(584, 12.4033, -257.2921, 6.5799, 90.0000, -1, -1, 40);
	CreateVehicle(584, 12.1514, -248.9007, 6.5799, 90.0000, -1, -1, 40);
	CreateVehicle(584, 12.1827, -240.3843, 6.5799, 90.0000, -1, -1, 40);
	CreateVehicle(584, 12.2012, -232.6110, 6.5799, 90.0000, -1, -1, 40);
	CreateVehicle(584, 12.3550, -224.2926, 6.5799, 90.0000, -1, -1, 40);
	CreateVehicle(584, -1.1462, -304.2594, 6.5799, 90.0000, -1, -1, 40);
	CreateVehicle(584, -2.0161, -311.4262, 6.5799, 90.0000, -1, -1, 40);

	CreateVehicle(591, -82.8923, -1216.0375, 2.9592, -10.0000, -1, -1, 40);
	CreateVehicle(591, -87.7267, -1215.4646, 3.1362, -10.0000, -1, -1, 40);
	CreateVehicle(591, -92.0694, -1214.8230, 3.1952, -10.0000, -1, -1, 40);
	CreateVehicle(591, -96.2603, -1213.8389, 3.1952, -10.0000, -1, -1, 40);
	CreateVehicle(591, -100.6232, -1192.8762, 3.1952, -10.0000, -1, -1, 40);
	CreateVehicle(591, -105.2860, -1191.8314, 3.1952, -10.0000, -1, -1, 40);


//
    new k=CreateVehicle(498, 2753.4890, -2402.4883, 13.7123, 59.7248, 24, 112, 50); //
    ResetCarInfo(k);

	BotVehicle=AddStaticVehicle(411, -1962.9032, -1340.9634, 39.9721, 220.0073, 0, 0);
    ResetCarInfo(BotVehicle);
    SetVehicleParamsEx(BotVehicle, 0, 0, 0, 0, 0, 1, 0);
    SetVehicleParamsEx(k, 0, 0, 0, 0, 0, 1, 0);

  //  Tile_Area=CreateDynamicCube(2377.3750, 790.7266, 139.5891 , 2637.6563, 1103.0000, 150.5891);
  //  Tile_Win=CreateDynamicCube(2505.8208, 1039.0090, 141.6188, 2509.0313, 1042.2007, 141.6188);
//===============================================================================
    football = CreateDynamicObject(1946, 1347.5692, 2150.1047, 10.3000, 0.0000, 0.0000, 0.0000, 777);
    SetDynamicObjectMaterial(football, 0, 7913, "vgnbballsign2", "eris_4", 0);

    GoalArea[0]=CreateDynamicCube(1308.0835, 2142.4951, 10.2000, 1312.5543, 2155.0337, 13.4000, 777);
    GoalArea[1]=CreateDynamicCube(1385.9695, 2142.5667, 10.2000, 1381.3584, 2155.0098, 13.4000, 777);

    GoalSaveArea[0]=CreateDynamicCube(1318.1033, 2155.0427, 10.0000 , 1307.3505, 2142.1658, 13.4000, 777);
    GoalSaveArea[1]=CreateDynamicCube(1376.2870, 2155.3110, 10.0000, 1386.3405, 2142.2236, 13.4000, 777);

    FieldArea=CreateDynamicCube(1312.8000, 2124.8000, 10.0000, 1381.4000, 2176.1001, 15.0000, 777);
    PlayArea=CreateDynamicCube(1388.4471, 2179.9272, 10.0000, 1305.8292, 2120.9980, 13.0000, 777);

	lecanonarea[0]=CreateDynamicCube(-77.6212, 2504.0632, 15.7840, -74.2335, 2501.7590, 18.3170, -1);
	lecanonarea[1]=CreateDynamicCube(-22.0443, 2529.3440, 15.0390, 429.6285, 2474.8840, 17.0000, -1);
	lecanonarea[2]=CreateDynamicRectangle(-22.1450, 2527.7791, 429.8515, 2478.4612, -1);


//==============================================

    ConnectMySQL();
//
	SetTimer("connectnpc1", 1000, false);

    tramsf = AddStaticVehicle(449, -2006.5166, 38.7075, 32.3092, 174.9424, 1, 1);
    ResetCarInfo(tramsf);
	train=AddStaticVehicle(538, 1700.7551, -1953.6531, 14.8756, 200.0, -1, -1);
	ResetCarInfo(train);
    Team1Name="Team 1";
    Team2Name="Team 2";

    mysql_tquery(GTADM, "SELECT * FROM `racerecords`", "LoadRaceRecords");
    mysql_tquery(GTADM, "SELECT * FROM `sracerecords`", "LoadsRaceRecords");
    mysql_tquery(GTADM, "SELECT * FROM `pourrecords`", "LoadpOurRecords");
    mysql_tquery(GTADM, "SELECT * FROM `gangs` WHERE `GangID` > '0' AND `Members` > 0", "LoadGangs");
    mysql_tquery(GTADM, "SELECT `Gang` From `users` WHERE `Gang` > 0", "mCount");


    mysql_tquery(GTADM, "SELECT * FROM `gangbases`", "LoadBases");
    mysql_tquery(GTADM, "SELECT * FROM `lecanonrecords` WHERE `Row` = 0", "LoadleCanon");
    mysql_tquery(GTADM, "SELECT * FROM `serversetting`", "LoadServerSetting");

    mysql_tquery(GTADM, "SELECT * FROM `housecars`", "LoadHouseCars");
	mysql_tquery(GTADM, "SELECT * FROM `maps`", "LoadMaps");
#if defined USEDRIFT
	mysql_tquery(GTADM, "SELECT * FROM `driftrecords`", "LoadDriftRecords");
#endif


    /*============================================================================||
||                      Cars                                                  ||
||                                                                            ||
||============================================================================*/
//ctc 1
  /*  AddVehicle(471, -1450.5388, 1865.5793, 32.0000, -232.0000, 16, 16, 2100, 0, 30);
    AddVehicle(471, -1450.0317, 1863.1136, 32.0000, -232.0000, 16, 16, 2100, 0, 30);
    AddVehicle(489, -1475.6449, 1853.9100, 33.0000, -127.0000, 16, 16, 2100, 0, 30);
    AddVehicle(489, -1481.8500, 1851.5948, 33.0000, -127.0000, 16, 16, 2100, 0, 30);
    AddVehicle(471, -1449.1851, 1860.4476, 32.0000, -232.0000, 16, 16, 2100, 0, 30);


    AddVehicle(489, -903.9644, 1993.0122, 61.0000, -98.0000, 168, 168, 2100, 0, 30);
    AddVehicle(471, -895.4120, 2005.3740, 61.0000, -185.0000, 168, 168, 2100, 0, 30);
    AddVehicle(471, -897.1302, 2006.5546, 61.0000, -185.0000, 168, 168, 2100, 0, 30);
    AddVehicle(471, -899.0393, 2008.6152, 61.0000, -185.0000, 168, 168, 2100, 0, 30);
    AddVehicle(489, -899.1389, 1986.2186, 61.0000, -98.0000, 168, 168, 2100, 0, 30);

//ctc 2
    AddVehicle(469, -767.3854, 2412.2856, 157.0000, -258.0000, 16, 16, 2100, 0, 30);
    //AddVehicle(469, -770.9447, 2434.6021, 157.0000, -258.0000, 16, 16, 2100, 0, 30);
    AddVehicle(560, -796.0726, 2440.6919, 157.0000, -193.0000, 16, 16, 2100, 0, 30);
    AddVehicle(560, -792.1846, 2439.7383, 157.0000, -193.0000, 16, 16, 2100, 0, 30);
    AddVehicle(521, -804.4760, 2433.8792, 158.0000, -119.0000, 16, 16, 2100, 0, 30);
    AddVehicle(521, -803.9130, 2435.0254, 158.0000, -119.0000, 16, 16, 2100, 0, 30);

   // AddVehicle(562, -538.5477, 2574.6975, 54.0000, -55.0000, 168, 168, 2100, 0, 30);
    //AddVehicle(562, -537.8328, 2570.4124, 54.0000, -55.0000, 168, 168, 2100, 0, 30);
    AddVehicle(581, -539.1113, 2602.2832, 54.0000, -105.000, 168, 168, 2100, 0, 30);
    AddVehicle(581, -539.0557, 2604.3359, 54.0000, -105.000, 168, 168, 2100, 0, 30);
    //AddVehicle(487, -533.6858, 2560.3286, 54.0000, 0.000, 168, 168, 2100, 0, 30);
    AddVehicle(487, -516.0065, 2560.4260, 54.0000, 0.00, 168, 168, 2100, 0, 30);*/

    CreateCwWinTD();
	LoadGates();
 	LoadCreatedRaces();
	LoadCreatedParkours();
	LoadPickups();



	for(new TT=0; TT<CS_MAPS; TT++)
	{
    CSCPs[TT]=CreateDynamicCP(CSMapPos[TT][csCPPos][0], CSMapPos[TT][csCPPos][1], CSMapPos[TT][csCPPos][2], 7.00, 2101, -1, -1, 500.0);
    CreateDynamicMapIcon(CSMapPos[TT][csCPPos][0], CSMapPos[TT][csCPPos][1], CSMapPos[TT][csCPPos][2], 19, 0, 2101, -1, -1, 1000.0);
	}

    for(new sse=0; sse<sizeof(sSPickup); sse++)
    {
	   sSPickup[sse] = CreatePickup(1275, 2, sPickup[sse][SPos][0], sPickup[sse][SPos][1], sPickup[sse][SPos][2]);
    }
    for(new tele=0; tele<sizeof(TelePickup); tele++)
    {
     wTPickup[tele] = CreatePickup(TelePickup[tele][TypeID], 1, TelePickup[tele][Pos][0], TelePickup[tele][Pos][1], TelePickup[tele][Pos][2], TelePickup[tele][wrld]);
    }

    for(new x=0;x<50;x++)
    {
      ShoesPickup[x] = CreatePickup(3056, 2, Horseshoes[x][0], Horseshoes[x][1], Horseshoes[x][2], -1);
      OystersPickup[x] = CreatePickup(2782, 2, Oysters[x][0], Oysters[x][1], Oysters[x][2], -1);
    }

	for(new Egg=0;Egg < sizeof(EasterEgg); Egg++)
	{
		switch(random(2))
		{
          case 0:  EasterPickup[Egg] = CreatePickup(19342, 2, EasterEgg[Egg][Epos][0], EasterEgg[Egg][Epos][1], EasterEgg[Egg][Epos][2], -1);
		  case 1:  EasterPickup[Egg] = CreatePickup(19343, 2, EasterEgg[Egg][Epos][0], EasterEgg[Egg][Epos][1], EasterEgg[Egg][Epos][2], -1);
		}
 	}
//||============================================================================||
//||                     Spawn Classes                                          ||
//||                                                                            ||
//||============================================================================||

    AddPlayerClassEx(Gangster, 167, player_x, player_y, player_z, player_angle, 28, 100, 16, 5, 28, 100);
    AddPlayerClassEx(Gangster, 106, player_x, player_y, player_z, player_angle, 28, 100, 16, 5, 28, 100);
    AddPlayerClassEx(Gangster, 102, player_x, player_y, player_z, player_angle, 28, 100, 16, 5, 28, 100);
    AddPlayerClassEx(Gangster, 114, player_x, player_y, player_z, player_angle, 28, 100, 16, 5, 28, 100);

    AddPlayerClassEx(Hitman, 163, player_x, player_y, player_z, player_angle, 34, 300, 34, 300, 34, 300);//hitman
    AddPlayerClassEx(Hitman, 164, player_x, player_y, player_z, player_angle, 34, 300, 0, 0, 0, 0);
    AddPlayerClassEx(Hitman, 147, player_x, player_y, player_z, player_angle, 34, 300, 0, 0, 0, 0);

    AddPlayerClassEx(Medic, 70, player_x, player_y, player_z, player_angle, 4, 0, 0, 0, 0, 0);//medic
    AddPlayerClassEx(Medic, 71, player_x, player_y, player_z, player_angle, 4, 0, 0, 0, 0, 0);
    AddPlayerClassEx(Medic, 276, player_x, player_y, player_z, player_angle, 4, 0, 0, 0, 0, 0);
    AddPlayerClassEx(Medic, 193, player_x, player_y, player_z, player_angle, 4, 0, 0, 0, 0, 0);

    AddPlayerClassEx(Cop, 283, player_x, player_y, player_z, player_angle, 3, 0, 41, 500, 0, 0);//cop
    AddPlayerClassEx(Cop, 281, player_x, player_y, player_z, player_angle, 3, 0, 41, 500, 0, 0);
    AddPlayerClassEx(Cop, 285, player_x, player_y, player_z, player_angle, 3, 0, 41, 500, 0, 0);
    AddPlayerClassEx(Cop, 246, player_x, player_y, player_z, player_angle, 3, 0, 41, 500, 0, 0);

    AddPlayerClassEx(Drugdealer, 29, player_x, player_y, player_z, player_angle, 42, 500, 0, 0, 0, 0);//dealer
    AddPlayerClassEx(Drugdealer, 28, player_x, player_y, player_z, player_angle, 42, 500, 0, 0, 0, 0);
    AddPlayerClassEx(Drugdealer, 30, player_x, player_y, player_z, player_angle, 42, 500, 0, 0, 0, 0);
    AddPlayerClassEx(Drugdealer, 145, player_x, player_y, player_z, player_angle, 42, 500, 0, 0, 0, 0);

    AddPlayerClassEx(Terrorist, 191, player_x, player_y, player_z, player_angle, 23, 300, 15, 0, 0, 0);//Terrorist
    AddPlayerClassEx(Terrorist, 179, player_x, player_y, player_z, player_angle, 23, 300, 15, 0, 0, 0);
    AddPlayerClassEx(Terrorist, 183, player_x, player_y, player_z, player_angle, 23, 300, 15, 0, 0, 0);

    AddPlayerClassEx(Mechanic, 50, player_x, player_y, player_z, player_angle, 7, 100, 0, 0, 0, 0);//Mechanic
    AddPlayerClassEx(Mechanic, 73, player_x, player_y, player_z, player_angle, 8, 100, 0, 0, 0, 0);
    AddPlayerClassEx(Mechanic, 72, player_x, player_y, player_z, player_angle, 6, 100, 0, 0, 0, 0);
    AddPlayerClassEx(Mechanic, 192, player_x, player_y, player_z, player_angle, 6, 100, 0, 0, 0, 0);

    AddPlayerClassEx(Whore, 244, player_x, player_y, player_z, player_angle, 7, 100, 0, 0, 0, 0);//Whore
    AddPlayerClassEx(Whore, 252, player_x, player_y, player_z, player_angle, 8, 100, 0, 0, 0, 0);
    AddPlayerClassEx(Whore, 178, player_x, player_y, player_z, player_angle, 6, 100, 0, 0, 0, 0);

    AddPlayerClassEx(Trucker, 202, player_x, player_y, player_z, player_angle, 15, 100, 0, 0, 0, 0);//Trucker
    AddPlayerClassEx(Trucker, 206, player_x, player_y, player_z, player_angle, 5, 100, 0, 0, 0, 0);
    AddPlayerClassEx(Trucker, 34, player_x, player_y, player_z, player_angle, 4, 100, 0, 0, 0, 0);
    AddPlayerClassEx(Trucker, 201, player_x, player_y, player_z, player_angle, 4, 100, 0, 0, 0, 0);


    AddPlayerClassEx(Gangster, 195, player_x, player_y, player_z, player_angle, 28, 100, 16, 5, 28, 100);
    AddPlayerClassEx(Gangster, 174, player_x, player_y, player_z, player_angle, 28, 100, 16, 5, 28, 100);
    AddPlayerClassEx(Gangster, 108, player_x, player_y, player_z, player_angle, 28, 100, 16, 5, 28, 100);
    AddPlayerClassEx(Gangster, 22, player_x, player_y, player_z, player_angle, 28, 100, 16, 5, 28, 100);
    AddPlayerClassEx(Gangster, 107, player_x, player_y, player_z, player_angle, 28, 100, 16, 5, 28, 100);
    AddPlayerClassEx(Gangster, 230, player_x, player_y, player_z, player_angle, 28, 100, 16, 5, 28, 100);

//||============================================================================||
//||                      Houses                                                ||
//||                                                                            ||
//||============================================================================||
    for(new dt=0;dt<MAX_HOUSES;dt++)
	{
	  format(hInfo[dt][Owner], 24, "%s", "No owner");
	  hInfo[dt][hOwnerID]=-1;
	}
    mysql_tquery(GTADM, "SELECT * FROM `houses`", "LoadCreatedHouses");

    LoadProps();
	LoadSams();

    //Vip Garage
	VipGarCP = CreateDynamicCP(1518.2179, -1472.8358, 10.5258, 5.00, 0, 0);


//||============================================================================||
//||                      Menus                                                ||
//||                                                                            ||
//||============================================================================||
	CookCP=CreateDynamicCP(1039.5841, -3590.5784, 2.2000, 3.0, 0, 0);
	VIPCP=CreateDynamicCP(1044.3199, -3599.9424, 2.2000, 3.0, 0, 0);
	CreateDynamicMapIcon(1039.5841, -3590.5784, 2.2000, 48, 0, 0);
	CreateDynamicMapIcon(1044.3199, -3599.9424, 2.2000, 48, 0, 0);
	CreateDynamicMapIcon(189.2106, -301.8249, 0.1048, 51, 0, 0);
	CreateDynamicMapIcon(-74.3129, -1131.7158, 1.0781, 51, 0, 0);

	PhoneMenu =  CreateMenu("~b~~h~~h~~h~Mobile Shop", 2, 130.0, 150.0, 180, 200);
	SetMenuColumnHeader(PhoneMenu, 0, "Cellphone Style:");
	SetMenuColumnHeader(PhoneMenu, 1, "Cost:");
	AddMenuItem(PhoneMenu, 0, "Old cellphone (white)");
	AddMenuItem(PhoneMenu, 1, "$2450000 + 3 PremiumPoints");
	AddMenuItem(PhoneMenu, 0, "Old cellphone (Black)");
	AddMenuItem(PhoneMenu, 1, "$2450000 + 3 PremiumPoints");
	AddMenuItem(PhoneMenu, 0, "Blue cellphone");
	AddMenuItem(PhoneMenu, 1, "$3000000 + 3 PremiumPoints");
	AddMenuItem(PhoneMenu, 0, "Pink cellphone");
	AddMenuItem(PhoneMenu, 1, "$3000000 + 3 PremiumPoints");
	AddMenuItem(PhoneMenu, 0, "Orange cellphone");
	AddMenuItem(PhoneMenu, 1, "$3000000 + 3 PremiumPoints");
	AddMenuItem(PhoneMenu, 0, "Black cellphone");
	AddMenuItem(PhoneMenu, 1, "$3000000 + 3 PremiumPoints");
	AddMenuItem(PhoneMenu, 0, "Red cellphone");
	AddMenuItem(PhoneMenu, 1, "$3000000 + 3 PremiumPoints");
	AddMenuItem(PhoneMenu, 0, "Green cellphone");
	AddMenuItem(PhoneMenu, 1, "$3000000 + 3 PremiumPoints");
	AddMenuItem(PhoneMenu, 0, "Dark Blue cellphone");
	AddMenuItem(PhoneMenu, 1, "$3000000 + 3 PremiumPoints");
	AddMenuItem(PhoneMenu, 0, "Yellow cellphone");
	AddMenuItem(PhoneMenu, 1, "$3000000 + 3 PremiumPoints");
	AddMenuItem(PhoneMenu, 0, "White cellphone");
	AddMenuItem(PhoneMenu, 1, "$3000000 + 3 PremiumPoints");

	CookMenu = CreateMenu("~g~~h~~h~~h~Premium Point Trade", 2, 130.0, 150.0, 180, 150);
	SetMenuColumnHeader(CookMenu, 0, "Item:");
	SetMenuColumnHeader(CookMenu, 1, "Cost:");
	AddMenuItem(CookMenu, 0, "HeadText (2 Changes Possible)");
	AddMenuItem(CookMenu, 1, "~r~50 Premium Points");
	AddMenuItem(CookMenu, 0, "(/Tow) Command");
	AddMenuItem(CookMenu, 1, "~r~20 Premium Points");
	AddMenuItem(CookMenu, 0, "(/Mod) Command");
	AddMenuItem(CookMenu, 1, "~r~20 Premium Points");
	AddMenuItem(CookMenu, 0, "(/Neon) Command");
	AddMenuItem(CookMenu, 1, "~r~40 Premium Points");
	AddMenuItem(CookMenu, 0, "(/Cars9) Teleport");
	AddMenuItem(CookMenu, 1, "~r~50 Premium Points");
	AddMenuItem(CookMenu, 0, "Sell 1 Premium Point");
	AddMenuItem(CookMenu, 1, "~g~$1000000");
	AddMenuItem(CookMenu, 0, "Sell 1 Premium Point");
	AddMenuItem(CookMenu, 1, "~g~20 Score Points");

	VipMenu = CreateMenu("  ~r~~h~~h~~h~VIP Points Trade", 2, 120.0, 150.0, 180, 150);
	SetMenuColumnHeader(VipMenu, 0, "Item:");
	SetMenuColumnHeader(VipMenu, 1, "Cost:");
	AddMenuItem(VipMenu, 0, "Ability to buy a second car");
	AddMenuItem(VipMenu, 1, "~r~5 VIP Points");
	AddMenuItem(VipMenu, 0, "Buy a HeadText");
	AddMenuItem(VipMenu, 1, "~r~Free");
	AddMenuItem(VipMenu, 0, "Teleport Discount  1/3");
	AddMenuItem(VipMenu, 1, "~r~5 VIP Points");
	AddMenuItem(VipMenu, 0, "Ammunation Discount 1/4");
	AddMenuItem(VipMenu, 1, "~r~3 VIP Points");
	AddMenuItem(VipMenu, 0, "Car Dealer Discount 1/4");
	AddMenuItem(VipMenu, 1, "~r~4 VIP Points");
	/*AddMenuItem(VipMenu, 0, "Colored clan tag");
	AddMenuItem(VipMenu, 1, "~r~5 VIP Points");*/
	AddMenuItem(VipMenu, 0, "Sell 1 VIP Point");
	AddMenuItem(VipMenu, 1, "~g~200 Score Points");
	AddMenuItem(VipMenu, 0, "Sell 1 VIP Points");
	AddMenuItem(VipMenu, 1, "~g~$30000000");
	AddMenuItem(VipMenu, 0, "Sell 1 VIP Points");
	AddMenuItem(VipMenu, 1, "~g~100 Premium Points");


    BaseMenu_NoBuy = CreateMenu("Gang Base", 1, 400.000000, 240.000000, 200, 200);
    BaseMenu2 = CreateMenu("Gang Base", 1, 400.000000, 240.000000, 200, 200);
    BaseMenu2_ = CreateMenu("Gang Base", 1, 400.000000, 240.000000, 200, 200);


    BaseMenu_NoSell = CreateMenu("Gang Base", 1, 400.000000, 240.000000, 200, 200);
    AddMenuItem(BaseMenu_NoSell, 0, "Buy Gang Base");
    AddMenuItem(BaseMenu_NoSell, 0, "Sell Gang Base");
    DisableMenuRow(BaseMenu_NoSell, 1);

    AddMenuItem(BaseMenu_NoBuy, 0,  "Buy Gang Base");
    AddMenuItem(BaseMenu_NoBuy, 0,  "Sell Gang Base");

    AddMenuItem(BaseMenu2, 0, "Enter Base");
    AddMenuItem(BaseMenu2, 0, "Sell Gang Base");

    AddMenuItem(BaseMenu2_, 0, "Enter Base");
    AddMenuItem(BaseMenu2_, 0, "Sell Gang Base");


    DisableMenuRow(BaseMenu2_, 1);


	InsideHouseMenu = CreateMenu("~y~House Menu", 1, 230.0, 180.0, 180, 0);
    AddMenuItem(InsideHouseMenu, 0, "Eat");
    AddMenuItem(InsideHouseMenu, 0, "Take Armour");
    AddMenuItem(InsideHouseMenu, 0, "My Wardrobe");
    AddMenuItem(InsideHouseMenu, 0, "Store Weapons");
    AddMenuItem(InsideHouseMenu, 0, "Get Weapons");
    AddMenuItem(InsideHouseMenu, 0, "Take Knife");
    AddMenuItem(InsideHouseMenu, 0, "Take Baseball Bat");
    AddMenuItem(InsideHouseMenu, 0, "Exit House");

    CanonMenu = CreateMenu("~b~The Cannon", 1, 230.0, 180.0, 180, 0);
    AddMenuItem(CanonMenu, 0, "Retry");
    AddMenuItem(CanonMenu, 0, "Exit");
#if defined USEDRIFT

    DriftMenu = CreateMenu("~g~Drift", 1, 230.0, 180.0, 180, 0);
    AddMenuItem(DriftMenu, 0, "Retry");
    AddMenuItem(DriftMenu, 0, "Exit");
#endif
    StuntMenu = CreateMenu("~p~Stunt", 1, 230.0, 180.0, 180, 0);
    AddMenuItem(StuntMenu, 0, "Retry");
    AddMenuItem(StuntMenu, 0, "Exit");

#if defined USE_OLDBANK
    BankMainMenu = CreateMenu("Bank", 1, 400.000000, 240.000000, 200, 200);
    BankMainMenu2 = CreateMenu("Bank", 1, 400.000000, 240.000000, 200, 200);

    BankMenu_ = CreateMenu("Gang Account", 1, 400.000000, 240.000000, 200, 200);

    AddMenuItem(BankMenu_, 0, "Deposit");
    AddMenuItem(BankMenu_, 0, "Withdraw");


    BankMenu2_ = CreateMenu("Deposit", 1, 400.000000, 180.000000, 200, 200);
    BankMenu3_ = CreateMenu("Withdraw", 1, 400.000000, 180.000000, 200, 200);

    AddMenuItem(BankMenu2_, 0, "1$");
    AddMenuItem(BankMenu2_, 0, "10$");
    AddMenuItem(BankMenu2_, 0, "100$");
    AddMenuItem(BankMenu2_, 0, "1000$");
    AddMenuItem(BankMenu2_, 0, "10000$");
    AddMenuItem(BankMenu2_, 0, "100000$");
    AddMenuItem(BankMenu2_, 0, "1000000$");
    AddMenuItem(BankMenu2_, 0, "10000000$");
    AddMenuItem(BankMenu2_, 0, "100000000$");
    AddMenuItem(BankMenu2_, 0, "Enter amount");
    SetMenuColumnHeader(BankMenu2_, 0, "Amount:");

    AddMenuItem(BankMenu3_, 0, "1$");
    AddMenuItem(BankMenu3_, 0, "10$");
    AddMenuItem(BankMenu3_, 0, "100$");
    AddMenuItem(BankMenu3_, 0, "1000$");
    AddMenuItem(BankMenu3_, 0, "10000$");
    AddMenuItem(BankMenu3_, 0, "100000$");
    AddMenuItem(BankMenu3_, 0, "1000000$");
    AddMenuItem(BankMenu3_, 0, "10000000$");
    AddMenuItem(BankMenu3_, 0, "100000000$");
    AddMenuItem(BankMenu3_, 0, "Enter amount");
    SetMenuColumnHeader(BankMenu3_, 0, "Amount:");

    AddMenuItem(BankMainMenu, 0, "Private Account");
    AddMenuItem(BankMainMenu, 0, "Gang Account");
    AddMenuItem(BankMainMenu2, 0, "Private Account");
    AddMenuItem(BankMainMenu2, 0, "Gang Account");
    DisableMenuRow(BankMainMenu2, 1);

//==============================================================================

    BankMenu = CreateMenu("Private Account", 1, 380.000000, 240.000000, 220, 200);

    AddMenuItem(BankMenu, 0, "Deposit");
    AddMenuItem(BankMenu, 0, "Withdraw");

    BankMenu2 = CreateMenu("Deposit", 1, 400.000000, 180.000000, 200, 200);
    BankMenu3 = CreateMenu("Withdraw", 1, 400.000000, 180.000000, 200, 200);

    AddMenuItem(BankMenu2, 0, "1$");
    AddMenuItem(BankMenu2, 0, "10$");
    AddMenuItem(BankMenu2, 0, "100$");
    AddMenuItem(BankMenu2, 0, "1000$");
    AddMenuItem(BankMenu2, 0, "10000$");
    AddMenuItem(BankMenu2, 0, "100000$");
    AddMenuItem(BankMenu2, 0, "1000000$");
    AddMenuItem(BankMenu2, 0, "10000000$");
    AddMenuItem(BankMenu2, 0, "100000000$");
    AddMenuItem(BankMenu2, 0, "Enter amount");
    SetMenuColumnHeader(BankMenu2, 0, "Amount:");

    AddMenuItem(BankMenu3, 0, "1$");
    AddMenuItem(BankMenu3, 0, "10$");
    AddMenuItem(BankMenu3, 0, "100$");
    AddMenuItem(BankMenu3, 0, "1000$");
    AddMenuItem(BankMenu3, 0, "10000$");
    AddMenuItem(BankMenu3, 0, "100000$");
    AddMenuItem(BankMenu3, 0, "1000000$");
    AddMenuItem(BankMenu3, 0, "10000000$");
    AddMenuItem(BankMenu3, 0, "100000000$");
    AddMenuItem(BankMenu3, 0, "Enter amount");
    SetMenuColumnHeader(BankMenu3, 0, "Amount:");
#endif

	PropMenu1 = CreateMenu("Menu", 1, 440.000000, 240.000000, 200, 200);
    PropMenu2 = CreateMenu("Menu", 1, 440.000000, 240.000000, 200, 200);

    AddMenuItem(PropMenu1, 0, "Buy Property");
    AddMenuItem(PropMenu1, 0, "Sell Property");
    DisableMenuRow(PropMenu1, 1);

    AddMenuItem(PropMenu2, 0, "Buy Property");
    AddMenuItem(PropMenu2, 0, "Sell Property");
    DisableMenuRow(PropMenu2, 0);

	//for(new x=1;x<10;x++) Cars[x] = CreateMenu("Cars", 2, 180.0, 120.0, 60.0, 60.0), SetMenuColumnHeader(Cars[x], 0, ""), SetMenuColumnHeader(Cars[x], 1, "");
//	for(new z=0;z<9;z++) Cars_Discount[z] = CreateMenu("Cars", 2, 180.0, 120.0, 60.0, 60.0), SetMenuColumnHeader(Cars_Discount[z], 0, ""), SetMenuColumnHeader(Cars_Discount[z], 1, "");

	for(new x=1;x<10;x++) Cars[x] = CreateMenu("Car Dealership", 2, 180.0, 120.0, 120.0, 120.0), SetMenuColumnHeader(Cars[x], 0, "Vehicle"), SetMenuColumnHeader(Cars[x], 1, "Price");
	for(new z=0;z<9;z++) Cars_Discount[z] = CreateMenu("Car Dealership", 2, 180.0, 120.0, 120.0, 120.0), SetMenuColumnHeader(Cars_Discount[z], 0, "Vehicle"), SetMenuColumnHeader(Cars_Discount[z], 1, "Price");
    Cars[0] = CreateMenu("Car Dealership", 1, 415.000000, 240.000000, 200, 200);
    Cars[10] = CreateMenu("Car Dealership", 1, 415.000000, 240.000000, 200, 200);

   // Cars[0] = CreateMenu("Cars", 1, 415.000000, 240.000000, 100, 100);
    //C/ars[10] = CreateMenu("Cars", 1, 415.000000, 240.000000, 100, 100);

    AddMenuItem(Cars[0], 0, "Preview/Buy Vehicle");
    AddMenuItem(Cars[0], 0, "Buy Vehicle");
    AddMenuItem(Cars[0], 0, "Sell Vehicle");

    AddMenuItem(Cars[10], 0, "Preview/Buy Vehicle");
    AddMenuItem(Cars[10], 0, "Buy Vehicle");
    AddMenuItem(Cars[10], 0, "Sell Vehicle");
    DisableMenuRow(Cars[10], 0);
    DisableMenuRow(Cars[10], 1);

	AddCarForSale(404, 1);
	AddCarForSale(405, 1);
	AddCarForSale(410, 1);
	AddCarForSale(419, 1);
	AddCarForSale(436, 1);
	AddCarForSale(491, 1);
	AddCarForSale(421, 1);
	AddCarForSale(401, 1);
	AddCarForSale(440, 1);
	AddCarForSale(545, 1);
	AddCarForSale(580, 1);
	AddCarForSale(400, 1);

	AddCarForSale(496, 2);
	AddCarForSale(500, 2);
	AddCarForSale(507, 2);
	AddCarForSale(533, 2);
	AddCarForSale(475, 2);
	AddCarForSale(492, 2);
	AddCarForSale(498, 2);
	AddCarForSale(499, 2);
	AddCarForSale(508, 2);
	AddCarForSale(552, 2);
	AddCarForSale(543, 2);
	AddCarForSale(605, 2);

	AddCarForSale(482, 3);
	AddCarForSale(489, 3);
	AddCarForSale(483, 3);
	AddCarForSale(554, 3);
	AddCarForSale(555, 3);
	AddCarForSale(566, 3);
	AddCarForSale(567, 3);
	AddCarForSale(542, 3);
	AddCarForSale(549, 3);
	AddCarForSale(585, 3);
	AddCarForSale(551, 3);
	AddCarForSale(550, 3);

	AddCarForSale(581, 4);
	AddCarForSale(522, 4);
	AddCarForSale(461, 4);
	AddCarForSale(521, 4);
	AddCarForSale(471, 4);
	AddCarForSale(586, 4);
	AddCarForSale(463, 4);
	AddCarForSale(462, 4);
	AddCarForSale(468, 4);
	AddCarForSale(481, 4);
	AddCarForSale(509, 4);
	AddCarForSale(510, 4);

	AddCarForSale(536, 5);
	AddCarForSale(575, 5);
	AddCarForSale(534, 5);
	AddCarForSale(535, 5);
	AddCarForSale(576, 5);
	AddCarForSale(560, 5);
	AddCarForSale(559, 5);
	AddCarForSale(558, 5);
	AddCarForSale(561, 5);
	AddCarForSale(562, 5);
	AddCarForSale(601, 5);
	AddCarForSale(466, 5);

	AddCarForSale(411, 6);
	AddCarForSale(506, 6);
	AddCarForSale(477, 6);
	AddCarForSale(451, 6);
	AddCarForSale(429, 6);
	AddCarForSale(494, 6);
	AddCarForSale(415, 6);
	AddCarForSale(541, 6);
	AddCarForSale(402, 6);
	AddCarForSale(602, 6);
	AddCarForSale(587, 6);
	AddCarForSale(429, 6);

	AddCarForSale(424, 7);
	AddCarForSale(573, 7);
	AddCarForSale(444, 7);
	AddCarForSale(556, 7);
	AddCarForSale(557, 7);
	AddCarForSale(495, 7);
	AddCarForSale(524, 7);
	AddCarForSale(406, 7);
	AddCarForSale(530, 7);
	AddCarForSale(572, 7);
	AddCarForSale(483, 7);
	AddCarForSale(486, 7);

	AddCarForSale(487, 8);
	AddCarForSale(548, 8);
	AddCarForSale(497, 8);
	AddCarForSale(513, 8);
	AddCarForSale(511, 8);
	AddCarForSale(469, 8);
	AddCarForSale(553, 8);
	AddCarForSale(460, 8);
	AddCarForSale(417, 8);
	AddCarForSale(593, 8);
	AddCarForSale(563, 8);
	AddCarForSale(577, 8);

	AddCarForSale(441, 9);
	AddCarForSale(465, 9);
	AddCarForSale(501, 9);
	AddCarForSale(564, 9);
	AddCarForSale(594, 9);
	AddCarForSale(474, 9);
	AddCarForSale(490, 9);
	AddCarForSale(528, 9);
	AddCarForSale(532, 9);
	AddCarForSale(544, 9);
	AddCarForSale(523, 9);
	AddCarForSale(599, 9);

    NotOwnedMenu = CreateMenu("House Menu", 1, 440.000000, 240.000000, 200, 200);
    NotOwnedMenu2 = CreateMenu("House Menu", 1, 440.000000, 240.000000, 200, 200);

    OwnedMenu = CreateMenu("House Menu", 1, 440.000000, 240.000000, 200, 200);
    OwnedMenu2 = CreateMenu("House Menu", 1, 440.000000, 240.000000, 200, 200);

    AddMenuItem(NotOwnedMenu, 0, "Buy House");
    AddMenuItem(NotOwnedMenu, 0, "Enter House");

    AddMenuItem(NotOwnedMenu2, 0, "Buy House");
    AddMenuItem(NotOwnedMenu2, 0, "Enter House");
    DisableMenuRow(NotOwnedMenu2, 0);

    AddMenuItem(OwnedMenu, 0, "Enter House");
    AddMenuItem(OwnedMenu, 0, "Sell House");

    AddMenuItem(OwnedMenu2, 0, "Enter House");
    AddMenuItem(OwnedMenu2, 0, "Knock Door");


//||============================================================================||
//||                      TEXTDRAWS                                             ||
//||                                                                            ||
//||============================================================================||
/*
    Textdraw01 = TextDrawCreate(438.000000, 221.000000, "~r~G~Y~T~G~A~b~DM ~w~- ~r~G~h~ra~h~nd ~y~The~h~ft ~g~Au~h~to ~b~Death~h~match");
	TextDrawBackgroundColor(Textdraw01, 255);
	TextDrawFont(Textdraw01, 1);
	TextDrawLetterSize(Textdraw01, 0.239999, 1.799999);
	TextDrawColor(Textdraw01, -1);
	TextDrawSetOutline(Textdraw01, 1);
	TextDrawSetProportional(Textdraw01, 1);
	TextDrawSetSelectable(Textdraw01, 0);

	Textdraw011 = TextDrawCreate(469.000000, 241.000000, "~r~84.~h~200.~y~21.~h~41~g~:77~h~77");
	TextDrawBackgroundColor(Textdraw011, 255);
	TextDrawFont(Textdraw011, 3);
	TextDrawLetterSize(Textdraw011, 0.289999, 1.000000);
	TextDrawColor(Textdraw011, -1);
	TextDrawSetOutline(Textdraw011, 1);
	TextDrawSetProportional(Textdraw011, 1);
	TextDrawSetSelectable(Textdraw011, 0);

	Textdraw02 = TextDrawCreate(447.000000, 254.000000, "Welcome to the ~r~G~y~T~g~A~b~DM ~w~server!");
	TextDrawBackgroundColor(Textdraw02, 255);
	TextDrawFont(Textdraw02, 1);
	TextDrawLetterSize(Textdraw02, 0.259999, 1.000000);
	TextDrawColor(Textdraw02, -1);
	TextDrawSetOutline(Textdraw02, 1);
	TextDrawSetProportional(Textdraw02, 1);
	TextDrawSetSelectable(Textdraw02, 0);

	Textdraw03 = TextDrawCreate(448.000000, 267.000000, "Important commands: ~n~~w~- ~r~~h~/help ~w~to get started.~n~- ~g~~h~/cmds ~w~for commands.~n~- ~y~~h~/teles ~w~for teleports.");
	TextDrawBackgroundColor(Textdraw03, 255);
	TextDrawFont(Textdraw03, 1);
	TextDrawLetterSize(Textdraw03, 0.229999, 1.000000);
	TextDrawColor(Textdraw03, -1);
	TextDrawSetOutline(Textdraw03, 1);
	TextDrawSetProportional(Textdraw03, 1);
	TextDrawSetSelectable(Textdraw03, 0);

	Textdraw04 = TextDrawCreate(447.000000, 334.000000, "How do I earn money and score?~n~- ~b~~h~~h~See ~h~/help ~b~~h~~h~for more information.");
	TextDrawBackgroundColor(Textdraw04, 255);
	TextDrawFont(Textdraw04, 1);
	TextDrawLetterSize(Textdraw04, 0.209999, 1.000000);
	TextDrawColor(Textdraw04, -1);
	TextDrawSetOutline(Textdraw04, 1);
	TextDrawSetProportional(Textdraw04, 1);
	TextDrawSetSelectable(Textdraw04, 0);

	Textdraw05 = TextDrawCreate(447.000000, 356.000000, "Discuss on our forums!~n~- ~y~~h~Visit ~w~us at ~p~www.gtadm.com~w~!");
	TextDrawBackgroundColor(Textdraw05, 255);
	TextDrawFont(Textdraw05, 1);
	TextDrawLetterSize(Textdraw05, 0.209999, 1.000000);
	TextDrawColor(Textdraw05, -1);
	TextDrawSetOutline(Textdraw05, 1);
	TextDrawSetProportional(Textdraw05, 1);
	TextDrawSetSelectable(Textdraw05, 0);

	Textdraw06 = TextDrawCreate(448.000000, 304.000000, "~w~- ~p~~h~/info ~w~for more information.~n~- ~b~~h~/rules ~w~to see the rules.~n~- ~g~~h~~h~/minigames ~w~for minigames.");
	TextDrawBackgroundColor(Textdraw06, 255);
	TextDrawFont(Textdraw06, 1);
	TextDrawLetterSize(Textdraw06, 0.229999, 1.000000);
	TextDrawColor(Textdraw06, -1);
	TextDrawSetOutline(Textdraw06, 1);
	TextDrawSetProportional(Textdraw06, 1);
	TextDrawSetSelectable(Textdraw06, 0);

	Textdraw07 = TextDrawCreate(609.000000, 220.000000, "_");
	TextDrawBackgroundColor(Textdraw07, 0x000000ff);//255
	TextDrawFont(Textdraw07, 1);
	TextDrawLetterSize(Textdraw07, 1.799999, 17.500005);
	TextDrawColor(Textdraw07, 0xffffffff);
	TextDrawSetOutline(Textdraw07, 0);
	TextDrawSetProportional(Textdraw07, 1);
	TextDrawSetShadow(Textdraw07, 4);
	TextDrawUseBox(Textdraw07, 1);
	TextDrawBoxColor(Textdraw07, 0x00000033);//150
	TextDrawTextSize(Textdraw07, 432.000000, 40.000000);
	TextDrawSetSelectable(Textdraw07, 0);
	////////////////////////////////////////////
*/
	Textdraw0 = TextDrawCreate(172.000000, 109.000000, "_");
	TextDrawBackgroundColor(Textdraw0, 255);
	TextDrawFont(Textdraw0, 1);
	TextDrawLetterSize(Textdraw0, 0.500000, 26.000000);
	TextDrawColor(Textdraw0, -1);
	TextDrawSetOutline(Textdraw0, 0);
	TextDrawSetProportional(Textdraw0, 1);
	TextDrawSetShadow(Textdraw0, 1);
	TextDrawUseBox(Textdraw0, 1);
	TextDrawBoxColor(Textdraw0, 150);
	TextDrawTextSize(Textdraw0, 490.000000, -2.000000);
	TextDrawSetSelectable(Textdraw0, 0);

	Textdraw1 = TextDrawCreate(219.000000, 155.000000, "~r~G~h~ra~h~nd ~y~The~h~ft ~g~Au~h~to ~b~Death~h~match");
	TextDrawBackgroundColor(Textdraw1, 20);
	TextDrawFont(Textdraw1, 3);
	TextDrawLetterSize(Textdraw1, 0.419999, 1.200000);
	TextDrawColor(Textdraw1, 100);
	TextDrawSetOutline(Textdraw1, 1);
	TextDrawSetProportional(Textdraw1, 1);
	TextDrawSetSelectable(Textdraw1, 0);

	Textdraw2 = TextDrawCreate(284.000000, 119.000000, "~r~G~Y~T~G~A~b~DM");
	TextDrawBackgroundColor(Textdraw2, 150);
	TextDrawFont(Textdraw2, 2);
	TextDrawLetterSize(Textdraw2, 0.610000, 3.599999);
	TextDrawColor(Textdraw2, 150);
	TextDrawSetOutline(Textdraw2, 1);
	TextDrawSetProportional(Textdraw2, 0);
	TextDrawSetSelectable(Textdraw2, 0);

	Textdraw3 = TextDrawCreate(185.000000, 185.000000, "~r~> ~y~No cheating, flaming or spamming~r~! ~b~~h~~h~~h~(/Rules)~n~~n~~r~> ~y~Always report rule-breakers~r~!");
	TextDrawBackgroundColor(Textdraw3, 20);
	TextDrawFont(Textdraw3, 2);
	TextDrawLetterSize(Textdraw3, 0.209999, 1.100000);
	TextDrawColor(Textdraw3, 150);
	TextDrawSetOutline(Textdraw3, 0);
	TextDrawSetProportional(Textdraw3, 1);
	TextDrawSetShadow(Textdraw3, 1);
	TextDrawSetSelectable(Textdraw3, 0);

	Textdraw4 = TextDrawCreate(177.000000, 313.000000, "~y~~h~Freeroam / Race / Minigames / Stunts / Gangwars~n~~w~Home of fun - The original since 2012");
	TextDrawBackgroundColor(Textdraw4, 20);
	TextDrawFont(Textdraw4, 2);
	TextDrawLetterSize(Textdraw4, 0.180000, 1.200000);
	TextDrawColor(Textdraw4, 100);
	TextDrawSetOutline(Textdraw4, 1);
	TextDrawSetProportional(Textdraw4, 1);
	TextDrawSetShadow(Textdraw4, 1);
	TextDrawSetSelectable(Textdraw4, 0);

	Textdraw5 = TextDrawCreate(185.000000, 268.000000, "~r~> ~y~Type ~b~~h~(/Help)~y~ for more info~r~!~n~~n~~r~> ~y~Have fun and don't forget to visit ~g~~h~www.gtadm.com~r~!");
	TextDrawBackgroundColor(Textdraw5, 20);
	TextDrawFont(Textdraw5, 2);
	TextDrawLetterSize(Textdraw5, 0.209999, 1.100000);
	TextDrawColor(Textdraw5, 150);
	TextDrawSetOutline(Textdraw5, 0);
	TextDrawSetProportional(Textdraw5, 1);
	TextDrawSetShadow(Textdraw5, 1);
	TextDrawSetSelectable(Textdraw5, 0);

	Textdraw6 = TextDrawCreate(172.000000, 111.000000, "_");
	TextDrawBackgroundColor(Textdraw6, 255);
	TextDrawFont(Textdraw6, 1);
	TextDrawLetterSize(Textdraw6, 0.500000, -1.100000);
	TextDrawColor(Textdraw6, -1);
	TextDrawSetOutline(Textdraw6, 0);
	TextDrawSetProportional(Textdraw6, 1);
	TextDrawSetShadow(Textdraw6, 1);
	TextDrawUseBox(Textdraw6, 1);
	TextDrawBoxColor(Textdraw6, -693436161);
	TextDrawTextSize(Textdraw6, 490.000000, -191.000000);
	TextDrawSetSelectable(Textdraw6, 0);

	Textdraw7 = TextDrawCreate(172.000000, 114.000000, "_");
	TextDrawBackgroundColor(Textdraw7, 255);
	TextDrawFont(Textdraw7, 1);
	TextDrawLetterSize(Textdraw7, 0.500000, -1.100000);
	TextDrawColor(Textdraw7, -1);
	TextDrawSetOutline(Textdraw7, 0);
	TextDrawSetProportional(Textdraw7, 1);
	TextDrawSetShadow(Textdraw7, 1);
	TextDrawUseBox(Textdraw7, 1);
	TextDrawBoxColor(Textdraw7, -693436382);
	TextDrawTextSize(Textdraw7, 490.000000, -191.000000);
	TextDrawSetSelectable(Textdraw7, 0);

	Textdraw8 = TextDrawCreate(172.000000, 350.000000, "_");
	TextDrawBackgroundColor(Textdraw8, 255);
	TextDrawFont(Textdraw8, 1);
	TextDrawLetterSize(Textdraw8, 0.500000, -1.100000);
	TextDrawColor(Textdraw8, -1);
	TextDrawSetOutline(Textdraw8, 0);
	TextDrawSetProportional(Textdraw8, 1);
	TextDrawSetShadow(Textdraw8, 1);
	TextDrawUseBox(Textdraw8, 1);
	TextDrawBoxColor(Textdraw8, -693436161);
	TextDrawTextSize(Textdraw8, 490.000000, -191.000000);
	TextDrawSetSelectable(Textdraw8, 0);

	Textdraw9 = TextDrawCreate(185.000000, 227.000000, "~r~> ~y~Use ~g~~h~~h~(/CMDS) ~y~for the list of available commands~r~!~n~~n~~r~> ~y~Check out our list of minigames~r~! ~p~(/Minigames)");
	TextDrawBackgroundColor(Textdraw9, 20);
	TextDrawFont(Textdraw9, 2);
	TextDrawLetterSize(Textdraw9, 0.209998, 1.100000);
	TextDrawColor(Textdraw9, 150);
	TextDrawSetOutline(Textdraw9, 0);
	TextDrawSetProportional(Textdraw9, 1);
	TextDrawSetShadow(Textdraw9, 1);
	TextDrawSetSelectable(Textdraw9, 0);


	TdHeadShot = TextDrawCreate(273.000000, 138.000000, "HEADSHOT!");
	TextDrawBackgroundColor(TdHeadShot, 255);
	TextDrawFont(TdHeadShot, 1);
	TextDrawLetterSize(TdHeadShot, 0.500000, 2.100002);
	TextDrawColor(TdHeadShot, -16776961);
	TextDrawSetOutline(TdHeadShot, 1);
	TextDrawSetProportional(TdHeadShot, 1);

	InfoText = TextDrawCreate(317.000000, 335.000000, "_");//327
	TextDrawAlignment(InfoText, 2);
	TextDrawBackgroundColor(InfoText, 0x00000033);
	TextDrawFont(InfoText, 2);
	TextDrawLetterSize(InfoText, 0.299999, 1.000000);
	TextDrawColor(InfoText, 0xffffffff);
	TextDrawSetOutline(InfoText, 1);
	TextDrawSetProportional(InfoText, 1);
	TextDrawSetShadow(InfoText, 1);

	#if defined USE_NEWINFOMSG
	LMBtoClose = TextDrawCreate(15.000000, 121.000000, "Press LMB to close");
	DEBUG_TextDrawsUsed ++;
	TextDrawAlignment(LMBtoClose, 0);
	TextDrawBackgroundColor(LMBtoClose, 0x00000000);
	TextDrawFont(LMBtoClose, 2);
	TextDrawLetterSize(LMBtoClose, 0.199999, 0.399999);
	TextDrawColor(LMBtoClose, 0xffffff66);
	TextDrawSetOutline(LMBtoClose, 1);
	TextDrawSetProportional(LMBtoClose, 1);
	TextDrawSetShadow(LMBtoClose, 1);
	#endif


#if defined USEKILLIST
	Killist[0] = TextDrawCreate(514.000000, 141.000000, "_");
	TextDrawAlignment(Killist[0], 3);
	TextDrawBackgroundColor(Killist[0], 150);
	TextDrawFont(Killist[0], 1);
	TextDrawLetterSize(Killist[0], 0.170000, 0.799898);
	TextDrawColor(Killist[0], -16711681);
	TextDrawSetOutline(Killist[0], 1);
	TextDrawSetProportional(Killist[0], 1);
	TextDrawSetSelectable(Killist[0], 0);

	Killist[1] = TextDrawCreate(555.0, 141.000000, "_");
	TextDrawBackgroundColor(Killist[1], 150);
	TextDrawFont(Killist[1], 1);
	TextDrawLetterSize(Killist[1], 0.170000, 0.799898);
	TextDrawColor(Killist[1], -16776961);
	TextDrawSetOutline(Killist[1], 1);
	TextDrawSetProportional(Killist[1], 1);
	TextDrawSetSelectable(Killist[1], 0);

	Killist[2] = TextDrawCreate(514.000000, 161.000000, "_");
	TextDrawAlignment(Killist[2], 3);
	TextDrawBackgroundColor(Killist[2], 150);
	TextDrawFont(Killist[2], 1);
	TextDrawLetterSize(Killist[2], 0.170000, 0.799898);
	TextDrawColor(Killist[2], -16711681);
	TextDrawSetOutline(Killist[2], 1);
	TextDrawSetProportional(Killist[2], 1);
	TextDrawSetSelectable(Killist[2], 0);

	Killist[4] = TextDrawCreate(555.0, 161.000000, "_");
	TextDrawBackgroundColor(Killist[4], 150);
	TextDrawFont(Killist[4], 1);
	TextDrawLetterSize(Killist[4], 0.170000, 0.799898);
	TextDrawColor(Killist[4], -16776961);
	TextDrawSetOutline(Killist[4], 1);
	TextDrawSetProportional(Killist[4], 1);
	TextDrawSetSelectable(Killist[4], 0);

	Killist[5] = TextDrawCreate(555.0, 201.000000, "_");
	TextDrawBackgroundColor(Killist[5], 150);
	TextDrawFont(Killist[5], 1);
	TextDrawLetterSize(Killist[5], 0.170000, 0.799898);
	TextDrawColor(Killist[5], -16776961);
	TextDrawSetOutline(Killist[5], 1);
	TextDrawSetProportional(Killist[5], 1);
	TextDrawSetSelectable(Killist[5], 0);

	Killist[6] = TextDrawCreate(514.000000, 181.000000, "_");
	TextDrawAlignment(Killist[6], 3);
	TextDrawBackgroundColor(Killist[6], 150);
	TextDrawFont(Killist[6], 1);
	TextDrawLetterSize(Killist[6], 0.170000, 0.799898);
	TextDrawColor(Killist[6], -16711681);
	TextDrawSetOutline(Killist[6], 1);
	TextDrawSetProportional(Killist[6], 1);
	TextDrawSetSelectable(Killist[6], 0);

	Killist[7] = TextDrawCreate(514.000000, 221.000000, "_");
	TextDrawAlignment(Killist[7], 3);
	TextDrawBackgroundColor(Killist[7], 150);
	TextDrawFont(Killist[7], 1);
	TextDrawLetterSize(Killist[7], 0.170000, 0.799898);
	TextDrawColor(Killist[7], -16711681);
	TextDrawSetOutline(Killist[7], 1);
	TextDrawSetProportional(Killist[7], 1);
	TextDrawSetSelectable(Killist[7], 0);

	Killist[8] = TextDrawCreate(555.0, 181.000000, "_");
	TextDrawBackgroundColor(Killist[8], 150);
	TextDrawFont(Killist[8], 1);
	TextDrawLetterSize(Killist[8], 0.170000, 0.799898);
	TextDrawColor(Killist[8], -16776961);
	TextDrawSetOutline(Killist[8], 1);
	TextDrawSetProportional(Killist[8], 1);
	TextDrawSetSelectable(Killist[8], 0);

	Killist[9] = TextDrawCreate(555.0, 221.000000, "_");
	TextDrawBackgroundColor(Killist[9], 150);
	TextDrawFont(Killist[9], 1);
	TextDrawLetterSize(Killist[9], 0.170000, 0.799898);
	TextDrawColor(Killist[9], -16776961);
	TextDrawSetOutline(Killist[9], 1);
	TextDrawSetProportional(Killist[9], 1);
	TextDrawSetSelectable(Killist[9], 0);

	Killist[3] = TextDrawCreate(514.000000, 201.000000, "_");
	TextDrawAlignment(Killist[3], 3);
	TextDrawBackgroundColor(Killist[3], 150);
	TextDrawFont(Killist[3], 1);
	TextDrawLetterSize(Killist[3], 0.170000, 0.799000);
	TextDrawColor(Killist[3], -16711681);
	TextDrawSetOutline(Killist[3], 1);
	TextDrawSetProportional(Killist[3], 1);
	TextDrawSetSelectable(Killist[3], 0);
	for(new x = 0; x<sizeof(oldreasons); x++) oldreasons[x]=77;
#endif
	RaceStartTD = TextDrawCreate(7.000000, 293.000000, "- Type ~w~/RaceInfo~l~ for more information about this race!~n~~l~- Use ~w~/RaceWorld ~l~to change your world at any time!");
	TextDrawBackgroundColor(RaceStartTD, -16777206);
	TextDrawFont(RaceStartTD, 1);
	TextDrawLetterSize(RaceStartTD, 0.180000, 1.000000);//0.190000, 1.000000);
	TextDrawColor(RaceStartTD, 255);
	TextDrawSetOutline(RaceStartTD, 1);
	TextDrawSetProportional(RaceStartTD, 1);
	TextDrawSetSelectable(RaceStartTD, 0);

	ScreenTXDS[0] = TextDrawCreate(0.000000, 425.000000, "_");
	TextDrawBackgroundColor(ScreenTXDS[0], 255);
	TextDrawFont(ScreenTXDS[0], 1);
	TextDrawLetterSize(ScreenTXDS[0], 0.500000, 3.099998);
	TextDrawColor(ScreenTXDS[0], -1);
	TextDrawSetOutline(ScreenTXDS[0], 0);
	TextDrawSetProportional(ScreenTXDS[0], 1);
	TextDrawSetShadow(ScreenTXDS[0], 1);
	TextDrawUseBox(ScreenTXDS[0], 1);
	TextDrawBoxColor(ScreenTXDS[0], -236);
	TextDrawTextSize(ScreenTXDS[0], 644.000000, 85.000000);
	TextDrawSetSelectable(ScreenTXDS[0], 0);

	ScreenTXDS[1] = TextDrawCreate(-2.000000, 427.000000, "_");
	TextDrawBackgroundColor(ScreenTXDS[1], 255);
	TextDrawFont(ScreenTXDS[1], 1);
	TextDrawLetterSize(ScreenTXDS[1], 0.180000, 1.899999);
	TextDrawColor(ScreenTXDS[1], -1);
	TextDrawSetOutline(ScreenTXDS[1], 1);
	TextDrawSetProportional(ScreenTXDS[1], 1);
	TextDrawUseBox(ScreenTXDS[1], 1);
	TextDrawBoxColor(ScreenTXDS[1], 150);
	TextDrawTextSize(ScreenTXDS[1], 643.000000, -40.000000);
	TextDrawSetSelectable(ScreenTXDS[1], 0);

	ScreenTXDS[2] = TextDrawCreate(523.000000, 437.000000, "www.gtadm.com");
	TextDrawBackgroundColor(ScreenTXDS[2], 100);
	TextDrawFont(ScreenTXDS[2], 1);
	TextDrawLetterSize(ScreenTXDS[2], 0.180000, 0.799999);
	TextDrawColor(ScreenTXDS[2], -1);
	TextDrawSetOutline(ScreenTXDS[2], 1);
	TextDrawSetProportional(ScreenTXDS[2], 1);
	TextDrawSetSelectable(ScreenTXDS[2], 0);

	ScreenTXDS[3] = TextDrawCreate(451.000000, 388.000000, "skull");
	TextDrawBackgroundColor(ScreenTXDS[3], 0);
	TextDrawFont(ScreenTXDS[3], 5);
	TextDrawLetterSize(ScreenTXDS[3], 0.180000, 1.000000);
	TextDrawColor(ScreenTXDS[3], -1);
	TextDrawSetOutline(ScreenTXDS[3], 1);
	TextDrawSetProportional(ScreenTXDS[3], 1);
	TextDrawUseBox(ScreenTXDS[3], 1);
	TextDrawBoxColor(ScreenTXDS[3], 0);
	TextDrawTextSize(ScreenTXDS[3], 92.000000, 94.000000);
	TextDrawSetPreviewModel( ScreenTXDS[3], 1313);
	TextDrawSetPreviewRot( ScreenTXDS[3], 0.000000, 0.000000, 0.000000, 3.000000);
	TextDrawSetSelectable(ScreenTXDS[3], 0);
    TextDrawBoxColor(ScreenTXDS[3], 0);

    ScreenTXDS[5] = TextDrawCreate(435.000000, 394.000000, "-");
	TextDrawBackgroundColor(ScreenTXDS[5], 50);
	TextDrawFont(ScreenTXDS[5], 1);
	TextDrawLetterSize(ScreenTXDS[5], 0.1799, 0.9499);
	TextDrawColor(ScreenTXDS[5], -229898753);
	TextDrawSetOutline(ScreenTXDS[5], 1);
	TextDrawSetProportional(ScreenTXDS[5], 1);
	TextDrawSetSelectable(ScreenTXDS[5], 0);

	ScreenTXDS[9] = TextDrawCreate(435.000000, 406.000000, "-");
	TextDrawBackgroundColor(ScreenTXDS[9], 50);
	TextDrawFont(ScreenTXDS[9], 1);
	TextDrawLetterSize(ScreenTXDS[9], 0.1799, 0.9499);
	TextDrawColor(ScreenTXDS[9], -229898753);
	TextDrawSetOutline(ScreenTXDS[9], 1);
	TextDrawSetProportional(ScreenTXDS[9], 1);
	TextDrawSetSelectable(ScreenTXDS[9], 0);

	ScreenTXDS[10] = TextDrawCreate(435.000000, 382.000000, "-");
	TextDrawBackgroundColor(ScreenTXDS[10], 50);
	TextDrawFont(ScreenTXDS[10], 1);
	TextDrawLetterSize(ScreenTXDS[10], 0.1799, 0.9499);
	TextDrawColor(ScreenTXDS[10], -229898753);
	TextDrawSetOutline(ScreenTXDS[10], 1);
	TextDrawSetProportional(ScreenTXDS[10], 1);
	TextDrawSetSelectable(ScreenTXDS[10], 0);


	ScreenTXDS[4] = TextDrawCreate(506.000000, 426.000000, "GTADM - Grand Theft Auto Deathmatch");
	TextDrawBackgroundColor(ScreenTXDS[4], -236);
	TextDrawFont(ScreenTXDS[4], 1);
	TextDrawLetterSize(ScreenTXDS[4], 0.180000, 1.000000);
	TextDrawColor(ScreenTXDS[4], 255);
	TextDrawSetOutline(ScreenTXDS[4], 1);
	TextDrawSetProportional(ScreenTXDS[4], 1);
	TextDrawSetSelectable(ScreenTXDS[4], 0);

	ScreenTXDS[6] = TextDrawCreate(275.000000, 436.000000, "DM1~y~ : 0 / ~g~DM5~y~ : 0 / ~b~ LMS~y~ : 0 / ~p~ CS~y~ : 0 / ~r~ Race~y~ : 0");
	TextDrawBackgroundColor(ScreenTXDS[6], 100);
	TextDrawFont(ScreenTXDS[6], 1);
	TextDrawLetterSize(ScreenTXDS[6], 0.189999, 1.000000);
	TextDrawColor(ScreenTXDS[6], -530572289);
	TextDrawSetOutline(ScreenTXDS[6], 1);
	TextDrawSetProportional(ScreenTXDS[6], 1);
	TextDrawSetSelectable(ScreenTXDS[6], 0);

	ScreenTXDS[7] = TextDrawCreate(6.000000, 431.000000, "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s:~w~ No news!");
	TextDrawBackgroundColor(ScreenTXDS[7], 255);// 255);
	TextDrawFont(ScreenTXDS[7], 1);
	TextDrawLetterSize(ScreenTXDS[7], 0.180000, 1.000000);
	TextDrawColor(ScreenTXDS[7], -1);//-1);
	TextDrawSetOutline(ScreenTXDS[7], 1);
	TextDrawSetProportional(ScreenTXDS[7], 1);
	TextDrawSetSelectable(ScreenTXDS[7], 0);

	ScreenTXDS[8] = TextDrawCreate(357.000000, 427.000000, "Seen a bug ? got a suggestion ? Keep in touch with us at www.gtadm.com");
	TextDrawAlignment(ScreenTXDS[8], 2);
	TextDrawBackgroundColor(ScreenTXDS[8], 255);
	TextDrawFont(ScreenTXDS[8], 1);
	TextDrawLetterSize(ScreenTXDS[8], 0.170000, 0.899999);
	TextDrawColor(ScreenTXDS[8], -1);
	TextDrawSetOutline(ScreenTXDS[8], 1);
	TextDrawSetProportional(ScreenTXDS[8], 1);
	TextDrawUseBox(ScreenTXDS[8], 1);
	TextDrawBoxColor(ScreenTXDS[8], 0);
	TextDrawTextSize(ScreenTXDS[8], 0.000000, 311.000000);
	TextDrawSetSelectable(ScreenTXDS[8], 0);

	ScreenTXDS[11] = TextDrawCreate(605.000000, 438.000000, "by ~r~RoNz");
	TextDrawBackgroundColor(ScreenTXDS[11], -236);
	TextDrawFont(ScreenTXDS[11], 1);
	TextDrawLetterSize(ScreenTXDS[11], 0.159999, 0.799998);
	TextDrawColor(ScreenTXDS[11], 255);
	TextDrawSetOutline(ScreenTXDS[11], 1);
	TextDrawSetProportional(ScreenTXDS[11], 1);
	TextDrawSetSelectable(ScreenTXDS[11], 0);

	ExportTD[0] = TextDrawCreate(314.000000, 258.000000, "_");
	TextDrawAlignment(ExportTD[0], 2);
	TextDrawBackgroundColor(ExportTD[0], 255);
	TextDrawFont(ExportTD[0], 0);
	TextDrawLetterSize(ExportTD[0], 1.400000, 9.799999);
	TextDrawColor(ExportTD[0], -1);
	TextDrawSetOutline(ExportTD[0], 0);
	TextDrawSetProportional(ExportTD[0], 1);
	TextDrawSetShadow(ExportTD[0], 1);
	TextDrawUseBox(ExportTD[0], 1);
	TextDrawBoxColor(ExportTD[0], 100);
	TextDrawTextSize(ExportTD[0], 170.000000, 182.000000);
	TextDrawSetSelectable(ExportTD[0], 0);

	ExportTD[1] = TextDrawCreate(313.000000, 250.000000, "Export");
	TextDrawAlignment(ExportTD[1], 2);
	TextDrawBackgroundColor(ExportTD[1], 461299729);
	TextDrawFont(ExportTD[1], 3);
	TextDrawLetterSize(ExportTD[1], 0.480000, 1.300000);
	TextDrawColor(ExportTD[1], 461299967);
	TextDrawSetOutline(ExportTD[1], 1);
	TextDrawSetProportional(ExportTD[1], 1);
	TextDrawSetSelectable(ExportTD[1], 0);

	ExportTD[2] = TextDrawCreate(228.000000, 282.000000, "Car_Box");
	TextDrawAlignment(ExportTD[2], 2);
	TextDrawBackgroundColor(ExportTD[2], 0);
	TextDrawFont(ExportTD[2], 5);
	TextDrawLetterSize(ExportTD[2], 0.440000, 1.100000);
	TextDrawColor(ExportTD[2], -1);
	TextDrawSetOutline(ExportTD[2], 1);
	TextDrawSetProportional(ExportTD[2], 1);
	TextDrawUseBox(ExportTD[2], 1);
	TextDrawBoxColor(ExportTD[2], 0);
	TextDrawTextSize(ExportTD[2], 70.000000, 65.000000);
	TextDrawSetSelectable(ExportTD[2], 0);
	TextDrawBackgroundColor(ExportTD[2], 0);

	ExportTD[3] = TextDrawCreate(314.000000, 268.000000, "Infernus Is Wanted");
	TextDrawAlignment(ExportTD[3], 2);
	TextDrawBackgroundColor(ExportTD[3], 461299729);
	TextDrawFont(ExportTD[3], 3);
	TextDrawLetterSize(ExportTD[3], 0.370000, 1.300000);
	TextDrawColor(ExportTD[3], 255);
	TextDrawSetOutline(ExportTD[3], 1);
	TextDrawSetProportional(ExportTD[3], 1);
	TextDrawSetSelectable(ExportTD[3], 0);

	ExportTD[4] = TextDrawCreate(353.000000, 300.000000, "Price: ~y~$1000000");
	TextDrawAlignment(ExportTD[4], 2);
	TextDrawBackgroundColor(ExportTD[4], 461299729);
	TextDrawFont(ExportTD[4], 3);
	TextDrawLetterSize(ExportTD[4], 0.310000, 1.000000);
	TextDrawColor(ExportTD[4], 255);
	TextDrawSetOutline(ExportTD[4], 1);
	TextDrawSetProportional(ExportTD[4], 1);
	TextDrawSetSelectable(ExportTD[4], 0);

	ExportTD[5] = TextDrawCreate(352.000000, 317.000000, "Deliver The vehicle to the ~n~Cargo Ship to get rewarded");
	TextDrawAlignment(ExportTD[5], 2);
	TextDrawBackgroundColor(ExportTD[5], -470965231);
	TextDrawFont(ExportTD[5], 1);
	TextDrawLetterSize(ExportTD[5], 0.210000, 1.000000);
	TextDrawColor(ExportTD[5], 150);
	TextDrawSetOutline(ExportTD[5], 1);
	TextDrawSetProportional(ExportTD[5], 1);
	TextDrawSetSelectable(ExportTD[5], 0);
/*
	EventWinTD[0]= TextDrawCreate(217.000000, 244.000000, "_");
	TextDrawBackgroundColor(EventWinTD[0], 132);
	TextDrawFont(EventWinTD[0], 1);
	TextDrawLetterSize(EventWinTD[0], 0.540000, 6.899999);
	TextDrawColor(EventWinTD[0], -1);
	TextDrawSetOutline(EventWinTD[0], 2);
	TextDrawSetProportional(EventWinTD[0], 1);
	TextDrawUseBox(EventWinTD[0], 1);
	TextDrawBoxColor(EventWinTD[0], 100);
	TextDrawTextSize(EventWinTD[0], 385.000000, 112.000000);

	EventWinTD[1] = TextDrawCreate(224.000000, 256.000000, "~g~Premium Points: +10~n~~y~Score: +1~n~~b~Money: +100000$");
	TextDrawBackgroundColor(EventWinTD[1], 255);
	TextDrawFont(EventWinTD[1], 2);
	TextDrawLetterSize(EventWinTD[1], 0.259999, 1.299999);
	TextDrawColor(EventWinTD[1], -1);
	TextDrawSetOutline(EventWinTD[1], 1);
	TextDrawSetProportional(EventWinTD[1], 1);

	EventWinTD[2] = TextDrawCreate(252.000000, 230.000000, "~r~E~g~v~b~e~y~n~p~t~w~ Won!");
	TextDrawBackgroundColor(EventWinTD[2], 132);
	TextDrawFont(EventWinTD[2], 1);
	TextDrawLetterSize(EventWinTD[2], 0.479999, 2.099999);
	TextDrawColor(EventWinTD[2], -1);
	TextDrawSetOutline(EventWinTD[2], 2);
	TextDrawSetProportional(EventWinTD[2], 1);
*/
	EventTD = TextDrawCreate(434.000000, 368.000000, "Event - ~w~An event has been started ~r~(/EVENT)~w~!");
	TextDrawBackgroundColor(EventTD, 50);
	TextDrawFont(EventTD, 1);
	TextDrawLetterSize(EventTD, 0.200000, 1.000000);
	TextDrawColor(EventTD, 463397119);
	TextDrawSetOutline(EventTD, 1);
	TextDrawSetProportional(EventTD, 1);
	TextDrawSetSelectable(EventTD, 0);

	PartyTD = TextDrawCreate(434.000000, 355.000000, "Party - ~w~The party has been started ~r~(/PARTY)~w~!");
	TextDrawBackgroundColor(PartyTD, 50);
	TextDrawFont(PartyTD, 1);
	TextDrawLetterSize(PartyTD, 0.200000, 1.000000);
	TextDrawColor(PartyTD, -530572289);
	TextDrawSetOutline(PartyTD, 1);
	TextDrawSetProportional(PartyTD, 1);
	TextDrawSetSelectable(PartyTD, 0);

	PartyTD2 = TextDrawCreate(434.000000, 368.000000, "Party - ~w~The party has been started ~r~(/PARTY)~w~!");
	TextDrawBackgroundColor(PartyTD2, 50);
	TextDrawFont(PartyTD2, 1);
	TextDrawLetterSize(PartyTD2, 0.200000, 1.000000);
	TextDrawColor(PartyTD2, -530572289);
	TextDrawSetOutline(PartyTD2, 1);
	TextDrawSetProportional(PartyTD2, 1);
	TextDrawSetSelectable(PartyTD2, 0);

    ShopTD[0] = TextDrawCreate(178.000000, 358.000000, "_");
	TextDrawBackgroundColor(ShopTD[0], -16777166);
	TextDrawFont(ShopTD[0], 2);
	TextDrawLetterSize(ShopTD[0], 0.750000, 0.900000);
	TextDrawColor(ShopTD[0], -1);
	TextDrawSetOutline(ShopTD[0], 1);
	TextDrawSetProportional(ShopTD[0], 1);
	TextDrawUseBox(ShopTD[0], 1);
	TextDrawBoxColor(ShopTD[0], 100);
	TextDrawTextSize(ShopTD[0], 471.000000, 29.000000);

	ShopTD[1] = TextDrawCreate(400.000000, 358.000000, "~l~Next~>~~>~");
	TextDrawBackgroundColor(ShopTD[1], 16711730);
	TextDrawFont(ShopTD[1], 2);
	TextDrawLetterSize(ShopTD[1], 0.470000, 0.899999);
	TextDrawColor(ShopTD[1], -1);
	TextDrawSetOutline(ShopTD[1], 1);
	TextDrawSetProportional(ShopTD[1], 1);
	TextDrawUseBox(ShopTD[1], 1);
	TextDrawBoxColor(ShopTD[1], 0);
	TextDrawTextSize(ShopTD[1], 462.000000, 300.000000);
	TextDrawSetSelectable(ShopTD[1], 1);

	ShopTD[2] = TextDrawCreate(150.000000, 367.000000, "-");
	TextDrawBackgroundColor(ShopTD[2], 255);
	TextDrawFont(ShopTD[2], 1);
	TextDrawLetterSize(ShopTD[2], 24.310016, 0.299999);
	TextDrawColor(ShopTD[2], -1);
	TextDrawSetOutline(ShopTD[2], 0);
	TextDrawSetProportional(ShopTD[2], 1);
	TextDrawSetShadow(ShopTD[2], 1);

	ShopTD[3] = TextDrawCreate(178.000000, 358.000000, "~<~~<~~l~Previous");
	TextDrawBackgroundColor(ShopTD[3], -16777116);
	TextDrawFont(ShopTD[3], 2);
	TextDrawLetterSize(ShopTD[3], 0.360000, 1.000000);
	TextDrawColor(ShopTD[3], -1);
	TextDrawSetOutline(ShopTD[3], 1);
	TextDrawSetProportional(ShopTD[3], 1);
	TextDrawUseBox(ShopTD[3], 1);
	TextDrawBoxColor(ShopTD[3], 0);
	TextDrawTextSize(ShopTD[3], 315.000000, 300.000000);
	TextDrawSetSelectable(ShopTD[3], 1);

	ShopTD[4] = TextDrawCreate(150.000000, 354.000000, "-");
	TextDrawBackgroundColor(ShopTD[4], 255);
	TextDrawFont(ShopTD[4], 1);
	TextDrawLetterSize(ShopTD[4], 24.310016, 0.299999);
	TextDrawColor(ShopTD[4], -1);
	TextDrawSetOutline(ShopTD[4], 0);
	TextDrawSetProportional(ShopTD[4], 1);
	TextDrawSetShadow(ShopTD[4], 1);

    ShopTD[5] = TextDrawCreate(271.000, 382.000, "LD_CHAT:thumbup");
    TextDrawFont(ShopTD[5], 4);
    TextDrawTextSize(ShopTD[5], 26.500, 23.500);
    TextDrawColor(ShopTD[5], -1);
	TextDrawSetSelectable(ShopTD[5], 1);

    ShopTD[6] = TextDrawCreate(319.000, 383.500, "LD_CHAT:thumbdn");
    TextDrawFont(ShopTD[6], 4);
    TextDrawTextSize(ShopTD[6], 28.000, 22.000);
    TextDrawColor(ShopTD[6], -1);
	TextDrawSetSelectable(ShopTD[6], 1);

	PPEarned = TextDrawCreate(4.000000, 327.000000, "~g~~h~~h~~h~Premium Points earned!");
	TextDrawBackgroundColor(PPEarned, 150);
	TextDrawFont(PPEarned, 3);
	TextDrawLetterSize(PPEarned, 0.300000, 1.100000);
	TextDrawColor(PPEarned, -1);
	TextDrawSetOutline(PPEarned, 2);
	TextDrawSetProportional(PPEarned, 1);


//=====
    GunBattleTD[0] = TextDrawCreate(247.000000, 379.000000, "_");
    TextDrawBackgroundColor(GunBattleTD[0], 255);
    TextDrawFont(GunBattleTD[0], 0);
    TextDrawLetterSize(GunBattleTD[0], -0.249999, 0.600000);
    TextDrawColor(GunBattleTD[0], -1);
    TextDrawSetOutline(GunBattleTD[0], 0);
    TextDrawSetProportional(GunBattleTD[0], 1);
    TextDrawSetShadow(GunBattleTD[0], 1);
    TextDrawUseBox(GunBattleTD[0], 1);
    TextDrawBoxColor(GunBattleTD[0], 100);
    TextDrawTextSize(GunBattleTD[0], 370.000000, -41.000000);

    GunBattleTD[1] = TextDrawCreate(237.000000, 375.000000, "~<~");
    TextDrawBackgroundColor(GunBattleTD[1], 255);
    TextDrawFont(GunBattleTD[1], 0);
    TextDrawLetterSize(GunBattleTD[1], 0.689999, 1.299999);
    TextDrawColor(GunBattleTD[1], -1);
    TextDrawSetOutline(GunBattleTD[1], 0);
    TextDrawSetProportional(GunBattleTD[1], 1);
    TextDrawSetShadow(GunBattleTD[1], 1);

    GunBattleTD[2] = TextDrawCreate(247.000000, 379.000000, "_");
    TextDrawBackgroundColor(GunBattleTD[2], 255);
    TextDrawFont(GunBattleTD[2], 0);
    TextDrawLetterSize(GunBattleTD[2], 0.550000, -0.199999);
    TextDrawColor(GunBattleTD[2], -1);
    TextDrawSetOutline(GunBattleTD[2], 0);
    TextDrawSetProportional(GunBattleTD[2], 1);
    TextDrawSetShadow(GunBattleTD[2], 1);
    TextDrawUseBox(GunBattleTD[2], 1);
    TextDrawBoxColor(GunBattleTD[2], 100);
    TextDrawTextSize(GunBattleTD[2], 370.000000, -49.000000);

    GunBattleTD[3] = TextDrawCreate(369.000000, 375.000000, "~>~");
    TextDrawBackgroundColor(GunBattleTD[3], 255);
    TextDrawFont(GunBattleTD[3], 0);
    TextDrawLetterSize(GunBattleTD[3], 0.689999, 1.299999);
    TextDrawColor(GunBattleTD[3], -1);
    TextDrawSetOutline(GunBattleTD[3], 0);
    TextDrawSetProportional(GunBattleTD[3], 1);
    TextDrawSetShadow(GunBattleTD[3], 1);

    GunBattleTD[4] = TextDrawCreate(248.500, 355.000, "ld_grav:thorn");
    TextDrawFont(GunBattleTD[4] , 4);
    TextDrawTextSize(GunBattleTD[4] , 121.000, 26.500);
    TextDrawColor(GunBattleTD[4] , -1);

    GunBattleTD[5] = TextDrawCreate(242.500, 385.000, "ld_grav:thorn");
    TextDrawFont(GunBattleTD[5] , 4);
    TextDrawTextSize(GunBattleTD[5] , 131.500, 28.000);
    TextDrawColor(GunBattleTD[5] , -1);
//==========
	mTD[0] = TextDrawCreate(470.000000, 312.000000, "~r~] ~w~Achievement Unlocked ~r~]");
	TextDrawBackgroundColor(mTD[0], -16777196);
	TextDrawFont(mTD[0], 2);
	TextDrawLetterSize(mTD[0], 0.249999, 1.399999);
	TextDrawColor(mTD[0], -1);
	TextDrawSetOutline(mTD[0], 1);
	TextDrawSetProportional(mTD[0], 1);
	TextDrawSetSelectable(mTD[0], 0);

	mTD[1] = TextDrawCreate(463.000000, 310.000000, "_");
	TextDrawBackgroundColor(mTD[1], -16777196);
	TextDrawFont(mTD[1], 3);
	TextDrawLetterSize(mTD[1], 0.359999, 6.400000);
	TextDrawColor(mTD[1], -1);
	TextDrawSetOutline(mTD[1], 1);
	TextDrawSetProportional(mTD[1], 1);
	TextDrawUseBox(mTD[1], 1);
	TextDrawBoxColor(mTD[1], 50);
	TextDrawTextSize(mTD[1], 625.000000, 62.000000);
	TextDrawSetSelectable(mTD[1], 0);

	mTD[2] = TextDrawCreate(544.000000, 343.000000, "_");
	TextDrawAlignment(mTD[2], 2);
	TextDrawBackgroundColor(mTD[2], -236);
	TextDrawFont(mTD[2], 1);
	TextDrawLetterSize(mTD[2], 0.579999, 2.699999);
	TextDrawColor(mTD[2], 200);
	TextDrawSetOutline(mTD[2], 1);
	TextDrawSetProportional(mTD[2], 1);
	TextDrawUseBox(mTD[2], 1);
	TextDrawBoxColor(mTD[2], 100);
	TextDrawTextSize(mTD[2], 10.000000, -171.000000);
	TextDrawSetSelectable(mTD[2], 0);

	mTD[3] = TextDrawCreate(544.000000, 310.000000, "_");
	TextDrawAlignment(mTD[3], 2);
	TextDrawBackgroundColor(mTD[3], -236);
	TextDrawFont(mTD[3], 1);
	TextDrawLetterSize(mTD[3], 0.579999, -0.200000);
	TextDrawColor(mTD[3], 200);
	TextDrawSetOutline(mTD[3], 1);
	TextDrawSetProportional(mTD[3], 1);
	TextDrawUseBox(mTD[3], 1);
	TextDrawBoxColor(mTD[3], 200);
	TextDrawTextSize(mTD[3], 10.000000, -171.000000);
	TextDrawSetSelectable(mTD[3], 0);

	AN2 = TextDrawCreate(229.000000, 117.000000, "ld_spac:ex1");
	TextDrawBackgroundColor(AN2, 255);
	TextDrawFont(AN2, 4);
	TextDrawLetterSize(AN2, 0.500000, 1.000000);
	TextDrawColor(AN2, -1);
	TextDrawSetOutline(AN2, 0);
	TextDrawSetProportional(AN2, 1);
	TextDrawSetShadow(AN2, 1);
	TextDrawUseBox(AN2, 1);
	TextDrawBoxColor(AN2, 255);
	TextDrawTextSize(AN2, 157.000000, 157.000000);


	RaceTD[0] = TextDrawCreate( 13.000000, 224.000000, "-");
	TextDrawBackgroundColor( RaceTD[0], -236);//150
	TextDrawFont( RaceTD[0], 1);
	TextDrawLetterSize( RaceTD[0], 5.599999, 0.500000);
	TextDrawColor( RaceTD[0], 255);//-1
	TextDrawSetOutline( RaceTD[0], 0);
	TextDrawSetProportional( RaceTD[0], 1);
	TextDrawSetShadow( RaceTD[0], 1);
	TextDrawSetSelectable( RaceTD[0], 0);

	RaceTD[1] = TextDrawCreate( 13.000000, 210.000000, "-");
	TextDrawBackgroundColor( RaceTD[1], -236);//150
	TextDrawFont( RaceTD[1], 1);
	TextDrawLetterSize( RaceTD[1], 5.599999, 0.500000);
	TextDrawColor( RaceTD[1], 255);//-1
	TextDrawSetOutline( RaceTD[1], 0);
	TextDrawSetProportional( RaceTD[1], 1);
	TextDrawSetShadow( RaceTD[1], 1);
	TextDrawSetSelectable( RaceTD[1], 0);

	RaceTD[2] = TextDrawCreate( 39.000000, 215.000000, "~l~Top 5");
	TextDrawBackgroundColor( RaceTD[2], -246);
	TextDrawFont( RaceTD[2], 1);
	TextDrawLetterSize( RaceTD[2], 0.270000, 1.099997);
	TextDrawColor( RaceTD[2], -7274241);
	TextDrawSetOutline( RaceTD[2], 1);
	TextDrawSetProportional( RaceTD[2], 1);
	TextDrawSetSelectable( RaceTD[2], 0);


	RaceTD[3] = TextDrawCreate( 35.000000, 230.000000, "-");
	TextDrawBackgroundColor( RaceTD[3], 150);
	TextDrawFont( RaceTD[3], 1);
	TextDrawLetterSize( RaceTD[3], 0.209999, 0.899900);
	TextDrawColor( RaceTD[3], 6495999);
	TextDrawSetOutline( RaceTD[3], 1);
	TextDrawSetProportional( RaceTD[3], 1);
	TextDrawSetSelectable( RaceTD[3], 0);

	RaceTD[4] = TextDrawCreate( 24.000000, 256.000000, "]");
	TextDrawBackgroundColor( RaceTD[4], 255);
	TextDrawFont( RaceTD[4], 2);
	TextDrawLetterSize( RaceTD[4], 0.230000, 1.000000);
	TextDrawColor( RaceTD[4], -2060123905);
	TextDrawSetOutline( RaceTD[4], 1);
	TextDrawSetProportional( RaceTD[4], 1);
	TextDrawSetSelectable( RaceTD[4], 0);

	RaceTD[5] = TextDrawCreate( 35.000000, 244.000000, "-");
	TextDrawBackgroundColor( RaceTD[5] , 150);
	TextDrawFont( RaceTD[5] , 1);
	TextDrawLetterSize( RaceTD[5] , 0.209999, 0.899900);
	TextDrawColor( RaceTD[5] , 6495999);
	TextDrawSetOutline( RaceTD[5] , 1);
	TextDrawSetProportional( RaceTD[5] , 1);
	TextDrawSetSelectable( RaceTD[5] , 0);

	RaceTD[6]  = TextDrawCreate( 36.000000, 257.000000, "-");
	TextDrawBackgroundColor( RaceTD[6] , 150);
	TextDrawFont( RaceTD[6] , 1);
	TextDrawLetterSize( RaceTD[6] , 0.209999, 0.899900);
	TextDrawColor( RaceTD[6] , 6495999);
	TextDrawSetOutline( RaceTD[6] , 1);
	TextDrawSetProportional( RaceTD[6] , 1);
	TextDrawSetSelectable( RaceTD[6] , 0);

	RaceTD[7]  = TextDrawCreate( 25.000000, 272.000000, "4. -");
	TextDrawBackgroundColor( RaceTD[7], 150);
	TextDrawFont( RaceTD[7], 1);
	TextDrawLetterSize( RaceTD[7], 0.209999, 0.899900);
	TextDrawColor( RaceTD[7], -1936945921);
	TextDrawSetOutline( RaceTD[7], 1);
	TextDrawSetProportional( RaceTD[7], 1);
	TextDrawSetSelectable( RaceTD[7], 0);

	RaceTD[8] = TextDrawCreate( 25.000000, 286.000000, "5. -");
	TextDrawBackgroundColor( RaceTD[8], 150);
	TextDrawFont( RaceTD[8], 1);
	TextDrawLetterSize( RaceTD[8], 0.209999, 0.899900);
	TextDrawColor( RaceTD[8], -1936945921);
	TextDrawSetOutline( RaceTD[8], 1);
	TextDrawSetProportional( RaceTD[8], 1);
	TextDrawSetSelectable( RaceTD[8], 0);


	RaceTD[9] = TextDrawCreate( 24.000000, 243.000000, "]");
	TextDrawBackgroundColor( RaceTD[9], 255);
	TextDrawFont( RaceTD[9], 2);
	TextDrawLetterSize( RaceTD[9], 0.230000, 1.000000);
	TextDrawColor( RaceTD[9], -2054846977);
	TextDrawSetOutline( RaceTD[9], 1);
	TextDrawSetProportional( RaceTD[9], 1);
	TextDrawSetSelectable( RaceTD[9], 0);

	RaceTD[10] = TextDrawCreate( 24.000000, 230.000000, "]");
	TextDrawBackgroundColor( RaceTD[10], 255);
	TextDrawFont( RaceTD[10], 2);
	TextDrawLetterSize( RaceTD[10], 0.230000, 1.000000);
	TextDrawColor( RaceTD[10], -609746689);
	TextDrawSetOutline( RaceTD[10], 1);
	TextDrawSetProportional( RaceTD[10], 1);
	TextDrawSetSelectable( RaceTD[10], 0);

	dayTD = TextDrawCreate(584.000000, 12.000000, "Saturday");
	TextDrawBackgroundColor(dayTD, 255);
	TextDrawFont(dayTD, 0);
	TextDrawLetterSize(dayTD, 0.350000, 1.299999);
	TextDrawColor(dayTD, -993737473);
	TextDrawAlignment(dayTD, 2);
	TextDrawSetOutline(dayTD, 1);
	TextDrawSetProportional(dayTD, 1);

/*	clock = TextDrawCreate(555.000000, 14.000000, "13:12");
	TextDrawBackgroundColor(clock, -236);
	TextDrawFont(clock, 3);
	TextDrawLetterSize(clock, 0.419999, 2.000000);
	TextDrawColor(clock, 255);
	TextDrawSetOutline(clock, 1);
	TextDrawSetProportional(clock, 1);*/

	clock = TextDrawCreate(563.000000, 26.000000, "00:00");
	TextDrawBackgroundColor(clock, -236);
	TextDrawFont(clock, 3);
	TextDrawLetterSize(clock, 0.430000, 1.700000);
	TextDrawColor(clock, 255);
	TextDrawSetOutline(clock, 1);
	TextDrawSetProportional(clock, 0);

	TdTimeLeftClock = TextDrawCreate(561.000000, 24.000000, "ld_grav:timer");
    //DEBUG_TextDrawsUsed ++;
	TextDrawBackgroundColor(TdTimeLeftClock, 255);
	TextDrawFont(TdTimeLeftClock, 4);
	TextDrawLetterSize(TdTimeLeftClock, 0.500000, 1.000000);
	TextDrawColor(TdTimeLeftClock, -1);
	TextDrawSetOutline(TdTimeLeftClock, 0);
	TextDrawSetProportional(TdTimeLeftClock, 1);
	TextDrawSetShadow(TdTimeLeftClock, 1);
	TextDrawUseBox(TdTimeLeftClock, 1);
	TextDrawBoxColor(TdTimeLeftClock, -1);
	TextDrawTextSize(TdTimeLeftClock, -17.000000, 19.000000);

 	DateTD = TextDrawCreate(547.000000, 56.000000, "2013/11/12");
	 /////546.000000, 31.000000, "~y~2012/12/15");
	TextDrawBackgroundColor(DateTD, 255);//-236);
	TextDrawFont(DateTD, 3);
	TextDrawLetterSize(DateTD, 0.320000, 0.800000);//0.430000, 1.700000);//0.340000, 1.399999);
	TextDrawColor(DateTD, -993737473);
	TextDrawSetOutline(DateTD, 1);
	TextDrawSetProportional(DateTD, 1);
    updatetime();

	//
//
	blackTD = TextDrawCreate(-20.000000, 2.000000, "|");
	TextDrawUseBox(blackTD, 1);
	TextDrawBoxColor(blackTD, 0x000000ff);
	TextDrawTextSize(blackTD, 660.000000, 22.000000);
	TextDrawAlignment(blackTD, 0);
	TextDrawBackgroundColor(blackTD, 0x000000ff);
	TextDrawFont(blackTD, 3);
	TextDrawLetterSize(blackTD, 1.000000, 52.200000);
	TextDrawColor(blackTD, 0x000000ff);
	TextDrawSetOutline(blackTD, 1);
	TextDrawSetProportional(blackTD, 1);
	TextDrawSetShadow(blackTD, 1);
//

	CSTimeTD = TextDrawCreate(560.000000, 331.000000, "~l~--:--");
	TextDrawBackgroundColor(CSTimeTD, -156);
	TextDrawFont(CSTimeTD, 3);
	TextDrawLetterSize(CSTimeTD, 0.420000, 0.799999);
	TextDrawColor(CSTimeTD, -1);
	TextDrawSetOutline(CSTimeTD, 1);
	TextDrawSetProportional(CSTimeTD, 1);

    /*CSwaiting = TextDrawCreate(15.000000, 307.000000, "~p~Counter Strike starts in ~y~-~w~ ~p~seconds ~n~ ~w~~n~ required players for start : ~y~2~n~~w~ current players: ~r~1");
    TextDrawBackgroundColor(CSwaiting, 20);//150);
    TextDrawFont(CSwaiting, 1);
    TextDrawLetterSize(CSwaiting, 0.189998, 0.949998);
    TextDrawColor(CSwaiting, -7864065);//-1);
    TextDrawSetOutline(CSwaiting, 1);
    TextDrawSetProportional(CSwaiting, 1);*/

	CSNameTD = TextDrawCreate(536.000000, 268.000000, "~r~Counter Strike");
	TextDrawAlignment(CSNameTD, 2);
	TextDrawBackgroundColor(CSNameTD, 255);
	TextDrawFont(CSNameTD, 0);
	TextDrawLetterSize(CSNameTD, 0.500000, 1.000000);
	TextDrawColor(CSNameTD, -1);
	TextDrawSetOutline(CSNameTD, 1);
	TextDrawSetProportional(CSNameTD, 1);
	TextDrawUseBox(CSNameTD, 1);
	TextDrawBoxColor(CSNameTD, 5270);
	TextDrawTextSize(CSNameTD, 2.000000, 150.000000);


/*
    DerbyWaiting = TextDrawCreate(15.000000, 307.000000, "~p~The demolition derby starts in ~y~-~w~ ~p~seconds ~n~ ~w~~n~ required players for start : ~y~3~n~~w~ current players: ~r~1");
    TextDrawBackgroundColor(DerbyWaiting, 20);//150);
    TextDrawFont(DerbyWaiting, 1);
    TextDrawLetterSize(DerbyWaiting, 0.189998, 0.949998);
    TextDrawColor(DerbyWaiting, -7864065);
    TextDrawSetOutline(DerbyWaiting, 1);
    TextDrawSetProportional(DerbyWaiting, 1);
*/
 /*   CTFwaiting = TextDrawCreate(15.000000, 307.000000, "-");
    TextDrawBackgroundColor(CTFwaiting, 150);
    TextDrawFont(CTFwaiting, 1);
    TextDrawLetterSize(CTFwaiting, 0.189998, 0.949998);
    TextDrawColor(CTFwaiting, -1);
    TextDrawSetOutline(CTFwaiting, 1);
    TextDrawSetProportional(CTFwaiting, 1);*/

/*    CTCwaiting = TextDrawCreate(15.000000, 307.000000, "~p~Capture The Car starts in ~y~-~w~ ~p~seconds ~n~ ~w~~n~ Required players for start: ~y~3~n~~w~ Current players: ~r~1");
    TextDrawBackgroundColor(CTCwaiting, 20);//150);
    TextDrawFont(CTCwaiting, 1);
    TextDrawLetterSize(CTCwaiting, 0.189998, 0.949998);
    TextDrawColor(CTCwaiting, -7864065);
    TextDrawSetOutline(CTCwaiting, 1);
    TextDrawSetProportional(CTCwaiting, 1);*/


    /*LMSwaiting = TextDrawCreate(15.000000, 307.000000, "-");
    TextDrawBackgroundColor(LMSwaiting, 150);
    TextDrawFont(LMSwaiting, 1);
    TextDrawLetterSize(LMSwaiting, 0.189998, 0.949998);
    TextDrawColor(LMSwaiting, -1);
    TextDrawSetOutline(LMSwaiting, 1);
    TextDrawSetProportional(LMSwaiting, 1);

    Fwaiting = TextDrawCreate(15.000000, 307.000000, "-");
    TextDrawBackgroundColor(Fwaiting, 150);
    TextDrawFont(Fwaiting, 1);
    TextDrawLetterSize(Fwaiting, 0.189998, 0.949998);
    TextDrawColor(Fwaiting, -1);
    TextDrawSetOutline(Fwaiting, 1);
    TextDrawSetProportional(Fwaiting, 1);

    Pwaiting = TextDrawCreate(15.000000, 307.000000, "-");
    TextDrawBackgroundColor(Pwaiting, 150);
    TextDrawFont(Pwaiting, 1);
    TextDrawLetterSize(Pwaiting, 0.189998, 0.949998);
    TextDrawColor(Pwaiting, -1);
    TextDrawSetOutline(Pwaiting, 1);
    TextDrawSetProportional(Pwaiting, 1);

    Hwaiting = TextDrawCreate(15.000000, 307.000000, "-");
    TextDrawBackgroundColor(Hwaiting, 150);
    TextDrawFont(Hwaiting, 1);
    TextDrawLetterSize(Hwaiting, 0.189998, 0.949998);
    TextDrawColor(Hwaiting, -1);
    TextDrawSetOutline(Hwaiting, 1);
    TextDrawSetProportional(Hwaiting, 1);

    Mwaiting = TextDrawCreate(15.000000, 307.000000, "-");
    TextDrawBackgroundColor(Mwaiting, 150);
    TextDrawFont(Mwaiting, 1);
    TextDrawLetterSize(Mwaiting, 0.189998, 0.949998);
    TextDrawColor(Mwaiting, -1);
    TextDrawSetOutline(Mwaiting, 1);
    TextDrawSetProportional(Mwaiting, 1);*/





    HayPickup= CreateDynamicPickup(19054, 1, -922.03, 653.65, 130.68,  14567);
    HayPickup2= CreateDynamicPickup(19054, 1, -378.6180, 551.2169, 979.9901,  14567);
    HayPickup3= CreateDynamicPickup(19054, 1, 265.8147, -1355.2556, 1050.6516,  14567);

	DrugPickups[0]=CreateDynamicPickup(1279, 2, 2473.0352, -1716.2133, 13.4987, 0, 0); // drug1
	DrugPickups[1]=CreateDynamicPickup(1279, 2, 2537.3828, -1662.6876, 15.1681, 0, 0); // drug2
	DrugPickups[2]=CreateDynamicPickup(1279, 2, 2278.4973, -1682.9658, 14.2015, 0, 0); // drug3
	DrugPickups[3]=CreateDynamicPickup(1279, 2, 2110.1951, -1589.4972, 13.5361, 0, 0); // drug4
	DrugPickups[4]=CreateDynamicPickup(1279, 2, 1009.4724, -1123.8472, 23.8995, 0, 0); // drug5
	DrugPickups[5]=CreateDynamicPickup(1279, 2, -2183.7659, 453.3354, 35.1719, 0, 0); // drug6
	DrugPickups[6]=CreateDynamicPickup(1279, 2, -2511.5691, 256.2197, 35.1719, 0, 0); // drugs 7
	DrugPickups[7]=CreateDynamicPickup(1279, 2, -2713.1580, -282.5570, 7.2070, 0, 0); // drugs 8
	DrugPickups[8]=CreateDynamicPickup(1279, 2, 1851.2395, 2845.3799, 10.8359, 0, 0); // drugs 9
	DrugPickups[9]=CreateDynamicPickup(1279, 2, 2215.6108, 1566.1886, 10.8203, 0, 0); // drugs 10
	DrugPickups[10]=CreateDynamicPickup(1279, 2, 2536.9568, 1503.2789, 10.8238, 0, 0); // drugs 11
	DrugPickups[11]=CreateDynamicPickup(1279, 2, -1557.7577, -2722.5139, 48.7435, 0, 0); // drugs 12
	DrugPickups[12]=CreateDynamicPickup(1279, 2, -1770.5338, 505.2526, 28.3493, 0, 0); // drugs 13
	DrugPickups[13]=CreateDynamicPickup(1279, 2, 2194.7834, 2064.9045, 10.8203, 0, 0); // drugs 14
	DrugPickups[14]=CreateDynamicPickup(1279, 2, 237.6210, -1763.5077, 4.5164, 0, 0); // drugs 15


//||============================================================================||
//||                      Mission                                                ||
//||                                                                            ||
//||============================================================================||
	MissionCP[0] = CreateDynamicCP(1225.7325, -1649.4072, 11.5785, 5.00, -1, -1, INVALID_PLAYER_ID);
    MissionMap[0]=CreateDynamicMapIcon(1225.7325, -1649.4072, 11.5785, 0, 0xE01B1BFF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);
    MissionCP[1] = CreateDynamicCP(1299.7740, -1250.8428, 12.3290, 4.00, -1, -1, INVALID_PLAYER_ID);
    MissionMap[1]=CreateDynamicMapIcon(1299.7740, -1250.8428, 13.3290,  0, 0xE01B1BFF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);
    MissionCP[2] = CreateDynamicCP(1034.5640, -1087.1833, 20.8281, 4.00, -1, -1, INVALID_PLAYER_ID);
	MissionMap[2]=CreateDynamicMapIcon(1034.5640, -1087.1833, 23.8281,  0, 0xE01B1BFF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);
	MissionCP[3] = CreateDynamicCP(1092.9360, -1472.1014, 13.7825, 4.00, -1, -1, INVALID_PLAYER_ID);
	MissionMap[3]=CreateDynamicMapIcon(1092.9360, -1472.1014, 15.7825,  0, 0xE01B1BFF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);
    MissionCP[4] = CreateDynamicCP(1167.9585, -1438.3928, 13.7981, 4.00, -1, -1, INVALID_PLAYER_ID);
	MissionMap[4]=CreateDynamicMapIcon(1167.9585, -1438.3928, 15.7981,  0, 0xE01B1BFF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);
	MissionMap[5]=CreateDynamicMapIcon(1137.2532, -1489.1219, 22.7591,  0, 0xE01B1BFF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);
    MissionCP[5] = CreateDynamicCP(1137.2532, -1489.1219, 20.7591, 4.00, -1, -1, INVALID_PLAYER_ID);
    MissionCP[6] = CreateDynamicCP(374.7510, -114.7761, 1001.4922, 5.00, -1, -1, INVALID_PLAYER_ID);
    MissionMap[6]=CreateDynamicMapIcon(374.7510, -114.7761, 1001.4922, 29, 0xE01B1BFF, -1 , 5, INVALID_PLAYER_ID, 20000.0000);
    MissionCP[7] = CreateDynamicCP(1909.9781, -1601.3190, 13.1449, 4.00, -1, -1, INVALID_PLAYER_ID);
    MissionMap[7]=CreateDynamicMapIcon(1909.9781, -1601.3190, 13.1449,  29, 0xE01B1BFF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);
    MissionCP[8] = CreateDynamicCP(192.7941, -1770.5031, 3.9061, 4.00, -1, -1, INVALID_PLAYER_ID);
    MissionMap[8]=CreateDynamicMapIcon(192.7941, -1770.5031, 3.9061,  29, 0xE01B1BFF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);
    MissionCP[9] = CreateDynamicCP(-373.3916, -1428.6659, 25.3243, 4.00, -1, -1, INVALID_PLAYER_ID);
    MissionMap[9]=CreateDynamicMapIcon(-373.3916, -1428.6659, 25.3243,  29, 0xE01B1BFF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);
    MissionCP[10] = CreateDynamicCP(-576.0505, -1033.5402, 23.4335, 4.00, -1, -1, INVALID_PLAYER_ID);
    MissionMap[10]=CreateDynamicMapIcon(-576.0505, -1033.5402, 23.4335,  29, 0xE01B1BFF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);
    MissionCP[11] = CreateDynamicCP(248.8889, -92.3965, 2.2764, 4.00, -1, -1, INVALID_PLAYER_ID);
    MissionMap[11]=CreateDynamicMapIcon(248.8889, -92.3965, 2.2764,  29, 0xE01B1BFF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);
    MissionCP[12] = CreateDynamicCP(-2234.2192, 251.6636, 35.3262, 3.00, -1, 0, INVALID_PLAYER_ID, 30.0000);
	MissionMap[12]=CreateDynamicMapIcon(-2234.2192, 251.6636, 35.3262,  0, 0xE01B1BFF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);
    MissionPickup[0]=CreateDynamicPickup(1210, 2, 2171.2922, 1602.2546, 999.9689, -1, -1, INVALID_PLAYER_ID);
    MissionCP[13] = CreateDynamicCP(2781.1394, -2426.0085, 13.6353, 5.00, -1, -1, INVALID_PLAYER_ID);
    MissionMap[13]=CreateDynamicMapIcon(2781.1394, -2426.0085, 13.6353,  51, 0xE01B1BFF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);
    MissionMap[14]=CreateDynamicMapIcon(2759.2412, -2405.7881, 13.6328,  51, 0xE01B1BFF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);
    MissionCP[14] = CreateDynamicCP(2759.2412, -2405.7881, 13.6328, 2.00, -1, -1, INVALID_PLAYER_ID);
    MissionCP[15] = CreateDynamicCP(2789.6614, -2425.6938, 13.6332, 2.00, -1, -1, INVALID_PLAYER_ID);
    MissionMap[15]=CreateDynamicMapIcon(2781.1394, -2426.0085, 13.6353,  51, 0xE01B1BFF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);
    MissionCP[16] = CreateDynamicCP(2759.2412, -2405.7881, 13.6328, 2.00, -1, -1, INVALID_PLAYER_ID);
    MissionMap[16]=CreateDynamicMapIcon(2789.5220, -2425.7068, 13.6332,  51, 0xE01B1BFF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);
    MissionCP[17] = CreateDynamicCP(2781.1394, -2426.0085, 13.6353, 2.00, -1, -1, INVALID_PLAYER_ID);
    MissionMap[17]=CreateDynamicMapIcon(2789.5220, -2425.7068, 13.6332,  51, 0xE01B1BFF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);
    MissionCP[18] = CreateDynamicCP(2759.2412, -2405.7881, 13.6328, 2.00, -1, -1, INVALID_PLAYER_ID);
    MissionMap[18]=CreateDynamicMapIcon(2794.9216, -2411.5171, 13.6319,  51, 0xE01B1BFF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);
    MissionCP[19] = CreateDynamicCP(2780.5015, -2409.4209, 13.6354, 2.00, -1, -1, INVALID_PLAYER_ID);
    MissionMap[19]=CreateDynamicMapIcon(2781.1394, -2426.0085, 13.6353,  51, 0xE01B1BFF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);
    MissionCP[20] = CreateDynamicCP(2759.2412, -2405.7881, 13.6328, 2.00, -1, -1, INVALID_PLAYER_ID);
    MissionMap[20]=CreateDynamicMapIcon(2789.4038, -2411.2837, 13.6333,  51, 0xE01B1BFF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);
    MissionMap[21]=CreateDynamicMapIcon(-2199.6155, -2350.5396, 30.6250,  51, 0xE01B1BFF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);
    MissionCP[21] = CreateDynamicCP(-2199.6155, -2350.5396, 30.6250, 2.00, -1, -1, INVALID_PLAYER_ID);
    MissionCP[22] = CreateDynamicCP(2174.5029, -2251.9077, 13.3036, 5.00, -1, -1, INVALID_PLAYER_ID);
    MissionMap[22]=CreateDynamicMapIcon(2174.5029, -2251.9077, 13.3036,  6, 0xE01B1BFF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);
    MissionPickup[1]=CreateDynamicPickup(GetWeaponModel(34), 2, 2168.0283, -2246.8306, 20.1587, -1, -1, INVALID_PLAYER_ID);
    MissionCP[23] = CreateDynamicCP(1853.0797, -1856.1777, 13.5278, 5.00, -1, -1, INVALID_PLAYER_ID);
    MissionMap[23]=CreateDynamicMapIcon(1853.0797, -1856.1777, 13.5278,  6, 0xE01B1BFF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);
    MissionMap[24]=CreateDynamicMapIcon(2809.6602, -1184.4684, 25.1537,  19, 0xFF8AF7FF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);
    MissionCP[24] = CreateDynamicCP(2809.6602, -1184.4684, 25.1537, 2.00, -1, -1, INVALID_PLAYER_ID);

 	MissionMap[25]=CreateDynamicMapIcon(857.3804, -1101.5587, 24.2969,  20, 0xE01B1BFF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);
    MissionCP[25] = CreateDynamicCP(857.3804, -1101.5587, 24.2969, 2.00, -1, -1, INVALID_PLAYER_ID);
    MissionMap[26]=CreateDynamicMapIcon(1151.8519, -2466.0100, 1.5854,  9, 0xE01B1BFF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);
    MissionCP[26] = CreateDynamicCP(1151.8519, -2466.0100, 1.5854, 40.00, -1, -1, INVALID_PLAYER_ID);
    MissionCP[27] = CreateDynamicCP(-1991.2980, 144.3681, 27.1121, 5.00, -1, -1, INVALID_PLAYER_ID);
    MissionMap[27]=CreateDynamicMapIcon(-1991.2980, 144.3681, 27.1121,  0, 0xE01B1BFF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);
    MissionMap[28]=CreateDynamicMapIcon(-2246.0042, 674.2546, 49.0107,  17, 0xE01B1BFF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);
    MissionCP[28] = CreateDynamicCP(-2246.0042, 674.2546, 49.0107, 2.00, -1, -1, INVALID_PLAYER_ID);

    MissionMap[29]=CreateDynamicMapIcon(-2243.3708, 785.4565, 49.0168,  17, 0xE01B1BFF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);
    MissionCP[29] = CreateDynamicCP(-2243.3708, 785.4565, 49.0168, 2.00, -1, -1, INVALID_PLAYER_ID);

    MissionMap[30]=CreateDynamicMapIcon(-2240.5789, 943.0732, 66.2202,  17, 0xE01B1BFF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);
    MissionCP[30] = CreateDynamicCP(-2240.5789, 943.0732, 66.2202, 2.00, -1, -1, INVALID_PLAYER_ID);

    MissionMap[31]=CreateDynamicMapIcon(-2242.4226, 961.8679, 66.2214,  17, 0xE01B1BFF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);
    MissionCP[31] = CreateDynamicCP(-2242.4226, 961.8679, 66.2214, 2.00, -1, -1, INVALID_PLAYER_ID);

    MissionMap[32]=CreateDynamicMapIcon(-2243.1553, 1070.0115, 80.9207,  17, 0xE01B1BFF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);
    MissionCP[32] = CreateDynamicCP(-2243.1553, 1070.0115, 80.9207, 2.00, -1, -1, INVALID_PLAYER_ID);

    MissionMap[33]=CreateDynamicMapIcon(-2369.8337, 1120.2548, 55.3027,  17, 0xE01B1BFF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);
    MissionCP[33] = CreateDynamicCP(-2369.8337, 1120.2548, 55.3027, 2.00, -1, -1, INVALID_PLAYER_ID);

    MissionMap[34]=CreateDynamicMapIcon(-2424.2900, 1138.3264, 55.2889,  17, 0xE01B1BFF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);
    MissionCP[34] = CreateDynamicCP(-2424.2900, 1138.3264, 55.2889, 2.00, -1, -1, INVALID_PLAYER_ID);

    MissionMap[35]=CreateDynamicMapIcon(-2505.7996, 1140.5735, 55.2990,  17, 0xE01B1BFF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);
    MissionCP[35] = CreateDynamicCP(-2505.7996, 1140.5735, 55.2990, 2.00, -1, -1, INVALID_PLAYER_ID);

    MissionMap[36]=CreateDynamicMapIcon(-2550.0696, 1143.9493, 55.3000,  17, 0xE01B1BFF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);
    MissionCP[36] = CreateDynamicCP(-2550.0696, 1143.9493, 55.3000, 2.00, -1, -1, INVALID_PLAYER_ID);

    MissionMap[37]=CreateDynamicMapIcon(-2478.4683, 2440.6370, 15.6566,  17, 0xE01B1BFF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);
    MissionCP[37] = CreateDynamicCP(-2478.4683, 2440.6370, 15.6566, 2.00, -1, -1, INVALID_PLAYER_ID);

    MissionMap[38]=CreateDynamicMapIcon(-2425.2185, 2447.0854, 12.8161,  17, 0xE01B1BFF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);
    MissionCP[38] = CreateDynamicCP(-2425.2185, 2447.0854, 12.8161, 2.00, -1, -1, INVALID_PLAYER_ID);

    MissionMap[39]=CreateDynamicMapIcon(-2382.5317, 2439.2659, 8.9765,  17, 0xE01B1BFF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);
    MissionCP[39] = CreateDynamicCP(-2382.5317, 2439.2659, 8.9765, 2.00, -1, -1, INVALID_PLAYER_ID);

    MissionMap[40]=CreateDynamicMapIcon(-2353.1848, 2417.6909, 6.6075,  17, 0xE01B1BFF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);
    MissionCP[40] = CreateDynamicCP(-2353.1848, 2417.6909, 6.6075, 2.00, -1, -1, INVALID_PLAYER_ID);

    MissionMap[41]=CreateDynamicMapIcon(-1936.2178, 2381.7273, 49.0686,  17, 0xE01B1BFF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);
    MissionCP[41] = CreateDynamicCP(-1936.2178, 2381.7273, 49.0686, 2.00, -1, -1, INVALID_PLAYER_ID);

    MissionMap[42]=CreateDynamicMapIcon(-1805.3906, 2041.9299, 8.6260,  17, 0xE01B1BFF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);
    MissionCP[42] = CreateDynamicCP(-1805.3906, 2041.9299, 8.6260, 2.00, -1, -1, INVALID_PLAYER_ID);

    MissionMap[43]=CreateDynamicMapIcon(-1043.0852, 1553.2631, 32.9263,  17, 0xE01B1BFF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);
    MissionCP[43] = CreateDynamicCP(-1043.0852, 1553.2631, 32.9263, 2.00, -1, -1, INVALID_PLAYER_ID);

    MissionMap[44]=CreateDynamicMapIcon(-833.4534, 1485.2863, 17.5936,  17, 0xE01B1BFF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);
    MissionCP[44] = CreateDynamicCP(-833.4534, 1485.2863, 17.5936, 2.00, -1, -1, INVALID_PLAYER_ID);

    MissionMap[45]=CreateDynamicMapIcon(-794.2156, 1485.7218, 21.8497,  17, 0xE01B1BFF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);
    MissionCP[45] = CreateDynamicCP(-794.2156, 1485.7218, 21.8497, 2.00, -1, -1, INVALID_PLAYER_ID);

    MissionMap[46]=CreateDynamicMapIcon(704.7344, 286.2747, 20.2882,  17, 0xE01B1BFF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);
    MissionCP[46] = CreateDynamicCP(704.7344, 286.2747, 20.2882, 2.00, -1, -1, INVALID_PLAYER_ID);

    MissionMap[47]=CreateDynamicMapIcon(751.1072, 305.6305, 19.8061,  17, 0xE01B1BFF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);
    MissionCP[47] = CreateDynamicCP(751.1072, 305.6305, 19.8061, 2.00, -1, -1, INVALID_PLAYER_ID);

    MissionMap[48]=CreateDynamicMapIcon(1902.7585, 766.2395, 10.3928,  17, 0xE01B1BFF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);
    MissionCP[48] = CreateDynamicCP(1902.7585, 766.2395, 10.3928, 2.00, -1, -1, INVALID_PLAYER_ID);

    MissionMap[49]=CreateDynamicMapIcon(2008.4037, 760.8824, 10.3932,  17, 0xE01B1BFF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);
    MissionCP[49] = CreateDynamicCP(2008.4037, 760.8824, 10.3932, 2.00, -1, -1, INVALID_PLAYER_ID);

    MissionMap[50]=CreateDynamicMapIcon(2084.5132, 745.7196, 10.3853,  17, 0xE01B1BFF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);
    MissionCP[50] = CreateDynamicCP(2084.5132, 745.7196, 10.3853, 2.00, -1, -1, INVALID_PLAYER_ID);

    MissionMap[51]=CreateDynamicMapIcon(2800.3069, -1087.3204, 30.2901,  17, 0xE01B1BFF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);
    MissionCP[51] = CreateDynamicCP(2800.3069, -1087.3204, 30.2901, 2.00, -1, -1, INVALID_PLAYER_ID);

    MissionMap[52]=CreateDynamicMapIcon(2808.0615, -1177.8784, 24.9394,  17, 0xE01B1BFF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);
    MissionCP[52] = CreateDynamicCP(2808.0615, -1177.8784, 24.9394, 2.00, -1, -1, INVALID_PLAYER_ID);

    MissionMap[53]=CreateDynamicMapIcon(2853.7124, -1329.9141, 10.6359,  17, 0xE01B1BFF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);
    MissionCP[53] = CreateDynamicCP(2853.7124, -1329.9141, 10.6359, 2.00, -1, -1, INVALID_PLAYER_ID);

    MissionMap[54]=CreateDynamicMapIcon(2866.8203, -1464.4869, 10.5192,  17, 0xE01B1BFF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);
    MissionCP[54] = CreateDynamicCP(2866.8203, -1464.4869, 10.5192, 2.00, -1, -1, INVALID_PLAYER_ID);

    MissionMap[55]=CreateDynamicMapIcon(2486.5637, -1649.7869, 13.0536,  17, 0xE01B1BFF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);
    MissionCP[55] = CreateDynamicCP(2486.5637, -1649.7869, 13.0536, 2.00, -1, -1, INVALID_PLAYER_ID);

    MissionMap[56]=CreateDynamicMapIcon(2496.4561, -1685.4042, 13.0431,  17, 0xE01B1BFF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);
    MissionCP[56] = CreateDynamicCP(2496.4561, -1685.4042, 13.0431, 2.00, -1, -1, INVALID_PLAYER_ID);

    MissionMap[57]=CreateDynamicMapIcon(-2666.9436, 285.3860, 3.7516,  20, 0xE01B1BFF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);
    MissionCP[57] = CreateDynamicCP(-2666.9436, 285.3860, 3.7516, 10.00, -1, -1, INVALID_PLAYER_ID);

    MissionCP[58] = CreateDynamicCP(-2024.6296, 67.3418, 28.4411, 5.00, -1, -1, INVALID_PLAYER_ID);
    MissionMap[58]=CreateDynamicMapIcon(-2024.6296, 67.3418, 28.4411,  24, 0xE01B1BFF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);

    MissionMap[59]=CreateDynamicMapIcon(-1530.7177, 366.0592, 7.1875,  37, 0xE01B1BFF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);
    MissionCP[59] = CreateDynamicCP(-1530.7177, 366.0592, 7.1875, 2.00, -1, -1, INVALID_PLAYER_ID);

    MissionPickup[2]=CreateDynamicPickup(1550, 2, 365.5442, -8.0937, 1001.8516, -1, -1, INVALID_PLAYER_ID);

    MissionCP[60] = CreateDynamicCP(1226.4417, -810.7274, 1083.4688, 5.00, -1, 5, INVALID_PLAYER_ID);
    MissionMap[60]=CreateDynamicMapIcon(1226.4417, -810.7274, 1083.4688,  0, 0xE01B1BFF, -1 , 5, INVALID_PLAYER_ID, 20000.0000);

    MissionMap[61]=CreateDynamicMapIcon(2781.5352, -2426.7866, 13.1719,  0, 0xE01B1BFF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);
    MissionCP[61] = CreateDynamicCP(2781.5352, -2426.7866, 13.1719, 2.00, -1, -1, INVALID_PLAYER_ID);


    MissionCP[62] = CreateDynamicCP(1226.4417, -810.7274, 1083.4688, 5.00, -1, 5, INVALID_PLAYER_ID);
	MissionMap[62]=CreateDynamicMapIcon(1226.4417, -810.7274, 1083.4688,  0, 0xE01B1BFF, -1 , 5, INVALID_PLAYER_ID, 20000.0000);

    MissionCP[63] = CreateDynamicCP(-1481.0503, 689.3259, 0.3024, 3.00, -1, 0, INVALID_PLAYER_ID, 30.0000);
    MissionMap[63]=CreateDynamicMapIcon(-1481.0503, 689.3259, 0.3024,  42, 0xE01B1BFF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);

    MissionMap[64]=CreateDynamicMapIcon(-2684.2429, 1912.9115, -0.4674,  42, 0xE01B1BFF, -1 , 0, INVALID_PLAYER_ID, 20000.0000);
    MissionCP[64] = CreateDynamicCP(-2684.2429, 1912.9115, -0.4674, 5.00, -1, -1, INVALID_PLAYER_ID);

    MissionPickup[3]=CreateDynamicPickup(2894 , 2, 1227.4940, -810.6648, 1083.4688, -1, 5, INVALID_PLAYER_ID);

    MissionPickup[4]=CreateDynamicPickup(1550 , 2, -2684.2429, 1912.9115, -38.2204, -1, 0, INVALID_PLAYER_ID);

    for(new x=0; x<65; x++) Streamer_SetIntData(STREAMER_TYPE_MAP_ICON , MissionMap[x], E_STREAMER_STYLE, 1);
	falloutarea=CreateDynamicSphere(97.05, 112.46, 537.40, 50.0);

//========================Speed Records=========================================
	for(new d=0; d<20; d++) SpeedRecords[d]=0;
	SpeedRecordArea[0] = CreateDynamicSphere(-2003.3448, 439.3219, 34.7427, 8.0, 0, 0); // speed record
	SpeedRecordArea[1] = CreateDynamicSphere(-2443.6321, 708.3873, 34.7429, 8.0, 0, 0); // speed record 2
	SpeedRecordArea[2] = CreateDynamicSphere(-2808.9578, 41.5068, 6.7583, 8.0, 0, 0); // speed record 3
	SpeedRecordArea[3] = CreateDynamicSphere(-2674.1938, 1758.6038, 67.8115, 8.0, 0, 0); // speed record 4
	SpeedRecordArea[4] = CreateDynamicSphere(-2100.1970, 1055.5787, 55.3084, 8.0, 0, 0); // speed record 5
	SpeedRecordArea[5] = CreateDynamicSphere(-1584.6178, 1040.7509, 6.7664, 8.0, 0, 0); // speed record 6
	SpeedRecordArea[6] = CreateDynamicSphere(2048.8760, 1066.3647, 10.3989, 8.0, 0, 0); // speed record 7
	SpeedRecordArea[7] = CreateDynamicSphere(2227.9011, 2405.4534, 10.4435, 8.0, 0, 0); // speed record 8
	SpeedRecordArea[8] = CreateDynamicSphere(2502.2981, 2589.8789, 4.5902, 8.0, 0, 0); // speed record 9
	SpeedRecordArea[9] = CreateDynamicSphere(2708.0193, 1628.0146, 6.4652, 8.0, 0, 0); // speed record 10
	SpeedRecordArea[10] = CreateDynamicSphere(1492.5020, 851.9732, 6.5396, 8.0, 0, 0); // speed record 11
	SpeedRecordArea[11] = CreateDynamicSphere(-54.9690, 2504.9937, 16.2115, 8.0, 0, 0); // speed record 12
	SpeedRecordArea[12] = CreateDynamicSphere(2331.4951, -1658.9969, 13.4363, 8.0, 0, 0); // speed record 13
	SpeedRecordArea[13] = CreateDynamicSphere(1849.0573, -1406.7632, 13.1177, 8.0, 0, 0); // speed record 14
	SpeedRecordArea[14] = CreateDynamicSphere(828.1553, -1323.9305, 13.1189, 8.0, 0, 0); // speed record 15
	SpeedRecordArea[15] = CreateDynamicSphere(936.2601, -1790.2744, 13.3803, 8.0, 0, 0); // speed record 16
	SpeedRecordArea[16] = CreateDynamicSphere(329.7209, -1396.9222, 13.8642, 8.0, 0, 0); // speed record 17
	SpeedRecordArea[17] = CreateDynamicSphere(2894.6829, -745.1899, 10.5630, 8.0, 0, 0); // speed record 18
	SpeedRecordArea[18] = CreateDynamicSphere(-1707.7693, -2643.5627, 47.6104, 8.0, 0, 0); // speed record 19
	SpeedRecordArea[19] = CreateDynamicSphere(2152.7434, -667.9346, 52.4650, 8.0, 0, 0); // record 20

	CreateDynamicMapIcon(-2003.3448, 439.3219, 34.7427, 56, 0, 0, 0, -1, 500.0); // speed record
	CreateDynamicMapIcon(-2443.6321, 708.3873, 34.7429, 56, 0, 0, 0, -1, 500.0); // speed record 2
	CreateDynamicMapIcon(-2808.9578, 41.5068, 6.7583, 56, 0, 0, 0, -1, 500.0); // speed record 3
	CreateDynamicMapIcon(-2674.1938, 1758.6038, 67.8115, 56, 0, 0, 0, -1, 500.0); // speed record 4
	CreateDynamicMapIcon(-2100.1970, 1055.5787, 55.3084, 56, 0, 0, 0, -1, 500.0); // speed record 5
	CreateDynamicMapIcon(-1584.6178, 1040.7509, 6.7664, 56, 0, 0, 0, -1, 500.0); // speed record 6
	CreateDynamicMapIcon(2048.8760, 1066.3647, 10.3989, 56, 0, 0, 0, -1, 500.0); // speed record 7
	CreateDynamicMapIcon(2227.9011, 2405.4534, 10.4435, 56, 0, 0, 0, -1, 500.0); // speed record 8
	CreateDynamicMapIcon(2502.2981, 2589.8789, 4.5902, 56, 0, 0, 0, -1, 500.0); // speed record 9
	CreateDynamicMapIcon(2708.0193, 1625.0146, 6.4652, 56, 0, 0, 0, -1, 500.0); // speed record 10
	CreateDynamicMapIcon(1492.5020, 851.9732, 6.5396, 56, 0, 0, 0, -1, 500.0); // speed record 11
	CreateDynamicMapIcon(-54.9690, 2504.9937, 16.2115, 56, 0, 0, 0, -1, 500.0); // speed record 12
	CreateDynamicMapIcon(2331.4951, -1658.9969, 13.4363, 56, 0, 0, 0, -1, 500.0); // speed record 13
	CreateDynamicMapIcon(1849.0573, -1406.7632, 13.1177, 56, 0, 0, 0, -1, 500.0); // speed record 14
	CreateDynamicMapIcon(828.1553, -1323.9305, 13.1189, 56, 0, 0, 0, -1, 500.0); // speed record 15
	CreateDynamicMapIcon(936.2601, -1790.2744, 13.3803, 56, 0, 0, 0, -1, 500.0); // speed record 16
	CreateDynamicMapIcon(329.7209, -1396.9222, 13.8642, 56, 0, 0, 0, -1, 500.0); // speed record 17
	CreateDynamicMapIcon(2894.6829, -745.1899, 10.5630, 56, 0, 0, 0, -1, 500.0); // speed record 18
	CreateDynamicMapIcon(-1707.7693, -2643.5627, 47.6104, 56, 0, 0, 0, -1, 500.0); // speed record 19
	CreateDynamicMapIcon(2152.7434, -667.9346, 52.4650, 56, 0, 0, 0, -1, 500.0); // record 20

//||============================================================================||
//||                      CP AND MAPICONS                                            ||
//||                                                                            ||
//||============================================================================||
	CreateDynamicMapIcon(-1896.3311, 487.1771, 35.1719, 52, 0 , 0);
	CreateDynamicMapIcon(1832.1588, -1843.1906, 13.5781, 52, 0 , 0);
	CreateDynamicMapIcon(-828.0229, 1503.8195, 19.8096, 52, 0 , 0);
	CreateDynamicMapIcon(2303.4297, -16.1025, 26.4844, 52, 0 , 0);
	CreateDynamicMapIcon(1464.7112, -1010.6835, 26.8438, 52, 0 , 0);//
	CreateDynamicMapIcon(1315.5110, -900.2023, 39.5781, 52, 0 , 0);
	CreateDynamicMapIcon(2415.0425, 1123.8634, 10.8203, 52, 0 , 0);
	CreateDynamicMapIcon(2546.6992, 1969.9658, 10.8203, 52, 0 , 0);
	CreateDynamicMapIcon(1352.2863, -1756.3342, 13.5078, 52, 0 , 0);

	//powerupicons
	CreateDynamicMapIcon(-2511.0571, 775.0422, 35.1719, 48, 0, 0);//doublescore
	CreateDynamicMapIcon(2062.4978, -1785.6956, 13.5469, 48, 0, 0);//superexport
	CreateDynamicMapIcon(-852.6091, 1877.5527, 22.9245, 48, 0, 0);//kangaroo
	CreateDynamicMapIcon(2089.0635, 2405.9089, 74.5786, 48, 0, 0);//supernitro
	CreateDynamicMapIcon(-2473.6848, 1549.7599, 33.2273, 48, 0, 0);//pro gangster
	//CreateDynamicMapIcon(2162.3809, -102.6472, 2.7500, 48, 0, 0);//Super Warrior
	//
	CreateDynamicMapIcon(2157.2334, 943.1591, 10.8203, 6, 0, 0); // ammulv_6
	CreateDynamicMapIcon(1364.1584, -1279.3348, 13.5469, 6, 0, 0); // ammuLS_6
	CreateDynamicMapIcon(2536.4832, 2083.5913, 10.8203, 6, 0, 0); // ammulv_6
	CreateDynamicMapIcon(2400.4468, -1979.1620, 13.5469, 6, 0, 0); // ammuLS_6
	CreateDynamicMapIcon(-2626.3345, 210.4435, 4.6050, 6, 0, 0); // ammuSF_6
	CreateDynamicMapIcon(413.4926, 2533.2761, 19.1484, 5, 0, 0); // aIR yard 5
	CreateDynamicMapIcon(2385.0938, 1025.9777, 10.8203, 27, 0, 0); // 63
	CreateDynamicMapIcon(-1935.6947, 232.1029, 34.1563, 27, 0, 0); // 63
	CreateDynamicMapIcon(1041.3644, -1030.2833, 32.0835, 27, 0, 0); // 63
	CreateDynamicMapIcon(2644.7786, -2038.3210, 13.5500, 27, 0, 0); // 63
	CreateDynamicMapIcon(-2714.9023, 217.5430, 4.3045, 27, 0, 0); // 63
//	CreateDynamicMapIcon(-2267.9067, -155.9572, 35.3203, 64, 0, 0); // 54

    //for(new i=0; i<MAX_PROPS; i++)//keep it, new players dont find props.. even old ones how can u find prop in whole sa ?
    //{
      //CreateDynamicMapIcon(pInfo[i][Pos][0], pInfo[i][Pos][1], pInfo[i][Pos][2], 25, 0, 0, -1, -1, 500.0);
	//}
	CreateDynamicMapIcon(-181.0569, 1034.6469, 19.7422, 52, 0 , 0);
	CreateDynamicMapIcon(2193.2302, 1991.0083, 12.2969, 52, 0 , 0);

    BankCP[0] = CreateDynamicCP(2310.4688, -8.3858, 26.7422, 1.50);
    BankCP[1] = CreateDynamicCP(-22.5886, -54.8727, 1003.5469, 1.50);
    BankCP[2] = CreateDynamicCP(362.8376, 173.8580, 1008.3828, 1.50);
    BankCP[3] = CreateDynamicCP(-9.8353, -177.6645, 1003.5469, 1.50);
    BankCP[4] = CreateDynamicCP(-24.5406, -89.4039, 1003.5469, 1.50, -1, 18);

    WeaponsCP = CreateDynamicCP(296.5395, -38.2739, 1001.515, 1.00);
    WeaponsCP2 = CreateDynamicCP(295.7359, -80.6865, 1001.5156, 1.00);
    WeaponsCP3 = CreateDynamicCP(290.2011, -109.5698, 1001.5156, 1.00);
    WeaponsCP4 = CreateDynamicCP(308.1619, -141.2549, 999.6016, 1.00);
    WeaponsCP5 = CreateDynamicCP(312.7883, -166.0069, 999.6010, 1.00);

//    CreateDynamic3DTextLabel("Spawn weapons", BLUE, -9.8353, -177.6645, 1003.5469, 40, 0);

    BankArea[0] = CreateDynamicSphere(-39.5450, -58.0015, 1003.5469, 100.0, -1, -1);
    BankArea[1] = CreateDynamicCube(313.6330, 140.2888, 1000.6495, 409.9212, 228.8393, 1045.2797, -1, -1);
    BankArea[2] = CreateDynamicCube(2300.0525, -21.0958, 24.4844, 2338.0918, 11.5200, 34.4700, -1, -1);
	JailArea = CreateDynamicSphere(-1087.1406, -979.2577, 129.2688, 100.0, -1, 14);

    CarDealerCP[2] = CreateDynamicCP(2163.7595, 1409.1143, 10.8203, 1.50, 0); //cars8
    CarDealerCP[5] = CreateDynamicCP(544.4975, -1286.2170, 17.2422, 1.50, 0); //cars5
    CarDealerCP[1] = CreateDynamicCP(208.4735, -246.5374, 1.9116, 1.50, 0); //cars6
	CarDealerCP[7] = CreateDynamicCP(342.0624, 2542.4861, 16.7785, 1.50, 0); // cars 8
    CarDealerCP[6] = CreateDynamicCP(1668.6501, 1813.7659, 10.8203, 1.50, 0); //cars3
    CarDealerCP[4] = CreateDynamicCP(-1950.3230, 264.5605, 41.0471, 1.50, 0); //cars7
    CarDealerCP[0] = CreateDynamicCP(-1661.4861, 1207.7412, 21.1563, 1.50, 0); //cars 4
    CarDealerCP[8] = CreateDynamicCP(-543.5459, 2593.7029, 55.2000, 2.50, 0); //cars9
    CarDealerCP[3] = CreateDynamicCP(2126.9949, -1142.2139, 25.0316, 1.50, 0); //cars 2

	//in
	BankPickup[0] = CreatePickup(1318, 1, -1896.3311, 487.1771, 35.1719, -1); // Sf Bank
//	BankPickup[1] = CreatePickup(1318, 1, 1481.1493, -1771.7620, 18.7958, -1); // ls Bank
	BankPickup[1] = CreatePickup(1318, 1, -828.0229, 1503.8195, 19.8096, -1); // lb bank
	BankPickup[2] = CreatePickup(1318, 1, 2303.4297, -16.1025, 26.4844, -1); //main bank
	//out
	BankPickup[3] = CreatePickup(1318, 1, 2305.1724, -16.1671, 26.7422, -1); //main
	BankPickup[4] = CreatePickup(1318, 1, 1464.7112, -1010.6835, 26.8438, -1); //main

	JailPickUp[0] = CreatePickup(1318, 1, 1754.3246, -1592.9796, 13.5327, -1); //main
	JailPickUp[1] = CreatePickup(1318, 1, -1174.5385, -995.4922, 129.2992, -1); //main

//    CreateDynamic3DTextLabel("Glasses", ORANGE, 212.8471, -107.9608, 1005.1328, 40, 0);
//    CreateDynamic3DTextLabel("Hats", BLUE, 200.6875, -98.5273, 1005.2578, 40, 0);

    Clothes[0] = CreateDynamicCP( 212.8471, -107.9608, 1005.1328, 3.00); //
    Clothes[1] = CreateDynamicCP( 200.6875, -98.5273, 1005.2578, 3.00); //
//    haircp =  CreateDynamicCP( 414.1391, -18.1970, 1001.8047, 2.00); //
//    Clothes[2] = CreateDynamicCP( 202.6318, -107.7604, 1005.1328, 3.00); //

    CreateDynamicMapIconEx(2163.7595, 1409.1143, 10.8203, 55, 0 , 0, 100.0, {0});
    CreateDynamicMapIconEx(208.4735, -246.5374, 1.9116, 55, 0 , 0, 100.0, {0});
    CreateDynamicMapIconEx(2823.7380, 2603.6523, 10.8203, 55, 0 , 0, 100.0, {0});
    CreateDynamicMapIconEx(544.4975, -1286.2170, 17.2422, 55, 0 , 0, 100.0, {0});
    CreateDynamicMapIconEx(-1950.3230, 264.5605, 41.0471, 55, 0 , 0, 100.0, {0});
    CreateDynamicMapIconEx(-1661.4861, 1207.7412, 21.1563, 55, 0 , 0, 100.0, {0});
    CreateDynamicMapIconEx(342.0624, 2542.4861, 16.7785, 55, 0 , 0, 100.0, {0});
    CreateDynamicMapIconEx(2126.9949, -1142.2139, 25.0316, 55, 0 , 0, 100.0, {0});
	CreateDynamicMapIconEx(-773.8442, 496.6687, 1376.5824, 55, 0 , 0, 100.0, {0});//
	CreateDynamicMapIconEx(-544.0250, 2593.6765, 53.5156, 55, 0 , 0, 100.0, {0});//cars9
	CreateDynamicMapIconEx(-1550.5074, 121.3519, 3.5547, 51, 0 , 0, 100.0, {0});
	CreateDynamicMapIconEx(2795.0864, -2542.4536, 13.6293, 51, 0 , 0, 100.0, {0});
	CreateDynamicMapIconEx(1694.8248, 696.7624, 10.8203, 51, 0 , 0, 100.0, {0});



//||============================================================================||
//||                      Other                                                ||
//||                                                                            ||
//||============================================================================||
//==============balloon
	Balloon = CreateDynamicObject(19338, -2289.7161, -1637.6492, 483.0000, 0.0000, 0.0000, 0.0000, 0);
    BalloonMoving=-1;
//==============Ship
    Ship1 = CreateObject(10793, -1604.04, 22.73, 35.57, 0.00, 0.00, 45.00);
    Ship2 = CreateObject(10794, -1550.83, 75.93, 7.00, 0.00, 0.00, 45.00);
    Ship3 = CreateObject(10795, -1552.314, 74.4206, 17.05, 0.00, 0.00, 45.00);
    AttachObjectToObject(Ship1, Ship2, -75.65, 0.0, 28.5, 0.0, 0.0, 0.0, 1);
    AttachObjectToObject(Ship2, Ship3, 2.8, 0, -10.0, 0.0, 0.0, 0.0, 1);
//=============Derby

    DerbyGate[0] = CreateDynamicObject(11102, -1461.79199219, 940.51226807, 1036.00000000, 0.00000000, 0.00000000, 252.00000000, 2);
    DerbyGate[1] = CreateDynamicObject(10671, -1443.11071777, 935.84283447, 1037.28759766, 0.00000000, 0.00000000, 260.00000000, 2);
    DerbyGate[2] = CreateDynamicObject(11102, -1423.55773926, 933.88006592, 1036.00000000, 0.00000000, 0.00000000, 267.99890137, 2);
    DerbyGate[3] = CreateDynamicObject(10671, -1361.99560547, 938.50000000, 1037.23083496, 0.00000000, 0.00000000, 269.99694824, 2);
    DerbyGate[4] = CreateDynamicObject(10671, -1350.04333496, 939.62182617, 1037.23083496, 0.00000000, 0.00000000, 281.99450684, 2);
    DerbyGate[5] = CreateDynamicObject(10671, -1337.94653320, 942.79498291, 1037.23083496, 0.00000000, 0.00000000, 287.99157715, 2);
    DerbyGate[6] = CreateDynamicObject(10671, -1484.53845215, 955.83947754, 1037.76428223, 0.00000000, 0.00000000, 233.99450684, 2);
    DerbyGate[7] = CreateDynamicObject(10671, -1494.19995117, 963.87017822, 1037.94458008, 0.00000000, 0.00000000, 225.99230957, 2);
    DerbyGate[8] = CreateDynamicObject(10671, -1502.45458984, 973.35998535, 1037.90490723, 0.00000000, 0.00000000, 215.98876953, 2);
    DerbyGate[9] = CreateDynamicObject(10671, -1325.87170410, 947.76000977, 1037.23083496, 0.00000000, 0.00000000, 293.99011230, 2);



//||============================================================================||
//||                      Timer And Vars                                        ||
//||                                                                            ||
//||============================================================================||
    EnableStuntBonusForAll(0);
	ExportCp[0] = CreateDynamicCP(-1576.4871, 96.2606, 3.2621, 15.0, 0);
	ExportCp[1] = CreateDynamicCP(2795.0864, -2542.4536, 13.6293, 15.0, 0);
	ExportCp[2] = CreateDynamicCP(1694.8248, 696.7624, 10.8203, 15.0, 0);

	Export(0);
#if defined USE_LOTTO
    SetTimer("LotoStart", 1000*4000, true);
#endif
#if defined USEDRIFT
    SetTimer("DriftTimer", 30, true);
#endif
    SetTimer("ReactionTest", 60*1000*10, true);
  	SetTimer("TimeUpdate", 60*1000, true);
  	SetTimer("Sumo_Drift_Cheat_Update", 1000, true);
    SetTimer("MoveRamps", 25000, 1);
  	LogoCount=0;
  	//sNameCount=0;
  	SetTimer("OnServerUpdate", 1002, true);
  	SetTimer("JennyMSG", 60*1000*3, true);

    LMS = 0;
	RaceStarted=0;
	SetTimer("SpeedOMeter_FPS_Sams", 311, true);
	SetTimer("SpamUpdate", 3511, true);

    ServerWeather = 2;
    UsePlayerPedAnims();
    CreateZones();
    CwWeaps[0]=26;
    CwWeaps[1]=0;
    CwWeaps[2]=0;

    DuelInfo[player1]=-1;
    DuelInfo[player2]=-1;

    DuelInfo[stat]=0;
    for(new x= 0;x<sizeof(DuelCoords);x++)
    {
     DuelCP[x]=CreateDynamicCP(DuelCoords[x][xpos][0], DuelCoords[x][xpos][1], DuelCoords[x][xpos][2], 3.00, 0);
     CreateDynamicMapIconEx(DuelCoords[x][xpos][0], DuelCoords[x][xpos][1], DuelCoords[x][xpos][2], 23, 0, 0, 100.0, {0}, {0});
    }
    GenerateRaceID2();

	ctfcp[0]=CreateDynamicCP(405.8049, 2507.7627, 16.2374, 5, 1777);
	ctfcp[1]=CreateDynamicCP(-1113.3037, -1623.0773, 76.3739, 5, 1777);
	ctfcp[2]=CreateDynamicCP(2225.2368, -1164.9199, 25.7266, 5, 1777);

	ctfcp[3]=CreateDynamicCP(-49.6786, 2497.1204, 16.3392, 5, 1777);
	ctfcp[4]=CreateDynamicCP(-843.6460, -1844.8003, 91.095, 5, 1777);
	ctfcp[5]=CreateDynamicCP(2264.9341, -1027.1709, 59.2856, 5, 1777);

#if defined USE_POOL

//Billard
	PoolBall[0] = CreateObject(3003, 510.11218261719, -84.40771484375, 998.86785888672, 0, 0, 0);
    PoolBall[1] = CreateObject(3100, 510.10882568359, -85.166389465332, 998.86749267578, 0, 0, 0);
    PoolBall[2] = CreateObject(3101, 510.14270019531, -85.232612609863, 998.86749267578, 0, 0, 0);
    PoolBall[3] = CreateObject(3102, 510.0676574707, -85.232200622559, 998.86749267578, 0, 0, 0);
    PoolBall[4] = CreateObject(3103, 510.18600463867, -85.295257568359, 998.86749267578, 0, 0, 0);
    PoolBall[5] = CreateObject(3104, 510.11242675781, -85.297294616699, 998.86749267578, 0, 0, 0);
    PoolBall[6] = CreateObject(3105, 510.03665161133, -85.299163818359, 998.86749267578, 0, 0, 0);
    PoolBall[7] = CreateObject(3002, 510.22308349609, -85.362342834473, 998.86749267578, 0, 0, 0);
    PoolBall[8] = CreateObject(2995, 510.14828491211, -85.365989685059, 998.86749267578, 0, 0, 0);
    PoolBall[9] = CreateObject(2996, 510.07455444336, -85.365234375, 998.86749267578, 0, 0, 0);
    PoolBall[10] = CreateObject(2998, 510.00054931641, -85.363563537598, 998.86749267578, 0, 0, 0);
    PoolBall[11] = CreateObject(2999, 510.25915527344, -85.431137084961, 998.86749267578, 0, 0, 0);
    PoolBall[12] = CreateObject(3000, 510.18399047852, -85.430549621582, 998.86749267578, 0, 0, 0);
    PoolBall[13] = CreateObject(3001, 510.10900878906, -85.43196105957, 998.86749267578, 0, 0, 0);
    PoolBall[14] = CreateObject(3106, 510.03570556641, -85.432624816895, 998.86749267578, 0, 0, 0);
    PoolBall[15] = CreateObject(2997, 509.96197509766, -85.427406311035, 998.86749267578, 0, 0, 0);

    for(new i; i < sizeof PoolBall; i++)
    {
        PHY_InitObject(PoolBall[i], 3003, _, _, PHY_MODE_2D); // Notice that I typed modelid 3003 because all the balls are equal.
        PHY_SetObjectFriction(PoolBall[i], 0.08);
        PHY_RollObject(PoolBall[i]);
        PHY_SetObjectWorld(PoolBall[i], 477);
	}

	PHY_SetWallWorld(PHY_CreateWall(509.627 - 0.038, -85.780, 510.598 + 0.038, -85.780), 477);
	PHY_SetWallWorld(PHY_CreateWall(510.598 + 0.038, -85.780, 510.598 + 0.038, -83.907), 477);
	PHY_SetWallWorld(PHY_CreateWall(510.598 + 0.038, -83.907, 509.627 - 0.038, -83.907), 477);
	PHY_SetWallWorld(PHY_CreateWall(509.627 - 0.038, -83.907, 509.627 - 0.038, -85.780), 477);

	PoolTD1 = TextDrawCreate(510.000000, 291.000000, "_");
	TextDrawBackgroundColor(PoolTD1, 255);
	TextDrawFont(PoolTD1, 1);
	TextDrawLetterSize(PoolTD1, 0.340000, 5.199999);
	TextDrawColor(PoolTD1, -1);
	TextDrawSetOutline(PoolTD1, 1);
	TextDrawSetProportional(PoolTD1, 1);
	TextDrawUseBox(PoolTD1, 1);
	TextDrawBoxColor(PoolTD1, 255);
	TextDrawTextSize(PoolTD1, 620.000000, 50.000000);
	TextDrawSetSelectable(PoolTD1, 0);

	PoolTD2 = TextDrawCreate(546.000000, 282.000000, "Pool");
	TextDrawBackgroundColor(PoolTD2, 150);
	TextDrawFont(PoolTD2, 3);
	TextDrawLetterSize(PoolTD2, 0.450000, 1.599999);
	TextDrawColor(PoolTD2, 464052479);
	TextDrawSetOutline(PoolTD2, 1);
	TextDrawSetProportional(PoolTD2, 1);
	TextDrawSetSelectable(PoolTD2, 0);

	PoolTD3 = TextDrawCreate(510.000000, 303.000000, "~y~Player - 0 ~n~~n~Vho - 1");
	TextDrawBackgroundColor(PoolTD3, -241);
	TextDrawFont(PoolTD3, 1);
	TextDrawLetterSize(PoolTD3, 0.180000, 1.000000);//0.290000, 1.000000);
	TextDrawColor(PoolTD3, -65281);
	TextDrawSetOutline(PoolTD3, 1);
	TextDrawSetProportional(PoolTD3, 1);
	TextDrawSetSelectable(PoolTD3, 0);
#endif
    //pmax=GetMaxPlayers()-Iter_Count(Bot);
    pmax=GetMaxPlayers()-4;
    return 1;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
stock GetPlayerIDFromName(const playername[], partofname=0)
{
    new i;
    new playername1[64];
    for (i=0;i<MAX_PLAYERS;i++)
    {
        if (IsPlayerConnected(i))
        {
            GetPlayerName(i, playername1, sizeof(playername1));
            if (strcmp(playername1, playername, true)==0)
            {
                return i;
            }
        }
    }
    new correctsigns_userid=-1;
    new tmpuname[128];
    new hasmultiple=-1;
    if(partofname)
    {
        for (i=0;i<MAX_PLAYERS;i++)
        {
            if (IsPlayerConnected(i))
            {
                GetPlayerName(i, tmpuname, sizeof(tmpuname));

                if(!strfind(tmpuname, playername1[partofname], true, 0))
                {
                    hasmultiple++;
                    correctsigns_userid=i;
                }
                if (hasmultiple>0)
                {
                    return -2;
                }
            }
        }
    }
    return correctsigns_userid;
}
stock ReturnNameWithoutClanTag(name[MAX_PLAYER_NAME])
{
	new CharsBeforeBracket1 = strfind(name, "[");
	if(CharsBeforeBracket1 != -1) //if '[' is found
	{
	    new CharsBeforeBracket2 = strfind(name, "]");
	    if(CharsBeforeBracket2 != -1) //if ']' is found
	    {
	        if(CharsBeforeBracket1 < CharsBeforeBracket2) //if '[' comes before ']'
	        {
	            strdel(name, CharsBeforeBracket1, CharsBeforeBracket2+1); //delete everything until the last bracket
	        }
	    }
	}
	return name;
}
stock GetName(playerid)
{
    new name[MAX_PLAYER_NAME];
    new name1[128];
	GetPlayerName(playerid, name, MAX_PLAYER_NAME);
	name1 = name;
    strdel(name1, 0, strlen(name1)-4);
	if(strcmp(name1, "_AFK") == 0)
	{
    	strdel(name, strlen(name)-4, strlen(name));
	}
	return name;
}
/*
stock HighlightNamesInString(string[1024])
{
	new name[MAX_PLAYER_NAME];
	new startpos = -9;

    for(new i; i<MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
			name = GetName(i);
			name = ReturnNameWithoutClanTag(name); //simply removes everything between brackets []

			while(startpos != -1)
			{
				startpos = strfind(string, name, true, startpos+9);

				if(startpos != -1)
				{
                  strins(string, "{C8FF77}", startpos, 8);
                  strins(string, "{FFFFFF}", startpos+strlen(name)+8, 8);
				}
			}
			startpos = -9;
	    }
	}
	return string;
}

stock HighlightNamesInString2(string[1024])
{
	new name[MAX_PLAYER_NAME];
	new startpos = -9;

	for(new i; i<MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i) && !GetPVarInt(i, "Hidden") && !GetPVarInt(i, "HideMeBitch"))
	    {
			name = GetName(i);
			name = ReturnNameWithoutClanTag(name); //simply removes everything between brackets []

			while(startpos != -1)
			{
				startpos = strfind(string, name, true, startpos+9);

				if(startpos != -1)
				{
                  strins(string, "{C8FF77}", startpos, 8);
                  strins(string, "{A8DBFF}", startpos+strlen(name)+8, 8);
				}
			}
			startpos = -9;
	    }
	}
	return string;
}*/
stock ShowHeadshotText(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(HideHeadShottRunning[playerid] == false)
		{
			TextDrawShowForPlayer(playerid, TdHeadShot);

			HideHeadShott[playerid] = SetTimerEx("HideHeadShot", 3000, 0, "i", playerid);
			HideHeadShottRunning[playerid] = true;
		}
		else
		{
		    KillTimer(HideHeadShott[playerid]);
		    HideHeadShott[playerid] = SetTimerEx("HideHeadShot", 3000, 0, "i", playerid);
		}
	}
}

forward HideHeadShot(playerid);
public HideHeadShot(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(HideHeadShottRunning[playerid] == true)
		{
			TextDrawHideForPlayer(playerid, TdHeadShot);
			HideHeadShottRunning[playerid] = false;
		}
	}
}

//==============================================================================
stock Float:GetPlayerPacketLoss(playerid) {

    new stats[401], stringstats[70];
    GetPlayerNetworkStats(playerid, stats, sizeof(stats));
    new len = strfind(stats, "Packetloss: ");
    new Float:packetloss = 0.0;
    if(len != -1) {
        strmid(stringstats, stats, len, strlen(stats));
        new len2 = strfind(stringstats, "%");
        if(len != -1) {
            strdel(stats, 0, strlen(stats));
            strmid(stats, stringstats, len2-3, len2);
            packetloss = floatstr(stats);
            }
    }
    return packetloss;
}
/*
stock GetName(playerid)
{
    new name[MAX_PLAYER_NAME];
    new name1[128];
	GetPlayerName(playerid, name, MAX_PLAYER_NAME);
	name1 = name;
    strdel(name1, 0, strlen(name1)-4);
	if(strcmp(name1, "_AFK") == 0)
	{
    	strdel(name, strlen(name)-4, strlen(name));
	}
	return name;
}

stock ReturnNameWithoutClanTag(name[MAX_PLAYER_NAME])
{
	new CharsBeforeBracket1 = strfind(name, "[");
	if(CharsBeforeBracket1 != -1) //if '[' is found
	{
	    new CharsBeforeBracket2 = strfind(name, "]");
	    if(CharsBeforeBracket2 != -1) //if ']' is found
	    {
	        if(CharsBeforeBracket1 < CharsBeforeBracket2) //if '[' comes before ']'
	        {
	            strdel(name, CharsBeforeBracket1, CharsBeforeBracket2+1); //delete everything until the last bracket
	        }
	    }
	}
	return name;
}

stock HighlightNamesInString(string[290])
{
	new name[MAX_PLAYER_NAME];
	new startpos = -9;

	for(new i; i<MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
			name = GetName(i);
			name = ReturnNameWithoutClanTag(name); //simply removes everything between brackets []

			while(startpos != -1)
			{
				startpos = strfind(string, name, true, startpos+9);

				if(startpos != -1)
				{
		            strins(string, "{51FF00}", startpos, 8);
		            strins(string, "{FFFFFF}", startpos+strlen(name)+8, 8);
				}
			}
			startpos = -9;
	    }
	}
	return string;
}
*/
//==============================================================================
stock SendInfoText2(time, text[])
{
	if(InfoTextShown)
	{
		KillTimer(HideInfoTextTimer);
		HideInfoTextTimer=-1;
	}

	new length = strlen(text);

	for(new i; i<length; i++)
	{
	    if(text[i] == ' ')
	    {
	        text[i] = '_';
	    }
	}

	TextDrawSetString(InfoText, text);

	foreach(new i : Player)
	{
        TextDrawShowForPlayer(i, InfoText);
 	}
    InfoTextShown = true;

	if(time > 0)
	{
		HideInfoTextTimer = SetTimer("HideInfoText2", time, 0);
	}
}
forward HideInfoText2();
public HideInfoText2()
{
	TextDrawHideForAll(InfoText);
	InfoTextShown = false;
	return 1;
}
stock SendInfoText(playerid, time, text[])
{
	if(IsPlayerConnected(playerid))
	{
		if(pInfoTextShown[playerid] == 1)
		{
			KillTimer(HidepInfoTextTimer[playerid]);
			HidepInfoTextTimer[playerid]=-1;
		}


		PlayerTextDrawSetString(playerid, pInfoText[playerid], text);
		PlayerTextDrawShow(playerid, pInfoText[playerid]);
		pInfoTextShown[playerid] = 1;

		if(time > 0)
		{
			HidepInfoTextTimer[playerid] = SetTimerEx("DestroypInfoText", time, 0, "i", playerid);
        }
    }
    return 1;
}

forward DestroypInfoText(playerid);
public DestroypInfoText(playerid)
{
	PlayerTextDrawHide(playerid, pInfoText[playerid]);
	pInfoTextShown[playerid] = 0;
}

//==============================================================================

#if defined USE_NEWINFOMSG
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

stock SendInfoTextmsg(playerid, time, boxlength, text[], boxcolor = 0x00000033)
{
	if(IsPlayerConnected(playerid))
	{
		if(DestroyInfoTextmsgtRunning[playerid] == true)
		{
			KillTimer(DestroyInfoTextmsgt[playerid]);
			DestroyInfoTextmsgtRunning[playerid] = false;
		}
		DestroyInfoTextmsg(playerid);
		DestroyInfoTextmsg2(playerid);

		InfoTextdrawmsg[playerid] = TextDrawCreate(16, 123, text);
    	DEBUG_TextDrawsUsed ++;
		TextDrawBackgroundColor(InfoTextdrawmsg[playerid], 0x000000ff);
		TextDrawFont(InfoTextdrawmsg[playerid], 1);
		TextDrawLetterSize(InfoTextdrawmsg[playerid], 0.180000, 1.000000);//0.299999, 1.100000);
		TextDrawColor(InfoTextdrawmsg[playerid], 0xffffffff);
		TextDrawSetOutline(InfoTextdrawmsg[playerid], 1);
		TextDrawSetProportional(InfoTextdrawmsg[playerid], 1);

		if(boxlength > 0)
		{
			TextDrawUseBox(InfoTextdrawmsg[playerid], 1);
			TextDrawTextSize(InfoTextdrawmsg[playerid], floatadd(boxlength, 12), 0.000000);
			TextDrawBoxColor(InfoTextdrawmsg[playerid], boxcolor);
		}
		else
		{
			TextDrawUseBox(InfoTextdrawmsg[playerid], 0);
		}
		TextDrawShowForPlayer(playerid, Text:InfoTextdrawmsg[playerid]);
		TextDrawShowForPlayer(playerid, Text:LMBtoClose);
		InfoTextCreatedmsg[playerid] = true;

		if(time > 0)
		{
			DestroyInfoTextmsgt[playerid] = SetTimerEx("DestroyInfoTextmsg", time, 0, "i", playerid);
			DestroyInfoTextmsgtRunning[playerid] = true;
      }
    }
    return 1;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

public DestroyInfoTextmsg(playerid)
{
    if(InfoTextCreatedmsg[playerid] == true)
    {
		TextDrawDestroy(Text:InfoTextdrawmsg[playerid]);
    	DEBUG_TextDrawsUsed --;
		TextDrawHideForPlayer(playerid, Text:LMBtoClose);
		InfoTextCreatedmsg[playerid] = false;
	}
	DestroyInfoTextmsgtRunning[playerid] = false;
}
/////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

stock SendInfoTextmsg2(playerid, boxstart, time, boxlength, text[], boxcolor = 0x00000033)
{
	if(IsPlayerConnected(playerid))
	{
		if(DestroyInfoTextmsgtRunning2[playerid] == true)
		{
			KillTimer(DestroyInfoTextmsgt2[playerid]);
			DestroyInfoTextmsgtRunning2[playerid] = false;
		}
	    DestroyInfoText2(playerid);

		InfoTextdraw2[playerid] = TextDrawCreate(floatadd(boxstart, 16), 123, text);
    	DEBUG_TextDrawsUsed ++;
		TextDrawBackgroundColor(InfoTextdrawmsg2[playerid], 0x000000ff);
		TextDrawFont(InfoTextdrawmsg2[playerid], 1);
		TextDrawLetterSize(InfoTextdrawmsg2[playerid], 0.180000, 1.000000);//0.299999, 1.100000);
		TextDrawColor(InfoTextdrawmsg2[playerid], 0xffffffff);
		TextDrawSetOutline(InfoTextdrawmsg2[playerid], 1);
		TextDrawSetProportional(InfoTextdrawmsg2[playerid], 1);
		if(boxlength > 0)
		{
			TextDrawUseBox(InfoTextdrawmsg2[playerid], 1);
			TextDrawTextSize(InfoTextdrawmsg2[playerid], floatadd(floatadd(boxlength, boxstart), 12), 0.000000);
			TextDrawBoxColor(InfoTextdrawmsg2[playerid], boxcolor);
		}
		else
		{
			TextDrawUseBox(InfoTextdrawmsg[playerid], 0);
		}
		TextDrawShowForPlayer(playerid, Text:InfoTextdrawmsg2[playerid]);
		InfoTextCreatedmsg2[playerid] = true;

		if(time > 0)
		{
			DestroyInfoTextmsgt2[playerid] = SetTimerEx("DestroyInfoTextmsg2", time, 0, "i", playerid);
			DestroyInfoTextmsgtRunning2[playerid] = true;
		}
	}
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

public DestroyInfoTextmsg2(playerid)
{
    if(InfoTextCreatedmsg2[playerid] == true)
    {
		TextDrawDestroy(Text:InfoTextdrawmsg2[playerid]);
		DEBUG_TextDrawsUsed --;
		InfoTextCreatedmsg2[playerid] = false;
	}
	DestroyInfoTextmsgtRunning2[playerid] = false;
}
///////////////////////////////////
#endif


/////////////////////////////////////////////
stock CountInDM(dmid)
{

	new sst=0;
	foreach (new i : Player)
	{
	   if(GetPVarInt(i, "INDM") == dmid)
	   sst++;
	}
	return sst;

}
stock CountWW()
{

	new sst=0;
	foreach (new i : Player)
	{
	   if(GetPVarInt(i, "WW") || GetPVarInt(i, "WW2"))
	   sst++;
	}
	return sst;

}
stock CountFootballers()
{

	new sst=0;
	foreach (new i : Player)
	{
	   if(Footballer[i] > 0)
	   sst++;
	}
	return sst;
}

stock CountFootballers1()
{

	new sst=0;
	foreach (new i : Player)
	{
	   if(Footballer[i] == 1)
	   sst++;
	}
	return sst;
}

stock CountFootballers2()
{

	new sst=0;
	foreach (new i : Player)
	{
	   if(Footballer[i] == 2)
	   sst++;
	}
	return sst;
}


stock CountDuelers()
{
  if(DuelInfo[stat] == 0) return 0;
  else if(DuelInfo[stat] == 3 || DuelInfo[stat] == 1) return 1;
  else if(DuelInfo[stat] == 2) return 2;
  return 0;
}
stock countcanon()
{
	new count;

	foreach(new i : Player)
	{
	  if(InCanon[i] > 0) count++;
	}
	return count;
}

stock countpool()
{
#if defined USE_POOL
	return poolmode;
#else
	return 0;
#endif
}
stock countdive1()
{
	new count;
	foreach(new i : Player)
	{
	  if(InDive[i] == 1) count++;
	}
	return count;
}
stock countdive2()
{
	new count;
	foreach(new i : Player)
	{
	  if(InDive[i] == 2) count++;
	}
	return count;
}


stock ReturnWeaponName(weaponid)
{
	new weaponname[20];
	if(weaponid == 0) { weaponname = "Fist"; }
	if(weaponid == 1) { weaponname = "Brass knuckles"; }
	if(weaponid == 2) { weaponname = "Golf club"; }
	if(weaponid == 3) { weaponname = "Nite stick"; }
	if(weaponid == 4) { weaponname = "Knife"; }
	if(weaponid == 5) { weaponname = "Baseball bat"; }
	if(weaponid == 6) { weaponname = "Shovel"; }
	if(weaponid == 7) { weaponname = "Pool cue"; }
	if(weaponid == 8) { weaponname = "Katana"; }
	if(weaponid == 9) { weaponname = "Chainsaw"; }
	if(weaponid == 10) { weaponname = "Purple dildo"; }
	if(weaponid == 11) { weaponname = "Short vibrator"; }
	if(weaponid == 12) { weaponname = "Long vibrator"; }
	if(weaponid == 13) { weaponname = "White dildo"; }
	if(weaponid == 14) { weaponname = "Flowers"; }
	if(weaponid == 15) { weaponname = "Cane"; }
	if(weaponid == 16) { weaponname = "Grenade"; }
	if(weaponid == 17) { weaponname = "Tear gas"; }
	if(weaponid == 18) { weaponname = "Molotov cocktail"; }
	if(weaponid == 22) { weaponname = "9mm"; }
	if(weaponid == 23) { weaponname = "Silenced 9mm"; }
	if(weaponid == 24) { weaponname = "Desert eagle"; }
	if(weaponid == 25) { weaponname = "Shotgun"; }
	if(weaponid == 26) { weaponname = "Sawn off"; }
	if(weaponid == 27) { weaponname = "Combat shotgun"; }
	if(weaponid == 28) { weaponname = "Micro smg"; }
	if(weaponid == 29) { weaponname = "MP5"; }
	if(weaponid == 30) { weaponname = "AK-47"; }
	if(weaponid == 31) { weaponname = "M4"; }
	if(weaponid == 32) { weaponname = "Tec9"; }
	if(weaponid == 33) { weaponname = "Country rifle"; }
	if(weaponid == 34) { weaponname = "Sniper rifle"; }
	if(weaponid == 35) { weaponname = "Rocket launcher"; }
	if(weaponid == 36) { weaponname = "HS rocket launcher"; }
	if(weaponid == 37) { weaponname = "Flamethrower"; }
	if(weaponid == 38) { weaponname = "Minigun"; }
	if(weaponid == 39) { weaponname = "Satchel charge"; }
	if(weaponid == 40) { weaponname = "Detonator"; }
	if(weaponid == 41) { weaponname = "Spraycan"; }
	if(weaponid == 42) { weaponname = "Fire extinguisher"; }
	if(weaponid == 43) { weaponname = "Camera"; }
	if(weaponid == 44) { weaponname = "Nightvision goggles"; }
	if(weaponid == 45) { weaponname = "Thermal goggles"; }
	if(weaponid == 46) { weaponname = "Parachute"; }
	if(weaponid > 46 || weaponid == 19 || weaponid == 20  || weaponid == 21) { weaponname = "Unknown"; }
	return weaponname;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

stock SetTeleShow(id, force)
{
   new str[256];
   switch(id)
   {
	case 0: format(str, sizeof(str), "DM1~y~: %d / ~g~DM2~y~: %d / ~b~ DM4~y~: %d / ~p~ LMS~y~: %d / ~r~ Race~y~: %d", CountInDM(1), CountInDM(2), CountInDM(4), Iter_Count(InLms), CountRace());
	case 1: format(str, sizeof(str), "DM3~y~: %d / ~g~DM5~y~: %d / ~b~ DM6~y~: %d / ~p~ Parkour~y~: %d / ~r~ Dive2~y~: %d", CountInDM(3), CountInDM(5), CountInDM(6), CountpOurs(), countdive2());
	case 2: format(str, sizeof(str), "DM7~y~: %d / ~g~DM8~y~: %d / ~b~ DM9~y~: %d / ~p~ Derby~y~: %d / ~r~ CS~y~: %d", CountInDM(7), CountInDM(8), CountInDM(9), CountDerby(), CountCS());
	case 3: format(str, sizeof(str), "DM10~y~: %d / ~g~DM12~y~: %d / ~b~ DM11~y~: %d / ~p~ DM13~y~: %d / ~r~ Fallout~y~: %d", CountInDM(10), CountInDM(12), CountInDM(11), CountInDM(13), Iter_Count(FalloutPlayers));
	case 4: format(str, sizeof(str), "DM14~y~: %d / ~g~DM15~y~: %d / ~b~ DM16~y~: %d / ~p~ WW~y~: %d / ~r~ GunGame~y~: %d", CountInDM(14), CountInDM(15), CountInDM(16), CountWW(), CountInDM(18));
	case 5: format(str, sizeof(str), "Football~y~: %d / ~g~Duel~y~: %d / ~b~ MG~y~: %d / ~p~ Hay~y~: %d / ~r~ BF~y~: %d", CountFootballers(), CountDuelers(), CountMG(), CountHay(), CountInDM(19));
	case 6: format(str, sizeof(str), "Cannon~y~: %d / ~g~Dive~y~: %d / ~b~ Sumo~y~: %d / ~p~ CTF~y~: %d / ~r~ Pool~y~: %d", countcanon(), countdive1(), Iter_Count(InSumo), CTFCount1+CTFCount2, countpool());
    case 7: format(str, sizeof(str), "Stunt~y~: %d / ~g~Drift~y~: %d / ~b~ TDM1~y~: %d / ~p~ TDM2~y~: %d / ~r~ TDM3~y~: %d", CountStunt(), CountDrift(), CountTDM1(), CountTDM2(), CountTDM3());
   // case 8: format(str, sizeof(str), "Outrun~y~: %d / ~g~Trucking~y~: %d / ~b~ CO~y~: %d / ~p~ DD~y~: %d / ~r~ FC~y~: %d", CountOutrun(), CountTrucking(), CountCO(), CountDD(), CountFC());
   }
   TextDrawSetStringEX(ScreenTXDS[6], str);
   if(force == 1) TeleShowC=id;
}

stock UpdateShow(DmID)
{
	switch(DmID)
	{
		case 1, 2, 4: if(TeleShowC == 0) SetTeleShow(0, 0);
		case 3, 5, 6: if(TeleShowC == 1) SetTeleShow(1, 0);
		case 7..9: if(TeleShowC == 2) SetTeleShow(2, 0);
		case 10..13: if(TeleShowC == 3) SetTeleShow(3, 0);
		case 14..16: if(TeleShowC == 4) SetTeleShow(4, 0);
	}
}
stock IsDoDMember(playerid)
{
    if(strfind(pName[playerid], "[DoD]", true) != -1) return 1;
    if(strfind(pName[playerid], "[DoD.t]", true) != -1) return 1;
    if(strfind(pName[playerid], "[DoDt]", true) != -1) return 1;
    if(strfind(pName[playerid], "]DoD[", true) != -1) return 1;
    if(strfind(pName[playerid], "]DoDt[", true) != -1) return 1;
    if(strfind(pName[playerid], "]DoD.t[", true) != -1) return 1;
    if(strfind(pName[playerid], "_DoD_", true) != -1) return 1;
    if(strfind(pName[playerid], "_DoD_", true) != -1) return 1;
    if(strfind(pName[playerid], "_DoD.t_", true) != -1) return 1;
    if(strfind(pName[playerid], "(DoD)", true) != -1) return 1;
    if(strfind(pName[playerid], ")DoD(", true) != -1) return 1;
    if(strfind(pName[playerid], ")DoD(", true) != -1) return 1;
    if(strfind(pName[playerid], ")DoD.t(", true) != -1) return 1;
    return 0;
}
/*stock isfuckinglagger(playerid)
{
    if(PlayerInfo[playerid][UserID] != 22476)
	if(PlayerInfo[playerid][UserID] != 34988)
	if(PlayerInfo[playerid][UserID] != 39805)
	if(PlayerInfo[playerid][UserID] != 88871)
	return 1;
}*/
//==============================================================================

forward OnServerUpdate();
public OnServerUpdate()
{
  /* sNameCount2++;
   if(sNameCount2 == 5) sNameCount++, sNameCount2=0;
   if(sNameCount == 4) sNameCount=0;

   if(LogoCount == 60) LogoCount=0;

   switch(LogoCount)
   {
	 case 0:
	 {
	   SetTeleShow(0, 1);
	   SendRconCommand("hostname .·¥·. GTADM »» Freeroam/DM/Minigames/Gangs ««");
     }
	 case 7:
	 {
	   SetTeleShow(1, 1);
	   SendRconCommand("hostname .·¥·. GTADM »» Race/Stunt/Derby/Sumo/LMS ««");
     }
	 case 15:
	 {
	   SetTeleShow(2, 1);
	   SendRconCommand("hostname .·¥·. GTADM »» Houses/Properties/Parkour ««");
     }
	 case 25:
	 {
	   SetTeleShow(3, 1);
	   SendRconCommand("hostname .·¥·. GTADM »» CS/Drift/Fallout/CTF/Pool ««");
     }
	 case 32:
	 {
	   SetTeleShow(4, 1);
	   SendRconCommand("hostname .·¥·. GTADM »» Football/Moneygame/Hay/Dive ««");
     }
	 case 40:
	 {
	   SetTeleShow(5, 1);
	   SendRconCommand("hostname .·¥·. GTADM »» Missions/Events/Gungame/TDM ««");
     }
	 case 50:
	 {
	   SetTeleShow(6, 1);
	   SendRconCommand("hostname .·¥·. GTADM »» Freeroam/DM/Minigames/Gangs ««");
     }
   }

   LogoCount++;

   if(LogoCount == 0 || LogoCount == 10 || LogoCount == 20 || LogoCount == 30 || LogoCount == 40 || LogoCount == 50 || LogoCount == 60 || LogoCount == 70)
   {
		if(Tab == 0) Tab = 1;
		else if(Tab == 1) Tab = 0;
   }*/
   sNameCount2++;
   if(sNameCount2 == 5) sNameCount++, sNameCount2=0;
   if(sNameCount == 4) sNameCount=0;

   if(LogoCount == 60) LogoCount=0;

   switch(LogoCount)
   {
	 case 0:
	 {
	   SetTeleShow(0, 1);
	   SendRconCommand("gamemodetext Houses/Properties/Freeroam");
   	   SendRconCommand("hostname .·¥·. GTADM »» Houses/Properties/Freeroam ««");
     }
	 case 7:
	 {
	   SetTeleShow(1, 1);
	   SendRconCommand("gamemodetext Race/Stunt/Gangwars/Freeroam");
	   SendRconCommand("hostname .·¥·. GTADM »» Freeroam/DM/Minigames/Gangs ««");
     }
	 case 15:
	 {
	   SetTeleShow(2, 1);
	   SendRconCommand("gamemodetext Race/Stunt/Gangwars/Freeroam");
	   SendRconCommand("hostname .·¥·. GTADM »» Race/Stunt/Gangwars/Freeroam ««");
     }
	 case 25:
	 {
	   SetTeleShow(3, 1);
	   SendRconCommand("gamemodetext Derby/Stunt/Race/Sumo/LMS/DM");
       SendRconCommand("hostname .·¥·. GTADM »» Derby/Stunt/Race/Sumo/LMS/DM ««");
     }
	 case 32:
	 {
	   SetTeleShow(4, 1);
	   SendRconCommand("gamemodetext Stunt/DM/Race/Derby/Minigames");
	   SendRconCommand("hostname .·¥·. GTADM »» Stunt/DM/Race/Derby/Minigames ««");
     }
	 case 40:
	 {
	   SetTeleShow(5, 1);
	   SendRconCommand("gamemodetext Stunt/Race/Drift/DM/Freeroam");
       SendRconCommand("hostname .·¥·. GTADM »» Football/Pool/Moneygame/Hay ««");
     }
	 case 50:
	 {
	   SetTeleShow(6, 1);
	   SendRconCommand("gamemodetext Houses/Properties/Freeroam");
	   SendRconCommand("hostname .·¥·. GTADM »» Missions/Events/Gungame/Fallout ««");
     }
     case 51:
	 {
	   SetTeleShow(7, 1);
	   SendRconCommand("gamemodetext Gangwars/Turfwars/Minigames");
	   SendRconCommand("hostname .·¥·. GTADM »» Missions/Events/Gungame/Fallout ««");
     }
     case 52:
	 {
	   SetTeleShow(8, 1);
	   SendRconCommand("gamemodetext Gangwars/Turfwars/Minigames");
	   SendRconCommand("hostname .·¥·. GTADM »» Missions/Events/Gungame/Fallout ««");
   	 }
   }
   LogoCount++;

   if(LogoCount == 0 || LogoCount == 10 || LogoCount == 20 || LogoCount == 30 || LogoCount == 40 || LogoCount == 50 || LogoCount == 60 || LogoCount == 70)
   {
		if(Tab == 0) Tab = 1;
		else if(Tab == 1) Tab = 0;
   }
//==============================================================================
   foreach(new playerid : Player)
   {
	 if(GetPVarInt(playerid, "Trucker")==2)
	 {
           PlayerInfo[playerid][DelevryTime]--;
	       new str[256];
	       format(str, sizeof(str), "~g~Time left: ~r~%s", TimeConvert(PlayerInfo[playerid][DelevryTime]));
	       SendInfoText(playerid, 1000, str);
	       if(PlayerInfo[playerid][DelevryTime] == 0)
	       {
             // GameTextForPlayer(playerid, "~r~Mission Failed", 3000, 4);
              SendInfoText(playerid, 3000, "~r~Mission failed");
			  EndTMission(playerid);
			  SendClientMessage(playerid, 0x317000FF, "{00159E}» Trucking «"DARKBLUE_" Time's Up! Mission failed.");

	       }
	 }
	 else if(GetPVarInt(playerid, "Trucker2")==2)
	 {
		   if(GetPlayerState(playerid) != 2)
		   {
             /// GameTextForPlayer(playerid, "~r~Mission Failed", 3000, 4);
              SendInfoText(playerid, 3000, "~r~Mission failed");
			  EndTMission2(playerid);
			  SendClientMessage(playerid, 0x317000FF, "{00159E}» Trucking «"DARKBLUE_" You have left the truck! mission failed.");

		   }
		   else
		   {
			   if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
			   {
				    new m=PlayerInfo[playerid][DelevryType];
				    SetPVarInt(playerid, "Trucker2", 3);

					TogglePlayerDynamicCP(playerid, v_Mission2_cps[m], true);
					Streamer_AppendArrayData(STREAMER_TYPE_MAP_ICON , v_Mission2_icons[m], E_STREAMER_PLAYER_ID, playerid);
					SendClientMessage(playerid, 0x317000FF, "{00159E}» Trucking «"DARKBLUE_" Deliver the trailer to the marked destination on your minimap!");

					new Float:pos[3];
					Streamer_GetFloatData(STREAMER_TYPE_CP , v_Mission2_cps[m], E_STREAMER_X, pos[0]);
					Streamer_GetFloatData(STREAMER_TYPE_CP , v_Mission2_cps[m], E_STREAMER_Y, pos[1]);
					Streamer_GetFloatData(STREAMER_TYPE_CP , v_Mission2_cps[m], E_STREAMER_Z, pos[2]);

					new Float:aoo=GetDistanceBetweenPoints(-105.2860, -1191.8314, 3.1952, pos[0], pos[1], pos[2]);
					PlayerInfo[playerid][DelevryTime]=floatround(aoo/9);

			   }
		   }
	 }
	 else if(GetPVarInt(playerid, "Trucker2")==4)
	 {
		   if(GetPlayerState(playerid) != 2)
		   {
              //GameTextForPlayer(playerid, "~r~Mission Failed", 3000, 4);
              SendInfoText(playerid, 3000, "~r~Mission failed");
			  EndTMission2(playerid);
			  SendClientMessage(playerid, 0x317000FF, "{00159E}» Trucking «"DARKBLUE_" You have left the truck! mission failed.");
		   }
	 }
	 else if(GetPVarInt(playerid, "Trucker2")==3)
	 {
		   if(GetPlayerState(playerid) != 2)
		   {
              //GameTextForPlayer(playerid, "~r~Mission Failed", 3000, 4);
              SendInfoText(playerid, 3000, "~r~Mission failed");
			  EndTMission2(playerid);
			  SendClientMessage(playerid, 0x317000FF, "{00159E}» Trucking «"DARKBLUE_" You have left the truck! mission failed.");

		   }
		   else
		   {
			   if(!IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
			   {
	            ///  GameTextForPlayer(playerid, "~r~Mission Failed", 3000, 4);
	              SendInfoText(playerid, 3000, "~r~Mission failed");
				  EndTMission2(playerid);
				  SendClientMessage(playerid, 0x317000FF, "{00159E}» Trucking «"DARKBLUE_" You have lost the trailer! Mission Failed.");
			   }
			   else
			   {
		           PlayerInfo[playerid][DelevryTime]--;
			       new str[256];
			       format(str, sizeof(str), "~g~Time left: ~r~%s", TimeConvert(PlayerInfo[playerid][DelevryTime]));
			       SendInfoText(playerid, 1000, str);
			       if(PlayerInfo[playerid][DelevryTime] == 0)
			       {
		              ///GameTextForPlayer(playerid, "~r~Mission Failed", 3000, 4);
		              SendInfoText(playerid, 3000, "~r~Mission failed");
				      SendClientMessage(playerid, 0x317000FF, "{00159E}» Trucking «"DARKBLUE_" Time's Up! Mission failed.");
					  EndTMission2(playerid);
			       }
		       }
	       }
	 }
     if(IsPlayerInDynamicArea(playerid, partyarea) || GetPlayerSurfingObjectID(playerid) == Ship1 ||GetPlayerSurfingObjectID(playerid) == Ship2 ||GetPlayerSurfingObjectID(playerid) == Ship3 && Party == 1)
	 {
       SetPlayerArmedWeapon(playerid, 0);
	 }
	 /*new Float:health;//flappycarshit
     new veh = GetPlayerVehicleID(playerid);
     GetVehicleHealth(veh, health);
     new wa=GetPlayerVirtualWorld(playerid);
     if(health < 998 && wa == 66699 || wa == 66700 || wa == 66701 || wa == 66702 || wa == 66703 || wa == 66704)
     {
       SendInfoText(playerid, 3000, "~r~failed");
       DestroyVehicle(GetPlayerVehicleID(playerid));
       TeleportPlayer(playerid, 1928.3724, 3353.9844, 6.0000, 89.6416, 0);
       new ah= CreateVehicle(441, 1928.3724, 3353.9844, 6.0000, 89.6416, -1, -1, -1);
       SetVehicleVirtualWorld(ah, 66699);
       PutPlayerInVehicle(playerid, ah, 0);
       AddVehicleComponent(GetPlayerVehicleID(playerid), 1010);
       AddVehicleComponent(GetPlayerVehicleID(playerid), 1087);
       AddVehicleComponent(GetPlayerVehicleID(playerid), 1080);
	 }*/
	 if(!Iter_Contains(InSumo, playerid) && GetPlayerState(playerid) != 7 && Spawned[playerid]==1)
	 {

		 new O, z=GetPlayerGangZone(playerid);
         pGz[playerid]=z;
		 if(z >= 0)
		 {
           if(ZoneOwner[z] >= 0) O = ZoneOwner[z];
           else O =0;
		 }
		 else O=0;

		 new location[50];
   	     GetPlayer3DZone(playerid, location, sizeof(location));
   	     if(strlen(location) < 2) location="Unknown";
		 new locstr[200];
		 format(locstr, sizeof(locstr), "~r~Location~w~: %s~n~     ~r~Turf~w~:", location);
         if(HideShit[playerid] == 0)
         {
			 PlayerTextDrawSetString(playerid, Location[playerid][0], locstr);
			 if(O > 0 && GetPlayerInterior(playerid) ==0)  PlayerTextDrawSetString(playerid, Location[playerid][1], GangInfo[O][Name]);
			 else
			 {
			   PlayerTextDrawSetString(playerid, Location[playerid][1], "No gang");
			 }
         }
//		 if(O > 0) SendClientMessageToAll(-1, GangInfo[O][Name]);
	 }
	 if (p3D[playerid] != INVALID_3DTEXT_ID)
	 {
		if (PlayerInfo[playerid][HeadText][0])
		{
		 Update3DTextLabelText(p3D[playerid], 0xF0CEDCFF, PlayerInfo[playerid][HeadText]);
		}
		else Update3DTextLabelText(p3D[playerid], 0xF0CEDCFF, "");
	 }


 	 if(Tab == 0)
	 {
		   if(GetPVarInt(playerid, "Hidden")) SetPlayerScore(playerid, 3);
		   else SetPlayerScore(playerid, PlayerInfo[playerid][pScore]);
	 }
	 else
	 {
		   if(GetPVarInt(playerid, "Hidden")) SetPlayerScore(playerid, 135000);
		   else
		   {
			   new pm = PlayerInfo[playerid][pBank] + GetPlayerMoneyEx(playerid);
			   SetPlayerScore(playerid, pm);
		   }
	 }
	 new Float:Health, str[10];
	 GetPlayerHealth(playerid, Health );
	 format(str, sizeof(str), "%d", floatround(Health));
	 PlayerTextDrawSetStringEX(playerid, HealthBar[playerid], str );

	 GetPlayerArmour(playerid, Health );
	 new h = floatround(Health);
	 if(Health == 0) format(str, sizeof(str), "_", h);
	 else format(str, sizeof(str), "%d", h);
	 PlayerTextDrawSetStringEX(playerid, ArmourBar[playerid], str );

     if((InCW[playerid] > 0) && CwWinTime > 0)
     {
          SetPlayerCameraPos(playerid, -1279.1351, 11.1408, 39.3069);
          SetPlayerCameraLookAt(playerid, -1278.4210, 11.8389, 39.1418);
     }
     else
     {
       if(InCW[playerid] == 3)
       {
	  	  new Float:x, Float:y, Float:z;
		  GetPlayerPos(playerid, x, y, z);
		  new rand = random(2);
		  if(cwplace == 0 && z < 18.5) SetPlayerPosEx(playerid, CwSpec[rand][0], CwSpec[rand][1], CwSpec[rand][2], CwSpec[rand][3], 0);
		  else if(cwplace == 1 && z < 38.00) SetPlayerPosEx(playerid, c2CwSpec[rand][0], c2CwSpec[rand][1], c2CwSpec[rand][2], c2CwSpec[rand][3], 0);
		  else if(cwplace == 2 && z < 15.4995) SetPlayerPosEx(playerid, c3CwSpec[rand][0], c3CwSpec[rand][1], c3CwSpec[rand][2], c3CwSpec[rand][3], 0);
		  else if(cwplace == 3 && z < 10.4995) SetPlayerPosEx(playerid, c4CwSpec[rand][0], c4CwSpec[rand][1], c4CwSpec[rand][2], c4CwSpec[rand][3], 0);
        }
     }
	 new streh[128];
	 new pott=GetPlayerPing(playerid);
     if(GetPVarInt(playerid, "PingCheck") && pott > PingLimit)
	 {
        DeletePVar(playerid, "PingCheck");
        format(streh, sizeof(streh), "High Ping (%d/%d)", pott, PingLimit);
        KickEX(playerid, streh, -255);
	 }
	 if(GetPlayerVirtualWorld(playerid) == 871 && GetPlayerInterior(playerid) != 14)
	 {
	   SetPlayerVirtualWorld(playerid, 0);
	 }
	 if(pInGW[playerid] > 0 || (Iter_Contains(InSumo, playerid) && EventType==700 && EventStarted == 1 && fps[playerid] < 15))
	 {
		 new p=GetPlayerPing(playerid);
	     if(p > GwPingLimit)
		 {
	            PingWarnings[playerid]++;
			    new string[128];
			    if(PingWarnings[playerid] >= 1 * 60)
			    {
					if(pInGW[playerid] > 0)
					{
						format(string, sizeof(string), "High Ping (in gangwar): %d/%d", p, GwPingLimit);
						KickEX(playerid, string, -255);
						PingWarnings[playerid]=0;
					}
					continue;
			    }
				else if(PingWarnings[playerid] == 10 || PingWarnings[playerid] == 30 || PingWarnings[playerid] == 50)
			    {
					if(pInGW[playerid] > 0)
					{
					  format(string, sizeof(string), ""RED_"» Error « {BABABA}Your Ping is too high! You need at least %d Ping during a gang-war!", GwPingLimit);
					  SendClientMessage(playerid, -1, string);
					}
				}

		 }
		 if(fps[playerid] < GwFpsLimit && fps[playerid] > 0 && Spawned[playerid] == 1)
	     {
	            FpsWarnings[playerid]++;
			    new string[128];
			    if(FpsWarnings[playerid] >= 1 * 60)
			    {
					if(pInGW[playerid] > 0) format(string, sizeof(string), "Low FPS (in gangwar): %d/%d", fps[playerid], GwFpsLimit);
					else format(string, sizeof(string), "Low FPS (in sumo): %d/%d", fps[playerid], GwFpsLimit);
					KickEX(playerid, string, -255);
					FpsWarnings[playerid]=0;
					continue;
			    }
				else if(FpsWarnings[playerid] == 10 || FpsWarnings[playerid] == 30 || FpsWarnings[playerid] == 50)
			    {
					format(string, sizeof(string), "» Error « {BABABA}Your FPS is too low! You need at least %d FPS!", GwFpsLimit);
					SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}Turning off your fps limiter or pressing F7 might solve the problem!");
				}
	     }
	 }
     if(PlayerInfo[playerid][Muted] > 0)
	 {
         PlayerInfo[playerid][Muted]--;
         if(PlayerInfo[playerid][Muted] == 0) UnMutePlayer(playerid, -255);
	 }

    /* if(IsPlayerInRaceStartCheckpoint(playerid) && GetPlayerVirtualWorld(playerid) != 0)
	 {
		 TextDrawHideForPlayer(playerid, RaceStartTD);
		 DeletePVar(playerid, "ShowRaceStart");
         aduty[playerid]=0;
         SetPlayerHealth(playerid, 100);
	 }*/
  /*   if(IsPlayerInRaceStartCheckpoint(playerid) && RaceStarted == 1)
	 {
		 TextDrawHideForPlayer(playerid, RaceStartTD);
		 DeletePVar(playerid, "ShowRaceStart");
         aduty[playerid]=0;
         SetPlayerHealth(playerid, 100);

	 }*//////////////////////////////////////////////////////////////////////////////
	 if(PlayerInfo[playerid][Jailed] > 0)
	 {
		 if((GetPlayerInterior(playerid) != 14) || (!IsPlayerInDynamicArea(playerid, JailArea))) JailPlayer(playerid, 0, "xxx", "xxxx", 0);
	     PlayerInfo[playerid][Jailed]--;
		 new str2[30];
    	 format(str2, sizeof(str2), "~r~%s", TimeConvert(PlayerInfo[playerid][Jailed]));
		 SendInfoText(playerid, 1200, str2);
         if(PlayerInfo[playerid][Jailed] == 1) UnJailPlayer(playerid, -255);
	 }
	 new Float:x, Float:y, Float:z;
	 GetPlayerPos(playerid, x, y, z);
	 if(GetPVarInt(playerid, "InHay"))
	 {
		if(HayMap == 0)
		{
		  if(z < 52.3615)
		  {
				switch(random(5))
				{
					case 0: SetPlayerPosEx(playerid, -1042.5647, 826.9340, 78.7012, 214.1063);
					case 1: SetPlayerPosEx(playerid, -1027.9985, 828.2545, 78.7012, 152.0657);
					case 2: SetPlayerPosEx(playerid, -1026.8429, 822.4442, 78.7012, 127.6255);
					case 3: SetPlayerPosEx(playerid, -1042.9984, 821.7470, 78.7012, 232.9065);
					case 4: SetPlayerPosEx(playerid, -1034.2504, 823.4352, 78.7012, 180.8927);
				}
				SetCameraBehindPlayer(playerid);
		  }
		}
		else if(HayMap == 1)
		{
		  if(z < 965.5230)
		  {
	        	switch(random(5))
				{
				  case 0: SetPlayerPosEx(playerid, -370.9140, 631.6196, 1002.5230, 180.0);
				  case 1: SetPlayerPosEx(playerid, -375.8259, 631.9802, 1002.5230, 180.0);
				  case 2: SetPlayerPosEx(playerid, -380.1463, 631.8981, 1002.5230, 180.0);
				  case 3: SetPlayerPosEx(playerid, -384.2529, 631.9648, 1002.5230, 180.0);
				  case 4: SetPlayerPosEx(playerid, -389.2797, 632.0291, 1002.5230, 180.0);
				}
				SetCameraBehindPlayer(playerid);
		  }
		}
		else if(HayMap == 2)
		{
		  if(z < 995.0)
		  {
	        	switch(random(5))
				{
				  case 0: SetPlayerPosEx(playerid, 305.2565, -1172.7833, 1000.9445, 180.0);
				  case 1: SetPlayerPosEx(playerid, 310.4642, -1172.6842, 1000.9445, 180.0);
				  case 2: SetPlayerPosEx(playerid, 316.2276, -1172.7056, 1000.9445, 180.0);
				  case 3: SetPlayerPosEx(playerid, 321.9265, -1172.3250, 1000.9445, 180.0);
				  case 4: SetPlayerPosEx(playerid, 327.7282, -1172.6343, 1000.9445, 180.0);
				}
				SetCameraBehindPlayer(playerid);
		  }
		}
	 }
	 if(GetPVarInt(playerid, "InMG"))
	 {
		  SetPlayerHealth(playerid, 100);
		  if(z < 183.4721)
		  {
				switch(random(3))
				{
				  case 0: SetPlayerPosEx(playerid, 2807.1082, -2674.0049, 204.5200, 100.9919);
				  case 1: SetPlayerPosEx(playerid, 2808.5535, -2680.4304, 204.5200, 90.0251);
				  case 2: SetPlayerPosEx(playerid, 2806.5286, -2689.2800, 204.5200, 62.1382);
				}
				SetCameraBehindPlayer(playerid);
		  }
	 }

	 if((Spawned[playerid] == 1) && !GetPVarInt(playerid, "AFK"))
	 {
	   if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DRINK_BEER)
	   {
		     if(CanFps[playerid] != 1)
		     {
				   CanFps[playerid]=1;
				   if(HideShit[playerid] == 0) PlayerTextDrawShow(playerid, FPS[playerid]);
		     }
	   }
       if(!IsPlayerInAnyVehicle(playerid))
       {
	         if(GetPlayerDrunkLevel(playerid) > 10000)
	         {
				new animlib[32];
			    new animname[32];
			    GetAnimationName(GetPlayerAnimationIndex(playerid), animlib, 32, animname, 32);
			    if(strcmp(animname, "WALK_DRUNK", true))
				{
				 ApplyAnimation(playerid, "PED", "WALK_DRUNK", 4.1, 1, 1, 1, 1, 1);
				}
				GiveMedal(playerid, 26);
	         }
       }
       if(g_IsPaused[playerid] == true) Pauseda[playerid]++;
       else Pauseda[playerid]=0;
	   if(Pauseda[playerid] >= 5)
  	   {
    	if(DERBY > 1 && GetPVarInt(playerid, "InDerby"))
		{
            Remove_From_Derby(playerid, 4);
		}
       }

       if(x==pPausex[playerid] && y==pPausey[playerid] && z==pPausez[playerid])
	   {
    	 Paused[playerid]++;
    	 if(DERBY > 1 && GetPVarInt(playerid, "InDerby"))
    	 {
			 if(Paused[playerid] > 3)
			 {
				   SendInfoText(playerid, 4000, "~r~No Camping In Derby!");
			 }
			 if(Paused[playerid] > 10)
			 {
                   Remove_From_Derby(playerid, 3);
			 }
		 }
    	 if(Iter_Contains(InSumo, playerid))
    	 {
			 if(Paused[playerid] > 5)
			 {
				   SendInfoText(playerid, 4000, "~r~No Camping In Sumo!");
			 }
			 if(Paused[playerid] > 15)
			 {
				   SumoCamping[playerid]=true;
				   FallDown[playerid]=true;
				   SumoKnock(playerid);
			 }
		 }
		 /*if(Paused[playerid] > 60 && GetPVarInt(playerid, "inflappy"))//flappycarshit
		 {
	       SetPlayerVirtualWorldEX(playerid, 0);
           ResetPlayerWeaponsEX(playerid);
    	   LoadPlayerCoords(playerid);
    	   new str2[256];
   	       format(str2, sizeof(str2), "{F4BBFF}» Flappy Car « {D19FE8}%s has been dropped out of the Flappy Car Challenge {F4BBFF}(Paused)", pName[playerid]);
    	   SendClientMessageToAll(0xF2EE05FF, str2);
    	   DeletePVar(playerid, "inflappy");
    	   DestroyVehicle(GetPlayerVehicleID(playerid));
    	   if(IsPlayerInAnyVehicle(playerid)) RemovePlayerFromVehicle(playerid);
    	   new countzz=CountFC();
    	   if(countzz == 0)
    	   {
      	     for(new v = 1; v != MAX_VEHICLES; v++)
      		 {
	     	   new waza=GetVehicleVirtualWorld(v);
         	   if(waza == 66699 || waza == 66700 || waza == 66701 || waza == 66702 || waza == 66703 || waza == 66704 && GetVehicleModel(v) == 441)
         	   {
           	     DestroyVehicle(v);
         	   }
      	     }
      	   }
         }*/
		 if(Paused[playerid] > 60 && GetPVarInt(playerid, "InMG"))
		 {
           new str14[256];
           format(str14, sizeof(str14), "{8F6FA8}» Money Game «{6E8CC4} %s has been dropped out of the Money Game {8F6FA8}(Paused)", pName[playerid]);
           SendClientMessageToAll(0xF86EFFFF, str14);
		   DeletePVar(playerid, "InMG");
		   LoadPlayerCoords(playerid);
		   SetPlayerVirtualWorld(playerid, 0);
		   PlayerTextDrawHide(playerid, pInfoTD[playerid]);
		   new count=CountMG();
      	   if(count == 0)
           {
             KillTimer(mgtimer);
             KillTimer(mgtimer2);
             KillTimer(mgtimer3);
             mgtimer=-1;
             mgtimer2=-1;
             mgtimer3=-1;
             //TextDrawHideForPlayer(playerid, Mwaiting);
	         mgstarted = 0;
			 foreach(new i : Player) DeletePVar(i, "InMG");
             SendClientMessageToAll(0xF86EFFFF, "{8F6FA8}» Money Game «{6E8CC4} The Money Game has been cancelled {8F6FA8}(Not enough players)");
		     EndMG();
			   //foreach(new i : Player) TextDrawHideForPlayer(i, Mwaiting);
		   }
		 }
	     if(Paused[playerid] > 60 && GetPVarInt(playerid, "InHay"))
		 {
           new str13[256];
           format(str13, sizeof(str13), "» Hay Game « {FF6EC0}%s has been dropped out of the Hay {F86EFF}(Paused)", pName[playerid]);
           SendClientMessageToAll(0xF86EFFFF, str13);
		   DeletePVar(playerid, "InHay");
		   LoadPlayerCoords(playerid);
		   SetPlayerVirtualWorld(playerid, 0);
		   new count=CountHay();
           if(count == 0)
           {
           	 KillTimer(haygametimer);
	       	 KillTimer(haygametimer2);
   		 	 haygametimer=-1;
	       	 haygametimer2=-1;
	       	 haygamestarted = 0;
	       	 //TextDrawHideForPlayer(playerid, Hwaiting);
		   	 SetDynamicObjectPos(MovingHay[0], -1033.86, 814.61, 78.30);
		   	 SetDynamicObjectPos(MovingHay2[18], -380.20999, 618.88000, 1002.75000);
		   	 SetDynamicObjectPos(MovingHay3[13], 315.42001, -1185.25000, 1002.78003);
		   	 SetDynamicObjectRot(MovingHay3[13], 0.0, 0.0, 0.0);
		   	 foreach(new i : Player) DeletePVar(i, "InHay");
           	 SendClientMessageToAll(0xF86EFFFF, "» Hay Game «{FF6EC0} The Hay Game has been cancelled {F86EFF}(Not enough players)");
           }
		 }
	     if(Paused[playerid] > 80 && GetPVarInt(playerid, "pOur"))
		 {
		   new str12[256];
		   format(str12, sizeof(str12), "{776387}» Parkour « {AF49FC}%s has been dropped out of the Parkour {776387}(Paused)", pName[playerid]);
		   SendClientMessageToAll(-1, str12);
           RemoveFrompOur(playerid, 1);
		   DeletePVar(playerid, "pOur");
		 }
	     if(Paused[playerid] > 80 && GetPVarInt(playerid, "RACER"))
		 {
           new str11[256];
		   format(str11, sizeof(str11), "{BAAB34}» Race «{F2EE05} %s has been dropped out of the Race {BAAB34}(Paused)", pName[playerid]);
		   SendClientMessageToAll(-1, str11);
		   RemoveFromRace(playerid);
           DeletePVar(playerid, "RACER");
		 }
	     if(Paused[playerid] > 60 && GetPVarInt(playerid, "inCTF"))
		 {
           new str10[256];
		   format(str10, sizeof(str10), "{00A15E}» CTF « {13D6B2} %s has been dropped out of the CTF {00A15E}(Paused)", pName[playerid]);
		   SendClientMessageToAll(-1, str10);
		   Remove_From_CTF(playerid);
		   DeletePVar(playerid, "inCTF");
		 }
         if(Paused[playerid] > 80 && GetPVarInt(playerid, "Signed4Lms"))
		 {
           new str9[256];
		   format(str9, sizeof(str9), "{9ACC89}» LMS « {70AB5C}%s been dropped out of the Last Man Standing {9ACC89}(Paused)", pName[playerid]);
		   SendClientMessageToAll(-1, str9);
		   Remove_From_Lms(playerid, 0);
		   DeletePVar(playerid, "Signed4Lms");
		 }/*
         if(Paused[playerid] > 80 && GetPVarInt(playerid, "DD") == 1)//ddshit
		 {
		   new str8[128];
		   format(str8, sizeof(str8), "{FF00EA}» DD « {9D00FF}%s has been dropped out of the Disco Dodgebomb {FF00EA}(Paused)", pName[playerid]);
		   SendClientMessageToAll(-1, str8);
		   Remove_From_DD(playerid);
		   DeletePVar(playerid, "DD");
		   SetPlayerVirtualWorld(playerid, 0);
           new count=DDCount1+DDCount2;
	       if(count == 0)
		   {
             foreach(new i : Player)
             if(GetPVarInt(i, "DD"))
             {
               new gang = PlayerInfo[i][pGang];
               if(gang > 0) SetPlayerColor(i, PlayerColors[GangInfo[gang][gColor]]);
               else SetPlayerColor(i, PlayerColors[random(200)] );
               Remove_From_DD(i);
               EndDD();
               SendClientMessageToAll(CTC1, "{FF00EA}» DD « {9D00FF}Disco Dodgebomb has been cancelled {FF00EA}(Not enough players)");
             }
           }
		 }
	     if(Paused[playerid] > 80 && GetPVarInt(playerid, "DD") == 2)//ddshit
		 {
		   new str8[128];
		   format(str8, sizeof(str8), "{FF00EA}» DD « {9D00FF}%s has been dropped out of the Disco Dodgebomb {FF00EA}(Paused)", pName[playerid]);
		   SendClientMessageToAll(-1, str8);
		   Remove_From_DD(playerid);
		   DeletePVar(playerid, "DD");
		   SetPlayerVirtualWorld(playerid, 0);
	       new count=DDCount1+DDCount2;
	       if(count == 0)
		   {
             foreach(new i : Player)
             if(GetPVarInt(i, "DD"))
             {
               new gang = PlayerInfo[i][pGang];
               if(gang > 0) SetPlayerColor(i, PlayerColors[GangInfo[gang][gColor]]);
               else SetPlayerColor(i, PlayerColors[random(200)] );
               Remove_From_DD(i);
               EndDD();
               SendClientMessageToAll(CTC1, "{FF00EA}» DD « {9D00FF}Disco Dodgebomb has been cancelled {FF00EA}(Not enough players)");
             }
           }
		 }
		 if(Paused[playerid] > 80 && GetPVarInt(playerid, "CO") == 1)//coshit
		 {
		   new str8[128];
		   format(str8, sizeof(str8), "{168BFF}» CO « {5EAFFF}%s has been dropped out of the Colosseum {168BFF}(Paused)", pName[playerid]);
		   SendClientMessageToAll(-1, str8);
		   Remove_From_CO(playerid);
		   DeletePVar(playerid, "CO");
		   SetPlayerVirtualWorld(playerid, 0);
           new count=COCount1+COCount2;
	       if(count == 0)
		   {
             foreach(new i : Player)
             if(GetPVarInt(i, "CO"))
             {
               new gang = PlayerInfo[i][pGang];
               if(gang > 0) SetPlayerColor(i, PlayerColors[GangInfo[gang][gColor]]);
               else SetPlayerColor(i, PlayerColors[random(200)] );
               Remove_From_CO(i);
               EndCO();
               SendClientMessageToAll(CTC1, "{168BFF}» CO « {5EAFFF}Colosseum has been cancelled {168BFF}(Not enough players)");
             }
           }
		 }
	     if(Paused[playerid] > 80 && GetPVarInt(playerid, "CO") == 2)//coshit
		 {
		   new str8[128];
		   format(str8, sizeof(str8), "{168BFF}» CO « {5EAFFF}%s has been dropped out of the Colosseum {168BFF}(Paused)", pName[playerid]);
		   SendClientMessageToAll(-1, str8);
		   Remove_From_CO(playerid);
		   DeletePVar(playerid, "CO");
		   SetPlayerVirtualWorld(playerid, 0);
	       new count=COCount1+COCount2;
	       if(count == 0)
		   {
             foreach(new i : Player)
             if(GetPVarInt(i, "CO"))
             {
               new gang = PlayerInfo[i][pGang];
               if(gang > 0) SetPlayerColor(i, PlayerColors[GangInfo[gang][gColor]]);
               else SetPlayerColor(i, PlayerColors[random(200)] );
               Remove_From_CO(i);
               EndCO();
               SendClientMessageToAll(CTC1, "{168BFF}» CO « {5EAFFF}Colosseum has been cancelled {168BFF}(Not enough players)");
             }
           }
		 }*/
		 #if defined USE_POOL
		 if(Paused[playerid] > 80 && GetPVarInt(playerid, "poolguy1"))
		 {
		   new str7[256];
		   format(str7, sizeof(str7), "{FF8C00}» Pool «{7FBA00} %s has been dropped out of Pool {FF8C00}(Paused)", pName[playerid]);
		   SendClientMessageToAll(-1, str7);
		   RemoveFromPool(playerid);
		   DeletePVar(playerid, "poolguy1");
		 }
 	     if(Paused[playerid] > 80 && GetPVarInt(playerid, "poolguy2"))
		 {
		   new str6[256];
		   format(str6, sizeof(str6), "{FF8C00}» Pool «{7FBA00} %s has been dropped out of Pool {FF8C00}(Paused)", pName[playerid]);
		   SendClientMessageToAll(-1, str6);
		   RemoveFromPool(playerid);
		   DeletePVar(playerid, "poolguy2");
		 }
		 #endif
		 if(Paused[playerid] > 60 && GetPVarInt(playerid, "CS"))
		 {
		   new str5[256];
		   format(str5, sizeof(str5), "» CS « {D47098}%s has been dropped out of Counter Strike {FF0D6E}(Paused)", pName[playerid]);
		   SendClientMessageToAll(0xFF0D6EFF, str5);
		   Remove_From_CS(playerid);
		   DeletePVar(playerid, "CS");
		 }
		 if(Paused[playerid] > 80 && GetPVarInt(playerid, "InDerby"))
		 {
		   new str3[256];
		   format(str3, sizeof(str3), "» Derby «"DERBYCOLOR_" %s has been dropped out of Demolition Derby {FF4D3B}(Paused)", pName[playerid]);
		   SendClientMessageToAll(-1, str3);
           Remove_From_Derby(playerid, 4);
           DeletePVar(playerid, "InDerby");
		 }
 	     if(Paused[playerid] > 80 && GetPVarInt(playerid, "induel"))
		 {
		   new str2[256];
		   format(str2, sizeof(str2), ""fOUT2_"» Duel « "fOUT_"%s has been dropped out of Duel "fOUT2_"(Paused)", pName[playerid]);
		   SendClientMessageToAll(-1, str2);
           DeletePVar(playerid, "induel");
           RemoveFromDuel(playerid, 1);
		 }
         if((Paused[playerid] >= 180))// && !IsAdmin(playerid, 10)))
         {
		   if(IsPlayerConnected(playerid) && !GetPVarInt(playerid, "AFK"))
		   {
     		new msg[256];
            format(msg, sizeof(msg), "» AFK « {70AB5C}%s is now Away From Keyboard (Reason: Auto-AFK)", pName[playerid]);
            SendClientMessageToAll(0xA3CC00FF, msg);
            if(GetPVarInt(playerid, "RACER")) RemoveFromRace(playerid);
            SetPlayerColor(playerid, 0xFFFFFF00);
            SetPVarInt(playerid, "AFK", true);
            SetPVarString(playerid, "AFKREASON", "Auto-AFK");
            TogglePlayerControllableEx(playerid, 0);
            ApplyAnimation(playerid, "SUNBATHE", "ParkSit_M_IdleC", 4.1, 0, 1, 1, 1, 1);
            ShowPlayerDialog(playerid, 5111, DIALOG_STYLE_MSGBOX, "Away From Keyboard", "You are currently in AFK Mode", "Back", "");

           }
         }
       }
       else Paused[playerid]=0;
       pPausex[playerid]=x;
       pPausey[playerid]=y;
       pPausez[playerid]=z;
     }
   }
   return 1;
}

forward ReactionTest();
public ReactionTest()
{
   new str[256];
   new tybe = 0;
   new RandomLetter[][] = {"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z",
                           "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"};

   rTest = 1;
   switch(random(36))
   {
 	 case 0..1:
 	 {
        format(rTestStr, 10, "%d%d%s%s%s%d%s%d%s%d",
		random(5), random(9), RandomLetter[random(sizeof(RandomLetter))], RandomLetter[random(sizeof(RandomLetter))], RandomLetter[random(sizeof(RandomLetter))], random(9) , RandomLetter[random(sizeof(RandomLetter))], random(9) , RandomLetter[random(sizeof(RandomLetter))], random(9));
        rMoney = 7000;

	 }
 	 case 2..3:
 	 {
        format(rTestStr, 10, "%d%d%d%d%s%d%s%d%d%d",
		random(5), random(9), random(9), random(9), RandomLetter[random(sizeof(RandomLetter))], random(9) , RandomLetter[random(sizeof(RandomLetter))], random(9) , random(9), random(9));
        rMoney = 7000;

	 }
 	 case 4..5:
 	 {
        format(rTestStr, 10, "%s%s%s%s%s%s%s%d%s%d",
		RandomLetter[random(sizeof(RandomLetter))], RandomLetter[random(sizeof(RandomLetter))], RandomLetter[random(sizeof(RandomLetter))], RandomLetter[random(sizeof(RandomLetter))], RandomLetter[random(sizeof(RandomLetter))], RandomLetter[random(sizeof(RandomLetter))] , RandomLetter[random(sizeof(RandomLetter))], random(9) , RandomLetter[random(sizeof(RandomLetter))], random(9));
        rMoney = 7000;
	 }
     case 6: format(rTestStr, 10, "'<(-__-)>'"), rMoney = 5000;
     case 7: format(rTestStr, 20, "HELLYEAAAAH!!"), rMoney = 5000;
     case 8: format(rTestStr, 45, "The quick brown fox jumps over the lazy dog"), rMoney = 7000;
     case 9: format(rTestStr, 45, "I <3 GTADM!"), rMoney = 4000;
     case 10: format(rTestStr, 45, "Supercalifragilisticexpialidocious"), rMoney = 10000;
     case 11..15:
     {
	   new num1 = 1+random(199);
	   new num2 = 1+random(199);
	   format(rTestStr, 20, "%d", num1+num2);
	   format(str, sizeof(str), "{10869E}» Reaction test «{00D799} The first player who calculates \"{10869E}%d+%d{00D799}\" wins!", num1, num2);
	   tybe =1;
	   rMoney = 5000;
     }
     case 16..18:
     {
	   new num1 = 1+random(4);
	   format(rTestStr, 20, "%d", num1*60*60);
	   format(str, sizeof(str), "{10869E}» Reaction test «{00D799} The first player to answer the question wins! \"{10869E}How many seconds are there in %d hours?{00D799}\"", num1);
	   tybe =1;
	   rMoney = 7000;
     }
     case 19..20:
     {
	   new num1 = 1+random(5);
	   format(rTestStr, 20, "%d", num1*60);
	   format(str, sizeof(str), "{10869E}» Reaction test «{00D799} The first player to answer the question wins! \"{10869E}How many minutes are there in %d hours?{00D799}\"", num1);
	   tybe =1;
	   rMoney = 7000;
     }
     case 21: format(rTestStr, 10, "( . Y . )"), rMoney = 5000;
     case 22: format(rTestStr, 15, "(_)_)=====8"), rMoney = 5000;
     case 23: format(rTestStr, 13, "I am a PRO!"), rMoney = 5000;
     case 24: format(rTestStr, 10, "|_(-.-)_|"), rMoney = 5000;
     case 25: format(rTestStr, 15, "LMAOROFLMAOXD"), rMoney = 5000;
     case 26: format(rTestStr, 15, "I Love Jonny!"), rMoney = 5000;
     case 27: format(rTestStr, 15, "I am a MONKEY!"), rMoney = 15000;
	 case 28, 29:
	 {
	   new num1 = random(20);
	   new num2 = random(10);
	   format(rTestStr, 20, "%d", num1*num2);
	   format(str, sizeof(str), "{10869E}» Reaction test «{00D799} The first player who calculates \"{10869E}%dx%d{00D799}\" wins!", num1, num2);
	   tybe =1;
	   rMoney = 10000;
	 }
	 case 30:
	 {
	   format(str, sizeof(str), "{10869E}» Reaction test «{00D799} The first player who types \"{10869E}/piss{00D799}\" wins!");
       rTest = 2;
 	   tybe =2;
	   rMoney = 10000;
	 }
	 case 31:
	 {
	   format(str, sizeof(str), "{10869E}» Reaction test «{00D799} The first player to die wins!");
       rTest = 3;
	   tybe =3;
	   rMoney = 10000;
	 }
	 case 32:
	 {
	   format(str, sizeof(str), "{10869E}» Reaction test «{00D799} The first player who types \"{10869E}/dance{00D799}\" wins!");
       rTest = 4;
	   tybe =4;
	   rMoney = 10000;
	 }
	 case 33..34:
	 {
	   format(str, sizeof(str), "{10869E}» Reaction test «{00D799} The first player who drives faster than {10869E}150 km/h {00D799}wins!");
       rTest = 5;
	   tybe =5;
	   rMoney = 10000;
	 }
	 case 35:
	 {
	   format(str, sizeof(str), "{10869E}» Reaction test «{00D799} The first player who types \"{10869E}/sit{00D799}\" wins!");
       rTest = 6;
	   tybe =6;
	   rMoney = 10000;
	 }
   }
   if(tybe == 0) format(str, sizeof(str), "{10869E}» Reaction test «{00D799} The first player to type \"{10869E}%s{00D799}\" wins!", rTestStr);
   SendClientMessageToAll(DARKBLUE, str);
   rTestcount=GetTickCount();
   return 1;
}
public OnGameModeExit()
{
#if defined useirc
 IRC_OnFilterScriptExit();//irc
 #endif
 mysql_close(GTADM);
 return 1;
}/*
public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
    new szString[300];
    new Hour, Minute, Second;
    gettime(Hour, Minute, Second);
   	new hittypex[128];
	if(hittype == 1) format(hittypex, sizeof(hittypex), "player");
	else if(hittype == 0) format(hittypex, sizeof(hittypex), "none");
	else if(hittype == 2) format(hittypex, sizeof(hittypex), "vehicle");
	else if(hittype == 3) format(hittypex, sizeof(hittypex), "object");
	else if(hittype == 4) format(hittypex, sizeof(hittypex), "playerobject");
	new hitidx[128];
    if(!IsPlayerConnected(hitid)) format(hitidx, sizeof(hitidx), "none");
	else format(hitidx, sizeof(hitidx), "%i", hitid);
    format(szString, sizeof(szString), ""PINK_"[%02d:%02d:%02d] BS%d:"WHITE_"%s"RED_"W:"WHITE_"%i"RED_"H:"WHITE_"%s>%s"RED_"P:"WHITE_"%f %f %f", Hour, Minute, Second, playerid, pName[playerid], weaponid, hittypex, hitidx, fX, fY, fZ);
    SendClientMessage(playerid, -1, szString);
    return 1;
}*/
public OnPlayerRequestClass(playerid, classid)
{
 if(IsPlayerNPC(playerid)) return SpawnPlayer(playerid);
 if(!GetPVarInt(playerid, "CalledAuto") && (GetPVarInt(playerid, "Auto_Login") && (GetPVarFloat(playerid, "x") > 0 ||  GetPVarFloat(playerid, "x") < 0) ))
 {
		ClearAnimations(playerid, 1);
        if(GetPVarInt(playerid, "skin")) SetSpawnInfo(playerid, 0, GetPVarInt(playerid, "skin"), GetPVarFloat(playerid, "x"), GetPVarFloat(playerid, "y"), GetPVarFloat(playerid, "z"), GetPVarFloat(playerid, "a"), 0, 0, 0, 0, 0, 0);
        else SetSpawnInfo(playerid, 0, 0, GetPVarFloat(playerid, "x"), GetPVarFloat(playerid, "y"), GetPVarFloat(playerid, "z"), GetPVarFloat(playerid, "a"), 0, 0, 0, 0, 0, 0);
        SetPVarInt(playerid, "LOGGED", 1), SpawnPlayer(playerid);
        SetPVarInt(playerid, "CalledAuto", true);
 }
 else
 {
      SetPlayerTime(playerid, 20, 0);
      #if defined USEKILLIST
      if(classid == 0) for(new i=0; i<sizeof(Killist); i++) TextDrawHideForPlayer(playerid, Killist[i]);
      #endif

	  if(GetPVarInt(playerid, "Auto_Login")) DeletePVar(playerid, "Auto_Login");
	  PlayerTextDrawHide(playerid, FPS[playerid]);
	  PlayerTextDrawHide(playerid, ScoreTD[playerid]);


	  PlayerTextDrawHide(playerid, HealthBar[playerid]);
	  PlayerTextDrawHide(playerid, ArmourBar[playerid]);

	  TextDrawHideForPlayer(playerid, clock);
	  TextDrawHideForPlayer(playerid, DateTD);

	  TextDrawHideForPlayer(playerid, TdTimeLeftClock);

	  PlayerTextDrawShow(playerid, pIntroTD[playerid][0]);
	  PlayerTextDrawShow(playerid, pIntroTD[playerid][1]);
      ///
  	  /*TextDrawShowForPlayer(playerid, Textdraw01);
      TextDrawShowForPlayer(playerid, Textdraw011);
      TextDrawShowForPlayer(playerid, Textdraw02);
      TextDrawShowForPlayer(playerid, Textdraw03);
      TextDrawShowForPlayer(playerid, Textdraw04);
      if(EventStarted == 0) TextDrawShowForPlayer(playerid, Textdraw05);
      TextDrawShowForPlayer(playerid, Textdraw06);
      TextDrawShowForPlayer(playerid, Textdraw07);*/

      /*
	  PlayerTextDrawShow(playerid, pIntroTD[playerid][2]);
	  PlayerTextDrawShow(playerid, pIntroTD[playerid][3]);
	  PlayerTextDrawShow(playerid, pIntroTD[playerid][4]);
	  PlayerTextDrawShow(playerid, pIntroTD[playerid][5]);*/

	  Spawned[playerid]=0;
	  SetPlayerColor(playerid, PLAYER_COLOR_TEAM_0FF);
      Streamer_UpdateEx(playerid, 1247.7310, 700.0250, 16.6615);
	  switch(GetPlayerTeam(playerid))
	  {
		case Gangster:
		{
		  SetPlayerPos(playerid, 1248.3467, 699.0248, 16.3300);
		  SetPlayerFacingAngle(playerid, 0.0);
		  InterpolateCameraPosEx(playerid, camX[playerid], camY[playerid], camZ[playerid], 1248.2288, 706.7250, 20.2401, 1000);
		  InterpolateCameraLookAtEx(playerid, pcx[playerid], pcy[playerid], pcz[playerid], 1248.3467, 699.0248, 16.3300, 1000);

		  if(PlayerInfo[playerid][IsVIP] > 0 && classid == 0)
		  {
		   Job[playerid] = PlayerInfo[playerid][pVipJob];
		   SetPlayerSkin(playerid, PlayerInfo[playerid][pVipSkin]);
	       PlayerTextDrawSetString(playerid, pIntroTD[playerid][0], "~g~~h~VIP~n~_~N~~y~Info:");
	       PlayerTextDrawSetString(playerid, pIntroTD[playerid][1], "Your VIP skin and weapons!~n~You can customize them at any time using /VipSetting!");
		  }
		  else if(PlayerInfo[playerid][pAdmin] > 0 && classid == 1)
		  {
	         SetPlayerSkin(playerid, 189);
	  	     PlayerTextDrawSetString(playerid, pIntroTD[playerid][0], "~p~~h~Admin~n~_~N~~y~Info:");
		     PlayerTextDrawSetString(playerid, pIntroTD[playerid][1], "Admins job is to assist other players and punish rulebreakers!");
		  }
		  else
		  {
	       Job[playerid] = Gangster;
	       PlayerTextDrawSetString(playerid, pIntroTD[playerid][0], "~w~Civilian~n~_~N~~y~Info:");
	       PlayerTextDrawSetString(playerid, pIntroTD[playerid][1], "As a civilian you do not have any special tasks, but you can always participate in anything.");
	      }
		  switch(random(10))
		  {
			  case 0: ApplyAnimation(playerid, "DANCING", "dnDAN_Down_Ace_M_e", 4.1, 1, 0, 0, 1, 0, 1);
			  case 1: ApplyAnimation(playerid, "DANCING", "DAN_Left_A", 4.1, 1, 0, 0, 1, 0, 1);
			  case 2: ApplyAnimation(playerid, "DANCING", "DAN_Loop_A", 4.1, 1, 0, 0, 1, 0, 1);
			  case 3: ApplyAnimation(playerid, "DANCING", "DAN_Right_A", 4.1, 1, 0, 0, 1, 0, 1);
			  case 4: ApplyAnimation(playerid, "DANCING", "DAN_Up_A", 4.1, 1, 0, 0, 1, 0, 1);
			  case 5: ApplyAnimation(playerid, "DANCING", "dnce_M_a", 4.1, 1, 0, 0, 1, 0, 1);
			  case 6: ApplyAnimation(playerid, "DANCING", "dnce_M_b", 4.1, 1, 0, 0, 1, 0, 1);
			  case 7: ApplyAnimation(playerid, "DANCING", "dnce_M_c", 4.1, 1, 0, 0, 1, 0, 1);
			  case 8: ApplyAnimation(playerid, "DANCING", "dnce_M_d", 4.1, 1, 0, 0, 1, 0, 1);
			  case 9: ApplyAnimation(playerid, "DANCING", "dnce_M_e", 4.1, 1, 0, 0, 1, 0, 1);
		  }

		}
	    case Hitman:
		{
		   SetPlayerPos(playerid, 1255.1938, 707.1202, 16.6615);
		   SetPlayerFacingAngle(playerid, 93.0);
		   SetPlayerArmedWeapon(playerid, 34);
		   ApplyAnimation(playerid, "SHOP", "SHP_Gun_Aim", 4.1, 1, 0, 0, 1, 0, 1);
		   InterpolateCameraPosEx(playerid, camX[playerid], camY[playerid], camZ[playerid], 1246.9741, 708.5956, 17.5117, 1000);
 		   InterpolateCameraLookAtEx(playerid, pcx[playerid], pcy[playerid], pcz[playerid], 1255.1938, 707.1202, 16.6615, 1000);
	       Job[playerid] = Hitman;
		   PlayerTextDrawSetString(playerid, pIntroTD[playerid][0], "~b~~h~~h~~h~Hitman~n~_~N~~y~Info:");
		   PlayerTextDrawSetString(playerid, pIntroTD[playerid][1], "As a hitman you're able to earn bounties from wanted players, collect bounties to gain money and keep an eye on the bounties list to see the highest bounty.");
		   GivePlayerWeaponEX(playerid, 34, 222);
	    }
	    case Medic:
		{
		   SetPlayerPos(playerid, 1273.5830, 720.2737, 17.2435);
		   SetPlayerFacingAngle(playerid, 90.0);

		   SetPlayerArmedWeapon(playerid, 0);
		   ApplyAnimation(playerid, "PED", "SEAT_IDLE", 3.1, 1, 0, 1, 1, 1, 1);
		   InterpolateCameraPosEx(playerid, camX[playerid], camY[playerid], camZ[playerid], 1267.1818, 719.1231, 19.3091, 1000);
 		   InterpolateCameraLookAtEx(playerid, pcx[playerid], pcy[playerid], pcz[playerid], 1273.5830, 720.2737, 17.2435, 1000);

	       Job[playerid] = Medic;
		   PlayerTextDrawSetString(playerid, pIntroTD[playerid][0], "~g~Medic~n~_~N~~y~Info:");
		   PlayerTextDrawSetString(playerid, pIntroTD[playerid][1], "As a medic you're able to heal players, the amount of health you can heal depends on how high your medic skills level is.");
	    }
	    case Cop:
		{
		   SetPlayerPos(playerid, 1222.2747, 746.1130, 13.5199);
		   SetPlayerFacingAngle(playerid, 269.9943);


		   GivePlayerWeapon(playerid, 3, 1);
		   SetPlayerArmedWeapon(playerid, 3);
		   ApplyAnimation(playerid, "COP_AMBIENT", "Coplook_think", 4.1, 1, 0, 0, 1, 0, 1);
		   InterpolateCameraPosEx(playerid, camX[playerid], camY[playerid], camZ[playerid], 1229.1224, 746.6326, 16.0340, 1000);
 		   InterpolateCameraLookAtEx(playerid, pcx[playerid], pcy[playerid], pcz[playerid], 1228.1305, 746.5526, 15.7990, 1000);

	       Job[playerid] = Cop;
		   PlayerTextDrawSetString(playerid, pIntroTD[playerid][0], "~b~Cop~n~_~N~~y~Info:");
		   PlayerTextDrawSetString(playerid, pIntroTD[playerid][1], "As a cop you stun, cuff and arrest wanted players and get money rewards. You can find find wanted players by checking the wanted list!");
	    }
	    case Drugdealer:
		{
		   SetPlayerPos(playerid, 1235.6045, 705.2594, 16.6217);
		   SetPlayerFacingAngle(playerid, -6.0000);

		   SetPlayerArmedWeapon(playerid, 0);
		   ApplyAnimation(playerid, "ROB_BANK", "CAT_Safe_Rob", 4.1, 1, 0, 0, 1, 0, 1);
		   InterpolateCameraPosEx(playerid, camX[playerid], camY[playerid], camZ[playerid], 1240.0663, 704.3466, 18.3450, 1000);
 		   InterpolateCameraLookAtEx(playerid, pcx[playerid], pcy[playerid], pcz[playerid], 1239.1031, 704.6049, 17.9550, 1000);

	       Job[playerid] = Drugdealer;
		   PlayerTextDrawSetString(playerid, pIntroTD[playerid][0], "~r~~h~~h~~h~Dealer~n~_~N~~y~Info:");
		   PlayerTextDrawSetString(playerid, pIntroTD[playerid][1], "As a dealer you can sell drugs to other players, after reaching a  certain dealing level you will be able to rob players, banks aswell as properties!");

	    }
	    case Terrorist:
		{
		   SetPlayerPos(playerid, 1247.0404, 748.9388, 13.9317);
		   SetPlayerFacingAngle(playerid, 180.0000);

		   GivePlayerWeapon(playerid, 39, 1);
		   SetPlayerArmedWeapon(playerid, 39);
		   ApplyAnimation(playerid, "CAMERA", "camcrch_cmon", 4.1, 0, 0, 0, 1, 0, 1);
		   InterpolateCameraPosEx(playerid, camX[playerid], camY[playerid], camZ[playerid], 1247.0022, 740.9905, 16.1902, 1000);
 		   InterpolateCameraLookAtEx(playerid, pcx[playerid], pcy[playerid], pcz[playerid], 1246.9779, 741.9879, 15.9502, 1000);

	       Job[playerid] = Terrorist;
		   PlayerTextDrawSetString(playerid, pIntroTD[playerid][0], "~r~Terrorist~n~_~N~~y~Info:");
		   PlayerTextDrawSetString(playerid, pIntroTD[playerid][1], "As a terrorist you are able to attach bombs to other players. You will start out with 50 bombs each time you spawn.");
	    }
	    case Mechanic:
		{
		   SetPlayerPos(playerid, 1236.7920, 745.4850, 13.5079);
		   SetPlayerFacingAngle(playerid, 180.0000);

		   SetPlayerArmedWeapon(playerid, 0);
		   ApplyAnimation(playerid, "PED", "SEAT_IDLE", 3.1, 1, 0, 1, 1, 1, 1);
		   InterpolateCameraPosEx(playerid, camX[playerid], camY[playerid], camZ[playerid], 1234.2062, 741.1790, 15.2240, 1000);
 		   InterpolateCameraLookAtEx(playerid, pcx[playerid], pcy[playerid], pcz[playerid], 1234.7448, 742.0187, 14.9440, 1000);


	       Job[playerid] = Mechanic;
		   PlayerTextDrawSetString(playerid, pIntroTD[playerid][0], "~y~~h~Mechanic~n~_~N~~y~Info:");
		   PlayerTextDrawSetString(playerid, pIntroTD[playerid][1], "As a mechanic you are able to repair any kinds of vehicles near you, and you can sell repairing kits to other players.");
	    }
	    case Whore:
		{
		   SetPlayerPos(playerid, 1227.6014, 749.1083, 13.5804);
		   SetPlayerFacingAngle(playerid, -90.0000);


		   GivePlayerWeapon(playerid, 10, 1);
		   SetPlayerArmedWeapon(playerid, 10);
		   ApplyAnimation(playerid, "KISSING", "gfwave2", 4.1, 0, 0, 0, 1, 0, 1);
		   InterpolateCameraPosEx(playerid, camX[playerid], camY[playerid], camZ[playerid], 1231.1433, 749.4496, 14.9070, 1000);
 		   InterpolateCameraLookAtEx(playerid, pcx[playerid], pcy[playerid], pcz[playerid], 1230.1586, 749.2894, 14.4970, 1000);

	       Job[playerid] = Whore;
		   PlayerTextDrawSetString(playerid, pIntroTD[playerid][0], "~p~Whore~n~_~N~~y~Info:");
		   PlayerTextDrawSetString(playerid, pIntroTD[playerid][1], "As a whore you are able to offer blowjobs to other players close by and gain some money from it.");
	    }
	    case Trucker:
		{
		   SetPlayerPos(playerid, 1231.4136, 725.2253, 13.5962);
		   SetPlayerFacingAngle(playerid, -90.0000);


		   SetPlayerArmedWeapon(playerid, 0);
		   ApplyAnimation(playerid, "ON_LOOKERS", "panic_point", 4.1, 1, 0, 0, 1, 0, 1);
		   InterpolateCameraPosEx(playerid, camX[playerid], camY[playerid], camZ[playerid], 1237.5813, 725.2855, 14.1994, 1000);
 		   InterpolateCameraLookAtEx(playerid, pcx[playerid], pcy[playerid], pcz[playerid], 1236.5865, 725.2545, 14.1894, 1000);

	       Job[playerid] = Trucker;
		   PlayerTextDrawSetString(playerid, pIntroTD[playerid][0], "~b~~h~~h~Trucker~n~_~N~~y~Info:");
		   PlayerTextDrawSetString(playerid, pIntroTD[playerid][1], "As a trucker you can play many different trucking missions. You can also teleport to the /trucking, and /trucking2 stops.");
	    }
	  }
	  SetPlayerTeam(playerid, NO_TEAM);
	  pClass[playerid] = classid;
 }
 return 1;
}
public OnPlayerRequestSpawn(playerid)
{
    StopAudioStreamForPlayer(playerid);
    ResetSpawnInfo(playerid);
    SetCameraBehindPlayer(playerid);
    DeletePVar(playerid, "AllowSpawn");

    PlayerTextDrawHide(playerid, pIntroTD[playerid][0]);
    PlayerTextDrawHide(playerid, pIntroTD[playerid][1]);
    ///
   	/*TextDrawHideForPlayer(playerid, Textdraw01);
	TextDrawHideForPlayer(playerid, Textdraw011);
	TextDrawHideForPlayer(playerid, Textdraw02);
	TextDrawHideForPlayer(playerid, Textdraw03);
	TextDrawHideForPlayer(playerid, Textdraw04);
	TextDrawHideForPlayer(playerid, Textdraw05);
	TextDrawHideForPlayer(playerid, Textdraw06);
	TextDrawHideForPlayer(playerid, Textdraw07);*/
/*
    PlayerTextDrawHide(playerid, pIntroTD[playerid][2]);
    PlayerTextDrawHide(playerid, pIntroTD[playerid][3]);
    PlayerTextDrawHide(playerid, pIntroTD[playerid][4]);
    PlayerTextDrawHide(playerid, pIntroTD[playerid][5]);
 */
	TextDrawHideForPlayer(playerid, Textdraw0);
	TextDrawHideForPlayer(playerid, Textdraw1);
	TextDrawHideForPlayer(playerid, Textdraw2);
	TextDrawHideForPlayer(playerid, Textdraw3);
	TextDrawHideForPlayer(playerid, Textdraw4);
	TextDrawHideForPlayer(playerid, Textdraw5);
	TextDrawHideForPlayer(playerid, Textdraw6);
	TextDrawHideForPlayer(playerid, Textdraw7);
	TextDrawHideForPlayer(playerid, Textdraw8);
	TextDrawHideForPlayer(playerid, Textdraw9);


    return 1;
}
forward OnPlayerHeadShotPlayer(playerid, target);
public OnPlayerHeadShotPlayer(playerid, target)
{

	PlayerInfo[playerid][HS]++;
	PlayerInfo[playerid][inHS]++;
	if(PlayerInfo[playerid][inHS] >= 50) GiveMedal(playerid, 74);
	ShowHeadshotText(playerid);
	ShowHeadshotText(target);

	new str[128];
    format(str, sizeof(str), "UPDATE `users` SET `HeadShots` = %d WHERE `UserID` = '%d'", PlayerInfo[playerid][HS], PlayerInfo[playerid][UserID]);
    mysql_query(GTADM, str);
	if(GetPVarInt(playerid, "CS")) PlayAudioStreamForPlayer(playerid, "https://dl.dropbox.com/u/52869044/CounterStrike_GTADM/head_shot_original.mp3");
	return 1;
}


forward OnPlayerHeadKillPlayer(playerid, target);
public OnPlayerHeadKillPlayer(playerid, target)
{
	if(IsPlayerConnected(playerid) && IsPlayerConnected(target))
	{
	  new stroo[128];
 	  format(stroo, sizeof(stroo), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s: ~r~Headshot! ~y~%s (%d) ~w~has ~g~killed ~y~%s (%d)~w~!", pName[playerid], playerid, pName[target], target);
	  TextDrawSetStringEX(ScreenTXDS[7], stroo);
	}
	return 1;
}
public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid)
{
    new Float:Health, str[10];
	GetPlayerHealth(playerid, Health );
	format(str, sizeof(str), "%d", floatround(Health));
	PlayerTextDrawSetStringEX(playerid, HealthBar[playerid], str );
    if(weaponid == 31) //m4 for rustler
    {
      new vehicleid = GetPlayerVehicleID(issuerid);
      new vehiclemodel = GetVehicleModel(vehicleid);
      if(vehiclemodel == 476) //rustler
      {
        new Float:vx, Float:vy, Float:vz;
        GetVehicleVelocity(vehicleid, vx, vy, vz);
        vx = floatsqroot(vx*vx + vy*vy + vz*vz);
        if(vx > 0.438)
        {
   	      amount *= 7.0;
        }
      }
	}/*
	if(IsPlayerConnected(issuerid))
	{
		new z=GetPlayerGangZone(issuerid);
	    new g=PlayerInfo[issuerid][pGang];
		if(g >= 0 && IsPlayerConnected(issuerid) && Spawned[issuerid] == 1 && GetPlayerState(issuerid) != 7 && IsSpecing[issuerid] == 0 && !GetPVarInt(issuerid, "RACER"))
		{
		  if(inGw[g] && z != GwTurf[g] && pInGW[playerid] > 0 && pInGW[issuerid] > 0)
		  {
	        JailPlayer(issuerid, 480, "Jonny", "Fight in turf");
		    SendInfoText(issuerid, 5000, "~r~Dont shoot outside the turf");
		  }
		}
	}*/
	/*
	if(aduty[playerid] == 1)
	{
	  SendInfoText(issuerid, 3000, "~r~dont shoot admin on duty!");
	  new Float:x, Float:y, Float:z;
      GetPlayerPos(issuerid, x, y, z);
      SetPlayerPos(issuerid, x, y, z+5);
      PlayerPlaySound(issuerid, 1190, x, y, z);
	}*/
    if(GOD[playerid] == 1) SetPlayerHealth(playerid, 10000000);
	if(damagetxds[playerid] == 1 || GetPVarInt(playerid, "CS"))/////////////////////////////////
	{
		  new sstr[128];
		  new sstr2[128];
		  new Float:health, Float:armour;
	      GetPlayerHealth(playerid, health);
	      GetPlayerArmour(playerid, armour);
	      if(!GetPVarFloat(playerid, "Damage")) SetTimerEx("hideDMG2", 5000, false, "i", playerid);
	  	  SetPVarFloat(playerid, "Damage", GetPVarFloat(playerid, "Damage")+amount);
		  if(issuerid != INVALID_PLAYER_ID) format(sstr, sizeof(sstr), "~r~%s ~l~/ -%d ~r~%s ~l~(%.0f)", pName[issuerid], floatround(GetPVarFloat(playerid, "Damage")), ReturnWeaponName(GetPlayerWeapon(issuerid)), armour+health);
		  if(issuerid == INVALID_PLAYER_ID) format(sstr2, sizeof(sstr2), "-%d ~r~Collision ~l~(%.0f)", floatround(GetPVarFloat(playerid, "Damage")), armour+health);
		  if(issuerid != INVALID_PLAYER_ID) PlayerTextDrawSetStringEX(playerid, Textdraw023[playerid], sstr);
		  if(issuerid == INVALID_PLAYER_ID) PlayerTextDrawSetStringEX(playerid, Textdraw024[playerid], sstr2);
          if(issuerid != INVALID_PLAYER_ID) PlayerTextDrawShow(playerid, Textdraw023[playerid]);
          if(issuerid == INVALID_PLAYER_ID) PlayerTextDrawShow(playerid, Textdraw024[playerid]);
	}
	if(issuerid != INVALID_PLAYER_ID)
	{

      if(IsPlayerConnected(issuerid) && issuerid != playerid) TickCount[playerid][Fight]= gettime( );
	  if(damagetxds[issuerid] == 1 || GetPVarInt(issuerid, "CS"))
	  {
		  new sstr[128];
		  new Float:health, Float:armour;
	      GetPlayerHealth(playerid, health);
	      GetPlayerArmour(playerid, armour);
		  if(!GetPVarFloat(issuerid, "Hit")) SetTimerEx("hideHIT2", 5000, false, "i", issuerid);
		  SetPVarFloat(issuerid, "Hit", GetPVarFloat(issuerid, "Hit")+amount);
		  format(sstr, sizeof(sstr), "~b~%s ~l~/ -%d ~b~%s ~l~(%.0f)", pName[playerid], floatround(GetPVarFloat(issuerid, "Hit")), ReturnWeaponName(GetPlayerWeapon(issuerid)), armour+health);
		  PlayerTextDrawSetStringEX(issuerid, Textdraw022[issuerid], sstr);
		  PlayerTextDrawShow(issuerid, Textdraw022[issuerid]);
  	  }
	  else
	  {
//		  new f;
		  if(GetPlayerState(issuerid) == 2 && !IsPlayerNPC(playerid) && !IsPlayerNPC(issuerid) )
		  {
			new v=GetPlayerVehicleID(issuerid);
			if(!IsABike(v) && !IsAPlane(v) && !IsABoat(v))
			{
	             new speed = GetPlayerSpeed(issuerid, 0);
	             if(speed < 30)
	             {
					new animlib[32];
					new animname[32];
					GetAnimationName(GetPlayerAnimationIndex(playerid), animlib, 32, animname, 32);
					if((strcmp(animname, "KO_skid_back", true) == 0) || (strcmp(animname, "KO_skid_front", true) == 0))
					{
	  				    TickCount[issuerid][carpark]++;
						if(TickCount[issuerid][carpark] > 10)
	  				    {

							SetVehicleToRespawn(v);
							JailPlayer(issuerid, 100, "Jonny", "CarPark");
							SendInfoText(issuerid, 5000, "~r~Car Park");
	  				    }
					}
	             }
			}
		  }
	  }
	}
	return 1;
}
public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid)
{
	if(IsPlayerInDynamicArea(playerid, partyarea) || (Party == 1 && GetPlayerSurfingObjectID(playerid) == Ship1 || GetPlayerSurfingObjectID(playerid) == Ship2 ||GetPlayerSurfingObjectID(playerid) == Ship3))
	{
      ResetPlayerWeaponsEX(playerid);
	  SendInfoText(playerid, 3000, "~r~You are not allowed to DM here");
	}
    if(GetPVarInt(playerid, "inFallout") && FallOut > 1 && weaponid > 0)
    {
      ResetPlayerWeaponsEX(playerid);
    }

    if(g_IsPaused[damagedid] != true && !GetPVarInt(damagedid, "AFK") && !IsPlayerNPC(damagedid))
    {
		if((weaponid > 21 && weaponid < 35) || weaponid == 38) UpdateSkills(playerid, combat, 8), UpdateSkills(playerid, hitpoint, 5), UpdateSkills(damagedid, hitpoint, 1);
		else if(weaponid < 9) UpdateSkills(playerid, fist, 8), UpdateSkills(playerid, hitpoint, 5), UpdateSkills(damagedid, hitpoint, 1);
	}
	if(HitSound[playerid] == 1)
    {
   	  PlayerPlaySound(playerid, 17802, 0.0, 0.0, 0.0);
    }
	new pgang=PlayerInfo[damagedid][pGang];
	if((pgang > 0) && (inGw[pgang] != 0))
	{

	 new k=GetPlayerGangZone(damagedid);
	 if(k > 0)
	 {
		 if(k == GwTurf[pgang] && aZone[k] > 0)
		 {
			 new gang=PlayerInfo[playerid][pGang];
			 if(gang > 0)
			 {
			   if(LastGangAttack[gang] != LastGangAttack[pgang])
			   {
				  //if((inGw[gang] == 0) || (inGw[gang] > 0 && GwTurf[gang] != k))
				  if(inGw[gang] == 0 || (inGw[gang] > 0 && GwTurf[gang] !=k && !GetPVarInt(gang, "induel") && !GetPVarInt(playerid, "induel")))
				  {
					SendInfoText(playerid, 4000, "~r~Dont Interfere");
					TogglePlayerControllable2(playerid, 0);
					ResetPlayerWeaponsEX(playerid);
					SetTimerEx("WarningUnfreeze", 4000, false, "dd", playerid, GetPlayerVirtualWorld(playerid));
				  }
			   }
			 }
			 else
			 {
				SendInfoText(playerid, 4000, "~r~Dont Interfere");
				TogglePlayerControllable2(playerid, 0);
				ResetPlayerWeaponsEX(playerid);
				SetTimerEx("WarningUnfreeze", 4000, false, "dd", playerid, GetPlayerVirtualWorld(playerid));
			 }
		 }
		}
	}


	if(IsPlayerInRaceStartCheckpoint(damagedid) && pInGW[playerid] == 0)
	{
		   TogglePlayerControllable2(playerid, 0);
		   SendInfoText(playerid, 4000, "~r~No Killing in Race");
		   SetTimerEx("WarningUnfreeze", 5000, false, "dd", playerid, GetPlayerVirtualWorld(playerid));
	}

    if(InHouse[playerid] > 0 && GetPlayerInterior(playerid) == 0) ExitHouse(playerid, InHouse[playerid]);
	if(GetPlayerState(playerid) == 3)
	{
	   if(!VehicleHasDriver(GetPlayerVehicleID(playerid)))
	   {
		 SetPlayerArmedWeapon(playerid, 0);
	   }
	}
	/*if(aduty[playerid] == 1)
	{
	  new Float:x, Float:y, Float:z;
      GetPlayerPos(playerid, x, y, z);
      SetPlayerPos(playerid, x, y, z+5);
      PlayerPlaySound(playerid, 1190, x, y, z);
      SendInfoText(playerid, 3000, "~r~dont shoot players while on duty!");
    }*/
	if(weaponid == 38 || weaponid == 37|| weaponid == 36|| weaponid ==35)
	{
		if(GetPlayerVirtualWorld(playerid) == 0 && !IsDeathMatcher(playerid))
		SetPlayerAmmo(playerid, weaponid, 0);
	}
	if( (HeadShotOff == 1 && GetPVarInt(playerid, "CS")) || (HeadShotOff == 0))
	{
		if(weaponid == 34 && GetPVarInt(playerid, "CanHeadShot") && !GetPVarInt(damagedid, "AFK") && aduty[damagedid] == 0 && GOD[damagedid] == 0 && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(damagedid) && IsPlayerInRangeOfPlayer(damagedid, playerid, 150.0))
		{
			 if(pInGW[playerid] == 0 && pInGW[damagedid] == 0)
			 {
				new Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2, Float:d, Float:output;
				new Float:cvx, Float:cvy, Float:cvz, Float:cx, Float:cy, Float:cz;
				GetPlayerCameraPos(playerid, cx, cy, cz);
				GetPlayerCameraFrontVector(playerid, cvx, cvy, cvz);
				GetPlayerPos(playerid, x1, y1, z1);
				GetPlayerPos(damagedid, x2, y2, z2);
				if (GetPlayerSpecialAction(damagedid) == SPECIAL_ACTION_DUCK)
					z2 = z2 + 0.325;
				else
					z2 = z2 + 0.675;

				crossp(cvx, cvy, cvz, x2-cx, y2-cy, z2-cz, output);
				d=output/floatsqroot(cvx*cvx+cvy*cvy+cvz*cvz);
                if(d < 0.35)
				{
					    new
						Float:health = 0.0,
						Float:armour = 0.0;
						new hsdam;
				        if(GetPVarInt(playerid, "OneShootKill") && GOD[damagedid] == 0 && inctf[damagedid] == 0 && aduty[damagedid] == 0) hsdam=1000;
						else hsdam=60;

						GetPlayerHealth(damagedid, health);
						GetPlayerArmour(damagedid, armour);

						armour = armour - hsdam;
						if(armour < 0.0)
						{
							health += armour;//da Panzerung negativ
							armour = 0.0;
						}
						if(health <= 0.0)
						{
							health = 0.0;
							//ChangeDeathInfo(damagedid, playerid, 34, 5000);
							SetPVarInt(damagedid, "DeathInfo", playerid);
			       			if(GOD[damagedid] == 0 && inctf[damagedid] == 0 && aduty[damagedid] == 0) CallRemoteFunction("OnPlayerHeadKillPlayer", "ii", playerid, damagedid);
						}
						SetPlayerHealth(damagedid, health);
						SetPlayerArmour(damagedid, armour);

						//GameTextForPlayer(playerid, "~y~BOOM!!~n~~r~Headshot!", 2000, 4);
						//GameTextForPlayer(damagedid, "~y~BOOM!!~n~~r~Headshot!", 2000, 4);
						if(GOD[damagedid] == 0 && inctf[damagedid] == 0 && aduty[damagedid] == 0) CallRemoteFunction("OnPlayerHeadShotPlayer", "ii", playerid, damagedid);


				}
			 }
		}
	}
 	return 1;
}

forward hideHIT(playerid);
public hideHIT(playerid)
{
   PlayerTextDrawHide(playerid, hittd[playerid][0]);
   PlayerTextDrawHide(playerid, hittd[playerid][1]);
   DeletePVar(playerid, "Hit");
   return 1;
}
forward hideDMG(playerid);
public hideDMG(playerid)
{
   PlayerTextDrawHide(playerid, damagetd[playerid][0]);
   PlayerTextDrawHide(playerid, damagetd[playerid][1]);
   DeletePVar(playerid, "Damage");
   return 1;
}
forward hideHIT2(playerid);
public hideHIT2(playerid)
{
   PlayerTextDrawHide(playerid, Textdraw022[playerid]);
   PlayerTextDrawHide(playerid, Textdraw023[playerid]);
   PlayerTextDrawHide(playerid, Textdraw024[playerid]);
   DeletePVar(playerid, "Hit");
   return 1;
}
forward hideDMG2(playerid);
public hideDMG2(playerid)
{
   PlayerTextDrawHide(playerid, Textdraw022[playerid]);
   PlayerTextDrawHide(playerid, Textdraw023[playerid]);
   PlayerTextDrawHide(playerid, Textdraw024[playerid]);
   DeletePVar(playerid, "Damage");
   return 1;
}

#if defined USE_LOTTO
forward LotoStart();
public LotoStart()
{
  if(LotoStarted == 0)
  {
   SendClientMessageToAll(-1, "{E01BE0}» Lotto « {A81BE0}The Lotto has been started {E01BE0}(/Lotto)");
   SendInfoText2(60000, "Type ~p~/lotto~w~ To join the ~g~lotto~w~!");
   new gametextstr[50];
   gametextstr="~p~/lotto";
   GameTextForAll(gametextstr, 60000, 1);
   LotoStarted=1;
   Iter_Clear(lotoplayers);
   Iter_Clear(lotonumbers);
   SetTimer("LotoEnd", 1000*5*60, false);
  }
  return 1;
}
forward LotoEnd();
public LotoEnd()
{
   if(Iter_Count(lotoplayers) < 2)
   {
      SendClientMessageToAll(-1, "{E01BE0}» Lotto « {A81BE0}The Lotto has been ended {E01BE0}(No Participants)");
	  foreach(new i : lotoplayers) GivePlayerMoneyEX(i, 10000);
	  LotoStarted=0;
   }
   else
   {
	   new winnumber=Iter_Random(lotonumbers), lwinner;
	   new str[256];
	   SendClientMessageToAll(-1, "{E01BE0}» Lotto « {A81BE0}The Lotto has been ended.");
	   format(str, sizeof(str), "{E01BE0}» Lotto « {A81BE0}The winner number is {E01BE0}%d!", winnumber);
	   SendClientMessageToAll(-1, str);

	   foreach(new i : lotoplayers) { if(LotoNumber[i] == winnumber) lwinner=i; }
	   new s=500000*Iter_Count(lotoplayers)*2;
	   format(str, sizeof(str), "{E01BE0}» Lotto « {A81BE0}%s has won the lotto jackpot! {E01BE0}(Reward: $%d).", pName[lwinner], s);
	   SendClientMessageToAll(-1, str);
	   GivePlayerMoneyEX(lwinner, s, 1);
	   GivePP(lwinner, 1);
	   ScoreTDupdate(lwinner, 20);

	   LotoStarted=0;

	   Iter_Clear(lotoplayers);
	   Iter_Clear(lotonumbers);
   }
   return 1;
}
#endif

stock IsInFight(playerid)
{
   if ( ( gettime() - TickCount[playerid][Fight] ) < 10 ) return 1;
   return 0;
}



public OnPlayerPickUpPickup(playerid, pickupid)
{
#if defined USE_WeaponDrop
  for(new i=0; i<MAX_PLAYERS; i++)
  {
    for(new a=0; a<13; a++)
    {
		    if(isDroped[i][a] == pickupid)
		    {
			 if(WeaponArray[i][a][2] == GetPlayerVirtualWorld(playerid))
			 {
		        isDroped[i][a] = -1;
		        DestroyPickup(pickupid);
		        GivePlayerWeaponEX(playerid, WeaponArray[i][a][0], floatround(WeaponArray[i][a][1]/BulletsDivide));
		    	WeaponArray[i][a][0] = -1;
		    	WeaponArray[i][a][1] = -1;
			 }
		    }
    }
  }
#endif

  if (( GetTickCount() - TickCount[playerid][TakePickup] ) >= 1000 )
  {
	  TickCount[playerid][TakePickup]=GetTickCount();
	  if(CanOpenMenu[playerid] == 1)
	  {
		new f;
	    if(GetPropID(playerid) != -255)
	    {
	        OpenPropDialog(playerid, GetPropID(playerid));
	        f=1;
	    }
	    else if(GetHouseID(playerid) != -255)
	    {
			new x = GetHouseID(playerid);
	        ShowMenus(playerid, x);
	        OpenHouseDialog(playerid, x);
	        f=1;
	    }
		if(f==1)
		{
		    CanOpenMenu[playerid] = 0;
		    SetTimerEx("HideMenusForPlayer", 3500, false, "i", playerid);
	    }
	  }
	  if(pickupid == EventPickup && EventType == 1 && EventStarted ==1) DestroyPickup(EventPickup), EventPickup=-1, EventWinner(playerid);
	  else
	  {
		  EasterEggPickup(playerid, pickupid);
		  OnPickPickup(playerid, pickupid);
		//==
		  for(new x=0;x<6;x++)
		  {
		    if(pickupid ==xMasPickUp[x])
			{
					switch(random(5))
					{
					   case 0:
					   {
						  new str[80], m = 100000+(random(900000));
						  GivePlayerMoneyEX(playerid, m, 1);
						  format(str, sizeof(str), "~y~Money~n~~g~$%d", m);
					   }
					   case 1:
					   {
						  SendInfoText(playerid, 1000, "~b~Santa Hat");
		                  SetPlayerAttachedObject(playerid, 2, 19065, 2, 0.120000, 0.040000, -0.003500, 0, 100, 100, 1.4, 1.4, 1.4);
					   }
					   case 2:
					   {
		  			      BombPlayer(playerid, 0, 2.0);
						  SendInfoText(playerid, 1000, "~r~BOMB");
					   }
					   case 3:
					   {
						  SendInfoText(playerid, 1000, "~p~Dildo");
		                  SetPlayerAttachedObject( playerid, 2, 19086, 8, -0.049768, -0.014062, -0.108385, 87.458297, 263.478149, 184.123764, 0.622413, 1.041609, 1.012785 ); // ChainsawDildo1 - lolatdick

					   }
					   case 4:
					   {
						  new str[80], m = 5+(random(5));
						  ScoreTDupdate(playerid, m);
						  format(str, sizeof(str), "~y~Score~n~~b~%d", m);
						  SendInfoText(playerid, 1000, str);
					   }
					}
					break;
			}
		  }
		  for(new sse=0; sse<sizeof(sSPickup); sse++)
		  {
			 if(pickupid == sSPickup[sse])
			 {
			    SetPlayerSkin(playerid, sPickup[sse][sSkin]);
			    break;
			 }
		  }

		  for(new tele=0; tele<sizeof(TelePickup); tele++)
		  {
			 if(pickupid == wTPickup[tele])
		     {

			    SetPlayerPosEx(playerid, TelePickup[tele][Possp][0], TelePickup[tele][Possp][1], TelePickup[tele][Possp][2], TelePickup[tele][Possp][3]), SetPlayerInterior(playerid, TelePickup[tele][inter]);
				if(TelePickup[tele][towrld] >= 0) SetPlayerVirtualWorldEX(playerid, TelePickup[tele][towrld]);
			 }
		  }
		  if(pickupid == JailPickUp[0]) SetPlayerPosEx(playerid, -1172.2603, -995.4187, 129.3014, 266.8752, 14), SetPlayerVirtualWorldEX(playerid, 871);
		  else if(pickupid == JailPickUp[1]) SetPlayerPosEx(playerid, 1754.0032, -1596.3201, 13.5374, 167.8265, 0), SetPlayerVirtualWorldEX(playerid, 0);
//		  else if(pickupid == BankPickup[1]) SetPlayerPosEx(playerid, 384.3296, 173.7989, 1008.3828, 88.7381, 3), SetPlayerVirtualWorldEX(playerid, 1336);
		  else if(pickupid == BankPickup[0]) SetPlayerPosEx(playerid, 384.3296, 173.7989, 1008.3828, 88.7381, 3), SetPlayerVirtualWorldEX(playerid, 1337);
		  else if(pickupid == BankPickup[4]) SetPlayerVirtualWorldEX(playerid, 1340), SetPlayerPosEx(playerid, 384.3296, 173.7989, 1008.3828, 88.7381, 3);

		  else if(pickupid == BankPickup[2]) SetPlayerVirtualWorldEX(playerid, 1335), SetPlayerPosEx(playerid, 2306.7761, -16.2468, 26.7496, 269.5479, 0);
		  else if(pickupid == BankPickup[1]) SetPlayerVirtualWorldEX(playerid, 1338), SetPlayerPosEx(playerid, 2306.7761, -16.2468, 26.7496, 269.5479, 0);

		  else if(pickupid == BankPickup[3])
		  {
			  if(GetPlayerVirtualWorld(playerid) == 1335) SetPlayerVirtualWorldEX(playerid, 0), SetPlayerPosEx(playerid, 2300.7896, -16.0857, 26.4844, 89.8072, 0);
			  if(GetPlayerVirtualWorld(playerid) == 1338) SetPlayerVirtualWorldEX(playerid, 0), SetPlayerPosEx(playerid, -827.5623, 1501.5438, 19.4157, 181.5106, 0);
		  }
	  }

  }
  return 1;
}
stock OnPickPickup(playerid, pickupid)
{
	 for(new O=0; O<50; O++)
	 {
		  if(pickupid == ShoesPickup[O])
		  {
			if(MyShoeses[playerid][O] == 1)
			{
               SendInfoText(playerid, 3000, "~r~You have already found this horse shoe");
			}
			else
			{
               MyShoeses[playerid][O] = 1;
			   new str[128];
			   format(str, sizeof(str), "~r~%d ~w~OF ~g~%d ~p~Horse Shoes ~w~FOUND!", CountPlayerShoeses(playerid), 50);
               SendInfoText(playerid, 5000, str);

               format(str, sizeof(str), "SELECT `Horseshoe1` FROM `horseshoes` WHERE `UserID` = '%d'", PlayerInfo[playerid][UserID]);
	           mysql_tquery(GTADM, str, "HorseShoeses_Update", "dd", playerid, O+1);

		       if(CountPlayerShoeses(playerid) == 50)
		       {
                   GivePP(playerid, 10);
				   format(str, sizeof(str), "» Horse Shoes «  %s  has found all 50 horseshoes!", pName[playerid]);
				   SendClientMessageToAll(0xFAF0CEFF, str);

	  		       ShowPlayerDialog(playerid, 400, DIALOG_STYLE_MSGBOX, "Horse Shoes", ""GREENBLUE_"Congratulations!\n"WHITE_"You have found all the hidden Horseshoes!\n\n"WHITE_"Reward : "GREEN_"$3000000 "WHITE_"and "YELLOW_"10 Score points", "Ok", "");
	   		       PlayerPlaySound(playerid, 5450 , 0.0, 0.0, 0.0);
				   ScoreTDupdate(playerid, 10);
				   GivePlayerMoneyEX(playerid, 3000000);

               }
			}
			break;
		  }
	 }
	 for(new O=0; O<50; O++)
	 {
		  if(pickupid == OystersPickup[O])
		  {
			if(MyOysters[playerid][O] == 1)
			{
               SendInfoText(playerid, 3000, "~r~You have already found this Oyster");
			}
			else
			{
               MyOysters[playerid][O] =1;
			   new str[128];
			   format(str, sizeof(str), "~r~%d ~w~OF ~g~%d ~p~Oysters ~w~FOUND!", CountOysters(playerid), 50);
               SendInfoText(playerid, 5000, str);

               format(str, sizeof(str), "SELECT `Oyster1` FROM `oysters` WHERE `UserID` = '%d'", PlayerInfo[playerid][UserID]);
	           mysql_tquery(GTADM, str, "Oysters_Update", "dd", playerid, O+1);

		       if(CountOysters(playerid) == 50)
		       {
                   GivePP(playerid, 10);
				   format(str, sizeof(str), "» Oysters « %s has found all the oysters", pName[playerid]);
				   SendClientMessageToAll(0xFAF0CEFF, str);

	  		       ShowPlayerDialog(playerid, 400, DIALOG_STYLE_MSGBOX, "Oysters", ""GREENBLUE_"Congratulations!\n"WHITE_"You have found all the hidden Oysters\n\n"WHITE_"Reward : "GREEN_"$3000000 "WHITE_"and "YELLOW_"10 Score points", "Ok", "");
	   		       PlayerPlaySound(playerid, 5450 , 0.0, 0.0, 0.0);
				   ScoreTDupdate(playerid, 10);
				   GivePlayerMoneyEX(playerid, 3000000);
		       }
			}
			break;
		  }
	 }
	 return 1;
}

stock EasterEggPickup(playerid, pickupid)
{
	 for(new Egg=0; Egg<sizeof(EasterEgg); Egg++)
	 {
		  if(pickupid == EasterPickup[Egg])
		  {
			if(MyEggs[playerid][Egg] == 1)
			{
               SendInfoText(playerid, 3000, "~r~You have already found this easter egg");
			}
			else
			{
               MyEggs[playerid][Egg] =1;
			   new str[128];
			   format(str, sizeof(str), "~r~%d ~w~OF ~g~%d ~p~EASTER EGGS ~w~FOUND!", CountPlayerEggs(playerid), sizeof(EasterEgg));
               SendInfoText(playerid, 5000, str);
               ApplyAnimation(playerid, "MISC", "Case_pickup", 1.0, 0, 1, 1, 0, 0, 1);
               new Query[128];
               format(Query, sizeof(Query), "SELECT `Egg1`, `Egg2` FROM `eastereggs` WHERE `UserID` = '%d'", PlayerInfo[playerid][UserID]);
	           mysql_tquery(GTADM, Query, "Easter_Egg_Update", "dd", playerid, Egg+1);


		       if(CountPlayerEggs(playerid) == sizeof(EasterEgg))
		       {
                   GivePP(playerid, 10);
				   format(str, sizeof(str), "» Easter eggs « %s has found all the easter eggs", pName[playerid]);
				   SendClientMessageToAll(0xFAF0CEFF, str);

	  		       ShowPlayerDialog(playerid, 400, DIALOG_STYLE_MSGBOX, "Easter Eggs", ""GREENBLUE_"Congratulations!\n"WHITE_"You have found all the hidden easter eggs\n\n"WHITE_"Reward : "GREEN_"$10000000 "WHITE_"and "YELLOW_"25 Score points", "Ok", "");
	   		       PlayerPlaySound(playerid, 5450 , 0.0, 0.0, 0.0);

				   ScoreTDupdate(playerid, 25);
				   GivePlayerMoneyEX(playerid, 10000000);
		       }
			}
			break;
		  }
	 }
}
stock CountPlayerEggs(playerid)
{
	 new count=0;
	 for(new Egg=0; Egg<sizeof(EasterEgg); Egg++)
	 {
         if(MyEggs[playerid][Egg] == 1)
         {
			count ++;
         }
     }
     return count;
}
stock CountPlayerShoeses(playerid)
{
	 new count=0;
	 for(new S=0; S<50; S++)
	 {
         if(MyShoeses[playerid][S] == 1)
         {
			count ++;
         }
     }
     return count;
}
stock CountPlayerSprays(playerid)
{
	 new count=0;
	 for(new S=0; S<100; S++)
	 {
         if(MySprays[playerid][S] == 1)
         {
			count ++;
         }
     }
     return count;
}
stock CountOysters(playerid)
{
	 new count=0;
	 for(new O=0; O<50; O++)
	 {
         if(MyOysters[playerid][O] == 1)
         {
			count ++;
         }
     }
     return count;
}
stock GetGangBase(gangid)
{
  new a=-1;
  for(new i=0; i<MAX_BASES; i++)
  {
      if(GangBases[i][gbGang]==gangid) a=i;
  }
  return a;
}
public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
  for(new weap=0; weap<sizeof(wPickup); weap++)
  {
	 if(pickupid == wWPickup[weap])
	 {
       if(wPickup[weap][Spawn] != 100 && wPickup[weap][Spawn] != 200)
       {

        if(wPickup[weap][Model_] == 1242) SetPlayerArmour(playerid, 100);
		else if(wPickup[weap][Model_] == 1240) SetPlayerHealth(playerid, 100);
		else
		{
		   if(wPickup[weap][Model_] == 16 || wPickup[weap][Model_] == 39) GivePlayerWeaponEX(playerid, wPickup[weap][Model_], 20);
		   else if(wPickup[weap][Model_] == 34) GivePlayerWeaponEX(playerid, wPickup[weap][Model_], 30);
		   else if(wPickup[weap][Model_] == 41 || wPickup[weap][Model_] == 42) GivePlayerWeaponEX(playerid, wPickup[weap][Model_], 1000);
		   else GivePlayerWeaponEX(playerid, wPickup[weap][Model_], 400);
		}
	   }
	 }
  }
  if (( GetTickCount() - TickCount[playerid][TakePickup] ) >= 1000 )
  {
	  TickCount[playerid][TakePickup]=GetTickCount();

	  if(pickupid == ctfflag[0])
	  {
		if(Flag2Player == playerid) SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You must bring the flag back to your base before capturing another flag!");
		else if(FlagCaptured[0] == 1 && GetPVarInt(playerid, "inCTF") == 2) SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You cant take a flag from your base!");
		else if(GetPVarInt(playerid, "inCTF") == 1 && inFG1 == 1) SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You cant take your team's flag from the base!");
		else
		{
	 		new str[128];
			format(str, sizeof(str), "{00A15E}» CTF « {13D6B2} %s has stolen the blue team's flag", pName[playerid]);
            foreach(new i : Player)
			{
			  if(GetPVarInt(i, "inCTF"))
			  SendClientMessage(i, -1, str);
			}
			DestroyDynamicPickup(ctfflag[0]);
			ctfflag[0]=-1;
			Flag1Player=playerid;
			SetPlayerAttachedObject( playerid, 4, 2993, 15, 0.014013, 0.077415, -0.424313, 354.422760, 358.421966, 92.942932, 1.000000, 1.000000, 1.000000 );
			CTFSETCOLOR(playerid);
			if(IsValidDynamicMapIcon(ctfmapicon[2])) DestroyDynamicMapIcon(ctfmapicon[2]), ctfmapicon[2]=-1;
            inFG1 =0;
			FlagCaptured[0]=0;


		}
//-(*.*)-
	  }
	  else if(pickupid == ctfflag[1])
	  {
		if(Flag1Player == playerid) SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You must bring the flag back to your base before capturing another flag!");
		else if(FlagCaptured[1] == 1 && GetPVarInt(playerid, "inCTF") == 1) SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You cant take a flag from your base!");
		else if(GetPVarInt(playerid, "inCTF") == 2 && inFG2 == 1) SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You cant take your team's flag from the base!");
		else
		{
		   new str[128];
		   format(str, sizeof(str), "{00A15E}» CTF « {13D6B2}%s has stolen the green team's flag", pName[playerid]);
		   foreach(new i : Player)
		   {
		     if(GetPVarInt(i, "inCTF"))
			 SendClientMessage(i, -1, str);
		   }
		   DestroyDynamicPickup(ctfflag[1]);
		   ctfflag[1]=-1;
		   Flag2Player=playerid;
		   SetPlayerAttachedObject( playerid, 4, 2993, 15, 0.014013, 0.077415, -0.424313, 354.422760, 358.421966, 92.942932, 1.000000, 1.000000, 1.000000 );
	       CTFSETCOLOR(playerid);
		   if(IsValidDynamicMapIcon(ctfmapicon[3])) DestroyDynamicMapIcon(ctfmapicon[3]), ctfmapicon[3]=-1;
           inFG2 =0;
	       FlagCaptured[1]=0;
		}

	  }
	  if(pickupid == PowerUpPickup[0])
	  {
	    if(playerid == PowerUpPlayer[0] || playerid == PowerUpPlayer[1] || playerid == PowerUpPlayer[2] || playerid == PowerUpPlayer[3]) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant take more than one power-up");
		else
		{
			PowerUpPlayer[0]=playerid;
			DestroyDynamicPickup(PowerUpPickup[0]);
			PowerUpPickup[0]=-1;
			new str[128];

			format(str, sizeof(str), "{FF08A4}» Power-Up «{1FC4A6} %s (%d) has taken the {7E62A1}'Double Score'{1FC4A6} Power-Up", pName[playerid], playerid);
			SendClientMessageToAll(0x1FC4A6FF, str);
			PlayerPlaySound(playerid, 1150, 0, 0, 0);
		}
	  }
	  else if(pickupid == PowerUpPickup[1])
	  {
	    if(playerid == PowerUpPlayer[0] || playerid == PowerUpPlayer[1] || playerid == PowerUpPlayer[2] || playerid == PowerUpPlayer[3]) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant take more than one power-up");
		else
		{
			PowerUpPlayer[1]=playerid;
			DestroyDynamicPickup(PowerUpPickup[1]);
			PowerUpPickup[1]=-1;
			new str[128];
			format(str, sizeof(str), "{FF08A4}» Power-Up «{1FC4A6} %s (%d) has taken the {7E62A1}'Super Export'{1FC4A6} Power-Up", pName[playerid], playerid);
			SendClientMessageToAll(0x1FC4A6FF, str);
			PlayerPlaySound(playerid, 1150, 0, 0, 0);
		}
	  }
	  else if(pickupid == PowerUpPickup[2])
	  {
	    if(playerid == PowerUpPlayer[0] || playerid == PowerUpPlayer[1] || playerid == PowerUpPlayer[2] || playerid == PowerUpPlayer[3]) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant take more than one power-up");
		else
		{
			PowerUpPlayer[2]=playerid;
			DestroyDynamicPickup(PowerUpPickup[2]);
			PowerUpPickup[2]=-1;
			new str[128];
			format(str, sizeof(str), "{FF08A4}» Power-Up «{1FC4A6} %s (%d) has taken the {7E62A1}'Kangaroo'{1FC4A6} Power-Up", pName[playerid], playerid);
			SendClientMessageToAll(0x1FC4A6FF, str);
			PlayerPlaySound(playerid, 1150, 0, 0, 0);
		}
	  }
	  else if(pickupid == PowerUpPickup[3])
	  {
	    if(playerid == PowerUpPlayer[0] || playerid == PowerUpPlayer[1] || playerid == PowerUpPlayer[2]|| playerid == PowerUpPlayer[3]) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant take more than one power-up");
		else
		{
			PowerUpPlayer[3]=playerid;
			DestroyDynamicPickup(PowerUpPickup[3]);
			PowerUpPickup[3]=-1;
			new str[128];
			format(str, sizeof(str), "{FF08A4}» Power-Up «{1FC4A6} %s (%d) has taken the {7E62A1}'Super Nitro'{1FC4A6} Power-Up", pName[playerid], playerid);
			SendClientMessageToAll(0x1FC4A6FF, str);
			PlayerPlaySound(playerid, 1150, 0, 0, 0);
		}
	  }
      else if(pickupid == PowerUpPickup[4])
	  {
	    if(playerid == PowerUpPlayer[0] || playerid == PowerUpPlayer[1] || playerid == PowerUpPlayer[2]|| playerid == PowerUpPlayer[3] ||playerid == PowerUpPlayer[4]) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant take more than one power-up");
		else
		{
			PowerUpPlayer[4]=playerid;
			DestroyDynamicPickup(PowerUpPickup[4]);
			PowerUpPickup[4]=-1;
			new str[128];
			format(str, sizeof(str), "{FF08A4}» Power-Up «{1FC4A6} %s (%d) has taken the {7E62A1}'Pro Gangster'{1FC4A6} Power-Up", pName[playerid], playerid);
			SendClientMessageToAll(0x1FC4A6FF, str);
			PlayerPlaySound(playerid, 1150, 0, 0, 0);
		}
      }/*
      else if(pickupid == PowerUpPickup[5])
	  {
	    if(playerid == PowerUpPlayer[0] || playerid == PowerUpPlayer[1] || playerid == PowerUpPlayer[2]|| playerid == PowerUpPlayer[3] ||playerid == PowerUpPlayer[4] ||playerid == PowerUpPlayer[5]) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant take more than one power-up");
		else
		{
			PowerUpPlayer[5]=playerid;
			DestroyDynamicPickup(PowerUpPickup[5]);
			PowerUpPickup[5]=-1;
			new str[128];
			format(str, sizeof(str), "{FF08A4}» Power-Up «{1FC4A6} %s (%d) has taken the {7E62A1}'Super Warrior'{1FC4A6} Power-Up", pName[playerid], playerid);
			SendClientMessageToAll(0x1FC4A6FF, str);
		    printf("%s", str);
			PlayerPlaySound(playerid, 1150, 0, 0, 0);
			SetPVarInt(playerid, "superhit", true);
		}
      }
*/
	  //if(pickupid == Mgpickup && GetPVarInt(playerid, "InMG"))
	// / {
	  if(pickupid == Mgpickup && GetPVarInt(playerid, "InMG"))
	  {
        if(EventType==2429 && EventStarted == 1 && EventMoneyBags[playerid] == 5) EventWinner(playerid);
		SendInfoText(playerid, 4000, "~g~Winner");
		new str[128];
        format(str, sizeof(str), "{8F6FA8}» Money Game «{6E8CC4} %s has won the Money Game", pName[playerid]);
		SendClientMessageToAll(PURPLE, str);
	    if(EventType==2429 && EventStarted == 1) //moneygame event
        {
		  new str2[128];
          EventMoneyBags[playerid]++; //moneygame +1
          format(str2, sizeof(str2), "{E8AF02} » Event « {E8D902}%s has collected a Money Bag {E8AF02}[%d/5]", pName[playerid], EventMoneyBags[playerid]);//new col
		  SendClientMessageToAll(PURPLE, str2);
		  if(EventMoneyBags[playerid] >= 5) EventWinner(playerid);
        }
        //SendClientMessageToAll(PURPLE, str);
		ScoreTDupdate(playerid, 5);
		GivePlayerMoneyEX(playerid, 200000);
		PlayerInfo[playerid][MGWins]++;
        new Query[256];
        format(Query, sizeof(Query), "UPDATE `users` SET `MGWins` = %d WHERE `UserID` = '%d'", PlayerInfo[playerid][MGWins], PlayerInfo[playerid][UserID]);
        mysql_query(GTADM, Query);
        if(PlayerInfo[playerid][MGWins] >= 30) GiveMedal(playerid, 44);
		KillTimer(mgtimer);
		KillTimer(mgtimer2);
		KillTimer(mgtimer3);
		mgtimer=-1;
		mgtimer2=-1;
		mgtimer3=-1;
		mgstarted = 1;
		foreach(new i : Player)
		{
			if(GetPVarInt(i, "InMG"))
			{
				PlayerTextDrawHide(i, pInfoTD[i]);
				switch(random(3))
				{
					case 0: SetPlayerPosEx(i, 2807.1082, -2674.0049, 204.5200, 100.9919);
					case 1: SetPlayerPosEx(i, 2808.5535, -2680.4304, 204.5200, 90.0251);
					case 2: SetPlayerPosEx(i, 2806.5286, -2689.2800, 204.5200, 62.1382);
				}
				SetCameraBehindPlayer(i);
				TogglePlayerControllable2(i, 0);
				ssTimer[i]=SetTimerEx("WarningUnfreeze", 2000, false, "id", i, GetPlayerVirtualWorld(i));
			}
		}
		/*MgStartTime=20;
		mgstarted=2;
		mgtimer = SetTimer("StartMGCount", 1000, true);

		mgtimer2 = SetTimer("StartMG", 20000, false);*/
		if(EventType==2429 && EventStarted == 1)
		{
          MgStartTime=20;
		  mgstarted=2;
          mgtimer = SetTimer("StartMGCount", 1000, true);
	      mgtimer2 = SetTimer("StartMG", 20000, false);

		}
		else
		{
          MgStartTime=20;
		  mgstarted=2;
          mgtimer = SetTimer("StartMGCount", 1000, true);
	      mgtimer2 = SetTimer("StartMG", 20000, false);
		}
		MoveDynamicObject(mggate, 2787.1000977, -2680.1999512, 205.3000031, 5.0);
		DestroyDynamicPickup(Mgpickup);

	  }
	  if( (pickupid == HayPickup || pickupid == HayPickup2|| pickupid == HayPickup3) && GetPVarInt(playerid, "InHay") )
	  {
			   if(EventType==200 && EventStarted == 1) EventWinner(playerid);
			   SendInfoText(playerid, 4000, "~g~Winner");
			   new str[128];
			   format(str, sizeof(str), "» Hay Game «{FF6EC0} %s has won the Hay Game", pName[playerid]);
			   ScoreTDupdate(playerid, 5);
			   PlayerInfo[playerid][HayWins]++;
			   if(PlayerInfo[playerid][HayWins] >= 30) GiveMedal(playerid, 45);
               new Query[256];
               format(Query, sizeof(Query), "UPDATE `users` SET `HayWins` = %d WHERE `UserID` = '%d'", PlayerInfo[playerid][HayWins], PlayerInfo[playerid][UserID]);
               mysql_query(GTADM, Query);
			   GivePlayerMoneyEX(playerid, 200000);
		       KillTimer(haygametimer);
	           KillTimer(haygametimer2);
	           haygametimer=-1;
	           haygametimer2=-1;
	           haygamestarted = 0;
	           SendClientMessageToAll(0xF86EFFFF, str);
			   SetDynamicObjectPos(MovingHay[0], -1033.86, 814.61, 78.30);
			   SetDynamicObjectPos(MovingHay2[18], -380.20999, 618.88000, 1002.75000);
		       SetDynamicObjectPos(MovingHay3[13], 315.42001, -1185.25000, 1002.78003);
		   	   SetDynamicObjectRot(MovingHay3[13], 0.0, 0.0, 0.0);
			   foreach(new i : Player)
			   {
				  if(GetPVarInt(i, "InHay"))
				  {
					  LoadPlayerCoords(i);
					  DeletePVar(i, "InHay");
					  SetPlayerVirtualWorldEX(i, 0);
				  }
			   }
	  }
	  for(new x=0; x<sizeof(DrugPickups); x++)
	  {
			 if(pickupid==DrugPickups[x])
			 {
				   new str[144];
				   PlayerInfo[playerid][pDrugs]+=2;
				   format(str, sizeof(str), "~w~You have found two ~g~drug spliffs~w~!~n~~w~Total Drugs: ~p~%d", PlayerInfo[playerid][pDrugs]);
				   SendInfoText(playerid, 4000, str);
			 }
	  }
	  for(new i=0; i<MAX_BASES; i++)
	  {
		  if(pickupid == GangBases[i][gbPickup])
		  {
	        if(aZone[GetPlayerGangZone(playerid)] > 0) ShowBaseTD(playerid, i);//, ShowGangBaseMenu2(playerid);
		    else
		    {
		      new k=GetGangBase(PlayerInfo[playerid][pGang]);
		      if(k >= 0 && k != i) ShowBaseTD(playerid, i);
              //ShowGangBaseMenu1(playerid);
		      else
		      {
				if( PlayerInfo[playerid][pGang] > 0 && GangBases[i][gbGang] == PlayerInfo[playerid][pGang])
				{
				      if(IsInFight(playerid)) return SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You cant enter the gang base during a fight.");
					  if(CanOpenMenu[playerid] == 1)
					  {
				  	     TogglePlayerControllable2(playerid, 0);
	                     if(PlayerInfo[playerid][pGangRank] >= 0) /*ShowGangBaseMenu2(playerid), */ShowBaseTD(playerid, i), ShowMenuForPlayer(BaseMenu2, playerid);
					     else /*ShowGangBaseMenu1(playerid), */ShowBaseTD(playerid, i), ShowMenuForPlayer(BaseMenu2_, playerid);
						 CanOpenMenu[playerid]=0;
						 SetTimerEx("CanOpenMenu_", 3500, false, "i", playerid);
					  }
				}
				else
				{
                      //ShowGangBaseMenu1(playerid);
	                  ShowBaseTD(playerid, i);
					  if(ZoneOwner[GangBases[i][zID]] == PlayerInfo[playerid][pGang])
					  {
						  if(PlayerInfo[playerid][pGangRank] >= 0)
						  {
                           if(IsInFight(playerid)) return SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You cant enter the gang base during a fight.");
					       if(CanOpenMenu[playerid] == 1)
						   {
	 				         TogglePlayerControllable2(playerid, 0);
	   					     CanOpenMenu[playerid]=0;
	   					     //ShowGangBaseMenu1(playerid), ShowBaseTD(playerid, i);
						     ShowMenuForPlayer(BaseMenu_NoSell, playerid);
					    	 SetTimerEx("CanOpenMenu_", 3500, false, "i", playerid);
						   }
						  }
					  }
				}
		      }
		    }
		    break;
		  }
	  }

	  for(new gg=0; gg<sizeof(MissionPickup); gg++)
	  {
	    if(pickupid == MissionPickup[gg])
	    {
		 switch(PlayerInfo[playerid][Mission])
		 {
			case 2:
			{
			  TogglePlayerDynamicCP(playerid, MissionCP[12], true);
	          Streamer_AppendArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[12], E_STREAMER_PLAYER_ID, playerid);
			  PlayerTextDrawSetStringEX(playerid, pMissionTD[playerid], "~w~Great you have ~g~found~w~ the lost briefcase!~n~Follow the ~r~Checkpoint ~w~on your minimap and bring it to us");
	          SetPlayerAttachedObject( playerid, 0, 1210, 6, 0.300000, 0.100000, 0.000000, 0.000000, 270.000000, 0.000000, 1.000000, 1.000000, 1.000000 );
	          SetPVarInt(playerid, "MissionProgress", 2);
			}
			case 4:
			{
	          Streamer_RemoveArrayData(STREAMER_TYPE_PICKUP , MissionPickup[1], E_STREAMER_PLAYER_ID, playerid);
			  PlayerTextDrawSetStringEX(playerid, pMissionTD[playerid], "~w~Use the sniper to hunt~n~some newbies!~n~~g~newbies killed: 0/4");
	          SetPVarInt(playerid, "MissionProgress", 2);
	          GivePlayerWeaponEX(playerid, 34, 20);
			}
			case 7:
			{
			  Streamer_RemoveArrayData(STREAMER_TYPE_PICKUP , MissionPickup[2], E_STREAMER_PLAYER_ID, playerid);
			  SendInfoText(playerid, 4000, "~y~Mission Completed~n~~g~$1000000");
	          PlayAudioStreamForPlayer(playerid, "https://dl.dropbox.com/u/52869044/GTADM%20-%20Mission%20Completed.mp3");
			  GivePlayerMoneyEX(playerid, 1000000);
	          ScoreTDupdate(playerid, 5);
		      DeletePVar(playerid, "MissionProgress");
			  PlayerInfo[playerid][Mission]++;

	          PlayerTextDrawHide(playerid, pMissionTD[playerid]);
	          TogglePlayerAllDynamicRaceCPs(playerid, true);


	          SetPlayerVirtualWorldEX(playerid, 0);
			  DeletePVar(playerid, "FirePorgress");
			  for(new ad=0; ad<28; ad++) DestroyPlayerObject(playerid, MissionObjects[playerid][ad]);
		      new str[128];
	          format(str, sizeof(str), "UPDATE `users` SET `Mission` = %d WHERE `UserID` = '%d'", PlayerInfo[playerid][Mission], PlayerInfo[playerid][UserID]);
	          mysql_query(GTADM, str);
			}
			case 8:
			{
				if(GetPVarInt(playerid, "MissionProgress") == 4)
				{
			         PlayerTextDrawSetStringEX(playerid, pMissionTD[playerid], "- Follow the ~y~icon ~w~on your minimap to get to the ~r~treasure's location");
				     TogglePlayerDynamicCP(playerid, MissionCP[63], true);
	                 Streamer_AppendArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[63], E_STREAMER_PLAYER_ID, playerid);
	                 SetPVarInt(playerid, "MissionProgress", 5);
				}
				else if(GetPVarInt(playerid, "MissionProgress") == 7)
				{
	              Streamer_RemoveArrayData(STREAMER_TYPE_PICKUP , MissionPickup[4], E_STREAMER_PLAYER_ID, playerid);
				  SendInfoText(playerid, 4000, "~y~Mission Completed~n~~g~$2000000");
	     	      PlayAudioStreamForPlayer(playerid, "https://dl.dropbox.com/u/52869044/GTADM%20-%20Mission%20Completed.mp3");
				  GivePlayerMoneyEX(playerid, 2000000);
	              ScoreTDupdate(playerid, 5);
		  		  DeletePVar(playerid, "MissionProgress");
				  PlayerInfo[playerid][Mission]++;
	     	      PlayerTextDrawHide(playerid, pMissionTD[playerid]);
	      	      TogglePlayerAllDynamicRaceCPs(playerid, true);


	              SetPlayerVirtualWorldEX(playerid, 0);
		    	  for(new ad=0; ad<28; ad++) DestroyPlayerObject(playerid, MissionObjects[playerid][ad]);
		          new str[128];
	              format(str, sizeof(str), "UPDATE `users` SET `Mission` = %d WHERE `UserID` = '%d'", PlayerInfo[playerid][Mission], PlayerInfo[playerid][UserID]);
	              mysql_query(GTADM, str);
	              GiveMedal(playerid, 40);
				}
			}
		 }
		 break;
	    }
	  }
  }
  return 1;
}
public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
  if(IsBeingSpeced[playerid] == 1)
  {
    foreach (new i : Player)
    {
        if(spectatorid[i] == playerid)
        {
            SetPlayerInterior(i, newinteriorid);
            SetPlayerVirtualWorldEX(i, GetPlayerVirtualWorld(playerid));
        }
    }
  }
  HidePlayerDialog(playerid);
  if(!GetPVarInt(playerid, "Dont_Exit_b"))
  {
	  if(newinteriorid == 0 && oldinteriorid != 1)
	  {
	    if((InHouse[playerid] >= 0) || (GetPlayerVirtualWorld(playerid) == 7) || (GetPlayerVirtualWorld(playerid) == 1337) || (GetPlayerVirtualWorld(playerid) == 1338) || (GetPlayerVirtualWorld(playerid) == 1340))
	    {
	     SetTimerEx("ExitBuilding", 1000, false, "i", playerid);
	    }
	    if(GetPlayerVirtualWorld(playerid) == 1338) SetPlayerVirtualWorldEX(playerid, 0);
	  }
  }
  else DeletePVar(playerid, "Dont_Exit_b");
  if(GetPVarInt(playerid, "INDM"))
  {
    new dm=GetPVarInt(playerid, "INDM");
    if((newinteriorid == 0) && dm == 5) SetPlayerInterior(playerid, 10), SetPlayerArmedWeapon(playerid, 38);
    if((newinteriorid == 0) && dm == 8) SetPlayerInterior(playerid, 4);
    if((newinteriorid == 0) && dm == 10) SetPlayerInterior(playerid, 1);
    if((newinteriorid == 0) && dm == 13) SetPlayerInterior(playerid, 18);
    if((newinteriorid == 0) && dm == 12) SetPlayerInterior(playerid, 2);
    if((newinteriorid == 0) && dm == 9) SetPlayerInterior(playerid, 16);
    if((newinteriorid == 0) && dm == 6) SetPlayerInterior(playerid, 7);
  }
  if(GetPVarInt(playerid, "WW2")) if((newinteriorid == 0)) SetPlayerInterior(playerid, 15);
  SetTimerEx("AmmunationCheck", 2000, false, "i", playerid);
  SetSyncTime (playerid);
  return 1;
}
forward AmmunationCheck(playerid);
public AmmunationCheck(playerid)
{
  if(IsPlayerInAmmunation(playerid) && Spawned[playerid] == 1)
  {
		PlayerTextDrawSetStringEX(playerid, PropTD[playerid][5], "_~n~_~n~_");
		PlayerTextDrawSetStringEX(playerid, PropTD[playerid][0], "~r~You are not allowed to DM~n~in the Ammunation!");
		PlayerTextDrawSetStringEX(playerid, PropTD[playerid][7], "~r~info");
    	PlayerTextDrawSetPreviewModel(playerid, PropTD[playerid][6], 1239);

		PlayerTextDrawShow(playerid, PropTD[playerid][0]);
		PlayerTextDrawShow(playerid, PropTD[playerid][7]);
		PlayerTextDrawShow(playerid, PropTD[playerid][5]);
		PlayerTextDrawShow(playerid, PropTD[playerid][6]);

		SetTimerEx("HideInfo", 8000, false, "i", playerid);
		new Float:h;
		GetPlayerHealth(playerid, h);
		SetPVarFloat(playerid, "bHealth", h);
		GetPlayerArmour(playerid, h);
		SetPVarFloat(playerid, "bArmour", h);
		SetPlayerShopName(playerid, "FDPIZA");

  }
  else if(GetPVarFloat(playerid, "bHealth") && !IsInBank(playerid)) DeletePVar(playerid, "bHealth"), DeletePVar(playerid, "bArmour");
  return 1;
}
forward ExitBuilding(i);
public ExitBuilding(i)
{
  if(GetPlayerVirtualWorld(i) == 1337)  SetPlayerVirtualWorldEX(i, 0),  SetPlayerPosEx(i, -1901.4202, 487.2479, 35.1719, 91.1588, 0), SetPlayerVirtualWorldEX(i, 0);
  if(GetPlayerVirtualWorld(i) == 1340)  SetPlayerVirtualWorldEX(i, 0),  SetPlayerPosEx(i, 1464.4095, -1013.3486, 26.8438, 178.9043, 0), SetPlayerVirtualWorldEX(i, 0);
  if(InHouse[i] >= 0)
  {
 	SetPlayerPosEx(i, hInfo[InHouse[i]][sX], hInfo[InHouse[i]][sY], hInfo[InHouse[i]][sZ], hInfo[InHouse[i]][SpawnA], 0),  SetPlayerVirtualWorldEX(i, 0), InHouse[i] =-1;
	if(PlayerInfo[i][HouseFix] > 0)
	{
	   TogglePlayerControllable2(i, 0);
	   SetTimerEx("WarningUnfreeze", 3000, false, "id", i, GetPlayerVirtualWorld(i));
	   Streamer_Update(i);
	   SendpInfo(i, "- ~y~Loading....", 2500);
	}

  }
  if(GetPlayerVirtualWorld(i) == 7)  SetPlayerInterior(i, 10);

  return 1;
}
stock ResetVaribles(playerid)
{
#if defined USE_WeaponDrop
	WeaponDestroyTimer[playerid] = -1;
	for(new a=0; a<13; a++)
	{ isDroped[playerid][a] = -1, WeaponArray[playerid][a][0] = -1, WeaponArray[playerid][a][1] = -1, WeaponArray[playerid][a][2] = -1; }
#endif

#if defined USEKILLIST

    DontShowKills[playerid]=0;
#endif
    TickCount[playerid][AskTick]=0;
    TickCount[playerid][ReportTick]=0;
    TickCount[playerid][VTick]=0;
    TickCount[playerid][FineTick]=0;
    AllowForbidWeap[playerid]=0;
	SpecMoney[playerid]=0;
	SpecWorld[playerid]=0;
	SpecInter[playerid]=0;
	IsSpecing[playerid]=0;
	IsBeingSpeced[playerid]=0;
	spectatorid[playerid]=-1;

    FpsWarnings[playerid]=0;
    PingWarnings[playerid]=0;
    TickCount[playerid][SumoJoin]=0;
    TickCount[playerid][LastSumo]=0;
    TickCount[playerid][MeSpam]=0;
    TickCount[playerid][PoolJoin]=0;
    TickCount[playerid][TTTJoin]=0;
    TickCount[playerid][MeSpam]=0;
    SumoCar[playerid]=0;
    SumoSpecID[playerid]=-1;
    SumoSecs[playerid]=0;
    FallDown[playerid]=false;
    UnderZ[playerid]=false;
    Suicide[playerid]=false;
    SumoPaused[playerid]=false;
    SumoCamping[playerid]=false;
    SumoSpec[playerid]=0;

    pRIcon[playerid]=-1;
    for(new x=0; x<60; x++) pRRTD[playerid][x] = INVALID_PLAYERTEXT_DRAW;
    TickCount[playerid][TakePickup]=0;
    Blowjobbing[playerid]=false;
    TickCount[playerid][OffetTK]=0;
    PhoneCreated[playerid] =0;
    TikCreated[playerid] =0;
    gColCreated[playerid] =0;
    p_A_Level[playerid]=0;
    TickCount[playerid][RobTK]=0;
    AdminPass[playerid][0]=EOS;
    RconPass[playerid][0]=EOS;
    IsRCON[playerid]=0;
    pRCONWarned[playerid]=0;
    pSecRCON[playerid]=0;
    PlayerIsFrozen[playerid] = false;
	JumpTK[playerid]=0;
    for(new x=0; x<5; x++) Blocked[playerid][x]=-1;
    Driving[playerid]=0;
    PlayerInfo[playerid][PDrugSp]=0;
	PlayerInfo[playerid][pEventWon]=0;
    g_IsPaused[playerid] = false;
    pInGW[playerid]=0;
    TickCount[playerid][Fight] = 0;
    HideShit[playerid]=0;
    BlockAsk[playerid]=0;
    //MarketVPI8[playerid]=0;
    ctfteam1[playerid]=0;
    ctfteam2[playerid]=0;
    csteam1[playerid]=0;
	csteam2[playerid]=0;
    inctf[playerid]=0;
    nxsdm[playerid]=0;
    aduty[playerid]=0;
    antifallon[playerid]=0;
	HitSound[playerid]=0;
	Jonny[playerid]=0;
//	eventhit[playerid]=0;
	HFA[playerid]=0;
	antifallvip[playerid]=0;
	freepermit[playerid]=0;
	Footballer[playerid]=0;
	CSCT[playerid]=0;
	CSTer[playerid]=0;
	FB1[playerid]=0;
	DD1[playerid]=0;
	DD2[playerid]=0;
	CO1[playerid]=0;
	CO2[playerid]=0;
	FB2[playerid]=0;
	CTFG[playerid]=0;
	CTFB[playerid]=0;
	InCar[playerid]=0;
	secondrconoff[playerid]=0;
	CarHopOn[playerid]=0;
    SpeedBoostOn[playerid]=0;
	attach[playerid]=0;
	damagetxds[playerid]=0;
	specramp[playerid]=0;
    PlayerInfo[playerid][pSpeedR]=0;
	PlayerInfo[playerid][pDrugs]=0;
    CallID[playerid]=-1;
    OnPhone[playerid]=-1;
	pPausex[playerid]=200000;
	pPausey[playerid]=200000;
	pPausez[playerid]=200000;
    pAirBreakWarned[playerid]=0;
    pSpeedWarned[playerid]=0;
	pTeleportWarned[playerid]=0;
    pSpeedo[playerid]=0;
    PMReply[playerid]=-1;
    BoboBitch[playerid]=0;
    TickCount[playerid][house] =0;
    ssTimer[playerid]=-1;
    SecV[playerid]=INVALID_VEHICLE_ID;
    PlayerInfo[playerid][pCommands]=0;
    GOD[playerid]=0;
    TickCount[playerid][GangCreating]=0;
    Pauseda[playerid]=0;
	PlayerInfo[playerid][HS]=0;
	PlayerInfo[playerid][inHS]=0;
	PlayerInfo[playerid][inExport]=0;
    InCW[playerid] =0;
    STUNTING[playerid]=0;
    StuntCP[playerid]=-1;
    InCanon[playerid]=0;
    CanFps[playerid]=1;
    pWarned[playerid] = 0;
    pMoney[playerid]=0;
    CanCsVote[playerid]=1;
	if(DuelInfo[player1] ==playerid) DuelInfo[player1]=-1;
	if(DuelInfo[player2] ==playerid)  DuelInfo[player2]=-1;
    Spawned[playerid]=0;
    PlayerInfo[playerid][HeadText][0]='\0';
    CancelSelectTextDraw(playerid);
    PlayerInfo[playerid][Mission]=0;
    PlayerInfo[playerid][Jailed]=0;
    PlayerInfo[playerid][Muted]=0;
  	PlayerInfo[playerid][pScore] = 0;
  	PlayerInfo[playerid][inScore] = 0;
  	PlayerInfo[playerid][inHours] = 0;
  	PlayerInfo[playerid][inKills] = 0;
    PlayerInfo[playerid][pAdmin] = 0;
    PlayerInfo[playerid][pRaceAdmin] = 0;
    PlayerInfo[playerid][pOurAdmin] = 0;
    PlayerInfo[playerid][pCwAdmin] = 0;
    PlayerInfo[playerid][pHouse] = -255;
    PlayerInfo[playerid][pCar] = -255;
    PlayerInfo[playerid][pCash] = 0;
    PlayerInfo[playerid][pBank] = 100000;
    PlayerInfo[playerid][pGang] = -255;
    PlayerInfo[playerid][pVip] = 0;
    PlayerInfo[playerid][IsVIP] = 0;
	PlayerInfo[playerid][vDamage]=0;
	PlayerInfo[playerid][pKills] = 0;
	PlayerInfo[playerid][ksHighScore] = 0;
    PlayerInfo[playerid][currentks] = 0;

	PlayerInfo[playerid][pDeaths] = 0;
	PlayerInfo[playerid][pHours] = 0;
	PlayerInfo[playerid][pMins] = 0;
	PlayerInfo[playerid][pExported] = 0;
	PlayerInfo[playerid][vipexpiresin] = 0;
	PlayerInfo[playerid][Ramp] = -255;
	PlayerInfo[playerid][pWDuel] = 0;
	PlayerInfo[playerid][pWLms] = 0;
	PlayerInfo[playerid][pWCTF] = 0;
	PlayerInfo[playerid][SumoWinz] = 0;
	PlayerInfo[playerid][PoolWon]=0;
	ClanTag[playerid]=0;
	PlayerInfo[playerid][pWDerby] = 0;
	PlayerInfo[playerid][pGWlost] = 0;
	PlayerInfo[playerid][pGWinz] = 0;
	Invited[playerid] = -255;
    PassCount[playerid]= 0;
	NEON[playerid]= -255;
    Player_Info[playerid][Fbumps]=0;
    Player_Info[playerid][Rbumps]=0;
    Player_Info[playerid][Hood]=0;
    Player_Info[playerid][SS]=0;
    Player_Info[playerid][Spoiler]=0;
    Player_Info[playerid][Ex]=0;
    PlayerInfo[playerid][pWRace]=0;
    PlayerInfo[playerid][rTestWon]=0;
    PlayerInfo[playerid][rTs]=0;
    PlayerInfo[playerid][pRrecord]=0;
    PlayerInfo[playerid][pWpOurs]=0;
    PlayerInfo[playerid][pDrecord]=0;
    PlayerInfo[playerid][pBeatUp]=0;
    PlayerInfo[playerid][Arrests]=0;
    PlayerInfo[playerid][Heals]=0;
    PlayerInfo[playerid][pBombed]=0;
    PlayerInfo[playerid][DDWins]=0;
    PlayerInfo[playerid][COWins]=0;
    PlayerInfo[playerid][FCWins]=0;
	PlayerInfo[playerid][CSWins]=0;
	PlayerInfo[playerid][PfOutW]=0;
	PlayerInfo[playerid][blowjobs]=0;
	PlayerInfo[playerid][bountiesearned]=0;
	PlayerInfo[playerid][carsrepaired]=0;
	PlayerInfo[playerid][diveswon]=0;
    GangInfoView[playerid] =-1;
    Paused[playerid] = 0;
	PlayerInfo[playerid][pTrucking]=0;
	PlayerInfo[playerid][pOutRunz]=0;
    if(!IsPlayerNPC(playerid))
    {
      SetPlayerColor( playerid, PlayerColors[random(200)] );
	}
	for(new x=0; x< 100;x++)
	{
        MyEggs[playerid][x]=0;
        MySprays[playerid][x] = 0;
        if(x < 50) MyOysters[playerid][x] = 0, MyShoeses[playerid][x] = 0;
        if(x < sizeof(Medals)) MyMedals[playerid][x]=0;
        if(x < 20) pMods[playerid][x] = -255;
	}
    PlayerInfo[playerid][UserID]=-1;
    warned[playerid]= 0;
    format(PlayerClothes[playerid][HatString], 200, "No");
    format(PlayerClothes[playerid][GlassString], 200, "No");
    PlayerClothes[playerid][Glass]=0;
    PlayerClothes[playerid][Caps]=0;
    PlayerInfo[playerid][pCook]=0;
    for(new x=0; x<5; x++) PlayerInfo[playerid][premiumItems][x]=0;
    for(new x=0; x<5; x++) PlayerInfo[playerid][VipItems][x]=0;
    for(new x=0; x<10; x++) if(IsPlayerAttachedObjectSlotUsed(playerid, x)) RemovePlayerAttachedObject(playerid, x);
	format(PlayerInfo[playerid][StatsMSG], 50, "_");


	pEXP[playerid][combat] = 0;
	pEXP[playerid][fist] = 0;
	pEXP[playerid][hitpoint] = 0;
    pEXP[playerid][drugdealing] = 0;
	pEXP[playerid][driving] = 0;
	pEXP[playerid][gangster] = 0;
	pEXP[playerid][medicine] = 0;
	pEXP[playerid][justice] = 0;
	pLevel[playerid][combat] = 0;
    pLevel[playerid][fist] = 0;
	pLevel[playerid][hitpoint] = 0;
	pLevel[playerid][drugdealing] = 0;
	pLevel[playerid][driving] = 0;
	pLevel[playerid][gangster] = 0;
    pLevel[playerid][medicine] = 0;
	pLevel[playerid][justice] = 0;
	return 1;
}
stock WelcomeText(playerid, unregistered=0)
{
      new str[128];
      format(str, sizeof(str), "{4A9EC2}» Welcome to GTADM - Grand Theft Auto Deathmatch, {12F4B8}%s!", pName[playerid]);
      SendClientMessage(playerid, 0x4DBCE4FF, str);
      if(unregistered == 1) SendClientMessage(playerid, 0xAA8202FF, "» If you want to save your stats, you can create an account at any time, using {FFC307}\"/register\"");
      SendClientMessage(playerid, 0x4DBA00AA, "» If you need any help or if you have questions, ask {98E01B}\"/admins\"!");
      SendClientMessage(playerid, 0xFF4D3BFF, "» You can donate to support server and get extra VIP features, {F29D94}\"/vip\"!");
      SendClientMessage(playerid, 0xC8F1FAFF, "{71A5B0}» Use {C8F1FA}\"/Job\" {71A5B0}to change your job any time!");
      SendClientMessage(playerid, 0xFF0000FF, "{A6856A}» You should check out:{96A66A} /cmds /minigames /teleports /help.");
      SendClientMessage(playerid, 0x0000FFFF, "{0099FF}» Dont forget to visit our forums at \"{6F6AA6}www.gtadm.com{0099FF}\"");
      //SendClientMessage(playerid, -1, "");
}

stock LoginPlayer(playerid, autologin)
{
  if(!IsPlayerNPC(playerid))
  {
	  TextDrawHideForPlayer(playerid, Textdraw0);
	  TextDrawHideForPlayer(playerid, Textdraw1);
	  TextDrawHideForPlayer(playerid, Textdraw2);
	  TextDrawHideForPlayer(playerid, Textdraw3);
	  TextDrawHideForPlayer(playerid, Textdraw4);
	  TextDrawHideForPlayer(playerid, Textdraw5);
	  TextDrawHideForPlayer(playerid, Textdraw6);
	  TextDrawHideForPlayer(playerid, Textdraw7);
	  TextDrawHideForPlayer(playerid, Textdraw8);
	  TextDrawHideForPlayer(playerid, Textdraw9);

	  for(new x=0; x<sizeof(ScreenTXDS); x++)
	  {
		 if(x== 10 || x==5 || x == 9)  TextDrawHideForPlayer(playerid, ScreenTXDS[x]);
	     else TextDrawShowForPlayer(playerid, ScreenTXDS[x]);
	  }

	  new str[128];
	  format(str, sizeof(str), "SELECT * FROM `eastereggs` WHERE `UserID` = '%d' LIMIT 1", PlayerInfo[playerid][UserID]);
	  mysql_tquery(GTADM, str, "LoadEasterEggs", "d", playerid);

	  format(str, sizeof(str), "SELECT * FROM `horseshoes` WHERE `UserID` = '%d' LIMIT 1", PlayerInfo[playerid][UserID]);
	  mysql_tquery(GTADM, str, "LoadHorseShoeses", "d", playerid);

	  format(str, sizeof(str), "SELECT * FROM `oysters` WHERE `UserID` = '%d' LIMIT 1", PlayerInfo[playerid][UserID]);
	  mysql_tquery(GTADM, str, "LoadOysters", "d", playerid);

	  format(str, sizeof(str), "SELECT * FROM `spraytags` WHERE `UserID` = '%d' LIMIT 1", PlayerInfo[playerid][UserID]);
	  mysql_tquery(GTADM, str, "LoadSprayTags", "d", playerid);

	  format(str, sizeof(str), "SELECT * FROM `medals` WHERE `UserID` = '%d' LIMIT 1", PlayerInfo[playerid][UserID]);
	  mysql_tquery(GTADM, str, "LoadMedals", "d", playerid);

      GivePlayerMoneyEX(playerid, PlayerInfo[playerid][pCash]);

	  if(autologin != 1)
	  {
	    WelcomeText(playerid);
	  }
	  else
	  {
          SendInfoText(playerid, 3000, "~g~You have been automatically logged in");
//          SetTimerEx("DelayAutoLogin", 5000, false, "i", playerid);
	  }
      PlayerPlaySound(playerid, 2340, 0.0, 0.0, 0.0);
      SetPVarInt(playerid, "LOGGED", 1);

      if(PlayerInfo[playerid][pHouse] > 0)
      {
         new i=PlayerInfo[playerid][pHouse];
         if((hInfo[i][hOwnerID] != PlayerInfo[playerid][UserID]) || hExist[i]!=1)
         {
             PlayerInfo[playerid][pHouse] = -255;
             PlayerInfo[playerid][pCar] = -255;
         }
	  }

      PreloadAnimLib(playerid, "DANCING");
      PreloadAnimLib(playerid, "ON_LOOKERS");
      PreloadAnimLib(playerid, "COP_AMBIENT");
      PreloadAnimLib(playerid, "SUNBATHE");
      if((PlayerInfo[playerid][pCar] > 0) && PlayerInfo[playerid][pHouse] > 0)
      {
			new v, h=PlayerInfo[playerid][pHouse];
	     	v = CreateVehicle(PlayerInfo[playerid][pCar], hInfo[h][CarX], hInfo[h][CarY], hInfo[h][CarZ], hInfo[h][CarA], pMods[playerid][18], pMods[playerid][19], 3600000);
            ResetCarInfo(v);
         	VehicleInfo[v][ID] = v;
         	VehicleInfo[v][Owned] = 1;
            VehicleInfo[v][Player] = playerid;
            OnVehicleSpawn(v);
      }
  }
  return 1;
}/*
forward DelayAutoLogin(playerid);
public DelayAutoLogin(playerid)
{

	  new Float:x=GetPVarFloat(playerid, "x");
  	  if(x>0||x<0)
  	  {
        if(GetPVarInt(playerid, "skin")) SetSpawnInfo(playerid, 0, GetPVarInt(playerid, "skin"), GetPVarFloat(playerid, "x"), GetPVarFloat(playerid, "y"), GetPVarFloat(playerid, "z"), GetPVarFloat(playerid, "a"), 0, 0, 0, 0, 0, 0);
        else SetSpawnInfo(playerid, 0, 0, GetPVarFloat(playerid, "x"), GetPVarFloat(playerid, "y"), GetPVarFloat(playerid, "z"), GetPVarFloat(playerid, "a"), 0, 0, 0, 0, 0, 0);
        SetPVarInt(playerid, "LOGGED", 1);
		SpawnPlayer(playerid);
  	  }
  	  else
  	  {
		new rand = random(sizeof(Rs));
		if(PlayerInfo[playerid][pHouse] > 0)
		{
		 new h=PlayerInfo[playerid][pHouse];
		 SetSpawnInfo( playerid, 0, GetPVarInt(playerid, "skin"), hInfo[h][sX], hInfo[h][sY], hInfo[h][sZ], hInfo[h][SpawnA], 0, 0, 0, 0, 0, 0);
		}
 	    else SetSpawnInfo(playerid, 0, GetPVarInt(playerid, "skin"), Rs[rand][0], Rs[rand][1], Rs[rand][2], Rs[rand][3], 0, 0, 0, 0, 0, 0);
 	    SpawnPlayer(playerid);
        SetPVarInt(playerid, "LOGGED", 1);
  	  }
	  return 1;
}
*/

stock ShowLogin(playerid)
{
	new loginstr[200];
    format(loginstr, sizeof(loginstr), "{0059FF}Type your password below:", pName[playerid]);
    ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, "Login", loginstr, "Login", "Quit");
    SetPlayerCameraPosEx(playerid, 1221.2258, 695.7006, 23.3862);
	SetPlayerCameraLookAtEx(playerid, 1222.0439, 696.2729, 23.1812);
	Streamer_UpdateEx(playerid, 1221.2258, 695.7006, 23.386);

}


public OnPlayerConnect(playerid)
{
    SetPVarInt(playerid, "cantusecmds", true);

	TextDrawShowForPlayer(playerid, Textdraw0);
	TextDrawShowForPlayer(playerid, Textdraw1);
	TextDrawShowForPlayer(playerid, Textdraw2);
	TextDrawShowForPlayer(playerid, Textdraw3);
	TextDrawShowForPlayer(playerid, Textdraw4);
	TextDrawShowForPlayer(playerid, Textdraw5);
	TextDrawShowForPlayer(playerid, Textdraw6);
	TextDrawShowForPlayer(playerid, Textdraw7);
	TextDrawShowForPlayer(playerid, Textdraw8);
	TextDrawShowForPlayer(playerid, Textdraw9);

	SetPlayerCameraPosEx(playerid, 1221.2258, 695.7006, 23.3862);
	SetPlayerCameraLookAtEx(playerid, 1222.0439, 696.2729, 23.1812);
    Streamer_UpdateEx(playerid, 1247.7310, 700.0250, 16.6615);

	SetPlayerTime(playerid, 24, 0);
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, MAX_PLAYER_NAME);
	format(pName[playerid], 24, "%s", name);
	if(IsPlayerNPC(playerid)) return SpawnPlayer(playerid);
    for(new x=0; x<10; x++) if(IsPlayerAttachedObjectSlotUsed(playerid, x)) RemovePlayerAttachedObject(playerid, x);
    #if defined useirc
    IRC_OnPlayerConnect(playerid);//irc
    #endif
    PreloadAnims(playerid);

	PlayerTextDrawShow(playerid, pIntroTD[playerid][0]);
	PlayerTextDrawShow(playerid, pIntroTD[playerid][1]);
	///
/*	TextDrawShowForPlayer(playerid, Textdraw01);
	TextDrawShowForPlayer(playerid, Textdraw011);
	TextDrawShowForPlayer(playerid, Textdraw02);
	TextDrawShowForPlayer(playerid, Textdraw03);
	TextDrawShowForPlayer(playerid, Textdraw04);
	if(EventStarted == 0) TextDrawShowForPlayer(playerid, Textdraw05);
	TextDrawShowForPlayer(playerid, Textdraw06);
	TextDrawShowForPlayer(playerid, Textdraw07);
*/
	/*
	PlayerTextDrawShow(playerid, pIntroTD[playerid][2]);
	PlayerTextDrawShow(playerid, pIntroTD[playerid][3]);
	PlayerTextDrawShow(playerid, pIntroTD[playerid][4]);
	PlayerTextDrawShow(playerid, pIntroTD[playerid][5]);
	*/

    for(new x=0; x<sizeof(gSAZones); x++) Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON , ZoneIcon[x], E_STREAMER_PLAYER_ID, playerid);
	for(new x=0; x<sizeof(MissionMap); x++)
	{
	  Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[x], E_STREAMER_PLAYER_ID, playerid);
	  TogglePlayerDynamicCP(playerid, MissionCP[x], false);
	  if(x< sizeof(MissionPickup)) Streamer_RemoveArrayData(STREAMER_TYPE_PICKUP , MissionPickup[x], E_STREAMER_PLAYER_ID, playerid);
	}

	for(new x=0; x<sizeof(v_Mission_icons); x++)
	{
	  Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON , v_Mission_icons[x], E_STREAMER_PLAYER_ID, playerid);
	  TogglePlayerDynamicCP(playerid, v_Mission_cps[x], false);
	}
	for(new x=0; x<sizeof(v_Mission2_icons); x++)
	{
	  Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON , v_Mission2_icons[x], E_STREAMER_PLAYER_ID, playerid);
	  TogglePlayerDynamicCP(playerid, v_Mission2_cps[x], false);
	}

    //PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/52869044/intro_old.mp3"); //how i feel
    PlayAudioStreamForPlayer(playerid, "http://dl.dropboxusercontent.com/s/9j2ed1mjgtdlefo/intro.mp3"); //how i feel
	//PlayAudioStreamForPlayer(playerid, "http://gtadm.com/music/intro2.mp3");
//    PlayAudioStreamForPlayer(playerid, "https://dl.dropbox.com/u/52869044/intro.mp3");
   //https://dl.dropboxusercontent.com/s/6m2qbit21o5u258/4.mp3
    //PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/52869044/intro33.mp3"); // 2f2f
   /// PlayAudioStreamForPlayer(playerid, "https://gtadm.com/music/newintro.mp3"); // baby kill me kill me new
	//https://dl.dropboxusercontent.com/u/52869044/intro2.mp3
	//PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/52869044/intro2.mp3");//light the sky
//////	PlayAudioStreamForPlayer(playerid, "http://k002.kiwi6.com/hotlink/6cijyf1zbv/eazy-e_ft._2pac_the_game_-_how_we_do_remix.mp3");
	format(pEscName[playerid], 30, "%s", Escape_Name(pName[playerid]));

    SetPVarInt(playerid, "Connectted", true);


    ResetVaribles(playerid);

   	if(GetPlayerProxy(playerid) && con==1)
	{
		new string[256];
		format(string, sizeof(string), "» Failed Connection Attempt « {AA8202}%s %s has been excluded from the server (Proxy User)", pName[playerid], pIP(playerid));
		foreach (new i : Player) if(IsAdmin(i, 1)) SendClientMessage(i, ORANGE, string);
        printf("-Kick- %s has been kicked for proxy using", pName[playerid]);
		SetPVarInt(playerid, "DontCall_OnDisconnect", true);
		SendClientMessage(playerid, RED, "YOU ARE BANNED FROM THIS SERVER (Proxy User)!");
		StopAudioStreamForPlayer(playerid);
		SetTimerEx("banhim", 500, false, "i", playerid);
	}
	new str[500];
	format(str, sizeof(str), "SELECT *, TIMESTAMPDIFF(MINUTE, NOW(), DATE_ADD(Time, INTERVAL Period MINUTE))  FROM `bans` WHERE `NAME` = '%s' OR `GPCI` = '%s' AND `Ban_Type` ='3'", pEscName[playerid], pGPCI(playerid));
	mysql_tquery(GTADM, str, "BanCheck", "i", playerid);


    return 1;
}

stock OnPlayerConnects(playerid)
{
    for(new i = 0; i < 15; i++)
	   SendClientMessage(playerid, RED, "");
    CanOpenMenu[playerid] = 1;
    Spawned[playerid]=0;
    ShowGangZones(playerid);

    InHouse[playerid] = -255;
    PassCount[playerid] = 0;
    Invited[playerid] = -255;
	CreatePlayerTD(playerid);
	SetPlayerColor(playerid, PLAYER_COLOR_TEAM_0FF);

	new string[256];
    format(string, sizeof(string), "SELECT *, TIMESTAMPDIFF(MINUTE, NOW(), DATE_ADD(last_login, INTERVAL 30 MINUTE)) FROM `users` WHERE `Name` = '%s' ORDER BY `Score` LIMIT 1", pEscName[playerid]);
    mysql_tquery(GTADM, string, "MySQL_Account_Check", "d", playerid);
    new plrIP[16];
    GetPlayerIp(playerid, plrIP, sizeof(plrIP));
    new str1[256], str_[256];//str2[256];
	//new id[256];//
	new country[60];//
    new ip[20];//
    GetPlayerIp(playerid, ip, 20);//
    GetPlayerCountry(playerid, country);//

    format(str1, sizeof(str1), "{6EF83C}«» {3399ff}%s (%d){ACACAC} has joined the GTADM Server {FFAF00}[%d/%d]", pName[playerid], playerid, Iter_Count(Player), pmax);
    format(str_, sizeof(str_), "{6EF83C}«» {3399ff}%s (%d){ACACAC} has joined the GTADM Server | %s - %s {FFAF00}[%d/%d]", pName[playerid], playerid, country, plrIP, Iter_Count(Player), pmax);
	printf("-Join- %s (%d) has joined the GTADM Server | %s - %s [%d/%d]", pName[playerid], playerid, country, plrIP, Iter_Count(Player), pmax);
	foreach (new i : Player)
	{
	   if(i != playerid)
	   {
	      if(PlayerInfo[i][pAdmin] < 1) SendClientMessage(i, GRAY, str1);
	      if(secondrconoff[i] == 1) SendClientMessage(i, GRAY, str_);
	      else if(PlayerInfo[i][pAdmin] >= 1) SendClientMessage(i, GRAY, str_);
       }
	}

    format(str1, sizeof(str1), "Join - ~g~~h~%s ~w~has ~g~joined~w~ the server!", pName[playerid]);
    if(HideShit[playerid] == 0) SendaMsg(str1);

    SetPlayerVirtualWorldEX(playerid, 0);

//admin base by simon near ammulv
	/*RemoveBuildingForPlayer(playerid, 1261, 2100.2656, 902.8516, 25.7656, 0.25);
	RemoveBuildingForPlayer(playerid, 9170, 2117.1250, 923.4453, 12.9219, 0.25);
	RemoveBuildingForPlayer(playerid, 1267, 2100.2656, 902.8516, 25.7656, 0.25);
	RemoveBuildingForPlayer(playerid, 9184, 2097.4609, 900.7734, 31.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 3465, 2114.9063, 925.5078, 11.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 3465, 2109.0469, 925.5078, 11.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 3465, 2109.0469, 914.7188, 11.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 3465, 2114.9063, 914.7188, 11.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 9169, 2117.1250, 923.4453, 12.9219, 0.25);
	RemoveBuildingForPlayer(playerid, 3465, 2120.8203, 925.5078, 11.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 3465, 2120.8203, 914.7188, 11.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 9192, 2136.1641, 944.1328, 15.0547, 0.25);*/
    RemoveBuildingForPlayer(playerid, 16774, 800.3281, 1672.1250, 5.8750, 0.25);
//trucking
    RemoveBuildingForPlayer(playerid, 12956, 96.3281, -261.1953, 3.8594, 0.25);
    RemoveBuildingForPlayer(playerid, 17066, -86.8750, -1207.2422, 1.6875, 0.25);

	//kurtis club at /sf house
	RemoveBuildingForPlayer(playerid, 11091, -2133.5547, -132.7031, 36.1328, 0.25);
	RemoveBuildingForPlayer(playerid, 11376, -2144.3516, -132.9609, 38.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 11011, -2144.3516, -132.9609, 38.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 11009, -2128.5391, -142.8438, 39.1406, 0.25);
	RemoveBuildingForPlayer(playerid, 1278, -2137.6172, -110.9375, 48.3516, 0.25);

//CTF

//
	RemoveBuildingForPlayer(playerid, 9280, -2855.2813, 2234.7344, 170.1250, 123.0);
    RemoveBuildingForPlayer(playerid, 10793, -1604.0391, 22.7266, 35.5703, 123.0);
    RemoveBuildingForPlayer(playerid, 10794, -1550.8281, 75.9297, 7.0000, 123.0);
    RemoveBuildingForPlayer(playerid, 10795, -1552.4375, 74.3203, 17.0469, 123.0);
    RemoveBuildingForPlayer(playerid, 11329, -1552.4375, 74.3203, 17.0469, 123.0);
    RemoveBuildingForPlayer(playerid, 11330, -1604.0391, 22.7266, 35.5703, 123.0);
    RemoveBuildingForPlayer(playerid, 11331, -1550.8281, 75.9297, 7.0000, 123.0);
    RemoveBuildingForPlayer(playerid, 3333, -178.7188, 326.5391, -3.5391, 123.0);
    RemoveBuildingForPlayer(playerid, 3333, -158.3516, 403.9063, -3.5391, 123.0);
    RemoveBuildingForPlayer(playerid, 3382, -176.3516, 367.5234, 17.6953, 123.0);
    RemoveBuildingForPlayer(playerid, 3382, -196.7891, 290.1797, 17.6953, 123.0);
    RemoveBuildingForPlayer(playerid, 3382, -155.9844, 444.8906, 17.6953, 123.0);
    RemoveBuildingForPlayer(playerid, 16688, -168.3203, 367.2422, 10.6641, 123.0);
    RemoveBuildingForPlayer(playerid, 3381, -196.7891, 290.1797, 17.6953, 123.0);
    RemoveBuildingForPlayer(playerid, 3330, -178.7188, 326.5391, -3.5391, 123.0);
    RemoveBuildingForPlayer(playerid, 3381, -176.3516, 367.5234, 17.6953, 123.0);
    RemoveBuildingForPlayer(playerid, 16358, -168.3203, 367.2422, 10.6641, 123.0);
    RemoveBuildingForPlayer(playerid, 3330, -158.3516, 403.9063, -3.5391, 123.0);
    RemoveBuildingForPlayer(playerid, 3381, -155.9844, 444.8906, 17.6953, 123.0);
    RemoveBuildingForPlayer(playerid, 3337, -127.8672, 487.6953, 9.2188, 123.0);
    RemoveBuildingForPlayer(playerid, 4516, -141.3359, 468.6484, 12.9141, 123.0);
    RemoveBuildingForPlayer(playerid, 4517, -193.8281, 269.5078, 12.8906, 123.0);
//ls mall
    RemoveBuildingForPlayer(playerid, 6130, 1117.5859, -1490.0078, 32.7188, 0.25);
    RemoveBuildingForPlayer(playerid, 6255, 1117.5859, -1490.0078, 32.7188, 0.25);
    RemoveBuildingForPlayer(playerid, 792, 1128.7344, -1518.4922, 15.2109, 0.25);
    RemoveBuildingForPlayer(playerid, 792, 1144.3984, -1512.7891, 15.2109, 0.25);
    RemoveBuildingForPlayer(playerid, 792, 1152.3828, -1502.5391, 15.2109, 0.25);
    RemoveBuildingForPlayer(playerid, 792, 1118.0156, -1467.4688, 15.2109, 0.25);
    RemoveBuildingForPlayer(playerid, 792, 1139.9219, -1467.4688, 15.2109, 0.25);
    RemoveBuildingForPlayer(playerid, 792, 1139.9219, -1456.4375, 15.2109, 0.25);
    RemoveBuildingForPlayer(playerid, 792, 1118.0156, -1456.4375, 15.2109, 0.25);
    RemoveBuildingForPlayer(playerid, 792, 1139.9219, -1445.1016, 15.2109, 0.25);
    RemoveBuildingForPlayer(playerid, 792, 1118.0156, -1445.1016, 15.2109, 0.25);
    RemoveBuildingForPlayer(playerid, 792, 1139.9219, -1434.0703, 15.2109, 0.25);
    RemoveBuildingForPlayer(playerid, 792, 1118.0156, -1434.0703, 15.2109, 0.25);
    RemoveBuildingForPlayer(playerid, 5767, 1160.9609, -1180.5781, 70.4141, 0.25);
    RemoveBuildingForPlayer(playerid, 1529, 1206.2500, -1162.0000, 23.8750, 0.25);
    RemoveBuildingForPlayer(playerid, 5964, 1160.9609, -1180.5781, 70.4141, 0.25);
    RemoveBuildingForPlayer(playerid, 5822, 1123.8203, -1198.8516, 25.7188, 0.25);
    RemoveBuildingForPlayer(playerid, 5766, 1175.1797, -1180.5469, 58.0938, 0.25);

	return 1;
}

stock OnPlayerRegisterLater(playerid)
{

  if(!IsPlayerNPC(playerid))
  {
	SetPVarInt(playerid, "LOGGED", 2);
	WelcomeText(playerid, 1);
	ApplyAnimation(playerid, "SUNBATHE", "ParkSit_M_IdleC", 4.1, 0, 1, 1, 1, 1);
	OnPlayerRequestClass(playerid, 0);

 	TextDrawHideForPlayer(playerid, Textdraw0);
	TextDrawHideForPlayer(playerid, Textdraw1);
	TextDrawHideForPlayer(playerid, Textdraw2);
	TextDrawHideForPlayer(playerid, Textdraw3);
	TextDrawHideForPlayer(playerid, Textdraw4);
	TextDrawHideForPlayer(playerid, Textdraw5);
	TextDrawHideForPlayer(playerid, Textdraw6);
	TextDrawHideForPlayer(playerid, Textdraw7);
	TextDrawHideForPlayer(playerid, Textdraw8);
	TextDrawHideForPlayer(playerid, Textdraw9);

	for(new x=0; x<sizeof(ScreenTXDS); x++)
	{
	 if(x== 10 || x==5 || x == 9)  TextDrawHideForPlayer(playerid, ScreenTXDS[x]);
	 else TextDrawShowForPlayer(playerid, ScreenTXDS[x]);
	}

  }
}

stock OnPlayerRegister(playerid, password[])
{
  if(!IsPlayerNPC(playerid))
  {
    if(!strlen(password)) ShowPlayerDialog(playerid, DIALOG_REGISTER, DIALOG_STYLE_PASSWORD, ""LIGHTRED_"Registration", ""RED_"You have entered an invalid password\n\n"WHITE_"Enter your password below to register a new account:", "Register", "");
    else if(strlen(password) > 32) ShowPlayerDialog(playerid, DIALOG_REGISTER, DIALOG_STYLE_PASSWORD, ""LIGHTRED_"Registration", ""RED_"The password is too long\n\n"WHITE_"Enter a new password below to register your account:", "Register", "");
    else if(strlen(password) < 4 ) ShowPlayerDialog(playerid, DIALOG_REGISTER, DIALOG_STYLE_PASSWORD, ""LIGHTRED_"Registration", ""RED_"The password is too short\n\n"WHITE_"Enter a new password below to register your account:", "Register", "");
    else
    {
		new str[320];
        format(str, sizeof(str), "INSERT INTO `users` (`Name`, `Password`, `Online`, `IP`, `GPCI`) VALUES ('%s', md5('%s'), 1, '%s', '%s')", pEscName[playerid], Escape_String(password), Escape_Name(pIP(playerid)), Escape_String(pGPCI(playerid)));
        mysql_tquery(GTADM, str, "GetUserID", "d", playerid);
        WelcomeText(playerid);

/////////Reset Varibles////////////////////////////////
        SetPVarInt(playerid, "LOGGED", 1);
        SetPlayerColor( playerid, PlayerColors[random(200)] );
///////////////////////////////////////////////////////
        new dialogstr[300];
	    format(dialogstr, sizeof(dialogstr), ""ORANGE_"Welcome to the GTADM community.\n"ORANGE_"Your account has been created!\n"LIGHTYELLOW_"\n\nName: "WHITE_"%s\n"LIGHTYELLOW_"Password: "WHITE_"%s\n\n- Type (/help) to get more information about the server\n- Type (/cmds) to see the list of the available commands", pName[playerid], password);
        ShowPlayerDialog(playerid, 177, DIALOG_STYLE_MSGBOX, "Account Information", dialogstr, "Show help", "Skip >>");
		PlayerInfo[playerid][pScore] = 0;
		OnPlayerRequestClass(playerid, 0);

		TextDrawHideForPlayer(playerid, Textdraw0);
		TextDrawHideForPlayer(playerid, Textdraw1);
		TextDrawHideForPlayer(playerid, Textdraw2);
		TextDrawHideForPlayer(playerid, Textdraw3);
		TextDrawHideForPlayer(playerid, Textdraw4);
		TextDrawHideForPlayer(playerid, Textdraw5);
		TextDrawHideForPlayer(playerid, Textdraw6);
		TextDrawHideForPlayer(playerid, Textdraw7);
		TextDrawHideForPlayer(playerid, Textdraw8);
		TextDrawHideForPlayer(playerid, Textdraw9);

	    for(new x=0; x<sizeof(ScreenTXDS); x++)
	    {
		 if(x== 10 || x==5 || x == 9)  TextDrawHideForPlayer(playerid, ScreenTXDS[x]);
	     else TextDrawShowForPlayer(playerid, ScreenTXDS[x]);
	    }
    }
  }
  return 1;
}


stock SavePLastPos(playerid)
{
//     SaveComp(playerid);
	 new Float:x, Float:y, Float:z, Float:a, interior, Class, skin, Float:Health, Float:Armour, W[8], A[8];
	 GetPlayerPos(playerid, x, y, z);
	 GetPlayerFacingAngle(playerid, a);
	 skin=GetPlayerSkin(playerid);
	 Class=pClass[playerid];
	 interior=GetPlayerInterior(playerid);
     GetPlayerHealth(playerid, Health), GetPlayerArmour(playerid, Armour);

     GetPlayerWeaponData( playerid, 1, W[0], A[0] );
     GetPlayerWeaponData( playerid, 8, W[1], A[1] );
     GetPlayerWeaponData( playerid, 2, W[2], A[2] );
     GetPlayerWeaponData( playerid, 3, W[3], A[3] );
     GetPlayerWeaponData( playerid, 4, W[4], A[4] );
     GetPlayerWeaponData( playerid, 5, W[5], A[5] );
     GetPlayerWeaponData( playerid, 6, W[6], A[6] );
     GetPlayerWeaponData( playerid, 9, W[7], A[7] );

     if( (GetPlayerVirtualWorld(playerid) != 0) || (GetPlayerState(playerid) == 7) ) x=0.0, y=0.0, z=0.0, a=0.0;
     if(GetPlayerVirtualWorld(playerid) > 0 || GetPVarInt(playerid, "inFallout"))
     {
          W[0] = pWeapons[playerid][1], A[0] = pAmmo[playerid][1];
          W[1] = pWeapons[playerid][8], A[1] = pAmmo[playerid][8];
          W[2] = pWeapons[playerid][2], A[2] = pAmmo[playerid][2];
          W[3] = pWeapons[playerid][3], A[3] = pAmmo[playerid][3];
          W[4] = pWeapons[playerid][4], A[4] = pAmmo[playerid][4];
          W[5] = pWeapons[playerid][5], A[5] = pAmmo[playerid][5];
          W[6] = pWeapons[playerid][6], A[6] = pAmmo[playerid][6];
          W[7] = pWeapons[playerid][9], A[7] = pAmmo[playerid][9];
     }
     new query[1024];
     format(query, sizeof(query), "UPDATE `users` SET `Muted` = %d,`Jailed` = %d,`Cash` = %d,`pHours` = %d,`pMins` = %d,`Accidents` = %d,`Online` = 0,`Last_x` = %f,`Last_y` = %f,`Last_z` = %f,`Last_a` = %f,`Last_interior` = %d,`Last_skin` = %d,`Last_class` = %d,`Last_health` = %f,`Last_armour` = %f,`last_login` = CURRENT_TIMESTAMP,`w1`=%d,`w2`=%d,`w3`=%d,`w4`=%d,`w5`=%d,`w6`=%d,`w7`=%d,`w8`=%d,`a1`=%d,`a2`=%d,`a3`=%d,`a4`=%d,`a5`=%d,`a6`=%d,`a7`=%d,`a8`=%d WHERE `UserID` = '%d'",
	 PlayerInfo[playerid][Muted],PlayerInfo[playerid][Jailed],GetPlayerMoneyEx(playerid),PlayerInfo[playerid][pHours],PlayerInfo[playerid][pMins],PlayerInfo[playerid][vDamage],
     x,y,z,a,interior,skin,Class,Health,Armour,W[0],W[1],W[2],W[3],W[4],W[5],W[6],W[7],A[0],A[1],A[2],A[3],A[4],A[5],A[6],A[7],PlayerInfo[playerid][UserID]);
     mysql_query(GTADM, query);
}

public OnPlayerDisconnect(playerid, reason)
{
     if(GetPVarInt(playerid, "InOutRun")) ORLoser(playerid);
	 if(Iter_Contains(lotoplayers, playerid))
	 {
		  Iter_Remove(lotoplayers, playerid);
		  Iter_Remove(lotonumbers, LotoNumber[playerid]);
	 }
     Iter_Remove(pNos, playerid);
   /*  if(IsBeingSpeced[playerid] == 1)
     {
        foreach (new i : Player)
        {
            if(spectatorid[i] == playerid)
            {
              SpecNext(playerid);
            }
        }
     }*/
	 new z=GetPlayerGangZone(playerid);
     new g=PlayerInfo[playerid][pGang];
	 if(g >= 0 && Spawned[playerid] == 1)
	 {
	  if(inGw[g] && z == GwTurf[g])
	  {
		 new str[128];
	     pInGW[playerid]=0;
	     format(str, sizeof(str), "{AA8202}» Gang action «{FFC307} %s has left the server! Your gang has lost 1 point.", pName[playerid]);
		 if(GetPVarInt(playerid, "RACER")) for(new x=0; x<26; x++) PlayerTextDrawHide(playerid, GwTD[playerid][x]);
         GwKills[g]--;
		 foreach(new i : Player) if(PlayerInfo[i][pGang]==g) SendClientMessage(i, ORANGE, str);
	  }
	 }
	 #if defined USE_NEWINFOMSGS
     if(InfoTextCreatedmsg[playerid] == true)
     {
		TextDrawDestroy(Text:InfoTextdrawmsg[playerid]);
    	DEBUG_TextDrawsUsed --;
		InfoTextCreatedmsg[playerid] = false;
	 }

     if(InfoTextCreatedmsg2[playerid] == true)
     {
		TextDrawDestroy(Text:InfoTextdrawmsg2[playerid]);
    	DEBUG_TextDrawsUsed --;
		InfoTextCreatedmsg2[playerid] = false;
	 }
	 #endif
	 #if defined USE_POOL
	 if(GetPVarInt(playerid, "poolguy1") || GetPVarInt(playerid, "poolguy2"))
	 {
		 if(poolmode == 2)
		 {
			if(playerid == poolguy1)
			{
			 if(IsPlayerConnected(poolguy2))
			 {
				 new str[128];
				 format(str, sizeof(str), "{FF8C00}» Pool «{7FBA00} %s has won the pool against %s.", pName[poolguy2], pName[poolguy1]);
				 SendClientMessageToAll(-1, str);
				 RemoveFromPool(poolguy2);
				 PoolWinner(poolguy2);
			 }
			}
			else if(playerid == poolguy2)
			{
			 if(IsPlayerConnected(poolguy1))
			 {
				 new str[128];
				 format(str, sizeof(str), "{FF8C00}» Pool «{7FBA00} %s has won the pool against %s.", pName[poolguy1], pName[poolguy2]);
				 SendClientMessageToAll(-1, str);
				 RemoveFromPool(poolguy1);
				 PoolWinner(poolguy1);
			 }
			}
		 }
		 poolguy1=-1;
		 poolguy2=-1;
		 poolmode=0;
	 }
	 #endif
	/* for(new i; i<MAX_PLAYERS; i++) //Targetting system
	 {
	    if(IsPlayerConnected(i))
	    {
	        if(PlayerTargetID[i] == playerid)
	        {
			    if(PlayerTargetUpdatetRunning[i] == true)
			    {
			        KillTimer(PlayerTargetUpdatet[i]);
			        PlayerTargetUpdatetRunning[i] = false;
			    }

				if(PlayerTargetTextCreated[i] == true)
				{
				    DeletePlayer3DTextLabel(i, PlayerText3D:PlayerTargetText[i]);
				    PlayerTargetTextCreated[i] = false;
				}
        		PlayerTargetID[i] = -1;
	        }
	    }
	 }*/
     if(Iter_Contains(InSumo, playerid))
     {
        if(IsValidDynamic3DTextLabel(Sumo3D[playerid])) DestroyDynamic3DTextLabel(Sumo3D[playerid]);
		Sumo3D[playerid]=INVALID_3DTEXT_ID;

        if(SumoCar[playerid] > 0) DestroyVehicleEX(SumoCar[playerid]);
        SumoCar[playerid]=0;
		Iter_Remove(InSumo, playerid );
		foreach(new i : InSumo)
		{
		  if(SumoSpec[i] == 1 && SumoSpecID[i]==playerid)
		  {
		   sumoshow(i);
		  }
		}
	 }
	  #if defined USEDRIFT
	 if(Iter_Contains(Drifter, playerid)) Iter_Remove(Drifter, playerid);
	 #endif
	 #if defined useirc
     IRC_OnPlayerDisconnect(playerid, reason);//irc
     #endif
	 SaveEXP(playerid);

	 Destroyp3D(playerid);
	 PlayerInfo[playerid][HeadText][0]='\0';

	 PlayerIsFrozen[playerid] = false;
	 if(playerid == PowerUpPlayer[0])
	 {
	    PowerUpPlayer[0]=-1;
	    if(IsValidDynamicPickup(PowerUpPickup[0])) DestroyDynamicPickup(PowerUpPickup[0]);
	    PowerUpPickup[0]=CreateDynamicPickup(1241, 23, -2511.0571, 775.0422, 35.1719, 0);
	 }
	 else if(playerid == PowerUpPlayer[1])
	 {
	    PowerUpPlayer[1]=-1;
	    if(IsValidDynamicPickup(PowerUpPickup[1])) DestroyDynamicPickup(PowerUpPickup[1]);
	    PowerUpPickup[1]=CreateDynamicPickup(1241, 23, 2062.4978, -1785.6956, 13.5469, 0);
	 }
	 else if(playerid == PowerUpPlayer[2])
	 {
	    PowerUpPlayer[2]=-1;
	    if(IsValidDynamicPickup(PowerUpPickup[2])) DestroyDynamicPickup(PowerUpPickup[2]);
	    PowerUpPickup[2]=CreateDynamicPickup(1241, 23, -852.6091, 1877.5527, 22.9245, 0);
	 }
	 else if(playerid == PowerUpPlayer[3])
	 {
	    PowerUpPlayer[3]=-1;
	    if(IsValidDynamicPickup(PowerUpPickup[3])) DestroyDynamicPickup(PowerUpPickup[3]);
	    PowerUpPickup[3]=CreateDynamicPickup(1241, 23, 2089.0635, 2405.9089, 74.5786, 0);
	 }
	 else if(playerid == PowerUpPlayer[4])
	 {
	    PowerUpPlayer[4]=-1;
	    if(IsValidDynamicPickup(PowerUpPickup[4])) DestroyDynamicPickup(PowerUpPickup[4]);
	    PowerUpPickup[4]=CreateDynamicPickup(1241, 23, -2473.6848, 1549.7599, 33.2273, 0);
	 }
	 /*
	 else if(playerid == PowerUpPlayer[5])
	 {
	    PowerUpPlayer[5]=-1;
	    if(IsValidDynamicPickup(PowerUpPickup[5])) DestroyDynamicPickup(PowerUpPickup[5]);
	    PowerUpPickup[5]=CreateDynamicPickup(1241, 23, 2162.3809, -102.6472, 2.7500, 0);
	 }
*/

	 new as=GetPVarInt(playerid, "pOurPlace");
	 if(GetPVarInt(playerid, "pOurPlace") && GetPVarInt(playerid, "pOur")) PourPlaces[as]=0;
	 if(GetPVarInt(playerid, "PourEditing"))
	 {
		new r=PourEditID;
		fremove(PourPath(r));
	    for(new x=0; x<12; x++)
	    {
	     	ParkOurInfo[r][SpawnsX][x]=0;
	     	ParkOurInfo[r][SpawnsY][x]=0;
	     	ParkOurInfo[r][SpawnsZ][x]=0;
	     	ParkOurInfo[r][SpawnsA][x]=0;
	    }
	 	ParkOurInfo[r][CPcount]=0;
	 	PourEditOn=0;
	    for(new x=0; x<50; x++)
	    {
	     	ParkOurCPS[r][x][CPposX]=0;
	    	ParkOurCPS[r][x][CPposY]=0;
	    	ParkOurCPS[r][x][CPposZ]=0;
	    	ParkOurCPS[r][x][CPCar]=0;
	    }

	    DeletePVar(playerid, "PourEditing");
		for(new x=0; x<50; x++) if(IsValidDynamicRaceCP(EDITORCPS[playerid][x])) DestroyDynamicRaceCP(EDITORCPS[playerid][x]);

	 }

	 if(IsValidDynamicObject(rampobj[playerid]) && rampobj[playerid] >= 0)
	 {
	  DestroyDynamicObject(rampobj[playerid]);
	  rampobj[playerid]=INVALID_OBJECT_ID;
	 }

	 for(new x=0; x<5; x++) Blocked[playerid][x]=-1;
	 Driving[playerid]=0;
	 pInGW[playerid]=0;
	 pPausex[playerid]=200000;
	 pPausey[playerid]=200000;
	 pPausez[playerid]=200000;
	 if(SecV[playerid] != INVALID_VEHICLE_ID)
	 {
	  if(SCar[SecV[playerid]]!=0) DestroyVehicleEX(SecV[playerid]);
	  SCar[SecV[playerid]] = 0;
	 }
	 if(PlayerInfo[playerid][pHouse] > 0) ResetHouseTimeStamp(PlayerInfo[playerid][pHouse]);
	 if(GetPVarInt(playerid, "GateEditing")) stopgateeditor(playerid);
	 if(GetPVarInt(playerid, "DontCall_OnDisconnect"))
	 {
	    pName[playerid][0]=EOS;
	    pEscName[playerid][0]=EOS;
	 }
	 else
	 {
	 if(IsPlayerNPC(playerid))
	 {
	    new str[128];
	    format(str, sizeof(str), "unbanip %s", pIP(playerid));

	    if(!strcmp(pName[playerid], "Jonny"))
	    {
	            ConnectNPC("Jonny", "mynpc");
	            SendRconCommand(str);
	            SendRconCommand("reloadbans");
	    }
	    else if(!strcmp(pName[playerid], "2ShotMaster"))
	    {
	            ConnectNPC("2ShotMaster", "2shotnpc");
	            SendRconCommand(str);
	            SendRconCommand("reloadbans");
	    }
	    else if(!strcmp(pName[playerid], "Tram_Driver"))
	    {
	            ConnectNPC("Tram_Driver", "tram");
	            SendRconCommand(str);
	            SendRconCommand("reloadbans");
	    }
	    else if(!strcmp(pName[playerid], "Train_Driver"))
	    {
	            ConnectNPC("Train_Driver", "train_ls");
	            SendRconCommand(str);
	            SendRconCommand("reloadbans");
	    }

	 }
	 for(new ad=0; ad<28; ad++) if(IsValidPlayerObject(playerid, MissionObjects[playerid][ad])) DestroyPlayerObject(playerid, MissionObjects[playerid][ad]);
	 for(new x=0; x<10; x++) if(IsPlayerAttachedObjectSlotUsed(playerid, x)) RemovePlayerAttachedObject(playerid, x);
	 if(GetPVarInt(playerid, "RACER")) RemoveFromRace(playerid);
	 new vehicleid = PlayerCar(playerid);
	 if(vehicleid >= 0)
	 {
	   RemoveCustomMods(vehicleid);
	   DestroyVehicleEX(vehicleid);
	   VehicleInfo[vehicleid][ID]=-1;
	   VehicleInfo[vehicleid][Player]=-1;
	   VehicleInfo[vehicleid][Owned]=0;
	 }
	 DestroyPlayerTD(playerid);
	 if((GetPVarInt(playerid, "LOGGED"))==1) SavePLastPos(playerid);
	//
	 pMoney[playerid]=0;
	 if(GetPVarInt(playerid, "InHay"))
	 {
	    DeletePVar(playerid, "InHay");
	    new count=CountHay();
		if(count == 0)
		{
           KillTimer(haygametimer);
	       KillTimer(haygametimer2);
	       haygametimer=-1;
	       haygametimer2=-1;
	       haygamestarted = 0;
	       //TextDrawHideForPlayer(playerid, Hwaiting);
		   SetDynamicObjectPos(MovingHay[0], -1033.86, 814.61, 78.30);
		   SetDynamicObjectPos(MovingHay2[18], -380.20999, 618.88000, 1002.75000);
		   SetDynamicObjectPos(MovingHay3[13], 315.42001, -1185.25000, 1002.78003);
		   SetDynamicObjectRot(MovingHay3[13], 0.0, 0.0, 0.0);
           SendClientMessageToAll(0xF86EFFFF, "» Hay Game «{FF6EC0} The Hay Game has been cancelled {F86EFF}(Not enough players)");
		}
	 }
	/* if(eventhit[playerid] == 1)
	 {
 	   EventStarted =0;
       EventType=0;
	   EventStartTime=0;
	   SendClientMessageToAll(0xE8AF02FF, "» Event « {CDF590}The Event has been cancelled, the target has left the server.");
	   TextDrawHideForAll(EventTD);
	 }*/
	 if(GetPVarInt(playerid, "Signed4Lms")) Remove_From_Lms(playerid, 0);
	//Fallout
	 else if( GetPVarInt(playerid, "inFallout"))
	 {
		RemoveFromFallout(playerid, 0);
	 }
	 if(GetPVarInt(playerid, "TDM"))
	 {
	 	new count,
	 	d=GetPVarInt(playerid, "TDM");
		foreach(new i : Player)
		{
	      new DmID= GetPVarInt(i, "TDM");
	      if(DmID == d) count ++;
		}
		if(count == 0) TDMScore[d-1][0]=0, TDMScore[d-1][1]=0;

	 }
	 else if(GetPVarInt(playerid, "INDM")) Remove_From_Dm(playerid);
	 if( DuelInfo[player1] == playerid ||  DuelInfo[player2] == playerid)
	 {
	    if(DuelInfo[stat]==2)
		{
		  if(playerid == DuelInfo[player1]) EndDuel(DuelInfo[player2], DuelInfo[player1]);
	      else if(playerid == DuelInfo[player2]) EndDuel(DuelInfo[player1], DuelInfo[player2]);
		}
		else
		{
	  	  DuelInfo[stat]=0, DuelInfo[player1]=-225, DuelInfo[player2]=-1;
		}
	 }
	 if(!IsPlayerNPC(playerid))
	 {
	   new str[128];
	   switch(reason)
	   {
	        case 0: format(str, sizeof(str), "{F81414}«» {3399ff}%s (%d) {ACACAC}has left the server {FFAF00}[%d/%d] {ACACAC}(Crashed)", pName[playerid], playerid, CountPlayers(playerid), pmax), SendClientMessageToAll(GRAY, str);
	        case 1: format(str, sizeof(str), "{F81414}«» {3399ff}%s (%d) {ACACAC}has left the server {FFAF00}[%d/%d] {ACACAC}(Leaving)", pName[playerid], playerid, CountPlayers(playerid), pmax), SendClientMessageToAll(GRAY, str);
	        case 2: format(str, sizeof(str), "{F81414}«» {3399ff}%s (%d) {ACACAC}has left the server {FFAF00}[%d/%d] {ACACAC}(Kicked/Banned)", pName[playerid], playerid, CountPlayers(playerid), pmax), SendClientMessageToAll(GRAY, str);
	   }
	   format(str, sizeof(str), "Leave - ~g~~h~%s ~w~has ~r~left ~w~the server!", pName[playerid]);
	   if(HideShit[playerid] == 0) SendaMsg(str);
	   //SetPlayerColor(playerid, PLAYER_COLOR_TEAM_0FF);
	  // SendDeathMessage(INVALID_PLAYER_ID, playerid, 201);

	 }
	 }
	 return 1;
}
	/* if(!IsPlayerNPC(playerid))
	 {
	   switch(reason)
	   {
	        case 0:
			{
              new str[256];
              new str_[256];
              new country[60];//
 		      new ip[20];//
              new plrIP[16];
              GetPlayerIp(playerid, plrIP, sizeof(plrIP));
 	          GetPlayerIp(playerid, ip, 20);//
 	          GetPlayerCountry(playerid, country);//
              foreach(new i : Player) if(!IsAdmin(i, 1)) format(str, sizeof(str), "{F81414}«» {3399ff}%s (%d) {ACACAC}has left the server {FFAF00}[%d/%d] {ACACAC}(Crashed)", pName[playerid], playerid, CountPlayers(playerid), pmax), SendClientMessage(i, -1, str);
              foreach(new i : Player) if(IsAdmin(i, 1)) format(str_, sizeof(str_), "{6EF83C}«» {3399ff}%s (%d){ACACAC} has left the server (Crashed) | %s - %s {FFAF00}[%d/%d]", pName[playerid], playerid, country, plrIP, Iter_Count(Player), pmax), SendClientMessage(i, -1, str_);
	        }
			case 1:
			{
              new str[256];
              new str_[256];
              new country[60];//
 		      new ip[20];//
              new plrIP[16];
              GetPlayerIp(playerid, plrIP, sizeof(plrIP));
 	          GetPlayerIp(playerid, ip, 20);//
 	          GetPlayerCountry(playerid, country);//
              foreach(new i : Player) if(!IsAdmin(i, 1)) format(str, sizeof(str), "{F81414}«» {3399ff}%s (%d) {ACACAC}has left the server {FFAF00}[%d/%d] {ACACAC}(Leaving)", pName[playerid], playerid, CountPlayers(playerid), pmax), SendClientMessage(i, -1, str);
              foreach(new i : Player) if(IsAdmin(i, 1)) format(str_, sizeof(str_), "{6EF83C}«» {3399ff}%s (%d){ACACAC} has left the server (Leaving) | %s - %s {FFAF00}[%d/%d]", pName[playerid], playerid, country, plrIP, Iter_Count(Player), pmax), SendClientMessage(i, -1, str_);
			}
         	case 2:
		    {
              new str[256];
              new str_[256];
              new country[60];//
 		      new ip[20];//
              new plrIP[16];
              GetPlayerIp(playerid, plrIP, sizeof(plrIP));
 	          GetPlayerIp(playerid, ip, 20);//
 	          GetPlayerCountry(playerid, country);//
              foreach(new i : Player) if(!IsAdmin(i, 1)) format(str, sizeof(str), "{F81414}«» {3399ff}%s (%d) {ACACAC}has left the server {FFAF00}[%d/%d] {ACACAC}(Kicked/Banned)", pName[playerid], playerid, CountPlayers(playerid), pmax), SendClientMessage(i, -1, str);
              foreach(new i : Player) if(IsAdmin(i, 1)) format(str_, sizeof(str_), "{6EF83C}«» {3399ff}%s (%d){ACACAC} has left the server (Kicked/Banned) | %s - %s {FFAF00}[%d/%d]", pName[playerid], playerid, country, plrIP, Iter_Count(Player), pmax), SendClientMessage(i, -1, str_);
         	}
	   }
	   new str[256];
	   format(str, sizeof(str), "Leave - ~w~%s has ~r~left ~w~the server!", pName[playerid]);
	   if(HideShit[playerid] == 0) SendaMsg(str);

	 }
	 }
	 return 1;
}*/
stock CountPlayers(playerid)
{
	new count;
	foreach(new i : Player)
	{
	  if(i!=playerid) count++;
	}
	return count;
}
public OnRconLoginAttempt(ip[], password[], success)
{
    if(!success) //If the password was incorrect
    {
        printf("-Failed- RCON LOGIN BY IP %s USING PASSWORD %s", ip, password);

	    new string[128], string2[128];
        format(string2, sizeof(string2), "{E01638}FAILED RCON LOGIN ATTEMPT BY %s USING PASSWORD \"%s\"", ip, password);
        format(string, sizeof(string), "{E01638}FAILED RCON LOGIN ATTEMPT BY %s ", ip);
        foreach (new i : Player)
		{
		   if(IsAdmin(i, 1) && !IsAdmin(i, 10)) SendClientMessage(i, 0x1AFF00FF, string);
		   if(IsAdmin(i, 10)) SendClientMessage(i, 0x1AFF00FF, string2);
		}
        new pip[16];
        foreach (new i : Player) //Loop through all players
        {
            GetPlayerIp(i, pip, sizeof(pip));
            if(!strcmp(ip, pip, true))
            {
                pRCONWarned[i]++;
                if(pRCONWarned[i] >= 3)
                {
                    BanEX(i, "Wrong RCON", -255);
                }
            }
        }
    }
	else
	{
        new pip[16];
        foreach (new i : Player) //Loop through all players
        {

            GetPlayerIp(i, pip, sizeof(pip));
            if(!strcmp(ip, pip, true))
            {
				SetPVarInt(i, "lolola", true);
		        if(IsRCON[i] > 0 && secondrconoff[i] == 0)  ShowPlayerDialog(i, 1712, DIALOG_STYLE_PASSWORD, "Secondary rcon password", ""RED2_"Please Enter "RED_"YOUR OWN"RED2_" Secondary rcon password to be able to login", "Enter", "");
				else if(secondrconoff[i] == 0)
				{
				  ShowPlayerDialog(i, 1713, DIALOG_STYLE_MSGBOX, "Not Allowed", ""RED2_"This account is not allowed to use RCON", "CYA", "");
                  KickEX(i, "Wrong RCON", -255);
				}
			}
        }
	}
    return 1;
}
public OnPlayerDeath(playerid, killerid, reason)
{
 if(GetPVarInt(playerid, "InOutRun")) SetPVarInt(playerid, "ORLoser", true);
 if(GetPVarInt(playerid, "Trucker")) SendInfoText(playerid, 3000, "~r~Mission failed"), EndTMission(playerid);//GameTextForPlayer(playerid, "~r~Mission Failed", 3000, 4), EndTMission(playerid);
 if(GetPVarInt(playerid, "DeathInfo"))
 {
	killerid = GetPVarInt(playerid, "DeathInfo");
	reason = 34;
	DeletePVar(playerid, "DeathInfo");
 }
/* if(EventType == 6974 && EventStarted == 1 && eventhit[playerid] == 1)
 {
   EventWinner(killerid);
 }*/
 if(GetPVarInt(playerid, "instunt"))
 {
   DeletePVar(playerid, "instunt");
   LoadPlayerCoords(playerid);
   SetPlayerVirtualWorld(playerid, 0);
   SetPlayerHealth(playerid, 100);
   SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} You have been dropped out of stunt, because you died.");
 }/*
 if(GetPVarInt(killerid, "DD") == 1) DDBlueScore++;//ddshit
 if(GetPVarInt(killerid, "DD") == 2) DDGreenScore++;//ddshit
 if(GetPVarInt(killerid, "CO") == 1) COBlueScore++;//coshit
 if(GetPVarInt(killerid, "CO") == 2) COGreenScore++;//coshit*/

 #if defined useirc
 IRC_OnPlayerDeath(playerid, killerid, reason);//irc
 #endif
 PlayerTextDrawHide(playerid, Location[playerid][0]);
 PlayerTextDrawHide(playerid, Location[playerid][1]);
 if(rTest ==3) rTestWinner(playerid);
 if(damagetxds[playerid] == 0) SendpInfo(playerid, "~r~Wasted!", 3000);
 if(!GetPVarInt(playerid, "NoDeathInfo"))
 {
#if defined USE_WeaponDrop
  if(GetPlayerVirtualWorld(playerid) == 0) DropPlayerWeapons(playerid);
#endif
 #if defined USEKILLIST

  for(new i=0; i<sizeof(Killist); i++) TextDrawHideForPlayer(playerid, Killist[i]);
 #endif
/*  if(IsBeingSpeced[playerid] == 1)
  {
    foreach (new i : Player)
    {
        if(spectatorid[i] == playerid)
        {
            SpecNext(playerid);
        }
    }
  }*/
  pInGW[playerid]=0;
  new pgang=PlayerInfo[playerid][pGang];
  if(PlayerInfo[playerid][pGang] > 0 && GetPlayerVirtualWorld(playerid) == 0)
  {
	    GangInfo[PlayerInfo[playerid][pGang]][gDeaths]++;
		new Query[168];
		format(Query, sizeof(Query), "UPDATE `gangs` SET `GangDeaths` = %d WHERE `GangID` = '%d'", GangInfo[PlayerInfo[playerid][pGang]][gDeaths], PlayerInfo[playerid][pGang]);
		mysql_query(GTADM, Query);

	    if(killerid != INVALID_PLAYER_ID)
		{
		 if(PlayerInfo[killerid][pGang] > 0)
		 {
		    GangInfo[PlayerInfo[killerid][pGang]][gKills]++;
			new dQuery[168];
			format(dQuery, sizeof(dQuery), "UPDATE `gangs` SET `GangKills` = %d WHERE `GangID` = '%d'", GangInfo[PlayerInfo[killerid][pGang]][gKills], PlayerInfo[killerid][pGang]);
			mysql_query(GTADM, dQuery);
		 }
		}

  }
  if((pgang > 0) && (inGw[pgang] != 0) )
  {
	 new k=GetPlayerGangZone(playerid);
	 if(k > 0)
	 {
		 if(k == GwTurf[pgang] && aZone[k] > 0)
		 {
		    pGwDeaths[playerid]++;
		    if(killerid == INVALID_PLAYER_ID)
			{
                GwKills[pgang]--;
			}
		    else if(killerid != INVALID_PLAYER_ID)
			{
			 new gang=PlayerInfo[killerid][pGang];
			 if(gang > 0)
			 {
			   if(LastGangAttack[gang] != LastGangAttack[pgang])
			   {
				  if((inGw[gang] == 0) || (inGw[gang] > 0 && GwTurf[gang] != k)) JailPlayer(killerid, 500, "Jonny", "Interfere in GW");
			   }
			   if(inGw[gang] != 0 && (GwTurf[gang] == k))
			   {
				 if(gang != pgang)
				 {
			      GwKills[gang]++;
				  pGwKills[killerid]++;
				 }
				 else if(gang == pgang)
				 {
			      GwKills[gang]--;
				 }
			   }
			 }
			 else
			 {
	           JailPlayer(killerid, 500, "Jonny", "Interfere in GW");
			 }
			}
		 }
	 }
  }
  if(killerid != INVALID_PLAYER_ID && reason == 50) JailPlayer(killerid, 300, "Jonny", "Heli Blade Kill");
  CallLocalFunction("OnPlayerClickTextDraw", "ii", playerid, INVALID_TEXT_DRAW);

  if(GetPlayerDrunkLevel(playerid) > 10000) GiveMedal(playerid, 72);
  if(GetPVarInt(playerid, "RACER")) RemoveFromRace(playerid);
  if(GetPVarInt(playerid, "inCTF"))
  {
    if( playerid == Flag1Player || playerid == Flag2Player)
    {
	  RemovePlayerAttachedObject(playerid, 4);
	  new str[256], Float:x, Float:y, Float:z;
	  if( playerid == Flag1Player) format(str, sizeof(str), "{00A15E}» CTF « {13D6B2}%s has dropped the blue flag", pName[playerid]);
	  else format(str, sizeof(str), "{00A15E}» CTF « {13D6B2}%s has dropped the green flag", pName[playerid]);
      if(GetPVarInt(playerid, "inCTF")) SendClientMessage(playerid, -1, str);
	  GetPlayerPos(playerid, x, y, z);
	  if( playerid == Flag1Player)
	  {
        ctfflag[0]=CreateDynamicPickup(2993, 23, x, y, z, 1777);
        Flag1Player=INVALID_PLAYER_ID;
		flagpos[0][0]=x;
		flagpos[0][1]=y;
		flagpos[0][2]=z;
        CTFSETCOLOR(playerid);

  	    ctfmapicon[2] = CreateDynamicMapIcon(x, y, z, 0, 0x000FE0FF, 1777, -1, -1, 20000.0000);
        Streamer_SetIntData(STREAMER_TYPE_MAP_ICON ,  ctfmapicon[2], E_STREAMER_STYLE, 1);

	  }
	  else if( playerid == Flag2Player)
	  {
        ctfflag[1]=CreateDynamicPickup(2993, 23, x, y, z, 1777);
        Flag2Player=INVALID_PLAYER_ID;
		flagpos[1][0]=x;
		flagpos[1][1]=y;
		flagpos[1][2]=z;
		CTFSETCOLOR(playerid);
  	    ctfmapicon[3] = CreateDynamicMapIcon(x, y, z, 0, 0x009C05FF, 1777, -1, -1, 20000.0000);
        Streamer_SetIntData(STREAMER_TYPE_MAP_ICON ,  ctfmapicon[3], E_STREAMER_STYLE, 1);
	  }
    }
  }
  if(Footballer[playerid] > 0)
  {
    LoadPlayerCoords(playerid);
    for(new f=0; f<8; f++) PlayerTextDrawHide(playerid, DMpTD[playerid][f]);
    SetPlayerVirtualWorldEX(playerid, 0);
    Footballer[playerid]=0;
    SetPlayerSkin(playerid, SavedSKIN[playerid]);
    SetCameraBehindPlayer(playerid);
    if(CountFootballers() < 2)
    {
      KillTimer(FootballStartTimer);
      KillTimer(FootballStartTimer2);
      FootballStartTimer=-1;
      FootballStartTimer2=-1;
      EndFootBall();
    }
    new str[128];
    format(str, sizeof(str), "» Football « {1EB5E3}%s has left the Football {1189AD}(/Exit)", pName[playerid]);
    SendClientMessageToAll(0x1189ADFF, str);
    new gang = PlayerInfo[playerid][pGang];
    if(gang > 0) SetPlayerColor(playerid, PlayerColors[GangInfo[gang][gColor]]);
    else SetPlayerColor(playerid, PlayerColors[random(200)] );
 }
#if defined USEDRIFT

  if((GetPVarInt(playerid, "Drifter")) == 2)
  {
	Iter_Remove(Drifter, playerid);
	if(RaceStarted == 0) SetPlayerRaceCheckpoint(playerid, 0, RaceInfo[RaceIDCount][StartCP][0], RaceInfo[RaceIDCount][StartCP][1], RaceInfo[RaceIDCount][StartCP][2], RaceCPs[RaceIDCount][0][0], RaceCPs[RaceIDCount][0][1], RaceCPs[RaceIDCount][0][2], 15.0);
	TextDrawHideForPlayer(playerid, pDriftTD[playerid][2]);
	TextDrawHideForPlayer(playerid, pDriftTD[playerid][3]);
	TextDrawHideForPlayer(playerid, pDriftTD[playerid][4]);
	TextDrawHideForPlayer(playerid, pDriftTD[playerid][0]);
	TogglePlayerControllable2(playerid, 1);
	SetCameraBehindPlayer(playerid);

	SetPlayerVirtualWorldEX(playerid, 0);
	DeletePVar(playerid, "DriftScore");
	pDrift[playerid]=0;
	DeletePVar(playerid, "Drifter");
	DeletePVar(playerid, "Combo");
    DeletePVar(playerid, "DriftMap");
    DeletePVar(playerid, "CurrDrift");
	for(new x=0;x<19;x++)
	{
	  if(x < 6)
	  {
	    TextDrawHideForPlayer(playerid, pDriftTD[playerid][x]);
	  }
	}
    DestroyDynamicRaceCP(pDCP[playerid]);
    pDCP[playerid]=-1;

  }
#endif
  if(GetPVarInt(playerid, "InHay"))
  {
    DeletePVar(playerid, "InHay");
	SetPlayerVirtualWorldEX(playerid, 0);
	new count=CountHay();
	if(count == 0)
	{
       KillTimer(haygametimer);
       KillTimer(haygametimer2);
       haygametimer=-1;
       haygametimer2=-1;
       haygamestarted = 0;
       //TextDrawHideForPlayer(playerid, Hwaiting);
	   SetDynamicObjectPos(MovingHay[0], -1033.86, 814.61, 78.30);
	   SetDynamicObjectPos(MovingHay2[18], -380.20999, 618.88000, 1002.75000);
   	   SetDynamicObjectPos(MovingHay3[13], 315.42001, -1185.25000, 1002.78003);
   	   SetDynamicObjectRot(MovingHay3[13], 0.0, 0.0, 0.0);
       SendClientMessageToAll(0xF86EFFFF, "» Hay Game «{FF6EC0} The Hay Game has been cancelled {F86EFF}(Not enough players)");
	}
  }
  else if(InDive[playerid] > 0) InDive[playerid]=0;
  else if(InCanon[playerid] > 0)
  {
	InCanon[playerid]=0;
	SetPlayerVirtualWorldEX(playerid, 0);
  }
  else if(STUNTING[playerid] > 0) STUNTING[playerid]=0, SetPlayerVirtualWorldEX(playerid, 0);
  else if(Footballer[playerid] > 0)
  {
	  if(IsPlayerConnected(killerid))
	  {
		  new str[128];
		  format(str, sizeof(str), "~r~RED CARD!~n~%s", pName[killerid]);
	  	  foreach (new i : Player) if(GetPlayerVirtualWorld(i) == 777) SendInfoText(i, 3000, str), PlayerPlaySound(i, 3201, 0.0, 0.0, 0.0);

          SetPlayerPosEx(killerid, 1403.4863, 2109.2959, 16.3672, 56.7647);
	      Footballer[playerid]=3;
          if(PlayerInfo[killerid][pGang] < 0) SetPlayerColor( killerid, PlayerColors[random(200)] );
          else SetPlayerColor( killerid, PlayerColors[GangInfo[PlayerInfo[killerid][pGang]][gColor]] );
	  }
  }
  if( reason == 34 && GetPVarInt(killerid, "MissionProgress") > 1)
  {
	  if(PlayerInfo[killerid][Mission] == 4)
	  {
		   switch(GetPVarInt(killerid, "MissionProgress"))
		   {
				case 2:
				{
					PlayerTextDrawSetStringEX(killerid, pMissionTD[killerid], "~w~Use the sniper to hunt~n~some newbies!~n~~g~newbies killed: 1/4");
                    SetPVarInt(killerid, "MissionProgress", 3);

				}
				case 3:
				{
					PlayerTextDrawSetStringEX(killerid, pMissionTD[killerid], "~w~Use the sniper to hunt~n~some newbies!~n~~g~newbies killed: 2/4");
                    SetPVarInt(killerid, "MissionProgress", 4);
				}
				case 4:
				{
					PlayerTextDrawSetStringEX(killerid, pMissionTD[killerid], "~w~Use the sniper to hunt~n~some newbies!~n~~g~newbies killed: 3/4");
                    SetPVarInt(killerid, "MissionProgress", 5);
				}
				case 5:
				{
			       SendInfoText(killerid, 8000, "~y~Mission Completed~n~~g~$44000");
			       PlayAudioStreamForPlayer(killerid, "https://dl.dropbox.com/u/52869044/GTADM%20-%20Mission%20Completed.mp3");
			       GivePlayerMoneyEX(killerid, 80000);
                   ScoreTDupdate(killerid, 5);

			       DeletePVar(killerid, "MissionProgress");
			       PlayerInfo[killerid][Mission]++;

                   PlayerTextDrawHide(killerid, pMissionTD[killerid]);
                   TogglePlayerAllDynamicRaceCPs(killerid, true);


                   new str[128];
                   format(str, sizeof(str), "UPDATE `users` SET `Mission` = %d WHERE `UserID` = '%d'", PlayerInfo[killerid][Mission], PlayerInfo[killerid][UserID]);
                   mysql_query(GTADM, str);

				}
		   }
	  }
  }
  if(GetPVarInt(playerid, "MissionProgress") > 0)
  {
	SendInfoText(playerid, 4000, "~r~Mission Failed");
	DeletePVar(playerid, "MissionProgress");
    new str[128];
    format(str, sizeof(str), "{6F6AA6}» Mission « {294FC2}%s has been dropped out of the Mission {6F6AA6}(failed)", pName[playerid]);
    SendClientMessageToAll(LIGHTBLUE, str);

	PlayerTextDrawHide(playerid, pMissionTD[playerid]);
	TogglePlayerAllDynamicRaceCPs(playerid, true);


	SetPlayerVirtualWorldEX(playerid, 0);
	for(new ad=0; ad<28; ad++) DestroyPlayerObject(playerid, MissionObjects[playerid][ad]);
  }
  if(GetPVarInt(playerid, "Buying_Clothes"))
  {
  		if(GetPVarInt(playerid, "Gobj")) DestroyPlayerObject(playerid, GetPVarInt(playerid, "Gobj"));
		DeletePVar(playerid, "Gobj");
		DeletePVar(playerid, "Clothes_Selection");
		DeletePVar(playerid, "Buying_Clothes");
		for(new x=0; x<sizeof(ShopTD); x++) TextDrawHideForPlayer(playerid, ShopTD[x]);
		SetPlayerVirtualWorldEX(playerid, 0);
  }
  GiveMedal(playerid, 3);
//=======
  ResetSpawnInfo(playerid);
  Spawned[playerid]=0;
  PlayerTextDrawHide(playerid, FPS[playerid]);
  PlayerTextDrawHide(playerid, HealthBar[playerid]);
  PlayerTextDrawHide(playerid, ArmourBar[playerid]);
//======
  if(playerid == PowerUpPlayer[0] && GetPlayerVirtualWorld(playerid) == 0)
  {
	new Float:pos[3];
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
    if(GetPlayerVirtualWorld(playerid) == 0) PowerUpPickup[0]=CreateDynamicPickup(1241, 2, pos[0], pos[1], pos[2], GetPlayerVirtualWorld(playerid));
	PowerUpPlayer[0]=-1;
	new str[128];
	format(str, sizeof(str), "{FF08A4}» Power-Up «{1FC4A6} %s (%d) has dropped the {7E62A1}'Double Score'{1FC4A6} Power-Up.", pName[playerid], playerid);
	SendClientMessageToAll(0x1FC4A6FF, str);
	SetTimerEx("RespawnPick", 60000, false, "d", 0);

  }
  if(playerid == PowerUpPlayer[1] && GetPlayerVirtualWorld(playerid) == 0)
  {
	new Float:pos[3];
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
    if(GetPlayerVirtualWorld(playerid) == 0) PowerUpPickup[1]=CreateDynamicPickup(1241, 2, pos[0], pos[1], pos[2], GetPlayerVirtualWorld(playerid));
	PowerUpPlayer[1]=-1;
	new str[128];
	format(str, sizeof(str), "{FF08A4}» Power-Up «{1FC4A6} %s (%d) has dropped the {7E62A1}'Super Export'{1FC4A6} Power-Up.", pName[playerid], playerid);
	SendClientMessageToAll(0x1FC4A6FF, str);
	SetTimerEx("RespawnPick", 60000, false, "d", 1);
  }
  if(playerid == PowerUpPlayer[2] && GetPlayerVirtualWorld(playerid) == 0)
  {
	new Float:pos[3];
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
    if(GetPlayerVirtualWorld(playerid) == 0) PowerUpPickup[2]=CreateDynamicPickup(1241, 2, pos[0], pos[1], pos[2], GetPlayerVirtualWorld(playerid));
	PowerUpPlayer[2]=-1;
	new str[128];
	format(str, sizeof(str), "{FF08A4}» Power-Up «{1FC4A6} %s (%d) has dropped the {7E62A1}'Kangaroo'{1FC4A6} Power-Up.", pName[playerid], playerid);
	SendClientMessageToAll(0x1FC4A6FF, str);
	SetTimerEx("RespawnPick", 60000, false, "d", 2);
  }
  if(playerid == PowerUpPlayer[3] && GetPlayerVirtualWorld(playerid) == 0)
  {
	new Float:pos[3];
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
    if(GetPlayerVirtualWorld(playerid) == 0)
    PowerUpPickup[3]=CreateDynamicPickup(1241, 2, pos[0], pos[1], pos[2], GetPlayerVirtualWorld(playerid));
	PowerUpPlayer[3]=-1;
	new str[128];
	format(str, sizeof(str), "{FF08A4}» Power-Up «{1FC4A6} %s (%d) has dropped the {7E62A1}'Super Nitro'{1FC4A6} Power-Up.", pName[playerid], playerid);
	SendClientMessageToAll(0x1FC4A6FF, str);
	SetTimerEx("RespawnPick", 60000, false, "d", 3);
  }
  if(playerid == PowerUpPlayer[4] && GetPlayerVirtualWorld(playerid) == 0)
  {
	new Float:pos[3];
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
    if(GetPlayerVirtualWorld(playerid) == 0)
    PowerUpPickup[4]=CreateDynamicPickup(1241, 2, pos[0], pos[1], pos[2], GetPlayerVirtualWorld(playerid));
	PowerUpPlayer[4]=-1;
	new str[128];
	format(str, sizeof(str), "{FF08A4}» Power-Up «{1FC4A6} %s (%d) has dropped the {7E62A1}'Pro Gangster'{1FC4A6} Power-Up.", pName[playerid], playerid);
	SendClientMessageToAll(0x1FC4A6FF, str);
	SetTimerEx("RespawnPick", 60000, false, "d", 4);
  }/*
  if(playerid == PowerUpPlayer[5])
  {
	new Float:pos[3];
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
    if(GetPlayerVirtualWorld(playerid) == 0)
    PowerUpPickup[5]=CreateDynamicPickup(1241, 2, pos[0], pos[1], pos[2], GetPlayerVirtualWorld(playerid));
	PowerUpPlayer[5]=-1;
	new str[128];
	format(str, sizeof(str), "{FF08A4}» Power-Up «{1FC4A6} %s (%d) has dropped the {7E62A1}'Super Warrior'{1FC4A6} Power-Up.", pName[playerid], playerid);
	SendClientMessageToAll(0x1FC4A6FF, str);
    printf("%s", str);
	SetTimerEx("RespawnPick", 60000, false, "d", 5);
	DeletePVar(playerid, "superhit");
  }*/
  if(!IsPlayerConnected(killerid))
  {
   PlayerInfo[playerid][pDeaths]++;

   PlayerInfo[playerid][currentks]=0;
   SendDeathMsg(INVALID_PLAYER_ID, playerid, reason);
   if(GetPlayerMoneyEx(playerid) > 0) ResetPlayerMoneyEx(playerid);
   if(reason == 54) GiveMedal(playerid, 49);
   if(reason == 53) GiveMedal(playerid, 50);
  }
  else
  {
//==============
   if(Job[killerid] == Hitman && PlayerInfo[playerid][pBounty] > 0)
   {
	 new shit, msg[128];
	 format(msg, sizeof(msg), "{71A5B0}» Job «"JOBINFO_" Hitman %s has got a bounty of $%d for killing %s", pName[killerid], PlayerInfo[playerid][pBounty], pName[playerid]);
	 GivePlayerMoneyEX(killerid, PlayerInfo[playerid][pBounty]);
	 PlayerInfo[killerid][bountiesearned] = (shit + PlayerInfo[playerid][pBounty]);
     new qqr[256];
     format(qqr, sizeof(qqr), "UPDATE `users` SET `bountiesearned` = %d WHERE `UserID` = '%d'", PlayerInfo[killerid][bountiesearned], PlayerInfo[killerid][UserID]);
     mysql_query(GTADM, qqr);
     if(PlayerInfo[killerid][bountiesearned] >= 100000000) GiveMedal(killerid, 88);
	 PlayerInfo[playerid][pBounty]=0;
	 SendClientMessageToAll(JOBINFO, msg);

  	 new Query[128];
     format(Query, sizeof(Query), "UPDATE `users` SET `pBounty` = %d WHERE `UserID` = '%d'", PlayerInfo[playerid][pBounty], PlayerInfo[playerid][UserID]);
     mysql_query(GTADM, Query);
   }
   if(GetPlayerMoneyEx(playerid) > 0)
   {
      new pmoney = GetPlayerMoneyEx(playerid);
      GivePlayerMoneyEX(killerid, pmoney, 1);
      if(pmoney >= 25000000) GiveMedal(killerid, 30);
   }
   ResetPlayerMoneyEx(playerid);
   PlayerInfo[killerid][pKills]++;
   PlayerInfo[killerid][inKills]++;
   if(PlayerInfo[killerid][inKills] == 150) GiveMedal(killerid, 69);
   if(PlayerInfo[killerid][pKills] >= 10000) GiveMedal(killerid, 35);
   if((reason < 9))
   {
      PlayerInfo[killerid][pBeatUp]++;
      if(pLevel[playerid][fist] >= 15) UpdateSkills(killerid, fist, 1000);
      else UpdateSkills(killerid, fist, 500);
   }
   if(PlayerInfo[killerid][pBeatUp] >= 120) GiveMedal(killerid, 61);
   PlayerInfo[playerid][pDeaths]++;

   PlayerInfo[playerid][currentks]=0;
   PlayerInfo[killerid][currentks]++;
   if(PlayerInfo[killerid][currentks] > 5)
   {
	new stroo[256];
	format(stroo, sizeof(stroo), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s: ~y~%s (%d) ~w~is on ~r~killing spree~w~! ~w~(~p~%d serial kills~w~)!", pName[killerid], killerid, PlayerInfo[killerid][currentks]);
	TextDrawSetStringEX(ScreenTXDS[7], stroo);
   }
   if(PlayerInfo[killerid][currentks] > PlayerInfo[killerid][ksHighScore]) PlayerInfo[killerid][ksHighScore]=PlayerInfo[killerid][currentks];

   SendDeathMsg(killerid, playerid, reason);

   if(killerid == PowerUpPlayer[0] && killerid != INVALID_PLAYER_ID)
   {
	   ScoreTDupdate(killerid, 4);
   }
   else ScoreTDupdate(killerid, 2);

   SetPlayerWantedLevelEx(killerid, GetPVarInt(killerid, "Wanted")+1);
   //SetPlayerWantedLevelEx(playerid, 0);

   if((GetPVarInt(killerid, "LOGGED")) != 2)
   {
       new Query[168];
       format(Query, sizeof(Query), "UPDATE `users` SET `pBeatenUp` = %d, `Kills` = %d, `KillingSpreeHighest` = %d, `KS` = %d WHERE `UserID` = '%d'", PlayerInfo[killerid][pBeatUp], PlayerInfo[killerid][pKills], PlayerInfo[killerid][ksHighScore], PlayerInfo[killerid][currentks], PlayerInfo[killerid][UserID]);
       mysql_query(GTADM, Query);

	   if(IsAdmin(playerid, 10) && !GetPVarInt(playerid, "Hidden") && !GetPVarInt(playerid, "HideMeBitch")) GiveMedal(killerid, 22);
	   else if(PlayerInfo[playerid][IsVIP] > 0) GiveMedal(killerid, 23);

   }
  }
  if((GetPVarInt(playerid, "LOGGED")) != 2)
  {
       new Query[168];
       format(Query, sizeof(Query), "UPDATE `users` SET `Deaths` = %d, `KS` = %d WHERE `UserID` = '%d'", PlayerInfo[playerid][pDeaths], PlayerInfo[playerid][currentks], PlayerInfo[playerid][UserID]);
       mysql_query(GTADM, Query);
  }
//================
  if(nxsdm[playerid] == 1)
  {
	 if(killerid != INVALID_PLAYER_ID) if(InCW[killerid] > 0) SetPVarInt(killerid, "CwKilles", GetPVarInt(killerid, "CwKilles")+1);
	 SetPVarInt(playerid, "CwDeaths", GetPVarInt(playerid, "CwDeaths")+1);
	 if(InCW[playerid] == 1) TeamAwayScore++;
	 else if(InCW[playerid] == 2) TeamnXsScore++;

	 if(TeamnXsScore >= cwwinscore && CwWinTime==0)
	 {
		 new str[128];
		 format(str, sizeof(str), "{9F00BF}» DoDM « {0050BF}Team %s has won the Clan War  %d:%d", cwname[0], TeamnXsScore, TeamAwayScore);
		 SendClientMessageToAll(-1, str);
		 RoundWinners(1);
	 }
	 else if(TeamAwayScore >= cwwinscore && CwWinTime==0)
	 {
		 new str[128];
		 format(str, sizeof(str), "{9F00BF}» DoDM « {0050BF}Team %s has won the Clan War {9F00BF}%d{0050BF}:{9F00BF}%d", cwname[1], TeamnXsScore, TeamAwayScore);
		 SendClientMessageToAll(-1, str);
		 RoundWinners(2);
	 }

	 //foreach(new i : Player)
	//{
     //foreach (new i : Player)
     /*if(nxsdm[playerid] == 1)
     {
       new TdStR[128];
	   format(TdStR, sizeof(TdStR), "~y~%s:~y~~h~ %d", cwname[0], TeamnXsScore);
   	   PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][3], TdStR);
  	   format(TdStR, sizeof(TdStR), "~b~%s:~g~~h~ %d", cwname[1], TeamAwayScore);
   	   PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][4], TdStR);
       format(TdStR, sizeof(TdStR), "~r~Kills:~r~~h~ %d", GetPVarInt(playerid, "CwKilles"));
       PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][1], TdStR);
       format(TdStR, sizeof(TdStR), "~g~Deaths:~g~~h~ %d", GetPVarInt(playerid, "CwDeaths"));
       PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][5], TdStR);
       PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][7], "~b~~h~DoD ~h~DM");
       for(new x=0; x<8; x++) PlayerTextDrawShow(playerid, DMpTD[playerid][x]);
     }
  }*/
     foreach (new i : Player)
     if(nxsdm[i] == 1)
     {
       new TdStR[128];
       PlayerTextDrawSetStringEX(i, DMpTD[i][0], "-");
       PlayerTextDrawSetStringEX(i, DMpTD[i][2], "-");
       PlayerTextDrawSetStringEX(i, DMpTD[i][6], "-");
       PlayerTextDrawSetStringEX(i, DMpTD[i][7], "~b~~h~DoD ~h~DM");
       format(TdStR, sizeof(TdStR), "~y~%s:~y~~h~ %d", cwname[0], TeamnXsScore);
       PlayerTextDrawSetStringEX(i, DMpTD[i][3], TdStR);
       format(TdStR, sizeof(TdStR), "~b~%s:~b~~h~ %d", cwname[1], TeamAwayScore);
       PlayerTextDrawSetStringEX(i, DMpTD[i][4], TdStR);
       format(TdStR, sizeof(TdStR), "~g~Kills:~g~~h~ %d", GetPVarInt(i, "CwKilles"));
       PlayerTextDrawSetStringEX(i, DMpTD[i][1], TdStR);
       format(TdStR, sizeof(TdStR), "~r~Deaths:~r~~h~ %d", GetPVarInt(i, "CwDeaths"));
       PlayerTextDrawSetStringEX(i, DMpTD[i][5], TdStR);
       for(new x=0; x<8; x++) PlayerTextDrawShow(i, DMpTD[i][x]);
     }
  }
//==============
  new DmID= GetPVarInt(playerid, "TDM");
  new TD[128];
  new TD2[128];
  SumoKnock(playerid);
  if(DmID > 0)
  {
    SetPVarInt(playerid, "pDMKillStreak", 0);
    new f=GetPVarInt(playerid, "pDMDeaths");
    SetPVarInt(playerid, "pDMDeaths", f+1);
	if(GetPlayerTeam(playerid) == 4)
	{
        TDMScore[DmID-1][1]++;
		format(TD, sizeof(TD), "~g~Team 1:~g~~h~ %d", TDMScore[DmID-1][0]);

		format(TD2, sizeof(TD2), "~r~Team 2:~r~~h~ %d", TDMScore[DmID-1][1]);

		foreach(new i : Player)
		{
		  if(GetPVarInt(i, "TDM") ==DmID)
		  {
			PlayerTextDrawSetStringEX(i, DMpTD[i][3], TD);
			PlayerTextDrawSetStringEX(i, DMpTD[i][4], TD2);
		  }
		}
	}
	else if(GetPlayerTeam(playerid) == 3)
	{
        TDMScore[DmID-1][0]++;
		format(TD, sizeof(TD), "~g~Team 1:~g~~h~ %d", TDMScore[DmID-1][0]);

		format(TD2, sizeof(TD2), "~r~Team 2:~r~~h~ %d", TDMScore[DmID-1][1]);
		foreach(new i : Player)
		{
		  if(GetPVarInt(i, "TDM") ==DmID)
		  {
			PlayerTextDrawSetStringEX(i, DMpTD[i][3], TD);
			PlayerTextDrawSetStringEX(i, DMpTD[i][4], TD2);
		  }
		}
	}

    new Float:ratio;
    if(GetPVarInt(playerid, "pDMDeaths") != 0) ratio=floatdiv(GetPVarInt(playerid, "pDMKills"), GetPVarInt(playerid, "pDMDeaths"));
    else ratio = 0;
    format(TD, sizeof(TD), "~p~Ratio:~p~~h~ %.2f", ratio);
    PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][5], TD);

 	if(killerid != INVALID_PLAYER_ID)
	{
        SetPVarInt(killerid, "pDMKills", GetPVarInt(killerid, "pDMKills")+1);
        SetPVarInt(killerid, "pDMKillStreak", GetPVarInt(killerid, "pDMKillStreak")+1);
		format(TD, sizeof(TD), "~b~Serial Kills:~b~~h~ %d", GetPVarInt(killerid, "pDMKillStreak"));
		PlayerTextDrawSetStringEX(killerid, DMpTD[killerid][1], TD);
	}
    PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][1], "~b~Serial Kills:~b~~h~ 0");
  }
  //=====================
  else
  {
	  new s=GetPVarInt(playerid, "INDM");
	  if(s > 0 || GetPVarInt(playerid, "WW") || GetPVarInt(playerid, "WW2"))
	  {


	     if(s == 11 && IsValidObject(obj[playerid])) DestroyObject(obj[playerid]), obj[playerid]=INVALID_OBJECT_ID;

	     if(IsPlayerConnected(killerid))
	     {
	       if( (s == 5) && ( (reason == 51) || (reason == 39) || (reason == 40) )) GiveMedal(killerid, 51);

		   if( (GetPlayerVirtualWorld(playerid) != 15) && s != 18) SetPlayerHealth(killerid , 100);
		   UpdateDmPlayerStats(playerid);
		   UpdateDmKillerStats(killerid);
	       new Killstreak = GetPVarInt(killerid, "pDMKillStreak");
		   switch(Killstreak)
		   {
	        case 3:GiveMedal(killerid, 4);
	        case 7:GiveMedal(killerid, 5);
	        case 10:GiveMedal(killerid, 6);
	        case 15:GiveMedal(killerid, 7);
	        case 20:GiveMedal(killerid, 8);
	        case 25:GiveMedal(killerid, 9);
	        case 30:GiveMedal(killerid, 10);
	        case 40:GiveMedal(killerid, 11);
	        case 50:GiveMedal(killerid, 12);
		   }
		 }
		 else UpdateDmPlayerStats(playerid);
	  }
  }
  if(GetPVarInt(playerid, "CS"))
  {
    new msg[256];
    format(msg, sizeof(msg), "» CS « {D47098}%s has been eliminated from the Counter Strike", pName[playerid]);
    SendClientMessageToAll(0xFF0D6EFF, msg);
    csteam1[playerid]=0;
    csteam2[playerid]=0;
    SetPlayerTeam(playerid, NO_TEAM);
	if(GetPVarInt(killerid, "CS") == GetPVarInt(playerid, "CS"))
	{
	   SendInfoText(killerid, 5000, "~y~Team Killer~n~~r~-20 Score");
	   PlayAudioStreamForPlayer(killerid, "https://dl.dropbox.com/u/52869044/CounterStrike_GTADM/css_team_killer.mp3");
	   ScoreTDupdate(killerid, -20);

	}
	else
	{
	    if(killerid != INVALID_PLAYER_ID)
	    {
	      if(PlayerInfo[killerid][currentks] - GetPVarInt(killerid, "CS_ks") == 3)
	          PlayAudioStreamForPlayer(killerid, "https://dl.dropbox.com/u/52869044/CounterStrike_GTADM/killingspree.mp3");
	  	  else if(CountCS() > 2) PlayAudioStreamForPlayer(killerid, "https://dl.dropbox.com/u/52869044/CounterStrike_GTADM/one_and_only.mp3");
		}
	}
    switch(GetPVarInt(playerid, "CS"))
	{
		case 1:
		{
            if(CountTCS(1) > 1)
			{
	          if(reason == 4) GiveMedal(killerid, 44), PlayAudioStreamForPlayer(playerid, "https://dl.dropbox.com/u/52869044/CounterStrike_GTADM/humiliation.mp3");
			  else PlayAudioStreamForPlayer(playerid, "https://dl.dropbox.com/u/52869044/CounterStrike_GTADM/EndMusic.mp3");
   			  SetPVarInt(playerid, "CS", 3);
			}
			else Remove_From_CS(playerid);
			foreach(new i : Player)
			{
                new mango=GetPVarInt(i, "CS");
	            if(mango == 1 || mango == 3 && i!=playerid && i!=killerid)
                 PlayAudioStreamForPlayer(i, "https://dl.dropbox.com/u/52869044/CounterStrike_GTADM/friend_died.mp3");
	            else if(mango == 2 || mango == 4 && i!=playerid && i!= killerid)
                 PlayAudioStreamForPlayer(i, "https://dl.dropbox.com/u/52869044/CounterStrike_GTADM/enemy_died.mp3");
			}

		}
		case 2:
		{
            if(CountTCS(2) > 1)
			{
	          if(reason == 4) GiveMedal(killerid, 44), PlayAudioStreamForPlayer(playerid, "https://dl.dropbox.com/u/52869044/CounterStrike_GTADM/humiliation.mp3");
			  else PlayAudioStreamForPlayer(playerid, "https://dl.dropbox.com/u/52869044/CounterStrike_GTADM/EndMusic.mp3");
   			  SetPVarInt(playerid, "CS", 4);
			}
			else Remove_From_CS(playerid);
			foreach(new i : Player)
			{
                new mango=GetPVarInt(i, "CS");
	            if(mango == 2 || mango == 4 && i!=playerid && i!=killerid)
                 PlayAudioStreamForPlayer(i, "https://dl.dropbox.com/u/52869044/CounterStrike_GTADM/friend_died.mp3");
	            else if(mango == 1 || mango == 3 && i!=playerid && i!=killerid)
                 PlayAudioStreamForPlayer(i, "https://dl.dropbox.com/u/52869044/CounterStrike_GTADM/enemy_died.mp3");
			}
		}
	}
  }
  else if(GetPVarInt(playerid, "pOur"))
  {
	 RemoveFrompOur(playerid, 1);
     SetPlayerVirtualWorldEX(playerid, 0);
  }
  else if(GetPVarInt(playerid, "Signed4Lms") && (LMS > 1))
  {
      if(IsPlayerConnected(killerid))
      {
		new str[64],
		a=GetPVarInt(killerid, "LMSKILLES");
      	SetPVarInt(killerid, "LMSKILLES", a+1);
        format(str, sizeof(str), "~b~Kills: ~b~~h~%d", a+1);
        PlayerTextDrawSetStringEX(killerid, DMpTD[killerid][3], str);
      }
      Remove_From_Lms(playerid, 1);
  }
  else if(GetPVarInt(playerid, "InDerby")) Remove_From_Derby(playerid, 1), ResetSpawnInfo(playerid);
  else if(GetPVarInt(playerid, "inFallout") && FallOut > 1)
  {
    RemoveFromFallout(playerid, 0);
  }
  if( DuelInfo[player1] == playerid ||  DuelInfo[player2] == playerid)
  {
    if(DuelInfo[stat]==2)
	{
	  if(playerid == DuelInfo[player1]) EndDuel(DuelInfo[player2], DuelInfo[player1]);
      else if(playerid == DuelInfo[player2]) EndDuel(DuelInfo[player1], DuelInfo[player2]);
	}
	else
	{
	  RemoveFromDuel(playerid, 1);
  	  DuelInfo[stat]=0, DuelInfo[player1]=-225, DuelInfo[player2]=-1;
	}
  }
 }
 return 1;
}

stock MissionCheckpoint(playerid, checkpointid)
{
  for(new gg=0; gg<sizeof(MissionCP); gg++)
  {
	if(checkpointid == MissionCP[gg])
	{
	   switch(PlayerInfo[playerid][Mission])
	   {
		   case 0:
		   {
	            switch(GetPVarInt(playerid, "MissionProgress"))
	            {
                    case 1:
					{
			          TogglePlayerDynamicCP(playerid, MissionCP[0], false);
                      Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[0], E_STREAMER_PLAYER_ID, playerid);
			          TogglePlayerDynamicCP(playerid, MissionCP[1], true);
                      Streamer_AppendArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[1], E_STREAMER_PLAYER_ID, playerid);

					  PlayerTextDrawSetStringEX(playerid, pMissionTD[playerid], "Follow the ~y~Red Checkpoint~w~ on your minimap to collect the ~r~bombs~n~~y~Bombs Collected : 1/3");
                	  SetPVarInt(playerid, "MissionProgress", 2);
					}
					case 2:
					{
                      TogglePlayerDynamicCP(playerid, MissionCP[1], false);
                      Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[1], E_STREAMER_PLAYER_ID, playerid);
			          TogglePlayerDynamicCP(playerid, MissionCP[2], true);
                      Streamer_AppendArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[2], E_STREAMER_PLAYER_ID, playerid);

					  PlayerTextDrawSetStringEX(playerid, pMissionTD[playerid], "Follow the ~y~Red Checkpoint~w~ on your minimap to collect the ~r~bombs~n~~y~Bombs Collected : 2/3");
                	  SetPVarInt(playerid, "MissionProgress", 3);
					}
					case 3:
					{
			           TogglePlayerDynamicCP(playerid, MissionCP[2], false);
                       Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[2], E_STREAMER_PLAYER_ID, playerid);
			           TogglePlayerDynamicCP(playerid, MissionCP[3], true);
                       Streamer_AppendArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[3], E_STREAMER_PLAYER_ID, playerid);

					   PlayerTextDrawSetStringEX(playerid, pMissionTD[playerid], "Now head to ~y~Los Santos mall~n~~w~And plant your bombs~n~~y~Bombs Planted: 0/3");
                	   SetPVarInt(playerid, "MissionProgress", 4);
					}
					case 4:
					{
			           TogglePlayerDynamicCP(playerid, MissionCP[3], false);
                       Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[3], E_STREAMER_PLAYER_ID, playerid);
			           TogglePlayerDynamicCP(playerid, MissionCP[4], true);
                       Streamer_AppendArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[4], E_STREAMER_PLAYER_ID, playerid);

					   PlayerTextDrawSetStringEX(playerid, pMissionTD[playerid], "Now head to ~y~Los Santos mall~n~~w~And plant your bombs~n~~y~Bombs Planted: 1/3");
                	   SetPVarInt(playerid, "MissionProgress", 5);

					}
					case 5:
					{
			           TogglePlayerDynamicCP(playerid, MissionCP[4], false);
                       Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[4], E_STREAMER_PLAYER_ID, playerid);
			           TogglePlayerDynamicCP(playerid, MissionCP[5], true);
                       Streamer_AppendArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[5], E_STREAMER_PLAYER_ID, playerid);

					   PlayerTextDrawSetStringEX(playerid, pMissionTD[playerid], "Now head to ~y~Los Santos mall~n~~w~And plant your bombs~n~~y~Bombs Planted: 2/3");
                	   SetPVarInt(playerid, "MissionProgress", 6);

					}
					case 6:
					{
			           TogglePlayerDynamicCP(playerid, MissionCP[5], false);
                       Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[5], E_STREAMER_PLAYER_ID, playerid);
                       SetPlayerPos(playerid, 1132.2271, -1402.2197, 13.4620);
					   SetPlayerCameraPos(playerid, 1137.4597, -1489.3357, 100.1900);
					   SetPlayerCameraLookAt(playerid, 1137.2532, -1489.1219, 22.7591);
			           SetTimer("mission1_1", 1000, false);
			           SetTimer("mission1_2", 2000, false);
			           SetTimer("mission1_3", 3000, false);
			           SetTimer("mission1_4", 4000, false);
			           SetTimerEx("mission1_5", 5000, false, "i", playerid);
					}
				}
		   }
		   case 1:
		   {
	            switch(GetPVarInt(playerid, "MissionProgress"))
	            {
                    case 1:
					{
			          	 TogglePlayerDynamicCP(playerid, MissionCP[6], false);
                      	 Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[6], E_STREAMER_PLAYER_ID, playerid);
						 SetPlayerPos(playerid, 2100.7668, -1784.3047, 12.9943);
						 SetPlayerInterior(playerid, 0), SetPlayerVirtualWorldEX(playerid, 0);
						 new ah;
						 ah=CreateVehicle(448, 2100.7668, -1784.3047, 12.9943, 357.9326, -1, -1, 1);
                         ResetCarInfo(ah);
						 AdminCar[ah]=1;
						 VehicleInfo[ah][Player]=INVALID_PLAYER_ID;
						 PutPlayerInVehicle(playerid, ah, 0);

						 PlayerTextDrawSetStringEX(playerid, pMissionTD[playerid], "Follow the ~y~Icon~w~ on your minimap to deliver the ~y~Pizza~n~~g~Pizza Delivered : 0/5");
                	     SetPVarInt(playerid, "MissionProgress", 2);
			             TogglePlayerDynamicCP(playerid, MissionCP[7], true);
                         Streamer_AppendArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[7], E_STREAMER_PLAYER_ID, playerid);
					}
                    case 2:
					{
			          	 TogglePlayerDynamicCP(playerid, MissionCP[7], false);
                      	 Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[7], E_STREAMER_PLAYER_ID, playerid);
						 PlayerTextDrawSetStringEX(playerid, pMissionTD[playerid], "Follow the ~y~Icon~w~ on your minimap to deliver the ~y~Pizza~n~~g~Pizza Delivered : 1/5");
                	     SetPVarInt(playerid, "MissionProgress", 3);
			             TogglePlayerDynamicCP(playerid, MissionCP[8], true);
                         Streamer_AppendArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[8], E_STREAMER_PLAYER_ID, playerid);
					}
                    case 3:
					{
			          	 TogglePlayerDynamicCP(playerid, MissionCP[8], false);
                      	 Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[8], E_STREAMER_PLAYER_ID, playerid);
						 PlayerTextDrawSetStringEX(playerid, pMissionTD[playerid], "Follow the ~y~Icon~w~ on your minimap to deliver the ~y~Pizza~n~~g~Pizza Delivered : 2/5");
                	     SetPVarInt(playerid, "MissionProgress", 4);

			             TogglePlayerDynamicCP(playerid, MissionCP[9], true);
                         Streamer_AppendArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[9], E_STREAMER_PLAYER_ID, playerid);
					}
                    case 4:
					{
			          	 TogglePlayerDynamicCP(playerid, MissionCP[9], false);
                      	 Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[9], E_STREAMER_PLAYER_ID, playerid);
						 PlayerTextDrawSetStringEX(playerid, pMissionTD[playerid], "Follow the ~y~Icon~w~ on your minimap to deliver the ~y~Pizza~n~~g~Pizza Delivered : 3/5");
                	     SetPVarInt(playerid, "MissionProgress", 5);
			             TogglePlayerDynamicCP(playerid, MissionCP[10], true);
                         Streamer_AppendArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[10], E_STREAMER_PLAYER_ID, playerid);

					}
                    case 5:
					{
			          	 TogglePlayerDynamicCP(playerid, MissionCP[10], false);
                      	 Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[10], E_STREAMER_PLAYER_ID, playerid);
						 PlayerTextDrawSetStringEX(playerid, pMissionTD[playerid], "Follow the ~y~Icon~w~ on your minimap to deliver the ~y~Pizza~n~~g~Pizza Delivered : 4/5");
                	     SetPVarInt(playerid, "MissionProgress", 6);
			             TogglePlayerDynamicCP(playerid, MissionCP[11], true);
                         Streamer_AppendArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[11], E_STREAMER_PLAYER_ID, playerid);

					}
					case 6:
					{
			           TogglePlayerDynamicCP(playerid, MissionCP[11], false);
                       Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[11], E_STREAMER_PLAYER_ID, playerid);
					   SendInfoText(playerid, 4000, "~y~Mission Completed~n~~g~$30000");
					   PlayAudioStreamForPlayer(playerid, "https://dl.dropbox.com/u/52869044/GTADM%20-%20Mission%20Completed.mp3");
					   GivePlayerMoneyEX(playerid, 50000);
                       ScoreTDupdate(playerid, 5);
					   DeletePVar(playerid, "MissionProgress");
					   PlayerInfo[playerid][Mission]++;
                       PlayerTextDrawHide(playerid, pMissionTD[playerid]);
                       TogglePlayerAllDynamicRaceCPs(playerid, true);

	                   new str[128];
                       format(str, sizeof(str), "UPDATE `users` SET `Mission` = %d WHERE `UserID` = '%d'", PlayerInfo[playerid][Mission], PlayerInfo[playerid][UserID]);
                       mysql_query(GTADM, str);
					}
	            }
		   }
		   case 2:
		   {
                       Streamer_RemoveArrayData(STREAMER_TYPE_PICKUP , MissionPickup[0], E_STREAMER_PLAYER_ID, playerid);
			           TogglePlayerDynamicCP(playerid, MissionCP[12], false);
                       Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[12], E_STREAMER_PLAYER_ID, playerid);
					   SendInfoText(playerid, 8000, "~y~Mission Completed~n~~g~$44000");
					   PlayAudioStreamForPlayer(playerid, "https://dl.dropbox.com/u/52869044/GTADM%20-%20Mission%20Completed.mp3");
					   GivePlayerMoneyEX(playerid, 50000);
					   ScoreTDupdate(playerid, 5);
					   DeletePVar(playerid, "MissionProgress");
					   PlayerInfo[playerid][Mission]++;

                       PlayerTextDrawHide(playerid, pMissionTD[playerid]);
                       TogglePlayerAllDynamicRaceCPs(playerid, true);

                       RemovePlayerAttachedObject(playerid, 0);
	                   new str[128];
                       format(str, sizeof(str), "UPDATE `users` SET `Mission` = %d WHERE `UserID` = '%d'", PlayerInfo[playerid][Mission], PlayerInfo[playerid][UserID]);
                       mysql_query(GTADM, str);

		   }
		   case 3:
		   {
	            switch(GetPVarInt(playerid, "MissionProgress"))
	            {
                    case 1:
					{
						if(!IsPlayerInAnyVehicle(playerid))
						{
			             TogglePlayerDynamicCP(playerid, MissionCP[13], false);
                         Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[13], E_STREAMER_PLAYER_ID, playerid);
			             TogglePlayerDynamicCP(playerid, MissionCP[14], true);
                         Streamer_AppendArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[14], E_STREAMER_PLAYER_ID, playerid);
						 PlayerTextDrawSetStringEX(playerid, pMissionTD[playerid], "Carry the boxes to the van~n~~g~Boxes in van : 0/4");
                	     SetPVarInt(playerid, "MissionProgress", 2);

        			     SetTimerEx("mission4_", 1000, false, "i", playerid);
        			     SetPlayerAttachedObject( playerid, 0, 1220, 6, 0.173213, 0.339527, -0.260308, 245.756027, 355.326354, 344.837310, 1.000000, 1.000000, 1.000000 );
						}
					}
					case 2:
					{
						if(!IsPlayerInAnyVehicle(playerid))
						{
			             TogglePlayerDynamicCP(playerid, MissionCP[14], false);
                         Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[14], E_STREAMER_PLAYER_ID, playerid);
			             TogglePlayerDynamicCP(playerid, MissionCP[15], true);
                         Streamer_AppendArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[15], E_STREAMER_PLAYER_ID, playerid);
						 PlayerTextDrawSetStringEX(playerid, pMissionTD[playerid], "Carry the boxes to the van~n~~g~Boxes in van : 1/4");
          			     RemovePlayerAttachedObject(playerid, 0);
                	     SetPVarInt(playerid, "MissionProgress", 3);
          			     ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 1, 1, 1, 1);
						}
						 //stopholding
					}
                    case 3:
					{
						if(!IsPlayerInAnyVehicle(playerid))
						{
			             TogglePlayerDynamicCP(playerid, MissionCP[15], false);
                         Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[15], E_STREAMER_PLAYER_ID, playerid);
			             TogglePlayerDynamicCP(playerid, MissionCP[16], true);
                         Streamer_AppendArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[16], E_STREAMER_PLAYER_ID, playerid);
                	     SetPVarInt(playerid, "MissionProgress", 4);
                	     ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 1, 1, 1, 1);
        			     SetTimerEx("mission4_", 1000, false, "i", playerid);
        			     SetPlayerAttachedObject( playerid, 0, 1220, 6, 0.173213, 0.339527, -0.260308, 245.756027, 355.326354, 344.837310, 1.000000, 1.000000, 1.000000 );
						}
					}
					case 4:
					{
						if(!IsPlayerInAnyVehicle(playerid))
						{
			             TogglePlayerDynamicCP(playerid, MissionCP[16], false);
                         Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[16], E_STREAMER_PLAYER_ID, playerid);
			             TogglePlayerDynamicCP(playerid, MissionCP[17], true);
                         Streamer_AppendArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[17], E_STREAMER_PLAYER_ID, playerid);
                	     SetPVarInt(playerid, "MissionProgress", 4);
  						 PlayerTextDrawSetStringEX(playerid, pMissionTD[playerid], "Carry the boxes to the van~n~~g~Boxes in van : 2/4");
          			     RemovePlayerAttachedObject(playerid, 0);
                	     SetPVarInt(playerid, "MissionProgress", 5);
          			     ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 1, 1, 1, 1);
						}
						 //stopholding
					}
					case 5:
					{
						if(!IsPlayerInAnyVehicle(playerid))
						{
			             TogglePlayerDynamicCP(playerid, MissionCP[17], false);
                         Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[17], E_STREAMER_PLAYER_ID, playerid);
			             TogglePlayerDynamicCP(playerid, MissionCP[18], true);
                         Streamer_AppendArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[18], E_STREAMER_PLAYER_ID, playerid);
                	     SetPVarInt(playerid, "MissionProgress", 6);
                	     ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 1, 1, 1, 1);
        			     SetTimerEx("mission4_", 1000, false, "i", playerid);
        			     SetPlayerAttachedObject( playerid, 0, 1220, 6, 0.173213, 0.339527, -0.260308, 245.756027, 355.326354, 344.837310, 1.000000, 1.000000, 1.000000 );

						}
					}
					case 6:
					{
						if(!IsPlayerInAnyVehicle(playerid))
						{
			             TogglePlayerDynamicCP(playerid, MissionCP[18], false);
                         Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[18], E_STREAMER_PLAYER_ID, playerid);
			             TogglePlayerDynamicCP(playerid, MissionCP[19], true);
                         Streamer_AppendArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[19], E_STREAMER_PLAYER_ID, playerid);
						 PlayerTextDrawSetStringEX(playerid, pMissionTD[playerid], "Carry the boxes to the van~n~~g~Boxes in van : 3/4");
          			     RemovePlayerAttachedObject(playerid, 0);
                	     SetPVarInt(playerid, "MissionProgress", 7);

          			     ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 1, 1, 1, 1);
						}
						 //stopholding
					}
                    case 7:
					{
						if(!IsPlayerInAnyVehicle(playerid))
						{
			             TogglePlayerDynamicCP(playerid, MissionCP[19], false);
                         Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[19], E_STREAMER_PLAYER_ID, playerid);
			             TogglePlayerDynamicCP(playerid, MissionCP[20], true);
                         Streamer_AppendArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[20], E_STREAMER_PLAYER_ID, playerid);
                	     SetPVarInt(playerid, "MissionProgress", 8);
                	     ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 1, 1, 1, 1);
        			     SetTimerEx("mission4_", 1000, false, "i", playerid);
        			     SetPlayerAttachedObject( playerid, 0, 1220, 6, 0.173213, 0.339527, -0.260308, 245.756027, 355.326354, 344.837310, 1.000000, 1.000000, 1.000000 );

						}
					}
                    case 8:
					{
						if(!IsPlayerInAnyVehicle(playerid))
						{
						 PlayerTextDrawSetStringEX(playerid, pMissionTD[playerid], "- Deliver the van to ~y~Angel Pine~w~ without damaging it~n~- ~r~Any little damage could make the boxes explode");
			             TogglePlayerDynamicCP(playerid, MissionCP[20], false);
                         Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[20], E_STREAMER_PLAYER_ID, playerid);
			             TogglePlayerDynamicCP(playerid, MissionCP[21], true);
                         Streamer_AppendArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[21], E_STREAMER_PLAYER_ID, playerid);
          			     ClearAnimations(playerid);
          			     RemovePlayerAttachedObject(playerid, 0);
						 SetPlayerPos(playerid, 2587.3997, -2380.1553, 13.4675);
						 SetPlayerInterior(playerid, 0), SetPlayerVirtualWorldEX(playerid, 0);
						 new ah;
						 ah=CreateVehicle(498, 2587.3997, -2380.1553, 13.4675, 43.5146, -1, -1, 30);
                         ResetCarInfo(ah);
						 AdminCar[ah]=1;
                         VehicleInfo[ah][Player]=INVALID_PLAYER_ID;
						 PutPlayerInVehicle(playerid, ah, 0);
               	         SetPVarInt(playerid, "MissionProgress", 9);

						}
					}
					case 9:
					{
			           TogglePlayerDynamicCP(playerid, MissionCP[21], false);
                       Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[21], E_STREAMER_PLAYER_ID, playerid);
					   SendInfoText(playerid, 8000, "~y~Mission Completed~n~~g~$44000");
					   PlayAudioStreamForPlayer(playerid, "https://dl.dropbox.com/u/52869044/GTADM%20-%20Mission%20Completed.mp3");
					   GivePlayerMoneyEX(playerid, 73000);
                       ScoreTDupdate(playerid, 5);
					   DeletePVar(playerid, "MissionProgress");
					   PlayerInfo[playerid][Mission]++;
					   DestroyVehicleEX(GetPlayerVehicleID(playerid));
                       PlayerTextDrawHide(playerid, pMissionTD[playerid]);

                       TogglePlayerAllDynamicRaceCPs(playerid, true);
	                   new str[128];
                       format(str, sizeof(str), "UPDATE `users` SET `Mission` = %d WHERE `UserID` = '%d'", PlayerInfo[playerid][Mission], PlayerInfo[playerid][UserID]);
                       mysql_query(GTADM, str);
					}
	            }

		   }
		   case 4:
		   {
			    TogglePlayerDynamicCP(playerid, MissionCP[22], false);
                Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[22], E_STREAMER_PLAYER_ID, playerid);
				PlayerTextDrawSetStringEX(playerid, pMissionTD[playerid], "Find the hidden ~g~sniper!");
                Streamer_AppendArrayData(STREAMER_TYPE_PICKUP , MissionPickup[1], E_STREAMER_PLAYER_ID, playerid);
		   }
		   case 5:
		   {
	            switch(GetPVarInt(playerid, "MissionProgress"))
	            {
					 case 1:
					 {
						 RepairVehicle(GetPlayerVehicleID(playerid));
			             TogglePlayerDynamicCP(playerid, MissionCP[23], false);
                         Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[23], E_STREAMER_PLAYER_ID, playerid);
			             TogglePlayerDynamicCP(playerid, MissionCP[24], true);
                         Streamer_AppendArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[24], E_STREAMER_PLAYER_ID, playerid);
           				 PlayerTextDrawSetStringEX(playerid, pMissionTD[playerid], "- ~p~Nice ~w~, now ~y~park~w~ the vehicle in front of our ~y~friend's home~n~~w~Without ~r~damaging~w~ it");
						 SetPVarInt(playerid, "MissionProgress", 2);

 					 }
					 case 2:
					 {
			             TogglePlayerDynamicCP(playerid, MissionCP[24], false);
                         Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[24], E_STREAMER_PLAYER_ID, playerid);
                         SetPVarInt(playerid, "MissionProgress", 3);
						 DestroyVehicleEX(GetPlayerVehicleID(playerid));
						 new ah;
                         ah= CreateVehicle(575, 2809.6602, -1184.4684, 25.1537, 88.8611, -1, -1, 30);
                         ResetCarInfo(ah);
                         SetPlayerPos(playerid, 2837.7429, -1230.3541, 22.9258);
                         AdminCar[ah]=1;
                         VehicleInfo[ah][Player]=INVALID_PLAYER_ID;
                         SetPlayerCameraPos(playerid, 2808.0063, -1175.3402, 32.6688);
						 SetPlayerCameraLookAt(playerid, 2808.6587, -1188.2173, 25.335);
			             InterpolateCameraPos(playerid, 2808.0063, -1175.3402, 32.6688, 2807.8020, -1210.1785, 41.1685, 10000);

	 		             SetTimerEx("mission6_1", 4000, false, "i", playerid);
			             SetTimerEx("mission6_2", 8000, false, "ii", playerid, ah);
			             SetTimerEx("mission6_3", 1000, false, "ii", playerid, ah);
			             PlayerPlaySound(playerid, 1147, 0, 0, 0);
						 SetPVarInt(playerid, "sskins", GetPlayerSkin(playerid));
					 }
					 case 3:
					 {
                         PlayerTextDrawSetStringEX(playerid, pMissionTD[playerid], "- Its time to ~y~feed the fish ~n~~w~-follow the ~r~icon ~w~on your minimap~n~- Do not ~r~leave~w~ the vehicle!");
			             TogglePlayerDynamicCP(playerid, MissionCP[25], false);
                         Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[25], E_STREAMER_PLAYER_ID, playerid);
                         new ah;
						 ah=CreateVehicle(442, 857.3804, -1101.5587, 24.2969, 270.6231, -1, -1, 60);
                         ResetCarInfo(ah);
                         AdminCar[ah]=1;
                         VehicleInfo[ah][Player]=INVALID_PLAYER_ID;
						 PutPlayerInVehicle(playerid, ah, 0);
			             TogglePlayerDynamicCP(playerid, MissionCP[26], true);
                         Streamer_AppendArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[26], E_STREAMER_PLAYER_ID, playerid);
						 SetPVarInt(playerid, "MissionProgress", 4);
					 }
					 case 4:
					 {
					  if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 442)
					  {
			           TogglePlayerDynamicCP(playerid, MissionCP[26], false);
                       Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[26], E_STREAMER_PLAYER_ID, playerid);
					   SendInfoText(playerid, 8000, "~y~Mission Completed~n~~g~$44000");
					   PlayAudioStreamForPlayer(playerid, "https://dl.dropbox.com/u/52869044/GTADM%20-%20Mission%20Completed.mp3");
					   GivePlayerMoneyEX(playerid, 73000);
                       ScoreTDupdate(playerid, 5);
					   DeletePVar(playerid, "MissionProgress");
					   PlayerInfo[playerid][Mission]++;
					   DestroyVehicleEX(GetPlayerVehicleID(playerid));
                       PlayerTextDrawHide(playerid, pMissionTD[playerid]);

                       TogglePlayerAllDynamicRaceCPs(playerid, true);

 	                   new str[128];
                       format(str, sizeof(str), "UPDATE `users` SET `Mission` = %d WHERE `UserID` = '%d'", PlayerInfo[playerid][Mission], PlayerInfo[playerid][UserID]);
                       mysql_query(GTADM, str);
                     }
					 }
				}
		   }
		   case 6:
		   {
				new str[128];
				format(str, sizeof(str), "- ~g~IceCream Sold : %d/29", GetPVarInt(playerid, "MissionProgress")-1);
                PlayerTextDrawSetStringEX(playerid, pMissionTD[playerid], str);
				new a=GetPVarInt(playerid, "MissionProgress");
				TogglePlayerDynamicCP(playerid, MissionCP[26+a], false);
                Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[26+a], E_STREAMER_PLAYER_ID, playerid);

			    TogglePlayerDynamicCP(playerid, MissionCP[27+a], true);
                Streamer_AppendArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[27+a], E_STREAMER_PLAYER_ID, playerid);
				if(a==1)
				{
						 new ah;
						 ah=CreateVehicle(423, -1992.1260, 152.1267, 27.5686, 2.1205, -1, -1, 30);
                         ResetCarInfo(ah);
						 AdminCar[ah]=1;
						 VehicleInfo[ah][Player]=INVALID_PLAYER_ID;
						 PutPlayerInVehicle(playerid, ah, 0);
				}
				if(a == 30)
				{
					   SendInfoText(playerid, 4000, "~y~Mission Completed~n~~g~$100000");
					   PlayAudioStreamForPlayer(playerid, "https://dl.dropbox.com/u/52869044/GTADM%20-%20Mission%20Completed.mp3");
					   GivePlayerMoneyEX(playerid, 100000);
                       ScoreTDupdate(playerid, 5);
					   DeletePVar(playerid, "MissionProgress");
					   PlayerInfo[playerid][Mission]++;
					   DestroyVehicleEX(GetPlayerVehicleID(playerid));
                       PlayerTextDrawHide(playerid, pMissionTD[playerid]);

                       TogglePlayerAllDynamicRaceCPs(playerid, true);
	                   new stra[128];
                       format(stra, sizeof(stra), "UPDATE `users` SET `Mission` = %d WHERE `UserID` = '%d'", PlayerInfo[playerid][Mission], PlayerInfo[playerid][UserID]);
                       mysql_query(GTADM, stra);
				}
				else SetPVarInt(playerid, "MissionProgress", GetPVarInt(playerid, "MissionProgress")+1);
		   }
		   case 7:
		   {
	            switch(GetPVarInt(playerid, "MissionProgress"))
	            {
					 case 1:
					 {
			    	    TogglePlayerDynamicCP(playerid, MissionCP[27], false);
                	    Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[56], E_STREAMER_PLAYER_ID, playerid);

			   	 	 	TogglePlayerDynamicCP(playerid, MissionCP[57], true);
                	 	Streamer_AppendArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[57], E_STREAMER_PLAYER_ID, playerid);
						new ah;
						ah=CreateVehicle(407, -2006.8969, 65.5975, 29.0945, 182.7100, -1, -1, 30);
                        ResetCarInfo(ah);
						AdminCar[ah]=1;
						VehicleInfo[ah][Player]=INVALID_PLAYER_ID;
			 			PutPlayerInVehicle(playerid, ah, 0);
           	            PlayerTextDrawSetStringEX(playerid, pMissionTD[playerid], "- The cluckin' bell's resturant is ~y~burning~n~~r~Hurry up~w~  before its too late");
                        SetPVarInt(playerid, "MissionProgress", 2);
                        SetPVarInt(playerid, "FirePorgress", 28);
					 }
					 case 2:
					 {
			    	    TogglePlayerDynamicCP(playerid, MissionCP[57], false);
                	    Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[57], E_STREAMER_PLAYER_ID, playerid);

           	            PlayerTextDrawSetStringEX(playerid, pMissionTD[playerid], "- Use the ~b~Fire truck ~w~to~r~ Extinguish~w~ the fire");
                        SetPVarInt(playerid, "MissionProgress", 3);
					 }
					 case 4:
					 {
			    	    TogglePlayerDynamicCP(playerid, MissionCP[58], false);
                	    Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON, MissionMap[58], E_STREAMER_PLAYER_ID, playerid);

			   	 	 	TogglePlayerDynamicCP(playerid, MissionCP[59], true);
                	 	Streamer_AppendArrayData(STREAMER_TYPE_MAP_ICON, MissionMap[59], E_STREAMER_PLAYER_ID, playerid);

           	            PlayerTextDrawSetStringEX(playerid, pMissionTD[playerid], "- ~p~WTF~w~!~n~These ~r~scammers ~w~are not going to give you your ~g~payday~n~~w~Lets teach them a ~r~lesson~n~~w~Follow the ~y~icon ~w~on your minimap");
                        SetPVarInt(playerid, "MissionProgress", 5);
					 }
					 case 5:
					 {
						SetPlayerVirtualWorldEX(playerid, 77);
			    	    TogglePlayerDynamicCP(playerid, MissionCP[59], false);
                	    Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[59], E_STREAMER_PLAYER_ID, playerid);
						new ah;
					 	ah=CreateVehicle(432, -1530.7177, 366.0592, 7.1875, 81.1368, -1, -1, 30);
                        ResetCarInfo(ah);
						SetVehicleVirtualWorld(ah, 77);
			 			PutPlayerInVehicle(playerid, ah, 0);
			 			AdminCar[ah]=1;
			 			VehicleInfo[ah][Player]=INVALID_PLAYER_ID;
	                    MissionMap[playerid]=CreateDynamicMapIcon(-2668.1921, 260.1285, 4.6328,  19, 0xE01B1BFF, -1 , 0, -255, 20000.0000);

           	            PlayerTextDrawSetStringEX(playerid, pMissionTD[playerid], "- Use the ~b~Rhino~w~ to ~r~take down ~w~their fu[[ing lovely ~y~cluckin' bell");

                        SetPVarInt(playerid, "MissionProgress", 6);
                        MissionObjects[playerid][0]=CreatePlayerObject(playerid, 19300, -2692.59, 259.75, 10.95, 0.00, 0.00, 0.00);
                        MissionObjects[playerid][1]=CreatePlayerObject(playerid, 19300, -2656.93, 251.55, 10.95, 0.00, 0.00, 0.00);
                        MissionObjects[playerid][2]=CreatePlayerObject(playerid, 19300, -2656.87, 246.74, 10.95, 0.00, 0.00, 0.00);
                        MissionObjects[playerid][3]=CreatePlayerObject(playerid, 19300, -2656.95, 243.09, 10.95, 0.00, 0.00, 0.00);
                        MissionObjects[playerid][4]=CreatePlayerObject(playerid, 19300, -2656.84, 258.00, 10.95, 0.00, 0.00, 0.00);
                        MissionObjects[playerid][5]=CreatePlayerObject(playerid, 19300, -2660.46, 259.68, 10.95, 0.00, 0.00, 0.00);
                        MissionObjects[playerid][6]=CreatePlayerObject(playerid, 19300, -2668.37, 259.66, 10.95, 0.00, 0.00, 0.00);
                        MissionObjects[playerid][7]=CreatePlayerObject(playerid, 18689, -2677.94, 259.64, 10.95, 0.00, 0.00, 0.00);
                        MissionObjects[playerid][8]=CreatePlayerObject(playerid, 19300, -2686.52, 259.82, 10.95, 0.00, 0.00, 0.00);
                        MissionObjects[playerid][9]=CreatePlayerObject(playerid, 19300, -2689.38, 259.96, 7.87, 0.00, 0.00, 0.00);
                        MissionObjects[playerid][10]=CreatePlayerObject(playerid, 19300, -2679.93, 260.10, 7.87, 0.00, 0.00, 0.00);
                        MissionObjects[playerid][11]=CreatePlayerObject(playerid, 19300, -2670.18, 260.52, 7.87, 0.00, 0.00, 0.00);
                        MissionObjects[playerid][12]=CreatePlayerObject(playerid, 19300, -2662.94, 260.15, 7.87, 0.00, 0.00, 0.00);
                        MissionObjects[playerid][13]=CreatePlayerObject(playerid, 19300, -2656.00, 252.03, 7.87, 0.00, 0.00, 0.00);

					 }
	            }
		   }
		   case 8:
		   {
	            switch(GetPVarInt(playerid, "MissionProgress"))
	            {
				  case 1:
				  {
			        TogglePlayerDynamicCP(playerid, MissionCP[60], false);
                    Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[60], E_STREAMER_PLAYER_ID, playerid);
           	        PlayerTextDrawSetStringEX(playerid, pMissionTD[playerid], "- ~p~Damn It! ~w~The safe is ~r~locked!~n~~w~We need some ~r~bombs ~w~to blow it up~n~- Go outside and Follow the ~y~icon~w~ on your minimap");
                    SetPVarInt(playerid, "MissionProgress", 2);

			        TogglePlayerDynamicCP(playerid, MissionCP[61], true);
                    Streamer_AppendArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[61], E_STREAMER_PLAYER_ID, playerid);
				  }
				  case 2:
				  {
			        TogglePlayerDynamicCP(playerid, MissionCP[61], false);
                    Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[61], E_STREAMER_PLAYER_ID, playerid);
			        TogglePlayerDynamicCP(playerid, MissionCP[62], true);
                    Streamer_AppendArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[62], E_STREAMER_PLAYER_ID, playerid);
           	        PlayerTextDrawSetStringEX(playerid, pMissionTD[playerid], "- now get back to ~y~Madd Doggs Mansion~w~ and use the bombs to open the safe!");
                    SetPVarInt(playerid, "MissionProgress", 3);

				  }
				  case 3:
				  {
			        TogglePlayerDynamicCP(playerid, MissionCP[62], false);
                    Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[62], E_STREAMER_PLAYER_ID, playerid);
				   	ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
  	                SendClientMessage(playerid, JOBINFO, "- The bomb will blow up in 5 seconds");
					SetTimerEx("Mission9_2", 5000, false, "i", playerid);
                    SetPVarInt(playerid, "MissionProgress", 4);
				  }
				  case 5:
				  {

			        TogglePlayerDynamicCP(playerid, MissionCP[63], false);
                    Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[63], E_STREAMER_PLAYER_ID, playerid);
                    Streamer_RemoveArrayData(STREAMER_TYPE_PICKUP , MissionPickup[3], E_STREAMER_PLAYER_ID, playerid);

					new ah;
					ah=CreateVehicle(446, -1475.1033, 689.8996, 0.3024, 0.0, -1, -1, 30);
                    ResetCarInfo(ah);
					AdminCar[ah]=1;
					VehicleInfo[ah][Player]=INVALID_PLAYER_ID;
			 		PutPlayerInVehicle(playerid, ah, 0);
			        TogglePlayerDynamicCP(playerid, MissionCP[64], true);
                    Streamer_AppendArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[64], E_STREAMER_PLAYER_ID, playerid);
                    SetPVarInt(playerid, "MissionProgress", 6);
				  }
				  case 6:
				  {
			        TogglePlayerDynamicCP(playerid, MissionCP[64], false);
                    Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[64], E_STREAMER_PLAYER_ID, playerid);
           	        PlayerTextDrawSetStringEX(playerid, pMissionTD[playerid], "- Dive into the water and find the treasure");
                    Streamer_AppendArrayData(STREAMER_TYPE_PICKUP , MissionPickup[4], E_STREAMER_PLAYER_ID, playerid);
                    SetPVarInt(playerid, "MissionProgress", 7);

				  }
	            }
		   }
	   }
	   break;
	}
  }
  return 1;
}

Float:DistanceCameraTargetToLocation(Float:CamX, Float:CamY, Float:CamZ, Float:ObjX, Float:ObjY, Float:ObjZ, Float:FrX, Float:FrY, Float:FrZ) {

        new Float:TGTDistance;
        TGTDistance = floatsqroot((CamX - ObjX) * (CamX - ObjX) + (CamY - ObjY) * (CamY - ObjY) + (CamZ - ObjZ) * (CamZ - ObjZ));
        new Float:tmpX, Float:tmpY, Float:tmpZ;
        tmpX = FrX * TGTDistance + CamX;
        tmpY = FrY * TGTDistance + CamY;
        tmpZ = FrZ * TGTDistance + CamZ;
        return floatsqroot((tmpX - ObjX) * (tmpX - ObjX) + (tmpY - ObjY) * (tmpY - ObjY) + (tmpZ - ObjZ) * (tmpZ - ObjZ));
}
stock PlayerFaces(playerid, Float:x, Float:y, Float:z, Float:radius)
{
        new Float:cx, Float:cy, Float:cz, Float:fx, Float:fy, Float:fz;
        GetPlayerCameraPos(playerid, cx, cy, cz);
        GetPlayerCameraFrontVector(playerid, fx, fy, fz);
        return (radius >= DistanceCameraTargetToLocation(cx, cy, cz, x, y, z, fx, fy, fz));
}

stock ShowRaceInfo(playerid)
{
	new str[256];
	new Float:at=GetDistanceBetweenPoints(RaceCPs[RaceIDCount][0][0], RaceCPs[RaceIDCount][0][1], RaceCPs[RaceIDCount][0][2], RaceCPs[RaceIDCount][RaceInfo[RaceIDCount][RaceCpCount]][0], RaceCPs[RaceIDCount][RaceInfo[RaceIDCount][RaceCpCount]][1], RaceCPs[RaceIDCount][RaceInfo[RaceIDCount][RaceCpCount]][2]);
	if(strlen(RaceInfo[RaceIDCount][Creator]) > 0) format(str, sizeof(str), "~l~Checkpoints:  ~w~%d~n~~n~~l~Distance:  ~w~%.2fM~n~~n~~l~Created by:  ~w~%s", RaceInfo[RaceIDCount][RaceCpCount], at, RaceInfo[RaceIDCount][Creator]);
	else format(str, sizeof(str), "~l~Checkpoints:  ~w~%d~n~~n~~l~Distance:  ~w~%.2fM~n~~n~~l~Created by:  ~w~Unknown", RaceInfo[RaceIDCount][RaceCpCount], at);
	PlayerTextDrawSetString(playerid, pRRTD[playerid][4], str);

	format(str, sizeof(str), "~r~Race ~w~%s", RaceIDstring(RaceIDCount));
	PlayerTextDrawSetString(playerid, pRRTD[playerid][0], str);

	for(new x=0; x<RaceInfo[RaceIDCount][RaceCpCount]; x++)
	{
		if(x >= RaceInfo[RaceIDCount][RaceCpCount]-1) pRRTD[playerid][x+6]=CreatePlayerTextDraw(playerid, 267.0 + ((RaceCPs[RaceIDCount][x][0] + 3000.0) / 6000.0) * 250.0, 382.0 - ((RaceCPs[RaceIDCount][x][1] + 3000.0) / 6000.0) * 250.0, "hud:radar_flag"), PlayerTextDrawTextSize(playerid, pRRTD[playerid][x+6], 10.0, 10.0);
		else pRRTD[playerid][x+6]=CreatePlayerTextDraw(playerid, 267.0 + ((RaceCPs[RaceIDCount][x][0] + 3000.0) / 6000.0) * 250.0, 382.0 - ((RaceCPs[RaceIDCount][x][1] + 3000.0) / 6000.0) * 250.0, "hud:radar_light"), PlayerTextDrawTextSize(playerid, pRRTD[playerid][x+6], 6.0, 6.0);
		PlayerTextDrawFont(playerid, pRRTD[playerid][x+6], 4);
	}
	for(new x=0; x<RaceInfo[RaceIDCount][RaceCpCount]+6; x++) PlayerTextDrawShow(playerid, pRRTD[playerid][x]);

}
stock HideRaceInfo(playerid)
{
	for(new x=0; x<60; x++)
	{
      if(pRRTD[playerid][x] != INVALID_PLAYERTEXT_DRAW)
	  {
		 if(x>= 6)
		 {
		  PlayerTextDrawDestroy(playerid, pRRTD[playerid][x]);
		  pRRTD[playerid][x] = INVALID_PLAYERTEXT_DRAW;
		 }
		 PlayerTextDrawHide(playerid, pRRTD[playerid][x]);
	  }
	}
	DeletePVar(playerid, "RaceStating");
}
/*
CMD:target(playerid, params[])
{
  if(!IsAdmin(playerid, 1) && PlayerInfo[playerid][IsVIP] == 0) return SendWarning(playerid, "Only VIP's can use this command!");
  if(IsInFight(playerid)) return SendMsg(playerid, 2);
  if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
  if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
  if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
  if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
  if(GetPlayerVirtualWorld(playerid) != 19888 && GetPlayerVirtualWorld(playerid) != 19999) for( new w=0; w < 13; w++ ) GetPlayerWeaponData( playerid, w, pWeapons[playerid][w], pAmmo[playerid][w] );
  if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");
  new target;
  if(sscanf(params, "u", target)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA} /target "GRAY_"<playerid>");
  if(!IsPlayerConnected(target))  return SendWarning(playerid, "{BABABA}This player is not connected");
  //if(IsPlayerNPC(target) && !strcmp(pName[target], "Jonny")) return SendNpcPM(playerid, "GTFO"), GiveMedal(playerid, 24);
  //if(IsPlayerNPC(target)) return 0;
  if(target==playerid) return SendWarning(playerid, "You can't target yourself!");

  if(IsPlayerConnected(target))
  {
    new vehicleid = GetPlayerVehicleID(playerid);
    new VehicleModel = GetVehicleModel(vehicleid);

    if(VehicleModel == 520 || VehicleModel == 425 || VehicleModel == 447 || VehicleModel == 432) //hydra/hunter/sea sparrow/rhino
    {
      PlayerTargetID[playerid] = target;

      if(PlayerTargetTextCreated[playerid] == true)
      {
        DeletePlayer3DTextLabel(playerid, PlayerText3D:PlayerTargetText[playerid]);
      }

      if(IsPlayerStreamedIn(PlayerTargetID[playerid], playerid))
      {
        PlayerTargetText[playerid] = CreatePlayer3DTextLabel(playerid, "{FF0000}v\n>  o  <\n^", 0xFFFFFFFF, 0.0, 0.0, 0.0, 100000.0, PlayerTargetID[playerid], INVALID_VEHICLE_ID, 0);
      }
      else
      {
        new Float:px, Float:py, Float:pz;
        GetPlayerPos(target, px, py, pz);
        PlayerTargetText[playerid] = CreatePlayer3DTextLabel(playerid, "{FF0000}v\n>  o  <\n^", 0xFFFFFFFF, px, py, pz, 100000.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0);

        if(PlayerTargetUpdatetRunning[playerid] == true)
        {
          KillTimer(PlayerTargetUpdatet[playerid]);
        }

        PlayerTargetUpdatet[playerid] = SetTimerEx("PlayerTargetUpdate", 202, 1, "i", playerid);
        PlayerTargetUpdatetRunning[playerid] = true;
        PlayerTargetTextCreated[playerid] = true;
        PlayerPlaySound(playerid, CheckSound, 0.0, 0.0, 0.0);
        SendInfoText(playerid, 3000, "~g~Target marked");
      }
    }
    else
    {
       PlayerPlaySound(playerid, ErrorSound, 0.0, 0.0, 0.0);
       SendInfoText(playerid, 3000, "~r~Only works in millitary aircraft");
    }
  }
  else
  {
    if(PlayerTargetUpdatetRunning[playerid] == true)
    {
      KillTimer(PlayerTargetUpdatet[playerid]);
      PlayerTargetUpdatetRunning[playerid] = false;
    }
    if(PlayerTargetTextCreated[playerid] == true)
    {
      DeletePlayer3DTextLabel(playerid, PlayerText3D:PlayerTargetText[playerid]);
      PlayerTargetTextCreated[playerid] = false;
    }
    PlayerTargetID[playerid] = -1;
    PlayerPlaySound(playerid, CheckSound, 0.0, 0.0, 0.0);
    SendInfoText(playerid, 3000, "~r~Target removed");
  }
  return 1;
}*/
CMD:h1(playerid)
{
  if(!IsAdmin(playerid, 10)) return 0;
  SendRconCommand("hostname  GTADM » Freeroam/Stunt/Race ");
  return 1;
}
CMD:h2(playerid)
{
  if(!IsAdmin(playerid, 10)) return 0;
  SendRconCommand("hostname .·¥·. GTADM »» Freeroam/DM/Minigames/Gangs ««");
  return 1;
}
CMD:maps(playerid)
{
     if(!IsAdmin(playerid, 10)) return SendMsg(playerid, 5);
     new rows;
     format(STRING, sizeof(STRING), "");
     for(new i=0; i<MAX_MAPS; i++)
     {
		 if(strlen(MI[i][mapname]) > 0)
		 {
		   format(STRING, sizeof(STRING), "%s\n%s", STRING, MI[i][mapname]);
		   rows++;
		 }
     }
	 if(rows == 0) SendClientMessage(playerid, -1, "No Maps");
   	 else ShowPlayerDialog(playerid, 7915, DIALOG_STYLE_LIST, "GTADM: "LIGHTYELLOW_"Maps", STRING, "Goto", "Exit");
	 return 1;
}

CMD:s(playerid)
{
 if(!IsAdmin(playerid, 10)) return SendClientMessage(playerid, RED, "{A6856A}» Error «{96A66A} The command \"/s\" is not available, try \"/help\" instead.");
 if(GetPVarInt(playerid, "Sync")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You are already being synced!");
 if(PlayerIsFrozen[playerid]) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this cmd while being frozen!");

 SendInfoText(playerid, 2000, "You are being Synced....");
 SetPVarInt(playerid, "Sync", true);
 SavePlayerCoords(playerid);
 ResetPlayerWeapons(playerid);
 SetPlayerPos(playerid, 0, 0, 0);
 SetTimerEx("DontSync", 1000, false, "i", playerid);
 return 1;
}

forward DontSync(playerid);
public DontSync(playerid)
{
  LoadPlayerCoords(playerid);
  DeletePVar(playerid, "Sync");

}

CMD:loadmap(playerid, params[])
{
    if(!IsAdmin(playerid, 10)) return SendMsg(playerid, 5);
    new NaMe[128];
    if(sscanf(params, "s[50]", NaMe)) return SendClientMessage(playerid, RED, "Usage : /loadmap "GRAY_"<filename>");
    format(NaMe, 128, "Maps/%s.txt", NaMe);
	LoadSAMPMap(playerid, NaMe, 1);
	return 1;
}
CMD:deletemap(playerid, params[]) return cmd_removemap(playerid, params);
CMD:removemap(playerid, params[])
{
    if(!IsAdmin(playerid, 10)) return SendMsg(playerid, 5);
    new NaMe[128];
    if(sscanf(params, "s[50]", NaMe)) return SendClientMessage(playerid, RED, "Usage : /removemap "GRAY_"<Map name>");
    format(NaMe, 128, "Maps/%s", NaMe);
	RemoveMap(playerid, params);
	return 1;
}
CMD:reloadmap(playerid, params[])
{
    if(!IsAdmin(playerid, 10)) return SendMsg(playerid, 5);
    new NaMe[128];
    if(sscanf(params, "s[50]", NaMe)) return SendClientMessage(playerid, RED, "Usage : /reloadmap "GRAY_"<filename>");
    format(NaMe, 128, "Maps/%s.txt", NaMe);
   	RemoveMap(playerid, params);
	LoadSAMPMap(playerid, NaMe, 1);
	return 1;
}
CMD:setmission(playerid, params[])
{
   if(IsPlayerAdmin(playerid))
   PlayerInfo[playerid][Mission]=strval(params);
   return 1;
}
forward StartPingCheck(playerid);
public StartPingCheck(playerid)
{
	 SetPVarInt(playerid, "PingCheck", true);
	 return 1;
}
CMD:fp(playerid)
{
   if(!IsAdmin(playerid, 5)) return SendMsg(playerid, 5);
   ShowFootballDialog(playerid);
   return 1;
}
stock ShowFootballDialog(playerid)
{
   new str[300];
   format(str, sizeof(str), "{AFA0F0}Auto ball shooting "GRAY_"(Currently %s)\n{FFF000}Team 1 Name "GRAY_"(Current is %s) \n{FAF000}Team 2 Name "GRAY_"(Current is %s)\n"ORANGE_"End Match\n"BLUE_"Respawn Ball\n"PINK_"Play Music In The Stadium\n"RED_"FireWorks!!", (DisableAutoShoot > 0) ? ("OFF") : ("ON"), Team1Name, Team2Name);
   ShowPlayerDialog(playerid, 225, DIALOG_STYLE_LIST, "FootBall Panel", str, "Select", "Exit");

}

stock GiveSpawnWeapons(playerid)
{
	  switch(pLevel[playerid][hitpoint])
	  {
		  case 0..9:SetPlayerArmour(playerid, 0);
		  case 10..19:SetPlayerArmour(playerid, 10);
		  case 20..29:SetPlayerArmour(playerid, 20);
		  case 30..39:SetPlayerArmour(playerid, 30);
		  case 40..49:SetPlayerArmour(playerid, 40);
		  default:SetPlayerArmour(playerid, 50);
	  }
      if((PlayerInfo[playerid][IsVIP] > 0 && pClass[playerid] == 0))
      {
		 GivePlayerWeaponEX(playerid, PlayerInfo[playerid][pVipWeapon1], PlayerInfo[playerid][pVipAmmo1]);
		 GivePlayerWeaponEX(playerid, PlayerInfo[playerid][pVipWeapon2], PlayerInfo[playerid][pVipAmmo2]);
		 GivePlayerWeaponEX(playerid, PlayerInfo[playerid][pVipWeapon3], PlayerInfo[playerid][pVipAmmo3]);
		 Job[playerid] = PlayerInfo[playerid][pVipJob];
      }
	  else
	  {
	    if(Job[playerid] == Hitman) GivePlayerWeaponEX(playerid, 34, 20);
	    if(Job[playerid] == Terrorist) GivePlayerWeaponEX(playerid, 16, 20);
	    if(Job[playerid] == Mechanic) GivePlayerWeaponEX(playerid, 9, 20);
	    if(Job[playerid] == Cop) GivePlayerWeaponEX(playerid, 41, 500);
	    if(Job[playerid] == Medic) GivePlayerWeaponEX(playerid, 4, 500);
	    if(Job[playerid] == Whore) GivePlayerWeaponEX(playerid, 10, 500);
	    if(Job[playerid] == Trucker) GivePlayerWeaponEX(playerid, 15, 500);
	    if(pLevel[playerid][combat] >= 25) SetPVarInt(playerid, "CanHeadShot", true);
	    if(pLevel[playerid][combat] >= 30) SetPVarInt(playerid, "OneShootKill", true);
		switch(pLevel[playerid][combat])
		{
			 case 0..8:
			 {
     			 GivePlayerWeaponEX(playerid, 22, 500);
     			 GivePlayerWeaponEX(playerid, 25, 350);
			 }
			 case 9..12:
			 {
     			 GivePlayerWeaponEX(playerid, 22, 500);
     			 GivePlayerWeaponEX(playerid, 25, 350);
     			 GivePlayerWeaponEX(playerid, 32, 2000);
			 }
			 case 13..18:
			 {
     			 GivePlayerWeaponEX(playerid, 24, 500);
     			 GivePlayerWeaponEX(playerid, 27, 999);
     			 GivePlayerWeaponEX(playerid, 32, 2000);
			 }
			 case 19..22:
			 {
     			 GivePlayerWeaponEX(playerid, 24, 500);
     			 GivePlayerWeaponEX(playerid, 25, 350);
     			 GivePlayerWeaponEX(playerid, 32, 2000);
			 }
			 default:
			 {
     			 GivePlayerWeaponEX(playerid, 32, 500);
     			 GivePlayerWeaponEX(playerid, 24, 350);
     			 GivePlayerWeaponEX(playerid, 26, 2000);
			 }
		}
	  }
      for(new x=0;x<17;x++)
      {
        if(hweapons[playerid][holding][x] > 0) GivePlayerWeaponEX(playerid, GetWeaponIDfromSlot(x), hweapons[playerid][storein][x]);
      }
}

public OnPlayerSpawn(playerid)
{
  if(GetPVarInt(playerid, "cantusecmds")) DeletePVar(playerid, "cantusecmds");

  TextDrawHideForPlayer(playerid, Textdraw0);
  TextDrawHideForPlayer(playerid, Textdraw1);
  TextDrawHideForPlayer(playerid, Textdraw2);
  TextDrawHideForPlayer(playerid, Textdraw3);
  TextDrawHideForPlayer(playerid, Textdraw4);
  TextDrawHideForPlayer(playerid, Textdraw5);
  TextDrawHideForPlayer(playerid, Textdraw6);
  TextDrawHideForPlayer(playerid, Textdraw7);
  TextDrawHideForPlayer(playerid, Textdraw8);
  TextDrawHideForPlayer(playerid, Textdraw9);

  PlayerTextDrawHide(playerid, pIntroTD[playerid][0]);
  PlayerTextDrawHide(playerid, pIntroTD[playerid][1]);
  //
  /*TextDrawHideForPlayer(playerid, Textdraw01);
  TextDrawHideForPlayer(playerid, Textdraw011);
  TextDrawHideForPlayer(playerid, Textdraw02);
  TextDrawHideForPlayer(playerid, Textdraw03);
  TextDrawHideForPlayer(playerid, Textdraw04);
  TextDrawHideForPlayer(playerid, Textdraw05);
  TextDrawHideForPlayer(playerid, Textdraw06);
  TextDrawHideForPlayer(playerid, Textdraw07);*/
  /*
  PlayerTextDrawHide(playerid, pIntroTD[playerid][2]);
  PlayerTextDrawHide(playerid, pIntroTD[playerid][3]);
  PlayerTextDrawHide(playerid, pIntroTD[playerid][4]);
  PlayerTextDrawHide(playerid, pIntroTD[playerid][5]);
  */

  SetPVarInt(playerid, "OutRun_vs", -255);
  new hours, mins, sec;
  gettimeEx(hours, mins, sec);
  SetPlayerTime(playerid, hours, mins);

#if defined USEKILLIST
  if(DontShowKills[playerid] == 0 && killistempty > 0)
  {
    for(new i=0; i<sizeof(Killist); i++) TextDrawShowForPlayer(playerid, Killist[i]);
  }
  #endif
  TickCount[playerid][OffetTK]=0;
  Blowjobbing[playerid]=false;
  TickCount[playerid][heal]=0;
  switch(GetPVarInt(playerid, "INDM"))
  {
	   case 5: SetPlayerInterior(playerid, 10), SetPlayerArmedWeapon(playerid, 38);
	   case 8: SetPlayerInterior(playerid, 4);
	   case 10: SetPlayerInterior(playerid, 1);
	   case 13:
	   {
            SetPlayerInterior(playerid, 18);
			SetPlayerHealth(playerid , 1.1);
			SetPlayerArmour(playerid , 0);
			SetPlayerSpecialAction(playerid, 2);
	   }
	   case 12: SetPlayerInterior(playerid, 2);
	   case 9: SetPlayerInterior(playerid, 16);
	   case 6: SetPlayerInterior(playerid, 7);
	   case 11:
	   {
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		SetPlayerCameraPos(playerid, x, y, z+20);
		SetPlayerCameraLookAt(playerid, x, y, z);
		obj[playerid]= CreateObject(19300, x, y, z, 0.0000, -1, -1, 100);
	    AttachObjectToPlayer(obj[playerid], playerid, 0.0, 0.0, 30.0, 90.0, 0.0, 0.0);
		AttachCameraToObject(playerid, obj[playerid]);
	   }
  }
  if(GetPVarInt(playerid, "WW2")) SetPlayerInterior(playerid, 15);
  CanOpenMenu[playerid] = 1;
  TickCount[playerid][tSpawned]=GetTickCount();
  if(GetPVarInt(playerid, "RemoveWeapons")) ResetPlayerWeaponsEX(playerid), DeletePVar(playerid, "RemoveWeapons");
  TickCount[playerid][house] =0;
  if(IsPlayerNPC(playerid))
  {
    if(!strcmp(pName[playerid], "Jonny"))
    {
         new Text3D:jojo=CreateDynamic3DTextLabel("Jonny", PINK, 30.0, 40.0, 50.0, 40.0, playerid);
         SetPlayerSkin(playerid, 270);
         ResetPlayerWeapons(playerid);
	     PutPlayerInVehicle(playerid, BotVehicle, 0);
		 Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, jojo, E_STREAMER_ATTACH_OFFSET_Z, 0.3);
		 Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, jojo, E_STREAMER_ATTACH_OFFSET_X, 0.0);
		 Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, jojo, E_STREAMER_ATTACH_OFFSET_Y, 0.0);
         Streamer_SetIntData(STREAMER_TYPE_3D_TEXT_LABEL, jojo , E_STREAMER_ATTACHED_PLAYER, playerid);
    }
    else if(!strcmp(pName[playerid], "2ShotMaster"))
    {
         new Text3D:jojo=CreateDynamic3DTextLabel("How to 2Shot", LIGHTYELLOW, 30.0, 40.0, 50.0, 40.0, playerid);
         ResetPlayerWeaponsEX(playerid);
         GivePlayerWeapon(playerid, 26, 99999);
         GivePlayerWeapon(playerid, 32, 99999);
         SetPlayerVirtualWorldEX(playerid, 5);
         SetPlayerSkin(playerid, 102);
		 Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, jojo, E_STREAMER_ATTACH_OFFSET_Z, 0.3);
		 Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, jojo, E_STREAMER_ATTACH_OFFSET_X, 0.0);
		 Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, jojo, E_STREAMER_ATTACH_OFFSET_Y, 0.0);
         Streamer_SetIntData(STREAMER_TYPE_3D_TEXT_LABEL, jojo , E_STREAMER_ATTACHED_PLAYER, playerid);
    }
    else if(!strcmp(pName[playerid], "Tram_Driver"))
    {
        SetSpawnInfo(playerid, 0, 255, 1958.33, 1343.12, 15.36, 269.15, 0, 0, 0, 0, 0, 0 );
	    PutPlayerInVehicle(playerid, tramsf, 0);
    }
    else if(!strcmp(pName[playerid], "Train_Driver"))
    {
        SetSpawnInfo(playerid, 69, 255, 1700.7551, -1953.6531, 14.8756, 0.0, -1, -1, -1, -1, -1, -1);
	    SetPlayerPos(playerid, 1700.7551, -1953.6531, 14.8756);
	    SetPlayerSkin(playerid, 255);
        SetPlayerColor(playerid, 0xFFFFFFFF);
	    PutPlayerInVehicle(playerid, train, 0);
    }
  }
  else
  {
    TickCount[playerid][Fight]=0;
	if(EventStarted == 1) TextDrawShowForPlayer(playerid, EventTD);
    if(EventStarted == 0 && Party == 1) TextDrawShowForPlayer(playerid, PartyTD2);
    else if(EventStarted == 1 && Party == 1) TextDrawShowForPlayer(playerid, PartyTD);
	if(PlayerInfo[playerid][pFS] > 0) SetPlayerFightingStyle(playerid, PlayerInfo[playerid][pFS]);
    SetGlass(playerid);
    SetCaps(playerid);
	for(new x=0; x<sizeof(MissionMap); x++)
	{
	  Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[x], E_STREAMER_PLAYER_ID, playerid);
	  TogglePlayerDynamicCP(playerid, MissionCP[x], false);
	  if(x< sizeof(MissionPickup)) Streamer_RemoveArrayData(STREAMER_TYPE_PICKUP , MissionPickup[x], E_STREAMER_PLAYER_ID, playerid);
	}


	if(RaceStarted == 0 && GetPlayerVirtualWorld(playerid) == 0) SetPlayerRaceCheckpoint(playerid, 0, RaceInfo[RaceIDCount][StartCP][0], RaceInfo[RaceIDCount][StartCP][1], RaceInfo[RaceIDCount][StartCP][2], RaceCPs[RaceIDCount][0][0], RaceCPs[RaceIDCount][0][1], RaceCPs[RaceIDCount][0][2], 15.0);
	CanCountDown[playerid]=1;
	if(GetPVarInt(playerid, "Auto_Login"))
	{
		new interior, dclass, Float:Health, Float:Armour;

		/*
		new Float:x, Float:y, Float:z, Float:a, skin;
		x=GetPVarFloat(playerid, "x");
		y=GetPVarFloat(playerid, "y");
		z=GetPVarFloat(playerid, "z");
		a=GetPVarFloat(playerid, "a");

		dclass=GetPVarInt(playerid, "class");
		skin=GetPVarInt(playerid, "skin");
		if(x != 0 && y != 0) TeleportPlayer(playerid, x, y, z, a, interior);
		if(skin > 0) SetPlayerSkin(playerid, skin);
		*/
		Health = GetPVarFloat(playerid, "Health");
		Armour = GetPVarFloat(playerid, "Armour");
		interior=GetPVarInt(playerid, "interior");
		SetPlayerInterior(playerid, interior);
		pClass[playerid]=dclass;
		if(Health > 0) SetPlayerHealth(playerid, Health);
		SetPlayerArmour(playerid, Armour);
		DeletePVar(playerid, "x");
		DeletePVar(playerid, "y");
		DeletePVar(playerid, "z");
		DeletePVar(playerid, "a");
		DeletePVar(playerid, "interior");
		DeletePVar(playerid, "class");
		DeletePVar(playerid, "skin");
		DeletePVar(playerid, "Health");
		DeletePVar(playerid, "Armour");
		if((GetPVarInt(playerid, "A1") <= 0) && (GetPVarInt(playerid, "A2") <= 0) && (GetPVarInt(playerid, "A3") <= 0) && (GetPVarInt(playerid, "A4") <= 0) && (GetPVarInt(playerid, "A5") <= 0)
		&& (GetPVarInt(playerid, "A6") <= 0) && (GetPVarInt(playerid, "A7") <= 0) && (GetPVarInt(playerid, "A8") <= 0))
		{
             GiveSpawnWeapons(playerid);
		}
		else
		{
         GivePlayerWeaponEX(playerid, GetPVarInt(playerid, "W1"), GetPVarInt(playerid, "A1"));
         GivePlayerWeaponEX(playerid, GetPVarInt(playerid, "W2"), GetPVarInt(playerid, "A2"));
         GivePlayerWeaponEX(playerid, GetPVarInt(playerid, "W3"), GetPVarInt(playerid, "A3"));
         GivePlayerWeaponEX(playerid, GetPVarInt(playerid, "W4"), GetPVarInt(playerid, "A4"));
         GivePlayerWeaponEX(playerid, GetPVarInt(playerid, "W5"), GetPVarInt(playerid, "A5"));
         GivePlayerWeaponEX(playerid, GetPVarInt(playerid, "W6"), GetPVarInt(playerid, "A6"));
         GivePlayerWeaponEX(playerid, GetPVarInt(playerid, "W7"), GetPVarInt(playerid, "A7"));
         GivePlayerWeaponEX(playerid, GetPVarInt(playerid, "W8"), GetPVarInt(playerid, "A8"));
		}
        DeletePVar(playerid, "W1");
        DeletePVar(playerid, "W2");
        DeletePVar(playerid, "W3");
        DeletePVar(playerid, "W4");
        DeletePVar(playerid, "W5");
        DeletePVar(playerid, "W6");
        DeletePVar(playerid, "W7");
        DeletePVar(playerid, "W8");

        DeletePVar(playerid, "A1");
        DeletePVar(playerid, "A2");
        DeletePVar(playerid, "A3");
        DeletePVar(playerid, "A4");
        DeletePVar(playerid, "A5");
        DeletePVar(playerid, "A6");
        DeletePVar(playerid, "A7");
        DeletePVar(playerid, "A8");
        SetCameraBehindPlayer(playerid);

	}
	if(Tab == 1) SetPlayerScore(playerid, PlayerInfo[playerid][pScore]);
	else if(Tab == 0)
	{
	     new pm = PlayerInfo[playerid][pBank] + GetPlayerMoneyEx(playerid);
		 SetPlayerScore(playerid, pm);
	}
//Spawn TextDraw
    if(HideShit[playerid] == 0)
	{
        ShowScreenTXD(playerid);
        PlayerTextDrawShow(playerid, Location[playerid][0]);
        PlayerTextDrawShow(playerid, Location[playerid][1]);
    	PlayerTextDrawShow(playerid, FPS[playerid]);
    	PlayerTextDrawShow(playerid, HealthBar[playerid]);
    	PlayerTextDrawShow(playerid, ArmourBar[playerid]);
    	TextDrawShowForPlayer(playerid, clock);
    	//TextDrawShowForPlayer(playerid, dayTD);
    	TextDrawShowForPlayer(playerid, DateTD);
		TextDrawShowForPlayer(playerid, TdTimeLeftClock);
    	PlayerTextDrawShow(playerid, ScoreTD[playerid]);
	}
	else
	{
	    HideScreenTXD(playerid);
    	PlayerTextDrawHide(playerid, FPS[playerid]);
     	PlayerTextDrawHide(playerid, HealthBar[playerid]);
    	PlayerTextDrawHide(playerid, ArmourBar[playerid]);
    	TextDrawHideForPlayer(playerid, clock);
    	//TextDrawHideForPlayer(playerid, dayTD);
    	TextDrawHideForPlayer(playerid, DateTD);
    	PlayerTextDrawHide(playerid, ScoreTD[playerid]);
   		TextDrawHideForPlayer(playerid, TdTimeLeftClock);
	    TextDrawHideForPlayer(playerid, PartyTD);
	    TextDrawHideForPlayer(playerid, PartyTD2);
	    TextDrawHideForPlayer(playerid, EventTD);
	    PlayerTextDrawHide(playerid, Location[playerid][0]);
        PlayerTextDrawHide(playerid, Location[playerid][1]);

	}

    if(!GetPVarInt(playerid, "Auto_Login")) SetPlayerHealth(playerid, 100);
    if((PlayerInfo[playerid][pCar] > 0) && PlayerInfo[playerid][pHouse] > 0)
    {
		 new v=PlayerCar(playerid);
         if(v != -255)
		 {
		   SetVehicleToRespawn(v), OnVehicleSpawn(v);
		 }
    }
//Others
 	if(!GetPVarInt(playerid, "Auto_Login")) GivePlayerMoneyEX(playerid, 10000);
    if(PlayerInfo[playerid][pGang] >= 0 && inGw[PlayerInfo[playerid][pGang]] > 0) SendInfoText(playerid, 1000, "~y~Help your gang");
    ResetSpawnInfo(playerid);
    ShowScoreTD(playerid);
    PlayerBombs[playerid]=50;
//Spawn Pvars
    Spawned[playerid]=1;
    if(GetPVarInt(playerid, "FLY")) DeletePVar(playerid, "FLY");
    if(GetPVarInt(playerid, "Connectted"))
	{
#if defined USE_ANTI_SOBIET
       SetCameraBehindPlayer(playerid);
       TogglePlayerControllable(playerid, 0);
	   //SendInfoText(playerid, ANTI_SOBIET_FREEZE_SECONDS * 1000, 5, "~n~~n~~n~~y~Please Wait...");
	   SendInfoText(playerid, 4, "~y~Please Wait...");
       SetTimerEx("SobietCheck", ANTI_SOBIET_FREEZE_SECONDS * 1000, 0, "i", playerid);
#endif

       DeletePVar(playerid, "CalledAuto");
       Streamer_ToggleIdleUpdate(playerid, false);
   	   Createp3D(playerid);
       if(PlayerInfo[playerid][pHouse] > 0)
	   {
          ResetHouseTimeStamp(PlayerInfo[playerid][pHouse]);
	   }
       SetCameraBehindPlayer(playerid);
	   new k=random(5);
	   if(k == 1)
	   {
		   new st[128];
		   format(st, sizeof(st), "Hello %s", pName[playerid]);
		   SendBotMessage(st);
	   }
       StopAudioStreamForPlayer(playerid);
       PlayerPlaySound(playerid, 1184, 0.0, 0.0, 0.0);
	   DeletePVar(playerid, "Connectted");
       ShowScreenTXD(playerid);
       if(PlayerInfo[playerid][pGang] < 0) SetPlayerColor( playerid, PlayerColors[random(200)] );
       SetTimerEx("StartPingCheck", 5000, false, "i", playerid);

 	   new Query[330];
       format(Query, sizeof(Query), "UPDATE `users` SET `Online` = 1, `IP` = '%s', `GPCI` ='%s' WHERE `UserID` = '%d'", Escape_Name(pIP(playerid)), Escape_String(pGPCI(playerid)), PlayerInfo[playerid][UserID]);
       mysql_query(GTADM, Query);
       GiveMedal(playerid, 1);
       for(new x=0; x<10; x++) if(IsPlayerAttachedObjectSlotUsed(playerid, x)) RemovePlayerAttachedObject(playerid, x);

       format(Query, sizeof(Query), "-Join- %s's score is %d  || bank money = $%d || %d Kills || %d Deaths || %d PP", pName[playerid], PlayerInfo[playerid][pScore], PlayerInfo[playerid][pBank], PlayerInfo[playerid][pKills], PlayerInfo[playerid][pDeaths], PlayerInfo[playerid][pCook]);
	   printf("%s", Query);
      /* if(fexist("logs/joined.ini"))///
       {
         new Year, Month, Day, Hour, Minute, Second;
         getdate(Year, Month, Day);
         gettime(Hour, Minute, Second);
         format(String, sizeof(String), "\n[%02d/%02d/%d %02d:%02d:%02d] %s\n", Day, Month, Year, Hour, Minute, Second, Query);
         new File:joined = fopen("logs/joined.ini", io_append);
         fwrite(joined, String);
         fclose(joined);
       }*/
	   printf("-Join- %s's GPCI %s", pName[playerid], pGPCI(playerid));

	   if(p_A_Level[playerid] > 0)
	   {
          SendClientMessage(playerid, -1, "-{1B91E0} Use {E01B98}/AdminLogin{1B91E0} to login as an admin");
	   }
	}
    if(GetPVarInt(playerid, "WW")) SetPlayerArmour(playerid, 100);
	else if(!IsDeathMatcher(playerid) && !GetPVarInt(playerid, "Auto_Login"))
	{
		SetCameraBehindPlayer(playerid);
		SetPlayerWeather(playerid, ServerWeather);
		SetPlayerVirtualWorldEX(playerid, 0);
		GiveSpawnWeapons(playerid);

		if(PlayerInfo[playerid][pHouse] > 0 && GetPlayerVirtualWorld(playerid) == 0)
		{
			if(PlayerInfo[playerid][HouseFix] > 0)
			{
				TogglePlayerControllable2(playerid, 0);
				SetTimerEx("WarningUnfreeze", 3000, false, "id", playerid, GetPlayerVirtualWorld(playerid));
				Streamer_Update(playerid);
        	    SendpInfo(playerid, "- ~y~Loading....", 2500);
			}

		}

	}
//cw spawn
	else if(InCW[playerid] >0)
	{
  		ResetPlayerWeaponsEX(playerid);
    	if(InCW[playerid] != 3)
    	{
		  ResetPlayerWeaponsEX(playerid);
          GivePlayerWeaponEX(playerid, CwWeaps[0], 9999);
		  GivePlayerWeaponEX(playerid, CwWeaps[1], 9999);
		  GivePlayerWeaponEX(playerid, CwWeaps[2], 9999);
    	}
    	SetPlayerVirtualWorldEX(playerid, 1000000);
        if(pagecount > 4) TogglePlayerControllable2(playerid, 0);
		SetCwPos(playerid);
	}
	if(GetPlayerVirtualWorld(playerid) == 777)
	{
		SetPlayerVirtualWorldEX(playerid, 777);
		if(Footballer[playerid] ==1)
		{
		    SetPlayerPosEx(playerid, 1324.5721, 2148.6230, 11.0433, 270.1467);
		    SetPlayerSkin(playerid, 52);
		    SetPlayerColor(playerid, PlayerColors[10]);
			SetPlayerHealth(playerid, 2);
			ResetPlayerWeaponsEX(playerid);
		}
		else if(Footballer[playerid] ==2)
		{
	        SetPlayerPosEx(playerid, 1371.1351, 2148.9751, 11.0378, 91.7135);
		    SetPlayerSkin(playerid, 51);
		    SetPlayerColor(playerid, PlayerColors[2]);
			SetPlayerHealth(playerid, 2);
			ResetPlayerWeaponsEX(playerid);
		}
		//else SetPlayerPosEx(playerid, 1403.4863, 2109.2959, 16.3672, 56.7647);
	}
  }


  if(GetPVarInt(playerid, "Auto_Login"))	DeletePVar(playerid, "Auto_Login");
  if((GetPVarInt(playerid, "CS")) == 3 || (GetPVarInt(playerid, "CS")) == 4)
  {
	 if(CS == 2)
	 {
		new p, str[68];
		foreach(new i : Player)
		{
		   if((GetPVarInt(i, "CS")) == (GetPVarInt(playerid, "CS")-2))
		   {
			  p=i;
			  SetPVarInt(playerid, "CS_spec", p);
			  break;
		   }
		}
		TogglePlayerSpectating(playerid, true);
		PlayerSpectatePlayer(playerid, p);
		format(str, sizeof(str), "~y~Spectating: ~g~%s", pName[p]);
		SendInfoText(playerid, 5000, str);
		SendClientMessage(playerid, GRAY, "- Use (/exit) to exit the spectating mode.");
	 }
  }
  if(Job[playerid] == Medic) pMedKets[playerid] =3;
  else pMedKets[playerid]=0;
  if(Job[playerid] == Drugdealer) PlayerInfo[playerid][pDrugs]=3;
  else PlayerInfo[playerid][pDrugs]=0;
  if(Job[playerid] == Mechanic) pRepairKets[playerid]=3;
  else pRepairKets[playerid]=0;

  PlayerInfo[playerid][pDrugLevel]=0;
  DrugsEffect[playerid]=0;
  dOffers[playerid]=-1;
  dOfferMoney[playerid]=0;
  dOffered[playerid]=-1;
  TickCount[playerid][SpeedTK]=0;
  TickCount[playerid][DrugTK]=0;
//  if(!IsPlayerNPC(playerid)) Set3DText(playerid, 1);
  if(GetPlayerTeam(playerid) == 3)  SetPlayerColor( playerid, 0xE01B1BFF );
  else if(GetPlayerTeam(playerid) == 4)  SetPlayerColor( playerid, 0x6A1BE0FF );
  if(GetPlayerVirtualWorld(playerid) == 0 && HideShit[playerid] == 0) PlayerTextDrawShow(playerid, Location[playerid][0]), PlayerTextDrawShow(playerid, Location[playerid][1]);
  switch(GetPVarInt(playerid, "inCTF"))
  {
	 case 1:
     {
	   SetPlayerPosEx(playerid, CTF_Team1_Spawn[ctftype][0], CTF_Team1_Spawn[ctftype][1], CTF_Team1_Spawn[ctftype][2], CTF_Team1_Spawn[ctftype][3]);
	   SetPlayerVirtualWorldEX(playerid, 1777);
	   GivePlayerWeapon(playerid, CTF_WEAPON[ctftype][0], 100000);
	   GivePlayerWeapon(playerid, CTF_WEAPON[ctftype][1], 100000);
	   GivePlayerWeapon(playerid, CTF_WEAPON[ctftype][2], 5);
	   CTFSETCOLOR(playerid);
	 }
	 case 2:
	 {
	   SetPlayerPosEx(playerid, CTF_Team2_Spawn[ctftype][0], CTF_Team2_Spawn[ctftype][1], CTF_Team2_Spawn[ctftype][2], CTF_Team2_Spawn[ctftype][3]);
	   SetPlayerVirtualWorldEX(playerid, 1777);
	   GivePlayerWeapon(playerid, CTF_WEAPON[ctftype][0], 100000);
	   GivePlayerWeapon(playerid, CTF_WEAPON[ctftype][1], 100000);
	   GivePlayerWeapon(playerid, CTF_WEAPON[ctftype][2], 5);
	   CTFSETCOLOR(playerid);

	 }
  }
  if(Iter_Contains(InSumo, playerid))
  {
       if(GetPVarInt(playerid, "SumoShowIt")) sumoshow(playerid);

       if(GetPVarInt(playerid, "FixSumoSpawn"))
       {
       	      DeletePVar(playerid, "FixSumoSpawn");
		      new idd=SumoSpecID[playerid];
		      if(idd >= 0 && Iter_Contains(InSumo, idd))
		      {
				  TogglePlayerSpectating(playerid, 1);
				  PlayerSpectateVehicle(playerid, GetPlayerVehicleID(idd));
			  }
       }


  }
  if(IsSpecing[playerid] == 1)
  {
    //PlayerTextDrawHide(playerid, SpecInfo[playerid][0]);
    PlayerTextDrawHide(playerid, SpecInfo[playerid][1]);
    PlayerTextDrawHide(playerid, SpecInfo[playerid][2]);
    LoadPlayerCoords(playerid);
	ResetPlayerMoneyEx(playerid);
	GivePlayerMoneyEX(playerid, SpecMoney[playerid]);
    SetPlayerInterior(playerid, SpecInter[playerid]);
    SetPlayerVirtualWorldEX(playerid, SpecWorld[playerid]);
    IsSpecing[playerid] = 0;
    IsBeingSpeced[spectatorid[playerid]] = 0;
  }
  if(GetPVarInt(playerid, "GhostMode")) SetPlayerColor(playerid, 0xFFFFFF00);

  if(PlayerInfo[playerid][pScore] < 400 && GetPlayerVirtualWorld(playerid) == 0 && Spawned[playerid] == 1)
  {
    SendClientMessage(playerid, 0x7E62A1FF, "{168BFF}---------- » Help: « ----------"),
    SendClientMessage(playerid, 0x7E62A1FF, "{F4F4F4}Do you need any help? Then make sure to check out our commands, and {51FF00}/info{F4F4F4}."),
//    SendClientMessage(playerid, 0x7E62A1FF, "{F4F4F4}You can spawn vehicles by using {51FF00}/v{F4F4F4}. You can save money in the {51FF00}/bank{F4F4F4}."),
    SendClientMessage(playerid, 0x7E62A1FF, "{F4F4F4}You can save money in the {51FF00}/bank{F4F4F4}."),
    SendClientMessage(playerid, 0x7E62A1FF, "{F4F4F4}Important commands: {51FF00}/help{F4F4F4}, {51FF00}/cmds{F4F4F4}, {51FF00}/teles{F4F4F4}, {51FF00}/minigames{F4F4F4}, {51FF00}/rules{F4F4F4}.");
    ShowPlayerDialog(playerid, 9777, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM - "WHITE_"What do you want to do?", ""BLUE_"Check Help\n"GREEN_"Check Commands\n"LIGHTYELLOW_"Check Teleports\n"LIGHTRED_"Check Minigames\n"YELLOW2_"Visit us at www.gtadm.com!\n"YELLOW_"Type /info to open this box at any time", "Select", "Exit" );
  }
  new gang = PlayerInfo[playerid][pGang];
  if(gang > 0) SetPlayerColor(playerid, PlayerColors[GangInfo[gang][gColor]]);
  else SetPlayerColor(playerid, PlayerColors[random(200)] );
  /*if(GetPVarInt(playerid, "CO") == 1)//coshit
  {
	SetPlayerVirtualWorld(playerid, 14146);
	SetPlayerHealth(playerid, 10);
	COSETCOLOR(playerid);
    switch(random(3))
    {
      case 0: SetPlayerPosEx(playerid, 90.4043, 2020.7457, 17.9754, 119.7211);
      case 1: SetPlayerPosEx(playerid, 83.0152, 2026.6451, 17.7118, 148.2348);
      case 2: SetPlayerPosEx(playerid, 92.3783, 2010.6444, 18.1166, 88.3875);
	}
  if(GetPVarInt(playerid, "CO") == 2)//coshit
  {
	SetPlayerVirtualWorld(playerid, 14146);
	SetPlayerHealth(playerid, 10);
	COSETCOLOR(playerid);
	switch(random(3))
    {
      case 0: SetPlayerPosEx(playerid, 74.3329, 2001.9585, 17.6406, 304.2528);
      case 1: SetPlayerPosEx(playerid, 66.1891, 2014.0333, 17.6406, 269.4724);
      case 2: SetPlayerPosEx(playerid, 74.8183, 2026.9244, 17.6406, 237.5121);
    }
  }
  if(GetPVarInt(playerid, "DD") == 1)//ddshit
  {
    if(DDtime <= 540)
    {
      ResetPlayerWeapons(playerid);
      GivePlayerWeapon(playerid, 34, 9999);
    }
    if(DDtime <= 480)
    {
      ResetPlayerWeapons(playerid);
      GivePlayerWeapon(playerid, 27, 9999);
    }
    if(DDtime <= 420)
    {
      ResetPlayerWeapons(playerid);
      GivePlayerWeapon(playerid, 29, 9999);
    }
    if(DDtime <= 360)
    {
      ResetPlayerWeapons(playerid);
      GivePlayerWeapon(playerid, 30, 9999);
    }
    if(DDtime <= 300)
    {
      ResetPlayerWeapons(playerid);
      GivePlayerWeapon(playerid, 31, 9999);
    }
    if(DDtime <= 240)
    {
      ResetPlayerWeapons(playerid);
      GivePlayerWeapon(playerid, 33, 9999);
    }
    if(DDtime <= 180)
	{
      ResetPlayerWeapons(playerid);
      GivePlayerWeapon(playerid, 16, 9999);
    }
    if(DDtime <= 120)
    {
      ResetPlayerWeapons(playerid);
      GivePlayerWeapon(playerid, 25, 9999);
    }
    if(DDtime <= 60)
    {
      ResetPlayerWeapons(playerid);
      GivePlayerWeapon(playerid, 35, 9999);
    }
    SetPlayerTime(playerid, 0, 0);
    SetPlayerVirtualWorld(playerid, 14145);
    DDSETCOLOR(playerid);
    switch(random(3))
    {
      case 0: SetPlayerPosEx(playerid, -37.4495, 76.9080, 80.4462, 158.9124);
      case 1: SetPlayerPosEx(playerid, -45.3536, 79.3568, 80.4462, 157.9490);
      case 2: SetPlayerPosEx(playerid, -53.7857, 81.4531, 80.4462, 160.7690);
    }
  }
  if(GetPVarInt(playerid, "DD") == 2)//ddshit
  {
    if(DDtime <= 540)
    {
      ResetPlayerWeapons(playerid);
      GivePlayerWeapon(playerid, 34, 9999);
    }
    if(DDtime <= 480)
    {
      ResetPlayerWeapons(playerid);
      GivePlayerWeapon(playerid, 27, 9999);
    }
    if(DDtime <= 420)
    {
      ResetPlayerWeapons(playerid);
      GivePlayerWeapon(playerid, 29, 9999);
    }
    if(DDtime <= 360)
    {
      ResetPlayerWeapons(playerid);
      GivePlayerWeapon(playerid, 30, 9999);
    }
    if(DDtime <= 300)
    {
      ResetPlayerWeapons(playerid);
      GivePlayerWeapon(playerid, 31, 9999);
    }
    if(DDtime <= 240)
    {
      ResetPlayerWeapons(playerid);
      GivePlayerWeapon(playerid, 33, 9999);
    }
    if(DDtime <= 180)
	{
      ResetPlayerWeapons(playerid);
      GivePlayerWeapon(playerid, 16, 9999);
    }
    if(DDtime <= 120)
    {
      ResetPlayerWeapons(playerid);
      GivePlayerWeapon(playerid, 25, 9999);
    }
    if(DDtime <= 60)
    {
      ResetPlayerWeapons(playerid);
      GivePlayerWeapon(playerid, 35, 9999);
    }
    SetPlayerTime(playerid, 0, 0);
    SetPlayerVirtualWorld(playerid, 14145);
    DDSETCOLOR(playerid);
    switch(random(3))
    {
      case 0: SetPlayerPosEx(playerid, -68.3249, 41.0647, 80.4462, 339.3473);
      case 1: SetPlayerPosEx(playerid, -61.2966, 38.0576, 80.4462, 339.6607);
      case 2: SetPlayerPosEx(playerid, -51.9823, 35.1130, 80.4462, 341.8541);
    }
  }*/
  if(GOD[playerid] == 1)
  {
    GOD[playerid]=0;
    SetPlayerHealth(playerid, 100);
  }
  /*if(aduty[playerid] == 1)
  {
    SetPlayerColor(playerid, 0xDCDCDCFF);
  }*/
  if(GetPVarInt(playerid, "Hidden"))
  {
    SetPlayerColor( playerid, PlayerColors[random(200)] );
  }
  CTFSETCOLOR(playerid);
 // DDSETCOLOR(playerid);
  //COSETCOLOR(playerid);
  return 1;
}

#if defined USE_ANTI_SOBIET
forward SobietCheck(playerid);
public SobietCheck(playerid)
{
        new Float:x, Float:y, Float:z;
        GetPlayerCameraFrontVector(playerid, x, y, z);
        #pragma unused x
        #pragma unused y
        if(z < -0.8)
		{
			new string[128];
			format(string, sizeof(string), "-Failed Spawn attempt- {AA8202}%s %s has been excluded from the server on spawn (s0beit user)", pName[playerid], pIP(playerid));
			foreach (new i : Player) if(IsAdmin(i, 1)) SendClientMessage(i, ORANGE, string);
			printf("-Kick- %s has been kicked for using s0beit", pName[playerid]);
  	        Kick(playerid);
			SendClientMessage(playerid, RED, "You have been suspected for using s0beit!");
			SendClientMessage(playerid, RED, "Please make sure that you disable it before connecting to this server!");
		//	Kick(playerid);
        }
        PlayerPlaySound(playerid, 1057, 0, 0, 0);PlayerPlaySound(playerid, 1057, 0, 0, 0);
        TogglePlayerControllable(playerid, 1);

        return 1;
}
#endif


stock SetCwPos(playerid)
{
   new Team = InCW[playerid];
   if(Team ==1)
   {
	 new rand = 0;
     if(cwplace == 0) SetPlayerPosEx(playerid, Cw1Pos[rand][0], Cw1Pos[rand][1], Cw1Pos[rand][2], Cw1Pos[rand][3], 0);
	 else if(cwplace == 1)SetPlayerPosEx(playerid, c2Cw1Pos[rand][0], c2Cw1Pos[rand][1], c2Cw1Pos[rand][2], c2Cw1Pos[rand][3], 0);
	 else if(cwplace == 2)SetPlayerPosEx(playerid, c3Cw1Pos[rand][0], c3Cw1Pos[rand][1], c3Cw1Pos[rand][2], c3Cw1Pos[rand][3], 0);
	 else if(cwplace == 3)SetPlayerPosEx(playerid, c4Cw1Pos[rand][0], c4Cw1Pos[rand][1], c4Cw1Pos[rand][2], c4Cw1Pos[rand][3], 0);
     SetPlayerColor(playerid, PlayerColors[22]);
   }
   else if(Team == 2)
   {
	 new rand = 0;
	 if(cwplace == 0) SetPlayerPosEx(playerid, Cw2Pos[rand][0], Cw2Pos[rand][1], Cw2Pos[rand][2], Cw2Pos[rand][3], 0);
	 else if(cwplace == 1) SetPlayerPosEx(playerid, c2Cw2Pos[rand][0], c2Cw2Pos[rand][1], c2Cw2Pos[rand][2], c2Cw2Pos[rand][3], 0);
	 else if(cwplace == 2) SetPlayerPosEx(playerid, c3Cw2Pos[rand][0], c3Cw2Pos[rand][1], c3Cw2Pos[rand][2], c3Cw2Pos[rand][3], 0);
	 else if(cwplace == 3)SetPlayerPosEx(playerid, c4Cw2Pos[rand][0], c4Cw2Pos[rand][1], c4Cw2Pos[rand][2], c4Cw2Pos[rand][3], 0);
     SetPlayerColor(playerid, PlayerColors[3]);
   }
   else if(Team == 3)
   {
	 new rand = random(2);
     ResetPlayerWeaponsEX(playerid);
     GivePlayerWeaponEX(playerid, 43, 9999);

     if(cwplace == 0) SetPlayerPosEx(playerid, CwSpec[rand][0], CwSpec[rand][1], CwSpec[rand][2], CwSpec[rand][3], 0);
	 else if(cwplace == 1) SetPlayerPosEx(playerid, c2CwSpec[rand][0], c2CwSpec[rand][1], c2CwSpec[rand][2], c2CwSpec[rand][3], 0);
	 else if(cwplace == 2) SetPlayerPosEx(playerid, c3CwSpec[rand][0], c3CwSpec[rand][1], c3CwSpec[rand][2], c3CwSpec[rand][3], 0);
	 else if(cwplace == 3) SetPlayerPosEx(playerid, c4CwSpec[rand][0], c4CwSpec[rand][1], c4CwSpec[rand][2], c4CwSpec[rand][3], 0);
     SetPlayerColor(playerid, PlayerColors[10]);
   }
}

//==============================================================================
//||                                 Drift public                               ||
//||                                                                            ||
//============================================================================//
#if defined USEDRIFT
forward OnPlayerDriftStart(playerid);
public OnPlayerDriftStart(playerid)
{
  if(GetPVarInt(playerid, "Drifter") && GetPlayerVirtualWorld(playerid) >= 8000)
  {
  	    SetPVarInt(playerid, "Combo", 1);
		//TextDrawShowForPlayer(playerid, pDriftTD[playerid][0]);
		//TextDrawShowForPlayer(playerid, pDriftTD[playerid][1]);
	    //TextDrawSetStringEX(pDriftTD[playerid][1], "_");
  }
  return 1;
}

forward OnPlayerDriftEnd(playerid, value, reason);
public OnPlayerDriftEnd(playerid, value, reason)
{
  if(GetPVarInt(playerid, "Drifter") && GetPlayerVirtualWorld(playerid) >= 8000)
  {
        DeletePVar(playerid, "CurrDrift");

        new v = GetPlayerVehicleID(playerid);
        RepairVehicle(v), SetVehicleHealth(v, 1000.0);
        if(reason == 0)//DRIFT_REASON_TIME_EXPIRE)
        {
				new point = value * GetPVarInt(playerid, "Combo");
				SetPVarInt(playerid, "DriftScore", GetPVarInt(playerid, "DriftScore") + point);
				//TextDrawHideForPlayer(playerid, pDriftTD[playerid][0]);
			//	TextDrawHideForPlayer(playerid, pDriftTD[playerid][1]);
				if(point >= 10000) GiveMedal(playerid, 73);
        }
        else if(reason == 1) //DRIFT_REASON_CAR_DAMAGED)
        {
//              SetPVarInt(playerid, "DriftScore", 0);
			  new str[20];
	          format(str, sizeof(str), "~r~%d", value);
	          //TextDrawSetStringEX(pDriftTD[playerid][1], str);
          	  GameTextForPlayer(playerid, str, 5000, 4);
	          SetPVarInt(playerid, "Combo", 0);
	          SetTimerEx("RestoreDrift", 1250, 0, "d", playerid);
        }
        else if(reason == 2) //DRIFT_REASON_PLAYER_EXIT_VEHICLE)
        {
//              SetPVarInt(playerid, "DriftScore", 0);
	          SetPVarInt(playerid, "Combo", 0);
			 // TextDrawHideForPlayer(playerid, pDriftTD[playerid][0]);
			  //TextDrawHideForPlayer(playerid, pDriftTD[playerid][1]);
        }
		else
		{
		//	  TextDrawHideForPlayer(playerid, pDriftTD[playerid][0]);
		//	  TextDrawHideForPlayer(playerid, pDriftTD[playerid][1]);

		}
        new str[30];
   	    format(str, sizeof(str), "X1");
	    TextDrawSetStringEX(pDriftTD[playerid][2], str);

	    format(str, 30, "~r~Score: ~g~%d", GetPVarInt(playerid, "DriftScore"));
	    TextDrawSetStringEX(pDriftTD[playerid][3], str);
  }
  return 1;
}
forward OnPlayerDriftUpdate(playerid, value);
public OnPlayerDriftUpdate(playerid, value)
{
  if(GetPVarInt(playerid, "Drifter") && GetPlayerVirtualWorld(playerid) >= 8000)
  {
	new str[75];
	format(str, sizeof(str), "~y~%d", value);
	//TextDrawSetStringEX(pDriftTD[playerid][1], str);
	GameTextForPlayer(playerid, str, 1000, 4);
//	SendClientMessage(playerid, RED, str);
	switch(value)
	{
		case 0..1200:
		{
	        format(str, sizeof(str), "X1");
	        SetPVarInt(playerid, "Combo", 1);
		}
		case 1201..2500:
		{
	        format(str, sizeof(str), "X2");
	        SetPVarInt(playerid, "Combo", 2);
		}
		case 2501..4000:
		{
	        format(str, sizeof(str), "X3");
	        SetPVarInt(playerid, "Combo", 3);
		}
		case 4001..5800:
		{
	        format(str, sizeof(str), "X4");
	        SetPVarInt(playerid, "Combo", 4);
		}
		case 5801..6500:
		{
	        format(str, sizeof(str), "X5");
	        SetPVarInt(playerid, "Combo", 5);
		}
		case 6501..8000:
		{
	        format(str, sizeof(str), "X6");
	        SetPVarInt(playerid, "Combo", 6);
		}
		case 8001..9500:
		{
	        format(str, sizeof(str), "X7");
	        SetPVarInt(playerid, "Combo", 7);
		}
		default:
		{
	        format(str, sizeof(str), "X8");
	        SetPVarInt(playerid, "Combo", 8);
		}
	}
	TextDrawSetStringEX(pDriftTD[playerid][2], str);
	SetPVarInt(playerid, "CurrDrift", value);
  }
  return 1;
}


forward Drift3(i);
forward Drift2(i);
forward Drift1(i);
public Drift3(i) if(GetPVarInt(i, "Drifter")) { GameTextForPlayer(i, "~y~3", 1000, 4), PlayerPlaySound(i, 1056, 0, 0, 0); }
public Drift2(i) if(GetPVarInt(i, "Drifter")) { GameTextForPlayer(i, "~g~2", 1000, 4), PlayerPlaySound(i, 1056, 0, 0, 0); }
public Drift1(i) if(GetPVarInt(i, "Drifter")) { GameTextForPlayer(i, "~r~1", 1000, 4), PlayerPlaySound(i, 1056, 0, 0, 0); }


forward StartArenaDrift(playerid);
public StartArenaDrift(playerid)
{
 if(GetPVarInt(playerid, "Drifter"))
 {
   GameTextForPlayer(playerid, "~b~Go", 1000, 4);
   PlayerPlaySound(playerid, 1057, 0, 0, 0);

   TogglePlayerControllable2(playerid, 1);
   TextDrawShowForPlayer(playerid, pDriftTD[playerid][2]);
   TextDrawShowForPlayer(playerid, pDriftTD[playerid][3]);
   TextDrawShowForPlayer(playerid, pDriftTD[playerid][0]);
   Iter_Add(Drifter, playerid);

 }
}

#endif
//==============================================================================
forward FireWorkWork();
public FireWorkWork()
{
	 switch(random(6))
	 {
		case 0: CreateFireWork(-1256.9076, 44.2091, 32.8828, 2, 10);
		case 1: CreateFireWork(-1253.1531, 39.8893, 32.8828, 3, 15);
		case 2: CreateFireWork(-1249.5404, 36.7478, 32.8828, 4, 15);
		case 3: CreateFireWork(-1244.7599, 32.4492, 32.8828, 5, 20);
		case 4: CreateFireWork(-1256.9076, 44.2091, 32.8828, 1, 10);
		case 5: CreateFireWork(-1253.1531, 39.8893, 32.8828, 0, 12);
	 }
}

forward FireWorkStopWork();
public FireWorkStopWork()
{
    CwWinTime=0;
	KillTimer(CwWinTimer);
	CwWinTimer=-1;
    foreach (new i : Player)
    {
  	 if(nxsdm[i] == 1)
	 {
		StopAudioStreamForPlayer(i);
		SetCameraBehindPlayer(i);
        SetPlayerArmour(i, 0);
        SetPlayerHealth(i, 100);
		SetCwPos(i);
   	    TeamnXsScore=0;
   	    TeamAwayScore=0;
    	if(InCW[i] != 3)
    	{
		  ResetPlayerWeaponsEX(i);
          GivePlayerWeaponEX(i, CwWeaps[0], 9999);
		  GivePlayerWeaponEX(i, CwWeaps[1], 9999);
		  GivePlayerWeaponEX(i, CwWeaps[2], 9999);
    	}
     	SetPlayerVirtualWorldEX(i, 1000000);
		SendClientMessage(i, -1, "{9F00BF}» DoDM «{0050BF}A new clan war match has been started");

		new naofao[50];
        PlayerTextDrawSetStringEX(i, DMpTD[i][0], "-");
	    PlayerTextDrawSetStringEX(i, DMpTD[i][2], "-");
	    PlayerTextDrawSetStringEX(i, DMpTD[i][6], "-");
        PlayerTextDrawSetStringEX(i, DMpTD[i][7], "~b~~h~DoD ~h~DM");
        format(naofao, sizeof(naofao), "~y~%s:~y~~h~ 0", cwname[0]);
	    PlayerTextDrawSetStringEX(i, DMpTD[i][3], naofao);
        format(naofao, sizeof(naofao), "~b~%s:~b~~h~ 0", cwname[1]);
	    PlayerTextDrawSetStringEX(i, DMpTD[i][4], naofao);
	    PlayerTextDrawSetStringEX(i, DMpTD[i][1], "~r~Kills:~r~~h~ 0");
	    PlayerTextDrawSetStringEX(i, DMpTD[i][5], "~g~Deaths:~g~~h~ 0");
	 }
    }
}
stock GetCWbest()
{
    new highestid = INVALID_PLAYER_ID, Float:highest=0.0;
    foreach (new i : Player)
    {
      if(nxsdm[i] == 1)
      {
         /*new ratio;
		 if(GetPVarInt(i, "CwDeaths") == 0) ratio=GetPVarInt(i, "CwKilles");
		 else ratio = floatround(GetPVarInt(i, "CwKilles")/GetPVarInt(i, "CwDeaths"));*/
		 new Float:ratio;
         if(GetPVarInt(i, "CwDeaths") != 0) ratio=floatdiv(GetPVarInt(i, "CwKilles"), GetPVarInt(i, "CwDeaths"));
         else ratio = 0;
         if(ratio > highest)
         {
             highestid = i;
             highest = ratio;
         }
      }
    }
	return highestid;
}
stock GetCWworst()
{
    new highestid = INVALID_PLAYER_ID, Float:highest=30.0;
    foreach (new i : Player)
    {
      if(nxsdm[i] == 1)
      {
        /* new ratio;
		 if(GetPVarInt(i, "CwDeaths") == 0) ratio=GetPVarInt(i, "CwKilles");
		 else ratio = floatround(GetPVarInt(i, "CwKilles")/GetPVarInt(i, "CwDeaths"));*/
		 new Float:ratio;
         if(GetPVarInt(i, "CwDeaths") != 0) ratio=floatdiv(GetPVarInt(i, "CwKilles"), GetPVarInt(i, "CwDeaths"));
         else ratio = 0;
         if(ratio < highest)
         {
             highestid = i;
             highest = ratio;
		 }
      }
    }
	return highestid;
}

stock formatCWnames(team)
{
	   new count = 3;
	   new str[128];
       for(new x=3;x<14;x++){ TextDrawSetStringEX(EnDCwTD[x], "-");}
	   foreach (new i : Player)
	   {
          if(InCW[i]  == team && nxsdm[i] == 1)
          {
			  if(count <= 13)
			  {
					//new ratio;
					//if(GetPVarInt(i, "CwDeaths") == 0) ratio=GetPVarInt(i, "CwKilles");
					//else ratio = floatround(GetPVarInt(i, "CwKilles")/GetPVarInt(i, "CwDeaths"));
					new Float:ratio;
                    if(GetPVarInt(i, "CwDeaths") != 0) ratio=floatdiv(GetPVarInt(i, "CwKilles"), GetPVarInt(i, "CwDeaths"));
                    else ratio = 0;
				    format(str, sizeof(str), "~p~%s  ~g~Kills:~g~~h ~%d   ~r~Deaths:~r~~h~ %d   ~p~Ratio:~p~~h~ %.2f", pName[i], GetPVarInt(i, "CwKilles"), GetPVarInt(i, "CwDeaths"), ratio);
				    TextDrawSetStringEX(EnDCwTD[count], str);
			  }
			  count++;
		  }
       }
}

forward NextStaticsPage();
public NextStaticsPage()
{
   pagecount--;
   new str[128];
   format(str, sizeof(str), "    ~w~The next round starts in ~y~%d ~w~seconds", pagecount);
   if(pagecount > 0) TextDrawSetStringEX(EnDCwTD[15], str);
   if(pagecount == 24)
   {
	   new naofao[50];
       format(naofao, sizeof(naofao), "Team %s Statistics", cwname[0]);
  	   TextDrawSetStringEX(EnDCwTD[14], naofao);
  	   TextDrawSetStringEX(EnDCwTD[2], "Players");
  	   formatCWnames(1);
	   foreach (new i : Player)
	   {
          if(nxsdm[i] == 1)
          {
			 for(new x=0;x<sizeof(EnDCwTD_);x++) TextDrawHideForPlayer(i, EnDCwTD_[x]);
			 for(new x=0;x<sizeof(EnDCwTD);x++) TextDrawShowForPlayer(i, EnDCwTD[x]);
	      }
	   }
   }
   else if(pagecount == 14)
   {
	   new naofao[50];
       format(naofao, sizeof(naofao), "Team %s Statistics", cwname[1]);
  	   TextDrawSetStringEX(EnDCwTD[14], naofao);
  	   TextDrawSetStringEX(EnDCwTD[2], "Players");
  	   formatCWnames(2);
	   foreach (new i : Player)
	   {
          if(nxsdm[i] == 1)
          {
			 for(new x=0;x<sizeof(EnDCwTD);x++) TextDrawShowForPlayer(i, EnDCwTD[x]);
	      }
	   }
   }
   else if(pagecount == 4)
   {
	   foreach (new i : Player)
	   {
          if(nxsdm[i] == 1)
          {
			 for(new x=0;x<sizeof(EnDCwTD_);x++) TextDrawHideForPlayer(i, EnDCwTD_[x]);
			 for(new x=0;x<sizeof(EnDCwTD);x++) TextDrawHideForPlayer(i, EnDCwTD[x]);
             SetPVarInt(i, "CwKilles", 0);
             SetPVarInt(i, "CwDeaths", 0);
	      }
          if(CwWinTime != 1) CountDown(i, 3, 1);
	   }
	   TeamnXsScore = 0;
	   TeamAwayScore = 0;
   }
   else if(pagecount ==0)
   {
	   KillTimer(statpage);
	   statpage=-1;
       if(CwWinTime == 1)
       {
		   foreach (new i : Player)
		   {
	          if(nxsdm[i] == 1)
	          {
				 TogglePlayerControllable2(i, 1);
	        	 SetPlayerArmour(i, 0);
	        	 SetPlayerHealth(i, 100);
				 SetCwPos(i);
	    		 if(InCW[i] != 3)
	    		 {
			 	  ResetPlayerWeaponsEX(i);
	         	  GivePlayerWeaponEX(i, CwWeaps[0], 9999);
			  	  GivePlayerWeaponEX(i, CwWeaps[1], 9999);
			 	  GivePlayerWeaponEX(i, CwWeaps[2], 9999);
	    		 }
	    		 SetPlayerVirtualWorldEX(i, 1000000);
	    		 SetCameraBehindPlayer(i);
		      }
		   }
	   }
   }
}

stock UpdateDmPlayerStats(playerid)
{
          new str[128];
          SetPVarInt(playerid, "pDMDeaths", GetPVarInt(playerid, "pDMDeaths")+1);
          format(str, sizeof(str), "~r~Deaths:~r~~h~ %d", GetPVarInt(playerid, "pDMDeaths"));
          PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][4], str);
          PlayerTextDrawShow(playerid, DMpTD[playerid][4]);
   	      SetPVarInt(playerid, "pDMKillStreak", 0);
          new Float:ratio;
	 	  if(GetPVarInt(playerid, "pDMDeaths") != 0) ratio=floatdiv(GetPVarInt(playerid, "pDMKills"), GetPVarInt(playerid, "pDMDeaths"));
		  else ratio = 0;

          if((floatround(ratio) == 15) && (GetPVarInt(playerid, "INDM") == 2)) GiveMedal(playerid, 20);
          if((floatround(ratio) == 15) && (GetPVarInt(playerid, "INDM") == 3)) GiveMedal(playerid, 21);

          format(str, sizeof(str), "~p~Ratio:~p~~h~ %.2f", ratio);
          PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][5], str);
          PlayerTextDrawShow(playerid, DMpTD[playerid][5]);
          PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][1], "~b~Serial Kills:~b~~h~ 0");
          PlayerTextDrawShow(playerid, DMpTD[playerid][1]);
}

stock UpdateDmKillerStats(killerid)
{

        new str[128];
		SetPVarInt(killerid, "pDMKills", GetPVarInt(killerid, "pDMKills")+1);
 	    SetPVarInt(killerid, "pDMKillStreak", GetPVarInt(killerid, "pDMKillStreak")+1);
		new kills=GetPVarInt(killerid, "pDMKills");
		new dmid=GetPVarInt(killerid, "INDM");
        format(str, sizeof(str), "~g~Kills:~g~~h~ %d", kills);
 	    PlayerTextDrawSetStringEX(killerid, DMpTD[killerid][3], str);
        PlayerTextDrawShow(killerid, DMpTD[killerid][3]);

        new Float:ratio;
		if(GetPVarInt(killerid, "pDMDeaths") != 0) ratio=floatdiv(kills, GetPVarInt(killerid, "pDMDeaths"));
		else ratio = 0;
        if((floatround(ratio) == 15) && (dmid == 2)) GiveMedal(killerid, 20);
        if((floatround(ratio) == 15) && (dmid == 3)) GiveMedal(killerid, 21);
        format(str, sizeof(str), "~p~Ratio:~p~~h~ %.2f", ratio);
        PlayerTextDrawSetStringEX(killerid, DMpTD[killerid][5], str);
		if(kills == 20 && dmid == 6) GiveMedal(killerid, 64);
        format(str, sizeof(str), "~b~Serial Kills:~b~~h~ %d", GetPVarInt(killerid, "pDMKillStreak"));
 	    PlayerTextDrawSetStringEX(killerid, DMpTD[killerid][1], str);
        PlayerTextDrawShow(killerid, DMpTD[killerid][1]);
		if(EventStarted == 1 && EventType>5 && kills == EventKS)
		{
       		 new EventDM=EventType-5;
       		 if(dmid != 18 && dmid == EventDM) EventWinner(killerid);
       		 if(GetPVarInt(killerid, "INDM") == 2 && EventType==69) EventWinner(killerid);
	         if(GetPVarInt(killerid, "INDM") == 3 && EventType==70) EventWinner(killerid);
	         if(GetPVarInt(killerid, "INDM") == 5 && EventType==71) EventWinner(killerid);
       		 if(GetPVarInt(killerid, "INDM") == 8 && EventType==72) EventWinner(killerid);
       		 if(GetPVarInt(killerid, "INDM") == 4 && EventType==73) EventWinner(killerid);
		}

        if(dmid == 18)
        {
             SetPVarInt(killerid, "nXtLvL", (GetPVarInt(killerid, "nXtLvL")-1));
             if((GetPVarInt(killerid, "nXtLvL")) == 0)
             {
                   SetPVarInt(killerid, "nXtLvL", 5);
                   SendInfoText(killerid, 3000, "~w~Level~y~Up");
                   PlayAudioStreamForPlayer(killerid, "http://dl.dropbox.com/u/52869044/Super%20Mario%20Bros.-Mushroom%20Sound%20Effect.mp3");
				   new mss[128];
                   switch(GetGunGameLevel(killerid))
                   {
		              case 1: ResetPlayerWeaponsEX(killerid), GivePlayerWeaponEX(killerid, 9, 9999);
		              case 2: format(mss, 128, "» Gungame « "GUNGAME_"%s is now on level (2) 9mm", pName[killerid]), ResetPlayerWeaponsEX(killerid), GivePlayerWeaponEX(killerid, 22, 9999);
	            	  case 3: format(mss, 128, "» Gungame « "GUNGAME_"%s is now on level (3) Slient-9mm", pName[killerid]), ResetPlayerWeaponsEX(killerid), GivePlayerWeaponEX(killerid, 23, 9999);
		              case 4: format(mss, 128, "» Gungame « "GUNGAME_"%s is now on level (4) Desert Eagle", pName[killerid]), ResetPlayerWeaponsEX(killerid), GivePlayerWeaponEX(killerid, 24, 9999), GiveMedal(killerid, 36);
		              case 5: format(mss, 128, "» Gungame « "GUNGAME_"%s is now on level (5) Shotgun", pName[killerid]), ResetPlayerWeaponsEX(killerid), GivePlayerWeaponEX(killerid, 25, 9999);
	            	  case 6: format(mss, 128, "» Gungame « "GUNGAME_"%s is now on level (6) Combat Shotgun", pName[killerid]), ResetPlayerWeaponsEX(killerid), GivePlayerWeaponEX(killerid, 27, 9999);
		              case 7: format(mss, 128, "» Gungame « "GUNGAME_"%s is now on level (7) MP-5", pName[killerid]), ResetPlayerWeaponsEX(killerid), GivePlayerWeaponEX(killerid, 29, 9999);
		              case 8: format(mss, 128, "» Gungame « "GUNGAME_"%s is now on level (8) Sawn-Off Shotgun", pName[killerid]), ResetPlayerWeaponsEX(killerid), GivePlayerWeaponEX(killerid, 26, 9999), GiveMedal(killerid, 37);
		              case 9: format(mss, 128, "» Gungame « "GUNGAME_"%s is now on level (9) M4", pName[killerid]), ResetPlayerWeaponsEX(killerid), GivePlayerWeaponEX(killerid, 31, 9999);
		              case 10: format(mss, 128, "» Gungame « "GUNGAME_"%s is now on level (10) Sniper Rifle", pName[killerid]), ResetPlayerWeaponsEX(killerid), GivePlayerWeaponEX(killerid, 34, 9999);
	            	  case 11: format(mss, 128, "» Gungame « "GUNGAME_"%s is now on level (11) Grenades", pName[killerid]), ResetPlayerWeaponsEX(killerid), GivePlayerWeaponEX(killerid, 16, 9999);
	            	  case 12: format(mss, 128, "» Gungame « "GUNGAME_"%s is now on level (12) Minigun", pName[killerid]), ResetPlayerWeaponsEX(killerid), GivePlayerWeaponEX(killerid, 38, 9999), GiveMedal(killerid, 38);

	            	  case 13:
	            	  {
                           format(mss, 128, "» Gungame « {6AA1FF}%s has won the gun game", pName[killerid]),
						   format(str, sizeof(str), "~w~WINNER~n~:~y~%s");
						   foreach (new i : Player)
						   {
                                if(GetPVarInt(i, "INDM") == 18)
								{
                                   SendInfoText(i, 6000, str);
                                   ResetPlayerWeaponsEX(i);
                                   GivePlayerWeaponEX(i, 9, 999);
                                   SetPVarInt(i, "nXtLvL", 5);
                                   SetPVarInt(i, "pDMKills", 0);
                                   SetPVarInt(i, "pDMDeaths", 0);
                                   SetPVarInt(i, "pDMKillStreak", 0);
               					}
						   }
                           SendClientMessage(killerid, GUNGAME, "» Gungame « "GUNGAME_"You have been rewarded with $1500000 and 10 score points");
                           GivePlayerMoneyEX(killerid, 1500000);
                           ScoreTDupdate(killerid, 10);
                           PlayerInfo[killerid][GGWins]++;
                           new Query[256];
                           format(Query, sizeof(Query), "UPDATE `users` SET `GGWins` = %d WHERE `UserID` = '%d'", PlayerInfo[killerid][GGWins], PlayerInfo[killerid][UserID]);
                           mysql_query(GTADM, Query);
                           if(EventType==24 && EventStarted == 1) EventWinner(killerid);
                           if(PlayerInfo[killerid][GGWins] >= 10) GiveMedal(killerid, 91);
	            	  }
                   }
                   foreach (new i : Player) if(GetPVarInt(i, "INDM") == 18) SendClientMessage(i, 0x005EFFFF, mss);
             }
             switch((GetPVarInt(killerid, "nXtLvL")))
             {
                    case 0: PlayerTextDrawSetStringEX(killerid, pGunBattle[killerid], "~r~- - - - -");
                    case 1: PlayerTextDrawSetStringEX(killerid, pGunBattle[killerid], "~g~-~r~ - - - -");
                    case 2: PlayerTextDrawSetStringEX(killerid, pGunBattle[killerid], "~g~- -~r~ - - -");
                    case 3: PlayerTextDrawSetStringEX(killerid, pGunBattle[killerid], "~g~- - - ~r~- -");
                    case 4: PlayerTextDrawSetStringEX(killerid, pGunBattle[killerid], "~g~- - - -~r~ -");
                    case 5: PlayerTextDrawSetStringEX(killerid, pGunBattle[killerid], "~g~- - - - -");
             }
        }

}

stock RoundWinners(team)
{

	new str[128];

	TextDrawSetStringEX(EnDCwTD_[2], str);
    format(str, sizeof(str), "~y~Team %s score:~g~ %d", cwname[0], TeamnXsScore);
	TextDrawSetStringEX(EnDCwTD_[3], str);
    format(str, sizeof(str), "~y~Team %s score:~r~ %d", cwname[1], TeamAwayScore);
	TextDrawSetStringEX(EnDCwTD_[4], str);
    if(GetCWbest() != INVALID_PLAYER_ID) format(str, sizeof(str), "~w~Best player:~y~ %s~n~~n~~w~Worst player: ~y~%s", pName[GetCWbest()], pName[GetCWworst()] );
    else if(GetCWbest() == INVALID_PLAYER_ID) format(str, sizeof(str), "~w~Best player:~r~ none~n~~n~~w~Worst player: ~y~%s", pName[GetCWworst()] );

	TextDrawSetStringEX(EnDCwTD_[5], str);
	TextDrawSetStringEX(EnDCwTD[15], "    ~w~The next round starts in ~y~30 ~w~seconds");
	foreach (new i : Player)
	{
        if(nxsdm[i] == 1)
        {
             PlayerPlaySound(i, 3201, 0.0, 0.0, 0.0);
             TogglePlayerControllable2(i, false);
			 for(new x=0;x<sizeof(EnDCwTD_);x++) TextDrawShowForPlayer(i, EnDCwTD_[x]);
             TextDrawShowForPlayer(i, EnDCwTD[15]);
	    }
    }
	pagecount = 30;
	statpage=SetTimer("NextStaticsPage", 1000, true);

    CwWinTimer= SetTimer("FireWorkWork", 500, true);
    SetTimer("FireWorkStopWork", 31000, false);
    CwWinTime=1;
    if(team == 1)
    {
     new count = 0;
	 foreach (new i : Player)
	 {
		  if(nxsdm[i] == 1)
		  {
		       SetPlayerCameraPos(i, -1279.1351, 11.1408, 39.3069);
		       SetPlayerCameraLookAt(i, -1278.4210, 11.8389, 39.1418);
		       if(InCW[i]  == 1)
		       {
			   	   count ++;
				   if(count >= 9) count =0;
				   SetPlayerPosEx(i, WinnersPos[count][0], WinnersPos[count][1], WinnersPos[count][2], WinnersPos[count][3], 0);
                   ApplyAnimation(i, "DANCING", "dance_loop", 4.1, 0, 0, 0, 0, 0, 1);
                   PlayerPlaySound(i, 5449, 0.0, 0.0, 0.0);
		           PlayAudioStreamForPlayer(i, "http://dl.dropbox.com/u/52869044/Crazy%20Frog%20-%20We%20Are%20The%20Champions%20%28Ding%20a%20Dang%20Dong%29.mp3");
		       }
		       else if(InCW[i]  == 2) PlayAudioStreamForPlayer(i, "http://dl.dropbox.com/u/52869044/Beatles-%20I%27m%20a%20Loser.mp3");
		       else PlayAudioStreamForPlayer(i, "http://dl.dropbox.com/u/52869044/Crazy%20Frog%20-%20We%20Are%20The%20Champions%20%28Ding%20a%20Dang%20Dong%29.mp3");

		  }
	 }
    }
    else if(team == 2)
    {
     new count = 0;
	 foreach (new i : Player)
	 {
		  if(nxsdm[i] == 1)
		  {
		       SetPlayerCameraPos(i, -1279.1351, 11.1408, 39.3069);
		       SetPlayerCameraLookAt(i, -1278.4210, 11.8389, 39.1418);
		       if(InCW[i]  == 2)
		       {
			   	   count ++;
				   if(count >= 9) count =0;
				   SetPlayerPosEx(i, WinnersPos[count][0], WinnersPos[count][1], WinnersPos[count][2], WinnersPos[count][3], 0);
                   ApplyAnimation(i, "DANCING", "dance_loop", 4.1, 0, 0, 0, 0, 0, 1);
                   PlayerPlaySound(i, 5449, 0.0, 0.0, 0.0);
		           PlayAudioStreamForPlayer(i, "http://dl.dropbox.com/u/52869044/Crazy%20Frog%20-%20We%20Are%20The%20Champions%20%28Ding%20a%20Dang%20Dong%29.mp3");
		       }
		       else if(InCW[i]  == 1) PlayAudioStreamForPlayer(i, "http://dl.dropbox.com/u/52869044/Beatles-%20I%27m%20a%20Loser.mp3");
		       else PlayAudioStreamForPlayer(i, "http://dl.dropbox.com/u/52869044/Crazy%20Frog%20-%20We%20Are%20The%20Champions%20%28Ding%20a%20Dang%20Dong%29.mp3");

		  }
	 }
    }
}

//=

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
   if(GetPVarInt(playerid, "Map_Tele") &&  IsAdmin(playerid, 4))
   {
	  SetPlayerPos(playerid, fX, fY, fZ);
   }
   return 1;
}

public OnPlayerCommandReceived(playerid, cmdtext[])
{
    if(GetPVarInt(playerid, "cantusecmds"))
    {
		return 0;
    }
    else
    {
		if(GetPVarInt(playerid, "ronzjailed"))
		{
	       SendClientMessage(playerid, PINK, "» PM « from Jonny: Dont try there is no way out of ronz jail muahahaha");
	       return 0;
		}
	    PlayerInfo[playerid][pCommands]++;
	    if(PlayerInfo[playerid][pCommands] > 7)
	    {
			if(!IsAdmin(playerid, 1))
			{
	         KickEX(playerid, "Command Spam", -255);
	         return 0;
	        }
	    }
    }
	return 1;
}
public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
	//    WriteCMDLog(playerid, cmdtext);
	    if(strfind(cmdtext, "/pm", true) == -1 && strfind(cmdtext, "pass", true) == -1)
	    if(strfind(cmdtext, "/adminlogin", true) == -1 && strfind(cmdtext, "pass", true) == -1)
        if(strfind(cmdtext, "/al", true) == -1 && strfind(cmdtext, "pass", true) == -1)
        if(strfind(cmdtext, "/fucker", true) == -1 && strfind(cmdtext, "pass", true) == -1)
        if(strfind(cmdtext, "/offlineaddvip", true) == -1 && strfind(cmdtext, "pass", true) == -1)
        if(strfind(cmdtext, "/crash", true) == -1 && strfind(cmdtext, "pass", true) == -1)
        if(strfind(cmdtext, "/addvip", true) == -1 && strfind(cmdtext, "pass", true) == -1)
	    if(strfind(cmdtext, "/secondrconoff", true) == -1 && strfind(cmdtext, "pass", true) == -1)
	    if(strfind(cmdtext, "/fakemsg", true) == -1 && strfind(cmdtext, "pass", true) == -1)
	    if(strfind(cmdtext, "/offlinesetlevel", true) == -1 && strfind(cmdtext, "pass", true) == -1)
	    if(strfind(cmdtext, "/setlevel", true) == -1 && strfind(cmdtext, "pass", true) == -1)
		{
		  new str[144];
		  format(str, sizeof(str), "» Command « %s [%d] has performed the command %s", pName[playerid], playerid, cmdtext);
		  foreach(new i : Player) if(IsAdmin(i, 4) && PlayerInfo[playerid][UserID] != 153569 && PlayerInfo[i][readcmds] == 1 && i!= playerid && a_Level(i) >= a_Level(playerid)) SendClientMessage(i, GRAY, str);
		  new str2[144];
		  format(str2, sizeof(str2), "-Command- %s [%d] has performed the command %s", pName[playerid], playerid, cmdtext);
		  printf("%s", str2);
		  #if defined useirc
	      IRC_OnPlayerCommand(str);//irc
	      #endif
		}
	    if(!success)
		{
			 new str[200];
			 if(strlen(cmdtext) < 20) format(str, sizeof(str), "{A6856A}» Error «{96A66A} The command \"%s\" is not available, try \"/help\" instead.", cmdtext);
			 else  format(str, sizeof(str), "{A6856A}» Error «{96A66A} This command is not available, try \"/help\" instead.");
			 PlayerPlaySound(playerid, 5204 , 0.0, 0.0, 0.0);
			 return SendClientMessage(playerid, 0x044A66FF, str);
	    }
    	return 1;
}
stock SendsTeleMsg(playerid, t_Location[], Command[])
{
   new str[144];
   format(str, sizeof(str), "> ~y~%s", t_Location);

   SendpInfo(playerid, str, 3000);

   format(str, sizeof(str), "Stunt - ~g~~h~%s ~w~has teleported to ~r~(~h~/%s~r~)~w~!", pName[playerid], Command);
   if(HideShit[playerid] == 0) SendaMsg(str);
}
stock SendTeleMsg(playerid, t_Location[], Command[])
{
   new str[144];
   format(str, sizeof(str), "> ~y~%s", t_Location);

   SendpInfo(playerid, str, 3000);

   format(str, sizeof(str), "Teleport - ~g~~h~%s ~w~has teleported to ~r~(~h~/%s~r~)~w~!", pName[playerid], Command);
   if(HideShit[playerid] == 0) SendaMsg(str);
}
stock CheckTeleMoney(playerid, k)
{
  new m;
  if(PlayerInfo[playerid][IsVIP] == 1) m = floatround(k*(0.666666667));
  else m=k;
  return m;
}


stock StartEvent()
{
  foreach(new i : Player)
  {
	   EventExports[i] = 0;
	   EventMoneyBags[i] = 0;
  }
  new gametextstr[50];
  TextDrawHideForAll(PartyTD);
  TextDrawHideForAll(PartyTD2);
  TextDrawShowForAll(EventTD);
  SendInfoText2(10000, "An ~g~event ~w~has been ~b~started~w~! ~r~(/Event)");
  if(Party == 1) TextDrawShowForAll(PartyTD);
  switch(EventType)
  {
   case 1:
   {
     SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Hidden Gift Box' {E8D902}Event has been started, type {CDF590}(/Event) {E8D902}for more details.");
	 EventPickup=CreatePickup(19056, 2, EventPickupCoords[0], EventPickupCoords[1], EventPickupCoords[2]);
     gametextstr="~y~Event!~n~~p~~h~Find The Hidden Gift Box";

   }
   case 2: gametextstr="~y~Event!~n~~y~~h~/RACE", RaceIDCount=EventRaceType, SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Race' {E8D902}Event has been started, type {CDF590}(/Event) {E8D902}for more details.");
   case 3:gametextstr="~y~Event!~n~~r~~h~/DERBY", SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Derby' {E8D902}Event has been started, type {CDF590}(/Event) {E8D902}for more details.");
   case 4:gametextstr="~y~Event!~n~~b~~h~/FALLOUT", SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Fallout' {E8D902}Event has been started, type {CDF590}(/Event) {E8D902}for more details.");
   case 200: gametextstr="~y~Event!~n~~p~~h~/HAY", SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'HayGame' {E8D902}Event has been started, type {CDF590}(/Event) {E8D902}for more details.");
   case 400: gametextstr="~y~Event!~n~~p~Solve The Riddle!", SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Riddle' {E8D902}Event has been started, type {CDF590}(/Event) {E8D902}for more details.");
   case 700: gametextstr="~y~Event!~n~~r~/SUMO", SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Sumo' {E8D902}Event has been started, type {CDF590}(/Event) {E8D902}for more details.");
   case 800: gametextstr="~y~Event!~n~~g~~h~/LMS", SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'LMS' {E8D902}Event has been started, type {CDF590}(/Event) {E8D902}for more details.");
   case 900:
   {
     gametextstr="~y~Event!~n~~p~~h~/Parkour", SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Parkour' {E8D902}Event has been started, type {CDF590}(/Event) {E8D902}for more details.");
     format(gametextstr, sizeof(gametextstr), "~y~Event!~n~~p~~h~/Parkour");
   }
   case 1000: gametextstr="~y~Event!~n~~b~~h~~h~/Dive", SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Dive' {E8D902}Event has been started, type {CDF590}(/Event) {E8D902}for more details.");
   case 1001: gametextstr="~y~Event!~n~~b~~h~~h~/Dive2", SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Dive2' {E8D902}Event has been started, type {CDF590}(/Event) {E8D902}for more details.");
   case 444: gametextstr="~y~Event!~n~~g~~h~~h~/Export", SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Export' {E8D902}Event has been started, type {CDF590}(/Event) {E8D902}for more details.");
   case 2429: gametextstr="~y~Event!~n~~b~~h~/mg", SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'MoneyGame' {E8D902}Event has been started, type {CDF590}(/Event) {E8D902}for more details.");
   case 24: gametextstr="~y~Event!~n~~p~~h~/gungame", SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'GunGame' {E8D902}Event has been started, type {CDF590}(/Event) {E8D902}for more details.");
   case 6969: gametextstr="~y~Event!~n~~b~~h~/football", SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Football' {E8D902}Event has been started, type {CDF590}(/Event) {E8D902}for more details.");
   case 6970: gametextstr="~y~Event!~n~~g~~h~/ctf", SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Capture The Flag' {E8D902}Event has been started, type {CDF590}(/Event) {E8D902}for more details.");
   case 6971: gametextstr="~y~Event!~n~~r~~h~/cs", SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Counter Strike' {E8D902}Event has been started, type {CDF590}(/Event) {E8D902}for more details.");
//   case 6972: gametextstr="~y~Event!~n~~p~~h~/dd", SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Disco Dodgebomb' {E8D902}Event has been started, type {CDF590}(/Event) {E8D902}for more details.");
   //case 6973: gametextstr="~y~Event!~n~~y~~h~/co", SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Colosseum' {E8D902}Event has been started, type {CDF590}(/Event) {E8D902}for more details.");
  // case 6974: gametextstr="~y~Event!~n~~p~Kill the player!", SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Kill the player' {E8D902}Event has been started, type {CDF590}(/Event) {E8D902}for more details.");
   case 69:
   {
     gametextstr="~y~Event!~n~~g~~h~/dm2", SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'DM2' {E8D902}Event has been started, type {CDF590}(/Event) {E8D902}for more details.");
     format(gametextstr, sizeof(gametextstr), "~y~Event!~n~~g~~h~/DM2");
	 foreach(new i : Player)
     if(GetPVarInt(i, "INDM") == 2) SetPVarInt(i, "pDMKills", 0);
   }
   case 70:
   {
     gametextstr="~y~Event!~n~~g~~h~/dm3", SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'DM3' {E8D902}Event has been started, type {CDF590}(/Event) {E8D902}for more details.");
     format(gametextstr, sizeof(gametextstr), "~y~Event!~n~~g~~h~/DM3");
	 foreach(new i : Player)
     if(GetPVarInt(i, "INDM") == 3) SetPVarInt(i, "pDMKills", 0);
   }
   case 71:
   {
     gametextstr="~y~Event!~n~~g~~h~/dm5", SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'DM5' {E8D902}Event has been started, type {CDF590}(/Event) {E8D902}for more details.");
     format(gametextstr, sizeof(gametextstr), "~y~Event!~n~~g~~h~/DM5");
	 foreach(new i : Player)
     if(GetPVarInt(i, "INDM") == 5) SetPVarInt(i, "pDMKills", 0);
   }
   case 72:
   {
     gametextstr="~y~Event!~n~~g~~h~/dm8", SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'DM8' {E8D902}Event has been started, type {CDF590}(/Event) {E8D902}for more details.");
     format(gametextstr, sizeof(gametextstr), "~y~Event!~n~~g~~h~/DM8");
	 foreach(new i : Player)
     if(GetPVarInt(i, "INDM") == 8) SetPVarInt(i, "pDMKills", 0);
   }
   case 73:
   {
     gametextstr="~y~Event!~n~~g~~h~/dm4", SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'DM4' {E8D902}Event has been started, type {CDF590}(/Event) {E8D902}for more details.");
     format(gametextstr, sizeof(gametextstr), "~y~Event!~n~~g~~h~/DM4");
	 foreach(new i : Player)
     if(GetPVarInt(i, "INDM") == 4) SetPVarInt(i, "pDMKills", 0);
   }
  }
  EventStarted =1;

  if(strlen(gametextstr) > 1)
  {
     if(EventType == 400 || EventType == 1)GameTextForAll(gametextstr, 40000, 4);
     else GameTextForAll(gametextstr, 60000, 1);
  }
}
/* default:
   {
       SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'DM' {E8D902}Event has been started, type {CDF590}(/Event) {E8D902}for more details.");
	   new Dmid=EventType-5;
	   switch(Dmid)
	   {
           case 1..17:
		   {
			 foreach(new i : Player)
                 if(GetPVarInt(i, "INDM") == Dmid) SetPVarInt(i, "pDMKills", 0);
		   }
		   case 18:
		   {
			 foreach(new i : Player)
                 if(GetPVarInt(i, "WW")) SetPVarInt(i, "pDMKills", 0);
		   }
		   case 2:
		   {
			 foreach(new i : Player)
                 if(GetPVarInt(i, "INDM") == 2) SetPVarInt(i, "pDMKills", 0);
		   }
		   case 3:
		   {
			 foreach(new i : Player)
                 if(GetPVarInt(i, "INDM") == 3) SetPVarInt(i, "pDMKills", 0);
		   }
		   case 5:
		   {
			 foreach(new i : Player)
                 if(GetPVarInt(i, "INDM") == 5) SetPVarInt(i, "pDMKills", 0);
		   }
		   case 8:
		   {
			 foreach(new i : Player)
                 if(GetPVarInt(i, "INDM") == 8) SetPVarInt(i, "pDMKills", 0);
		   }
	   }
	   else if(Dmid == 18) format(gametextstr, sizeof(gametextstr), "~y~Event!~n~~g~~h~/WW");
	   else format(gametextstr, sizeof(gametextstr), "~y~Event!~n~~g~~h~/DM%d", Dmid);
	   */
stock EventWinner(playerid)
{
	EventStarted =0;
	EventStartTime=0;
	EventType=0;
	EventAnswer[0]=EOS;
	new str[128];
	format(str, sizeof(str), "» Event « {CDF590}%s has won the Event!", pName[playerid]);
	GiveMedal(playerid, 70);
	SendClientMessageToAll(0xE8AF02FF, str);
	GivePlayerMoneyEX(playerid, EventMoney);
	ScoreTDupdate(playerid, EventScore);
	GivePP(playerid, EventCooks);
	TextDrawHideForAll(EventTD);

	PlayerTextDrawSetPreviewModel(playerid, PropTD[playerid][6], 325);
	format(str, sizeof(str), "~l~Premium Points: +%d", EventCooks);
	PlayerTextDrawSetStringEX(playerid, PropTD[playerid][1], str);
	format(str, sizeof(str), "~l~Score: +%d", EventScore);
	PlayerTextDrawSetStringEX(playerid, PropTD[playerid][2], str);
	format(str, sizeof(str), "~l~Money: +$%d", EventMoney);
	PlayerTextDrawSetStringEX(playerid, PropTD[playerid][0], str);
	PlayerTextDrawSetStringEX(playerid, PropTD[playerid][7], "~r~E~g~v~b~e~y~n~p~t~w~ Won!");
	PlayerTextDrawSetStringEX(playerid, PropTD[playerid][5], "_~n~_~n~_~n~_");

	PlayerTextDrawShow(playerid, PropTD[playerid][0]);
	PlayerTextDrawShow(playerid, PropTD[playerid][1]);
	PlayerTextDrawShow(playerid, PropTD[playerid][2]);
	PlayerTextDrawShow(playerid, PropTD[playerid][7]);
	PlayerTextDrawShow(playerid, PropTD[playerid][5]);
	PlayerTextDrawShow(playerid, PropTD[playerid][6]);

	SetTimerEx("HideEventWinTD", 9000, false, "i", playerid);

	PlayerInfo[playerid][pEventWon]++;
	new query[256];
	format(query, sizeof(query), "UPDATE `users` SET `pEventWon` = %d WHERE `UserID` = '%d'", PlayerInfo[playerid][pEventWon], PlayerInfo[playerid][UserID]);
	mysql_query(GTADM, query);
}
stock EventWinner2()
{
	foreach(new i : Player)
	{
      if(CSTer[i] == 1 || CSCT[i] == 1 || FB1[i] == 1 || FB2[i] == 1 || CTFG[i] == 1 || CTFB[i] == 1 || DD1[i] == 1 || DD2[i] == 1 || CO1[i] == 1 || CO2[i] == 1)
	  {
    	EventStarted =0;
		EventStartTime=0;
		EventType=0;
		EventAnswer[0]=EOS;
		new str2[128];
		GiveMedal(i, 70);
		GivePlayerMoneyEX(i, EventMoney);
		ScoreTDupdate(i, EventScore);
		GivePP(i, EventCooks);
		TextDrawHideForAll(EventTD);

		PlayerTextDrawSetPreviewModel(i, PropTD[i][6], 325);
		format(str2, sizeof(str2), "~l~Premium Points: +%d", EventCooks);
		PlayerTextDrawSetStringEX(i, PropTD[i][1], str2);
		format(str2, sizeof(str2), "~l~Score: +%d", EventScore);
		PlayerTextDrawSetStringEX(i, PropTD[i][2], str2);
		format(str2, sizeof(str2), "~l~Money: +$%d", EventMoney);
		PlayerTextDrawSetStringEX(i, PropTD[i][0], str2);
		PlayerTextDrawSetStringEX(i, PropTD[i][7], "~r~E~g~v~b~e~y~n~p~t~w~ Won!");
		PlayerTextDrawSetStringEX(i, PropTD[i][5], "_~n~_~n~_~n~_");

		PlayerTextDrawShow(i, PropTD[i][0]);
		PlayerTextDrawShow(i, PropTD[i][1]);
		PlayerTextDrawShow(i, PropTD[i][2]);
		PlayerTextDrawShow(i, PropTD[i][7]);
		PlayerTextDrawShow(i, PropTD[i][5]);
		PlayerTextDrawShow(i, PropTD[i][6]);

		SetTimerEx("HideEventWinTD", 9000, false, "i", i);

		PlayerInfo[i][pEventWon]++;
		new query[256];
		format(query, sizeof(query), "UPDATE `users` SET `pEventWon` = %d WHERE `UserID` = '%d'", PlayerInfo[i][pEventWon], PlayerInfo[i][UserID]);
		mysql_query(GTADM, query);
		CSCT[i]=0;
		CSTer[i]=0;
		CTFB[i]=0;
		CTFG[i]=0;
		FB1[i]=0;
		FB2[i]=0;
		DD1[i]=0;
		DD2[i]=0;
		CO1[i]=0;
		CO2[i]=0;
      }
	}
}
forward HideEventWinTD(playerid);
public HideEventWinTD(playerid)
{
	for(new x=0; x<8; x++) PlayerTextDrawHide(playerid, PropTD[playerid][x]);
}
forward RespawnPick(pickid);
public RespawnPick(pickid)
{
 if(!IsPlayerConnected(PowerUpPlayer[pickid]) || IsPlayerNPC(PowerUpPlayer[pickid]))
 {
	 if(IsValidDynamicPickup(PowerUpPickup[pickid])) DestroyDynamicPickup(PowerUpPickup[pickid]);
	 if(pickid == 0)
	     PowerUpPickup[0]=CreateDynamicPickup(1241, 23, -2511.0571, 775.0422, 35.1719, 0);
	 else if(pickid == 1)
	     PowerUpPickup[1]=CreateDynamicPickup(1241, 23, 2062.4978, -1785.6956, 13.5469, 0);
	 else if(pickid == 2)
         PowerUpPickup[2]=CreateDynamicPickup(1241, 23, -852.6091, 1877.5527, 22.9245, 0);
	 else if(pickid == 3)
         PowerUpPickup[3]=CreateDynamicPickup(1241, 23, 2089.0635, 2405.9089, 74.5786, 0);
	 else if(pickid == 4)
         PowerUpPickup[4]=CreateDynamicPickup(1241, 23, -2473.6848, 1549.7599, 33.2273, 0);
     //else if(pickid == 5)
      //   PowerUpPickup[5]=CreateDynamicPickup(1241, 23, 2162.3809, -102.6472, 2.7500, 0);

 }
 return 1;
}

//============================Commands====================================**
stock SpecNext(playerid)
{
  new Iterator:pspec<MAX_PLAYERS>;
  Iter_Clear(pspec);
  foreach (new i : Character)
  {
       if(IsValidState(i))
       {
		  Iter_Add(pspec, i);
       }
  }
  new id=-1;
  if(spectatorid[playerid] == Iter_Last(pspec))
  {
    id=Iter_First(pspec);
  }
  else
  {
    id=Iter_Next(pspec, spectatorid[playerid]);
  }
  if(id != spectatorid[playerid] && id >= 0)
  {
	  IsBeingSpeced[spectatorid[playerid]]=0;
	  spectatorid[playerid]=id;
	  if(IsPlayerInAnyVehicle(id))
	  {
        SetPlayerInterior(playerid, GetPlayerInterior(id));
        SetPlayerVirtualWorldEX(playerid, GetPlayerVirtualWorld(id));
	    PlayerSpectateVehicle(playerid, GetPlayerVehicleID(id));
	  }
	  else
	  {
		SetPlayerInterior(playerid, GetPlayerInterior(id));
		SetPlayerVirtualWorldEX(playerid, GetPlayerVirtualWorld(id));
		PlayerSpectatePlayer(playerid, id);
	  }
	  IsBeingSpeced[id]=1;
	  new str[128];
	  format(str, sizeof(str), "~w~>~y~Spectating~w~< ~n~~r~%s", pName[id]);
	  SendInfoText(playerid, 3000, str);
  }
  return 1;
}
stock SpecBack(playerid)
{
  TogglePlayerSpectating(playerid, 1);
  new Iterator:pspec<MAX_PLAYERS>;
  Iter_Clear(pspec);
  foreach (new i : Character)
  {
       if(IsValidState(i))
       {
		  Iter_Add(pspec, i);
       }
  }
  new id=-1;
  if(spectatorid[playerid] == Iter_First(pspec))
  {
    id=Iter_Last(pspec);
  }
  else
  {
    id=Iter_Prev(pspec, spectatorid[playerid]);
  }
  if(id != spectatorid[playerid] && id >= 0)
  {
	  IsBeingSpeced[spectatorid[playerid]]=0;
	  spectatorid[playerid]=id;
	  if(IsPlayerInAnyVehicle(id))
	  {
	    if(GetPlayerInterior(id) > 0)
	    {
	        SetPlayerInterior(playerid, GetPlayerInterior(id));
	    }
	    if(GetPlayerVirtualWorld(id) > 0)
	    {
	        SetPlayerVirtualWorldEX(playerid, GetPlayerVirtualWorld(id));
	    }
	    PlayerSpectateVehicle(playerid, GetPlayerVehicleID(id));
	  }
	  else
	  {
	    if(GetPlayerInterior(id) > 0)
	    {
	        SetPlayerInterior(playerid, GetPlayerInterior(id));
	    }
	    if(GetPlayerVirtualWorld(id) > 0)
	    {
	        SetPlayerVirtualWorldEX(playerid, GetPlayerVirtualWorld(id));
	    }
	    PlayerSpectatePlayer(playerid, id);
	  }
	  IsBeingSpeced[id]=1;
	  new str[128];
	  format(str, sizeof(str), "~w~>~y~Spectating~w~< ~n~~r~%s", pName[id]);
	  SendInfoText(playerid, 3000, str);
  }
  return 1;
}

CMD:spec(playerid, params[])
{
    new id, str[128];
	if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(sscanf(params, "u", id)) return SendWarning(playerid, "/spec [id]");
    if(id == playerid) return SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You cant spec yourself.");
    if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}Player not found!");
    //if(IsSpecing[playerid] == 1) return SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You are already specing someone.");
    if(!IsAdmin(playerid, 1)) return SendMsg(playerid, 5);
	if(!IsValidState(id))  return SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}This player in not spawned.");
    if(aduty[playerid] == 1) return SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You cant spec while on admin duty.");
	if(GetPVarInt(playerid, "MissionProgress") || IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
	if(IsInFight(playerid)) return SendMsg(playerid, 2);
	if(IsSpecing[id] == 1) return SendWarning(playerid, "{BABABA}This admin is spectating someone.");
	SavePlayerCoords(playerid);
	SpecMoney[playerid]=GetPlayerMoneyEx(playerid);
	ResetPlayerMoneyEx(playerid);
    SpecInter[playerid] = GetPlayerInterior(playerid);
    SpecWorld[playerid] = GetPlayerVirtualWorld(playerid);
    TogglePlayerSpectating(playerid, true);
    if(IsPlayerInAnyVehicle(id))
    {
        if(GetPlayerInterior(id) > 0)
        {
            SetPlayerInterior(playerid, GetPlayerInterior(id));
        }
        if(GetPlayerVirtualWorld(id) > 0)
        {
            SetPlayerVirtualWorldEX(playerid, GetPlayerVirtualWorld(id));
        }
        PlayerSpectateVehicle(playerid, GetPlayerVehicleID(id));
    }
    else
    {
        if(GetPlayerInterior(id) > 0)
        {
            SetPlayerInterior(playerid, GetPlayerInterior(id));
        }
        if(GetPlayerVirtualWorld(id) > 0)
        {
            SetPlayerVirtualWorldEX(playerid, GetPlayerVirtualWorld(id));
        }
        PlayerSpectatePlayer(playerid, id);
    }
    format(str, sizeof(str), "~w~>~y~Spectating~w~< ~n~~r~%s", pName[id]);
    SendInfoText(playerid, 3000, str);
    IsSpecing[playerid] = 1;
    IsBeingSpeced[id] = 1;
    spectatorid[playerid] = id;
    //PlayerTextDrawShow(playerid, SpecInfo[playerid][0]);
    PlayerTextDrawShow(playerid, SpecInfo[playerid][1]);
    PlayerTextDrawShow(playerid, SpecInfo[playerid][2]);
	SendClientMessage(playerid, GRAY, "Press ~k~~VEHICLE_TURRETRIGHT~ to switch to the Next Player");
	SendClientMessage(playerid, GRAY, "Press ~k~~VEHICLE_TURRETLEFT~ to switch to the Previous player");
	SendClientMessage(playerid, GRAY, "Type (/SpecOff) to stop spectating");
    return 1;
}
CMD:specoff(playerid, params[])
{
    if(IsSpecing[playerid] == 0) return SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You are not spectating anyone.");
    TogglePlayerSpectating(playerid, 0);
    return 1;
}
/*
CMD:tiles(playerid)
{
   new w;
   switch(PlayerInfo[playerid][pTile])
   {
	  case 0:
	  {
		  w=300;

	  }
	  case 1:
	  {
		  w=301;
	  }
   }
   
   Streamer_UpdateEx(playerid, 2530.2212, 1065.5459, 194.8815);
   new v=CreateVehicle(441, 2538.8054, 1088.0094, 140.5891, 90.0000, -1, -1, 100);
   SetPlayerVirtualWorldEX(playerid, w);
   SetVehicleVirtualWorld(v, w);
   PutPlayerInVehicle(playerid, v, 0);
   SetPlayerCameraPos(playerid, 2530.2212, 1065.5459, 194.8815);

   SetPlayerCameraLookAt(playerid, 2529.2207, 1065.5471, 184.8815);
   Streamer_UpdateEx(playerid, 2530.2212, 1065.5459, 194.8815);
   SetPVarInt(playerid, "In_Tile", true);
   return 1;
}
CMD:sr(playerid)
{
	SetPVarInt(playerid, "InSR", true);
	SavePlayerCoords(playerid);
	SetPVarInt(playerid, "r_Score", 0);
	go_rtimer[playerid]=SetTimerEx("Go_r", 1203, true, "i", playerid);
	SetPlayerPos(playerid, 801.4610, 1682.1893, 5.9269);
	SetPlayerFacingAngle(playerid, 180.0);
	GivePlayerWeapon(playerid, 34, 9999);
	GivePlayerWeapon(playerid, 31, 9999);
	GivePlayerWeapon(playerid, 24, 9999);
	pO_Time[playerid]=60;
	SetPlayerVirtualWorldEX(playerid, 4545);

	SetDynamicObjectPos(f_Objects[24], 100.0, 100.0, 100.0);
	SetDynamicObjectPos(f_Objects[25], 100.0, 100.0, 100.0);
	SetDynamicObjectPos(f_Objects[26], 100.0, 100.0, 100.0);
	SetDynamicObjectPos(f_Objects[17], 100.0, 100.0, 100.0);
	SetDynamicObjectPos(f_Objects[18], 100.0, 100.0, 100.0);
	SetDynamicObjectPos(f_Objects[19], 100.0, 100.0, 100.0);
	SetDynamicObjectPos(f_Objects[20], 100.0, 100.0, 100.0);
	SetDynamicObjectPos(f_Objects[21], 100.0, 100.0, 100.0);
	SetDynamicObjectPos(f_Objects[22], 100.0, 100.0, 100.0);
	SetDynamicObjectPos(f_Objects[23], 100.0, 100.0, 100.0);
	GangZoneShowForPlayer(playerid, ff_zone, 0xFF000030);

	PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][3], "~b~Score: ~b~~h~-");
	PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][4], "~r~Time: ~r~~h~1:00");
	PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][1], "_");
	PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][5], "_");
	PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][7], "~g~Shooting range");
	for(new x=0; x<8;x++) PlayerTextDrawShow(playerid, DMpTD[playerid][x]);

	return 1;
}
forward Go_r(playerid);
public Go_r(playerid)
{
	new f, d=sizeof(Animals);
	switch(pO_Time[playerid])
	{
	   case 55..60:
	   {
  		   f=random(d);
		   SetDynamicObjectPos(f_Objects[f], Animals[f][tix], Animals[f][tiy], Animals[f][tiz]);
		   SetDynamicObjectRot(f_Objects[f], Animals[f][trix], Animals[f][triy], Animals[f][triz]);
		   switch(f)
		   {
			  case 0..17: MoveDynamicObject(f_Objects[f], Animals[f][tix], Animals[f][tiy], Animals[f][tiz]+0.2, 0.1, 0.0, Animals[f][triy], Animals[f][triz]);
			  case 18..20:MoveDynamicObject(f_Objects[f], 787.0, Animals[f][tiy], Animals[f][tiz], 10.0);
			  case 21..23:MoveDynamicObject(f_Objects[f], 813.0, Animals[f][tiy], Animals[f][tiz], 10.0);
			  case 31..33: MoveDynamicObject(f_Objects[f], Animals[f][tix], Animals[f][tiy], 0.0, 10.0);
		   }
		   SetTimerEx("destroythecrap", 3000, false, "ii", playerid, f);

	   }
	   case 40..53:
	   {
		  for(new x=0; x<2; x++)
		  {

  		   f=random(d);
		   SetDynamicObjectPos(f_Objects[f], Animals[f][tix], Animals[f][tiy], Animals[f][tiz]);
		   SetDynamicObjectRot(f_Objects[f], Animals[f][trix], Animals[f][triy], Animals[f][triz]);
		   switch(f)
		   {
			  case 0..17: MoveDynamicObject(f_Objects[f], Animals[f][tix], Animals[f][tiy], Animals[f][tiz]+0.2, 0.1, 0.0, Animals[f][triy], Animals[f][triz]);
			  case 18..20:MoveDynamicObject(f_Objects[f], 787.0, Animals[f][tiy], Animals[f][tiz], 10.0);
			  case 21..23:MoveDynamicObject(f_Objects[f], 813.0, Animals[f][tiy], Animals[f][tiz], 10.0);
			  case 31..33: MoveDynamicObject(f_Objects[f], Animals[f][tix], Animals[f][tiy], 0.0, 10.0);
		   }
		   SetTimerEx("destroythecrap", 3000, false, "ii", playerid, f);
		  }
	   }
	   case 54:
	   {
		  for(new x=0; x<2; x++)
		  {

  		   f=32;
		   SetDynamicObjectPos(f_Objects[f], Animals[f][tix], Animals[f][tiy], Animals[f][tiz]);
		   SetDynamicObjectRot(f_Objects[f], Animals[f][trix], Animals[f][triy], Animals[f][triz]);
		   switch(f)
		   {
			  case 0..17: MoveDynamicObject(f_Objects[f], Animals[f][tix], Animals[f][tiy], Animals[f][tiz]+0.2, 0.1, 0.0, Animals[f][triy], Animals[f][triz]);
			  case 18..20:MoveDynamicObject(f_Objects[f], 787.0, Animals[f][tiy], Animals[f][tiz], 10.0);
			  case 21..23:MoveDynamicObject(f_Objects[f], 813.0, Animals[f][tiy], Animals[f][tiz], 10.0);
			  case 31..33: MoveDynamicObject(f_Objects[f], Animals[f][tix], Animals[f][tiy], 0.0, 10.0);
		   }
		   SetTimerEx("destroythecrap", 3000, false, "ii", playerid, f);
		  }
	   }
	   case 20..39:
	   {
		  for(new x=0; x<4; x++)
		  {

  		   f=random(d);
		   SetDynamicObjectPos(f_Objects[f], Animals[f][tix], Animals[f][tiy], Animals[f][tiz]);
		   SetDynamicObjectRot(f_Objects[f], Animals[f][trix], Animals[f][triy], Animals[f][triz]);
		   switch(f)
		   {
			  case 0..17: MoveDynamicObject(f_Objects[f], Animals[f][tix], Animals[f][tiy], Animals[f][tiz]+0.2, 0.1, 0.0, Animals[f][triy], Animals[f][triz]);
			  case 18..20:MoveDynamicObject(f_Objects[f], 787.0, Animals[f][tiy], Animals[f][tiz], 10.0);
			  case 21..23:MoveDynamicObject(f_Objects[f], 813.0, Animals[f][tiy], Animals[f][tiz], 10.0);
			  case 31..33: MoveDynamicObject(f_Objects[f], Animals[f][tix], Animals[f][tiy], 0.0, 10.0);
		   }
		   SetTimerEx("destroythecrap", 3000, false, "ii", playerid, f);
		  }
	   }
	   default:
	   {
		  for(new x=0; x<6; x++)
		  {

  		   f=random(d);
		   SetDynamicObjectPos(f_Objects[f], Animals[f][tix], Animals[f][tiy], Animals[f][tiz]);
		   SetDynamicObjectRot(f_Objects[f], Animals[f][trix], Animals[f][triy], Animals[f][triz]);
		   switch(f)
		   {
			  case 0..17:  MoveDynamicObject(f_Objects[f], Animals[f][tix], Animals[f][tiy], Animals[f][tiz]+0.2, 0.1, 0.0, Animals[f][triy], Animals[f][triz]);
			  case 18..20: MoveDynamicObject(f_Objects[f], 787.0, Animals[f][tiy], Animals[f][tiz], 10.0);
			  case 21..23: MoveDynamicObject(f_Objects[f], 813.0, Animals[f][tiy], Animals[f][tiz], 10.0);
			  case 31..33: MoveDynamicObject(f_Objects[f], Animals[f][tix], Animals[f][tiy], 0.0, 10.0);
		   }
		   SetTimerEx("destroythecrap", 3000, false, "ii", playerid, f);
		  }
	   }

 	}
	new str[128];
	format(str, sizeof(str), "~b~Score: ~b~~h~%d", GetPVarInt(playerid, "r_Score"));
	PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][3], str);
	format(str, sizeof(str), "~r~Time: ~r~~h~00:%2d", pO_Time[playerid]);
	PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][4], str);
	PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][1], "_");
	PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][5], "_");
	PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][7], "~g~Shooting range");
  	pO_Time[playerid]--;
	if(pO_Time[playerid] <=0)
	{
		KillTimer(go_rtimer[playerid]);
		go_rtimer[playerid]=-1;
		LoadPlayerCoords(playerid);
		SetPlayerVirtualWorldEX(playerid, 0);
		DeletePVar(playerid, "InSR");
	}
	return 1;
}
forward OnPlayerShootDynamicObject(playerid, weaponid, objectid, Float:x, Float:y, Float:z);
public OnPlayerShootDynamicObject(playerid, weaponid, objectid, Float:x, Float:y, Float:z)
{
	for(new f=0; f<sizeof(f_Objects); f++)
	{
		if(objectid == f_Objects[f])
		{
			switch(f)
			{
			   case 0..17:
			   {
                   SetPVarInt(playerid, "r_Score", GetPVarInt(playerid, "r_Score")+5);
                   SendClientMessage(playerid, -1, "+5");
			   }
			   case 18..23:
			   {
                   SetPVarInt(playerid, "r_Score", GetPVarInt(playerid, "r_Score")+15);
                   SendClientMessage(playerid, -1, "+20");
			   }
			   case 31..33:
			   {
                   SetPVarInt(playerid, "r_Score", GetPVarInt(playerid, "r_Score")+30);
                   SendClientMessage(playerid, -1, "+20");
			   }
			   case 24..30:
			   {
                   SetPVarInt(playerid, "r_Score", GetPVarInt(playerid, "r_Score")-10);
                   SendClientMessage(playerid, -1, "-10");
			   }
			}
            destroythecrap(playerid, f);
            SendClientMessage(playerid, -1, "WORKS OMG");
            break;
		}
	}
	return 1;
}
forward destroythecrap(playerid, f);
public destroythecrap(playerid, f)
{
	if(IsValidPlayerObject(playerid, f_Objects[f]))
	{
		 switch(f)
		 {
			  case 0..17: MoveDynamicObject(f_Objects[f], Animals[f][tix], Animals[f][tiy], Animals[f][tiz]-0.1, 0.1, Animals[f][trix], Animals[f][triy], Animals[f][triz]);
			  default: SetDynamicObjectPos(f_Objects[f], 100.0, 100.0, 100.0);
		 }

		 SetTimerEx("destroythecrap2", 1500, false, "ii", playerid, f_Objects[f]);
	}
	return 1;
}
forward destroythecrap2(playerid, f);
public destroythecrap2(playerid, f)
{
	if(IsValidPlayerObject(playerid, f_Objects[f]))
	{
		 switch(f)
		 {
			  case 17..26: SetDynamicObjectPos(f_Objects[f], 100.0, 100.0, 100.0);
			  default: { }
		 }
	}
	return 1;
}*/
//---------Test end



CMD:sumomap(playerid, params[])
{
	if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
	if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
	if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
//	if(IsInFight(playerid)) return SendMsg(playerid, 2);
    if(!IsAdmin(playerid, 5)) return SendMsg(playerid, 5);
	new smap;
	if (sscanf(params, "d", smap)) return SendWarning(playerid, "/sumomap <1-13>");
	if(smap < 1 || smap > 13) return SendWarning(playerid, "This map doesn't exist");
    ring=smap;
    new str[128];
    format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}Admin %s has changed the sumo map", gAname(playerid));
    SendClientMessageToAll(AdminInfo, str);

	sumocam=1;
    foreach(new i : InSumo)
    {
        if(SumoCar[i] > 0) DestroyVehicleEX(SumoCar[i]);
        SumoCar[i]=0;
        SpawnInSumo(i);
        if(nextroundtimer > 0) KillTimer(nextroundtimer);
        nextroundtimer=SetTimer("nextroundsumo", 15000, false);
    }
	return 1;
}
stock gAname(playerid)
{
  new str[50];
  if(GetPVarInt(playerid, "Hidden") || GetPVarInt(playerid, "HideMeBitch") || Jonny[playerid] == 1) format(str, sizeof(str), "Jonny");
  else format(str, sizeof(str), "%s", pName[playerid]);
  return str;

}
CMD:sumo(playerid)
{

	if(locksumo ==1) return 0;
	if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
	if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
	if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
	if(GetPVarInt(playerid, "MissionProgress") || IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
	if(IsInFight(playerid)) return SendMsg(playerid, 2);
	if(aduty[playerid] == 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command while on admin duty.");
	if(ring == 0) ring=1;
    TickCount[playerid][SumoJoin]=GetTickCount();
	new c=Iter_Count(InSumo);
	if(c>=30) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}The sumo is already full, try again later");
    Streamer_ToggleIdleUpdate(playerid, true);
	ResetPlayerWeapons(playerid);
	SavePlayerCoords(playerid);
    Iter_Add(InSumo, playerid );
	SpawnInSumo(playerid);
    SumoSpecID[playerid]=-1;
    SumoDied[playerid]=0;
	new dstring[144];
	format(dstring, sizeof(dstring), "{70DB72}» Sumo «{FEC0F2} %s{FFFFFF} {BDDDFB}has joined the Sumo {FEC0F2}(/Sumo)", pName[playerid]);
	SendClientMessageToAll(GRAY, dstring);
	SetTeleShow(6, 0);
	return 1;
}
#if defined USE_LOTTO
CMD:lotto(playerid)
{
    if(LotoStarted == 0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}The Lotto has not been started yet.");
    if(Iter_Contains(lotoplayers, playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You have already joined the lotto.");
    if(GetPlayerMoneyEx(playerid) < 10000) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You need $10000 to join the lotto.");
	ShowPlayerDialog(playerid, 8718, DIALOG_STYLE_INPUT, "Select your number", "Choose a number between 1 and 100", "Enter", "Exit");
	return 1;
}
#endif
//==============================================================================
/*
CMD:co(playerid)//coshit
{
    if(EventStarted > 1 && EventType == 6973) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant join the Colosseum during an event countdown.");
    if((PlayerInfo[playerid][Jailed] > 0) || GetPVarInt(playerid, "CAGED")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You can't use this command in jail/cage");
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in afk mode type (/back) then try again");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
    if(GetPVarInt(playerid, "inFight")) return SendMsg(playerid, 2);

    if(CO > 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}The Colosseum has already been started");

    for( new w=0; w < 13; w++ ) GetPlayerWeaponData( playerid, w, pWeapons[playerid][w], pAmmo[playerid][w] );
    SavePlayerCoords(playerid);
    new count1=COCount1;
    new count2=COCount2;
	if(count1 > count2) SetPVarInt(playerid, "CO", 2), COCount2++;
	else SetPVarInt(playerid, "CO", 1), COCount1++;
	COSETCOLOR(playerid);
    new msg[128];
    format(msg, sizeof(msg), "{168BFF}» CO « {5EAFFF}%s has joined the Colosseum {168BFF}(/CO)", pName[playerid]);
    SendClientMessageToAll(CTC1, msg);

    if(CO == 0)
	{
        CO =1;
        COGreenScore=0;
        COBlueScore=0;
        COtime=60;

	    if(EventType == 6973 && EventStarted ==1)
	    {
		  COStartTime=60;
          SendClientMessageToAll(CTC1, "{168BFF}» CO « {5EAFFF}Colosseum will start in 60 seconds");
          COStartTimer = SetTimer("StartCOCount", 1000, true);
 	      COStartTimer2 = SetTimer("StartCO", 60000, false);
	    }
	    else
	    {
		  COStartTime=30;
          SendClientMessageToAll(CTC1, "{168BFF}» CO « {5EAFFF}Colosseum will start in 30 seconds");
          COStartTimer = SetTimer("StartCOCount", 1000, true);
          COStartTimer2 = SetTimer("StartCO", 30000, false);
	    }
	}
	ResetPlayerWeaponsEX(playerid);
	TogglePlayerControllable(playerid, 0);
	ResetPlayerWeapons(playerid);
	SetPlayerArmour(playerid, 0);
	COSETCOLOR(playerid);
    SetPlayerVirtualWorldEX(playerid, 14146);
    SetPlayerPos(playerid, 138.0278, 2032.2936, 0.6028);
    SetPlayerCameraPosEx(playerid, 138.0278, 2032.2936, 57.6028);
    SetPlayerCameraLookAtEx(playerid, 137.0688, 2031.9979, 57.0030);
    Streamer_UpdateEx(playerid, 138.0278, 2032.2936, 57.6028);
    PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][3] , "~g~Green Team: ~g~~h~-");
	PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][4] , "~b~Blue Team: ~b~~h~-");
	PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][7] , "~p~Colosseum");
	PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][1] , "~n~~r~Time: ~y~05:00");
	PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][5] , "_");
	return 1;
}
stock EndCO()//coshit
{
   CO = 0;
   KillTimer(COStartTimer);
   KillTimer(COStartTimer2);
   KillTimer(COUpdateTimer);
   COStartTimer=-1;
   COStartTimer2=-1;
   COUpdateTimer=-1;
   COGreenScore=0;
   COBlueScore=0;
   COtime=300;
   COCount1=0;
   COCount2=0;
   foreach(new i : Player)
   {
	 if(GetPVarInt(i, "CO"))
	 {
	   Remove_From_CO(i);
	 }
   }
}
forward StartCO();//coshit
public StartCO()
{
    KillTimer(COStartTimer);
    COStartTimer=-1;
	new count = COCount1+COCount2;
    if(count < 1)
	{
	  foreach(new i : Player)
      if(GetPVarInt(i, "CO"))
      {
        new gang = PlayerInfo[i][pGang];
        if(gang > 0) SetPlayerColor(i, PlayerColors[GangInfo[gang][gColor]]);
        else SetPlayerColor(i, PlayerColors[random(200)] );
        Remove_From_CO(i);
        EndCO();
        if(count < 1) SendClientMessageToAll(CTC1, "{168BFF}» CO « {5EAFFF}Colosseum has been cancelled {168BFF}(Not enough players)");
        if(GetPVarInt(i, "CO")) Remove_From_CO(i);
      }
	}
	else
	{
	  COUpdateTimer=SetTimer("COUpdate", 1000, true);
      CO = 2;
      SendClientMessageToAll(CTC1, "{168BFF}» CO « {5EAFFF}Colosseum has been started!");
      foreach(new i : Player)
	  {
		 new a= GetPVarInt(i, "CO");
		 if(a > 0)
		 {
            new str[128];
            format(str, sizeof(str), "~g~Green Team: ~g~~h~%d", COGreenScore);
            PlayerTextDrawSetStringEX(i, DMpTD[i][3] , str);

            format(str, sizeof(str), "~b~Blue Team: ~b~~h~%d", COBlueScore);
            PlayerTextDrawSetStringEX(i, DMpTD[i][4] , str);

            format(str, sizeof(str), "~n~~r~Time: ~y~%s", TimeConvert(COtime));
            PlayerTextDrawSetStringEX(i, DMpTD[i][1] , str);
            for(new x=0; x<8; x++) PlayerTextDrawShow(i, DMpTD[i][x]);

			SetCameraBehindPlayer(i);
			TogglePlayerControllable(i, 1);

	        if(a == 1)
            {

              SendClientMessage(i, CTC2, "---------------------------------------------------------");
              SendClientMessage(i, CTC1, "You are in the green team, you can use /cochat to chat with your team");
              SendClientMessage(i, CTC1, "You can find the weapons around this place");
              SendClientMessage(i, CTC1, "When your team reaches enough score, you will be awarded with money and score");
              SendClientMessage(i, CTC1, "The team with more points will win the Colosseum!");
              SendClientMessage(i, CTC2, "---------------------------------------------------------");
		      COSETCOLOR(i);
		      SetPlayerHealth(i, 10);
   	          switch(random(3))
              {
                case 0: SetPlayerPosEx(i, 90.4043, 2020.7457, 17.9754, 119.7211);
                case 1: SetPlayerPosEx(i, 83.0152, 2026.6451, 17.7118, 148.2348);
                case 2: SetPlayerPosEx(i, 92.3783, 2010.6444, 18.1166, 88.3875);
         	  }
	        }
	        else if(a == 2)
	        {
              SendClientMessage(i, CTC2, "---------------------------------------------------------");
              SendClientMessage(i, CTC1, "You are in the blue team, you can use /cochat to chat with your team");
              SendClientMessage(i, CTC1, "You can find the weapons around this place");
              SendClientMessage(i, CTC1, "When your team reaches enough score, you will be awarded with money and score");
              SendClientMessage(i, CTC1, "The team with more points will win the Colosseum!");
              SendClientMessage(i, CTC2, "---------------------------------------------------------");
		      COSETCOLOR(i);
		      SetPlayerHealth(i, 10);
   	          switch(random(3))
              {
                case 0: SetPlayerPosEx(i, 74.3329, 2001.9585, 17.6406, 304.2528);
                case 1: SetPlayerPosEx(i, 66.1891, 2014.0333, 17.6406, 269.4724);
                case 2: SetPlayerPosEx(i, 74.8183, 2026.9244, 17.6406, 237.5121);
         	  }
	        }
		 }
	  }
	}
	return 1;
}

forward StartCOCount();//coshit
public StartCOCount()
{
  if(COStartTime > 0)
  {
      new count = COCount1+COCount2;
	  COStartTime--;
      new str[128];
	  format(str, sizeof(str), "~y~Colosseum ~g~starts~n~in ~r~%d ~p~seconds", COStartTime);
	  foreach(new i : Player)
	  {
        if(GetPVarInt(i, "CO"))
	    {
          PlayerTextDrawHide(i, pInfoTD[i]);
		  SendInfoText(i, 1000, str);
		}
	  }
	  if(count ==0)
	  {
	    foreach(new i : Player)
        if(GetPVarInt(i, "CO"))
        {
	      new gang = PlayerInfo[i][pGang];
          if(gang > 0) SetPlayerColor(i, PlayerColors[GangInfo[gang][gColor]]);
          else SetPlayerColor(i, PlayerColors[random(200)] );
   		  Remove_From_CO(i);
   		  EndCO();
          SendClientMessageToAll(CTC1, "{168BFF}» CO « {5EAFFF}Colosseum has been cancelled {168BFF}(Not enough players)");
          DeletePVar(i, "CO");
        }
	  }
  }
  else
  {
     KillTimer(COStartTimer);
     COStartTimer=-1;

  }
  return 1;
}
forward COUpdate();//coshit
public COUpdate()
{
	   new count =COCount1+COCount2;
	   if(count ==0)
	   {
	     foreach(new i : Player)
	     if(GetPVarInt(i, "CO"))
	     {
		   new gang = PlayerInfo[i][pGang];
           if(gang > 0) SetPlayerColor(i, PlayerColors[GangInfo[gang][gColor]]);
           else SetPlayerColor(i, PlayerColors[random(200)] );
           Remove_From_CO(i);
           EndCO();
           DeletePVar(i, "CO");
           SendClientMessageToAll(CTC1, "{168BFF}» CO « {5EAFFF}Colosseum has been cancelled {168BFF}(Not enough players)");
         }
	   }
	   else
	   {
		 if(COtime > 0)
		 {
            COtime--;
            new str[128];
	        foreach(new i : Player)
	        {
              format(str, sizeof(str), "~g~Green Team: ~g~~h~%d", COGreenScore);
              PlayerTextDrawSetStringEX(i, DMpTD[i][3] , str);

              format(str, sizeof(str), "~b~Blue Team: ~b~~h~%d", COBlueScore);
              PlayerTextDrawSetStringEX(i, DMpTD[i][4] , str);

              format(str, sizeof(str), "~n~~r~Time: ~y~%s", TimeConvert(COtime));
              PlayerTextDrawSetStringEX(i, DMpTD[i][1] , str);
            }
	     }
	     if(COtime <= 0)
         {
			   new str[150];
			   if(COGreenScore > COBlueScore)
			   {
					format(str, sizeof(str), "{168BFF}» CO « {5EAFFF}Green Team have won the Colosseum {168BFF}("GREEN_"%d{168BFF}:"BLUE_"%d{168BFF})", COGreenScore, COBlueScore);
                    SendClientMessageToAll(CTC1, str);
                    foreach(new i : Player)
                    {
				      if(GetPVarInt(i, "CO") == 2)
				      {
                        SendInfoText(i, 5000, "~g~Winners!");
                        ScoreTDupdate(i, 5);
                        Remove_From_CO(i);
                        PlayerInfo[i][COWins]++;
                        new Query[256];
                        format(Query, sizeof(Query), "UPDATE `users` SET `COWins` = %d WHERE `UserID` = '%d'", PlayerInfo[i][COWins], PlayerInfo[i][UserID]);
                        mysql_query(GTADM, Query);
                        if(PlayerInfo[i][COWins] >= 10) GiveMedal(i, 96);
                        if(EventType==6973 && EventStarted==1)
                        {
                              CO2[i]=1;
		                      new str2[128];
				              if(EventType==6973 && EventStarted==1) EventWinner2(), format(str2, sizeof(str2), "» Event « {CDF590}CO Green Team have won the Event!"), SendClientMessageToAll(0xE8AF02FF, str2);
				              Remove_From_CO(i);
				              EndCO();
						}
                      }
					}
				    foreach(new i : Player) if(GetPVarInt(i, "CO") == 1)
				    {
                      SendInfoText(i, 5000, "~r~Losers!");
                      ScoreTDupdate(i, 1);
                      Remove_From_CO(i);
                      EndCO();
				    }
               }
			   if(COBlueScore > COGreenScore)
			   {
 					format(str, sizeof(str), "{168BFF}» CO « {5EAFFF}Blue Team have won the Colosseum {168BFF}("BLUE_"%d{168BFF}:"GREEN_"%d{168BFF})", COBlueScore, COGreenScore);
                    SendClientMessageToAll(CTC1, str);
                    foreach(new i : Player)
                    {
						 if(GetPVarInt(i, "CO") == 1)
						 {
                           SendInfoText(i, 5000, "~g~Winners!");
                           ScoreTDupdate(i, 5);
                           PlayerInfo[i][COWins]++;
	                       new Query[256];
	                       format(Query, sizeof(Query), "UPDATE `users` SET `COWins` = %d WHERE `UserID` = '%d'", PlayerInfo[i][COWins], PlayerInfo[i][UserID]);
                           mysql_query(GTADM, Query);
                           if(PlayerInfo[i][COWins] >= 10) GiveMedal(i, 96);
	                       Remove_From_CO(i);
                           EndCO();
                           if(EventType==6973 && EventStarted==1)
                           {
                             CO1[i]=1;
                             new str2[128];
                             if(EventType==6973 && EventStarted==1) EventWinner2(), format(str2, sizeof(str2), "» Event « {CDF590}CO Blue Team have won the Event!"), SendClientMessageToAll(0xE8AF02FF, str2);
                             Remove_From_CO(i);
                             EndCO();
				           }
						 }
						 if(GetPVarInt(i, "CO") == 2)
						 {
                              SendInfoText(i, 5000, "~r~Losers!");
                              Remove_From_CO(i);
                              ScoreTDupdate(i, 1);
                              EndCO();
						 }
                    }

			   }
			   if(COGreenScore == COBlueScore && COBlueScore == COGreenScore && CO > 0)
			   {
 					format(str, sizeof(str), "{168BFF}» CO « {5EAFFF}Colosseum has been finished! (Draw) {168BFF}("BLUE_"%d{168BFF}:"GREEN_"%d{168BFF})", COBlueScore, COGreenScore);
                    SendClientMessageToAll(CTC1, str);
                    foreach(new i : Player)
                    {
						 if(GetPVarInt(i, "CO"))
						 {
                              SendInfoText(i, 5000, "~y~Draw!");
                              ScoreTDupdate(i, 1);
                              Remove_From_CO(i);
                              EndCO();
						 }
                    }

			   }
               EndCO();
         }
	   }
       return 1;
}
CMD:fc(playerid)//flappycarshit
{
	if(IsInFight(playerid)) return SendMsg(playerid, 2);
	if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
	if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");
    if(aduty[playerid] == 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command while on admin duty.");
	if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
	if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
	SavePlayerCoords(playerid);
	SetPlayerVirtualWorldEX(playerid, 66699);
	SetPlayerPos(playerid, 1928.3724, 3353.9844, 6.0000);
	SetPlayerFacingAngle(playerid, 94.6369);
	ResetPlayerWeaponsEX(playerid);

	new str[256];
	format(str, sizeof(str), "{F4BBFF}» Flappy Car « {D19FE8}%s has joined the Flappy Car Challenge {F4BBFF}(/FC)", pName[playerid]);
	SendClientMessageToAll(0xF2EE05FF, str);
	new str2[128];
	format(str2, sizeof(str2), "{F4BBFF}» Flappy Car « {D19FE8}Press {F4BBFF}Caps lock {D19FE8}and try to finish the Flappy car challenge!");
	SendClientMessage(playerid, -1, str2);
	new str3[128];
	format(str3, sizeof(str3), "{F4BBFF}» Flappy Car « {D19FE8}Use {F4BBFF}/FCWorld {D19FE8}to change your virtual world!");
	SendClientMessage(playerid, -1, str3);
	SetPVarInt(playerid, "inflappy", true);
	SetPlayerVirtualWorldEX(playerid, 66699);
    TeleportPlayer(playerid, 1928.3724, 3353.9844, 6.0000, 89.6416, 0);

    new ah= CreateVehicle(441, 1928.3724, 3353.9844, 6.0000, 89.6416, -1, -1, -1);
    SetVehicleVirtualWorld(ah, 66699);
    PutPlayerInVehicle(playerid, ah, 0);
    AddVehicleComponent(GetPlayerVehicleID(playerid), 1010);
    AddVehicleComponent(GetPlayerVehicleID(playerid), 1087);
    AddVehicleComponent(GetPlayerVehicleID(playerid), 1080);
    new countzz=CountFC();
    if(countzz == 0)
    {
      for(new v = 1; v != MAX_VEHICLES; v++)
      {
	    new wa=GetVehicleVirtualWorld(v);
        if(wa == 66699 || wa == 66700 || wa == 66701 || wa == 66702 || wa == 66703 || wa == 66704 && GetVehicleModel(v) == 441)
        {
          DestroyVehicle(v);
        }
      }
    }
	return 1;
}
CMD:dd(playerid)//ddshit
{
    if(EventStarted > 1 && EventType == 6972) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant join the Disco Dodgebomb during an event countdown.");
    if((PlayerInfo[playerid][Jailed] > 0) || GetPVarInt(playerid, "CAGED")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You can't use this command in jail/cage");
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in afk mode type (/back) then try again");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
    if(GetPVarInt(playerid, "inFight")) return SendMsg(playerid, 2);

    if(DD > 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}The Disco Dodgebomb has already been started");

    for( new w=0; w < 13; w++ ) GetPlayerWeaponData( playerid, w, pWeapons[playerid][w], pAmmo[playerid][w] );
    SavePlayerCoords(playerid);
    new count1=DDCount1;
    new count2=DDCount2;
	if(count1 > count2) SetPVarInt(playerid, "DD", 2), DDCount2++;
	else SetPVarInt(playerid, "DD", 1), DDCount1++;
	DDSETCOLOR(playerid);
    new msg[128];
    format(msg, sizeof(msg), "{FF00EA}» DD « {9D00FF}%s has joined the Disco Dodgebomb {FF00EA}(/DD)", pName[playerid]);
    SendClientMessageToAll(CTC1, msg);

    if(DD == 0)
	{
        DD =1;
        DDGreenScore=0;
        DDBlueScore=0;
        DDtime=60;

	    if(EventType == 6972 && EventStarted ==1)
	    {
		  DDStartTime=60;
          SendClientMessageToAll(CTC1, "{FF00EA}» DD « {9D00FF}Disco Dodgebomb will start in 60 seconds");
          DDStartTimer = SetTimer("StartDDCount", 1000, true);
 	      DDStartTimer2 = SetTimer("StartDD", 60000, false);
	    }
	    else
	    {
		  DDStartTime=30;
          SendClientMessageToAll(CTC1, "{FF00EA}» DD « {9D00FF}Disco Dodgebomb will start in 30 seconds");
          DDStartTimer = SetTimer("StartDDCount", 1000, true);
          DDStartTimer2 = SetTimer("StartDD", 30000, false);
	    }
	}
	ResetPlayerWeaponsEX(playerid);
	TogglePlayerControllable(playerid, 0);
	ResetPlayerWeapons(playerid);
	GivePlayerWeapon(playerid, 24, 9999);
	SetPlayerArmour(playerid, 0);
	DDSETCOLOR(playerid);
	SetPlayerVirtualWorldEX(playerid, 14145);
	SetPlayerPos(playerid, -5.7680, 99.8244, 0.9997);
    SetPlayerCameraPosEx(playerid, -5.7680, 99.8244, 131.9997);
    SetPlayerCameraLookAtEx(playerid, -6.4855, 99.1298, 131.0449);
    Streamer_UpdateEx(playerid, -5.7680, 99.8244, 131.9997);
    PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][3] , "~g~Green Team: ~g~~h~-");
	PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][4] , "~b~Blue Team: ~b~~h~-");
	PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][7] , "~y~Disco Dodgebomb");
	PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][1] , "~n~~r~Time: ~p~10:00");
	PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][5] , "_");
	return 1;
}
stock EndDD()//ddshit
{
   DD = 0;
   KillTimer(DDStartTimer);
   KillTimer(DDStartTimer2);
   KillTimer(DDUpdateTimer);
   DDStartTimer=-1;
   DDStartTimer2=-1;
   DDUpdateTimer=-1;
   DDGreenScore=0;
   DDBlueScore=0;
   DDtime=600;
   DDCount1=0;
   DDCount2=0;
   foreach(new i : Player)
   {
	 if(GetPVarInt(i, "DD"))
	 {
	   Remove_From_DD(i);
	 }
   }
}
forward StartDD();//ddshit
public StartDD()
{
    KillTimer(DDStartTimer);
    DDStartTimer=-1;
	new count = DDCount1+DDCount2;
    if(count < 1)
	{
	  foreach(new i : Player)
      if(GetPVarInt(i, "DD"))
      {
        new gang = PlayerInfo[i][pGang];
        if(gang > 0) SetPlayerColor(i, PlayerColors[GangInfo[gang][gColor]]);
        else SetPlayerColor(i, PlayerColors[random(200)] );
        Remove_From_DD(i);
        EndDD();
        SendClientMessageToAll(CTC1, "{FF00EA}» DD « {9D00FF}Disco Dodgebomb has been cancelled {FF00EA}(Not enough players)");
        if(GetPVarInt(i, "DD")) Remove_From_DD(i);
      }
	}
	else
	{
	  DDUpdateTimer=SetTimer("DDUpdate", 1000, true);
      DD = 2;
      SendClientMessageToAll(CTC1, "{FF00EA}» DD « {9D00FF}Disco Dodgebomb has been started!");
      foreach(new i : Player)
	  {
		 new a= GetPVarInt(i, "DD");
		 if(a > 0)
		 {
            new str[128];
            format(str, sizeof(str), "~g~Green Team: ~g~~h~%d", DDGreenScore);
            PlayerTextDrawSetStringEX(i, DMpTD[i][3] , str);

            format(str, sizeof(str), "~b~Blue Team: ~b~~h~%d", DDBlueScore);
            PlayerTextDrawSetStringEX(i, DMpTD[i][4] , str);

            format(str, sizeof(str), "~n~~r~Time: ~p~%s", TimeConvert(DDtime));
            PlayerTextDrawSetStringEX(i, DMpTD[i][1] , str);
            for(new x=0; x<8; x++) PlayerTextDrawShow(i, DMpTD[i][x]);

			SetCameraBehindPlayer(i);
			TogglePlayerControllable(i, 1);

	        if(a == 1)
            {

              SendClientMessage(i, CTC2, "---------------------------------------------------------");
              SendClientMessage(i, CTC1, "You are in the green team, use /ddchat to chat with your team");
              SendClientMessage(i, CTC1, "Each team will get a new weapon every minute");
              SendClientMessage(i, CTC1, "The team with more points wins the Disco Dodgebomb!");
              SendClientMessage(i, CTC2, "---------------------------------------------------------");
		      DDSETCOLOR(i);
   	          switch(random(3))
              {
                case 0: SetPlayerPosEx(i, -37.4495, 76.9080, 80.4462, 158.9124);
                case 1: SetPlayerPosEx(i, -45.3536, 79.3568, 80.4462, 157.9490);
                case 2: SetPlayerPosEx(i, -53.7857, 81.4531, 80.4462, 160.7690);
         	  }
	        }
	        else if(a == 2)
	        {
              SendClientMessage(i, CTC2, "---------------------------------------------------------");
              SendClientMessage(i, CTC1, "You are in the blue team, use /ddchat to chat with your team");
              SendClientMessage(i, CTC1, "Each team will get a new weapon every minute");
              SendClientMessage(i, CTC1, "The team with more points wins the Disco Dodgebomb!");
              SendClientMessage(i, CTC2, "---------------------------------------------------------");
		      DDSETCOLOR(i);
   	          switch(random(3))
              {
                case 0: SetPlayerPosEx(i, -68.3249, 41.0647, 80.4462, 339.3473);
                case 1: SetPlayerPosEx(i, -61.2966, 38.0576, 80.4462, 339.6607);
                case 2: SetPlayerPosEx(i, -51.9823, 35.1130, 80.4462, 341.8541);
         	  }
	        }
		 }
	  }
	}
	return 1;
}

forward StartDDCount();//ddshit
public StartDDCount()
{
  if(DDStartTime > 0)
  {
      new count = DDCount1+DDCount2;
	  DDStartTime--;
      new str[128];
	  format(str, sizeof(str), "~b~Disco Dodgebomb ~g~starts~n~in ~p~%d ~r~seconds", DDStartTime);
	  foreach(new i : Player)
	  {
        if(GetPVarInt(i, "DD"))
	    {
          PlayerTextDrawHide(i, pInfoTD[i]);
		  SendInfoText(i, 1000, str);
		}
	  }
	  if(count ==0)
	  {
	    foreach(new i : Player)
        if(GetPVarInt(i, "DD"))
        {
	      new gang = PlayerInfo[i][pGang];
          if(gang > 0) SetPlayerColor(i, PlayerColors[GangInfo[gang][gColor]]);
          else SetPlayerColor(i, PlayerColors[random(200)] );
   		  Remove_From_DD(i);
   		  EndDD();
          SendClientMessageToAll(CTC1, "{FF00EA}» DD « {9D00FF}Disco Dodgebomb has been cancelled {FF00EA}(Not enough players)");
          DeletePVar(i, "DD");
        }
	  }
  }
  else
  {
	KillTimer(DDStartTimer);
	DDStartTimer=-1;

  }
  return 1;
}
forward DDUpdate();//ddshit
public DDUpdate()
{
	   new count =DDCount1+DDCount2;
	   if(count ==0)
	   {
	     foreach(new i : Player)
	     if(GetPVarInt(i, "DD"))
	     {
		   new gang = PlayerInfo[i][pGang];
           if(gang > 0) SetPlayerColor(i, PlayerColors[GangInfo[gang][gColor]]);
           else SetPlayerColor(i, PlayerColors[random(200)] );
           Remove_From_DD(i);
           EndDD();
           SendClientMessageToAll(CTC1, "{FF00EA}» DD « {9D00FF}Disco Dodgebomb has been cancelled {FF00EA}(Not enough players)");
           DeletePVar(i, "DD");
         }
	   }
	   else
	   {
		 if(DDtime > 0)
		 {
            DDtime--;
            new str[128];
	        foreach(new i : Player)
	        {
              format(str, sizeof(str), "~g~Green Team: ~g~~h~%d", DDGreenScore);
              PlayerTextDrawSetStringEX(i, DMpTD[i][3] , str);

              format(str, sizeof(str), "~b~Blue Team: ~b~~h~%d", DDBlueScore);
              PlayerTextDrawSetStringEX(i, DMpTD[i][4] , str);

              format(str, sizeof(str), "~n~~r~Time: ~y~%s", TimeConvert(DDtime));
              PlayerTextDrawSetStringEX(i, DMpTD[i][1] , str);
            }
	     }
         if(DDtime == 540)
         {
		   foreach(new i : Player)
		   {
	         ResetPlayerWeapons(i);
		     GivePlayerWeapon(i, 34, 9999);
		     new str[128];
		     format(str, sizeof(str), "{FF00EA}» DD « {9D00FF}Both teams have received a new weapon: {FF00EA}Sniper!");
             SendClientMessage(i, -1, str), SendInfoText(i, 3000, "~y~New weapon:~n~~y~Sniper~w~!");
            }
         }
         if(DDtime == 480)
         {
		   foreach(new i : Player)
		   {
		     ResetPlayerWeapons(i);
		     GivePlayerWeapon(i, 27, 9999);
		     new str[128];
		     format(str, sizeof(str), "{FF00EA}» DD « {9D00FF}Both teams have received a new weapon: {FF00EA}Combat Shotgun!");
             SendClientMessage(i, -1, str), SendInfoText(i, 3000, "~y~New weapon:~n~~y~Combat Shotgun~w~!");
           }
         }
         if(DDtime == 420)
         {
		   foreach(new i : Player)
		   {
		     ResetPlayerWeapons(i);
		     GivePlayerWeapon(i, 29, 9999);
		     new str[128];
		     format(str, sizeof(str), "{FF00EA}» DD « {9D00FF}Both teams have received a new weapon: {FF00EA}MP5!");
             SendClientMessage(i, -1, str), SendInfoText(i, 3000, "~y~New weapon:~n~~y~MP5~w~!");
           }
         }
         if(DDtime == 360)
         {
		   foreach(new i : Player)
		   {
		     ResetPlayerWeapons(i);
		     GivePlayerWeapon(i, 30, 9999);
		     new str[128];
		     format(str, sizeof(str), "{FF00EA}» DD « {9D00FF}Both teams have received a new weapon: {FF00EA}AK-47!");
             SendClientMessage(i, -1, str), SendInfoText(i, 3000, "~y~New weapon:~n~~y~AK-47~w~!");
           }
         }
         if(DDtime == 300)
         {
		   foreach(new i : Player)
		   {
		     ResetPlayerWeapons(i);
	         GivePlayerWeapon(i, 31, 9999);
		     new str[128];
	         format(str, sizeof(str), "{FF00EA}» DD « {9D00FF}Both teams have received a new weapon: {FF00EA}M4!");
             SendClientMessage(i, -1, str), SendInfoText(i, 3000, "~w~New weapon:~n~~y~M4~w~!");
           }
         }
         if(DDtime == 240)
         {
		   foreach(new i : Player)
		   {
		     ResetPlayerWeapons(i);
		     GivePlayerWeapon(i, 33, 9999);
             new str[128];
		     format(str, sizeof(str), "{FF00EA}» DD « {9D00FF}Both teams have received a new weapon: {FF00EA}Country Rifle!");
             SendClientMessage(i, -1, str), SendInfoText(i, 3000, "~w~New weapon:~n~~y~Country Rifle~w~!");
           }
         }
         if(DDtime == 180)
         {
		   foreach(new i : Player)
		   {
		     ResetPlayerWeapons(i);
		     GivePlayerWeapon(i, 16, 9999);
		     new str[128];
		     format(str, sizeof(str), "{FF00EA}» DD « {9D00FF}Both teams have received a new weapon: {FF00EA}Grenades!");
             SendClientMessage(i, -1, str), SendInfoText(i, 3000, "~w~New weapon:~n~~y~Grenades~w~!");
           }
         }
         if(DDtime == 120)
         {
		   foreach(new i : Player)
		   {
		     ResetPlayerWeapons(i);
		     GivePlayerWeapon(i, 25, 9999);
		     new str[128];
		     format(str, sizeof(str), "{FF00EA}» DD « {9D00FF}Both teams have received a new weapon: {FF00EA}Shotgun!");
             SendClientMessage(i, -1, str), SendInfoText(i, 3000, "~w~New weapon:~n~~y~Shotgun~w~!");
           }
         }
         if(DDtime == 60)
         {
		   foreach(new i : Player)
		   {
		     ResetPlayerWeapons(i);
		     GivePlayerWeapon(i, 35, 9999);
		     new str[128];
		     format(str, sizeof(str), "{FF00EA}» DD « {9D00FF}Both teams have received a new weapon: {FF00EA}Rocket Launcher!");
             SendClientMessage(i, -1, str), SendInfoText(i, 3000, "~w~New weapon:~n~~y~Rocket Launcher~w~!");
           }
         }
	     if(DDtime <= 0)
         {
			   new str[150];
			   if(DDGreenScore > DDBlueScore)
			   {
					format(str, sizeof(str), "{FF00EA}» DD « {9D00FF}Green Team have won the Disco Dodgebomb {FF00EA}("GREEN_"%d{FF00EA}:"BLUE_"%d{FF00EA})", DDGreenScore, DDBlueScore);
                    SendClientMessageToAll(CTC1, str);
                    foreach(new i : Player)
                    {
				      if(GetPVarInt(i, "DD") == 2)
				      {
                        SendInfoText(i, 5000, "~g~Winners!");
                        ScoreTDupdate(i, 5);
                        Remove_From_DD(i);
                        PlayerInfo[i][DDWins]++;
                        new Query[256];
                        format(Query, sizeof(Query), "UPDATE `users` SET `DDWins` = %d WHERE `UserID` = '%d'", PlayerInfo[i][DDWins], PlayerInfo[i][UserID]);
                        mysql_query(GTADM, Query);
                        if(PlayerInfo[i][DDWins] >= 10) GiveMedal(i, 95);
                        if(EventType==6972 && EventStarted==1)
                        {
                              DD2[i]=1;
		                      new str2[128];
				              if(EventType==6972 && EventStarted==1) EventWinner2(), format(str2, sizeof(str2), "» Event « {CDF590}DD Green Team have won the Event!"), SendClientMessageToAll(0xE8AF02FF, str2);
				              Remove_From_DD(i);
				              EndDD();
						}
                      }
					}
				    foreach(new i : Player) if(GetPVarInt(i, "DD") == 1)
				    {
                      SendInfoText(i, 5000, "~r~Losers!");
                      ScoreTDupdate(i, 1);
                      Remove_From_DD(i);
                      EndDD();
				    }
               }
			   if(DDBlueScore > DDGreenScore)
			   {
 					format(str, sizeof(str), "{FF00EA}» DD « {9D00FF}Blue Team have won the Disco Dodgebomb {FF00EA}("BLUE_"%d{FF00EA}:"GREEN_"%d{FF00EA})", DDBlueScore, DDGreenScore);
                    SendClientMessageToAll(CTC1, str);
                    foreach(new i : Player)
                    {
						 if(GetPVarInt(i, "DD") == 1)
						 {
                           SendInfoText(i, 5000, "~g~Winners!");
                           ScoreTDupdate(i, 5);
                           PlayerInfo[i][DDWins]++;
	                       new Query[256];
	                       format(Query, sizeof(Query), "UPDATE `users` SET `DDWins` = %d WHERE `UserID` = '%d'", PlayerInfo[i][DDWins], PlayerInfo[i][UserID]);
                           mysql_query(GTADM, Query);
                           if(PlayerInfo[i][DDWins] >= 10) GiveMedal(i, 95);
	                       Remove_From_DD(i);
                           EndDD();
                           if(EventType==6972 && EventStarted==1)
                           {
                             DD1[i]=1;
                             new str2[128];
                             if(EventType==6972 && EventStarted==1) EventWinner2(), format(str2, sizeof(str2), "» Event « {CDF590}DD Blue Team have won the Event!"), SendClientMessageToAll(0xE8AF02FF, str2);
                             Remove_From_DD(i);
                             EndDD();
				           }
						 }
						 if(GetPVarInt(i, "DD") == 2)
						 {
                              SendInfoText(i, 5000, "~r~Losers!");
                              Remove_From_DD(i);
                              ScoreTDupdate(i, 1);
                              EndDD();
						 }
                    }

			   }
			   if(DDGreenScore == DDBlueScore && DDBlueScore == DDGreenScore && DD > 0)
			   {
 					format(str, sizeof(str), "{FF00EA}» DD « {9D00FF}Disco Dodgebomb has been finished! (Draw) {FF00EA}("BLUE_"%d{FF00EA}:"GREEN_"%d{FF00EA})", DDBlueScore, DDGreenScore);
                    SendClientMessageToAll(CTC1, str);
                    foreach(new i : Player)
                    {
						 if(GetPVarInt(i, "DD"))
						 {
                              SendInfoText(i, 5000, "~y~Draw!");
                              ScoreTDupdate(i, 1);
                              Remove_From_DD(i);
                              EndDD();
						 }
                    }

			   }
               EndDD();
         }
	   }
       return 1;
}*/
stock CountDrift()
{
	new sst=0;
	foreach(new i : Player)
	{
	   if(GetPVarInt(i, "Drifter"))
	   sst++;
	}
	return sst;
}
stock CountStunt()
{
	new sst=0;
	foreach(new i : Player)
	{
	   if(GetPVarInt(i, "instunt"))
	   sst++;
	}
	return sst;
}
stock CountOutrun()
{
	new sst=0;
	foreach(new i : Player)
	{
	   if(GetPVarInt(i, "InOutRun"))
	   sst++;
	}
	return sst;
}
stock CountFC()
{
	new sst=0;
	foreach(new i : Player)
	{
	   if(GetPVarInt(i, "inflappy"))
	   sst++;
	}
	return sst;
}
stock CountCO()
{
	new sst=0;
	foreach(new i : Player)
	{
	   if(GetPVarInt(i, "CO"))
	   sst++;
	}
	return sst;
}
stock CountTrucking()
{
	new sst=0;
	foreach(new i : Player)
	{
	   if(GetPVarInt(i, "Trucker"))
	   sst++;
	}
	return sst;
}
stock CountTDM1()
{
	new sst=0;
	foreach(new i : Player)
	{
	   if(GetPVarInt(i, "TDM") == 1)
	   sst++;
	}
	return sst;
}
stock CountTDM2()
{
	new sst=0;
	foreach(new i : Player)
	{
	   if(GetPVarInt(i, "TDM") == 2)
	   sst++;
	}
	return sst;
}
stock CountTDM3()
{
	new sst=0;
	foreach(new i : Player)
	{
	   if(GetPVarInt(i, "TDM") == 3)
	   sst++;
	}
	return sst;
}
stock CountTTT()
{
	new sst=0;
	foreach(new i : Player)
	{
	   if(GetPVarInt(i, "InTic"))
	   sst++;
	}
	return sst;
}
stock CountDD()
{
	new sst=0;
	foreach(new i : Player)
	{
	    if(GetPVarInt(i, "DD"))
	    sst++;
	}
	return sst;
}
CMD:ctf(playerid)
{
//-------
	if(lockctf ==1) return 0;
	if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
	if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
	if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
	if(aduty[playerid] == 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command while on admin duty.");
	if(EventStarted > 1 && EventType == 6970) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant join the CTF during an event countdown.");
	if(GetPVarInt(playerid, "MissionProgress") || IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
	if(IsInFight(playerid)) return SendMsg(playerid, 2);
	if(ctf == 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Capture The Flag has already been started");
//-------

    new msg[128];
    format(msg, sizeof(msg), "{00A15E}» CTF « {13D6B2}%s has joined Capture The Flag {00A15E}(/CTF)", pName[playerid]);
    SendClientMessageToAll(-1, msg);
	if(ctf == 0)
	{
        CTF1Score=0;
        CTF2Score=0;
        CTFCount1=0;
        CTFCount2=0;
        FlagCaptured[0]=0, FlagCaptured[1]=0;
        ctf=2;
        Flag1Player=INVALID_PLAYER_ID;
        Flag2Player=INVALID_PLAYER_ID;
		if(IsValidDynamicPickup(ctfflag[0])) DestroyDynamicPickup(ctfflag[0]), ctfflag[0]=-1;
		if(IsValidDynamicPickup(ctfflag[1])) DestroyDynamicPickup(ctfflag[1]), ctfflag[1]=-1;
		if(IsValidDynamicMapIcon(ctfmapicon[0])) DestroyDynamicMapIcon(ctfmapicon[0]), ctfmapicon[0]=-1;
		if(IsValidDynamicMapIcon(ctfmapicon[1])) DestroyDynamicMapIcon(ctfmapicon[1]), ctfmapicon[1]=-1;
		if(IsValidDynamicMapIcon(ctfmapicon[2])) DestroyDynamicMapIcon(ctfmapicon[2]), ctfmapicon[2]=-1;
		if(IsValidDynamicMapIcon(ctfmapicon[3])) DestroyDynamicMapIcon(ctfmapicon[3]), ctfmapicon[3]=-1;

	    if(EventType == 6970 && EventStarted ==1)
	    {
		  CTFstarttime=60;
          SendClientMessageToAll(DERBYCOLOR, "{00A15E}» CTF « {13D6B2}Capture The Flag will start in 60 seconds!");
	      CTFStartTimer = SetTimer("StartCTFCount", 1000, true);
	  	  CTFStartTimer2 = SetTimer("StartCTF", 60000, false);
	  	  SendInfoText2(10000, "Type ~y~/CTF~w~ To join ~g~Capture the flag!");
	    }
	    else
	    {
		  CTFstarttime=30;
          SendClientMessageToAll(DERBYCOLOR, "{00A15E}» CTF « {13D6B2}Capture The Flag will start in 30 seconds!");
	      CTFStartTimer = SetTimer("StartCTFCount", 1000, true);
	  	  CTFStartTimer2 = SetTimer("StartCTF", 30000, false);
	  	  SendInfoText2(4500, "Type ~y~/CTF~w~ To join ~g~Capture the flag!");
	    }
	}
    SavePlayerCoords(playerid);
    new count1=CTFCount1;
    new count2=CTFCount2;
	if(count1 > count2) SetPVarInt(playerid, "inCTF", 2), CTFCount2++;
	else SetPVarInt(playerid, "inCTF", 1), CTFCount1++;
	switch(ctftype)
	{
		/*case 0:
		{
		    SetPlayerCameraPos(playerid, 381.6410, 2483.1909, 41.2920);
			SetPlayerCameraLookAt(playerid, 327.7452, 2502.0586, 28.8686);
			Streamer_UpdateEx(playerid, 327.7452, 2502.0586, 20.8686);
		}
		case 1:
		{
			SetPlayerCameraPos(playerid, -1137.3638, -1785.3163, 173.6264);
			SetPlayerCameraLookAt(playerid, -1136.8153, -1784.4814, 172.9864);
		}
		case 2:
		{
			SetPlayerCameraPos(playerid, 2227.4026, -958.0774, 135.8054);
			SetPlayerCameraLookAt(playerid, 2227.3694, -959.0757, 134.8554);
		}
	}*/
	    case 0:
		{
		    SetPlayerCameraPos(playerid, 2227.4026, -958.0774, 135.8054);
			SetPlayerCameraLookAt(playerid, 2227.3694, -959.0757, 134.8554);
		}
		case 1:
		{
			SetPlayerCameraPos(playerid, 2227.4026, -958.0774, 135.8054);
			SetPlayerCameraLookAt(playerid, 2227.3694, -959.0757, 134.8554);
		}
		case 2:
		{
			SetPlayerCameraPos(playerid, 2227.4026, -958.0774, 135.8054);
			SetPlayerCameraLookAt(playerid, 2227.3694, -959.0757, 134.8554);
		}
	}
    switch(GetPVarInt(playerid, "inCTF"))
	{
		 case 1:
	     {
		   SetPlayerPosEx(playerid, CTF_Team1_Spawn[ctftype][0], CTF_Team1_Spawn[ctftype][1], CTF_Team1_Spawn[ctftype][2], CTF_Team1_Spawn[ctftype][3]);
           Streamer_AppendArrayData(STREAMER_TYPE_CP, ctfcp[0], E_STREAMER_PLAYER_ID, playerid);
           Streamer_AppendArrayData(STREAMER_TYPE_CP, ctfcp[1], E_STREAMER_PLAYER_ID, playerid);
           Streamer_AppendArrayData(STREAMER_TYPE_CP, ctfcp[2], E_STREAMER_PLAYER_ID, playerid);

           Streamer_RemoveArrayData(STREAMER_TYPE_CP, ctfcp[3], E_STREAMER_PLAYER_ID, playerid);
           Streamer_RemoveArrayData(STREAMER_TYPE_CP, ctfcp[4], E_STREAMER_PLAYER_ID, playerid);
           Streamer_RemoveArrayData(STREAMER_TYPE_CP, ctfcp[5], E_STREAMER_PLAYER_ID, playerid);
		 }
		 case 2:
		 {
 		   SetPlayerPosEx(playerid, CTF_Team2_Spawn[ctftype][0], CTF_Team2_Spawn[ctftype][1], CTF_Team2_Spawn[ctftype][2], CTF_Team2_Spawn[ctftype][3]);

           Streamer_AppendArrayData(STREAMER_TYPE_CP, ctfcp[3], E_STREAMER_PLAYER_ID, playerid);
           Streamer_AppendArrayData(STREAMER_TYPE_CP, ctfcp[4], E_STREAMER_PLAYER_ID, playerid);
           Streamer_AppendArrayData(STREAMER_TYPE_CP, ctfcp[5], E_STREAMER_PLAYER_ID, playerid);

           Streamer_RemoveArrayData(STREAMER_TYPE_CP, ctfcp[0], E_STREAMER_PLAYER_ID, playerid);
           Streamer_RemoveArrayData(STREAMER_TYPE_CP, ctfcp[1], E_STREAMER_PLAYER_ID, playerid);
           Streamer_RemoveArrayData(STREAMER_TYPE_CP, ctfcp[2], E_STREAMER_PLAYER_ID, playerid);
		 }
	}
	SetPlayerVirtualWorldEX(playerid, 1777);
	SetPlayerInterior(playerid, 0);
	SetPlayerHealth(playerid, 100);
	SetPlayerArmour(playerid, 0);
	TogglePlayerControllable2(playerid, 0);

	PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][3] , "~b~Blue Team: ~b~~h~-");
	PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][4] , "~g~Green Team: ~g~~h~-");
	PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][7] , "~y~Capture the flag");
	PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][1] , "~n~~r~Time: ~p~04:10");
	PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][5] , "_");
	//TextDrawShowForPlayer(playerid, CTFwaiting);
    DisablePlayerRaceCheckpoint(playerid);
	SetTeleShow(6, 0);
	return 1;
}
CMD:levelhelp(playerid)
{
  if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
  if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
  ShowPlayerDialog(playerid, 5621, DIALOG_STYLE_LIST, "Skill Levels", "{BAFAA2}Combat {8C8C8C}Levels\n{BAFAA2}Fist {8C8C8C}Levels\n{BAFAA2}Hit-Point {8C8C8C}Levels\n{BAFAA2}Justice {8C8C8C}Levels\n{BAFAA2}Medicine {8C8C8C}Levels\n{BAFAA2}Dealing {8C8C8C}Levels\n{BAFAA2}Gangster {8C8C8C}Levels\n{BAFAA2}Driving {8C8C8C}Levels", "Select", "Exit");
  return 1;
}
CMD:al(playerid, params[]) return cmd_adminlogin(playerid, params);
CMD:adminlogin(playerid, params[])
{
	new apass[50];
	new string[128];
	if(PlayerInfo[playerid][pAdmin] > 0) return SendWarning(playerid, "{BABABA}You are already logged in as admin");
	if(p_A_Level[playerid] == 0) return SendWarning(playerid, "{BABABA}You dont have admin rights!");
    if(sscanf(params, "s[50]", apass)) return SendWarning(playerid, "{BABABA}Usage /adminlogin <Your Admin Password>");
	if(strcmp(apass, AdminPass[playerid]))
	{
	    SendWarning(playerid, "{BABABA}Wrong password entered!");
        printf("-Failed- Admin login by %s, using password: %s", pName[playerid], apass);

		format(string, sizeof(string), "» Failed Admin Login attempt « {AA8202}%s (%d) has failed to login as admin level %d", pName[playerid], playerid, p_A_Level[playerid]);
		foreach (new i : Player) if(IsAdmin(i, 1) && !GetPVarInt(playerid, "HideMeBitch")) SendClientMessage(i, ORANGE, string);
	}
	else
	{
	#if defined useirc
		IRC_OnAdminLogin(playerid, 1);//irc
		#endif
		format(string, sizeof(string), "» Admin Logged In « {AA8202}%s (%d) has logged in as Admin Level %d", pName[playerid], playerid, p_A_Level[playerid]);
		foreach (new i : Player) if(IsAdmin(i, 1) && !GetPVarInt(playerid, "HideMeBitch")) SendClientMessage(i, ORANGE, string);

		PlayerInfo[playerid][pAdmin] = p_A_Level[playerid];
		new str[128];
		format(str, sizeof(str), "-{1B91E0} You have successfully logged in as Admin {E01B98} Level %d", PlayerInfo[playerid][pAdmin]);
		SendClientMessage(playerid, -1, str);
//		SendClientMessage(playerid, -1, "-{1B91E0} Make sure that you change your admin password so frequently using {E01B98}/SetAdminPassword.");
	}
    return 1;
}
CMD:setadminpassword(playerid, params[])
{
	new apass[50];
	new newpass[50];
	if(PlayerInfo[playerid][pAdmin] == 0) return SendWarning(playerid, "{BABABA}You must be logged in as admin to use this command");
    if(sscanf(params, "s[50]s[50]", apass, newpass)) return SendWarning(playerid, "{BABABA}Usage /setadminpassword <Old Password> <New Password>");
	if(strcmp(apass, AdminPass[playerid])) return SendWarning(playerid, "{BABABA}Current password doesnt match!");


	new str[128];
    format(str, sizeof(str), "UPDATE `users` Set `AdminPass` = '%s' WHERE `UserID` = '%d'", Escape_String(newpass), PlayerInfo[playerid][UserID]);
    mysql_query(GTADM, str);

	SendClientMessage(playerid, -1, "-{1B91E0} You have successfully changed your admin password!");
	format(AdminPass[playerid], 50, "%s", newpass);
	return 1;
}

CMD:asetadminpassword(playerid, params[])
{
	new newpass[50];
    if(!IsAdmin(playerid, 10)) return SendMsg(playerid, 5);
	new acc[30];
    if(sscanf(params, "s[30]s[50]", acc, newpass)) return SendWarning(playerid, "{BABABA}Usage /asetadminpassword <account> <new pass>");
	new string[256];
    format(string, sizeof(string), "SELECT `Password` FROM `users` WHERE `Name` = '%s'", Escape_Name(acc));
    mysql_tquery(GTADM, string, "aSetDoDPass", "dss", playerid, acc, newpass);
 	return 1;
}

forward aSetDoDPass(playerid, acc[], new_pass[]);
public aSetDoDPass(playerid, acc[], new_pass[])
{
	   new string[256];
       new rows, fields;
       cache_get_row_count(rows);
       cache_get_field_count(fields);
	   if(rows > 0)
	   {
          format(string, sizeof(string), "UPDATE `users` SET `AdminPass` = '%s' WHERE `Name` = '%s'", Escape_String(new_pass), Escape_Name(acc));
   	      mysql_query(GTADM, string);
   	      format(string, sizeof(string), "{00904C} » Account settings «{00D9AD} You have set a new admin password for %s's account", acc);
          SendClientMessage(playerid, AdminInfo, string);
	   }
	   else
	   {
         SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This account doesnt exist");
	   }
	   return 1;
}



CMD:respawnpowerups(playerid)
{
     if(!IsAdmin(playerid, 5)) return SendMsg(playerid, 5);
	 new str[128];
	 format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}Admin %s has respawned the Power-Ups", gAname(playerid));
	 SendClientMessageToAll(AdminInfo, str);

     respawnpower();
	 return 1;
}
stock respawnpower()
{
	 if(!IsPlayerConnected(PowerUpPlayer[0]) || IsPlayerNPC(PowerUpPlayer[0]))
	 {
		 if(IsValidDynamicPickup(PowerUpPickup[0])) DestroyDynamicPickup(PowerUpPickup[0]);
	     PowerUpPickup[0]=CreateDynamicPickup(1241, 23, -2511.0571, 775.0422, 35.1719, 0);

	 }
	 if(!IsPlayerConnected(PowerUpPlayer[1]) || IsPlayerNPC(PowerUpPlayer[1]))
	 {
		 if(IsValidDynamicPickup(PowerUpPickup[1])) DestroyDynamicPickup(PowerUpPickup[1]);
	     PowerUpPickup[1]=CreateDynamicPickup(1241, 23, 2062.4978, -1785.6956, 13.5469, 0);

	 }
	 if(!IsPlayerConnected(PowerUpPlayer[2]) || IsPlayerNPC(PowerUpPlayer[2]))
	 {
		 if(IsValidDynamicPickup(PowerUpPickup[2])) DestroyDynamicPickup(PowerUpPickup[2]);
         PowerUpPickup[2]=CreateDynamicPickup(1241, 23, -852.6091, 1877.5527, 22.9245, 0);

	 }
	 if(!IsPlayerConnected(PowerUpPlayer[3]) || IsPlayerNPC(PowerUpPlayer[3]))
	 {
		 if(IsValidDynamicPickup(PowerUpPickup[3])) DestroyDynamicPickup(PowerUpPickup[3]);
         PowerUpPickup[3]=CreateDynamicPickup(1241, 23, 2089.0635, 2405.9089, 74.5786, 0);

	 }
	 if(!IsPlayerConnected(PowerUpPlayer[4]) || IsPlayerNPC(PowerUpPlayer[4]))
	 {
		 if(IsValidDynamicPickup(PowerUpPickup[4])) DestroyDynamicPickup(PowerUpPickup[4]);
         PowerUpPickup[4]=CreateDynamicPickup(1241, 23, -2473.6848, 1549.7599, 33.2273, 0);

	 }
     /*if(!IsPlayerConnected(PowerUpPlayer[5]) || IsPlayerNPC(PowerUpPlayer[5]))
	 {
		 if(IsValidDynamicPickup(PowerUpPickup[5])) DestroyDynamicPickup(PowerUpPickup[5]);
         PowerUpPickup[5]=CreateDynamicPickup(1241, 23, 2162.3809, -102.6472, 2.7500, 0);

	 }*/

}
CMD:powerup(playerid)
{
	 new str[128];
	 new strName[30];
	 new strName2[30];
	 new strName3[30];
	 new strName4[30];
	 new strName5[30];
	 //new strName6[30];
	 if(IsPlayerConnected(PowerUpPlayer[0]) && !IsPlayerNPC(PowerUpPlayer[0])) format(strName, sizeof(strName), "%s", pName[PowerUpPlayer[0]]);
	 else  format(strName, sizeof(strName), "None");
	 if(IsPlayerConnected(PowerUpPlayer[1]) && !IsPlayerNPC(PowerUpPlayer[1])) format(strName2, sizeof(strName2), "%s", pName[PowerUpPlayer[1]]);
	 else  format(strName2, sizeof(strName2), "None");
	 if(IsPlayerConnected(PowerUpPlayer[2]) && !IsPlayerNPC(PowerUpPlayer[2])) format(strName3, sizeof(strName3), "%s", pName[PowerUpPlayer[2]]);
	 else  format(strName3, sizeof(strName3), "None");
	 if(IsPlayerConnected(PowerUpPlayer[3]) && !IsPlayerNPC(PowerUpPlayer[3])) format(strName4, sizeof(strName4), "%s", pName[PowerUpPlayer[3]]);
	 else  format(strName4, sizeof(strName4), "None");
	 if(IsPlayerConnected(PowerUpPlayer[4]) && !IsPlayerNPC(PowerUpPlayer[4])) format(strName5, sizeof(strName5), "%s", pName[PowerUpPlayer[4]]);
	 else  format(strName5, sizeof(strName5), "None");
	// if(IsPlayerConnected(PowerUpPlayer[5]) && !IsPlayerNPC(PowerUpPlayer[5])) format(strName6, sizeof(strName6), "%s", pName[PowerUpPlayer[5]]);
	 //else  format(strName6, sizeof(strName6), "None");
	 format(str, sizeof(str), "Double Score - %s\nSuper Export - %s\nKangaroo - %s\nSuper Nitro - %s\nPro Gangster - %s", strName, strName2, strName3, strName4, strName5);
	 ShowPlayerDialog(playerid, 6494, DIALOG_STYLE_MSGBOX, "Power-Ups", str, "Ok", "");
	 return 1;
}
CMD:tictac(playerid, params[])
{
    if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
    new id, str[144];
	if (sscanf(params, "u", id)) return SendWarning(playerid, "/tictac <playerid>");
	if(id == playerid)  return SendWarning(playerid, "{BABABA}You cant play Tic-Tac-Toe with yourself!");
	if(IsPlayerNPC(id))  return SendWarning(playerid, "{BABABA}You cant play Tic-Tac-Toe with an NPC bot!");
	format(str, sizeof(str), "{A62CF2}» TTT «{492CF2} %s is challenging you in a Tic-Tac-Toe game! Type (/Accept) to play against him!", pName[playerid]);
	SendClientMessage(id, -1, str);
	SendClientMessage(playerid, -1, "{A62CF2}» TTT «{492CF2} Invitation sent" );
	SetPVarInt(id, "TikInvited", true);
	SetPVarInt(id, "TikChallenge", playerid);
	return 1;
}
CMD:accept(playerid)
{
    new str[144];
    if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
    if(!GetPVarInt(playerid, "TikInvited")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You have not been invited for a Tic-Tac-Toe challenge!" );
	new a=GetPVarInt(playerid, "TikChallenge");
	format(str, sizeof(str), "{A62CF2}» TTT «{492CF2} %s is playing Tic-Tac-Toe against %s", pName[playerid], pName[a]);
	SendClientMessageToAll(-1, str);
	starttictac(playerid, a);
	DeletePVar(playerid, "TikChallenge");
	DeletePVar(playerid, "TikInvited");
	SetPVarInt(playerid, "InTic", true);
	SetPVarInt(a, "InTic", true);
	TickCount[playerid][TTTJoin]=GetTickCount();
	TickCount[a][TTTJoin]=GetTickCount();
	return 1;
}

CMD:moneygame(playerid)
{
    if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");
    if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(GetPVarInt(playerid, "MissionProgress") || IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
    if(IsInFight(playerid)) return SendMsg(playerid, 2);
    if(aduty[playerid] == 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command while on admin duty.");
	if(mgstarted == 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}The money game has already been started!");
    if(EventStarted > 1 && EventType == 2429) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant join the Money Game during an event countdown.");

    SavePlayerCoords(playerid);
	ResetPlayerWeaponsEX(playerid);
    SetPVarInt(playerid, "InMG", true);
    new msg[128];
    format(msg, sizeof(msg), "{8F6FA8}» Money Game «{6E8CC4} %s has joined the Money Game {8F6FA8}(/MG)", pName[playerid]);
	SendClientMessageToAll(0xF86EFFFF, msg);
	if(mgstarted==0)
	{
		for( new i=0; i < mgslots; i++ )
	    {
			mgObjects_[i] = CreateDynamicObject( 1697, mgCoords[i][0], mgCoords[i][1], mgCoords[i][2], 31.7999268, 0.0000000, 90.0000000, 14567 );
			switch(random(3))
			{
				case 0: Iter_Add(mgiter, i );
				case 1: Iter_Add(mgiter2, i );
				case 2: Iter_Add(mgiter3, i );
			}
	    }
	    if(EventType==2429 && EventStarted == 1)
		{
          MgStartTime=20;
		  mgstarted=2;
          mgtimer = SetTimer("StartMGCount", 1000, true);
	      mgtimer2 = SetTimer("StartMG", 20000, false);

		}
		else
		{
          MgStartTime=20;
		  mgstarted=2;
          mgtimer = SetTimer("StartMGCount", 1000, true);
	      mgtimer2 = SetTimer("StartMG", 20000, false);
		}
        /*MgStartTime=20;
		mgstarted=2;
        mgtimer = SetTimer("StartMGCount", 1000, true);
	    mgtimer2 = SetTimer("StartMG", 20000, false);*/
	    if(EventStarted == 0) SendInfoText2(4500, "Type ~g~/MG~w~ To join the ~p~money game~w~!");
	    MoveDynamicObject(mggate, 2787.1000977, -2680.1999512, 205.3000031, 5.0);

	}
	SetPlayerVirtualWorldEX(playerid, 14567);
	switch(random(3))
	{
	  case 0: SetPlayerPosEx(playerid, 2807.1082, -2674.0049, 204.5200, 100.9919);
	  case 1: SetPlayerPosEx(playerid, 2808.5535, -2680.4304, 204.5200, 90.0251);
	  case 2: SetPlayerPosEx(playerid, 2806.5286, -2689.2800, 204.5200, 62.1382);
	}
	SetCameraBehindPlayer(playerid);
	TogglePlayerControllable2(playerid, 0);
    ssTimer[playerid]=SetTimerEx("WarningUnfreeze", 2000, false, "id", playerid, GetPlayerVirtualWorld(playerid));
    SetTeleShow(5, 0);
	return 1;
}


stock GameText(playerid, textgame[])
{
	foreach(new i : Player)
	{
	   if(i!= playerid && Spawned[playerid] == 1)
	   {
 		GameTextForPlayer(i, textgame, 4500, 5);
	   }
	}
}
CMD:hay(playerid)
{
    if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");
    if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(GetPVarInt(playerid, "MissionProgress") || IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
    if(IsInFight(playerid)) return SendMsg(playerid, 2);
    if(aduty[playerid] == 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command while on admin duty.");
	if(haygamestarted == 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}The Hay Game has already been started!");
    if(EventStarted > 1 && EventType == 200) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant join the Hay Game during an event countdown.");
    SavePlayerCoords(playerid);
	ResetPlayerWeaponsEX(playerid);
    SetPVarInt(playerid, "InHay", true);
    new msg[128];
    format(msg, sizeof(msg), "» Hay Game « {FF6EC0}%s has joined the Hay Game {F86EFF}(/Hay)", pName[playerid]);
	SendClientMessageToAll(0xF86EFFFF, msg);
	if(haygamestarted==0)
	{
        HayMap=random(3);

		SetDynamicObjectPos(MovingHay[0], -1033.86, 814.61, 78.30);
		SetDynamicObjectPos(MovingHay[1], -1045.85, 793.62, 78.92);
		SetDynamicObjectPos(MovingHay[2], -1052.32, 762.79, 93.84);
		SetDynamicObjectPos(MovingHay[3], -1052.39, 758.44, 93.84);
		SetDynamicObjectPos(MovingHay[4], -1052.40, 754.13, 93.84);
		SetDynamicObjectPos(MovingHay[5], -1052.40, 749.92, 93.84);
		SetDynamicObjectPos(MovingHay[6], -1052.35, 745.61, 93.84);
		SetDynamicObjectPos(MovingHay[7], -1007.35, 817.99, 99.92);
		SetDynamicObjectPos(MovingHay[8], -962.32, 769.81, 116.86);
		SetDynamicObjectPos(MovingHay[9], -959.72, 766.75, 116.86);
		SetDynamicObjectPos(MovingHay[10], -957.19, 763.71, 116.86);
		SetDynamicObjectPos(MovingHay[11], -954.64, 760.64, 116.86);
		SetDynamicObjectPos(MovingHay[12], -952.08, 757.49, 116.86);


		SetDynamicObjectPos(MovingHay2[18], -380.20999, 618.88000, 1002.75000);
		SetDynamicObjectPos(MovingHay2[0], -349.70880, 598.71619, 999.60822);
		SetDynamicObjectPos(MovingHay2[1], -349.70880, 593.71619, 1001.10822);
		SetDynamicObjectPos(MovingHay2[2], -349.70880, 588.71619, 1002.10822);
		SetDynamicObjectPos(MovingHay2[3], -349.70880, 570.71619, 992.60822);
		SetDynamicObjectPos(MovingHay2[4], -349.7751, 562.6813, 992.6082);
		SetDynamicObjectPos(MovingHay2[5], -349.6755, 539.5939, 992.6082);
		SetDynamicObjectPos(MovingHay2[6], -373.20880, 514.71619, 987.10822);
		SetDynamicObjectPos(MovingHay2[7], -379.20880, 514.71619, 987.10822);
		SetDynamicObjectPos(MovingHay2[8], -443.13879, 522.71619, 975.69818);
		SetDynamicObjectPos(MovingHay2[9], -443.13879, 527.71619, 975.69818);
		SetDynamicObjectPos(MovingHay2[10], -443.13879, 532.71619, 975.69818);
		SetDynamicObjectPos(MovingHay2[11], -443.13879, 537.71619, 975.69818);
		SetDynamicObjectPos(MovingHay2[12], -443.13879, 542.71619, 975.69818);
		SetDynamicObjectPos(MovingHay2[13], -392.13879, 547.71619, 977.69818);
		SetDynamicObjectPos(MovingHay2[14], -400.13879, 547.71619, 977.69818);
		SetDynamicObjectPos(MovingHay2[15], -404.13879, 543.71619, 977.69818);
		SetDynamicObjectPos(MovingHay2[16], -396.13879, 543.71619, 977.69818);
		SetDynamicObjectPos(MovingHay2[17], -388.13879, 543.71619, 977.69818);

		//Rotate x
		SetDynamicObjectPos(MovingHay3[0], 311.14001, -1198.16003, 1037.00000);
		SetDynamicObjectPos(MovingHay3[1], 306.14001, -1198.16003, 1037.00000);
		SetDynamicObjectPos(MovingHay3[2], 301.14001, -1198.16003, 1037.00000);
		SetDynamicObjectPos(MovingHay3[3], 296.14001, -1198.16003, 1037.00000);
		//

		SetDynamicObjectPos(MovingHay3[4], 266.14001, -1347.16003, 1048.00000);//Rotate x
		SetDynamicObjectPos(MovingHay3[5], 270.14001, -1347.16003, 1048.00000);//
		SetDynamicObjectPos(MovingHay3[6], 262.14001, -1347.16003, 1048.00000);//
		SetDynamicObjectPos(MovingHay3[7], 266.14001, -1351.16003, 1048.00000);//
		SetDynamicObjectPos(MovingHay3[8], 270.14001, -1351.16003, 1048.00000);//
		SetDynamicObjectPos(MovingHay3[9], 262.14001, -1351.16003, 1048.00000);//



		SetDynamicObjectPos(MovingHay3[10], 266.14001, -1259.16003, 1050.50000);//To Z -10
		SetDynamicObjectPos(MovingHay3[11], 266.14001, -1272.16003, 1047.8600);//To Y  -1267.263
		SetDynamicObjectPos(MovingHay3[12], 266.14001, -1283.16003, 1054.5000);//TO Z 1048.5000


		SetDynamicObjectPos(MovingHay3[13], 315.42001, -1185.25000, 1002.78003);//sz
		SetDynamicObjectRot(MovingHay3[13], 0.00000, 0.00000, 0.0);//sz


		if(EventType==200 && EventStarted == 1)
		{
	        HayStartTime=60;
			haygamestarted=2;
	        haygametimer = SetTimer("StartHayCount", 1000, true);
		    haygametimer2 = SetTimer("StartHay", 60000, false);

		}
		else
		{
	        HayStartTime=30;
			haygamestarted=2;
	        haygametimer = SetTimer("StartHayCount", 1000, true);
		    haygametimer2 = SetTimer("StartHay", 30000, false);
		}
	    if(EventStarted == 0) SendInfoText2(4500, "Type ~g~/Hay~w~ To join the ~p~hay game~w~!");
	}
	SetPlayerVirtualWorldEX(playerid, 14567);
	if(HayMap == 0)
	{
		switch(random(5))
		{
		  case 0: SetPlayerPosEx(playerid, -1042.5647, 826.9340, 78.7012, 214.1063);
		  case 1: SetPlayerPosEx(playerid, -1027.9985, 828.2545, 78.7012, 152.0657);
		  case 2: SetPlayerPosEx(playerid, -1026.8429, 822.4442, 78.7012, 127.6255);
		  case 3: SetPlayerPosEx(playerid, -1042.9984, 821.7470, 78.7012, 232.9065);
		  case 4: SetPlayerPosEx(playerid, -1034.2504, 823.4352, 78.7012, 180.8927);
		}
	}
	else if(HayMap == 1)
	{
		switch(random(5))
		{
		  case 0: SetPlayerPosEx(playerid, -370.9140, 631.6196, 1002.5230, 180.0);
		  case 1: SetPlayerPosEx(playerid, -375.8259, 631.9802, 1002.5230, 180.0);
		  case 2: SetPlayerPosEx(playerid, -380.1463, 631.8981, 1002.5230, 180.0);
		  case 3: SetPlayerPosEx(playerid, -384.2529, 631.9648, 1002.5230, 180.0);
		  case 4: SetPlayerPosEx(playerid, -389.2797, 632.0291, 1002.5230, 180.0);
		}
	}
	else if(HayMap == 2)
	{
   	 	switch(random(5))
		{
		  case 0: SetPlayerPosEx(playerid, 305.2565, -1172.7833, 1000.9445, 180.0);
		  case 1: SetPlayerPosEx(playerid, 310.4642, -1172.6842, 1000.9445, 180.0);
		  case 2: SetPlayerPosEx(playerid, 316.2276, -1172.7056, 1000.9445, 180.0);
		  case 3: SetPlayerPosEx(playerid, 321.9265, -1172.3250, 1000.9445, 180.0);
		  case 4: SetPlayerPosEx(playerid, 327.7282, -1172.6343, 1000.9445, 180.0);
		}
	}

	SetCameraBehindPlayer(playerid);
	TogglePlayerControllable2(playerid, 0);
    ssTimer[playerid]=SetTimerEx("StuntUnfreeze", 2000, false, "i", playerid);
    SetTeleShow(5, 0);
	return 1;
}
CMD:hidescreen(playerid)
{
  if(!IsAdmin(playerid, 1)) return 0;
  if((GetPVarInt(playerid, "LOGGED")) == 2) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be registered/logged in to use this command");
  new str[256];
  if(HideShit[playerid] == 1)
  {
     HideShit[playerid]=0;
     format(str, sizeof(str), "UPDATE `users` SET `HideShit` = 0 WHERE `UserID` = '%d'", PlayerInfo[playerid][UserID]);
	 mysql_query(GTADM, str);
	 SendClientMessage(playerid, -1, "- You have turned the screen TXDs ON , changes will take effect after your next respawn");
  }
  else
  {
     HideShit[playerid]=1;
     format(str, sizeof(str), "UPDATE `users` SET `HideShit` = 1 WHERE `UserID` = '%d'", PlayerInfo[playerid][UserID]);
	 mysql_query(GTADM, str);
	 SendClientMessage(playerid, -1, "- You have turned the screen TXDs OFF , changes will take effect after your next respawn");
  }
  return 1;
}
CMD:properties(playerid, params[])
{
    new id, p=GetPropPages()+1;
    new str[128];
    format(str, sizeof(str), ""RED_"» Error « {BABABA} /properties <1-%d>", p);
	if (sscanf(params, "d", id)) return SendClientMessage(playerid, RED, str);
	if(id > p || id < 1)  return SendClientMessage(playerid, RED, str);
	new b=7*(id-1);
	SendClientMessage(playerid, -1, "{FFC307}» {AA8202}Properties {FFC307}«");
	new count;
	for(new x=b; x<MAX_PROPS; x++)
	{
	   if(pInfo[x][ID] >= 0 && pInfo[x][Earnings] > 0 && strlen(pInfo[x][Name]) > 0)
	   {
	       count++;
	       if(count < 8)
	       {
		     format(str, sizeof(str), "{AA8202}#%d - {FFC307}%s - %s", x, pInfo[x][Name], pInfo[x][Owner]);
		     SendClientMessage(playerid, -1, str);
		   }
	   }
	}
	return 1;
}

stock GetPropPages()
{
	new count;
	for(new x=0; x<MAX_PROPS; x++)
	{
		if(pInfo[x][ID] >= 0 && pInfo[x][Earnings] > 0 && strlen(pInfo[x][Name]) > 0)
		{
		   count++;
		}
	}
	return floatround(count/7, floatround_ceil);
}

CMD:pickup(playerid)
{
	 if(OnPhone[playerid] != 3) return SendClientMessage(playerid, -1, "{71A839}» Phone «{66CC00} No one is calling you");
     HoldPhone(playerid);
	 StopAudioStreamForPlayer(playerid);
	 SendClientMessage(playerid, -1, "{71A839}» Phone «{66CC00} You have answered the phone call, Use '?' before your text to talk in phone!");
	 SendClientMessage(CallID[playerid], -1, "{71A839}» Phone «{66CC00} Your call has been answered, Use '?' before your text to talk in phone!");
	 SendClientMessage(playerid, GRAY, "- Press ~k~~SNEAK_ABOUT~ to hangup!");
	 SendClientMessage(CallID[playerid], GRAY, "- Press ~k~~SNEAK_ABOUT~ to hangup!");
	 OnPhone[CallID[playerid]]=1;
	 OnPhone[playerid]=1;
     GiveMedal(CallID[playerid], 59);
	 PlayerPlaySound(CallID[playerid], 16001, 0, 0, 0);
	 return 1;
}
CMD:reject(playerid)
{
	 if(OnPhone[playerid] != 3) return SendClientMessage(playerid, -1, "{71A839}» Phone «{66CC00} No one is calling you");
	 StopAudioStreamForPlayer(playerid);
	 SendClientMessage(playerid, -1, "{71A839}» Phone «{66CC00} You have rejected the phone call!");
	 SendClientMessage(CallID[playerid], -1, "{71A839}» Phone «{66CC00} Your call has been rejected!");
     SetPlayerSpecialAction(CallID[playerid], SPECIAL_ACTION_STOPUSECELLPHONE);
	 OnPhone[CallID[playerid]]=-1;
	 OnPhone[playerid]=-1;
	 CallID[CallID[playerid]]=-1;
	 CallID[playerid]=-1;
	 RemovePlayerAttachedObject(CallID[playerid], 4);
	 return 1;
}

CMD:addphonecontact(playerid, params[])
{
	  if(pPhone[playerid] == 0)  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}you dont own a phone!");
      if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
      new contact[12], contactid[20];
      if(sscanf(params, "s[12]s[20]", contact, contactid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA} /AddPhoneContact "GRAY_"<Name> <Number>");
	  if(!IsValidChars(contact)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You have typed invalid characters");
	  if(!IsValidChars(contactid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You have typed invalid characters");

	  if(strlen(contactid) > 9 || strlen(contactid) < 9) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Phone ID must consist of 9 numbers");
	  if(strlen(contact) > 12) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Contact Name must be shorter than 12 characters");
	  if(strlen(contact) < 3) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Contact Name must be longer than 2 characters");
	  new contactadd=-1;
	  for(new x=0; x<7; x++)
	  {
		  if(strlen(ContactID[playerid][x]) < 4)
		  {
			  contactadd=x;
			  break;
		  }
	  }
	  if(contactadd < 0) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Your phone memory is full , delete some phone contacts to be able to add a new one.");
	  else
	  {
			format(ContactID[playerid][contactadd], 10, "%s", contactid);
			format(ContactName[playerid][contactadd], 12, "%s", contact);
		    new str[256];
	        format(str, sizeof(str), "UPDATE `users` SET  `Contact%d` =  '%s|%s' WHERE  `UserID` =%d", contactadd+1, contactid, contact, PlayerInfo[playerid][UserID]);
	        mysql_query(GTADM, str);
       	    SendClientMessage(playerid, -1, "{71A839}» Phone «{66CC00} Phone Contact Added!");
	  }

	  return 1;
}
CMD:myphonenumber(playerid)
{
    if(pPhone[playerid] == 0)  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}you dont own a phone!");
	new str[128];
	format(str, sizeof(str), "{71A839}» Phone «{66CC00} Your phone number is : %s", GetPhoneNumber(playerid));
	SendClientMessage(playerid, -1, str);
	return 1;
}
CMD:deletephonecontact(playerid, params[])
{
	  if(pPhone[playerid] == 0)  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}you dont own a phone!");
      if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
      new contact[50];
      if(sscanf(params, "s[20]", contact)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA} /DeletePhoneContact "GRAY_"<Name>");
	  new contactadd=-1;
	  for(new x=0; x<7; x++)
	  {
		  if(strcmp(ContactName[playerid][x], contact) == 0)
		  {
			  contactadd=x;
		  }
	  }
	  if(contactadd < 0) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Contact doesnt exist");
	  else
	  {
			ContactID[playerid][contactadd]="No";
			ContactName[playerid][contactadd]="No";
			new str[256];
			format(str, sizeof(str), "UPDATE `users` SET  `Contact%d` =  'No' WHERE  `UserID` =%d", contactadd, PlayerInfo[playerid][UserID]);
			mysql_query(GTADM, str);
       	    SendClientMessage(playerid, -1, "{71A839}» Phone «{66CC00} Phone Contact Deleted!");
	  }
	  return 1;
}

CMD:phone(playerid)
{
  if(pPhone[playerid] == 0)  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}you dont own a phone!");
  ShowMobileScreen(playerid, 0);
  SendClientMessage(playerid, GRAY, "- Press ESC to hide the phone");
  if(PhoneOff[playerid]==1)
  {
	   SendClientMessage(playerid, -1, "{71A839}» Phone «{66CC00} Your phone has been turned ON!");
	   PhoneOff[playerid]=0;
  }
  return 1;
}
CMD:phonecmds(playerid)
{
  new str2[300], str[800];
  format(str2, sizeof(str2), ""GREENBLUE_"Your Phone Number is {FFFFFF}%s\n\n"LIGHTYELLOW_"Available Commands:\n"LIGHTYELLOW_"/Phone -{FFFFFF} to withdraw your phone\n"LIGHTYELLOW_"/AddPhoneContact - {FFFFFF}To save a contact in your phone", GetPhoneNumber(playerid));
  format(str, sizeof(str), "%s\n"LIGHTYELLOW_"/DeletePhoneContact - {FFFFFF}To remove your saved contacts\n"LIGHTYELLOW_"/MyPhoneNumber - {FFFFFF}To show your phone number\n"LIGHTYELLOW_"/Pickup - {FFFFFF}To answer a phone call\n"LIGHTYELLOW_"/Reject - {FFFFFF}To reject a phone call\n"LIGHTYELLOW_"Press ALT (Walk Key) During a phone call to hang up", str2);
  ShowPlayerDialog(playerid, 5421, DIALOG_STYLE_MSGBOX, "Phone commands", str, "Ok", "");
  return 1;
}
//Outrun
CMD:outrun(playerid, params[])
{
	new id, bit, Float:pos[3];
    if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
	if (sscanf(params, "ud", id, bit)) return SendWarning(playerid, "/challenge <playerid> <bet>");
	if(GetPlayerState(playerid) != 2)  return SendWarning(playerid, "You must be driving a vehicle to use this command!");
	if(aduty[playerid] == 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command while on admin duty.");
    if(GetPlayerMoneyEx(playerid) < bit || bit < 1) return SendWarning(playerid, "You don't have this amount of money!");
	if(id == INVALID_PLAYER_ID || id == playerid)  return SendWarning(playerid, "Invalid player ID!");
	GetPlayerPos(id, pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 15.0, pos[0], pos[1], pos[2]))  return SendWarning(playerid, "This player is too far away from you!");
	if(GetPlayerState(id) != 2)  return SendWarning(playerid, "This player is not driving a vehicle!");
	if(IsDeathMatcher(id))  return SendWarning(playerid, "This player is currently not available for the challenge!");
    if(GetPlayerMoneyEx(id) < bit) return SendWarning(playerid, "Your  opponent doesnt have this amount of money!");
	new str[256];
	format(str, sizeof(str), "{AD8484} » Outrun «{919191} %s is challenging you in the outrun race for {84A383}$%d.", pName[playerid], bit);
 	SendClientMessage(id, -1, str);
 	SendClientMessage(id, -1, "{AD8484} » Outrun «{919191} Type {AD8484}(/Challenge){919191} to accept this challenge!");
 	SendClientMessage(playerid, -1, "{AD8484} » Outrun «{919191} Outrun challenge sent!");
 	SetPVarInt(playerid, "OutRun_vs", id);
 	SetPVarInt(id, "OutRun_vs", playerid);
 	SetPVarInt(id, "OutRun_Invited", true);
 	SetPVarInt(id, "OutRun_Money", bit);
 	SetPVarInt(playerid, "OutRun_Money", bit);
    //SendClientMessage( playerid, RED, ""RED_"» Error « {BABABA}This is being fixed!" );
 	return 1;
}

CMD:challenge(playerid, params[])
{
	if(!GetPVarInt(playerid, "OutRun_Invited"))  SendWarning(playerid, "No one has sent you a Challenge!");
	if(GetPlayerState(playerid) != 2)  return SendWarning(playerid, "You must be driving a vehicle to use this command!");
	new id=GetPVarInt(playerid, "OutRun_vs");
	new money=GetPVarInt(playerid, "OutRun_Money");
	new Float:pos[3];
	GetPlayerPos(id, pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 15.0, pos[0], pos[1], pos[2]))  return SendWarning(playerid, "This player is too far away from you!");
	if(GetPlayerState(id) != 2)  return SendWarning(playerid, "Your opponent is not driving a vehicle!");
	if(aduty[playerid] == 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command while on admin duty.");


	GivePlayerMoneyEX(playerid, money*-1);
	GivePlayerMoneyEX(id, money*-1);

	SetPVarInt(playerid, "InOutRun", true);
	SetPVarInt(id, "InOutRun", true);

//	GameTextForPlayer(id, "~y~Challenge Accepted~n~Get Ready to run!", 2000, 4);
    SendInfoText(id, 2000, "~y~Challenge Accepted~n~Get Ready to run!");
	//GameTextForPlayer(playerid, "~y~Get Ready to follow your opponent!", 2000, 4);
	SendInfoText(playerid, 2000, "~y~Get Ready to follow your opponent!");
	new shits[256];
	format(shits, sizeof(shits), "{AD8484} » Outrun «{919191} %s is playing in the outrun challenge against %s {AD8484}(Bet: $%d) {919191}(/Outrun)", pName[playerid], pName[id], money);
	SendClientMessageToAll(-1, shits);
	SetCameraBehindPlayer(playerid);
	SetCameraBehindPlayer(id);
	TogglePlayerControllable(id, 0);
	TogglePlayerControllable(playerid, 0);
	SetTimerEx("StartOutRun", 2500, false, "ii", playerid, id);

	new Float:X, Float:Y, Float:Z, Float:VZ;
	GetVehiclePos(GetPlayerVehicleID(id), X, Y, Z);
	GetXYInFrontOfPlayer(id, X, Y, -8.0);
	SetVehiclePos(GetPlayerVehicleID(playerid), X, Y, Z+0.2);
	GetVehicleZAngle(GetPlayerVehicleID(id), VZ);
	SetVehicleZAngle(GetPlayerVehicleID(playerid), VZ);

    //SendClientMessage( playerid, RED, ""RED_"» Error « {BABABA}This is being fixed!" );

 	return 1;
}

//
CMD:endevent(playerid)
{
    if(!IsAdmin(playerid, 5) && PlayerInfo[playerid][UserID] != 153569) return SendMsg(playerid, 5);
    if(EventStarted == 0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}The Event has not been started yet");
	EventStarted =0;
	EventType=0;
	EventStartTime=0;
	SendClientMessageToAll(0xE8AF02FF, "» Event « {CDF590}The Event has been cancelled!");
	TextDrawHideForAll(EventTD);
	return 1;
}
CMD:freepp(playerid, params[])
{
	new fpp;
    if(!IsAdmin(playerid, 10)) return 0;
	if(sscanf(params, "d", fpp)) return SendWarning(playerid, "/freepp <Amount 1-10>");
	if(fpp < 1 || fpp > 10)  return SendWarning(playerid, "/freepp <Amount 1-10>");
    foreach(new i : Player) GivePP(i, fpp);
    return 1;
}
CMD:givepp(playerid, params[])
{
  if(!IsAdmin(playerid, 10)) return 0;
  new id;
  new amount;
  if (sscanf(params, "ud", id, amount)) return SendWarning(playerid, "/givepp id <pp>");
  if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
  if(IsPlayerNPC(id) && !strcmp(pName[id], "Jonny")) return SendNpcPM(playerid, "Excuse me! are you stupid?"), GiveMedal(playerid, 24);
  if(IsPlayerNPC(id)) return 0;
  PlayerInfo[playerid][pCook]+=amount;
  new shit[128];
  format(shit, sizeof(shit), "~g~~h~~h~~h~Premium Points: ~p~+%d", amount);
  SendpInfo(id, shit, 5000);
  GivePP(id, amount);
  TextDrawShowForPlayer(id, PPEarned);
  SetTimerEx("HidePPTD", 3000, false, "i", id);
  PlayerPlaySound(id, 5201, 0, 0, 0);
  new Query[150];
  format(Query, sizeof(Query), "UPDATE `users` SET `Cooks` = %d WHERE `UserID` = '%d'", PlayerInfo[playerid][pCook], PlayerInfo[playerid][UserID]);
  mysql_query(GTADM, Query);
  //if(fpp < 1 || fpp > 10)  return SendWarning(playerid, "/setpp <Amount 1-10>");
  return 1;
}

CMD:an2(playerid, params[])
{
  if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
  if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
  if(!IsAdmin(playerid, 6)) return SendMsg(playerid, 5);
  if(sscanf(params, "s[128]", ANText)) return SendWarning(playerid, "{BABABA}Usage (/An2 <text> )");
  if(ANshowin == 1) return SendWarning(playerid, "{BABABA}Already ON");
  if((strfind(ANText, "~", true) != -1) && !IsAdmin(playerid, 5))  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}An Invalid Character has been used");

  ANshowin=1;
  TextDrawSetString(AN2, "ld_none:explm01");
  TextDrawShowForAll(AN2);
  SetTimer("An22", 100, false);
  SetTimer("An23", 200, false);
  SetTimer("An24", 300, false);
  SetTimer("An25", 400, false);
  SetTimer("An26", 500, false);
  SetTimer("An27", 600, false);
  SetTimer("An28", 700, false);
  SetTimer("An29", 800, false);
  SetTimer("An30", 900, false);
  SetTimer("An31", 1000, false);
  SetTimer("An32", 1100, false);
  SetTimer("An33", 1200, false);
  foreach(new i : Player) PlayerPlaySound(i, 1159, 0, 0, 0);
  return 1;
}

forward An22();
public An22()
{
  TextDrawSetString(AN2, "ld_none:explm02");
  TextDrawShowForAll(AN2);
  return 1;
}
forward An23();
public An23()
{
  TextDrawSetString(AN2, "ld_none:explm03");
  TextDrawShowForAll(AN2);
  return 1;
}
forward An24();
public An24()
{
  TextDrawSetString(AN2, "ld_none:explm04");
  TextDrawShowForAll(AN2);
  return 1;
}
forward An25();
public An25()
{
  TextDrawSetString(AN2, "ld_none:explm05");
  TextDrawShowForAll(AN2);
  return 1;
}
forward An26();
public An26()
{
  TextDrawSetString(AN2, "ld_none:explm06");
  TextDrawShowForAll(AN2);
  return 1;
}
forward An27();
public An27()
{
  TextDrawSetString(AN2, "ld_none:explm07");
  TextDrawShowForAll(AN2);
  return 1;
}
forward An28();
public An28()
{
  TextDrawSetString(AN2, "ld_none:explm08");
  TextDrawShowForAll(AN2);
  return 1;
}
forward An29();
public An29()
{
  TextDrawSetString(AN2, "ld_none:explm09");
  TextDrawShowForAll(AN2);
  return 1;
}
forward An30();
public An30()
{
  TextDrawSetString(AN2, "ld_none:explm10");
  TextDrawShowForAll(AN2);
  return 1;
}
forward An31();
public An31()
{
  TextDrawSetString(AN2, "ld_none:explm11");
  TextDrawShowForAll(AN2);
  return 1;
}
forward An32();
public An32()
{
  TextDrawSetString(AN2, "ld_none:explm12");
  TextDrawShowForAll(AN2);
  return 1;
}
forward An33();
public An33()
{
  TextDrawHideForAll(AN2);
  ANshowin=0;
  new str[256];
  format(str, sizeof(str), "_~n~_~n~_~n~%s", ANText);
  GameTextForAll(str, 5000, 6);
  return 1;
}

CMD:setevent(playerid, params[])
{
  if(!IsAdmin(playerid, 5) && PlayerInfo[playerid][UserID] != 153569) return SendMsg(playerid, 5);
  if(EventStarted > 0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}An event has already been started");
  new cok, soc, mon, player = Iter_Count(Player);
  if(sscanf(params, "ddd", cok, soc, mon)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}/setevent "GRAY_"<Winning Premium Points> <Winning Score> <Winning Money>");
  if(cok > 5 && Iter_Count(Player) > 20) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant set more than 5 PP earned for an event");
  if(mon > 5000000) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant set more than 5 mil");
  if(soc > 20) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant set more than 20 score");
  if(player < 20 && cok > 1 && !IsAdmin(playerid, 10)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You can set only 1 PP, since server hasnt more than 20 players.");
  ShowSetEvent(playerid);
  EventCooks=cok;
  EventScore=soc;
  EventMoney=mon;
  return 1;
}
stock ShowSetEvent(playerid)
{
  ShowPlayerDialog(playerid, 1500, DIALOG_STYLE_LIST, "{2427B5}GTADM {FFFFFF}- {7678F5}Event Creation ", "The Hidden 'Gift Box' Event\nRace Event\nDerby Event\nFallout Event\nHay Event\nThe Riddle Event\nSumo Event\nLMS Event\nParkour Event\nDive1 Event\nDive2 Event\nExport Event\nMoneyGame Event\nGunGame Event\nDM2 Event\nDM3 Event\nDM5 Event\nDM8 Event\nFootball Event\nCTF Event\nCS Event\nDM4 Event", "Select", "Exit");//\nDD Event\nCO Event\nKTP Event
}
CMD:event(playerid)
{
   new tickbick=EventStartTime - gettime();
   if(EventStartTime == 0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}There are no events at this moment");
   if(EventStarted == 1)
   {
	  new EventTypeT[40];
	  switch(EventType)
	  {
		  case 1: EventTypeT= "The Hidden Gift Box Event", EventInfo= "There is a Hidden Gift Box Somewhere in San Andreas. Find it to win the event!";
		  case 2: EventTypeT= "Race Event", EventInfo= "Finish the (/Race) in the 1st place to win the event";
		  case 3: EventTypeT= "Derby Event", EventInfo= "The first player to win a (/Derby) Match Wins the event!";
		  case 4: EventTypeT= "Fallout Event", EventInfo= "The first player to win the (/Fallout) Minigame Wins the event!";
		  case 200: EventTypeT= "HayGame", EventInfo= "The first player to win the (/Hay) Minigame Wins the event!";
		  case 400: EventTypeT= "Riddle Event", EventInfo= "The first player who solves the riddle wins (type the answer in the main chat)!";
		  case 700: EventTypeT= "Sumo Event", EventInfo= "Win a Sumo match! (/SUMO)";
		  case 800: EventTypeT= "LMS Event", EventInfo= "Win the LMS! (/LMS)";
		  case 900: EventTypeT= "Parkour Event", EventInfo= "Finish the (/Parkour) in the 1st place to win the event";
		  case 1000: EventTypeT= "Dive Event", EventInfo= "Be the first to finish The (/Dive) Challenge to win the event";
		  case 1001: EventTypeT= "Dive2 Event", EventInfo= "Be the first to finish The (/Dive2) Challenge to win the event";
		  case 444: EventTypeT= "Export Event", format(EventInfo, sizeof(EventInfo), "Be the first to Export 5 vehicles to win the Event! (/Export)\n\nYou have Exported %d vehicles.", EventExports[playerid]);
		  case 2429: EventTypeT= "MoneyGame Event", format(EventInfo, sizeof(EventInfo), "Be the first to collect 5 Money Bags to win this event! (/MoneyGame)\n\nYou have collected %d Money Bags.", EventMoneyBags[playerid]);
		  case 24: EventTypeT= "GunGame Event", format(EventInfo, sizeof(EventInfo), "Reach the last level in /Gungame to win the event!");
		  case 69: EventTypeT= "DM2 Event", format(EventInfo, sizeof(EventInfo), "Kill %d Players in /DM2 to win the event!", EventKS);
		  case 70: EventTypeT= "DM3 Event", format(EventInfo, sizeof(EventInfo), "Kill %d Players in /DM3 to win the event", EventKS);
		  case 71: EventTypeT= "DM5 Event", format(EventInfo, sizeof(EventInfo), "Kill %d Players in /DM5 to win the event!", EventKS);
		  case 72: EventTypeT= "DM8 Event", format(EventInfo, sizeof(EventInfo), "Kill %d Players in /DM8 to win the event!", EventKS);
 	      case 6969: EventTypeT= "Football Event", format(EventInfo, sizeof(EventInfo), "Win the /Football match with your team.");
  	  	  case 6970: EventTypeT= "Capture The Flag Event", format(EventInfo, sizeof(EventInfo), "Win the /CTF match with your team.");
  	  	  case 6971: EventTypeT= "Counter Strike Event", format(EventInfo, sizeof(EventInfo), "Stay alive and win the /CS match with your team.");
  	  ////	  case 6972: EventTypeT= "Disco Dodgebomb Event", format(EventInfo, sizeof(EventInfo), "Win the /DD match with your team.");
  	  ////	  case 6973: EventTypeT= "Colosseum Event", format(EventInfo, sizeof(EventInfo), "Win the /CO match with your team.");
		  //case 6974: EventTypeT= "Kill the player Event", format(EventInfo, sizeof(EventInfo), "Kill %s not in a minigame to win the event!", pName[eventhit][i]);
  	  	  case 73: EventTypeT= "DM4 Event", format(EventInfo, sizeof(EventInfo), "Kill %d Players in /DM4 to win the event!", EventKS);
	  }
	  new strzaza[612];
	  format(strzaza, sizeof(strzaza), "%s\n\nThe Event has been started\n\n%s\n\nIMPORTANT: Winning Events by farming will end up with a permanent ban!", EventTypeT, EventInfo);
	  ShowPlayerDialog(playerid, 897, DIALOG_STYLE_MSGBOX, "Event", strzaza, "Exit", "");
   }
   else
   {
		new str[128];
		if(tickbick < 180) format(str, sizeof(str), "The next event will start soon", secondstotime( tickbick ));
		else format(str, sizeof(str), "The next event will start in %s", secondstotime( tickbick ));
		ShowPlayerDialog(playerid, 897, DIALOG_STYLE_MSGBOX, "Event", str, "Exit", "");
   }
   return 1;
}
stock secondstotime(seconds)
{
    static const times[] = {1, 60, 3600, 86400, 604800, 2419200, 29030400};
    static const names[][] = {"second", "minute", "hour", "day", "week", "month", "year"};
    new string[128];
    for(new i = sizeof(times) - 1;  i != -1; i--)
    {
        if(seconds / times[i])
        {
            if(string[0])
            {
                format(string, sizeof(string), "%s %d %s%s", string, (seconds / times[i]), names[i], ((seconds / times[i]) == 1) ? ("") : ("s"));
            }
            else
            {
                format(string, sizeof(string), "%d %s%s", (seconds / times[i]), names[i], ((seconds / times[i]) == 1) ? ("") : ("s"));
            }

            seconds -= ((seconds / times[i]) * times[i]);
        }
    }

    return string;
}
//==============================Stunt==vehicles=================================
CMD:vnrg(playerid)
{
  if(PlayerInfo[playerid][pScore] > 400 && !GetPVarInt(playerid, "instunt")) return SendWarning(playerid, "You must be in /stunt to use this command.");
  if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in a vehicle.");
  if(IsDeathMatcher2(playerid)) return SendWarning(playerid, "You cant use this command in minigames!");
  if(IsInFight(playerid)) return SendWarning(playerid, "You cant use this command while in fight!");
  if ((GetTickCount() - TickCount[playerid][VTick])  < 30*1000 ) return SendClientMessage( playerid, RED, ""RED_"» Error « {BABABA}You cant use this command that often!" );
  new Float:pos[4];
  GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
  GetPlayerFacingAngle(playerid, pos[3]);
  new ah= CreateVehicle(522, pos[0], pos[1], pos[2], pos[3], -1, -1, 10);
  ResetCarInfo(ah);
  VehicleInfo[ah][Player]=INVALID_PLAYER_ID;
  AdminCar[ah]=1;
  PutPlayerInVehicle(playerid, ah, 0);
  SetVehicleVirtualWorld(ah, GetPlayerVirtualWorld(playerid));
  TickCount[playerid][VTick]=GetTickCount();
  if(GetPVarInt(playerid, "instunt"))
  {
    SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} You have spawned a NRG-500!");
    SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} Press {A6856A}CAPS LOCK {96A66A}for speed boost!");
    SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} Press {A6856A}LMB {96A66A}to fix your vehicle!");
    SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} Press {A6856A}2 {96A66A}to flip your vehicle!");
    SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} Use {A6856A}(/SPos) {96A66A}to save your position, and {A6856A}(/Lpos) {96A66A}to load it!");
  }
  return 1;
}
CMD:vtur(playerid)
{
  if(PlayerInfo[playerid][pScore] > 400 && !GetPVarInt(playerid, "instunt")) return SendWarning(playerid,  "You must be in /stunt to use this command.");
  if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in a vehicle.");
  if(IsDeathMatcher2(playerid)) return SendWarning(playerid, "You cant use this command in minigames!");
  if(IsInFight(playerid)) return SendWarning(playerid, "You cant use this command while in fight!");
  if ((GetTickCount() - TickCount[playerid][VTick])  < 30*1000 ) return SendClientMessage( playerid, RED, ""RED_"» Error « {BABABA}You cant use this command that often!" );
  new Float:pos[4];
  GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
  GetPlayerFacingAngle(playerid, pos[3]);
  new ah= CreateVehicle(451, pos[0], pos[1], pos[2], pos[3], -1, -1, 10);
  ResetCarInfo(ah);
  VehicleInfo[ah][Player]=INVALID_PLAYER_ID;
  AdminCar[ah]=1;
  PutPlayerInVehicle(playerid, ah, 0);
  SetVehicleVirtualWorld(ah, GetPlayerVirtualWorld(playerid));
  AddVehicleComponent(GetPlayerVehicleID(playerid), 1010);
  AddVehicleComponent(GetPlayerVehicleID(playerid), 1087);
  AddVehicleComponent(GetPlayerVehicleID(playerid), 1080);
  TickCount[playerid][VTick]=GetTickCount();
  if(GetPVarInt(playerid, "instunt"))
  {
    SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} You have spawned an Turismo!");
    SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} Press {A6856A}CAPS LOCK {96A66A}for speed boost!");
    SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} Press {A6856A}LMB {96A66A}to fix your vehicle!");
    SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} Press {A6856A}2 {96A66A}to flip your vehicle!");
    SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} Use {A6856A}(/SPos) {96A66A}to save your position, and {A6856A}(/Lpos) {96A66A}to load it!");
  }
  return 1;
}
CMD:vinf(playerid)
{
  if(PlayerInfo[playerid][pScore] > 400 && !GetPVarInt(playerid, "instunt")) return SendWarning(playerid,  "You must be in /stunt to use this command.");
  if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in a vehicle.");
  if(IsDeathMatcher2(playerid)) return SendWarning(playerid, "You cant use this command in minigames!");
  if(IsInFight(playerid)) return SendWarning(playerid, "You cant use this command while in fight!");
  if ((GetTickCount() - TickCount[playerid][VTick])  < 30*1000 ) return SendClientMessage( playerid, RED, ""RED_"» Error « {BABABA}You cant use this command that often!" );
  new Float:pos[4];
  GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
  GetPlayerFacingAngle(playerid, pos[3]);
  new ah= CreateVehicle(411, pos[0], pos[1], pos[2], pos[3], -1, -1, 10);
  ResetCarInfo(ah);
  VehicleInfo[ah][Player]=INVALID_PLAYER_ID;
  AdminCar[ah]=1;
  PutPlayerInVehicle(playerid, ah, 0);
  SetVehicleVirtualWorld(ah, GetPlayerVirtualWorld(playerid));
  AddVehicleComponent(GetPlayerVehicleID(playerid), 1010);
  AddVehicleComponent(GetPlayerVehicleID(playerid), 1087);
  AddVehicleComponent(GetPlayerVehicleID(playerid), 1080);
  TickCount[playerid][VTick]=GetTickCount();
  if(GetPVarInt(playerid, "instunt"))
  {
    SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} You have spawned an Infernus!");
    SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} Press {A6856A}CAPS LOCK {96A66A}for speed boost!");
    SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} Press {A6856A}LMB {96A66A}to fix your vehicle!");
    SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} Press {A6856A}2 {96A66A}to flip your vehicle!");
    SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} Use {A6856A}(/SPos) {96A66A}to save your position, and {A6856A}(/Lpos) {96A66A}to load it!");
  }
  return 1;
}
CMD:vstunt(playerid)
{
  if(PlayerInfo[playerid][pScore] > 400 && !GetPVarInt(playerid, "instunt")) return SendWarning(playerid,  "You must be in /stunt to use this command.");
  if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in a vehicle.");
  if(IsDeathMatcher2(playerid)) return SendWarning(playerid, "You cant use this command in minigames!");
  if(IsInFight(playerid)) return SendWarning(playerid, "You cant use this command while in fight!");
  if ((GetTickCount() - TickCount[playerid][VTick])  < 30*1000 ) return SendClientMessage( playerid, RED, ""RED_"» Error « {BABABA}You cant use this command that often!" );
  new Float:pos[4];
  GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
  GetPlayerFacingAngle(playerid, pos[3]);
  new ah= CreateVehicle(513, pos[0], pos[1], pos[2], pos[3], -1, -1, 10);
  ResetCarInfo(ah);
  VehicleInfo[ah][Player]=INVALID_PLAYER_ID;
  AdminCar[ah]=1;
  PutPlayerInVehicle(playerid, ah, 0);
  SetVehicleVirtualWorld(ah, GetPlayerVirtualWorld(playerid));
  TickCount[playerid][VTick]=GetTickCount();
  if(GetPVarInt(playerid, "instunt"))
  {
    SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} You have spawned a Stunt plane!");
    SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} Press {A6856A}CAPS LOCK {96A66A}for speed boost!");
    SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} Press {A6856A}LMB {96A66A}to fix your vehicle!");
    SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} Press {A6856A}2 {96A66A}to flip your vehicle!");
    SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} Use {A6856A}(/SPos) {96A66A}to save your position, and {A6856A}(/Lpos) {96A66A}to load it!");
  }
  return 1;
}
CMD:vjetmax(playerid)
{
  if(PlayerInfo[playerid][pScore] > 400 && !GetPVarInt(playerid, "instunt")) return SendWarning(playerid,  "You must be in /stunt to use this command.");
  if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in a vehicle.");
  if(IsDeathMatcher2(playerid)) return SendWarning(playerid, "You cant use this command in minigames!");
  if(IsInFight(playerid)) return SendWarning(playerid, "You cant use this command while in fight!");
  if ((GetTickCount() - TickCount[playerid][VTick])  < 30*1000 ) return SendClientMessage( playerid, RED, ""RED_"» Error « {BABABA}You cant use this command that often!" );
  new Float:pos[4];
  GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
  GetPlayerFacingAngle(playerid, pos[3]);
  new ah= CreateVehicle(493, pos[0], pos[1], pos[2], pos[3], -1, -1, 10);
  ResetCarInfo(ah);
  VehicleInfo[ah][Player]=INVALID_PLAYER_ID;
  AdminCar[ah]=1;
  PutPlayerInVehicle(playerid, ah, 0);
  SetVehicleVirtualWorld(ah, GetPlayerVirtualWorld(playerid));
  TickCount[playerid][VTick]=GetTickCount();
  if(GetPVarInt(playerid, "instunt"))
  {
    SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} You have spawned a Jetmax!");
    SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} Press {A6856A}CAPS LOCK {96A66A}for speed boost!");
    SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} Press {A6856A}LMB {96A66A}to fix your vehicle!");
    SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} Press {A6856A}2 {96A66A}to flip your vehicle!");
    SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} Use {A6856A}(/SPos) {96A66A}to save your position, and {A6856A}(/Lpos) {96A66A}to load it!");
  }
  return 1;
}
CMD:vmaverick(playerid)
{
  if(PlayerInfo[playerid][pScore] > 400 && !GetPVarInt(playerid, "instunt")) return SendWarning(playerid,  "You must be in /stunt to use this command.");
  if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in a vehicle.");
  if(IsDeathMatcher2(playerid)) return SendWarning(playerid, "You cant use this command in minigames!");
  if(IsInFight(playerid)) return SendWarning(playerid, "You cant use this command while in fight!");
  if ((GetTickCount() - TickCount[playerid][VTick])  < 30*1000 ) return SendClientMessage( playerid, RED, ""RED_"» Error « {BABABA}You cant use this command that often!" );
  new Float:pos[4];
  GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
  GetPlayerFacingAngle(playerid, pos[3]);
  new ah= CreateVehicle(487, pos[0], pos[1], pos[2], pos[3], -1, -1, 10);
  ResetCarInfo(ah);
  VehicleInfo[ah][Player]=INVALID_PLAYER_ID;
  AdminCar[ah]=1;
  PutPlayerInVehicle(playerid, ah, 0);
  SetVehicleVirtualWorld(ah, GetPlayerVirtualWorld(playerid));
  TickCount[playerid][VTick]=GetTickCount();
  if(GetPVarInt(playerid, "instunt"))
  {
    SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} You have spawned a Maverick!");
    SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} Press {A6856A}CAPS LOCK {96A66A}for speed boost!");
    SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} Press {A6856A}LMB {96A66A}to fix your vehicle!");
    SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} Press {A6856A}2 {96A66A}to flip your vehicle!");
    SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} Use {A6856A}(/SPos) {96A66A}to save your position, and {A6856A}(/Lpos) {96A66A}to load it!");
  }
  return 1;
}
CMD:vbmx(playerid)
{
  if(PlayerInfo[playerid][pScore] > 400 && !GetPVarInt(playerid, "instunt")) return SendWarning(playerid,  "You must be in /stunt to use this command.");
  if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in a vehicle.");
  if(IsDeathMatcher2(playerid)) return SendWarning(playerid, "You cant use this command in minigames!");
  if(IsInFight(playerid)) return SendWarning(playerid, "You cant use this command while in fight!");
  if ((GetTickCount() - TickCount[playerid][VTick])  < 30*1000 ) return SendClientMessage( playerid, RED, ""RED_"» Error « {BABABA}You cant use this command that often!" );
  new Float:pos[4];
  GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
  GetPlayerFacingAngle(playerid, pos[3]);
  new ah= CreateVehicle(481, pos[0], pos[1], pos[2], pos[3], -1, -1, 10);
  ResetCarInfo(ah);
  VehicleInfo[ah][Player]=INVALID_PLAYER_ID;
  AdminCar[ah]=1;
  PutPlayerInVehicle(playerid, ah, 0);
  SetVehicleVirtualWorld(ah, GetPlayerVirtualWorld(playerid));
  TickCount[playerid][VTick]=GetTickCount();
  if(GetPVarInt(playerid, "instunt"))
  {
    SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} You have spawned a BMX!");
    SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} Press {A6856A}CAPS LOCK {96A66A}for speed boost!");
    SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} Press {A6856A}LMB {96A66A}to fix your vehicle!");
    SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} Press {A6856A}2 {96A66A}to flip your vehicle!");
    SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} Use {A6856A}(/SPos) {96A66A}to save your position, and {A6856A}(/Lpos) {96A66A}to load it!");
  }
  return 1;
}
CMD:vmount(playerid)
{
  if(PlayerInfo[playerid][pScore] > 400 && !GetPVarInt(playerid, "instunt")) return SendWarning(playerid,  "You must be in /stunt to use this command.");
  if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in a vehicle.");
  if(IsDeathMatcher2(playerid)) return SendWarning(playerid, "You cant use this command in minigames!");
  if(IsInFight(playerid)) return SendWarning(playerid, "You cant use this command while in fight!");
  if ((GetTickCount() - TickCount[playerid][VTick])  < 30*1000 ) return SendClientMessage( playerid, RED, ""RED_"» Error « {BABABA}You cant use this command that often!" );
  new Float:pos[4];
  GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
  GetPlayerFacingAngle(playerid, pos[3]);
  new ah= CreateVehicle(510, pos[0], pos[1], pos[2], pos[3], -1, -1, 10);
  ResetCarInfo(ah);
  VehicleInfo[ah][Player]=INVALID_PLAYER_ID;
  AdminCar[ah]=1;
  PutPlayerInVehicle(playerid, ah, 0);
  SetVehicleVirtualWorld(ah, GetPlayerVirtualWorld(playerid));
  TickCount[playerid][VTick]=GetTickCount();
  if(GetPVarInt(playerid, "instunt"))
  {
    SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} You have spawned a Mountain Bike!");
    SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} Press {A6856A}CAPS LOCK {96A66A}for speed boost!");
    SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} Press {A6856A}LMB {96A66A}to fix your vehicle!");
    SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} Press {A6856A}2 {96A66A}to flip your vehicle!");
    SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} Use {A6856A}(/SPos) {96A66A}to save your position, and {A6856A}(/Lpos) {96A66A}to load it!");
  }
  return 1;
}
CMD:vbul(playerid)
{
  if(PlayerInfo[playerid][pScore] > 400 && !GetPVarInt(playerid, "instunt")) return SendWarning(playerid,  "You must be in /stunt to use this command.");
  if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in a vehicle.");
  if(IsDeathMatcher2(playerid)) return SendWarning(playerid, "You cant use this command in minigames!");
  if(IsInFight(playerid)) return SendWarning(playerid, "You cant use this command while in fight!");
  if ((GetTickCount() - TickCount[playerid][VTick])  < 30*1000 ) return SendClientMessage( playerid, RED, ""RED_"» Error « {BABABA}You cant use this command that often!" );
  new Float:pos[4];
  GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
  GetPlayerFacingAngle(playerid, pos[3]);
  new ah= CreateVehicle(541, pos[0], pos[1], pos[2], pos[3], -1, -1, 10);
  ResetCarInfo(ah);
  VehicleInfo[ah][Player]=INVALID_PLAYER_ID;
  AdminCar[ah]=1;
  PutPlayerInVehicle(playerid, ah, 0);
  SetVehicleVirtualWorld(ah, GetPlayerVirtualWorld(playerid));
  AddVehicleComponent(GetPlayerVehicleID(playerid), 1010);
  AddVehicleComponent(GetPlayerVehicleID(playerid), 1087);
  AddVehicleComponent(GetPlayerVehicleID(playerid), 1080);
  TickCount[playerid][VTick]=GetTickCount();
  if(GetPVarInt(playerid, "instunt"))
  {
    SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} You have spawned a Bullet!");
    SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} Press {A6856A}CAPS LOCK {96A66A}for speed boost!");
    SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} Press {A6856A}LMB {96A66A}to fix your vehicle!");
    SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} Press {A6856A}2 {96A66A}to flip your vehicle!");
    SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} Use {A6856A}(/SPos) {96A66A}to save your position, and {A6856A}(/Lpos) {96A66A}to load it!");
  }
  return 1;
}
//==============================================================================
CMD:sv(playerid)
{
  if(!GetPVarInt(playerid, "instunt")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be in /stunt to use this command.");
  if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in a vehicle.");
  ShowPlayerDialog(playerid, 3307, DIALOG_STYLE_LIST, "Stunt vehicles", "{0DFF00}Infernus\n{1BE06D}NRG-500\n{69BA3A}Turismo\n{3ABA6F}Bullet\n{00C4A0}BMX\n{12F4B8}Mountain bike\n{ABFF85}Stunt plane\n{96A66A}Jetmax\n{A6856A}Maverick", "Select", "Cancel");
  return 1;
}
/*
CMD:v(playerid)
{
  if(PlayerInfo[playerid][pScore] > 400) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This command is only for players under 400 score.");
  if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in a vehicle.");
  ShowPlayerDialog(playerid, 3307, DIALOG_STYLE_LIST, "Vehicles", "{0DFF00}Infernus\n{1BE06D}NRG-500\n{69BA3A}Turismo\n{3ABA6F}Bullet\n{00C4A0}BMX\n{12F4B8}Mountain bike\n{ABFF85}Stunt plane\n{96A66A}Jetmax\n{A6856A}Maverick", "Select", "Cancel");
  return 1;
}
*/
CMD:setsecondcar(playerid)
{
	///if(PlayerInfo[playerid][VipItems][0] != 1) return SendMsg(playerid, 5);
	if(PlayerInfo[playerid][IsVIP] == 0) return SendWarning(playerid, "Only VIP's can use this command!");
	ShowPlayerDialog( playerid, 3434, DIALOG_STYLE_LIST, ""BLUE_"SELECT YOUR SECOND VEHICLE", "Airplanes\nHelicopters\nBikes\nConvertibles\nIndustrial\nLowriders\nOff Road\nPublic Service Vehicles\nSaloons\nSport Vehicles\nStation Wagons\nBoats\nTrailers\nUnique Vehicles\nRC Vehicles", "Select", "Cancel" );
	return 1;
}
CMD:car2(playerid)
{
	if(PlayerInfo[playerid][IsVIP] == 0) return SendWarning(playerid, "Only VIP's can use this command!");
    if(IsInFight(playerid)) return SendMsg(playerid, 2);
    if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
    if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(GetPlayerVirtualWorld(playerid) == 871) return SendWarning(playerid, "You cant use this command here!");
    if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
    if(IsInBank(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside a bank");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You can't use this command inside a vehicle");
	if(IsArmedVehicle(PlayerInfo[playerid][pSecV]))  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant spawn an armed vehicle.");

	//if(PlayerInfo[playerid][VipItems][0] != 1) return SendMsg(playerid, 5);
	if(PlayerInfo[playerid][pSecV] <= 0) return SendClientMessage(playerid, 0xBBF582FF, "» Second vehicle « {6AC213} You need to set your second vehicle before spawning it (/SetSecondCar)");
	new Float:x, Float:y, Float:z, Float:a;
	if(SecV[playerid] != INVALID_VEHICLE_ID)
	{
	   if(SCar[SecV[playerid]] != 0) DestroyVehicleEX(SecV[playerid]);
    }
	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	SecV[playerid] = CreateVehicle(PlayerInfo[playerid][pSecV], x, y, z, a, PlayerInfo[playerid][pSecVc1], PlayerInfo[playerid][pSecVc2], 30);
    ResetCarInfo(SecV[playerid]);
    SCar[SecV[playerid]] = 1;
    SOwner[SecV[playerid]] = playerid;
	VehicleInfo[SecV[playerid]][Player]=INVALID_PLAYER_ID;
	VehicleInfo[SecV[playerid]][Owned]=0;

    PutPlayerInVehicle(playerid, SecV[playerid], 0);
	if(PlayerInfo[playerid][pSecNitro] == 1) CarNitro[SecV[playerid]]=1;
	if(PlayerInfo[playerid][pSecWheel] > 0) AddVehicleComponentEX(SecV[playerid], PlayerInfo[playerid][pSecWheel]);
	return 1;
}

CMD:music(playerid, params[])
{
    if(musiclock == 1) return SendWarning(playerid, "You cant use the music at the moment!");
	if(sscanf(params, "s[128]", params)) return SendWarning(playerid, "/music < Name of video to search >");
	Request_Type[playerid] = 0;
  	if(strcmp(params, Last_Search[playerid], true))
  	{
		format(Last_Search[playerid], 128, "%s", params);
		new assist[256];
		format(assist, sizeof(assist), "gtadm.com/mp3skull.php?limit=16&attempts=10000&linkid=http://mp3skull.com/mp3/%s.html", urlencode(params));
	    HTTP(playerid, HTTP_GET, assist, "", "MyMp3SkullHttpResponse");
	    return 1;
	}
	ShowResultsWindow(playerid);
    SendClientMessage(playerid, -1, "Searching...");
	return 1;
}
CMD:playmusic(playerid, params[])
{
    if(!IsAdmin(playerid, 5) && PlayerInfo[playerid][UserID] != 153569) return SendMsg(playerid, 5);
    if(musiclock == 1) return SendWarning(playerid, "You cant use the music at the moment!");
	if(sscanf(params, "s[128]", params)) return SendWarning(playerid, "/playmusic < Name of video to search >");
	Request_Type[playerid] = 1;
  	if(strcmp(params, Last_Search[playerid], true))
  	{
		format(Last_Search[playerid], 128, "%s", params);
		new assist[256];
		format(assist, sizeof(assist), "gtadm.com/mp3skull.php?limit=16&attempts=10000&linkid=http://mp3skull.com/mp3/%s.html", params);
		for(new i = 35; i < strlen(assist); i++) if(assist[i] == ' ') assist[i] = '?';
	    HTTP(playerid, HTTP_GET, assist, "", "MyMp3SkullHttpResponse");
	    return 1;
	}
	ShowResultsWindow(playerid);
    SendClientMessage(playerid, -1, "Searching...");
	return 1;
}
CMD:fucker(playerid)
{
  if(!IsAdmin(playerid, 51)) return SendMsg(playerid, 5);
  if(musiclock != 1)
  {
     musiclock = 1;
  }
  else
  {
	 musiclock =0;
  }
  return 1;
}
CMD:stopmusic(playerid)
{
   if(musiclock == 1) return SendWarning(playerid, "You cant stop the music at the moment!");
   StopAudioStreamForPlayer(playerid);
   return 1;
}
CMD:market(playerid)
{
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");

   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);

   new m=CheckTeleMoney(playerid, 1500);
   if(GetPlayerMoneyEx(playerid) < m) return SendMoneyMSG(playerid, m);
   GivePlayerMoneyEX(playerid, m*-1, 1);

   TeleportPlayer(playerid, 1076.1415, -3571.3025, 3.0454, 186.7089, 0);
   SendTeleMsg(playerid, "GTADM Market", "Market");
   return 1;
}
CMD:fs(playerid)
{
 if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
 if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
 ShowPlayerDialog(playerid, 5466, DIALOG_STYLE_LIST, "{C8FF00}Select Your Fighting Style", "1- Normal Fighting Style\n2- Boxing "GRAY_"Requires Level 10 in fist\n3- KungFo "GRAY_"Requires Level 20 in fist\n4- KneeHead "GRAY_"Requires Level 30 in fist\n5- GrabKick "GRAY_"Requires Level 40 in fist\n6- Elbow "GRAY_"Requires Level 50 in fist", "Select", "Exit");
 return 1;
}
CMD:setpw(playerid, params[])
{
   new baname[25], newpassword[32], string[256];
   if(!IsAdmin(playerid, 10)) return SendMsg(playerid, 5);
   if(sscanf(params, "s[25]s[32]", baname, newpassword)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA} /setpw "GRAY_"[Account Name] [New Password]");
   if(strlen(newpassword) > 32 || strlen(newpassword) < 3)  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}The password must be between 3 and 32 characters");

   format(string, sizeof(string), "SELECT `Password` FROM `users` WHERE `Name` = '%s'", Escape_String(baname));
   mysql_tquery(GTADM, string, "setpassword", "dss", playerid, baname, newpassword);
   return 1;
}


CMD:seen(playerid, params[])
{
   new baname[25];
   if(!IsAdmin(playerid, 1)) return SendMsg(playerid, 5);
   if(sscanf(params, "s[25]", baname)) return SendClientMessage(playerid, RED, "USAGE: /seen "GRAY_"[Account Name]");
   new online;
   foreach(new i : Player)
   {
	   if(strlen(pName[i]) > 0 && !strcmp(pName[i], baname))
	   {
		  online=1;
	   }
   }
   if(online==1) return SendClientMessage(playerid, RED, "{10869E}-Player Last Seen-{00D799} This player is online already");
   new query[256];
   format(query, sizeof(query), "SELECT `last_login` FROM `users` WHERE `Name` = '%s'", Escape_Name(baname));
   mysql_tquery(GTADM, query, "CheckLastSeen", "ds", playerid, baname);
   return 1;
}
forward CheckLastSeen(playerid, baname[]);
public CheckLastSeen(playerid, baname[])
{
	   new string[128];
       new rows, fields, data[24];
       cache_get_row_count(rows);
       cache_get_field_count(fields);
	   if(rows > 0)
	   {
          cache_get_value_index(0, 0, data);
          format(string, sizeof(string), "{10869E}-Player Last Seen-{00D799} %s's last visit was at %s", baname, data);
   	      SendClientMessage(playerid, -1, string);
	   }
	   else
	   {
   	      SendClientMessage(playerid, -1, "{10869E}-Player Last Seen-{00D799} Couldnt find any information.");
	   }
	   return 1;
}


CMD:weapons(playerid, params[])
{
   if(!IsAdmin(playerid, 1)) return SendMsg(playerid, 5);
   new c, iD, str[512];
   if(sscanf(params, "u", iD)) return SendClientMessage(playerid, RED, ""RED2_""RED_"» Error « {BABABA}"RED_" /weapons <playerid>");
   if(!IsPlayerConnected(iD)) return SendWarning(playerid, "{BABABA}This player is not connected");
   for (new i = 0; i < 13; i++)
   {
	new w, a, name[24];
    GetPlayerWeaponData(iD, i, w, a);
    if(w > 0 && a != 0)
    {
       GetWeaponName(w, name, 24);
       if(w == 18) name ="Molotov Cocktail";
       else if(w == 44) name ="Night Vis Goggles";
       else if(w == 45) name ="Thermal Goggles";
	   c++;
	   format(str, sizeof(str), "%s\n{DE4545}%s "GRAY_"(%d ammo)", str, name, a);
    }
   }
   new str2[512];
   format(str2, sizeof(str2), "{0088FF}%s's weapons", pName[iD]);
   if(c == 0) SendClientMessage(playerid, RED, ""RED2_" "RED_"» Error « {BABABA}This player has no weapons");
   else ShowPlayerDialog(playerid, 5447, DIALOG_STYLE_MSGBOX, str2, str, "Exit", "");
   return 1;
}
CMD:vip(playerid)
{
	new str[800];
	strcat(str, "***{08B9FF}Want to be a VIP?\n{FFFFFF}Donate now to get alot of extra features that only VIP can get!");
	strcat(str, "\n{FFFFFF}If you want to know all the features that you will get after donating, {FFFFFF}visit {BBF582}www.gtadm.com{FFFFFF}.\n{FFFFFF}Donations can be only done using {3BB023}PayPal.");
    ShowPlayerDialog(playerid, 87421, DIALOG_STYLE_MSGBOX, "{FF08A4}Become a VIP", str, "Exit", "");
    return 1;
}
CMD:premium(playerid) return cmd_premiumhelp(playerid);

CMD:premiumhelp(playerid)
{
	new str[1024];
	strcat(str, "{BEBEBE}-{168BFF}PremiumPoints Help{BEBEBE}-");
	strcat(str, "\n**{BBF582}What can I do with Premium Points?");
	strcat(str, "\n{BEBEBE}With Premium Points you will be able to buy special stuff! Just like: Permission to use the car-tow command ({168BFF}/tow{BEBEBE}), \n{BEBEBE}Permission to the teleport ({168BFF}/cars9{BEBEBE}), ({168BFF}/Neon{BEBEBE}) aswell.");
	strcat(str, "\n{BEBEBE}For further info about what you can buy , Type ({168BFF}/Market{BEBEBE})!");
	strcat(str, "\n**{BBF582}How do I earn the Premium Points?");
	strcat(str, "\n{BEBEBE}To earn the Premium Points you must win, Events, Take records in Derby/Parkour/Race's.");
	strcat(str, "\n{BEBEBE}Find all the Easter Eggs, Horse-Shoes & Oysters - Spray all the Tags is also an option!");
	strcat(str, "\n**{BBF582}Where can I spend my Premium Points?");
	strcat(str, "\n{BEBEBE}You will be able to spend your Premium Points at the GTADM's Market ({168BFF}/Market{BEBEBE}).");
	strcat(str, "\n{BEBEBE}You can check how many Premium Points you have earned in ({168BFF}/stats{BEBEBE}).");
	ShowPlayerDialog(playerid, 5521, DIALOG_STYLE_MSGBOX, "PremiumPoints Help", str, "Ok", "");
	return 1;
}

CMD:mission(playerid)
{
     if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
     if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
     if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");
     if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
     if(GetPVarInt(playerid, "MissionProgress") || IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
     TogglePlayerAllDynamicRaceCPs(playerid, false);
     DisablePlayerCheckpoint(playerid);
     DisablePlayerRaceCheckpoint(playerid);
	 switch(PlayerInfo[playerid][Mission])
	 {
		   case 1:
		   {
			   TogglePlayerDynamicCP(playerid, MissionCP[6], true);
               Streamer_AppendArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[6], E_STREAMER_PLAYER_ID, playerid);
			   SendInfoText(playerid, 4500, "Mission 2~n~Pizza delivery");
			   PlayerTextDrawSetStringEX(playerid, pMissionTD[playerid], "~y~Mission 2 - Pizza Delivery~n~~w~You are now working with ~n~Well Stacked Pizza Company");
			   SetTimerEx("mission2_", 5000, false, "i", playerid);
		   }
		   case 2:
		   {
               Streamer_AppendArrayData(STREAMER_TYPE_PICKUP , MissionPickup[0], E_STREAMER_PLAYER_ID, playerid);
			   SendInfoText(playerid, 4500, "Mission 3~n~The Lost Briefcase");
			   PlayerTextDrawSetStringEX(playerid, pMissionTD[playerid], "~y~Mission 3 - The Lost Briefcase~n~~w~One of our men has lose his~n~~r~briefcase in Caligula's Palace");
			   SetTimerEx("mission3_", 5000, false, "i", playerid);
		   }
		   case 3:
		   {
			   SendInfoText(playerid, 4500, "Mission 4~n~Heavy delivery");
			   PlayerTextDrawSetStringEX(playerid, pMissionTD[playerid], "~y~Mission 4 - Heavy delivery~w~~n~This time you are going to deliver some bombs~n~-Follow the ~r~Truck Icon~w~ On your minimap");
			   TogglePlayerDynamicCP(playerid, MissionCP[13], true);
               Streamer_AppendArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[13], E_STREAMER_PLAYER_ID, playerid);
		   }
		   case 4:
		   {
			   TogglePlayerDynamicCP(playerid, MissionCP[22], true);
               Streamer_AppendArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[22], E_STREAMER_PLAYER_ID, playerid);
			   SendInfoText(playerid, 4500, "Mission 5~n~Boom Headshot!");
			   PlayerTextDrawSetStringEX(playerid, pMissionTD[playerid], "~y~Mission 5 - Boom Headshot!~w~~n~Lets hunt some newbies~n~-Follow the ~r~Gun Icon~w~ On your minimap");

		   }

		   case 5:
		   {
			   SendInfoText(playerid, 4500, "Mission 6~n~Deadly Surprise!");
			   PlayerTextDrawSetStringEX(playerid, pMissionTD[playerid], "~y~Mission 6 - Deadly Surprise!~w~~n~Today we are going to make a little surprise for a friend");
			   SetTimerEx("mission5_", 5000, false, "i", playerid);
		   }
		   case 6:
		   {
			   SendInfoText(playerid, 4500, "Mission 7~n~Mr Whoopee around the world!");
			   PlayerTextDrawSetStringEX(playerid, pMissionTD[playerid], "~y~Mission 7 - Mr Whoopee around the world!~w~~n~Now you are going to ~b~sell some icecream~n~~w~Head to San Fierro to get your job ~y~van!");
			   TogglePlayerDynamicCP(playerid, MissionCP[27], true);
               Streamer_AppendArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[27], E_STREAMER_PLAYER_ID, playerid);
		   }
		   case 7:
		   {
			     SendInfoText(playerid, 4500, "Mission 8~n~FIRE!");
			     PlayerTextDrawSetStringEX(playerid, pMissionTD[playerid], "~y~Mission 8 - Fire!~n~~w~a building in San Fierro is under ~r~fire~w~!~n~~w~head to the fire dept now!");
                 MissionObjects[playerid][0]=CreatePlayerObject(playerid, 18689, -2692.59, 259.75, 10.95, 0.00, 0.00, 0.00);
                 MissionObjects[playerid][1]=CreatePlayerObject(playerid, 18689, -2656.93, 251.55, 10.95, 0.00, 0.00, 0.00);
                 MissionObjects[playerid][2]=CreatePlayerObject(playerid, 18689, -2656.87, 246.74, 10.95, 0.00, 0.00, 0.00);
                 MissionObjects[playerid][3]=CreatePlayerObject(playerid, 18689, -2656.95, 243.09, 10.95, 0.00, 0.00, 0.00);
                 MissionObjects[playerid][4]=CreatePlayerObject(playerid, 18689, -2656.84, 258.00, 10.95, 0.00, 0.00, 0.00);
                 MissionObjects[playerid][5]=CreatePlayerObject(playerid, 18689, -2660.46, 259.68, 10.95, 0.00, 0.00, 0.00);
                 MissionObjects[playerid][6]=CreatePlayerObject(playerid, 18689, -2668.37, 259.66, 10.95, 0.00, 0.00, 0.00);
                 MissionObjects[playerid][7]=CreatePlayerObject(playerid, 18689, -2677.94, 259.64, 10.95, 0.00, 0.00, 0.00);
                 MissionObjects[playerid][8]=CreatePlayerObject(playerid, 18689, -2686.52, 259.82, 10.95, 0.00, 0.00, 0.00);
                 MissionObjects[playerid][9]=CreatePlayerObject(playerid, 18689, -2689.38, 259.96, 7.87, 0.00, 0.00, 0.00);
                 MissionObjects[playerid][10]=CreatePlayerObject(playerid, 18689, -2679.93, 260.10, 7.87, 0.00, 0.00, 0.00);
                 MissionObjects[playerid][11]=CreatePlayerObject(playerid, 18689, -2670.18, 260.52, 7.87, 0.00, 0.00, 0.00);
                 MissionObjects[playerid][12]=CreatePlayerObject(playerid, 18689, -2662.94, 260.15, 7.87, 0.00, 0.00, 0.00);
                 MissionObjects[playerid][13]=CreatePlayerObject(playerid, 18689, -2656.00, 252.03, 7.87, 0.00, 0.00, 0.00);

                 MissionObjects[playerid][14]=CreatePlayerObject(playerid, 18727, -2692.59, 259.75, 10.95, 0.00, 0.00, 0.00);
                 MissionObjects[playerid][15]=CreatePlayerObject(playerid, 18727, -2656.93, 251.55, 10.95, 0.00, 0.00, 0.00);
                 MissionObjects[playerid][16]=CreatePlayerObject(playerid, 18727, -2656.87, 246.74, 10.95, 0.00, 0.00, 0.00);
                 MissionObjects[playerid][17]=CreatePlayerObject(playerid, 18727, -2656.95, 243.09, 10.95, 0.00, 0.00, 0.00);
                 MissionObjects[playerid][18]=CreatePlayerObject(playerid, 18727, -2656.84, 258.00, 10.95, 0.00, 0.00, 0.00);
                 MissionObjects[playerid][19]=CreatePlayerObject(playerid, 18727, -2660.46, 259.68, 10.95, 0.00, 0.00, 0.00);
                 MissionObjects[playerid][20]=CreatePlayerObject(playerid, 18727, -2668.37, 259.66, 10.95, 0.00, 0.00, 0.00);
                 MissionObjects[playerid][21]=CreatePlayerObject(playerid, 18727, -2677.94, 259.64, 10.95, 0.00, 0.00, 0.00);
                 MissionObjects[playerid][22]=CreatePlayerObject(playerid, 18727, -2686.52, 259.82, 10.95, 0.00, 0.00, 0.00);
                 MissionObjects[playerid][23]=CreatePlayerObject(playerid, 18727, -2689.38, 259.96, 7.87, 0.00, 0.00, 0.00);
                 MissionObjects[playerid][24]=CreatePlayerObject(playerid, 18727, -2679.93, 260.10, 7.87, 0.00, 0.00, 0.00);
                 MissionObjects[playerid][25]=CreatePlayerObject(playerid, 18727, -2670.18, 260.52, 7.87, 0.00, 0.00, 0.00);
                 MissionObjects[playerid][26]=CreatePlayerObject(playerid, 18727, -2662.94, 260.15, 7.87, 0.00, 0.00, 0.00);
                 MissionObjects[playerid][27]=CreatePlayerObject(playerid, 18727, -2656.00, 252.03, 7.87, 0.00, 0.00, 0.00);
			     TogglePlayerDynamicCP(playerid, MissionCP[57], true);
                 Streamer_AppendArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[57], E_STREAMER_PLAYER_ID, playerid);
		   }
		   case 8:
		   {
			   SendInfoText(playerid, 4500, "Mission 9~n~Underwater treasure!");
			   PlayerTextDrawSetStringEX(playerid, pMissionTD[playerid], "~y~Mission 9 - Underwater treasure~n~~w~There is a ~r~hoax ~w~about a ~y~treasure ~w~that is hidden somewhere under the sea!~n~Lets try to ~g~find it!");
			   SetTimerEx("mission9_", 5000, false, "i", playerid);

			   TogglePlayerDynamicCP(playerid, MissionCP[60], true);
               Streamer_AppendArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[60], E_STREAMER_PLAYER_ID, playerid);

               MissionObjects[playerid][0]=CreatePlayerObject(playerid, 2332, 1224.9714, -810.8404, 1083.4688,  357.0000, 0.0000, 91.0000);

		   }
		   default:
		   {
               PlayerInfo[playerid][Mission]=0;
			   SendInfoText(playerid, 4500, "Mission 1~n~Los Santos Mall");
			   PlayerTextDrawSetStringEX(playerid, pMissionTD[playerid], "~y~Mission 1 - Los Santos Mall~n~~w~In this mission you are going to blow up ~r~los santos mall");
			   SetTimerEx("mission1_", 7*1000, false, "i", playerid);
			   TogglePlayerDynamicCP(playerid, MissionCP[0], true);
               Streamer_AppendArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[0], E_STREAMER_PLAYER_ID, playerid);
		   }
	 }
	 PlayerTextDrawShow(playerid, pMissionTD[playerid]);
     new str[128];
     format(str, sizeof(str), "{6F6AA6}» Mission « {294FC2}%s has joined the Mission {6F6AA6}(/Mission)", pName[playerid]);
     SendClientMessageToAll(LIGHTBLUE, str);
	 SetPVarInt(playerid, "MissionProgress", 1);
	 if(GetPVarInt(playerid, "FLY"))
	 {
        DeletePVar(playerid, "FLY");
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z), SetPlayerPos(playerid, x, y, z+3), ClearAnimations(playerid);
	 }
	 return 1;
}

CMD:troll(playerid, params[])
{
    if(!IsAdmin(playerid, 6)) return SendMsg(playerid, 5);
	new Id;
	if(sscanf(params, "u", Id)) return SendClientMessage(playerid, RED, ""RED2_""RED_"» Error « {BABABA}"RED_" /troll <PlayerID>");
    if(!IsPlayerConnected(Id))  return SendWarning(playerid, "{BABABA}This player is not connected");
	SetPVarInt(Id, "TROLLED", true);
	new str[128];
	format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}%s has been TROLLED", pName[Id]);
	SendClientMessage(playerid, AdminInfo, str);
	return 1;
}
CMD:untroll(playerid, params[])
{
    if(!IsAdmin(playerid, 6)) return SendMsg(playerid, 5);
	new Id;
	if(sscanf(params, "u", Id)) return SendClientMessage(playerid, RED, ""RED2_""RED_"» Error « {BABABA}"RED_" /untroll <PlayerID>");
    if(!IsPlayerConnected(Id))  return SendWarning(playerid, "{BABABA}This player is not connected");
	DeletePVar(Id, "TROLLED");
	new str[128];
	format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}%s has been unTROLLED", pName[Id]);
	SendClientMessage(playerid, AdminInfo, str);
	return 1;
}
CMD:addpickup(playerid)
{
    if(!IsAdmin(playerid, 6)) return SendMsg(playerid, 5);
    ShowPlayerDialog(playerid, 19889, DIALOG_STYLE_LIST, "{C8FF00}Pickup creator", "Health\nArmour\nSawn-Off\nDeagle\nSniper\nM4\nGrenades\nSatchels\nShotgun\nTec 9\nParachute\nFire Extinguisher\nSpray Can\nChainsaw\nKnife\nShovel\nKatana\nBaseball bat\nNightstick\nPool cue\nGolf Club\nFlowers\nCane\nBrass knuckles\nDouble-ended dildo\nDildo\nVibrator\nSilver vibrator\nCombat shotgun\nMicro Uzi", "Add", "Exit");
	return 1;
}
CMD:deletepickup(playerid)
{
    if(!IsAdmin(playerid, 6)) return SendMsg(playerid, 5);
    new a=0;
	for(new x=0; x<MAX_C_PICKUPS; x++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.00, wPickup[x][WPos][0], wPickup[x][WPos][1], wPickup[x][WPos][2]))
		{
		   fremove(PickupPath(x));
           wPickup[x][Model_]=0;

		   DestroyDynamicRaceCP(wWPickup[x]);
		   DestroyDynamicPickup(wWPickup[x]);
		   a=1;
		   wPickup[x][Spawn]=0;
    	   SendClientMessage(playerid, 0x329DC7FF, "*** A pickup has been removed");
    	   wPickup[x][WPos][0]=-1;
    	   wPickup[x][WPos][1]=-1;
    	   wPickup[x][WPos][2]=-1;
    	   wPickup[x][Wworld]=0;
		   break;
		}
	}
    if(a==0) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}No pickups in your range to remove");
	return 1;
}
CMD:raceeditor(playerid)
{
  if(GetPVarInt(playerid, "MissionProgress") || IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
  if(PlayerInfo[playerid][pRaceAdmin] == 0) return SendMsg(playerid, 5);
  if(GetPVarInt(playerid, "RaceEditing")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You are already in the race construction mode");
  ShowPlayerDialog(playerid, 16551, DIALOG_STYLE_LIST, "Race Construction", "Create a new race\nView Created Races\nDelete a Race", "Select", "Exit");
  return 1;
}
CMD:stopediting(playerid)
{
  if(PlayerInfo[playerid][pRaceAdmin] == 0 && PlayerInfo[playerid][pOurAdmin] == 0) return SendMsg(playerid, 5);
  if(!GetPVarInt(playerid, "RaceEditing") && !GetPVarInt(playerid, "PourEditing")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You are not in construction mode");
  ShowPlayerDialog(playerid, 452, DIALOG_STYLE_LIST, "Race Construction", "Exit & Save\nExit Without Saving", "Select", "Exit");
  return 1;
}


CMD:load(playerid)
{
  new Float:pos[3];
  GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
  Streamer_UpdateEx(playerid, pos[0], pos[1], pos[2]);
  return 1;
}

CMD:vc(playerid)
{
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) != 2) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be in a vehicle to use this command");
    new v = GetPlayerVehicleID(playerid);
	if(v!= PlayerCar(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be inside your own vehicle to use this command!");
	if(pLevel[playerid][driving] < 10) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You need at least Level 10 in Driving to use this command!");
    new str[256], engine, llights, alarm, doors, bonnet, boot, objective;
    GetVehicleParamsEx(v, engine, llights, alarm, doors, bonnet, boot, objective);
    format(str, sizeof(str), "{AABEFA}Lights %s\n{AABEFA}Alarm %s\n{AABEFA}Lock %s\n{AABEFA}Bonnet %s\n{AABEFA}Boot %s"
	, IsOn(llights), IsOn(alarm), IsOn(doors), IsOn(bonnet), IsOn(boot));
	ShowPlayerDialog(playerid, 17789, DIALOG_STYLE_LIST, "{AABEFA}Vehicle Control Panel", str, "Select", "Exit");
	return 1;
}

stock IsOn(param)
{
  new str[20];
  if(param == 1) str="{AAFAC9}ON";
  else  str="{FAAAAA}OFF";
  return str;
}
CMD:myuserid(playerid)
{
  new str[50];
  format(str, sizeof(str), "Your user ID is %d", PlayerInfo[playerid][UserID]);
  SendClientMessage(playerid, RED, str);
  return 1;
}
CMD:tuning(playerid)
{
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");

   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);

   new m=CheckTeleMoney(playerid, 3000);
   if(GetPlayerMoneyEx(playerid) < m) return SendMoneyMSG(playerid, m);
   GivePlayerMoneyEX(playerid, m*-1, 1);

   TeleportPlayer(playerid, 1532.5546, -1437.2131, 12.6000, 90.0, 0);
   SendTeleMsg(playerid, "VIP Tuning Garage", "Tuning");

   return 1;

}
CMD:gangcreate(playerid, params[])
{
    if((GetPVarInt(playerid, "LOGGED")) == 2) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be registered/logged in to use this command");
	if(PlayerInfo[playerid][pScore] < 500) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must have at least 500 score to create a gang");
    if(PlayerInfo[playerid][pGang] >= 0) return SendClientMessage(playerid, RED, "You are already in a gang");
    if(PlayerInfo[playerid][Muted] > 0)  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command while being muted!");

	new GangName[32];
	if(sscanf(params, "s[32]", GangName)) return SendClientMessage(playerid, RED, ""RED2_""RED_"» Error « {BABABA}"RED_" /gangcreate <name>");

	if(!strlen(GangName) || (strlen(GangName) > 22)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}gang name must be between 0 and 22 characters");
    if((strfind(GangName, "~", true) != -1))  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}An Invalid Character has been used");
    //if((strfind(GangName, "dod", true) != -1)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}An invalid character has been used");
   // if((strfind(GangName, "d0d", true) != -1)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}An invalid character has been used");
   // if((strfind(GangName, "danger of death", true) != -1)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}An invalid character has been used");
    //if((strfind(GangName, "dangerofdeath", true) != -1)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}An invalid character has been used");
	new dd;
	for(new x=0; x<MAX_GANGS; x++)
	{
	  if(GangInfo[x][ID] > 0)
	  {
		  if(strlen(GangInfo[x][Name]) > 0)
		  {
			  if(!strcmp(GangName, GangInfo[x][Name]))
			  {
				 dd=1;
				 break;
			  }
		  }
	  }
	}
    if(dd > 0)  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This gang name is already in use!");



	new ba=GetTickCount() - TickCount[playerid][GangCreating];
    if ( ( ba ) < 3000*60 && ba > 0) return SendClientMessage( playerid, RED, ""RED_"» Error « {BABABA}You can create a gang only once in 3minutes!");
    TickCount[playerid][GangCreating] = GetTickCount();
    GangCreate(playerid, GangName);

    return 1;
}
CMD:GetTickCount(playerid)
{
	new str[144];
	format(str, sizeof(str), "tickcount %d", GetTickCount());
	SendClientMessage(playerid, -1, str);
	format(str, sizeof(str), "Tickcount %d", GetTickCount());
	SendClientMessage(playerid, -1, str);
	return 1;
}

CMD:gangname(playerid, params[])
{

      if(pLevel[playerid][gangster] < 10) return SendWarning(playerid, "{BABABA}You must have at least 10 Gangster Level to be able to rename a gang!");
      if((GetPVarInt(playerid, "LOGGED")) == 2) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be registered/logged in to use this command");
      if(PlayerInfo[playerid][Muted] > 0)  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command while being muted!");
   	  new ggname[32],
   	  gang = PlayerInfo[playerid][pGang],
      rank = PlayerInfo[playerid][pGangRank];

   	  if(gang < 0) return SendClientMessage(playerid, RED, "You are not in a gang");
   	  if(rank < 4) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Only gang leader can change the gang name");

      if(sscanf(params, "s[32]", ggname)) return SendClientMessage(playerid, RED, ""RED2_""RED_"» Error « {BABABA}"RED_" /gangname <newname>");

	  if(!strlen(ggname) || (strlen(ggname) > 22)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}gang name must be between 0 and 22 characters");
      if((strfind(ggname, "~", true) != -1))  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}An Invalid Character has been used");
      //if((strfind(ggname, "dod", true) != -1)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}An invalid character has been used");
      //if((strfind(ggname, "d0d", true) != -1)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}An invalid character has been used");
      //if((strfind(ggname, "danger of death", true) != -1)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}An invalid character has been used");
      //if((strfind(ggname, "dangerofdeath", true) != -1)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}An invalid character has been used");

	  new dd;
	  for(new x=0; x<MAX_GANGS; x++)
	  {
		  if(GangInfo[x][ID] > 0)
		  {
			  if(strlen(GangInfo[x][Name]) > 0)
			  {
				  if(!strcmp(ggname, GangInfo[x][Name]))
				  {
					 dd=1;
					 break;
				  }
			  }
		  }
	  }
	  if(dd > 0)  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This gang name is already in use!");
	  new str[128];

   	  format(str, sizeof(str), "{AA8202}» Gang action «{FFC307} Gang leader %s has renamed the gang to %s", pName[playerid], ggname);
  	  foreach (new i : Player) if(PlayerInfo[i][pGang] == gang) SendClientMessage(i, ORANGE, str);

	  new Query[168];
	  format(Query, sizeof(Query), "UPDATE `gangs` SET `GangName` = '%s' WHERE `GangID` = '%d'", Escape_String(ggname), GangInfo[gang][ID]);
	  mysql_query(GTADM, Query);
	  format(GangInfo[gang][Name], 32, "%s", ggname);
	  return 1;
}

CMD:gangcolors(playerid, params[])
{
	new type;
    if(sscanf(params, "D(1)", type)) return SendClientMessage(playerid, RED, ""RED2_""RED_"» Error « {BABABA}"RED_" /gangcolors <1/2>");
    if((GetPVarInt(playerid, "LOGGED")) == 2) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be registered/logged in to use this command");
    if(PlayerInfo[playerid][pGang] < 0) return SendClientMessage(playerid, RED, "You are not in a gang");
    if(PlayerInfo[playerid][pGangRank] < 3) return SendClientMessage(playerid, RED, "You must have at least rank 3 to change gang color");
	if(type == 1)
	{
	   if(gColCreated[playerid] !=1) CreategColor(playerid);
       SetPVarInt(playerid, "g_Col_p", 1);
	   SetGCOLSHOW(playerid);
	}
	else
	{
		format(STRING, sizeof(STRING), "");
		for(new x=0; x<101; x++)
		{
			 format(STRING, sizeof(STRING), "%s\n{%s}Color%d", STRING, PlayerColors_[x], x);
		}
		ShowPlayerDialog(playerid, 5748, DIALOG_STYLE_LIST, "GangColors", STRING, "Change", "Exit");
	}
	return 1;
}

CMD:gangcolor(playerid, params[])
{
      if((GetPVarInt(playerid, "LOGGED")) == 2) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be registered/logged in to use this command");
   	  new color, str[128],
   	  gang = PlayerInfo[playerid][pGang],
      rank = PlayerInfo[playerid][pGangRank];
   	  if(gang < 0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You are not in a gang");
   	  if(rank < 3) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must have at least rank 3 to change gang color");

      if(sscanf(params, "D(-1)", color)) return SendClientMessage(playerid, RED, ""RED2_""RED_"» Error « {BABABA}"RED_" /gangcolor <colorid>");
	  if((color == 204 || color == 206 || color == 207 || color == 208 || color == 209 || color == 210 || color == 211 || color == 212) && pLevel[playerid][gangster] < 20 && !IsAdmin(playerid, 1)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You need atleast 20 Gangster level to use this gang color!");
      if((color == 213 || color == 214 || color == 215 || color == 216 || color == 217) && pLevel[playerid][gangster] < 40 && !IsAdmin(playerid, 1)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You need atleast 40 Gangster level to use this gang color!");
	  if((color == 205) && pLevel[playerid][gangster] < 50 && !IsAdmin(playerid, 1)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You need atleast 50 Gangster level to use this gang color!");
      if(color > 217) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Invalid gang color");
	  if(color < 0) color=random(200);
   	  if(rank > 3) format(str, sizeof(str), "{AA8202}» Gang action «{FFC307} Gang Leader %s has changed the gang color.", pName[playerid]);
   	  if(rank == 3)format(str, sizeof(str), "{AA8202}» Gang action «{FFC307} Gang Co-Leader %s has changed the gang color.", pName[playerid]);
      new dd;
	  for(new x=0; x<MAX_GANGS; x++)
	  {
		  if(GangInfo[x][ID] > 0)
		  {
			  if(strlen(GangInfo[x][gColor]) > 0)
			  {
				  if(color == GangInfo[x][gColor] && CountGangZones(x) > 0)
				  {
					 dd=1;
					 break;
				  }
			  }
		  }
	  }
	  if(dd > 0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use the same color of a gang that has 1 or more turfs!");
      foreach (new i : Player)
      {
	 	 if(PlayerInfo[i][pGang] == gang)
	 	 {
	 	 	 SendClientMessage(i, ORANGE, str);
	 	     SendClientMessage(i, PlayerColors[color], "This is the new color of your gang...");
	 	 	 if(!Iter_Contains(InSumo, i) && !GetPVarInt(i, "inCTF") && !GetPVarInt(i, "Footballer") && !GetPVarInt(i, "GoingToAFK") && !GetPVarInt(i, "AFK") && !GetPVarInt(i, "CS") && Spawned[i] == 1 && !GetPVarInt(i, "DD") && !GetPVarInt(i, "CO") && aduty[i] == 0 && !GetPVarInt(playerid, "GhostMode") ) SetPlayerColor( i, PlayerColors[color] );
		 }
   	  }
   	  GangInfo[gang][gColor] = color;
   	  for(new i = 0; i != 354; i++ )
      {
         if(ZoneOwner[i] == gang) GangZoneShowForAll(GangZoneid[i], PlayerColors[color]);
	  }
	  new Query[200];
	  format(Query, sizeof(Query), "UPDATE `gangs` SET `GangColor` = %d WHERE `GangID` = '%d'", color, GangInfo[gang][ID]);
      mysql_query(GTADM, Query);
	  return 1;
}
CMD:gangkick(playerid, params[])
{
      if((GetPVarInt(playerid, "LOGGED")) == 2) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be registered/logged in to use this command");
   	  new str[24];
      if(PlayerInfo[playerid][pGang] < 0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You are not in a gang.");
  	  if(PlayerInfo[playerid][pGangRank] < 3) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must have at least rank 3 to kick other members");
      if(sscanf(params, "s[24]", str)) return SendClientMessage(playerid, RED, ""RED2_""RED_"» Error « {BABABA}"RED_" /gangkick <name>");
  	  if(!strcmp(pName[playerid], str, true)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant kick yourself!");

	  new query[200];
	  format(query, sizeof(query), "SELECT `Gang`, `GangRank` FROM `users` WHERE `Name` = '%s' ORDER BY `Score` LIMIT 1", Escape_Name(str));
      mysql_tquery(GTADM, query, "GangKick", "ds", playerid, str);
      return 1;
}
CMD:gangjoin(playerid, params[])
{
      if((GetPVarInt(playerid, "LOGGED")) == 2) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be registered/logged in to use this command");
      if(PlayerInfo[playerid][pGang] >= 0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You are already in a gang");
      if(Invited[playerid] < 0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You are not invited to any gang");

      new str[128], g=Invited[playerid];
      format(str, sizeof(str), "{AA8202}» Gang action « {FFC307}%s has joined your gang.", pName[playerid]);
      foreach (new i : Player) if(PlayerInfo[i][pGang] == g) SendClientMessage(i, ORANGE, str);

      format(str, sizeof(str), "{AA8202}» Gang action «{FFC307} You have joined the gang %s. ", GangInfo[g][Name]);
      SendClientMessage(playerid, ORANGE, str);

      PlayerInfo[playerid][pGang] = g;
      GangInfo[g][gMembers]++;
      PlayerInfo[playerid][pGangRank] = 0;
	  SetPlayerColor(playerid, PlayerColors[GangInfo[g][gColor]]);

      format(str, sizeof(str), "UPDATE `users` SET `Gang` = %d, `GangRank` = 0 WHERE `UserID` = '%d'", g, PlayerInfo[playerid][UserID]);
      mysql_query(GTADM, str);

      format(str, sizeof(str), "UPDATE `gangs` SET `Members` = %d WHERE `GangID` = '%d'", GangInfo[g][gMembers], GangInfo[g][ID]);
      mysql_query(GTADM, str);

      Invited[playerid] = -255;
      return 1;
}
CMD:gangleave(playerid, params[])
{
      if((GetPVarInt(playerid, "LOGGED")) == 2) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be registered/logged in to use this command");
      if(PlayerInfo[playerid][pGang] < 0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You are not in a gang");

      new str[128], g=PlayerInfo[playerid][pGang], r=PlayerInfo[playerid][pGangRank];

      format(str, sizeof(str), "{AA8202}» Gang action «{FFC307} You have left the gang %s. ", GangInfo[g][Name]);
      SendClientMessage(playerid, ORANGE, str);

      GangInfo[g][gMembers]--;
      new Query[256];
      if(GangInfo[g][gMembers] == 0)
      {
           format(Query, sizeof(Query), "DELETE FROM `gangs` WHERE GangID = %d", g);
           mysql_query(GTADM, Query);
           format(Query, sizeof(Query), "UPDATE `gangzones` SET `ZoneGang` = -255 WHERE `ZoneGang` = '%d'", g);
           mysql_query(GTADM, Query);
           for(new i = 0; i != 354; i++ ) if(ZoneOwner[i] == g) ZoneOwner[i]=-1;
 	       for(new i=0; i<MAX_BASES; i++)
	       {
	           if(GangBases[i][gbGang] == g)
			   {
					 DestroyDynamicMapIcon(GangBases[i][gbIcon]);
					 GangBases[i][gbIcon] = CreateDynamicMapIcon(GangBases[i][gbPos][0], GangBases[i][gbPos][1], GangBases[i][gbPos][2], 44, 0, 0, 0, -1, 500.0);
                     GangBases[i][gbGang]=-1;
    				 format(Query, sizeof(Query), "UPDATE `gangbases` SET `gbGang` = -255 WHERE `BaseID` = '%d'", i);
    				 mysql_query(GTADM, Query);


					 DestroyDynamicMapIcon(GangBases[i][gbPickup]);
    				 GangBases[i][gbPickup]=CreateDynamicPickup(1273, 1, GangBases[i][gbPos][0], GangBases[i][gbPos][1], GangBases[i][gbPos][2], 0, 0);

			   }
           }
      }
      else
      {
           format(Query, sizeof(Query), "UPDATE `gangs` SET `Members` = %d WHERE `GangID` = '%d'", GangInfo[g][gMembers], g);
           mysql_query(GTADM, Query);
      }
      PlayerInfo[playerid][pGang] = -255;

      PlayerInfo[playerid][pGangRank] = 0;
	  SetPlayerColor(playerid, PlayerColors[random(200)]);

      format(Query, sizeof(Query), "UPDATE `users` SET `Gang` = -255, `GangRank` = 0 WHERE `Name` = '%s'", pEscName[playerid]);
      mysql_query(GTADM, Query);

      Invited[playerid] = -255;

      format(str, sizeof(str), "{AA8202}» Gang action «{FFC307} %s has left your gang", pName[playerid]);
      foreach (new i : Player) if(PlayerInfo[i][pGang] == g) SendClientMessage(i, ORANGE, str);

      if(r > 3)
      {
  	    format(Query, sizeof(Query), "SELECT `Name` FROM `users` WHERE `Gang` = '%d' ORDER BY `GangRank` DESC LIMIT 1", g);
        mysql_tquery(GTADM, Query, "GangLeave", "dd", playerid, g);
      }
      pInGW[playerid]=0;
	  return 1;
}
CMD:gangattack(playerid, params[])
{
      //if(IsInFight(playerid)) return SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You cant use this command during a fight.");
//      if(IsInFight(playerid)) return SendMsg(playerid, 2);
	  if((GetPVarInt(playerid, "LOGGED")) == 2) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be registered/logged in to use this command");
   	  if(PlayerInfo[playerid][pGang] < 0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You are not in a gang.");
   	  new gang = PlayerInfo[playerid][pGang];
      if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail");
      if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
      if(aduty[playerid] == 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command while on admin duty.");

   	  if(GetPlayerGangZone(playerid) < 0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You are not in a valid gang zone.");
//	  if(CountGangZones(gang) >= 150) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Every gang can only have maximum amount of 150 turfs!");
   	  if(inGw[gang] > 0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You have to wait untill the current gang war ends.");
   	  new zone = GetPlayerGangZone(playerid);
   	  if(aZone[zone] > 0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This turf is already under attack!");
   	  new AttackedGang = 0;
   	  new count = 0, count2=0, allow;

      new m2=GetTickCount() - ZoneAttack[zone];
   	  if(playerid == PowerUpPlayer[4])
   	  {
        if ( m2  < 5000*60 && m2 > 0)
	    {
	      new str[128];
	      format(str, sizeof(str), ""RED_"» Error « {BABABA}Every turf can be attacked once in 5 minutes (%d seconds left)", 300-floatround(m2/1000));
		  SendClientMessage( playerid, RED2, str );
		}
        return 1;
      }

   	  new m=GetTickCount() - ZoneAttack[zone];
      if ( m  < 10000*60 && m > 0)
	  {
	    new str[128];
	    format(str, sizeof(str), ""RED_"» Error « {BABABA}Every turf can be attacked once in 10 minutes (%d seconds left)", 600-floatround(m/1000));
		SendClientMessage( playerid, RED2, str );
	    return 1;
	  }
   	  if(ZoneOwner[zone] == gang) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This turf is already yours");
   	  for(new i=0; i<MAX_GANGS; i++) if(GangInfo[i][ID] == ZoneOwner[zone]) AttackedGang = i;

   	  if(AttackedGang > 0 && inGw[AttackedGang] > 0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This gang already have a gangwar");
      new a2=(GetTickCount() - GangTK[gang]);
	  if(playerid == PowerUpPlayer[4])
	  {
        if ( a2 < 150000 && a2 > 0 && LastGangAttack[gang] == AttackedGang)
	    {
			 new str[128];
			 format(str, sizeof(str), ""RED_"» Error « {BABABA}Your gang must wait %d seconds before doing a gang-war with the same gang again!", 150-floatround(a2/1000));
			 SendClientMessage( playerid, RED2, str );
		}
	    return 1;
	  }

	  new a=(GetTickCount() - GangTK[gang]);
      if ( a < 300000 && a > 0 && LastGangAttack[gang] == AttackedGang)
	  {
			 new str[128];
			 format(str, sizeof(str), ""RED_"» Error « {BABABA}Your gang must wait %d seconds before doing a gang-war with the same gang again!", 300-floatround(a/1000));
			 SendClientMessage( playerid, RED2, str );
			 return 1;
	  }

   	  foreach (new i : Player) if(PlayerInfo[i][pGang] == AttackedGang) count2 ++;
   	  for(new i=0; i<sizeof(GangBases); i++)
   	  {
		   if(GangBases[i][gbGang] > 0)
		   {
			  if(GangBases[i][zID] == zone)
			  {
				if(count2 == 0) allow=777;
				else allow=888;
				break;
			  }
		   }
   	  }
   	  if(allow == 777) return SendClientMessage( playerid, RED, ""RED_"» Error « {BABABA}You cant attack a gang base of an inactive gang.");
	  new dinmamma;
   	  foreach (new i : Player)
      {
	    if(PlayerInfo[i][pGang] == gang && GetPlayerGangZone(i) == zone)
		{
		  count ++;
	      if(g_IsPaused[i] == true || GetPVarInt(i, "AFK")) dinmamma=1;
	    }
	  }
	  if(dinmamma == 1 && count == GwMini) return SendClientMessage( playerid, RED, ""RED_"» Error « {BABABA}You cant start the Gangwar with an AFK or a Paused member.");
   	  if(count >= GwMini)
   	  {
         GwEndTime[gang]=150;
         GwEndON[gang]=1;
   	     new location[50];
   	     GetPlayer3DZone(playerid, location, sizeof(location));
   	     new str1[144], str2[144], str3[144], str4[144], str5[144];
   	     aZone[zone] = gang;
   	     GangZoneFlashForAll(GangZoneid[zone], PlayerColors[GangInfo[gang][gColor]]);
		 if(allow == 888)
		 {
   	        GwTime[gang][0] = 10;
   	        GwTime[gang][1] = 0;
   	        format(str1, sizeof(str1), "{AA8202}» Gang action «{FFC307} %s calls all gang members together for a gang war", pName[playerid]);
   	        format(str2, sizeof(str2), "{AA8202}» Gang action «{FFC307} Your gang is capturing a gang base (Location: %s)", location);
   	        format(str3, sizeof(str3), "{AA8202}» Gang action «{FFC307} Your gang base is under attack by %s (Location: %s)", GangInfo[gang][Name], location);

			format(str4, sizeof(str4), "{AA8202}» Gang action «{FFC307} Your gang is ~r~Taking over~y~ a Gang Base in %s.", location);
			format(str5, sizeof(str5), "{AA8202}» Gang action «{FFC307}Your Gang base is ~r~under attack~r~ by ~y~%s's Gang.", GangInfo[gang][Name]);
		 }
		 else
		 {
   	        GwTime[gang][0] = 5;
   	        GwTime[gang][1] = 20;
   	        format(str1, sizeof(str1), "{AA8202}» Gang action «{FFC307} %s calls all gang members together for a gang war", pName[playerid]);
   	        format(str2, sizeof(str2), "{AA8202}» Gang action «{FFC307} Your gang is capturing a turf (Location: %s)", location);
   	        format(str3, sizeof(str3), "{AA8202}» Gang action «{FFC307} One of your turfs is under attack by %s (Location: %s)", GangInfo[gang][Name], location);

			format(str4, sizeof(str4), "~y~Your gang is ~r~Taking Over~y~ a turf in ~g~%s", location);
			format(str5, sizeof(str5), "~y~One of your turfs is ~r~under attack~r~ by ~y~%s's Gang in ~g~%s", GangInfo[gang][Name], location);
		 }
         GwTurf[gang]=zone;
         GwTurf[AttackedGang]=zone;
         GwKills[gang]=0;
         GwKills[AttackedGang]=0;
   	     inGw[gang] = 1;
   	     inGw[AttackedGang] = 2;
   	     LastGangAttack[gang]=AttackedGang;
   	     LastGangAttack[AttackedGang]=gang;
   	     GwTimer[gang] = SetTimerEx("GangWarTime", 1000, true, "ddd", gang, AttackedGang, allow);
   	     foreach (new i : Player)
   	     {
   	         if(PlayerInfo[i][pGang] == gang)
   	         {
   	             if(GetPlayerGangZone(playerid) != zone) SendInfoText(i, 3000, "~y~Help your gang");
   	             if(GetPlayerGangZone(playerid) == zone) SetPlayerWantedLevelEx(i, GetPVarInt(i, "Wanted")+4), SendInfoText(i, 2000, "Gang war ~y~started!");
   	             SendClientMessage(i, ORANGE, str1);
   	             SendClientMessage(i, ORANGE, str2);
   	             Streamer_AppendArrayData(STREAMER_TYPE_MAP_ICON , ZoneIcon[zone], E_STREAMER_PLAYER_ID, i);
                 SendpInfo(i, str4, 5000);
                 pGwKills[i]=0;
                 pGwDeaths[i]=0;
                 pInGW[i]=0;
                 if(GetPlayerGangZone(i) == zone)
                 {
                  if(pLevel[playerid][gangster] >= 15) SetPlayerArmour(playerid, 100);
                  if(pLevel[playerid][gangster] >= 30) GivePlayerWeaponEX(playerid, 34, 9999), GivePlayerWeaponEX(playerid, 26, 9999), GivePlayerWeaponEX(playerid, 16, 9999);
				 }
   	         }
   	         if(PlayerInfo[i][pGang] == AttackedGang)
   	         {
 	 	 		  SendClientMessage(i, ORANGE, str3);
           	 	  if(GetPlayerGangZone(playerid) != zone) SendInfoText(i, 3000, "~r~Gang ");
                  Streamer_AppendArrayData(STREAMER_TYPE_MAP_ICON , ZoneIcon[zone], E_STREAMER_PLAYER_ID, i);
                  SendpInfo(i, str5, 5000);
                  pGwKills[i]=0;
                  pGwDeaths[i]=0;
                  pInGW[i]=0;
   	         }
   	     }

   	  }
   	  else
   	  {
   	     new str1[128];
   	     format(str1, sizeof(str1), ""RED_"» Error « {BABABA}There must be at least %d gang members in the turf to start a gang war", GwMini);
   	     SendClientMessage(playerid, RED, str1);
   	  }
   	  return 1;
}
CMD:ganginvite(playerid, params[])
{
   	 new id;
     if((GetPVarInt(playerid, "LOGGED")) == 2) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be registered/logged in to use this command");
   	 new gang = PlayerInfo[playerid][pGang],
     rank = PlayerInfo[playerid][pGangRank];
     if(sscanf(params, "u", id)) return SendClientMessage(playerid, RED, "usage : "GRAY_"/ganginvite <playerid>");
     if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
     if(IsPlayerNPC(id) && !strcmp(pName[id], "Jonny")) return SendNpcPM(playerid, "do you think that i gonna join your noob gang?"), GiveMedal(playerid, 24);
     if(IsPlayerNPC(id)) return 0;
	 if(gang < 0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You are not in a gang.");
	 if(GangInfo[gang][gMembers] > 29) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Your gang is full!");
	 if(rank < 1) return SendClientMessage(playerid, RED, "You must have at least rank 1 to invite other players");
	 if(PlayerInfo[id][pGang] == gang) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA} This player is already joined your gang");
	 if(PlayerInfo[id][pGang] >= 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA} This player is already in a gang");
     if((GetPVarInt(id, "LOGGED")) == 2) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This player is not registered");

	 new str2[128];
	 format(str2, sizeof(str2), "{AA8202}» Gang action «{FFC307} You have been invited by %s to join the gang %s {AA8202}(/GangJoin)", pName[playerid], GangInfo[PlayerInfo[playerid][pGang]][Name]);
	 SendClientMessage(id, ORANGE, str2);

	 format(str2, sizeof(str2), "{AA8202}» Gang action «{FFC307} You have invited %s to join your gang", pName[id]);
	 SendClientMessage(playerid, ORANGE, str2);

	 Invited[id] = gang;
	 return 1;
}
CMD:gangrank(playerid, params[])
{
      if((GetPVarInt(playerid, "LOGGED")) == 2) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be registered/logged in to use this command");
      if(PlayerInfo[playerid][pGang] < 0) return SendClientMessage(playerid, RED, "You are not in a gang");
  	  if(PlayerInfo[playerid][pGangRank] < 3) return SendClientMessage(playerid, RED, "You must have at least rank 3 to rank other members");
   	  new str[24], rank;
      if(sscanf(params, "s[24]d", str, rank)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Usage /gangrank <name> <rank 1-3>");
  	  if(!strcmp(pName[playerid], str, true)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant rank yourself!");
	  if(rank < 0 || rank > 3) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Usage /gangrank <name> <rank 1-3>");
	  if(PlayerInfo[playerid][pGangRank] != 4 && rank == 3) return SendWarning(playerid, "Only the gang leader can make someone a co-leader.");
	  new query[200];
	  format(query, sizeof(query), "SELECT `Gang`, `GangRank` FROM `users` WHERE `Name` = '%s' ORDER BY `Score` LIMIT 1", Escape_Name(str));
      mysql_tquery(GTADM, query, "GangRank", "dsd", playerid, str, rank);
      return 1;
}
CMD:gangleader(playerid, params[]) return cmd_gangsetleader(playerid, params);
CMD:gangsetleader(playerid, params[])
{
      if((GetPVarInt(playerid, "LOGGED")) == 2) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be registered/logged in to use this command");
      if(PlayerInfo[playerid][pGang] < 0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You are not in a gang");
  	  if(PlayerInfo[playerid][pGangRank] < 4) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You are not the gang leader");

   	  new str[24];
      if(sscanf(params, "s[24]", str)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Usage /gangrank <gangsetleader> ");
  	  if(!strcmp(pName[playerid], str, true)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant rank yourself!");
	  new query[200];
	  format(query, sizeof(query), "SELECT `Gang`, `GangRank` FROM `users` WHERE `Name` = '%s' ORDER BY `Score` LIMIT 1", Escape_Name(str));
      mysql_tquery(GTADM, query, "GangLeader", "ds", playerid, str);


      return 1;
}/*
CMD:ganginfo(playerid, params[])
{
  if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
  if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
  new str[256];
  if (isnull(params))
  {
	  new gang=PlayerInfo[playerid][pGang];
	  if(gang > 0)
	  {
		  new str2[64], str3[64];
		  new a=GetGangBase(gang);
		  if(a >= 0) format(str3, sizeof(str3), "%s", GangBases[a][BaseName]);
		  else format(str3, sizeof(str3), "None");
          GangInfoView[playerid] = gang;
          format(str, sizeof(str), "\t%s\t\n\n\nGang ID: %d\n\nGang leader: %s\n\nMembers: %d\n\nCaptured Turfs: %d\n\nGang Base: %s\n\nMoney: $%d", GangInfo[gang][Name], GangInfo[gang][ID], GangInfo[gang][leader], GangInfo[gang][gMembers], CountGangZones(gang), str3, GangInfo[gang][gBank]);
		  format(str2, sizeof(str2), "%s", GangInfo[gang][Name]);
          ShowPlayerDialog(playerid, 687, DIALOG_STYLE_MSGBOX, str2, str, "Members", "cancel");
	  }
	  else SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}invalid gang id use (/gangs) to check the list of available gangs!");
  }
  else
  {
	  new gang=strval(params);
	  if(gang > 0)
	  {
		  if((GangInfo[gang][gMembers] > 0) && (gOnlineMembersCount(gang) > 0))
		  {
		 	  new str2[64], str3[64];
			  new a=GetGangBase(gang);
		 	  if(a >= 0) format(str3, sizeof(str3), "%s", GangBases[a][BaseName]);
  	          else format(str3, sizeof(str3), "None");
          	  GangInfoView[playerid] = gang;
          	  format(str, sizeof(str), "\t%s\n\n\nGang ID: %d\n\nGang leader: %s\n\nMembers: %d\n\nCaptured Turfs: %d\n\nGang Base: %s\n\nMoney: $%d", GangInfo[gang][Name], GangInfo[gang][ID], GangInfo[gang][leader], GangInfo[gang][gMembers], CountGangZones(gang), str3, GangInfo[gang][gBank]);
		      format(str2, sizeof(str2), "%s (%d)", GangInfo[gang][Name], gang);
          	  ShowPlayerDialog(playerid, 687, DIALOG_STYLE_MSGBOX, str2, str, "Members", "cancel");
		  }
		  else SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}invalid gang id use (/gangs) to check the list of available gangs!");
	  }
	  else SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}invalid gang id use (/gangs) to check the list of available gangs!");
  }
  return 1;
}*/
CMD:ganginfo(playerid, params[])
{
  if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
  if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
  if(GetPVarInt(playerid, "gInfoStating"))
  {
    for(new i=0; i<30; i++) PlayerTextDrawDestroy(playerid, pGwTD2[playerid][i]);
    for(new i=0; i<7; i++) PlayerTextDrawDestroy(playerid, pGwTD1[playerid][i]);
	DeletePVar(playerid, "gInfoStating");
  }

  if (isnull(params))
  {
	  new gang=PlayerInfo[playerid][pGang];
	  if(gang > 0)
	  {
		  new query[200];
		  format(query, sizeof(query), "SELECT `Name`, `GangRank` FROM `users` WHERE `Gang` = %d ORDER BY `GangRank` DESC LIMIT 30", gang);
		  mysql_tquery(GTADM, query, "ShowGangInfo", "dd", playerid, gang);
	  }
	  else SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Invalid gang id use (/gangs) to check the list of available gangs!");
  }
  else
  {
	  new gang=strval(params);
	  if(gang > 0)
	  {
		  if((GangInfo[gang][gMembers] > 0) && (gOnlineMembersCount(gang) > 0))
		  {

			  new query[200];
		      format(query, sizeof(query), "SELECT `Name`, `GangRank` FROM `users` WHERE `Gang` = %d ORDER BY `GangRank` DESC LIMIT 30", gang);
			  mysql_tquery(GTADM, query, "ShowGangInfo", "dd", playerid, gang);
		  }
		  else SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Invalid gang id use (/gangs) to check the list of available gangs!");
	  }
	  else SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Invalid gang id use (/gangs) to check the list of available gangs!");
  }
  return 1;
}

forward ShowGangInfo(playerid, gang);
public ShowGangInfo(playerid, gang)
{
	new rows, fields;
	new name[24], rank;
    cache_get_row_count(rows);
    cache_get_field_count(fields);
    if(rows > 0)
    {
		new str3[128], string[128];
		CreateGangInfoTD(playerid);
		new a=GetGangBase(gang);
		if(a >= 0) format(str3, sizeof(str3), "Gang base: ~w~%s", GangBases[a][BaseName]);
		else format(str3, sizeof(str3), "Gang base: ~w~None");
		PlayerTextDrawSetString(playerid, pGwTD1[playerid][6], str3);

		format(str3, sizeof(str3), "~l~%s", GangInfo[gang][Name]);
		PlayerTextDrawSetString(playerid, pGwTD1[playerid][1], str3);


		format(str3, sizeof(str3), "Gang ID: ~w~%d", gang);
		PlayerTextDrawSetString(playerid, pGwTD1[playerid][2], str3);

		format(str3, sizeof(str3), "Turfs: ~w~%d", CountGangZones(gang));
		PlayerTextDrawSetString(playerid, pGwTD1[playerid][3], str3);

		format(str3, sizeof(str3), "Bank: ~w~$%d", GangInfo[gang][gBank]);
		PlayerTextDrawSetString(playerid, pGwTD1[playerid][4], str3);

		format(str3, sizeof(str3), "Members (%d):", rows);
		PlayerTextDrawSetString(playerid, pGwTD1[playerid][5], str3);

		for(new x=0; x<7; x++)
		{
			 PlayerTextDrawShow(playerid, pGwTD1[playerid][x]);
		}
		for(new x=0; x<rows; x++)
		{
		  if(x < 30)
		  {
			cache_get_value_index(x, 0, name);
			cache_get_value_index_int(x, 1, rank);
			new rankstr[15];
			if(rank == 4) rankstr="~h~(Leader)";
			else if(rank < 4 && rank > 0) format(rankstr, sizeof(rankstr), "~h~(Rank %d)", rank);
			else rankstr="_";
			if(IspOnline(name) == 1) format(string, sizeof(string), "- %s %s", name, rankstr), PlayerTextDrawColor(playerid, pGwTD2[playerid][x], 0x2BFF00FF);
			else format(string, sizeof(string), "- %s %s", name, rankstr), PlayerTextDrawColor(playerid, pGwTD2[playerid][x], 10354687);
  		    PlayerTextDrawSetString(playerid, pGwTD2[playerid][x], string);
  		    PlayerTextDrawSetSelectable(playerid, pGwTD2[playerid][x], 1);
            PlayerTextDrawShow(playerid, pGwTD2[playerid][x]);
			format(PlayerGangShow[playerid][x], 30, "%s", name);
		  }
		}
		if(gang == PlayerInfo[playerid][pGang] && PlayerInfo[playerid][pGangRank] >= 3)
		{
		  SelectTextDraw(playerid, 0xE01B1BFF);
		  SendClientMessage(playerid, GRAY, "- Press ESC to close!");
		}
		else SendClientMessage(playerid, GRAY, "- Press Enter or Space to close!");
/*
		format(str3, sizeof(str3), "%d MEMBERS", rows);
		SendClientMessage(playerid, -1, str3);
*/
		pganggo[playerid]=gang;
		SetPVarInt(playerid, "gInfoStating", true);
    }
    return 1;
}

CMD:gangs(playerid)
{
  if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
  if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
  new count = 0;
  format(STRING, sizeof(STRING), "");
  for(new x=0; x<MAX_GANGS; x++)
  {
    if(gOnlineMembersCount(x) > 0)
    {
        str_replace("~", "", GangInfo[x][Name]);
        str_replace(":", "", GangInfo[x][Name]);
        str_replace(".", "", GangInfo[x][Name]);
		PlayerList[playerid][count]=x;
		switch(strlen(GangInfo[x][Name]))
		{
		   case 1..7:
		   {
				if(count == 0) format(STRING, sizeof(STRING), "{FFFFFF}%s"GRAY_" (ID %d)\t\t\t\t\t{EEFFA8}Members: %d",  GangInfo[x][Name], GangInfo[x][ID], GangInfo[x][gMembers]);
				else format(STRING, sizeof(STRING), "%s\n{FFFFFF}%s"GRAY_" (ID %d)\t\t\t\t\t{EEFFA8}Members: %d %d", STRING, GangInfo[x][Name], GangInfo[x][ID], GangInfo[x][gMembers]);
		   }
		   case 8..15:
		   {
				if(count == 0) format(STRING, sizeof(STRING), "{FFFFFF}%s"GRAY_" (ID %d)\t\t\t\t{EEFFA8}Members: %d",  GangInfo[x][Name], GangInfo[x][ID], GangInfo[x][gMembers]);
				else format(STRING, sizeof(STRING), "%s\n{FFFFFF}%s"GRAY_" (ID %d)\t\t\t\t{EEFFA8}Members: %d %d", STRING, GangInfo[x][Name], GangInfo[x][ID], GangInfo[x][gMembers]);
		   }
		   case 16..21:
		   {
				if(count == 0) format(STRING, sizeof(STRING), "{FFFFFF}%s"GRAY_" (ID %d)\t\t\t{EEFFA8}Members: %d",  GangInfo[x][Name], GangInfo[x][ID], GangInfo[x][gMembers]);
				else format(STRING, sizeof(STRING), "%s\n{FFFFFF}%s"GRAY_" (ID %d)\t\t\t{EEFFA8}Members: %d %d", STRING, GangInfo[x][Name], GangInfo[x][ID], GangInfo[x][gMembers]);
		   }
		   case 22..29:
		   {
				if(count == 0) format(STRING, sizeof(STRING), "{FFFFFF}%s"GRAY_" (ID %d)\t\t{EEFFA8}Members: %d",  GangInfo[x][Name], GangInfo[x][ID], GangInfo[x][gMembers]);
				else format(STRING, sizeof(STRING), "%s\n{FFFFFF}%s"GRAY_" (ID %d)\t\t{EEFFA8}Members: %d %d", STRING, GangInfo[x][Name], GangInfo[x][ID], GangInfo[x][gMembers]);
		   }
		   default:
		   {
				if(count == 0) format(STRING, sizeof(STRING), "{FFFFFF}%s"GRAY_" (ID %d)\t{EEFFA8}Members: %d",  GangInfo[x][Name], GangInfo[x][ID], GangInfo[x][gMembers]);
				else format(STRING, sizeof(STRING), "%s\n{FFFFFF}%s"GRAY_" (ID %d)\t{EEFFA8}Members: %d %d", STRING, GangInfo[x][Name], GangInfo[x][ID], GangInfo[x][gMembers]);
		   }
		}
	    count ++;
    }
  }
  if(count == 0) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}There are no online gangs at the moment"), SendClientMessage(playerid, GRAY, "{AA8202}» Gang action «{FFC307} Use (/gangcreate) to create your own gang");
  else ShowPlayerDialog(playerid, 1144, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM "WHITE_"- Online Gangs", STRING, "Ok", "Close");
  return 1;
}
/*
CMD:gangmembers(playerid, params[])
{
  if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
  if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
  if (isnull(params))
  {
	  new gang=PlayerInfo[playerid][pGang];
	  if(gang > 0)
	  {
 	     new query[200];
         format(query, sizeof(query), "SELECT `Name`, `GangRank` FROM `users` WHERE `Gang` = %d ORDER BY `Online` DESC LIMIT 26", gang);
 		 mysql_tquery(GTADM, query, "ShowGangMembers", "dd", playerid, gang);

	  }
	  else SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}invalid gang id use (/gangs) to check the list of available gangs!");
  }
  else
  {
	  new gang=strval(params);
	  if(gang > 0)
	  {
		  if((GangInfo[gang][gMembers] > 0) && (gOnlineMembersCount(gang) > 0))
		  {
 		   new query[200];
 		   format(query, sizeof(query), "SELECT `Name`, `GangRank` FROM `users` WHERE `Gang` = %d ORDER BY `Online` DESC LIMIT 26", gang);
 		   mysql_tquery(GTADM, query, "ShowGangMembers", "dd", playerid, gang);
		  }
		  else SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}invalid gang id use (/gangs) to check the list of available gangs!");
	  }
	  else SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}invalid gang id use (/gangs) to check the list of available gangs!");
  }
  return 1;
}
*/

stock IsMemberOnline(NNAME[])
{
  foreach (new i : Player)
  {
	  if(!strcmp(pName[i], NNAME))
	  {
		return 1;
	  }
  }
  return 0;
}

stock IspOnline(szName[])
{

  foreach (new i : Player)
  {
	 if(!strcmp(szName, pName[i]))
 	 {
		return 1;
	 }
  }
  return 0;
}

stock GangCreate(Leader, name[])
{
	  new count =GetFreeGangID(), Query[200], colour = random(200);

      format(Query, sizeof(Query), "INSERT INTO `gangs` (GangID, GangName, GangColor, Leader, Members, GangKills, GangDeaths, GwLost, GwWon) VALUES (%d, '%s', %d, '%s', 1, 0, 0, 0, 0)", count, Escape_String(name), colour, Escape_Name(pName[Leader]));

	  mysql_query(GTADM, Query);

      PlayerInfo[Leader][pGang] = count;
      PlayerInfo[Leader][pGangRank] = 4;

      GangInfo[count][ID] = count;
      GangInfo[count][gColor]=colour;
      format(GangInfo[count][Name], 32, "%s", name);
      format(GangInfo[count][leader], 32, "%s", pName[Leader]);
      GangInfo[count][gMembers]=1;
      GangInfo[count][gCash] = 0;
      SetPlayerColor(Leader, PlayerColors[colour]);

	  GangInfo[count][gKills]=0;
	  GangInfo[count][gDeaths]=0;

	  GangInfo[count][gWWon]=0;
	  GangInfo[count][gWLost]=0;


      format(Query, sizeof(Query), "UPDATE `users` SET `Gang` = -255, `GangRank` = 0 WHERE `Gang` = '%d'", count);
      mysql_query(GTADM, Query);

      format(Query, sizeof(Query), "UPDATE `users` SET `Gang` = %d, `GangRank` = 4 WHERE `UserID` = '%d'", count, PlayerInfo[Leader][UserID]);
      mysql_query(GTADM, Query);

	  new string[100];
      format(string, sizeof(string), "{AA8202}» Gang action «{FFC307} %s has created the gang \"%s\"", pName[Leader], name);
	  SendClientMessageToAll(ORANGE, string);
   	  return 1;
}


//==============================================================================
CMD:dance(playerid, params[])
{
    if(InCanon[playerid] > 0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in cannon.");
    new animid;
    if(sscanf(params, "d", animid)) return SendClientMessage(playerid, RED, "Usage: /dance <1-4> ");
    if(!Blowjobbing[playerid]) SetPlayerSpecialAction(playerid, 4+animid);
    if(rTest ==4) rTestWinner(playerid);
    SetPVarInt(playerid, "usesanims", true);
	return 1;
}

/*
CMD:drugs(playerid)
{
  if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
  if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
  new loc[50], string[144], k=GetPlayerGangZone(playerid);
  if(k < 0) loc="Unknown Location";
  else format(loc, sizeof(loc), "%s", gSAZones[k][SAZONE_NAME]);
  format(string, sizeof(string), "{71A5B0}» Job «"JOBINFO_" %s needs drugs right now otherwise he will die! (Location: %s)", pName[playerid], loc);
  SendClientMessageToAll(-1, string);
  return 1;
}*/
CMD:smoke(playerid)
{
  if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You can't use this command inside a vehicle");
  if(!Blowjobbing[playerid])
  {
	  if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DRINK_BEER)
	  {
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
	  }
	  if(PlayerInfo[playerid][pDrugs] >0)
	  {
	      PlayerInfo[playerid][pDrugs]--;
	      SendInfoText(playerid, 4000, "You have~n~used one ~r~drug spliff~w~!");
	      PlayerInfo[playerid][PDrugSp]++;
		  new str[256];
	      format(str, sizeof(str), "UPDATE `users` SET `PDrugSp` = %d WHERE `UserID` = '%d'", PlayerInfo[playerid][PDrugSp], PlayerInfo[playerid][UserID]);
	      mysql_query(GTADM, str);

	  }
  }
  return 1;
}
CMD:drink(playerid)
{
  if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You can't use this command inside a vehicle");
  if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DRINK_BEER)
  {
    if(!Blowjobbing[playerid]) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
  }
  return 1;
}
CMD:eat(playerid)
{
  if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You can't use this command inside a vehicle");
  if(!Blowjobbing[playerid])
  {
	  if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DRINK_BEER)
	  {
	     SetPlayerAttachedObject(playerid, 0, 19094, 6, 0.067000, 0.046000, 0.000000, -160.400009, 3.799999, -58.399997, 0.589999, 0.698000, 0.623999);
	     SetPVarInt(playerid, "EATING", true);
	     ApplyAnimation(playerid, "FOOD" , "EAT_pizza" , 0.8, 0, 0, 0 , 0, 0, 1);
	  }
  }
  return 1;
}
CMD:vips(playerid)
{
     mysql_tquery(GTADM, "SELECT `Name`, `IsVIP` FROM `users` WHERE `IsVIP` > 0 ORDER BY `Name` DESC", "ShowVips", "d", playerid);
     return 1;
}

CMD:richest(playerid)
{
     mysql_tquery(GTADM, "SELECT `Name`, `pBank` FROM `users` ORDER BY `pBank` DESC LIMIT 10", "ShowRichest", "d", playerid);
     return 1;
}

CMD:gpciscan(playerid, params[])
{
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(!IsAdmin(playerid, 1)) return SendMsg(playerid, 5);
	new id;
    if(sscanf(params, "u", id)) return SendWarning(playerid, "{BABABA}Usage /GPCIscan <playerid>");
	if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
	if(GetPVarInt(id, "Hidden")) return SendWarning(playerid, "-GPCI Scan- No Users with same GPCI are found");
	if(GetPVarInt(id, "HideMeBitch")) return SendWarning(playerid, "-GPCI Scan- No Users with same GPCI are found");
	new query[168];
	format(query, sizeof(query), "SELECT `Name` FROM `users` WHERE `GPCI` = '%s' ORDER BY `Score` DESC", Escape_String(pGPCI(id)));
    mysql_tquery(GTADM, query, "GPCIScan", "d", playerid);
    return 1;
}

CMD:whitelist(playerid, params[])
{
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(!IsAdmin(playerid, 5)) return SendMsg(playerid, 5);
    mysql_tquery(GTADM, "SELECT * FROM `whitelist`", "whiteshow", "d", playerid);
    return 1;
}

CMD:gpcibans(playerid, params[])
{
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(!IsAdmin(playerid, 5) && PlayerInfo[playerid][UserID] != 153569) return SendMsg(playerid, 5);
    mysql_tquery(GTADM, "SELECT * FROM `bans` WHERE `Ban_Type` = '3'", "showgpcibans", "d", playerid);
    return 1;
}

CMD:tempbans(playerid, params[])
{
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(!IsAdmin(playerid, 3)) return SendMsg(playerid, 5);
    mysql_tquery(GTADM, "SELECT * FROM `bans` WHERE `Ban_Type` = '2'", "showtempbans", "d", playerid);
    return 1;
}

CMD:offlinegpciscan(playerid, params[])
{
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(!IsAdmin(playerid, 1)) return SendMsg(playerid, 5);
	new faName[50];
	//new id;
    if(sscanf(params, "s[50]", faName)) return SendWarning(playerid, "{BABABA}Usage /OfflineGPCIscan <Account Name>");
	//if(IsPlayerConnected(id)) return SendWarning(playerid, "{BABABA}This player is connected.");
    new query[168];
  //  format(query, sizeof(query), "DELETE FROM `bans` WHERE `NAME` = '%s'", Escape_String(faName));
   // mysql_query(GTADM, Query);

	format(query, sizeof(query), "SELECT `GPCI` FROM `users` WHERE `Name` = '%s' LIMIT 1", Escape_String(faName));
    mysql_tquery(GTADM, query, "OfflineGPCIScan1", "d", playerid);
    return 1;
}

CMD:pipscan(playerid, params[])
{
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(!IsAdmin(playerid, 1)) return SendMsg(playerid, 5);
	new id;
    if(sscanf(params, "u", id)) return SendWarning(playerid, "{BABABA}Usage /pIPscan <playerid>");
	if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
    if(GetPVarInt(id, "Hidden")) return SendWarning(playerid, "-IpScan- No Users with same ip are found");
	if(GetPVarInt(id, "HideMeBitch")) return SendWarning(playerid, "-IpScan- No Users with same ip are found");
	new query[168];
	format(query, sizeof(query), "SELECT `Name` FROM `users` WHERE `IP` = '%s' ORDER BY `Score` DESC", pIP(id));
    mysql_tquery(GTADM, query, "pIPSCAN", "d", playerid);
    return 1;
}

CMD:ipscan(playerid, params[])
{
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(!IsAdmin(playerid, 1)) return SendMsg(playerid, 5);
	new ip[35];
    if(sscanf(params, "s[35]", ip)) return SendWarning(playerid, "{BABABA}Usage /IPscan <IP (or part of it)> "GRAY_"use (/pIPscan <playerid>) to scan an ip of a player");
	if(strlen(ip) < 4) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You have entered an invalid IP");
	new query[256];
	format(query, sizeof(query), "SELECT `Name`, `IP` FROM `users` WHERE `IP` LIKE '%s%s%s' ORDER BY `Score` DESC  LIMIT 35", "%", Escape_String(ip), "%");
    mysql_tquery(GTADM, query, "IPSCAN", "d", playerid);
    return 1;
}

CMD:accountscan(playerid, params[])
{
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(!IsAdmin(playerid, 1)) return SendMsg(playerid, 5);
	new lookName[35];
    if(sscanf(params, "s[35]", lookName)) return SendWarning(playerid, "{BABABA}Usage /AccountScan <Name (or part of it)>");
	new query[168];
	format(query, sizeof(query), "SELECT `Name`, `Score` FROM `users` WHERE `Name` LIKE '%s%s%s' ORDER BY `Score` DESC  LIMIT 35", "%", Escape_String(lookName), "%");
    mysql_tquery(GTADM, query, "AccSCAN", "ds", playerid, lookName);
    return 1;
}
//Top Shit
//==============================================================================
CMD:top(playerid) return cmd_toplist(playerid);
CMD:toplist(playerid)
{
  if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
  if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
  ShowPlayerDialog(playerid, 9326, DIALOG_STYLE_LIST, ""WHITE_"GTADM - "LIGHTYELLOW_"Top 10 List", "\nTop Players\nTop Gangs\nTop Minigamers\nTop Workers\nTop Online\nTop Killers\nTop Weakest\nTop Gangsters\nTop Weakest Gangsters\nTop Drinkers\nTop Spree\nTop Accidents\nTop Events\nTop Premium\nTop Reactions\nTop Exporters\nTop Headshots\nTop Richest\nTop Fighters", "Select", "Exit");
  return 1;
}
CMD:topminigamers(playerid)
{
  if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
  if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
  ShowPlayerDialog(playerid, 9325, DIALOG_STYLE_LIST, ""WHITE_"GTADM - "LIGHTYELLOW_"Top 10 Minigamers", "\nTop LMS\nTop Racers\nTop Crashers\nTop Sumo\nTop Fallout\nTop TicTac\nTop CTF\nTop Pool\nTop Outrun\nTop CS\nTop MG\nTop Hay\nTop Footballers\nTop Gungame\nTop Runners\nTop Duels\nTop Drifters\nTop Agents\nTop Dive\nTop Race Records", "Select", "Back");
  //\nTop Disco Dodgebombers\nTop Colosseum\nTop Flappy cars", "Select", "Back");
  return 1;
}
CMD:topworkers(playerid)
{
  if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
  if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
  ShowPlayerDialog(playerid, 9324, DIALOG_STYLE_LIST, ""WHITE_"GTADM - "LIGHTYELLOW_"Top 10 Workers", "\nTop Dealers\nTop Medics\nTop Cops\nTop Truckers\nTop Whores\nTop Mechanics\nTop Hitmans", "Select", "Back");
  return 1;
}
CMD:topplayers(playerid)
{
     mysql_tquery(GTADM, "SELECT `Name`, `Score` FROM `users` ORDER BY `Score` DESC LIMIT 10", "ShowTopPlayers", "d", playerid);
     return 1;
}
CMD:topbeatenup(playerid)
{
     mysql_tquery(GTADM, "SELECT `Name`, `pBeatenUp` FROM `users` ORDER BY `pBeatenUp` DESC LIMIT 10", "ShowTopBeatenUp", "d", playerid);
     return 1;
}
CMD:topdives(playerid)
{
     mysql_tquery(GTADM, "SELECT `Name`, `diveswon` FROM `users` ORDER BY `diveswon` DESC LIMIT 10", "ShowTopDives", "d", playerid);
     return 1;
}/*
CMD:topdd(playerid)
{
     mysql_tquery(GTADM, "SELECT `Name`, `DDWins` FROM `users` ORDER BY `DDWins` DESC LIMIT 10", "ShowTopDD", "d", playerid);
     return 1;
}
CMD:topco(playerid)
{
     mysql_tquery(GTADM, "SELECT `Name`, `COWins` FROM `users` ORDER BY `COWins` DESC LIMIT 10", "ShowTopCO", "d", playerid);
     return 1;
}
CMD:topfc(playerid)
{
     mysql_tquery(GTADM, "SELECT `Name`, `FCWins` FROM `users` ORDER BY `FCWins` DESC LIMIT 10", "ShowTopFC", "d", playerid);
     return 1;
}*/
CMD:topmissions(playerid)
{
     mysql_tquery(GTADM, "SELECT `Name`, `Mission` FROM `users` ORDER BY `Mission` DESC LIMIT 10", "ShowTopMissions", "d", playerid);
     return 1;
}
CMD:topgangs(playerid)
{
     mysql_tquery(GTADM, "SELECT `GangName`, `GangKills`, `GangDeaths`, `GangID`, `GwWon`, `GwLost` FROM `gangs` ORDER BY `GangKills` DESC LIMIT 10", "ShowTopGangs", "d", playerid);
     return 1;
}
CMD:topgangs2(playerid)
{
     mysql_tquery(GTADM, "SELECT `GangName`, `GangKills`, `GangDeaths`, `GangID`, `GwWon`, `GwLost` FROM `gangs` ORDER BY `GangKills` DESC LIMIT 10", "ShowTopGangs2", "d", playerid);
     return 1;
}
CMD:topracers(playerid)
{
     mysql_tquery(GTADM, "SELECT `Name`, `RaceWon` FROM `users` ORDER BY `RaceWon` DESC LIMIT 10", "ShowTopRacers", "d", playerid);
     return 1;
}
CMD:toprunners(playerid)
{
     mysql_tquery(GTADM, "SELECT `Name`, `ParkOurWon` FROM `users` ORDER BY `ParkOurWon` DESC LIMIT 10", "ShowTopRunners", "d", playerid);
     return 1;
}
CMD:topfarmers(playerid)
{
     mysql_tquery(GTADM, "SELECT `Name`, `HayWins` FROM `users` ORDER BY `HayWins` DESC LIMIT 10", "ShowTopFarmers", "d", playerid);
     return 1;
}
CMD:topmg(playerid)
{
     mysql_tquery(GTADM, "SELECT `Name`, `MGWins` FROM `users` ORDER BY `MGWins` DESC LIMIT 10", "ShowTopMG", "d", playerid);
     return 1;
}
CMD:topfastest(playerid)
{
     mysql_tquery(GTADM, "SELECT `Name`, `pSpeedR` FROM `users` ORDER BY `pSpeedR` DESC LIMIT 10", "ShowTopFastest", "d", playerid);
     return 1;
}
CMD:topdrifters(playerid)
{
     mysql_tquery(GTADM, "SELECT `Name`, `DriftRecords` FROM `users` ORDER BY `DriftRecords` DESC LIMIT 10", "ShowTopDrifters", "d", playerid);
     return 1;
}
CMD:topracerecords(playerid)
{
     mysql_tquery(GTADM, "SELECT `Name`, `RaceRecords` FROM `users` ORDER BY `RaceRecords` DESC LIMIT 10", "ShowTopRaceRecords", "d", playerid);
     return 1;
}
CMD:topoutrun(playerid)
{
     mysql_tquery(GTADM, "SELECT `Name`, `pOutRunz` FROM `users` ORDER BY `pOutRunz` DESC LIMIT 10", "ShowTopOutrun", "d", playerid);
     return 1;
}
CMD:toptruckers(playerid)
{
     mysql_tquery(GTADM, "SELECT `Name`, `Trucking` FROM `users` ORDER BY `Trucking` DESC LIMIT 10", "ShowTopTruckers", "d", playerid);
     return 1;
}
CMD:topreaction(playerid)
{
     mysql_tquery(GTADM, "SELECT `Name`, `ReactionTests` FROM `users` ORDER BY `ReactionTests` DESC LIMIT 10", "ShowTopReaction", "d", playerid);
     return 1;
}
CMD:toptictac(playerid)
{
     mysql_tquery(GTADM, "SELECT `Name`, `TTTWins` FROM `users` ORDER BY `TTTWins` DESC LIMIT 10", "ShowTopTTT", "d", playerid);
     return 1;
}
CMD:topsumo(playerid)
{
     mysql_tquery(GTADM, "SELECT `Name`, `SumoWon` FROM `users` ORDER BY `SumoWon` DESC LIMIT 10", "ShowTopSumo", "d", playerid);
     return 1;
}
CMD:toppool(playerid)
{
     mysql_tquery(GTADM, "SELECT `Name`, `PoolWon` FROM `users` ORDER BY `PoolWon` DESC LIMIT 10", "ShowTopPool", "d", playerid);
     return 1;
}
CMD:topaddicted(playerid)
{
     mysql_tquery(GTADM, "SELECT `Name`, `pHours` FROM `users` ORDER BY `pHours` DESC LIMIT 10", "ShowTopOnline", "d", playerid);
     return 1;
}
CMD:topwhores(playerid)
{
     mysql_tquery(GTADM, "SELECT `Name`, `blowjobs` FROM `users` ORDER BY `blowjobs` DESC LIMIT 10", "ShowTopWhores", "d", playerid);
     return 1;
}
CMD:tophitmans(playerid)
{
     mysql_tquery(GTADM, "SELECT `Name`, `bountiesearned` FROM `users` ORDER BY `bountiesearned` DESC LIMIT 10", "ShowTopHitmans", "d", playerid);
     return 1;
}
CMD:topmechanics(playerid)
{
     mysql_tquery(GTADM, "SELECT `Name`, `carsrepaired` FROM `users` ORDER BY `carsrepaired` DESC LIMIT 10", "ShowTopMechanics", "d", playerid);
     return 1;
}
CMD:topgangsters(playerid)
{
     mysql_tquery(GTADM, "SELECT `Name`, `GangWarsWon` FROM `users` ORDER BY `GangWarsWon` DESC LIMIT 10", "ShowTopGangsters", "d", playerid);
     return 1;
}
CMD:topexporters(playerid)
{
     mysql_tquery(GTADM, "SELECT `Name`, `Exported` FROM `users` ORDER BY `Exported` DESC LIMIT 10", "ShowTopExporters", "d", playerid);
     return 1;
}
CMD:topkillers(playerid)
{
     mysql_tquery(GTADM, "SELECT `Name`, `Kills` FROM `users` ORDER BY `Kills` DESC LIMIT 10", "ShowTopKillers", "d", playerid);
     return 1;
}
CMD:topweakest(playerid)
{
     mysql_tquery(GTADM, "SELECT `Name`, `Deaths` FROM `users` ORDER BY `Deaths` DESC LIMIT 10", "ShowTopWeakest", "d", playerid);
     return 1;
}
CMD:topdrinkers(playerid)
{
     mysql_tquery(GTADM, "SELECT `Name`, `Drunk` FROM `users` ORDER BY `Drunk` DESC LIMIT 10", "ShowTopDrinkers", "d", playerid);
     return 1;
}
CMD:topheadshots(playerid)
{
     mysql_tquery(GTADM, "SELECT `Name`, `HeadShots` FROM `users` ORDER BY `HeadShots` DESC LIMIT 10", "ShowTopHeadshot", "d", playerid);
     return 1;
}
forward ShowTopSpree(playerid);
public ShowTopSpree(playerid)
{
	new string[1024], rows, fields;
	new name[24], ks;//data 1
    cache_get_row_count(rows);
    cache_get_field_count(fields);
	for(new x=0; x<rows; x++)
	{
           cache_get_value_index(x, 0, name);
           cache_get_value_index_int(x, 1, ks);
		   format(string, sizeof(string), "%s"WHITE_"#%d - "LIGHTYELLOW_"%s "GRAY_"(%d killing spree)\n", string, x+1, name, ks);
	}
   	ShowPlayerDialog(playerid, 9342, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM "WHITE_"- Top 10 Killing Sprees", string, "Back", "");
	return 1;
}
CMD:topspree(playerid)
{
     mysql_tquery(GTADM, "SELECT `Name`, `KillingSpreeHighest` FROM `users` ORDER BY `KillingSpreeHighest` DESC LIMIT 10", "ShowTopSpree", "d", playerid);
     return 1;
}
CMD:topcs(playerid)
{
     mysql_tquery(GTADM, "SELECT `Name`, `CSWins` FROM `users` ORDER BY `CSWins` DESC LIMIT 10", "ShowTopCS", "d", playerid);
     return 1;
}
CMD:topdealers(playerid)
{
     mysql_tquery(GTADM, "SELECT `Name`, `PDrugSp` FROM `users` ORDER BY `PDrugSp` DESC LIMIT 10", "ShowTopDealers", "d", playerid);
     return 1;
}
CMD:topctf(playerid)
{
     mysql_tquery(GTADM, "SELECT `Name`, `CTFWon` FROM `users` ORDER BY `CTFWon` DESC LIMIT 10", "ShowTopCTF", "d", playerid);
     return 1;
}
CMD:topfb(playerid)
{
     mysql_tquery(GTADM, "SELECT `Name`, `FBWins` FROM `users` ORDER BY `FBWins` DESC LIMIT 10", "ShowTopFB", "d", playerid);
     return 1;
}
CMD:topgg(playerid)
{
     mysql_tquery(GTADM, "SELECT `Name`, `GGWins` FROM `users` ORDER BY `GGWins` DESC LIMIT 10", "ShowTopGG", "d", playerid);
     return 1;
}
CMD:topmedics(playerid)
{
     mysql_tquery(GTADM, "SELECT `Name`, `Heals` FROM `users` ORDER BY `Heals` DESC LIMIT 10", "ShowTopMedics", "d", playerid);
     return 1;
}
CMD:topcops(playerid)
{
     mysql_tquery(GTADM, "SELECT `Name`, `Arrests` FROM `users` ORDER BY `Arrests` DESC LIMIT 10", "ShowTopCops", "d", playerid);
     return 1;
}
CMD:topterrorists(playerid)
{
     mysql_tquery(GTADM, "SELECT `Name`, `Bombed` FROM `users` ORDER BY `Bombed` DESC LIMIT 10", "ShowTopTerrorists", "d", playerid);
     return 1;
}
CMD:topduels(playerid)
{
     mysql_tquery(GTADM, "SELECT `Name`, `DuelWon` FROM `users` ORDER BY `DuelWon` DESC LIMIT 10", "ShowTopDuel", "d", playerid);
     return 1;
}
CMD:topevents(playerid)
{
     mysql_tquery(GTADM, "SELECT `Name`, `pEventWon` FROM `users` ORDER BY `pEventWon` DESC LIMIT 10", "ShowTopEventWon", "d", playerid);
     return 1;
}
CMD:toppp(playerid)
{
     mysql_tquery(GTADM, "SELECT `Name`, `Cooks` FROM `users` ORDER BY `Cooks` DESC LIMIT 10", "ShowTopPP", "d", playerid);
     return 1;
}
CMD:toplms(playerid)
{
     mysql_tquery(GTADM, "SELECT `Name`, `LmsWon` FROM `users` ORDER BY `LmsWon` DESC LIMIT 10", "ShowTopLMS", "d", playerid);
     return 1;
}
CMD:topgwweakest(playerid)
{
     mysql_tquery(GTADM, "SELECT `Name`, `GangWarsLost` FROM `users` ORDER BY `GangWarsLost` DESC LIMIT 10", "ShowTopGWLost", "d", playerid);
     return 1;
}
CMD:topfallout(playerid)
{
     mysql_tquery(GTADM, "SELECT `Name`, `FalloutWins` FROM `users` ORDER BY `FalloutWins` DESC LIMIT 10", "ShowTopFallout", "d", playerid);
     return 1;
}
CMD:topderbies(playerid)
{
     mysql_tquery(GTADM, "SELECT `Name`, `DerbyWon` FROM `users` ORDER BY `DerbyWon` DESC LIMIT 10", "ShowTopDerby", "d", playerid);
     return 1;
}
CMD:topaccidents(playerid)
{
     mysql_tquery(GTADM, "SELECT `Name`, `Accidents` FROM `users` ORDER BY `Accidents` DESC LIMIT 10", "ShowTopAccidents", "d", playerid);
     return 1;
}
//==============================================================================
CMD:anims(playerid)
{
//	format(STRING, sizeof(STRING), "");
  if(!Blowjobbing[playerid])
  {
	new str[1224];
	for(new x=0;x<sizeof(Anims);x++)
	{
       format(str, sizeof(str), "%s\n%d %s", str, x+1, Anims[x][AnimExplain]);
    }
    ShowPlayerDialog(playerid, 212, DIALOG_STYLE_LIST, "GTADM: "LIGHTYELLOW_"Animations", str, "Play", "Close");
  }
  return 1;
}
CMD:anim(playerid, params[])
{
  if(InCanon[playerid] > 0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in cannon.");
  if(!Blowjobbing[playerid])
  {
    new animid;
    if(sscanf(params, "d", animid)) return SendWarning(playerid, "Usage: /anim <animid>, use /anims to see the list of available animations");
	if(animid < 1 || animid > sizeof(Anims)) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Invalid anim id use /anims to see the list of available animations");
	new aid=animid-1;
    if(Anims[aid][playonce] == 0) ApplyAnimation(playerid, Anims[aid][Lib], Anims[aid][AnimName], 4.1, 1, 1, 1, 1, 1, 1);
    else ApplyAnimation(playerid, Anims[aid][Lib], Anims[aid][AnimName], 4.1, 0, 1, 1, 1, 1, 1);
	if(aid == 69) GiveMedal(playerid, 52);
  }
  return 1;
}
CMD:gotogate(playerid, params[])
{
	new id;
    if(!IsAdmin(playerid, 5)) return SendMsg(playerid, 5);
    if(sscanf(params, "d", id)) return SendClientMessage(playerid, RED, "Usage : /gotogate "GRAY_"<GateID>");
    if(!IsValidDynamicObject(GateInfo[id][ObjectID])) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}this gate doesnt exist");
	new Float:x, Float:y, Float:z;
	GetDynamicObjectPos(GateInfo[id][ObjectID], x, y, z);
	SetPlayerPos(playerid, x, y, z+7);

	new str[128];
    format(str, sizeof(str), "You have been teleported to Gate"GREEN_" ID %d", id);
    SendClientMessage(playerid, WHITE, str);
	return 1;
}

CMD:gateid(playerid)
{
    if(!IsAdmin(playerid, 5)) return SendMsg(playerid, 5);
    new Float:lPos[3];
    new c;
    for(new g=0; g<MAX_GATES ; g++)
    {
	 if(IsValidDynamicObject(GateInfo[g][ObjectID]))
	 {
	  GetDynamicObjectPos(GateInfo[g][ObjectID], lPos[0], lPos[1], lPos[2]);
      if(IsPlayerInRangeOfPoint(playerid, 8.00, lPos[0], lPos[1], lPos[2]))
      {
        new str[128];
      	format(str, sizeof(str), "You are in the range of gate "GREEN_"ID %d", g);
      	SendClientMessage(playerid, WHITE, str);
      	c++;
      }
	 }
	}
	if(c==0) SendClientMessage(playerid, WHITE, "You are not in a range of any gate");
	return 1;
}
CMD:freegateid(playerid)
{
    if(!IsAdmin(playerid, 5)) return SendMsg(playerid, 5);
    new c=-1;
    for(new g=0; g<MAX_GATES ; g++)
    {
	 if(!IsValidDynamicObject(GateInfo[g][ObjectID]))
	 {
      	c=g;
      	break;
	 }
	}
	if(c==-255) SendClientMessage(playerid, WHITE, "There isnt any free GateID (the limit has been reached)!");
	else
	{
	  new str[128];
	  format(str, sizeof(str), "GateID %d is free", c);
	  SendClientMessage(playerid, -1, str);
	}
	return 1;
}

CMD:freehouseid(playerid)
{
    if(!IsAdmin(playerid, 5)) return SendMsg(playerid, 5);
    new c=-1;
    for(new g=1; g<MAX_HOUSES ; g++)
    {
	 if(hExist[g] < 1)
	 {
      	c=g;
      	break;
	 }
	}
	if(c==-255) SendClientMessage(playerid, WHITE, "There isnt any free HouseID (the limit has been reached)!");
	else
	{
	  new str[128];
	  format(str, sizeof(str), "HouseID %d is free", c);
	  SendClientMessage(playerid, -1, str);
	}
	return 1;
}

CMD:setgateowner(playerid, params[])
{
    if(!IsAdmin(playerid, 5)) return SendMsg(playerid, 5);
    new id, owner[10];
    if(sscanf(params, "ddD(-1)D(-1)D(-1)D(-1)D(-1)D(-1)D(-1)D(-1)D(-1)", id, owner[0], owner[1], owner[2], owner[3], owner[4], owner[5], owner[6], owner[7], owner[8], owner[9])) return SendClientMessage(playerid, RED, "Usage : /setgateowner "GRAY_"<GateID> <Houses>");
    if(!IsValidDynamicObject(GateInfo[id][ObjectID])) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}this gate doesnt exist");
    GateInfo[id][Houses][0] = owner[0];
    GateInfo[id][Houses][1] = owner[1];
    GateInfo[id][Houses][2] = owner[2];
    GateInfo[id][Houses][3] = owner[3];
    GateInfo[id][Houses][4] = owner[4];
    GateInfo[id][Houses][5] = owner[5];
    GateInfo[id][Houses][6] = owner[6];
    GateInfo[id][Houses][7] = owner[7];
    GateInfo[id][Houses][8] = owner[8];
    GateInfo[id][Houses][9] = owner[9];
	SendClientMessage(playerid, WHITE, "New gate owners has been "GREEN_"saved!");

    new INI:File = INI_Open(GatePath(id));
	INI_SetTag(File, "gatedata");
    INI_WriteInt(File, "House1", owner[0]);
    INI_WriteInt(File, "House2", owner[1]);
    INI_WriteInt(File, "House3", owner[2]);
    INI_WriteInt(File, "House4", owner[3]);
    INI_WriteInt(File, "House5", owner[4]);
    INI_WriteInt(File, "House6", owner[5]);
    INI_WriteInt(File, "House7", owner[6]);
    INI_WriteInt(File, "House8", owner[7]);
    INI_WriteInt(File, "House9", owner[8]);
    INI_WriteInt(File, "House10", owner[9]);
	INI_Close(File);
	return 1;

}

CMD:tip(playerid)
{
	new str[128];

	new Iterator:x<sizeof(EasterEgg)>;
	for(new e=0; e<sizeof(EasterEgg); e++)
	{
		 if(MyEggs[playerid][e] == 0)
		 {
			Iter_Add(x, e);
		 }
	}
	format(str, sizeof(str), "» Easter Egg Tip « %s", EasterEgg[Iter_Random(x)][tip]);
	SendClientMessage(playerid, PINK, str);

	return 1;
}
#if defined USEDRIFT

CMD:drifts(playerid)
{
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
	new k[20];
	if(GetPVarInt(playerid, "GoBack")) k="Back";
	else k="Exit";
    //ShowPlayerDialog(playerid, 1349, DIALOG_STYLE_LIST, "Drifts", "Drift1\nDrift2\nDrift3\nDrift4\nDrift5\nDrift6\nDrift7", "Go", k);
    ShowPlayerDialog(playerid, 1349, DIALOG_STYLE_LIST, "Drifts", "{0DFF00}Drift1\n{1BE06D}Drift2\n{69BA3A}Drift3\n{3ABA6F}Drift4\n{00C4A0}Drift5\n{12F4B8}Drift6\n{ABFF85}Drift7", "Go", k);
	return 1;
}

new driftlock=0;
CMD:lockd(playerid)
{
  if(!IsAdmin(playerid, 51)) return SendMsg(playerid, 5);
  if(driftlock == 1)
  {
	 driftlock =0;
	 new str[128];
	 format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}Admin %s has unlocked the drift", gAname(playerid));
	 SendClientMessageToAll(AdminInfo, str);
  }
  else if(driftlock == 0)
  {
	 driftlock =1;
	 new str[128];
	 format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}Admin %s has locked the drift", gAname(playerid));
	 SendClientMessageToAll(AdminInfo, str);
  }
  return 1;
}

CMD:drift(playerid, params[])
{
    if(driftlock == 1)  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}The drift is locked!");
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again");
    if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
    if(IsInFight(playerid)) return SendMsg(playerid, 2);
    if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail");
    HidePlayerMenu(playerid);


	new Map;
    if(sscanf(params, "d", Map)) return cmd_drifts(playerid);
	if(Map < 1 || Map > 7)  return cmd_drifts(playerid);
	SavePlayerCoords(playerid);
	switch(Map)
	{
		  case 1: TeleportPlayer(playerid, -300.4979, 1516.8981, 75.3594, 179.3745, 0, false);
		  case 2: TeleportPlayer(playerid, -2425.3379, -607.1253, 132.5625, 33.3634, 0, false);
		  case 3: TeleportPlayer(playerid, 1294.8658, -712.7390, 93.0439, 288.0684, 0, false);
		  case 4: TeleportPlayer(playerid, 1477.0559, 1822.6667, 10.5393, 181.4275, 0, false);
		  case 5: TeleportPlayer(playerid, -1084.7936, 407.9283, 14.1484, 134.5673, 0, false);
		  case 6: TeleportPlayer(playerid, 269.1199, 2945.2686, 10.5606, 348.3203, 0, false);
		  case 7: TeleportPlayer(playerid, 1252.6611, -2055.8806, 59.3632, 267.1501, 0, false);
	}
	///SetPlayerVirtualWorldEX(playerid, 8000+playerid);
	SetPlayerVirtualWorldEX(playerid, 8011);
    ShowPlayerDialog(playerid, 4523, DIALOG_STYLE_LIST, "Select Your Vehicle", "Alpha\nBanshee\nBlista Compact\nBuffalo\nBullet\nCheetah\nClub\nEuros\nFlash\nHotring Racer\nHotring Racer A\nHotring Racer B\nInfernus\nJester\nPhoenix\nSabre\nSuper GT\nTurismo\nUranus\nZR-350\nElegy\nSultan", "Select", "Cancel" );
	SetCameraBehindPlayer(playerid);
	TogglePlayerControllable2(playerid, 0);
    SetPVarInt(playerid, "DriftScore", 0);
    pDrift[playerid]=0;
    SetPVarInt(playerid, "Drifter", 2);
    SetPVarInt(playerid, "Combo", 0);
    SetPVarInt(playerid, "DriftMap", Map);

	TextDrawSetStringEX(pDriftTD[playerid][3], "~r~Score: ~g~0");
	new str[128];
	format(str, sizeof(str), ""CTC1_"» Drift « "CTC2_"%s has joined the Drifting Arena "CTC1_"(/Drift%d)", pName[playerid], Map);
    SendClientMessageToAll(0x51FF00FF, str);
    DisablePlayerRaceCheckpoint(playerid);

	format(str, sizeof(str), "{FFC307}» {AA8202}Top 5 Records of the Drift #%d {FFC307}«", Map);
	SendClientMessage(playerid, 0xF2EE05FF, str);
	format(str, sizeof(str), "{AA8202}#1 {FFC307}%d By %s (%s)", DriftRecords[Map-1][driftTOP][0], DriftRecords[Map-1][driftTOP1], DriftRecords[Map-1][D_Top1Car]);
	SendClientMessage(playerid, 0xF2EE05FF, str);
	format(str, sizeof(str), "{AA8202}#2 {FFC307}%d By %s (%s)", DriftRecords[Map-1][driftTOP][1], DriftRecords[Map-1][driftTOP2], DriftRecords[Map-1][D_Top2Car]);
	SendClientMessage(playerid, 0xF2EE05FF, str);
	format(str, sizeof(str), "{AA8202}#3 {FFC307}%d By %s (%s)", DriftRecords[Map-1][driftTOP][2], DriftRecords[Map-1][driftTOP3], DriftRecords[Map-1][D_Top3Car]);
	SendClientMessage(playerid, 0xF2EE05FF, str);
	format(str, sizeof(str), "{AA8202}#4 {FFC307}%d By %s (%s)", DriftRecords[Map-1][driftTOP][3], DriftRecords[Map-1][driftTOP4], DriftRecords[Map-1][D_Top4Car]);
	SendClientMessage(playerid, 0xF2EE05FF, str);
	format(str, sizeof(str), "{AA8202}#5 {FFC307}%d By %s (%s)", DriftRecords[Map-1][driftTOP][4], DriftRecords[Map-1][driftTOP5], DriftRecords[Map-1][D_Top5Car]);
	SendClientMessage(playerid, 0xF2EE05FF, str);
	//SendClientMessage(playerid, GRAY, "- Use (/driftrecords) To check the records again");
    return 1;
}

CMD:driftrecords(playerid, params[])
{
	if(GetPVarInt(playerid, "AFK")) return SendWarning(playerid, "you cant use this command in AFK Mode type (/back) then try again");
	new Map;
    if(sscanf(params, "d", Map)) return SendWarning(playerid, "Usage /driftrecords <1-7>");
	if(Map < 1 || Map > 7)  return SendWarning(playerid, "Usage /driftrecords <1-7>");

	new str[128];
	format(str, sizeof(str), "{FFC307}» {AA8202}Top 5 Records of the Drift #%d {FFC307}«", Map);
	SendClientMessage(playerid, 0xF2EE05FF, str);
	format(str, sizeof(str), "{AA8202}#1 {FFC307}%d By %s (%s)", DriftRecords[Map-1][driftTOP][0], DriftRecords[Map-1][driftTOP1], DriftRecords[Map-1][D_Top1Car]);
	SendClientMessage(playerid, 0xF2EE05FF, str);
	format(str, sizeof(str), "{AA8202}#2 {FFC307}%d By %s (%s)", DriftRecords[Map-1][driftTOP][1], DriftRecords[Map-1][driftTOP2], DriftRecords[Map-1][D_Top2Car]);
	SendClientMessage(playerid, 0xF2EE05FF, str);
	format(str, sizeof(str), "{AA8202}#3 {FFC307}%d By %s (%s)", DriftRecords[Map-1][driftTOP][2], DriftRecords[Map-1][driftTOP3], DriftRecords[Map-1][D_Top3Car]);
	SendClientMessage(playerid, 0xF2EE05FF, str);
	format(str, sizeof(str), "{AA8202}#4 {FFC307}%d By %s (%s)", DriftRecords[Map-1][driftTOP][3], DriftRecords[Map-1][driftTOP4], DriftRecords[Map-1][D_Top4Car]);
	SendClientMessage(playerid, 0xF2EE05FF, str);
	format(str, sizeof(str), "{AA8202}#5 {FFC307}%d By %s (%s)", DriftRecords[Map-1][driftTOP][4], DriftRecords[Map-1][driftTOP5], DriftRecords[Map-1][D_Top5Car]);
	SendClientMessage(playerid, 0xF2EE05FF, str);
	return 1;
}

#endif
CMD:stfrecords(playerid)
{
	if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
	new str[128];
	SendClientMessage(playerid, 0xF2EE05FF, "{FFC307}» {AA8202}Top 5 Records of the 'STF' Stunt Map {FFC307}«");
	format(str, sizeof(str), "{AA8202}#1 - {FFC307}%s By %s", ConvertTime(sRaceRecords[0][toptime][0]), sRaceRecords[0][Top1Player]);
	SendClientMessage(playerid, 0xF2EE05FF, str);
	format(str, sizeof(str), "{AA8202}#2 - {FFC307}%s By %s", ConvertTime(sRaceRecords[0][toptime][1]), sRaceRecords[0][Top2Player]);
	SendClientMessage(playerid, 0xF2EE05FF, str);
	format(str, sizeof(str), "{AA8202}#3 - {FFC307}%s By %s", ConvertTime(sRaceRecords[0][toptime][2]), sRaceRecords[0][Top3Player]);
	SendClientMessage(playerid, 0xF2EE05FF, str);
	format(str, sizeof(str), "{AA8202}#4 - {FFC307}%s By %s", ConvertTime(sRaceRecords[0][toptime][3]), sRaceRecords[0][Top4Player]);
	SendClientMessage(playerid, 0xF2EE05FF, str);
	format(str, sizeof(str), "{AA8202}#5 - {FFC307}%s By %s", ConvertTime(sRaceRecords[0][toptime][4]), sRaceRecords[0][Top5Player]);
	SendClientMessage(playerid, 0xF2EE05FF, str);
	return 1;
}
CMD:wdrecords(playerid)
{
	if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
	new str[128];
	SendClientMessage(playerid, 0xF2EE05FF, "{FFC307}» {AA8202}Top 5 Records of the 'WD' Stunt Map {FFC307}«");
	format(str, sizeof(str), "{AA8202}#1 - {FFC307}%s By %s", ConvertTime(sRaceRecords[1][toptime][0]), sRaceRecords[1][Top1Player]);
	SendClientMessage(playerid, 0xF2EE05FF, str);
	format(str, sizeof(str), "{AA8202}#2 - {FFC307}%s By %s", ConvertTime(sRaceRecords[1][toptime][1]), sRaceRecords[1][Top2Player]);
	SendClientMessage(playerid, 0xF2EE05FF, str);
	format(str, sizeof(str), "{AA8202}#3 - {FFC307}%s By %s", ConvertTime(sRaceRecords[1][toptime][2]), sRaceRecords[1][Top3Player]);
	SendClientMessage(playerid, 0xF2EE05FF, str);
	format(str, sizeof(str), "{AA8202}#4 - {FFC307}%s By %s", ConvertTime(sRaceRecords[1][toptime][3]), sRaceRecords[1][Top4Player]);
	SendClientMessage(playerid, 0xF2EE05FF, str);
	format(str, sizeof(str), "{AA8202}#5 - {FFC307}%s By %s", ConvertTime(sRaceRecords[1][toptime][4]), sRaceRecords[1][Top5Player]);
	SendClientMessage(playerid, 0xF2EE05FF, str);
	return 1;
}
CMD:wtfrecords(playerid)
{
	if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
	new str[128];
	SendClientMessage(playerid, 0xF2EE05FF, "{FFC307}» {AA8202}Top 5 Records of the 'WTF' Stunt Map {FFC307}«");
	format(str, sizeof(str), "{AA8202}#1 - {FFC307}%s By %s", ConvertTime(sRaceRecords[2][toptime][0]), sRaceRecords[2][Top1Player]);
	SendClientMessage(playerid, 0xF2EE05FF, str);
	format(str, sizeof(str), "{AA8202}#2 - {FFC307}%s By %s", ConvertTime(sRaceRecords[2][toptime][1]), sRaceRecords[2][Top2Player]);
	SendClientMessage(playerid, 0xF2EE05FF, str);
	format(str, sizeof(str), "{AA8202}#3 - {FFC307}%s By %s", ConvertTime(sRaceRecords[2][toptime][2]), sRaceRecords[2][Top3Player]);
	SendClientMessage(playerid, 0xF2EE05FF, str);
	format(str, sizeof(str), "{AA8202}#4 - {FFC307}%s By %s", ConvertTime(sRaceRecords[2][toptime][3]), sRaceRecords[2][Top4Player]);
	SendClientMessage(playerid, 0xF2EE05FF, str);
	format(str, sizeof(str), "{AA8202}#5 - {FFC307}%s By %s", ConvertTime(sRaceRecords[2][toptime][4]), sRaceRecords[2][Top5Player]);
	SendClientMessage(playerid, 0xF2EE05FF, str);
	return 1;
}
CMD:racerecords(playerid, params[])
{
	if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
	new Map;
    if(sscanf(params, "d", Map)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Usage /RaceRecords <RaceID>");
	if(Map < 0 || Map > (MAX_RACES-1)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Invalid race ID, please check the created races list in (/RaceEditor)");
	if(RaceInfo[Map][RaceCpCount] <= 0)  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Invalid RaceID");

	new str[128];
	format(str, sizeof(str), "{FFC307}» {AA8202}Top 5 Records of the Race #%d {FFC307}«", Map);
	SendClientMessage(playerid, 0xF2EE05FF, str);
	format(str, sizeof(str), "{AA8202}#1 - {FFC307}%s By %s || %s", ConvertTime(RaceRecords[Map][toptime][0]), RaceRecords[Map][Top1Player], RaceRecords[Map][Top1Car]);
	SendClientMessage(playerid, 0xF2EE05FF, str);
	format(str, sizeof(str), "{AA8202}#2 - {FFC307}%s By %s || %s", ConvertTime(RaceRecords[Map][toptime][1]), RaceRecords[Map][Top2Player], RaceRecords[Map][Top2Car]);
	SendClientMessage(playerid, 0xF2EE05FF, str);
	format(str, sizeof(str), "{AA8202}#3 - {FFC307}%s By %s || %s", ConvertTime(RaceRecords[Map][toptime][2]), RaceRecords[Map][Top3Player], RaceRecords[Map][Top3Car]);
	SendClientMessage(playerid, 0xF2EE05FF, str);
	format(str, sizeof(str), "{AA8202}#4 - {FFC307}%s By %s || %s", ConvertTime(RaceRecords[Map][toptime][3]), RaceRecords[Map][Top4Player], RaceRecords[Map][Top4Car]);
	SendClientMessage(playerid, 0xF2EE05FF, str);
	format(str, sizeof(str), "{AA8202}#5 - {FFC307}%s By %s || %s", ConvertTime(RaceRecords[Map][toptime][4]), RaceRecords[Map][Top5Player], RaceRecords[Map][Top5Car]);
	SendClientMessage(playerid, 0xF2EE05FF, str);
	return 1;
}
CMD:parkourrecords(playerid, params[])
{
	if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
	//new Map;
	new rend;
    if(sscanf(params, "d", rend)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Usage /ParkourRecords <ParkourID>");
	//Map=Map-1;
	if(rend < 0 || rend > (MAX_POURS-1)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Invalid Parkour ID");
    if(ParkOurInfo[rend][CPcount] <= 0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Invalid Parkour ID.");
    //Pour=rend;
    new str2[128];
    format(str2, sizeof(str2), "{FFC307}» {AA8202}Top 5 Records of the Parkour \"%s\" {FFC307}«", ParkOurInfo[rend][PourName]);
    SendClientMessage(playerid, 0xF2EE05FF, str2);
    format(str2, sizeof(str2), "{AA8202}#1 - {FFC307}%s (%s)", pOurRecords[rend][Top1Player], ConvertTime(pOurRecords[rend][toptime][0]));
    SendClientMessage(playerid, 0xF2EE05FF, str2);
    format(str2, sizeof(str2), "{AA8202}#2 - {FFC307}%s (%s)", pOurRecords[rend][Top2Player], ConvertTime(pOurRecords[rend][toptime][1]));
    SendClientMessage(playerid, 0xF2EE05FF, str2);
    format(str2, sizeof(str2), "{AA8202}#3 - {FFC307}%s (%s)", pOurRecords[rend][Top3Player], ConvertTime(pOurRecords[rend][toptime][2]));
    SendClientMessage(playerid, 0xF2EE05FF, str2);
    format(str2, sizeof(str2), "{AA8202}#4 - {FFC307}%s (%s)", pOurRecords[rend][Top4Player], ConvertTime(pOurRecords[rend][toptime][3]));
    SendClientMessage(playerid, 0xF2EE05FF, str2);
    format(str2, sizeof(str2), "{AA8202}#5 - {FFC307}%s (%s)", pOurRecords[rend][Top5Player], ConvertTime(pOurRecords[rend][toptime][4]));
    SendClientMessage(playerid, 0xF2EE05FF, str2);
	return 1;
}
CMD:achievements(playerid) return cmd_medals(playerid);
CMD:medals(playerid)
{
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    ShowMedalsDialog(playerid);
    return 1;
}
CMD:fireworks(playerid, params[])
{
    if(IsAdmin(playerid, 3))
    {
	    new s;
		if(!strlen(params)) s=random(5);
		else s=strval(params);
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		CreateFireWork(x, y, z, s, 15);
	}
	return 1;
}


CMD:djfw(playerid, params[])
{
    if(IsAdmin(playerid, 3))
    {
        new s=random(5);
		CreateFireWork(229.7217, -1800.4037, 5.5535, s, 15); // 1
		CreateFireWork(215.7636, -1801.3099, 5.6017, s, 15);// 3
		CreateFireWork(199.9577, -1801.4814, 5.5017, s, 15); // 4
		CreateFireWork(186.1241, -1800.3197, 5.5535, s, 15); // 5
		CreateFireWork(207.7548, -1783.0483, 5.5535, s, 15); // 5
	}
	return 1;
}

CMD:radio(playerid)
{
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if(GetPlayerState(playerid) != 2) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}you must be in a vehicle to use this command");
   ShowPlayerDialog(playerid, 30, DIALOG_STYLE_LIST, ""LIGHTRED_"Live radio channels", "MUSIK Main - 80, 90's Disco\n181.fm - Rock\nMUSIK CLUB - Trance, Electro\nMUSIK HOUSE - Mixed Electro\nTechnoBase FM\nHouseTime FM - 24h Electro\nCountry Music\nKiss FM", "Play", "Exit");
   return 1;
}
CMD:loadpos(playerid)
{
   if(!IsAdmin(playerid, 3)) return SendMsg(playerid, 5);
   if(!GetPVarInt(playerid, "savedpos")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}no position has been saved use (/savepos)");
   TeleportPlayer(playerid, GetPVarFloat(playerid, "savedx"), GetPVarFloat(playerid, "savedy"), GetPVarFloat(playerid, "savedz"), GetPVarFloat(playerid, "saveda"), 0);
   SetPlayerVirtualWorldEX(playerid, GetPVarInt(playerid, "wrldd"));
   SetPlayerInterior(playerid, GetPVarInt(playerid, "intd"));
   return 1;
}
CMD:savepos(playerid)
{
   if(!IsAdmin(playerid, 3)) return SendMsg(playerid, 5);
   new Float:sPos[4];
   GetPlayerPos(playerid, sPos[0], sPos[1], sPos[2]);
   GetPlayerFacingAngle(playerid, sPos[3]);
   SetPVarInt(playerid, "savedpos", true);
   SetPVarFloat(playerid, "savedx", sPos[0]);
   SetPVarFloat(playerid, "savedy", sPos[1]);
   SetPVarFloat(playerid, "savedz", sPos[2]);
   SetPVarFloat(playerid, "saveda", sPos[3]);
   SetPVarInt(playerid, "wrldd", GetPlayerVirtualWorld(playerid));
   SetPVarInt(playerid, "intd", GetPlayerInterior(playerid));
   SendClientMessage(playerid, RACE, "position saved use (/loadpos) to teleport to it");
   return 1;
}
CMD:lpos(playerid)
{
   if(!GetPVarInt(playerid, "instunt")) return SendWarning(playerid, "You must be in /stunt to use this command");
   if(!GetPVarInt(playerid, "savedpos")) return SendClientMessage(playerid, RED, "{A6856A}» Stunt «{96A66A} No position has been saved, use {A6856A}(/SPos)");
   if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return SendWarning(playerid, "You must exit the vehicle to use this command!");
   if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER) return SendWarning(playerid, "You must exit the vehicle to use this command!");
   TeleportPlayer(playerid, GetPVarFloat(playerid, "savedx"), GetPVarFloat(playerid, "savedy"), GetPVarFloat(playerid, "savedz"), GetPVarFloat(playerid, "saveda"), 0);
   SetPlayerVirtualWorldEX(playerid, GetPVarInt(playerid, "wrldd"));
   SetPlayerInterior(playerid, GetPVarInt(playerid, "intd"));
   return 1;
}
CMD:spos(playerid)
{
   if(!GetPVarInt(playerid, "instunt")) return SendWarning(playerid, "You must be in /stunt to use this command");
   new Float:sPos[4];
   GetPlayerPos(playerid, sPos[0], sPos[1], sPos[2]);
   GetPlayerFacingAngle(playerid, sPos[3]);
   SetPVarInt(playerid, "savedpos", true);
   SetPVarFloat(playerid, "savedx", sPos[0]);
   SetPVarFloat(playerid, "savedy", sPos[1]);
   SetPVarFloat(playerid, "savedz", sPos[2]);
   SetPVarFloat(playerid, "saveda", sPos[3]);
   SetPVarInt(playerid, "wrldd", GetPlayerVirtualWorld(playerid));
   SetPVarInt(playerid, "intd", GetPlayerInterior(playerid));
   SendClientMessage(playerid, RACE, "{A6856A}» Stunt «{96A66A} Position saved use (/lpos) to teleport to it");
   return 1;
}
CMD:locate(playerid, params[])
{
   new target;
   if(sscanf(params, "u", target)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA} /locate "GRAY_"<playerid>");
   if(!IsPlayerConnected(target)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}this player is not connected");
   if(!IsValidState(target))  return SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}This player in not spawned.");
   if(IsSpecing[target] == 1) return SendWarning(playerid, "{BABABA}This player is not spawned.");
   new str[128];
   new x = GetPlayerGangZone(target);
   if(x != -255) format(str, sizeof(str), "-Locate- %s is in \"%s\"", pName[target], gSAZones[x][SAZONE_NAME]);
   else format(str, sizeof(str), "-Locate- %s's location is Unknown", pName[target]);
   SendClientMessage(playerid, AdminInfo, str);
   return 1;
}

CMD:medkits(playerid, params[]) return cmd_medkit(playerid, params);
CMD:medkit(playerid, params[])
{
	if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
	if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
	if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
    new str[128];
    new x = GetPlayerGangZone(playerid);
    if(x != -255) format(str, sizeof(str), "{ACACAC}*** {71A3F5}%s is looking for Medkits (Location \"%s\")!", pName[playerid], gSAZones[x][SAZONE_NAME]);
    else format(str, sizeof(str), "{ACACAC}*** {71A3F5}%s is looking for Medkits (Location \"Unknown\")!", pName[playerid]);
    SendPMessageToAll(playerid, str, -1);
    return 1;
}



CMD:repairingkit(playerid, params[]) return cmd_repairkit(playerid, params);
CMD:repairingkits(playerid, params[]) return cmd_repairkit(playerid, params);
CMD:repairkits(playerid, params[]) return cmd_repairkit(playerid, params);
CMD:repairkit(playerid, params[])
{
	if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
	if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
	if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
    new str[128];
    new x = GetPlayerGangZone(playerid);
    if(x != -255) format(str, sizeof(str), "{ACACAC}*** {71A3F5}%s looking for Repair-Kits (Location \"%s\")!", pName[playerid], gSAZones[x][SAZONE_NAME]);
    else format(str, sizeof(str), "{ACACAC}*** {71A3F5}%s is looking for Repair-Kits (Location \"Unknown\")!", pName[playerid]);
    SendPMessageToAll(playerid, str, -1);
    return 1;
}

CMD:drugs(playerid, params[])
{
	if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
	if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
	if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
    new str[128];
    new x = GetPlayerGangZone(playerid);
    if(x != -255) format(str, sizeof(str), "{ACACAC}*** {71A3F5}%s is looking for Drugs (Location \"%s\")!", pName[playerid], gSAZones[x][SAZONE_NAME]);
    else format(str, sizeof(str), "{ACACAC}*** {71A3F5}%s is looking for Drugs (Location \"Unknown\")!", pName[playerid]);
    SendPMessageToAll(playerid, str, -1);
    return 1;
}
CMD:medic(playerid, params[])
{
	if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
	if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
	if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
    new str[128];
    new x = GetPlayerGangZone(playerid);
    if(x != -255) format(str, sizeof(str), "{ACACAC}*** {71A3F5}%s needs a Medic (Location \"%s\")!", pName[playerid], gSAZones[x][SAZONE_NAME]);
    else format(str, sizeof(str), "{ACACAC}*** {71A3F5}%s needs a Medic (Location \"Unknown\")!", pName[playerid]);
    SendPMessageToAll(playerid, str, -1);
    return 1;
}

CMD:cops(playerid, params[]) return cmd_911(playerid, params);
CMD:police(playerid, params[]) return cmd_911(playerid, params);
CMD:cop(playerid, params[]) return cmd_911(playerid, params);
CMD:911(playerid, params[])
{
	if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
	if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
	if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
    new str[128];
    new x = GetPlayerGangZone(playerid);
    if(x != -255) format(str, sizeof(str), "{ACACAC}*** {71A3F5}%s calls the Cops (Location \"%s\")!", pName[playerid], gSAZones[x][SAZONE_NAME]);
    else format(str, sizeof(str), "{ACACAC}*** {71A3F5}%s calls the Cops (Location \"Unknown\")!", pName[playerid]);
    SendPMessageToAll(playerid, str, -1);
    return 1;
}
CMD:porn(playerid, params[]) return cmd_sex(playerid, params);
CMD:sex(playerid, params[])
{
	if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
	if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
	if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
    new str[256];
    new x = GetPlayerGangZone(playerid);
    if(x != -255) format(str, sizeof(str), "{ACACAC}*** {71A3F5}%s is looking for a whore, he will pay good! (Location \"%s\")!", pName[playerid], gSAZones[x][SAZONE_NAME]);
    else format(str, sizeof(str), "{ACACAC}*** {71A3F5}%s is looking for a whore, he will pay good! (Location \"Unknown\")!", pName[playerid]);
    SendPMessageToAll(playerid, str, -1);
    return 1;
}

CMD:myzone(playerid)
{
    if(IsPlayerAdmin(playerid))
    {
	new str[128];
	new x = GetPlayerGangZone(playerid);
	if(x != -255) format(str, sizeof(str), "You are in zone : \"%s\""GRAY_" %d", gSAZones[x][SAZONE_NAME], x);
	else format(str, sizeof(str), "Unknown");
	SendClientMessage(playerid, RED, str);
	}
	return 1;
}
new nxslock=0;
CMD:locknxs(playerid)
{
  if(!IsAdmin(playerid, 10)) return SendMsg(playerid, 5);
  if(nxslock == 1)
  {
	 nxslock =0;
	 new str[128];
	 format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}Admin %s has unlocked the GTA DM", gAname(playerid));
	 SendClientMessageToAll(AdminInfo, str);
  }
  else if(nxslock == 0)
  {
	 nxslock =1;
	 new str[128];
	 format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}Admin %s has locked the GTA DM", gAname(playerid));
	 SendClientMessageToAll(AdminInfo, str);
  }
  return 1;
}
CMD:dodm(playerid)
{
    //SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}nXs Deathmatch is currently being fixed.");
    if(nxslock == 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}The DoD Deathmatch is currently being fixed!");
    if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");
    if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
	new str[200];
	format(str, sizeof(str), ""GREEN_"%s\n"RED_"%s\n"YELLOW_"Spectator", cwname[0], cwname[1]);
	if(IsDoDMember(playerid) || IsAdmin(playerid, 1) || GetPVarInt(playerid, "invitedToDoDDM") ||PlayerInfo[playerid][pCwAdmin] > 0)
	{
      ShowPlayerDialog(playerid, 6589, DIALOG_STYLE_LIST, "Pick your team", str, "Select", "Cancel");
      SetPlayerVirtualWorldEX(playerid, 6969);
    }
	else SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be a DoD member to use this command.");
	return 1;
}
/*CMD:team(playerid)
{
    //SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}nXs Deathmatch is currently being fixed.");
    if(InCW[playerid] == 0)  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be in the nXs Deathmatch to use this command");
    if(nxslock == 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}The nXs Deathmatch is currently being fixed!");
    if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");
    if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail."); return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail."); return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail."); return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   // if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
	new str[200];
	format(str, sizeof(str), ""GREEN_"%s\n"RED_"%s\n"YELLOW_"Spectator", cwname[0], cwname[1]);
	if(IsnXsMember(playerid) || IsAdmin(playerid, 1) || GetPVarInt(playerid, "invitedToDoDDM") ||PlayerInfo[playerid][pCwAdmin] > 0)
	{
      ShowPlayerDialog(playerid, 6589, DIALOG_STYLE_LIST, "Pick your team", str, "Select", "Cancel");
      SetPlayerVirtualWorldEX(playerid, 6969);
    }
    return 1;
}*/
CMD:cwinvite(playerid, params[])
{
   new target;
   if(!IsAdmin(playerid, 1) && !IsDoDMember(playerid) && PlayerInfo[playerid][pCwAdmin] ==0) return SendMsg(playerid, 5);
   if(sscanf(params, "u", target)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}/cwinvite "GRAY_"<playerid>");
   if(!IsPlayerConnected(target)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This player is not connected");
   SetPVarInt(target, "invitedToDoDDM", true);
   new str[128];
   format(str, sizeof(str), "{9F00BF}» DoDM « {0050BF}%s has invited you to join the DoD Deathmatch, use {9F00BF}(/DoDM){0050BF} to join it", pName[playerid]);
   SendClientMessage(target, LIGHTRED, str);
   format(str, sizeof(str), "{9F00BF}» DoDM « {0050BF}You have invited %s to join the DoD Deathmatch.", pName[target]);
   SendClientMessage(playerid, LIGHTRED, str);
   return 1;
}
CMD:resetcw(playerid, params[])
{
   if(PlayerInfo[playerid][pCwAdmin] ==0) return SendMsg(playerid, 5);
   if(InCW[playerid] == 0 )  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be in DoD DM to use this command");

   new str[128];
   format(str, sizeof(str), "{9F00BF}» DoDM «{0050BF} Admin %s has reseted the clan war", gAname(playerid));
   SendClientMessageToAll(LIGHTRED, str);
   TeamnXsScore=0;
   TeamAwayScore=0;


   foreach (new i : Player)
   {
	if(nxsdm[i] == 1)
	{
		new naofao[50];
        PlayerTextDrawSetStringEX(i, DMpTD[i][0], "-");
	    PlayerTextDrawSetStringEX(i, DMpTD[i][2], "-");
	    PlayerTextDrawSetStringEX(i, DMpTD[i][6], "-");
        PlayerTextDrawSetStringEX(i, DMpTD[i][7], "~b~~h~DoD ~h~DM");
        format(naofao, sizeof(naofao), "~y~%s:~y~~h~ 0", cwname[0]);
	    PlayerTextDrawSetStringEX(i, DMpTD[i][3], naofao);
        format(naofao, sizeof(naofao), "~b~%s:~b~~h~ 0", cwname[1]);
	    PlayerTextDrawSetStringEX(i, DMpTD[i][4], naofao);
	    PlayerTextDrawSetStringEX(i, DMpTD[i][1], "~g~Kills:~g~~h~ 0");
	    PlayerTextDrawSetStringEX(i, DMpTD[i][5], "~r~Deaths:~g~~h~ 0");

        SetPlayerArmour(i, 0);
        SetPlayerHealth(i, 100);
		SetCwPos(i);
    	if(InCW[i] != 3)
    	{
		  ResetPlayerWeaponsEX(i);
          GivePlayerWeaponEX(i, CwWeaps[0], 9999);
		  GivePlayerWeaponEX(i, CwWeaps[1], 9999);
		  GivePlayerWeaponEX(i, CwWeaps[2], 9999);
    	}
    	SetPlayerVirtualWorldEX(i, 1000000);
	}
   }
   return 1;
}

CMD:cwpos(playerid)
{
   if(PlayerInfo[playerid][pCwAdmin] ==0) return SendMsg(playerid, 5);
   if(InCW[playerid] == 0)  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be in the DoD Deathmatch to use this command");
   ShowPlayerDialog(playerid, 6591, DIALOG_STYLE_LIST, "Clan-War Location", ""YELLOW_"San Fierro Airport\n"YELLOW_"Turning Trick\n"YELLOW_"Las Venturas Stadium\n"YELLOW_"Far Far Away\n", "Select", "Cancel");
   return 1;
}
CMD:freezeall(playerid, params[])
{
   if(PlayerInfo[playerid][pCwAdmin] ==0) return SendMsg(playerid, 5);
   if(InCW[playerid] == 0)  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be in DoD Deathmatch to use this command");

   foreach (new i : Player)
   {
	    if((InCW[i] == 1) || (InCW[i] == 2))
	    {
			 TogglePlayerControllable2(i, 0);
		}
   }
   new str[128];
   format(str, sizeof(str), "{9F00BF}» DoDM «{0050BF} Admin %s has freezed all players in the DoD Deathmatch", gAname(playerid));
   SendClientMessageToAll(AdminInfo, str);
   return 1;
}
CMD:healall(playerid, params[])
{
   if(PlayerInfo[playerid][pCwAdmin] ==0) return SendMsg(playerid, 5);
   if(InCW[playerid] == 0)  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be in DoD Deathmatch to use this command");

   foreach (new i : Player)
   {
	    if((InCW[i] == 1) || (InCW[i] == 2))
	    {
			 SetPlayerHealth(i, 100);
		}
   }
   new str[128];
   format(str, sizeof(str), "{9F00BF}» DoDM «{0050BF} Admin %s has healed all players in the DoD Deathmatch", gAname(playerid));
   SendClientMessageToAll(AdminInfo, str);
   return 1;
}
CMD:unfreezeall(playerid, params[])
{
   if(PlayerInfo[playerid][pCwAdmin] ==0) return SendMsg(playerid, 5);
   if(InCW[playerid] == 0)  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be in the DoD Deathmatch to use this command");

   foreach (new i : Player)
   {
	    if((InCW[i] == 1) || (InCW[i] == 2))
	    {
			 TogglePlayerControllable2(i, 1);
		}
   }
   new str[128];
   format(str, sizeof(str), "{9F00BF}» DoDM «{0050BF} Admin %s has unfreezed all players in the DoD Deathmatch", gAname(playerid));
   SendClientMessageToAll(AdminInfo, str);
   return 1;
}
/*
CMD:cwcmds(playerid)
{
   if(PlayerInfo[playerid][pCwAdmin] ==0) return SendMsg(playerid, 5);
   new str[700];
   strcat(str, ""LIGHTRED_"Available Commands\n"LIGHTYELLOW_"/cwweapons "WHITE_"change the weapons of the clan war\n"LIGHTYELLOW_"/freezeall "WHITE_"freeze all players in the clan war\n"LIGHTYELLOW_"/unfreezeall "WHITE_"unfreeze all players in the clan war.\n");
   strcat(str, "\n"LIGHTYELLOW_"/Cwpos "WHITE_"change position of the clan war\n"LIGHTYELLOW_"/cwinvite"WHITE_" invite someone to the nXs Deathmatch\n"LIGHTYELLOW_"/resetcw "WHITE_"reset all cw scores to zero\n"LIGHTYELLOW_"/cwscore "WHITE_"set the winning score of clanwar\n"LIGHTYELLOW_"/cwteams "WHITE_"rename the clan-war teams");
   ShowPlayerDialog(playerid, 7471, DIALOG_STYLE_MSGBOX, "Clan war CP", str, "close", "");
   return 1;
}*/
CMD:cwteams(playerid, params[])
{
   if(PlayerInfo[playerid][pCwAdmin] ==0) return SendMsg(playerid, 5);
   if(InCW[playerid] == 0)  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be in the DoD Deathmatch to use this command");
   if(sscanf(params, "s[30]s[30]", cwname[0], cwname[1])) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA} /cwteams <Team1 Name> <Team2 Name>");
   return 1;
}
CMD:cwweapons(playerid, params[])
{
   if(PlayerInfo[playerid][pCwAdmin] ==0 && (strfind(pName[playerid], "[DoD]", true) == -1 && (strfind(pName[playerid], "]DoD[", true) == -1 && (strfind(pName[playerid], "[DoD.t]", true) == -1)))) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}you must be a neXus clan member to use this command!"); //return SendMsg(playerid, 5);
   new weap1[24], weap2[24], weap3[24];
   if(InCW[playerid] == 0)  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be in the DoD Deathmatch to use this command");
   if(sscanf(params, "s[24]S(Unarmed)[24]S(Unarmed)[24]", weap1, weap2, weap2)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA} /cwweapons "GRAY_"<weapon name 1> <weapon 2>* <weapon 3>*");

   CwWeaps[0] = GetWeaponModelIDFromName(weap1);
   CwWeaps[1] = GetWeaponModelIDFromName(weap2);
   CwWeaps[2] = GetWeaponModelIDFromName(weap3);
   foreach (new i : Player)
   {
	    if((InCW[i] == 1) || (InCW[i] == 2))
	    {
		  ResetPlayerWeaponsEX(i);
	      GivePlayerWeaponEX(i, CwWeaps[0], 9999);
	 	  GivePlayerWeaponEX(i, CwWeaps[1], 9999);
		  GivePlayerWeaponEX(i, CwWeaps[2], 9999);
		}
   }
   new str[128];
   format(str, sizeof(str), "{9F00BF}» DoDM «{0050BF} Admin %s has changed the clan war weapons", gAname(playerid));
   SendClientMessageToAll(AdminInfo, str);
   return 1;
}
CMD:cwscore(playerid, params[])
{
   if(PlayerInfo[playerid][pCwAdmin] ==0) return SendMsg(playerid, 5);
   if(InCW[playerid] == 0)  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be in the DoD Deathmatch to use this command");
   if(sscanf(params, "d", cwwinscore)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA} /cwscore <winning score>");
   new str[128];
   format(str, sizeof(str), "{9F00BF}» DoDM «{0050BF} Admin %s has changed the Clan War winning score to %d", gAname(playerid), cwwinscore);
   SendClientMessageToAll(AdminInfo, str);
   return 1;
}
stock SendToCw(playerid, team)
{
   for(new x=0; x<26; x++) PlayerTextDrawHide(playerid, GwTD[playerid][x]);
   SavePlayerCoords(playerid);
   SetPlayerArmour(playerid, 0);
   SetPlayerHealth(playerid, 100);
   new msg[128];
   if(team == 1)
   {
     format(msg, sizeof(msg), "{9F00BF}» DoDM «{0050BF} %s has joined the DoD Deathmatch {9F00BF}(/DoDM){0050BF} - Team: %s", pName[playerid], cwname[0]);
   }
   else if(team == 2)
   {
     format(msg, sizeof(msg), "{9F00BF}» DoDM «{0050BF} %s has joined the DoD Deathmatch {9F00BF}(/DoDM){0050BF} - Team: %s", pName[playerid], cwname[1]);
   }
   else if(team == 3)
   {
     format(msg, sizeof(msg), "{9F00BF}» DoDM «{0050BF} %s has joined the DoD Deathmatch {9F00BF}(/DoDM){0050BF} - Spectator", pName[playerid]);
   }
   SendClientMessageToAll(-1, msg);
   InCW[playerid] = team;
   nxsdm[playerid]=1;
   //SendClientMessage(playerid, RED, "{9F00BF}DoDM {0050BF}You can change your team by typing {9F00BF}(/team)");
   SetCwPos(playerid);
   SetPlayerVirtualWorldEX(playerid, 1000000);
   SetPlayerInterior(playerid, 0);
   SendClientMessage(playerid, -1, "{9F00BF}» DoDM «{0050BF} You can use {9F00BF}(/dodmchat) {0050BF}to chat with your team!");

   new TdStR[128];
   format(TdStR, sizeof(TdStR), "~y~%s:~y~~h~ %d", cwname[0], TeamnXsScore);
   PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][3], TdStR);
   format(TdStR, sizeof(TdStR), "~b~%s:~g~~h~ %d", cwname[1], TeamAwayScore);
   PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][4], TdStR);
   format(TdStR, sizeof(TdStR), "~r~Kills:~r~~h~ %d", GetPVarInt(playerid, "CwKilles"));
   PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][1], TdStR);
   format(TdStR, sizeof(TdStR), "~g~Deaths:~g~~h~ %d", GetPVarInt(playerid, "CwDeaths"));
   PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][5], TdStR);
   PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][7], "~b~~h~DoD ~h~DM");
   for(new x=0; x<8; x++) PlayerTextDrawShow(playerid, DMpTD[playerid][x]);

   if((team != 3) && (team > 0))
   {
	  ResetPlayerWeaponsEX(playerid);
	  GivePlayerWeaponEX(playerid, CwWeaps[0], 9999);
	  GivePlayerWeaponEX(playerid, CwWeaps[1], 9999);
	  GivePlayerWeaponEX(playerid, CwWeaps[2], 9999);
   }
   SetCameraBehindPlayer(playerid);
}

CMD:afix(playerid, params[])
{
   new target;
   if(!IsAdmin(playerid, 3)) return SendMsg(playerid, 5);
   if(sscanf(params, "u", target)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA} /afix "GRAY_"<playerid>");
   if(!IsPlayerConnected(target)) return SendWarning(playerid, "{BABABA}This player is not connected");
   if(IsPlayerNPC(target) && !strcmp(pName[target], "Jonny")) SendNpcPM(playerid, "retard!"), GiveMedal(playerid, 24);
   if(IsPlayerNPC(target)) return 0;
   if(GetPVarInt(target, "RACER")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant fix cars in race");

   if(!IsPlayerInAnyVehicle(target)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This player is not in a vehicle");
   if(Iter_Contains(InSumo, target)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Dont abuse fix in sumo bitch");
   if(GetPVarInt(target, "InDerby")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Dont abuse fix in derby bitch");
   if(InCanon[target] > 0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Dont abuse fix in cannon bitch");

   RepairVehicle(GetPlayerVehicleID(target));
   SetVehicleHealth(GetPlayerVehicleID(target), 1000.0);

   new str[128];
   format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}you have fixed %s's vehicle", pName[target], target);
   SendClientMessage(playerid, AdminInfo, str);
   format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}your vehicle has been fixed by admin %s", gAname(playerid));
   SendClientMessage(target, AdminInfo, str);
   return 1;
}

CMD:giveweapon(playerid, params[])
{
   new target, weaponid, ammo;
   if(!IsAdmin(playerid, 3)) return SendMsg(playerid, 5);
   if(sscanf(params, "udd", target, weaponid, ammo)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA} /giveweapon "GRAY_"<playerid> <weaponid> <ammo>");
   if(IsPlayerNPC(target) && !strcmp(pName[target], "Jonny")) SendNpcPM(playerid, "put it in your ass i dont need weapons"), GiveMedal(playerid, 24);
   if(IsPlayerNPC(target)) return 0;
   if(!IsPlayerConnected(target)) SendClientMessage(playerid, RED, "this player is not connected");

   if(weaponid == 18 || weaponid == 44 || weaponid == 45 || (weaponid >= 35 && weaponid <= 38)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}this weaponid is not allowed");
   if(weaponid < 0 || weaponid > 46) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Invalid weapon id");
   GivePlayerWeaponEX(target, weaponid, ammo);
   new GunName[32];
   GetWeaponName(weaponid, GunName, 32);
   new str[128];
   format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}You have given %s (%d) a %s", pName[target], target, GunName);
   SendClientMessage(playerid, AdminInfo, str);
   format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}Admin %s has given you a %s", gAname(playerid), GunName);
   SendClientMessage(target, AdminInfo, str);
   return 1;
}/*
CMD:checkaim(playerid, params[])
{
  new target;
  if(!IsAdmin(playerid, 1)) return SendMsg(playerid, 5);
  if(sscanf(params, "u", target)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA} /checkaim "GRAY_"<playerid>");
  if(IsPlayerNPC(target) && !strcmp(pName[target], "Jonny")) SendNpcPM(playerid, "gtfo");
  if(IsPlayerNPC(target)) return 0;
  if(!IsPlayerConnected(target)) SendClientMessage(playerid, RED, "This player is not connected");


  return 1;
}*/
CMD:aheal(playerid, params[])
{
    if(pInGW[playerid])  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command during a gangwar!");
	new target;
    if(!IsAdmin(playerid, 3)) return SendMsg(playerid, 5);
    if(sscanf(params, "u", target)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA} /aheal "GRAY_"<playerid>");
	if(!IsPlayerConnected(target))  return SendWarning(playerid, "{BABABA}This player is not connected");
 	if(IsPlayerNPC(target) && !strcmp(pName[target], "Jonny")) return SendNpcPM(playerid, "GTFO"), GiveMedal(playerid, 24);
    if(IsPlayerNPC(target)) return 0;

	SetPlayerHealth(target, 100);
	new str[128];
    format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}You have healed %s (%d)", pName[target], target);
    SendClientMessage(playerid, AdminInfo, str);
    format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}You have been healed by admin %s", gAname(playerid));
    SendClientMessage(target, AdminInfo, str);
    return 1;
}
CMD:aarmour(playerid, params[])
{
    if(pInGW[playerid])  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command during a gangwar!");
	new target;
    if(!IsAdmin(playerid, 3)) return SendMsg(playerid, 5);
    if(sscanf(params, "u", target)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA} /aarmour "GRAY_"<playerid>");
	if(!IsPlayerConnected(target))  return SendWarning(playerid, "{BABABA}This player is not connected");
 	if(IsPlayerNPC(target) && !strcmp(pName[target], "Jonny")) return SendNpcPM(playerid, "GTFO"), GiveMedal(playerid, 24);
    if(IsPlayerNPC(target)) return 0;

	SetPlayerArmour(target, 100);
	new str[128];
    format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}You have given an armour to %s (%d)", pName[target], target);
    SendClientMessage(playerid, AdminInfo, str);
    format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}You have been given an armour by admin %s", gAname(playerid));
    SendClientMessage(target, AdminInfo, str);
    return 1;
}
CMD:myworld(playerid)
{
     if(!IsAdmin(playerid, 1)) return SendMsg(playerid, 5);
	 new str[50];
	 format(str, sizeof(str), "Your virtual world is :"GRAY_" %d", GetPlayerVirtualWorld(playerid));
	 SendClientMessage(playerid, RED, str);
	 return 1;
}
CMD:jetpack(playerid)
{
      if(!IsAdmin(playerid, 3)) return SendWarning(playerid, "You are not authorized to use this command.");
      SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);
      return 1;
}
CMD:jp(playerid)
{
      if(!IsAdmin(playerid, 10)) return SendMsg(playerid, 5);
	  if(GetPlayerSpecialAction(playerid == 2)) return SendClientMessage(playerid, RED, "{A6856A}» Error «{96A66A} The command \"/jetpack\" is not available, try \"/help\" instead.");
      SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);
      return 1;
}
CMD:god(playerid)
{
      if(Iter_Contains(InSumo, playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}dont abuse god in sumo bitch");
	  //if(!IsAdmin(playerid, 10) && PlayerInfo[playerid][UserID] != 52811) return 0;
      if(!IsAdmin(playerid, 10)) return 0;
      if(GOD[playerid] == 1)
      {
           SendInfoText(playerid, 1000, "God Mode ~r~Disabled!");
		   SetPlayerHealth(playerid, 100);
		   GOD[playerid]=0;
      }
      else
      {
           SendInfoText(playerid, 1000, "God Mode ~g~Enabled!");
		   SetPlayerHealth(playerid, 10000000);
		   GOD[playerid]=1;
      }
      return 1;
}
CMD:report(playerid, params[])
{
      if ((GetTickCount() - TickCount[playerid][ReportTick])  < 30*1000 ) return SendClientMessage( playerid, RED, ""RED_"» Error « {BABABA}You cant use this command that often!" );
      if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
      new str2[144], str[144], id;
      new msg[128];
      if(sscanf(params, "us[144]", id, str2)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA} /report "GRAY_"<playerid> <reason>");
	  if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
	  if(id == playerid) return SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You cant report yourself.");
      if(IsPlayerNPC(id) && !strcmp(pName[id], "Jonny")) SendNpcPM(playerid, "You gonna pay for this");
      if(PlayerInfo[playerid][Muted] > 1) return SendWarning(playerid, "You cant use this command while being muted!");
      format(msg, sizeof(msg), "{FF975E}Thank you. {FFFF6D}Your report has been sent to online admins! {70AB5C}(Online Admins: %d) {E62525}(AFK Admins: %d)", CountOnlineAdmins(), CountAFKAdmins());
      SendClientMessage(playerid, 0xA3CC00FF, msg);
      TickCount[playerid][ReportTick]=GetTickCount();
     // if(PlayerInfo[playerid][Muted] > 1) SendClientMessage(playerid, LIGHTRED, "To prevent abusing, you cannot provide a reason while being muted!"), format(str, sizeof(str), "» Report « %s (%d) has reported %s (%d)", pName[playerid], playerid, pName[id], id);
      format(str, sizeof(str), "{FF975E}» Report « "RED_"%s (%d) has reported %s (%d) for %s", pName[playerid], playerid, pName[id], id, str2);

      PlayCrimeReportForPlayer(playerid, id, 15);
	  foreach (new i : Player)
	  {
		if(PlayerInfo[i][pAdmin] > 0) SendClientMessage(i, RED, str), PlayCrimeReportForPlayer(i, id, 15), PlayerPlaySound(i, 3201, 0.0, 0.0, 0.0);
	  }
	  return 1;
}
stock CountOnlineAdmins()
{
	 new count;
	 foreach(new i : Player)
	 {
	   if(IsAdmin(i, 1) && !GetPVarInt(i, "AFK") && !GetPVarInt(i, "Hidden") && !GetPVarInt(i, "HideMeBitch") && HFA[i] == 0 && g_IsPaused[i] != true) count++;
	 }
	 return count;
}

stock CountAFKAdmins()
{
	 new count;
	 foreach(new i : Player)
	 {
	   if(IsAdmin(i, 1) && (GetPVarInt(i, "AFK") && !GetPVarInt(i, "Hidden") && !GetPVarInt(i, "HideMeBitch") && HFA[i] == 0 || g_IsPaused[i] == true)) count++;
	 }
	 return count;
}

CMD:settime(playerid, params[])
{
      if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
      if(!IsAdmin(playerid, 3)) return SendMsg(playerid, 5);
      new time;
      if(sscanf(params, "d", time)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA} /settime "GRAY_"<hour>");
      if(time < 0 || time > 24) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA} /settime "GRAY_"<hour>");
	  foreach(new i : Player)
	  {
		  if(Spawned[i] == 1) SetPlayerTime(i, time, 0);
	  }
 	  new str[128];
	  format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}Admin %s has changed the world time", gAname(playerid));
	  SendClientMessageToAll(AdminInfo, str);
	  return 1;
}
CMD:mytime(playerid, params[])
{
      if(Spawned[playerid] == 0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be spawned to use this command");

      if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
      new time;
      if(sscanf(params, "d", time)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA} /mytime "GRAY_"<hour>");
      if(time < 0 || time > 24) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA} /mytime "GRAY_"<hour>");
	  SetPlayerTime(playerid, time, 0);
	  return 1;
}

CMD:setweather(playerid, params[])
{
      if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
      if(!IsAdmin(playerid, 3)) return SendMsg(playerid, 5);
      new weather;
      if(sscanf(params, "d", weather)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA} /setweather "GRAY_"<ID>");
      ServerWeather = weather;
      SetWeather(weather);
	  new str[128];
	  format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}Admin %s has changed the weather", gAname(playerid));
	  SendClientMessageToAll(AdminInfo, str);
	  return 1;
}
CMD:myweather(playerid, params[])
{
      if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
      if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
      new weather;
      if(sscanf(params, "d", weather)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA} /myweather "GRAY_"<ID>");
      SetPlayerWeather(playerid, weather);
	  return 1;
}
CMD:setwanted(playerid, params[])
{
      if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
      if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
      if(!IsAdmin(playerid, 3)) return SendMsg(playerid, 5);
      new level, target;
      if(sscanf(params, "ud", target, level)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA} /setwanted "GRAY_"<playerid> <wanted level>");
	  if(!IsPlayerConnected(target))  return SendWarning(playerid, "{BABABA}This player is not connected");
 	  if(IsPlayerNPC(target) && !strcmp(pName[target], "Jonny")) return SendNpcPM(playerid, "Dont mess with me"), GiveMedal(playerid, 24);
      if(IsPlayerNPC(target)) return 0;
      if(target == INVALID_PLAYER_ID) return SendWarning(playerid, "Player not found");
	  SetPlayerWantedLevelEx(target, level);
	  new str[128];
	  format(str, sizeof(str), "you have set %s's wanted level to %d", pName[target], level);
      SendClientMessage(playerid, RED, str);
	  return 1;
}

CMD:vrecord(playerid, params[])
{
   if(!IsAdmin(playerid, 1)) return 0;
   new NaMe[50];
   if(sscanf(params, "s[50]", NaMe)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA} /vrecord {name}");
   if(!IsPlayerInAnyVehicle(playerid)) SendClientMessage(playerid, RED, "warning: Get in a vehicle.");

   StartRecordingPlayerData(playerid, PLAYER_RECORDING_TYPE_DRIVER, NaMe);
   SendClientMessage(playerid, BLUE, "In vehicle recording started.");
   SendClientMessage(playerid, BLUE, "Usage (/stoprecord) to stop");
   return 1;
}

CMD:ofrecord(playerid, params[])
{
   if(!IsAdmin(playerid, 1)) return 0;
   new NaMe[50];
   if(sscanf(params, "s[50]", NaMe)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA} /ofrecord {name}");

   StartRecordingPlayerData(playerid, PLAYER_RECORDING_TYPE_ONFOOT, NaMe);
   SendClientMessage(playerid, BLUE, "On foot recording started.");
   SendClientMessage(playerid, BLUE, "Usage (/stoprecord) to stop");

   return 1;
}
CMD:stoprecord(playerid)
{
  if(!IsAdmin(playerid, 1)) return 0;
  StopRecordingPlayerData(playerid);
  SendClientMessage(playerid, BLUE, "Recording: stopped.");
  return 1;
}

CMD:takeballon(playerid)
{
	if(!IsPlayerInRangeOfPoint(playerid, 2.00, -2289.7161, -1637.6492, 483.0000)) return SendClientMessage( playerid, RED, "you must be inside the hot air balloon in Chilliad to use this command");
	if(BalloonMoving >= 0) return 0;
	BalloonMoving = 0;
    SendClientMessage( playerid, ORANGE, "hot air balloon trip will start in 20 seconds "GRAY_"please wait..");
	SetTimer("moveballoon", 20*1000, false);
	return 1;
}
forward moveballoon();
public moveballoon()
{
	MoveDynamicObject(Balloon, -2289.7161, -1637.6492, 550.0000, 5.00);
    BalloonMoving = 1;
}


CMD:gmx(playerid, params[])
{
   if(!IsAdmin(playerid, 15)) return SendMsg(playerid, 5);
   if((strval(params) > 1) && (strval(params) <= 50))
   {
	SetTimer("GMX", 1000, true);
	gmxcount=strval(params);
   }
   else
   {
		SendRconCommand("gmx");
   }
   return 1;
}
forward GMX();
public GMX()
{
   gmxcount--;
   new str[50];
   format(str, sizeof(str), "~r~Server Restart: ~y~%d", gmxcount);
   if(gmxcount > 0) SendInfoText2(2000, str);
   if(gmxcount <= 1)
   {
          SendRconCommand("gmx");
   }
   return 1;
}
stock IsValidName(name[])
{
	new len=strlen(name);
	if(len<3 || len>20)
	    return false;

	for(new i=0;i<len;i++)
	{
	    if((name[i]>='a' && name[i]<='z') || (name[i]>='A' && name[i]<='Z') || (name[i]>='0' && name[i]<='9')
	        || name[i]=='[' || name[i]==']' || name[i]=='_' || name[i]=='.' || name[i]=='@' || name[i]=='$'
			|| name[i]=='(' || name[i]==')' || name[i]=='=')
			continue;
		else
		    return false;
	}
	return true;
}
CMD:botmsg(playerid, params[])
{
  if(!IsAdmin(playerid, 4)) return SendMsg(playerid, 5);
  /*if(!strlen(params))*/
  if (isnull(params)) return SendWarning(playerid, "Usage : /botmsg <text>");
  if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
  if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
  //if(sscanf(params, "us[128]", params)) return SendClientMessage(playerid, RED, "Usage : "GRAY_"/botmsg <text>");
  SendBotMessage(params);
  return 1;
}
CMD:botpm(playerid, msg[])
{
  if(!IsAdmin(playerid, 4)) return SendMsg(playerid, 5);
  if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
  if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
  new id;
  new str[256];
  if(sscanf(msg, "us[128]", id, msg)) return SendWarning(playerid, "{BABABA}"RED_"» Error « {BABABA} /botpm <playerid> <text>");
  format(str, sizeof(str), "» PM « from Jonny(%d): %s", NpcID(), msg);
  SendClientMessageEX(id, PINK, str);
  PlayerPlaySound(id, 1057, 0.0, 0.0, 0.0);
  format(str, sizeof(str), "» PM « from Jonny to %s: %s", pName[id], msg);
  foreach (new i : Player) if(IsAdmin(i, PlayerInfo[playerid][pAdmin]+1)) SendClientMessageEX(i, GRAY, str);//(i != playerid))
  format(str, sizeof(str), "~y~PM FROM ~r~Jonny~y~[~b~%d~y~]~n~RECEIVED!", NpcID());
  SendInfoText(id, 3000, str);
  SendClientMessageEX(id, RACE, "Use "PINK_"/r <Message> "RACE_"to reply directly to the private message");
  return 1;
}
CMD:apm(playerid, msg[])
{
  new id;
  if(!IsAdmin(playerid, 1)) return SendMsg(playerid, 5);
  if(IsAdmin(id, 10)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant admin pm this player.");
  if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
  if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
  if(!IsPlayerConnected(id)) return SendWarning(playerid, ""RED_"» Error « {BABABA}This player is not connected");
  if(id == playerid) return SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You cant Admin-PM yourself.");
  //new id;
  new str[128];
  new shits[128];
  if(sscanf(msg, "us[128]", id, msg)) return SendWarning(playerid, ""RED_"» Error « {BABABA}"RED_"» Error « {BABABA} /apm <playerid> <text>");
  format(str, sizeof(str), ""RED2_"» Admin PM « "RED_"from %s: %s", gAname(playerid), msg);
  SendClientMessageEX(id, PINK, str);
  //PlayerPlaySound(id, 1057, 0.0, 0.0, 0.0);
  PlayerPlaySound(id, 3201, 0.0, 0.0, 0.0);
  format(str, sizeof(str), "» Admin PM « from %s to %s: %s", gAname(playerid), pName[id], msg);
  format(shits, sizeof(shits), ""RED2_"» Admin PM « "RED_"to %s (%d): %s", pName[id], id, msg);
  SendClientMessageEX(playerid, PINK, shits);
  foreach (new i : Player) if(IsAdmin(i, PlayerInfo[playerid][pAdmin]+1)) SendClientMessageEX(i, GRAY, str);
  printf("%s", str);
  format(str, sizeof(str), "~r~Admin PM ~y~FROM ~r~%s ~y~RECEIVED!", gAname(playerid));
  SendInfoText(id, 3000, str);
  //SendClientMessageEX(id, RACE, "Use "PINK_"/r <Message> "RACE_"to reply directly to the private message");
  return 1;
}
CMD:piss(playerid)
{
  if(GetPVarInt(playerid, "ronpiss")) RemovePlayerAttachedObject(playerid, 7);
  if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You can't use this command inside a vehicle");
  if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DRINK_BEER)
  {
   if(IsPlayerFemale(GetPlayerSkin(playerid))) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command with a female skin");
   if(!Blowjobbing[playerid]) ApplyAnimation(playerid, "PAULNMAC", "Piss_in", 3.0, 0, 0, 0, 0, 0), SetPlayerSpecialAction(playerid, 68);
   if(PlayerInfo[playerid][UserID] == 4) SetPVarInt(playerid, "ronpiss", 1), SetPlayerAttachedObject(playerid, 7, 18676, 1, -1.900000, 0.300000, 0.000000, 148.199584, 90.099914, -55.199981, 1.000000, -9.899993, 1.000000);
  }
  if(rTest ==2) rTestWinner(playerid);
  return 1;
}
CMD:handsup(playerid)
{
  if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You can't use this command inside a vehicle");
  if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DRINK_BEER)
  {
   if(!Blowjobbing[playerid]) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_HANDSUP);
  }
  return 1;
}
CMD:sit(playerid)
{
   if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You can't use this command inside a vehicle");
   if(!Blowjobbing[playerid]) ApplyAnimation(playerid, "SUNBATHE", "ParkSit_M_IdleC", 4.1, 0, 1, 1, 1, 1);
   if(rTest ==6) rTestWinner(playerid);
   return 1;
}
CMD:lockctf(playerid)
{
  if(!IsAdmin(playerid, 5)) return SendMsg(playerid, 5);
  if(lockctf == 1)
  {
	 lockctf =0;
  }
  else if(lockctf == 0)
  {
	 lockctf =1;
  }
  return 1;
}
CMD:locksumo(playerid)
{
  if(!IsAdmin(playerid, 5)) return SendMsg(playerid, 5);
  if(locksumo == 1)
  {
	 locksumo =0;
  }
  else if(locksumo == 0)
  {
	 locksumo =1;
  }
  return 1;
}
/*
CMD:race(playerid)
{
   if(RaceStarted != 0)
   {
		if(CountRace() == 0)
		{
            EndRace();
		}
   }
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if((RaceStarted != 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}The Race has already been started");
   if(GetPVarInt(playerid, "MissionProgress") || IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if(aduty[playerid] == 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command while on admin duty.");
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPlayerState(playerid) != 2) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be in a vehicle to enter the race");
   if(EventStarted > 1 && EventType == 2) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant join the race during an event countdown.");
//   if(!IsValidNosVehicle(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant race with this vehicle");
   HidePlayerMenu(playerid);

   if(RaceInfo[RaceIDCount][RaceCpCount] < 1)
   {
     new BA=RaceIDCount;
     GenerateRaceID();
     if(BA==RaceIDCount) GenerateRaceID2();
   }
   new str[128];

   SetPlayerRaceCheckpoint(playerid, 0, RaceInfo[RaceIDCount][StartCP][0], RaceInfo[RaceIDCount][StartCP][1], RaceInfo[RaceIDCount][StartCP][2], RaceCPs[RaceIDCount][0][0], RaceCPs[RaceIDCount][0][1], RaceCPs[RaceIDCount][0][2], 15.0);
   format(str, sizeof(str), "{BAAB34}» Race «{F2EE05} %s has joined the Race%s {BAAB34}(/Race)", pName[playerid], RaceIDstring(RaceIDCount));
   SendClientMessageToAll(0xF2EE05FF, str);
   printf("%s", str);

   TeleportPlayer(playerid, RaceInfo[RaceIDCount][Spawnp][0]+random(5), RaceInfo[RaceIDCount][Spawnp][1]+random(5), RaceInfo[RaceIDCount][Spawnp][2], RaceInfo[RaceIDCount][Spawnp][3], RaceInfo[RaceIDCount][RaceInt]);

   format(str, sizeof(str), "{FFC307}» {AA8202}Top 5 Records of the Race%s {FFC307}«", RaceIDstring(RaceIDCount));
   SendClientMessage(playerid, 0xF2EE05FF, str);
   format(str, sizeof(str), "{AA8202}#1 - {FFC307}%s By %s || %s", ConvertTime(RaceRecords[RaceIDCount][toptime][0]), RaceRecords[RaceIDCount][Top1Player], RaceRecords[RaceIDCount][Top1Car]);
   SendClientMessage(playerid, 0xF2EE05FF, str);
   format(str, sizeof(str), "{AA8202}#2 - {FFC307}%s By %s || %s", ConvertTime(RaceRecords[RaceIDCount][toptime][1]), RaceRecords[RaceIDCount][Top2Player], RaceRecords[RaceIDCount][Top2Car]);
   SendClientMessage(playerid, 0xF2EE05FF, str);
   format(str, sizeof(str), "{AA8202}#3 - {FFC307}%s By %s || %s", ConvertTime(RaceRecords[RaceIDCount][toptime][2]), RaceRecords[RaceIDCount][Top3Player], RaceRecords[RaceIDCount][Top3Car]);
   SendClientMessage(playerid, 0xF2EE05FF, str);
   format(str, sizeof(str), "{AA8202}#4 - {FFC307}%s By %s || %s", ConvertTime(RaceRecords[RaceIDCount][toptime][3]), RaceRecords[RaceIDCount][Top4Player], RaceRecords[RaceIDCount][Top4Car]);
   SendClientMessage(playerid, 0xF2EE05FF, str);
   format(str, sizeof(str), "{AA8202}#5 - {FFC307}%s By %s || %s", ConvertTime(RaceRecords[RaceIDCount][toptime][4]), RaceRecords[RaceIDCount][Top5Player], RaceRecords[RaceIDCount][Top5Car]);
   SendClientMessage(playerid, 0xF2EE05FF, str);

   return 1;

}*/
CMD:race(playerid)
{
   if(RaceStarted != 0)
   {
		if(CountRace() == 0)
		{
            EndRace();
		}
   }
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if((RaceStarted != 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}The Race has already been started");
   if(GetPVarInt(playerid, "MissionProgress") || IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if(aduty[playerid] == 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command while on admin duty.");
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPlayerState(playerid) != 2) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be in a vehicle to enter the race");
   if(EventStarted > 1 && EventType == 2) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant join the race during an event countdown.");
//   if(!IsValidNosVehicle(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant race with this vehicle");
   HidePlayerMenu(playerid);

   if(RaceInfo[RaceIDCount][RaceCpCount] < 1)
   {
     new BA=RaceIDCount;
     GenerateRaceID();
     if(BA==RaceIDCount) GenerateRaceID2();
   }
   new str[128];

   SetPlayerRaceCheckpoint(playerid, 0, RaceInfo[RaceIDCount][StartCP][0], RaceInfo[RaceIDCount][StartCP][1], RaceInfo[RaceIDCount][StartCP][2], RaceCPs[RaceIDCount][0][0], RaceCPs[RaceIDCount][0][1], RaceCPs[RaceIDCount][0][2], 15.0);
   format(str, sizeof(str), "{BAAB34}» Race «{F2EE05} %s has joined the Race%s {BAAB34}(/Race)", pName[playerid], RaceIDstring(RaceIDCount));
   SendClientMessageToAll(0xF2EE05FF, str);

   TeleportPlayer(playerid, RaceInfo[RaceIDCount][Spawnp][0]+random(5), RaceInfo[RaceIDCount][Spawnp][1]+random(5), RaceInfo[RaceIDCount][Spawnp][2], RaceInfo[RaceIDCount][Spawnp][3], RaceInfo[RaceIDCount][RaceInt]);

   format(str, sizeof(str), "{FFC307}» {AA8202}Top 5 Records of the Race%s {FFC307}«", RaceIDstring(RaceIDCount));
   SendClientMessage(playerid, 0xF2EE05FF, str);
   format(str, sizeof(str), "{AA8202}#1 - {FFC307}%s By %s || %s", ConvertTime(RaceRecords[RaceIDCount][toptime][0]), RaceRecords[RaceIDCount][Top1Player], RaceRecords[RaceIDCount][Top1Car]);
   SendClientMessage(playerid, 0xF2EE05FF, str);
   format(str, sizeof(str), "{AA8202}#2 - {FFC307}%s By %s || %s", ConvertTime(RaceRecords[RaceIDCount][toptime][1]), RaceRecords[RaceIDCount][Top2Player], RaceRecords[RaceIDCount][Top2Car]);
   SendClientMessage(playerid, 0xF2EE05FF, str);
   format(str, sizeof(str), "{AA8202}#3 - {FFC307}%s By %s || %s", ConvertTime(RaceRecords[RaceIDCount][toptime][2]), RaceRecords[RaceIDCount][Top3Player], RaceRecords[RaceIDCount][Top3Car]);
   SendClientMessage(playerid, 0xF2EE05FF, str);
   format(str, sizeof(str), "{AA8202}#4 - {FFC307}%s By %s || %s", ConvertTime(RaceRecords[RaceIDCount][toptime][3]), RaceRecords[RaceIDCount][Top4Player], RaceRecords[RaceIDCount][Top4Car]);
   SendClientMessage(playerid, 0xF2EE05FF, str);
   format(str, sizeof(str), "{AA8202}#5 - {FFC307}%s By %s || %s", ConvertTime(RaceRecords[RaceIDCount][toptime][4]), RaceRecords[RaceIDCount][Top5Player], RaceRecords[RaceIDCount][Top5Car]);
   SendClientMessage(playerid, 0xF2EE05FF, str);

   return 1;

}
CMD:raceinfo(playerid)
{
  if(!GetPVarInt(playerid, "RaceStating"))
  {
	ShowRaceInfo(playerid);
	SetPVarInt(playerid, "RaceStating", true);
  }
  return 1;
}
CMD:c(playerid) return cmd_chat(playerid);
CMD:chat(playerid)
{
	new adm=PlayerInfo[playerid][pAdmin];
	if(adm > 6 && !IsDoDMember(playerid)) ShowPlayerDialog(playerid, 8913, DIALOG_STYLE_LIST, "Chat", "{F2FF00}Main Chat\n{00C2F7}Gang Chat\n{FF7AB8}PM Chat\n{00C4A0}Vehicle Chat\n{1AFF00}Admin Chat\n{BA3AAB}Level 5+ Chat\n{FF9200}RCON Chat", "Select", "Exit");
	else if(!IsDoDMember(playerid) && adm == 5) ShowPlayerDialog(playerid, 12816, DIALOG_STYLE_LIST, "Chat", "{F2FF00}Main Chat\n{00C2F7}Gang Chat\n{FF7AB8}PM Chat\n{00C4A0}Vehicle Chat\n{1AFF00}Admin Chat\n{BA3AAB}Level 5+ Chat", "Select", "Exit");
	else if(!IsDoDMember(playerid) && adm == 6) ShowPlayerDialog(playerid, 12816, DIALOG_STYLE_LIST, "Chat", "{F2FF00}Main Chat\n{00C2F7}Gang Chat\n{FF7AB8}PM Chat\n{00C4A0}Vehicle Chat\n{1AFF00}Admin Chat\n{BA3AAB}Level 5+ Chat", "Select", "Exit");
	else if(!IsDoDMember(playerid) && adm == 1) ShowPlayerDialog(playerid, 12817, DIALOG_STYLE_LIST, "Chat", "{F2FF00}Main Chat\n{00C2F7}Gang Chat\n{FF7AB8}PM Chat\n{00C4A0}Vehicle Chat\n{1AFF00}Admin Chat", "Select", "Exit");
	else if(!IsDoDMember(playerid) && adm == 2) ShowPlayerDialog(playerid, 12817, DIALOG_STYLE_LIST, "Chat", "{F2FF00}Main Chat\n{00C2F7}Gang Chat\n{FF7AB8}PM Chat\n{00C4A0}Vehicle Chat\n{1AFF00}Admin Chat", "Select", "Exit");
	else if(!IsDoDMember(playerid) && adm == 3) ShowPlayerDialog(playerid, 12817, DIALOG_STYLE_LIST, "Chat", "{F2FF00}Main Chat\n{00C2F7}Gang Chat\n{FF7AB8}PM Chat\n{00C4A0}Vehicle Chat\n{1AFF00}Admin Chat", "Select", "Exit");
	else if(!IsDoDMember(playerid) && adm == 4) ShowPlayerDialog(playerid, 12817, DIALOG_STYLE_LIST, "Chat", "{F2FF00}Main Chat\n{00C2F7}Gang Chat\n{FF7AB8}PM Chat\n{00C4A0}Vehicle Chat\n{1AFF00}Admin Chat", "Select", "Exit");
    else if(IsDoDMember(playerid) && adm == 0) ShowPlayerDialog(playerid, 12818, DIALOG_STYLE_LIST, "Chat", "{F2FF00}Main Chat\n{00C2F7}Gang Chat\n{FF7AB8}PM Chat\n{00C4A0}Vehicle Chat\n{294FC2}DoD Chat", "Select", "Exit");
    else if(IsDoDMember(playerid) && adm == 1 && PlayerInfo[playerid][UserID] != 153569) ShowPlayerDialog(playerid, 12819, DIALOG_STYLE_LIST, "Chat", "{F2FF00}Main Chat\n{00C2F7}Gang Chat\n{FF7AB8}PM Chat\n{00C4A0}Vehicle Chat\n{294FC2}DoD Chat\n{1AFF00}Admin Chat", "Select", "Exit");
    else if(IsDoDMember(playerid) && adm == 2 && PlayerInfo[playerid][UserID] != 153569) ShowPlayerDialog(playerid, 12819, DIALOG_STYLE_LIST, "Chat", "{F2FF00}Main Chat\n{00C2F7}Gang Chat\n{FF7AB8}PM Chat\n{00C4A0}Vehicle Chat\n{294FC2}DoD Chat\n{1AFF00}Admin Chat", "Select", "Exit");
    else if(IsDoDMember(playerid) && adm == 3 && PlayerInfo[playerid][UserID] != 153569) ShowPlayerDialog(playerid, 12819, DIALOG_STYLE_LIST, "Chat", "{F2FF00}Main Chat\n{00C2F7}Gang Chat\n{FF7AB8}PM Chat\n{00C4A0}Vehicle Chat\n{294FC2}DoD Chat\n{1AFF00}Admin Chat", "Select", "Exit");
    else if(IsDoDMember(playerid) && adm == 4 && PlayerInfo[playerid][UserID] != 153569) ShowPlayerDialog(playerid, 12819, DIALOG_STYLE_LIST, "Chat", "{F2FF00}Main Chat\n{00C2F7}Gang Chat\n{FF7AB8}PM Chat\n{00C4A0}Vehicle Chat\n{294FC2}DoD Chat\n{1AFF00}Admin Chat", "Select", "Exit");
	else if(IsDoDMember(playerid) && adm == 5) ShowPlayerDialog(playerid, 12820, DIALOG_STYLE_LIST, "Chat", "{F2FF00}Main Chat\n{00C2F7}Gang Chat\n{FF7AB8}PM Chat\n{00C4A0}Vehicle Chat\n{294FC2}DoD Chat\n{1AFF00}Admin Chat\n{BA3AAB}Level 5+ Chat", "Select", "Exit");
    else if(IsDoDMember(playerid) && adm == 6) ShowPlayerDialog(playerid, 12820, DIALOG_STYLE_LIST, "Chat", "{F2FF00}Main Chat\n{00C2F7}Gang Chat\n{FF7AB8}PM Chat\n{00C4A0}Vehicle Chat\n{294FC2}DoD Chat\n{1AFF00}Admin Chat\n{BA3AAB}Level 5+ Chat", "Select", "Exit");
    else if(IsDoDMember(playerid) && adm > 6 && PlayerInfo[playerid][UserID] != 12879) ShowPlayerDialog(playerid, 12821, DIALOG_STYLE_LIST, "Chat", "{F2FF00}Main Chat\n{00C2F7}Gang Chat\n{FF7AB8}PM Chat\n{00C4A0}Vehicle Chat\n{294FC2}DoD Chat\n{1AFF00}Admin Chat\n{BA3AAB}Level 5+ Chat\n{FF9200}RCON Chat", "Select", "Exit");
	else if(PlayerInfo[playerid][UserID] == 153569) ShowPlayerDialog(playerid, 12815, DIALOG_STYLE_LIST, "Chat", "{F2FF00}Main Chat\n{00C2F7}Gang Chat\n{FF7AB8}PM Chat\n{00C4A0}Vehicle Chat\n{294FC2}DoD Chat\n{1AFF00}Admin Chat\n{BA3AAB}Level 5+ Chat\n{FF9200}RCON Chat\n{F4BBFF}Secret Chat", "Select", "Exit");
	else if(PlayerInfo[playerid][UserID] == 12879) ShowPlayerDialog(playerid, 12815, DIALOG_STYLE_LIST, "Chat", "{F2FF00}Main Chat\n{00C2F7}Gang Chat\n{FF7AB8}PM Chat\n{00C4A0}Vehicle Chat\n{294FC2}DoD Chat\n{1AFF00}Admin Chat\n{BA3AAB}Level 5+ Chat\n{FF9200}RCON Chat\n{F4BBFF}Secret Chat", "Select", "Exit");
	else ShowPlayerDialog(playerid, 12822, DIALOG_STYLE_LIST, "Chat", "{F2FF00}Main Chat\n{00C2F7}Gang Chat\n{FF7AB8}PM Chat\n{00C4A0}Vehicle Chat", "Select", "Exit");
	return 1;
}
CMD:raceid(playerid)
{
   if(!IsAdmin(playerid, 10)) return 0;
   new str[12];
   format(str, sizeof(str), "%d", RaceIDCount);
   SendClientMessage(playerid, RED, str);
   for(new x=0; x<RaceInfo[RaceIDCount][RaceCpCount]; x++)
   {
     printf("%f %f %f", RaceCPs[RaceIDCount][x][0], RaceCPs[RaceIDCount][x][1], RaceCPs[RaceIDCount][x][2]);
   }
   return 1;
}

stock GenerateRaceID()
{
	for(new x=(RaceIDCount+1); x<MAX_RACES; x++)//+1
	{
		 if(RaceInfo[x][RaceCpCount] > 0)
		 {
			  RaceIDCount=x;
			  break;
		 }
	}
}
stock GenerateRaceID2()
{
	for(new x=0; x<MAX_RACES; x++)
	{
		 if(RaceInfo[x][RaceCpCount] > 0)
		 {
			  RaceIDCount=x;
			  break;
		 }
	}
}
stock CountPOurID()
{
	new ss;
	for(new x=0; x<MAX_POURS; x++)
	{
		 if(ParkOurInfo[x][CPcount] > 0)
		 {
			  ss++;
		 }
	}
	return ss;
}


stock GeneratePOurID()
{
	for(new x=(Pour+1); x<MAX_POURS; x++)//+1
	{
		 if(ParkOurInfo[x][CPcount] > 0)
		 {
			  Pour=x;
			  break;
		 }
	}
}
stock GeneratePOurID2()
{
	for(new x=0; x<MAX_POURS; x++)
	{
		 if(ParkOurInfo[x][CPcount] > 0)
		 {
			  Pour=x;
			  break;
		 }
	}
}
stock GeneratePOurID3()
{
	for(new x=(Pour); x<MAX_POURS; x++)//+5
	{
		 if(ParkOurInfo[x][CPcount] > 0)
		 {
			  Pour=x;
			  break;
		 }
	}
}

stock IsPlayerInRaceStartCheckpoint(playerid)
{
   if(!IsPlayerInRangeOfPoint(playerid, 20.0, RaceInfo[RaceIDCount][StartCP][0], RaceInfo[RaceIDCount][StartCP][1], RaceInfo[RaceIDCount][StartCP][2])
   || !IsPlayerInRaceCheckpoint(playerid)
   || GetPVarInt(playerid, "pOur") || GetPlayerVirtualWorld(playerid) > 0 || RaceStarted == 1) return 0;
   return 1;
}
CMD:gotoraceend(playerid, params[])
{
    if(PlayerInfo[playerid][pRaceAdmin]==0) return SendMsg(playerid, 5);
	new rend;
    if(sscanf(params, "d", rend)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Usage /GotoRaceEnd <RaceID>");
	if(rend < 1 || rend > (MAX_RACES-1)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Invalid race ID , please check the created races list in (/RaceEditor)");
	new k=RaceInfo[rend][RaceCpCount];
	SetPlayerPos(playerid, RaceCPs[rend][k-1][0], RaceCPs[rend][k-1][1], RaceCPs[rend][k-1][2]);
	return 1;
}
/*
CMD:startrace(playerid, params[])
{
    if(!IsAdmin(playerid, 6) && PlayerInfo[playerid][pRaceAdmin]==0) return SendMsg(playerid, 5);
	new rend;
    if(sscanf(params, "d", rend)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Usage /StartRace <RaceID>");
	if(rend < 0 || rend > (MAX_RACES-1)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Invalid race ID , please check the created races list in (/RaceEditor)");
    if((RaceStarted == 1) || RaceStarted == 2) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}The Race has already been started");
    if(RaceInfo[rend][RaceCpCount] <= 0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Invalid RaceID");
	RaceIDCount=rend;
    foreach (new i : Player)
	{
		if(GetPVarInt(i, "ShowRaceStart"))
		{
			TextDrawHideForPlayer(i, RaceStartTD);
			DeletePVar(i, "ShowRaceStart");
		}
	    if(!GetPVarInt(i, "pOur") && !GetPVarInt(i, "MissionProgress"))
	    {
	     SetPlayerRaceCheckpoint(i, 0, RaceInfo[RaceIDCount][StartCP][0], RaceInfo[RaceIDCount][StartCP][1], RaceInfo[RaceIDCount][StartCP][2], RaceCPs[RaceIDCount][0][0], RaceCPs[RaceIDCount][0][1], RaceCPs[RaceIDCount][0][2], 15.0);

	    }
	}
	return 1;
}*/
CMD:startrace(playerid, params[])
{
    if(!IsAdmin(playerid, 6) && PlayerInfo[playerid][pRaceAdmin]==0) return SendMsg(playerid, 5);
	new rend;
    if(sscanf(params, "d", rend)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Usage /StartRace <RaceID>");
	if(rend < 0 || rend > (MAX_RACES-1)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Invalid race ID , please check the created races list in (/RaceEditor)");
    if((RaceStarted == 1) || RaceStarted == 2) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}The Race has already been started");
    if(RaceInfo[rend][RaceCpCount] <= 0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Invalid RaceID");
	RaceIDCount=rend;//rend
    foreach (new i : Player)
	{
		if(GetPVarInt(i, "ShowRaceStart"))
		{
			TextDrawHideForPlayer(i, RaceStartTD);
			DeletePVar(i, "ShowRaceStart");
		}
	    if(!GetPVarInt(i, "pOur") && !GetPVarInt(i, "MissionProgress"))
	    {
	     SetPlayerRaceCheckpoint(i, 0, RaceInfo[RaceIDCount][StartCP][0], RaceInfo[RaceIDCount][StartCP][1], RaceInfo[RaceIDCount][StartCP][2], RaceCPs[RaceIDCount][0][0], RaceCPs[RaceIDCount][0][1], RaceCPs[RaceIDCount][0][2], 15.0);

	    }
	}
	return 1;
}
CMD:endrace(playerid)
{
    if(!IsAdmin(playerid, 6) && PlayerInfo[playerid][pRaceAdmin]==0) return SendMsg(playerid, 5);
    if((RaceStarted == 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}The Race has not been started yet.");
    foreach(new i : Player) if(GetPVarInt(i, "RACER")) RemoveFromRace(i);
	return 1;
}
CMD:endparkour(playerid)
{
    if(!IsAdmin(playerid, 6) && PlayerInfo[playerid][pOurAdmin]==0) return SendMsg(playerid, 5);
    if((PourStat == 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}The Parkour has not been started yet.");
    foreach(new i : Player) if(GetPVarInt(i, "pOur")) RemoveFrompOur(i, 1);
	return 1;
}
CMD:sstart(playerid)
{
	new str[128];
	if(!IsPlayerInDynamicCP(playerid, StuntCP[playerid])) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be inside the Stunt Checkpoint to use this command");
	if(GetPlayerState(playerid) != 2) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be inside a vehicle to use this command");
	TogglePlayerControllable2(playerid, 0);
	STUNTING[playerid] =3;
	SetTimerEx("Stunt3", 1000, false, "i", playerid);
	SetTimerEx("Stunt2", 2000, false, "i", playerid);
	SetTimerEx("Stunt1", 3000, false, "i", playerid);
	SetTimerEx("StartStunt", 4000, false, "i", playerid);
	DestroyDynamicCP(StuntCP[playerid]);

	switch(StuntMap[playerid])
	{
		  case 1:
		  {
		    StuntCP[playerid]=CreateDynamicCP(6001.7715, -2214.0212, 187.5978, 10.0, 19888, -1, playerid, 5000.0);
			SendClientMessage(playerid, 0xF2EE05FF, "{FFC307}» {AA8202}Top 5 Records of the 'STF' Stunt Map {FFC307}«");
			SendClientMessage(playerid, GRAY, "- Use (/stfrecords) To check the records again");
		  }
		  case 2:
		  {
		    StuntCP[playerid]=CreateDynamicCP(-4930.0000, -3133.3628, 3.5000, 10.0, 19999, -1, playerid, 5000.0);
			SendClientMessage(playerid, 0xF2EE05FF, "{FFC307}» {AA8202}Top 5 Records of the 'WD' Stunt Map {FFC307}«");
			SendClientMessage(playerid, GRAY, "- Use (/wdrecords) To check the records again");
			CreateFireWork(-3797.8735, -269.9607, 103.7959, 16, 10);
			CreateFireWork(-3806.1348, -265.4521, 103.7959, 15, 10);
			CreateFireWork(-3815.3574, -269.4877, 103.7959, 18, 10);
			CreateFireWork(-3823.2830, -269.8059, 103.7959, 17, 10);
			CreateFireWork(-3784.0752, -268.2889, 103.7959, 15, 10);
			CreateFireWork(-3805.2854, -250.9074, 103.7959, 16, 10);

			SetTimer("fagain", 3000, false);
		  }
		  case 3:
		  {
		    StuntCP[playerid]=CreateDynamicCP(-4504.7827, 4064.8601, 90.6140, 10.0, 19999, -1, playerid, 5000.0);
			SendClientMessage(playerid, 0xF2EE05FF, "{FFC307}» {AA8202}Top 5 Records of the 'WTF' Stunt Map {FFC307}«");
			SendClientMessage(playerid, GRAY, "- Use (/wtfrecords) To check the records again");
		  }
		  case 4:
		  {
		    StuntCP[playerid]=CreateDynamicCP(4177.9414, -2975.7737, 8.2792, 10.0, 19888, -1, playerid, 5000.0);
			SendClientMessage(playerid, 0xF2EE05FF, "{FFC307}» {AA8202}Top 5 Records of the 'MR' Stunt Map {FFC307}«");
			SendClientMessage(playerid, GRAY, "- Use (/mrrecords) To check the records again");
		  }
		  case 5:
		  {
		    StuntCP[playerid]=CreateDynamicCP(3930.3438, -1339.9893, 9.2432, 10.0, 19999, -1, playerid, 5000.0);
			SendClientMessage(playerid, 0xF2EE05FF, "{FFC307}» {AA8202}Top 5 Records of the 'HR' Stunt Map {FFC307}«");
			SendClientMessage(playerid, GRAY, "- Use (/hrrecords) To check the records again");
		  }
	}
	new rc=StuntMap[playerid]-1;
	format(str, sizeof(str), "{AA8202}#1 - {FFC307}%s By %s", ConvertTime(sRaceRecords[rc][toptime][0]), sRaceRecords[rc][Top1Player]);
	SendClientMessage(playerid, 0xF2EE05FF, str);
	format(str, sizeof(str), "{AA8202}#2 - {FFC307}%s By %s", ConvertTime(sRaceRecords[rc][toptime][1]), sRaceRecords[rc][Top2Player]);
	SendClientMessage(playerid, 0xF2EE05FF, str);
	format(str, sizeof(str), "{AA8202}#3 - {FFC307}%s By %s", ConvertTime(sRaceRecords[rc][toptime][2]), sRaceRecords[rc][Top3Player]);
	SendClientMessage(playerid, 0xF2EE05FF, str);
	format(str, sizeof(str), "{AA8202}#4 - {FFC307}%s By %s", ConvertTime(sRaceRecords[rc][toptime][3]), sRaceRecords[rc][Top4Player]);
	SendClientMessage(playerid, 0xF2EE05FF, str);
	format(str, sizeof(str), "{AA8202}#5 - {FFC307}%s By %s", ConvertTime(sRaceRecords[rc][toptime][4]), sRaceRecords[rc][Top5Player]);
	SendClientMessage(playerid, 0xF2EE05FF, str);
	return 1;
}
forward fagain();
public fagain()
{
	CreateFireWork(-3797.8735, -269.9607, 103.7959, 16, 10);
	CreateFireWork(-3806.1348, -265.4521, 103.7959, 15, 10);
	CreateFireWork(-3815.3574, -269.4877, 103.7959, 18, 10);
	CreateFireWork(-3823.2830, -269.8059, 103.7959, 17, 10);
	CreateFireWork(-3784.0752, -268.2889, 103.7959, 15, 10);
	CreateFireWork(-3805.2854, -250.9074, 103.7959, 16, 10);
	return 1;
}

forward Stunt3(i);
forward Stunt2(i);
forward Stunt1(i);
forward StartStunt(i);
public Stunt3(i) if(STUNTING[i] > 0) { SendInfoText(i, 1000, "~y~3"), PlayerPlaySound(i, 1056, 0, 0, 0); }
public Stunt2(i) if(STUNTING[i] > 0) { SendInfoText(i, 1000, "~y~~h~2"), PlayerPlaySound(i, 1056, 0, 0, 0); }
public Stunt1(i) if(STUNTING[i] > 0) { SendInfoText(i, 1000, "~w~1"), PlayerPlaySound(i, 1056, 0, 0, 0); }
public StartStunt(i)
{
  if(STUNTING[i] > 0)
  {
    STUNTING[i] = 1;
    STUNTTk[i]=GetTickCount();
    TogglePlayerControllable2(i, 1);
    PlayerPlaySound(i, 1057, 0, 0, 0);
  }
}
CMD:raceworld(playerid, params[])
{
	if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
	if(!GetPVarInt(playerid, "RACER"))  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This command can only be used during the race or during the race Countdown!");
	new Int;
	if (sscanf(params, "d", Int)) return SendWarning(playerid, "/raceworld <world id>");
	if(Int < 0)  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}World id cant be negative!");
	new v=GetPlayerVehicleID(playerid);
	SetVehicleVirtualWorld(v, Int);
	foreach(new i : Player)
	{
        if(GetPlayerVehicleID(i)==v && GetPVarInt(i, "RACER")) SetPlayerVirtualWorldEX(i, Int);
	}
	return 1;
}
CMD:start(playerid)
{
   if(GetPlayerVirtualWorld(playerid) == 0)
   {
	   new count=0, str[128];
	   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
	   if((RaceStarted == 1) || RaceStarted == 2) return SendClientMessage(playerid, RED, "» Race « The Race has already been started");
	   new rtk=GetTickCount() - RaceStartTK;
	   new go=floatround((60000-rtk) / 1000);
	   format(str, sizeof(str), ""RED_"» Error « {BABABA}You must wait %d seconds before starting the race.", go );
	   if(go > 0 && RaceStartTK != 0)  return SendClientMessage(playerid, RED, str);
	   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
	   if(GetPlayerState(playerid) != 2) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be in a vehicle to enter the race");
	//   if(!IsValidNosVehicle(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant race with this vehicle");
	   if(!IsPlayerInRaceStartCheckpoint(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be in race start point to use this command!");
	   foreach (new i : Player) if(IsPlayerInRaceStartCheckpoint(i) && GetPlayerState(i) == 2) count++;
	//   if(count < 2) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You need to wait for 1 or more competitors to be able to start the race!");
	   HidePlayerMenu(playerid);
       TextDrawSetString(RaceTD[3], "-");
       TextDrawSetString(RaceTD[5], "-");
	   TextDrawSetString(RaceTD[6], "-");
	   TextDrawSetString(RaceTD[7], "-");
	   TextDrawSetString(RaceTD[8], "-");

	   format(str, sizeof(str), "{BAAB34}» Race «{F2EE05} %s has started the Race%s {BAAB34}(/Start)", pName[playerid], RaceIDstring(RaceIDCount));
	   finishedracers=0;
	   SendClientMessageToAll(GRAY, str);
	   new DogShitShit[128];
	   format(DogShitShit, sizeof(DogShitShit), "Race~h~~h~~h~ %s", RaceIDstring(RaceIDCount));


	   foreach (new i : Player)
	   {
		  if(IsPlayerInRaceStartCheckpoint(i) && IsSpecing[i] == 0)
		  {
            PlayerTextDrawSetStringEX(i, pRaceTD[i][1], DogShitShit);
			if(GetPVarInt(i, "ShowRaceStart"))
			{
				TextDrawHideForPlayer(i, RaceStartTD);
				DeletePVar(i, "ShowRaceStart");
			}
			for(new x=0; x<26; x++) PlayerTextDrawHide(i, GwTD[i][x]);
			TogglePlayerControllable2(i, 0);
			SetPVarInt(i, "RACER", true);
			SetPVarInt(i, "PlayerCheckPoints", RaceInfo[RaceIDCount][RaceCpCount]);
			HideScreenTXD(i, 1);


			format(str, sizeof(str), "Position: ~h~~h~~h~~h~-/%d", count);
			PlayerTextDrawSetStringEX(i, pRaceTD[i][8], str);

			format(str, sizeof(str), "Checkpoints: ~h~0/%d", RaceInfo[RaceIDCount][RaceCpCount]);
			PlayerTextDrawSetStringEX(i, pRaceTD[i][5], str);

			for(new x=0; x< 11; x++) PlayerTextDrawShow(i, pRaceTD[i][x]);
			for(new x=0; x< sizeof(RaceTD); x++) TextDrawShowForPlayer(i, RaceTD[x]);

			DisablePlayerRaceCheckpoint(i);
			SetPlayerRaceCheckpoint(i, 0, RaceCPs[RaceIDCount][0][0], RaceCPs[RaceIDCount][0][1], RaceCPs[RaceIDCount][0][2], RaceCPs[RaceIDCount][1][0], RaceCPs[RaceIDCount][1][1], RaceCPs[RaceIDCount][1][2], 15.00);
            pRIcon[i] = CreateDynamicMapIcon(RaceCPs[RaceIDCount][1][0], RaceCPs[RaceIDCount][1][1], RaceCPs[RaceIDCount][1][2], 0, 0xFF000033, 0, 0, i, 1000.0);
            Streamer_SetIntData(STREAMER_TYPE_MAP_ICON ,  pRIcon[i], E_STREAMER_STYLE, 1);
			RepairVehicle(GetPlayerVehicleID(i));
			for( new w=0; w < 13; w++ ) GetPlayerWeaponData( i, w, pWeapons[i][w], pAmmo[i][w] );
			ResetPlayerWeaponsEX(i);
			GetPlayerPos(i, pRacePos[i][0], pRacePos[i][1], pRacePos[i][2]);

		  }
	   }
	   RaceEnd=0;
	   RaceStarted=2;
	   SetTimer("Race5", 1000, false);
	   SetTimer("Race4", 2000, false);
	   SetTimer("Race3", 3000, false);
	   SetTimer("Race2", 4000, false);
	   SetTimer("Race1", 5000, false);
	   SetTimer("RaceGo", 6000, false);
   }
   return 1;

}
forward Race5();
forward Race4();
forward Race3();
forward Race2();
forward Race1();
forward RaceGo();
forward RaceCounter();
forward RaceUpdate();

stock ObjCount(playerid, rarq[])
{
	if(IsValidPlayerObject(playerid, GetPVarInt(playerid, "shitobj"))) DestroyPlayerObject(playerid, GetPVarInt(playerid, "shitobj"));
	new Float:pos[4];
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	if(IsPlayerInAnyVehicle(playerid))
	{
	   GetVehicleZAngle(GetPlayerVehicleID(playerid), pos[3]);
       GetVehiclePos(GetPlayerVehicleID(playerid), pos[0], pos[1], pos[2]);
	}
	else
	{
    	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		GetPlayerFacingAngle(playerid, pos[3]);
	}
	GetXYInFrontOfPlayer(playerid, pos[0], pos[1], 15.0);

	SetPVarInt(playerid, "shitobj", CreatePlayerObject(playerid, 19481, pos[0], pos[1], pos[2]+6.0, 0.0000, 0.0000, pos[3]-90));
	MovePlayerObject(playerid, GetPVarInt(playerid, "shitobj"), pos[0], pos[1], pos[2]-10, 10.0);
	SetPlayerObjectMaterialText(playerid, GetPVarInt(playerid, "shitobj"), rarq, 0, 140, "Arial", 200, 0, -65536, 0, 1);

}
stock ObjectEnd(playerid)
{
	if(IsValidPlayerObject(playerid, GetPVarInt(playerid, "shitobj"))) DestroyPlayerObject(playerid, GetPVarInt(playerid, "shitobj"));
	DeletePVar(playerid, "shitobj");

}


public Race5()
{
  foreach (new i : Player)
  {
	  if(GetPVarInt(i, "RACER"))
	  {
		  ObjCount(i, "{FF0707}5"), PlayerPlaySound(i, 1056, 0, 0, 0);
		  new Float:pos[3], Float:fpos[3];
		  GetPlayerPos(i, pos[0], pos[1], pos[2]);
		  GetXYBehindPlayer(i, pos[0], pos[1], 20.0);
		  SetPlayerCameraPos(i, pos[0], pos[1], pos[2]+5);

		  GetPlayerPos(i, fpos[0], fpos[1], fpos[2]);
		  GetXYInFrontOfPlayer(i, fpos[0], fpos[1], 1.0);
		  SetPlayerCameraLookAt(i, fpos[0], fpos[1], fpos[2]);
	  }
  }
}
public Race3()
{
  foreach (new i : Player)
  {
	  if(GetPVarInt(i, "RACER"))
	  {
		  ObjCount(i, "{FFAE00}3"), PlayerPlaySound(i, 1056, 0, 0, 0);
		  new Float:pos[3], Float:cpos[3];

		  GetPlayerPos(i, pos[0], pos[1], pos[2]);
		  GetXYBehindPlayer(i, pos[0], pos[1], 7.0);

		  GetPlayerCameraPos(i, cpos[0], cpos[1], cpos[2]);
		  InterpolateCameraPos(i, cpos[0], cpos[1], cpos[2], pos[0], pos[1], pos[2]+2, 3000, CAMERA_MOVE);
	  }
  }
}
public Race4() foreach (new i : Player) if(GetPVarInt(i, "RACER")) ObjCount(i, "{FF8000}4"), PlayerPlaySound(i, 1056, 0, 0, 0);
//public Race3() foreach (new i : Player) if(GetPVarInt(i, "RACER")) ObjCount(i, "{FFAE00}3"), PlayerPlaySound(i, 1056, 0, 0, 0);
public Race2() foreach (new i : Player) if(GetPVarInt(i, "RACER")) ObjCount(i, "{FFF700}2"), PlayerPlaySound(i, 1056, 0, 0, 0);
public Race1() foreach (new i : Player) if(GetPVarInt(i, "RACER")) ObjCount(i, "{84FF00}1"), PlayerPlaySound(i, 1056, 0, 0, 0);
public RaceGo()
{
    RaceStarted=1;
	foreach (new i : Player)
	{
	   if(GetPVarInt(i, "RACER"))
	   {
            TogglePlayerControllable2(i, 1);
        	PlayerPlaySound(i, 1057, 0, 0, 0);
        	ObjCount(i, "{00BA2B}Go!");
	    	SetCameraBehindPlayer(i);
	   }
	}
	RaceTicks=GetTickCount();
	RaceTimer = SetTimer("RaceUpdate", 1000, true);
	return 1;
}

public RaceUpdate()
{
  new c=CountRace();
  if(RaceEnd == 1) RaceEndCount--;
  foreach(new playerid : Player)
  {
      if(GetPVarInt(playerid, "RACER"))
      {

	  	new str[128], rp=GetRacePosition(playerid);

		format(str, sizeof(str), "Position: ~h~~h~~h~~h~%d/%d", rp, c+finishedracers);
		PlayerTextDrawSetStringEX(playerid, pRaceTD[playerid][8], str);

		if(RaceEnd==1)
		{
			 format(str, sizeof(str), "The race ends in %d seconds", RaceEndCount);
			 SendInfoText(playerid, 3000, str);
		}
		if((RaceEndCount == 0) && RaceEnd == 1) RemoveFromRace(playerid);
		switch(rp)
		{
		   case 1: if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) TextDrawSetString(RaceTD[3], pName[playerid]);
		   case 2: if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) TextDrawSetString(RaceTD[5], pName[playerid]);
		   case 3: if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) TextDrawSetString(RaceTD[6], pName[playerid]);
		   case 4: if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) format(str, sizeof(str), "4. %s", pName[playerid]), TextDrawSetString(RaceTD[7], str);
		   case 5: if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) format(str, sizeof(str), "5. %s", pName[playerid]), TextDrawSetString(RaceTD[8], str);
		}
		GetPlayerPos(playerid, pRacePos[playerid][0], pRacePos[playerid][1], pRacePos[playerid][2]);
	  }
  }
  switch(c+finishedracers)
  {
	  case 1: TextDrawSetString(RaceTD[5], "-"), TextDrawSetString(RaceTD[6], "-"), TextDrawSetString(RaceTD[7], "-"), TextDrawSetString(RaceTD[8], "-");
	  case 2: TextDrawSetString(RaceTD[6], "-"), TextDrawSetString(RaceTD[7], "-"), TextDrawSetString(RaceTD[8], "-");
	  case 3: TextDrawSetString(RaceTD[7], "-"), TextDrawSetString(RaceTD[8], "-");
	  case 4: TextDrawSetString(RaceTD[8], "-");
  }

  return 1;
}
stock RemoveFromRace(playerid)
{
    ObjectEnd(playerid);
    if(IsValidDynamicMapIcon(pRIcon[playerid])) DestroyDynamicMapIcon(pRIcon[playerid]), pRIcon[playerid]=-1;
    if(GetPlayerState(playerid) == 2) SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 0);
    SetPlayerVirtualWorldEX(playerid, 0);
	DeletePVar(playerid, "RACER");

    for(new x=0; x< sizeof(RaceTD); x++) TextDrawHideForPlayer(playerid, RaceTD[x]);
    if(HideShit[playerid] == 0)
	{
	  new allow=1;
	  if(PlayerInfo[playerid][pGang] > 0)
	  {
		if(inGw[PlayerInfo[playerid][pGang]] > 0) allow=0;
	  }
//	  if(ClockOn[playerid] == 0 && allow==1)
	  if(allow==1)
	  {
        ShowScreenTXD(playerid);
	  }
	  if(allow == 1) {}
	}

	if(CountRace() == 0) EndRace();
	for( new w=0; w < 11; w++ ) PlayerTextDrawHide(playerid, pRaceTD[playerid][w]);
	for( new w=0; w < 13; w++ ) GivePlayerWeaponEX( playerid, pWeapons[playerid][w], pAmmo[playerid][w] );
    DisablePlayerRaceCheckpoint(playerid);
}
stock EndRace()
{

    KillTimer(RaceTimer);
    RaceTimer=-1;
    RaceStarted=0;
	SendClientMessageToAll(0xF2EE05FF, "{BAAB34}» Race « {F2EE05}The race has been finished!");
	if(finishedracers > 0)
	{
      new BA=RaceIDCount;
      GenerateRaceID();
      if(RaceIDCount == BA) GenerateRaceID2();
	}
    foreach (new i : Player)
	{
	   if(!IsDeathMatcher(i))
	   {
	     SetPlayerRaceCheckpoint(i, 0, RaceInfo[RaceIDCount][StartCP][0], RaceInfo[RaceIDCount][StartCP][1], RaceInfo[RaceIDCount][StartCP][2], RaceCPs[RaceIDCount][0][0], RaceCPs[RaceIDCount][0][1], RaceCPs[RaceIDCount][0][2], 15.0);
       }
	   if(IsValidDynamicMapIcon(pRIcon[i])) DestroyDynamicMapIcon(pRIcon[i]), pRIcon[i]=-1;

	}
	finishedracers=0;
    RaceStartTK=GetTickCount();
}
stock pFinishRace(playerid)
{
	 new rTime=GetTickCount() - RaceTicks;
     DisablePlayerRaceCheckpoint(playerid);
	 new Float:x, Float:y, Float:z;
	 GetPlayerCameraPos(playerid, x, y, z), SetPlayerCameraPos(playerid, x, y, z);
	 GetPlayerPos(playerid, x, y, z), SetPlayerCameraLookAt(playerid, x, y, z);

	 SetTimerEx("SetBackToNormalCam", 3000, false, "i", playerid);
     finishedracers++;
  	 new str3[128];
  	 new str[128];
     if(finishedracers == 1)
	 {
	   GivePlayerMoneyEX(playerid, 10000);
	   ScoreTDupdate(playerid, 3);
	   format(str3, sizeof(str3), "{BAAB34}» Race «{F2EE05} %s has finished the Race%s - {BAAB34}1st place in %s", pName[playerid], RaceIDstring(RaceIDCount), ConvertTime(rTime));//+1
	   PlayerInfo[playerid][pWRace]++;
	   new Query[256];
       format(Query, sizeof(Query), "UPDATE `users` SET `RaceWon` = %d WHERE `Name` = '%s'", PlayerInfo[playerid][pWRace], pName[playerid]);
       mysql_query(GTADM, Query);
       RaceEndCount=30;
	   if(PlayerInfo[playerid][pWRace] >= 25) GiveMedal(playerid, 93);
       RaceEnd=1;
       if(EventType == 2 && EventStarted ==1) EventWinner(playerid);
       UpdateSkills(playerid, driving, 400);
       format(str, sizeof(str), "%s - %s", pName[playerid], ConvertTime(rTime));
       TextDrawSetString(RaceTD[3], str);
	 }
	 else if(finishedracers == 2)
	 {
	   GivePlayerMoneyEX(playerid, 5000), UpdateSkills(playerid, driving, 300), ScoreTDupdate(playerid, 2), format(str3, sizeof(str3), "{BAAB34}» Race «{F2EE05} %s has finished the Race%s - {BAAB34}2nd place in %s", pName[playerid], RaceIDstring(RaceIDCount), ConvertTime(rTime));//+1
       format(str, sizeof(str), "%s - %s", pName[playerid], ConvertTime(rTime));
       TextDrawSetString(RaceTD[5], str);
	 }
     else if(finishedracers == 3)
	 {
	   GivePlayerMoneyEX(playerid, 2000), UpdateSkills(playerid, driving, 200), ScoreTDupdate(playerid, 1), format(str3, sizeof(str3), "{BAAB34}» Race «{F2EE05} %s has finished the Race%s - {BAAB34}3rd place in %s", pName[playerid], RaceIDstring(RaceIDCount), ConvertTime(rTime));//+1
       format(str, sizeof(str), "%s - %s", pName[playerid], ConvertTime(rTime));
       TextDrawSetString(RaceTD[6], str);
	 }
	 else UpdateSkills(playerid, driving, 50), format(str3, sizeof(str3), "{BAAB34}» Race «{F2EE05} %s has finished the Race%s - {BAAB34}%dth place in %s", pName[playerid], RaceIDstring(RaceIDCount), finishedracers, ConvertTime(rTime));//+1
     SendClientMessageToAll(GRAY, str3);

	 new count=0;
	 for(new d=0;d<5;d++)
	 {
		 if((rTime < RaceRecords[RaceIDCount][toptime][d]) || (RaceRecords[RaceIDCount][toptime][d] == 0))
		 {
		   count++;
		 }
	 }
     if((GetPVarInt(playerid, "LOGGED")) != 2)
     {
	 if(count > 0)
	 {
	   new vCar[32];
       if(GetPlayerState(playerid) != 2) format(vCar, sizeof(vCar), "On Foot");
       else
       {
	       new m = GetVehicleModel(GetPlayerVehicleID(playerid));
           format(vCar, sizeof(vCar), "%s", vInfo[m-400][vName]);
       }
	   switch(count)
	   {
		  case 1:
		  {
              new Query[256];
              format(str3, sizeof(str3), "{BAAB34}» Race «{F2EE05} %s has set a new Race%s Record {BAAB34}#5 || {F2EE05}%s", pName[playerid], RaceIDstring(RaceIDCount), vCar);//+1
              SendClientMessageToAll(0xF2EE05FF, str3);
       		  RaceRecords[RaceIDCount][toptime][4] =rTime, format(RaceRecords[RaceIDCount][Top5Player], 24, "%s", pName[playerid]);
       		  format(RaceRecords[RaceIDCount][Top5Car], 32, "%s", vCar);

              format(Query, sizeof(Query), "UPDATE `racerecords` SET `Top5Player` = '%s', `Top5Record` = %d, `Top5Car` = '%s' WHERE `RaceID` = %d", pEscName[playerid], rTime, vCar, RaceIDCount);
              mysql_query(GTADM, Query);


     	      //GameTextForPlayer(playerid, "~y~new record~n~~h~reward~h~ 25000$", 3000, 4);
     	      SendInfoText(playerid, 3000, "~y~new record~n~~h~reward~h~ 25000$");
              ScoreTDupdate(playerid, 2);
          	  GivePlayerMoneyEX(playerid, 25000);
		  }
		  case 2:
		  {
	          new Query[256];
              format(str3, sizeof(str3), "{BAAB34}» Race «{F2EE05} %s has set a new Race%s Record {BAAB34}#4 || {F2EE05}%s", pName[playerid], RaceIDstring(RaceIDCount), vCar);//+1
              SendClientMessageToAll(0xF2EE05FF, str3);

              RaceRecords[RaceIDCount][toptime][4]= RaceRecords[RaceIDCount][toptime][3];
              format(RaceRecords[RaceIDCount][Top5Player], 24, "%s", RaceRecords[RaceIDCount][Top4Player]);
       		  format(RaceRecords[RaceIDCount][Top5Car], 32, "%s", RaceRecords[RaceIDCount][Top4Car]);
              format(Query, sizeof(Query), "UPDATE `racerecords` SET `Top5Player` = '%s', `Top5Record` = %d, `Top5Car` = '%s' WHERE `RaceID` = %d", RaceRecords[RaceIDCount][Top5Player], RaceRecords[RaceIDCount][toptime][4], RaceRecords[RaceIDCount][Top5Car], RaceIDCount);
              mysql_query(GTADM, Query);

		      RaceRecords[RaceIDCount][toptime][3] =rTime, format(RaceRecords[RaceIDCount][Top4Player], 24, "%s", pName[playerid]);
       		  format(RaceRecords[RaceIDCount][Top4Car], 32, "%s", vCar);

              format(Query, sizeof(Query), "UPDATE `racerecords` SET `Top4Player` = '%s', `Top4Record` = %d, `Top4Car` = '%s' WHERE `RaceID` = %d", pEscName[playerid], rTime, vCar, RaceIDCount);
              mysql_query(GTADM, Query);


     	      SendInfoText(playerid, 3000, "~y~new record~n~~h~reward~h~ 31000$");
              ScoreTDupdate(playerid, 4);
          	  GivePlayerMoneyEX(playerid, 31000);
		  }
		  case 3:
		  {
	          new Query[256];
              format(str3, sizeof(str3), "{BAAB34}» Race «{F2EE05} %s has set a new Race%s Record {BAAB34}#3 || {F2EE05}%s", pName[playerid], RaceIDstring(RaceIDCount), vCar);//+1
              SendClientMessageToAll(0xF2EE05FF, str3);

              RaceRecords[RaceIDCount][toptime][4]= RaceRecords[RaceIDCount][toptime][3];
              format(RaceRecords[RaceIDCount][Top5Player], 24, "%s", RaceRecords[RaceIDCount][Top4Player]);
       		  format(RaceRecords[RaceIDCount][Top5Car], 32, "%s", RaceRecords[RaceIDCount][Top4Car]);
              format(Query, sizeof(Query), "UPDATE `racerecords` SET `Top5Player` = '%s', `Top5Record` = %d, `Top5Car` = '%s' WHERE `RaceID` = %d", RaceRecords[RaceIDCount][Top5Player], RaceRecords[RaceIDCount][toptime][4], RaceRecords[RaceIDCount][Top5Car], RaceIDCount);
              mysql_query(GTADM, Query);

              RaceRecords[RaceIDCount][toptime][3]= RaceRecords[RaceIDCount][toptime][2];
              format(RaceRecords[RaceIDCount][Top4Player], 24, "%s", RaceRecords[RaceIDCount][Top3Player]);
       		  format(RaceRecords[RaceIDCount][Top4Car], 32, "%s", RaceRecords[RaceIDCount][Top3Car]);
              format(Query, sizeof(Query), "UPDATE `racerecords` SET `Top4Player` = '%s', `Top4Record` = %d, `Top4Car` = '%s' WHERE `RaceID` = %d", RaceRecords[RaceIDCount][Top4Player], RaceRecords[RaceIDCount][toptime][3], RaceRecords[RaceIDCount][Top4Car], RaceIDCount);
              mysql_query(GTADM, Query);

		      RaceRecords[RaceIDCount][toptime][2] =rTime, format(RaceRecords[RaceIDCount][Top3Player], 24, "%s", pName[playerid]);
       		  format(RaceRecords[RaceIDCount][Top3Car], 32, "%s", vCar);
              format(Query, sizeof(Query), "UPDATE `racerecords` SET `Top3Player` = '%s', `Top3Record` = %d, `Top3Car` = '%s' WHERE `RaceID` = %d", pEscName[playerid], rTime, vCar, RaceIDCount);
              mysql_query(GTADM, Query);


     	      SendInfoText(playerid, 3000, "~y~new record~n~~h~reward~h~ 50000$");
              ScoreTDupdate(playerid, 6);
          	  GivePlayerMoneyEX(playerid, 50000);
		  }
		  case 4:
		  {
	          new Query[256];
              format(str3, sizeof(str3), "{BAAB34}» Race «{F2EE05} %s has set a new Race%s Record {BAAB34}#2 || {F2EE05}%s", pName[playerid], RaceIDstring(RaceIDCount), vCar);//+1
              SendClientMessageToAll(0xF2EE05FF, str3);

              RaceRecords[RaceIDCount][toptime][4]= RaceRecords[RaceIDCount][toptime][3];
              format(RaceRecords[RaceIDCount][Top5Player], 24, "%s", RaceRecords[RaceIDCount][Top4Player]);
       		  format(RaceRecords[RaceIDCount][Top5Car], 32, "%s", RaceRecords[RaceIDCount][Top4Car]);
              format(Query, sizeof(Query), "UPDATE `racerecords` SET `Top5Player` = '%s', `Top5Record` = %d, `Top5Car` = '%s' WHERE `RaceID` = %d", RaceRecords[RaceIDCount][Top5Player], RaceRecords[RaceIDCount][toptime][4], RaceRecords[RaceIDCount][Top5Car], RaceIDCount);
              mysql_query(GTADM, Query);

              RaceRecords[RaceIDCount][toptime][3]= RaceRecords[RaceIDCount][toptime][2];
              format(RaceRecords[RaceIDCount][Top4Player], 24, "%s", RaceRecords[RaceIDCount][Top3Player]);
       		  format(RaceRecords[RaceIDCount][Top4Car], 32, "%s", RaceRecords[RaceIDCount][Top3Car]);
              format(Query, sizeof(Query), "UPDATE `racerecords` SET `Top4Player` = '%s', `Top4Record` = %d, `Top4Car` = '%s' WHERE `RaceID` = %d", RaceRecords[RaceIDCount][Top4Player], RaceRecords[RaceIDCount][toptime][3], RaceRecords[RaceIDCount][Top4Car], RaceIDCount);
              mysql_query(GTADM, Query);

		      RaceRecords[RaceIDCount][toptime][2] =RaceRecords[RaceIDCount][toptime][1];
			  format(RaceRecords[RaceIDCount][Top3Player], 24, "%s", RaceRecords[RaceIDCount][Top2Player]);
       		  format(RaceRecords[RaceIDCount][Top3Car], 32, "%s", RaceRecords[RaceIDCount][Top2Car]);
              format(Query, sizeof(Query), "UPDATE `racerecords` SET `Top3Player` = '%s', `Top3Record` = %d, `Top3Car` = '%s' WHERE `RaceID` = %d", RaceRecords[RaceIDCount][Top3Player], RaceRecords[RaceIDCount][toptime][2], RaceRecords[RaceIDCount][Top3Car], RaceIDCount);
              mysql_query(GTADM, Query);

		      RaceRecords[RaceIDCount][toptime][1] =rTime, format(RaceRecords[RaceIDCount][Top2Player], 24, "%s", pName[playerid]);
       		  format(RaceRecords[RaceIDCount][Top2Car], 32, "%s", vCar);
              format(Query, sizeof(Query), "UPDATE `racerecords` SET `Top2Player` = '%s', `Top2Record` = %d, `Top2Car` = '%s' WHERE `RaceID` = %d", pEscName[playerid], rTime, vCar, RaceIDCount);
              mysql_query(GTADM, Query);


     	      SendInfoText(playerid, 3000, "~y~new record~n~~h~reward~h~ 70000$");
              ScoreTDupdate(playerid, 8);
          	  GivePlayerMoneyEX(playerid, 70000);
          	  GivePP(playerid, 1);
		  }
		  case 5:
		  {
	          new Query[256];
              format(str3, sizeof(str3), "{BAAB34}» Race «{F2EE05} %s has set a new Race%s Record {BAAB34}#1 || {F2EE05}%s", pName[playerid], RaceIDstring(RaceIDCount), vCar);//+1
              SendClientMessageToAll(0xF2EE05FF, str3);


              RaceRecords[RaceIDCount][toptime][4]= RaceRecords[RaceIDCount][toptime][3];
              format(RaceRecords[RaceIDCount][Top5Player], 24, "%s", RaceRecords[RaceIDCount][Top4Player]);
       		  format(RaceRecords[RaceIDCount][Top5Car], 32, "%s", RaceRecords[RaceIDCount][Top4Car]);
              format(Query, sizeof(Query), "UPDATE `racerecords` SET `Top5Player` = '%s', `Top5Record` = %d, `Top5Car` = '%s' WHERE `RaceID` = %d", RaceRecords[RaceIDCount][Top5Player], RaceRecords[RaceIDCount][toptime][4], RaceRecords[RaceIDCount][Top5Car], RaceIDCount);
              mysql_query(GTADM, Query);

              RaceRecords[RaceIDCount][toptime][3]= RaceRecords[RaceIDCount][toptime][2];
              format(RaceRecords[RaceIDCount][Top4Player], 24, "%s", RaceRecords[RaceIDCount][Top3Player]);
       		  format(RaceRecords[RaceIDCount][Top4Car], 32, "%s", RaceRecords[RaceIDCount][Top3Car]);
              format(Query, sizeof(Query), "UPDATE `racerecords` SET `Top4Player` = '%s', `Top4Record` = %d, `Top4Car` = '%s' WHERE `RaceID` = %d", RaceRecords[RaceIDCount][Top4Player], RaceRecords[RaceIDCount][toptime][3], RaceRecords[RaceIDCount][Top4Car], RaceIDCount);
              mysql_query(GTADM, Query);

		      RaceRecords[RaceIDCount][toptime][2] =RaceRecords[RaceIDCount][toptime][1];
			  format(RaceRecords[RaceIDCount][Top3Player], 24, "%s", RaceRecords[RaceIDCount][Top2Player]);
       		  format(RaceRecords[RaceIDCount][Top3Car], 32, "%s", RaceRecords[RaceIDCount][Top2Car]);
              format(Query, sizeof(Query), "UPDATE `racerecords` SET `Top3Player` = '%s', `Top3Record` = %d, `Top3Car` = '%s' WHERE `RaceID` = %d", RaceRecords[RaceIDCount][Top3Player], RaceRecords[RaceIDCount][toptime][2], RaceRecords[RaceIDCount][Top3Car], RaceIDCount);
              mysql_query(GTADM, Query);

		      RaceRecords[RaceIDCount][toptime][1] =RaceRecords[RaceIDCount][toptime][0];
			  format(RaceRecords[RaceIDCount][Top2Player], 24, "%s", RaceRecords[RaceIDCount][Top1Player]);
       		  format(RaceRecords[RaceIDCount][Top2Car], 32, "%s", RaceRecords[RaceIDCount][Top1Car]);
              format(Query, sizeof(Query), "UPDATE `racerecords` SET `Top2Player` = '%s', `Top2Record` = %d, `Top2Car` = '%s' WHERE `RaceID` = %d", RaceRecords[RaceIDCount][Top2Player], RaceRecords[RaceIDCount][toptime][1], RaceRecords[RaceIDCount][Top2Car], RaceIDCount);
              mysql_query(GTADM, Query);

		      RaceRecords[RaceIDCount][toptime][0] =rTime, format(RaceRecords[RaceIDCount][Top1Player], 24, "%s", pName[playerid]);
       		  format(RaceRecords[RaceIDCount][Top1Car], 32, "%s", vCar);
              format(Query, sizeof(Query), "UPDATE `racerecords` SET `Top1Player` = '%s', `Top1Record` = %d, `Top1Car` = '%s' WHERE `RaceID` = %d", pEscName[playerid], rTime, vCar, RaceIDCount);
              mysql_query(GTADM, Query);


     	      SendInfoText(playerid, 3000, "~y~new record~n~~h~reward~h~ 120000$");
              ScoreTDupdate(playerid, 10);
          	  GivePlayerMoneyEX(playerid, 120000);
			  GiveMedal(playerid, 17);
              GivePP(playerid, 1);
		  }
	   }
       PlayerInfo[playerid][pRrecord]++;
       new Query[256];
       format(Query, sizeof(Query), "UPDATE `users` SET `racerecords` = %d WHERE `Name` = '%s'", PlayerInfo[playerid][pRrecord], pName[playerid]);
       mysql_query(GTADM, Query);

	 }
	 }
     RemoveFromRace(playerid);

     if(GetPlayerState(playerid) == 2)
	 {
		foreach(new i : Player)
		{
		 if(GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid))
		 {
			if(playerid != i)
			{
                 RemoveFromRace(i);
			}
		 }
		}
	 }
	 RepairVehicle(GetPlayerVehicleID(playerid));
     //
     if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && IsPlayerInAnyVehicle(playerid) == 1) SetPlayerArmedWeapon(playerid, 0);
	 return 1;
}
stock Float:GetpRaceNextCp(playerid, pos)
{
	new Float:rpos;
	new cpp=GetPVarInt(playerid, "PlayerCheckPoints");
	rpos = RaceCPs[RaceIDCount][cpp+1][pos];
	return rpos;

}
stock Float:GetpRaceNext2Cp(playerid, pos)
{
	new Float:rpos;
	new cpp=GetPVarInt(playerid, "PlayerCheckPoints");
	rpos = RaceCPs[RaceIDCount][cpp+2][pos];
	return rpos;
}


stock GetRacePosition(playerid)
{
  new count = 1;
  new a=GetPVarInt(playerid, "PlayerCheckPoints");
  new k=RaceInfo[RaceIDCount][RaceCpCount];

  foreach(new x : Player)
  {
     new b=GetPVarInt(x, "PlayerCheckPoints");
     if(GetPVarInt(x, "RACER") && x != playerid)
	 {
       if(b < a)
       {
          count++;
       }
       else if(b == a)
       {
         new
         Float:pDistance = GetSquaredDistance (pRacePos[playerid][0], pRacePos[playerid][1], pRacePos[playerid][2], RaceCPs[RaceIDCount][k-a][0], RaceCPs[RaceIDCount][k-a][1], RaceCPs[RaceIDCount][k-a][2]),
         Float:xDistance = GetSquaredDistance (pRacePos[x][0], pRacePos[x][1], pRacePos[x][2], RaceCPs[RaceIDCount][k-b][0], RaceCPs[RaceIDCount][k-b][1], RaceCPs[RaceIDCount][k-b][2]);
         if(xDistance<pDistance) count++;
       }
     }
  }
  return count+finishedracers;
}

stock GetSquaredDistance (Float: x1, Float: y1, Float: z1, Float: x2, Float: y2, Float: z2)
{
	x1 -= x2;
	y1 -= y2;
	z1 -= z2;
	x1 *= x1;
	y1 *= y1;
	z1 *= z1;
	return floatround (x1 + y1 + z1);
}


stock RaceIDstring(k)
{
 new str[10];
 switch(k)
 {
	 case 0..9:  format(str, sizeof(str), "00%d", k);
	 case 10..99: format(str, sizeof(str), "0%d", k);
	 default: format(str, sizeof(str), "%d", k);
 }
 return str;
}

#if defined USE_POOL

CMD:wpool(playerid)
{
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(GetPVarInt(playerid, "MissionProgress") || IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if(poolmode != 2) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Pool game has not been started yet!");
   SavePlayerCoords(playerid);
   ResetPlayerWeaponsEX(playerid);
   SetPlayerInterior(playerid, 11);
   SetPlayerPos(playerid, 504.4001, -74.2143, 998.7578);
   SetPlayerVirtualWorldEX(playerid, 477);
   SetPVarInt(playerid, "PoolWatch", true);

   SetPlayerCameraPos(playerid, 510.0244, -87.2290, 1000.6743);
   SetPlayerCameraLookAt(playerid, 510.0139, -86.2303, 999.7143);
   TextDrawShowForPlayer(playerid, PoolTD1);
   TextDrawShowForPlayer(playerid, PoolTD2);
   TextDrawShowForPlayer(playerid, PoolTD3);

   new str[144];
   format(str, sizeof(str), "Pool - ~g~~h~%s ~w~is watching the pool! ~r~(~h~/wpool~r~)~w~!", pName[playerid]);
   SendaMsg(str);
   TogglePlayerControllable2(playerid, 0);
   return 1;
}

new poollock=0;
CMD:lockp(playerid)
{
  if(!IsAdmin(playerid, 51)) return SendMsg(playerid, 5);
  if(poollock == 1)
  {
	 poollock =0;
	 //new str[128];
	 //format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}Admin %s has unlocked the pool", gAname(playerid));
	// SendClientMessageToAll(AdminInfo, str);
  }
  else if(poollock == 0)
  {
	 poollock =1;
	// new str[128];
	// format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}Admin %s has locked the pool", gAname(playerid));
	 //SendClientMessageToAll(AdminInfo, str);
  }
  return 1;
}
/*new hideweaps=0;
CMD:hideweaps(playerid)
{
  if(hideweaps == 1)
  {
	 hideweaps =0;
	 new string[128];
     format(string, sizeof(string), "{00904C} » Account settings «{00D9AD} Weapons on your body will appear after the next death.");
     SendClientMessage(playerid, AdminInfo, string);
  }
  else if(hideweaps == 0)
  {
	 hideweaps =1;
	 new string[128];
     format(string, sizeof(string), "{00904C} » Account settings «{00D9AD} Weapons on your body hidden till the next death.");
     SendClientMessage(playerid, AdminInfo, string);
  }
  return 1;
}*/
//Pool

CMD:pool(playerid)
{
   if(poollock == 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}The pool is currently being fixed.");
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(GetPVarInt(playerid, "MissionProgress") || IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(pInGW[playerid]) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You can't use this command in a gang war.");
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if(poolmode == 2) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Pool game has already been started! Type (/wpool) to watch the match instead!");
/*   else*/
   if(poolmode == 1)
   {
     new id;
	 foreach(new i : Player)
	 {
	   if(GetPVarInt(i, "poolguy1"))
	   {
		   id=i;
	   }
	 }
	 if(IsPlayerConnected(id))
	 {
		 SavePlayerCoords(playerid);
		 ResetPlayerWeaponsEX(playerid);

		 SetPlayerVirtualWorldEX(playerid, 477);
         SetPVarInt(playerid, "poolguy2", true);
         new str[128];
         format(str, sizeof(str), "{FF8C00}» Pool «{7FBA00} %s is playing against %s in pool", pName[playerid], pName[id]);
         SendClientMessageToAll(-1, str);
         poolmode=2;
         SetPlayerCameraPos(playerid, 508.1647, -81.2077, 1001.2369);
         SetPlayerCameraLookAt(playerid, 508.6456, -82.0829, 1000.6399);
         SetTimerEx("GoPool", 3000, false, "ii", playerid, id);
		 SendInfoText(playerid, 3000, "~y~Please wait");
		 SendInfoText(id, 3000, "~y~Please wait");
         SetPlayerPos(playerid, 510.1858, -83.3744, 998.9609);
         SetPlayerFacingAngle(playerid, 189.2801);
         TickCount[playerid][PoolJoin]=GetTickCount();

         SetPlayerInterior(playerid, 11);
         poolguy1=id;
         poolguy2=playerid;
         TextDrawShowForPlayer(playerid, PoolTD1);
         TextDrawShowForPlayer(playerid, PoolTD2);
         TextDrawShowForPlayer(playerid, PoolTD3);
         TextDrawShowForPlayer(id, PoolTD1);
         TextDrawShowForPlayer(id, PoolTD2);
		 format(str, sizeof(str), "~y~%s - 0 ~n~~n~%s - 0", pName[poolguy1], pName[poolguy2]);
         TextDrawSetString(PoolTD3, str);
         TextDrawShowForPlayer(id, PoolTD3);
         ApplyAnimation(playerid, "POOL", "POOL_ChalkCue", 4.1, 1, 1, 1, 0, 1500, 1);
         ApplyAnimation(id, "POOL", "POOL_ChalkCue", 4.1, 1, 1, 1, 0, 1500, 1);
         ballscount=15;
         poolscore1=0;
         poolscore2=0;
		 TogglePlayerControllable2(playerid, 1);
		 TogglePlayerControllable2(id, 1);
         lockshooting=1;
	 	 SetPlayerAttachedObject(playerid, 3, 3004, 6, -0.0189, -0.0849, 1.3049, -97.5999, -61.3000, -13.4000, 1.0000, 1.0000, 1.0000); // "shosho" by RoNz (Skin:292)
		 SetPlayerAttachedObject(id, 3, 3004, 6, -0.0189, -0.0849, 1.3049, -97.5999, -61.3000, -13.4000, 1.0000, 1.0000, 1.0000); // "shosho" by RoNz (Skin:292)

	 }
   }

   else
   {
		 TogglePlayerControllable2(playerid, 0);
         poolguy1=-1;
         poolguy2=-1;
         SetPVarInt(playerid, "poolguy1", true);
         new str[128];
         format(str, sizeof(str), "{FF8C00}» Pool «{7FBA00} %s wants to play pool, type {FF8C00}(/pool){7FBA00} to play against him.", pName[playerid]);
         SendClientMessageToAll(-1, str);
         poolmode=1;
        // TickCount[playerid][PoolJoin]=GetTickCount();

		 SavePlayerCoords(playerid);
		 ResetPlayerWeaponsEX(playerid);


		 SetPlayerVirtualWorldEX(playerid, 477);
         SetPlayerPos(playerid, 511.1303, -84.7025, 998.9609);
         SetPlayerFacingAngle(playerid, 99.2800);
         SetPlayerInterior(playerid, 11);
         SetPlayerCameraPos(playerid, 508.1647, -81.2077, 1001.2369);
         SetPlayerCameraLookAt(playerid, 508.6456, -82.0829, 1000.6399);

		 for(new x=0; x<sizeof(PoolBall); x++)
		 {
		  if(IsValidObject(PoolBall[x]))
		  {
			  DestroyObject(PoolBall[x]);
			  PHY_DeleteObject(PoolBall[x]);
	      }
		 }

		 PoolBall[0] = CreateObject(3003, 510.11218261719, -84.40771484375, 998.86785888672, 0, 0, 0);
	     PoolBall[1] = CreateObject(3100, 510.10882568359, -85.166389465332, 998.86749267578, 0, 0, 0);
	     PoolBall[2] = CreateObject(3101, 510.14270019531, -85.232612609863, 998.86749267578, 0, 0, 0);
	     PoolBall[3] = CreateObject(3102, 510.0676574707, -85.232200622559, 998.86749267578, 0, 0, 0);
	     PoolBall[4] = CreateObject(3103, 510.18600463867, -85.295257568359, 998.86749267578, 0, 0, 0);
	     PoolBall[5] = CreateObject(3104, 510.11242675781, -85.297294616699, 998.86749267578, 0, 0, 0);
	     PoolBall[6] = CreateObject(3105, 510.03665161133, -85.299163818359, 998.86749267578, 0, 0, 0);
	     PoolBall[7] = CreateObject(3002, 510.22308349609, -85.362342834473, 998.86749267578, 0, 0, 0);
	     PoolBall[8] = CreateObject(2995, 510.14828491211, -85.365989685059, 998.86749267578, 0, 0, 0);
	     PoolBall[9] = CreateObject(2996, 510.07455444336, -85.365234375, 998.86749267578, 0, 0, 0);
	     PoolBall[10] = CreateObject(2998, 510.00054931641, -85.363563537598, 998.86749267578, 0, 0, 0);
	     PoolBall[11] = CreateObject(2999, 510.25915527344, -85.431137084961, 998.86749267578, 0, 0, 0);
	     PoolBall[12] = CreateObject(3000, 510.18399047852, -85.430549621582, 998.86749267578, 0, 0, 0);
	     PoolBall[13] = CreateObject(3001, 510.10900878906, -85.43196105957, 998.86749267578, 0, 0, 0);
	     PoolBall[14] = CreateObject(3106, 510.03570556641, -85.432624816895, 998.86749267578, 0, 0, 0);
	     PoolBall[15] = CreateObject(2997, 509.96197509766, -85.427406311035, 998.86749267578, 0, 0, 0);

         for(new i; i < sizeof PoolBall; i++)
         {
             PHY_InitObject(PoolBall[i], 3003, _, _, PHY_MODE_2D); // Notice that I typed modelid 3003 because all the balls are equal.
             PHY_SetObjectFriction(PoolBall[i], 0.08);
             PHY_RollObject(PoolBall[i]);
             PHY_SetObjectWorld(PoolBall[i], 477);
	     }


   }
   SetTeleShow(6, 0);
   return 1;
}
#else
CMD:pool(playerid)
{
  SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}The pool is currently being fixed.");
  return 1;
}
#endif
CMD:duellocations(playerid)
{
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   new str[1024];
   format(str, sizeof(str), "{1BAFE0}Here is the list of the available /duel locations!");
   for(new x=0; x<sizeof(DuelCoords); x++)
   {
	   format(str, sizeof(str), "%s\n%d.%s", str, x+1, DuelCoords[x][xName]);
   }
   ShowPlayerDialog(playerid, 1359, DIALOG_STYLE_MSGBOX, "Duel locations", str, "Exit", "");
   return 1;
}
CMD:clantag(playerid)
{
  // if(!IsAdmin(playerid, 10)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This command is currently disabled.");
   if((strfind(pName[playerid], "[DoD]", true) == -1 && (strfind(pName[playerid], "]DoD[", true) == -1))) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be a DoD clan member to use this command!");
   //if(PlayerInfo[playerid][VipItems][6] != 1) return SendMsg(playerid, 5);
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   new str[1024];
   format(str, sizeof(str), "{FFDF5E}Gold\n{%06x}Lighter than your color\n{%06x}Darker than your color\n{FF9500}Orange\n{FC4C4C}RED\n{4C8FFC}Blue\n{FFFB00}Yellow\n{CCFF00}Lime\n{00AB06}Green\n{8A8A8A}Gray\n{B700FF}Purple\n{FF00BF}Pink\n- Off", "Select", "Exit", (ColorLighen(GetPlayerColor(playerid), 0.2) >>> 8), (ColorDarken(GetPlayerColor(playerid), 0.2) >>> 8));
   ShowPlayerDialog(playerid, 1360, DIALOG_STYLE_LIST, "Select Clan Tag", str, "Exit", "");
   return 1;
}
CMD:duel(playerid, params[])
{
	new id;
    if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");
    if(IsInFight(playerid)) return SendMsg(playerid, 2);
    if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    //if(pInGW[playerid]) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You can't use this command in a gang war.");
    if(GetPVarInt(playerid, "MissionProgress") || IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
    if(aduty[playerid] == 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command while on admin duty.");
	if (sscanf(params, "D(1)", id)) return SendWarning(playerid, "/duel <duel id>"), SendClientMessage(playerid, RED2, ""RED_"» Error « {BABABA} /DuelLocations to view the available locations!");
	if(id < 1 || id > sizeof(DuelInfo)+1)  return SendWarning(playerid, "/duel <duel id>"), SendClientMessage(playerid, RED2, ""RED_"» Error « {BABABA} /DuelLocations to view the available locations!");
    if(LockDms == 1) return SendMsg(playerid, 6);
	new p;
    if(DuelInfo[stat] == 2) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}The duel has already been started");
    else if(DuelInfo[stat] == 3) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}No weapon has been choosen please wait a few seconds then try again");
	else if(DuelInfo[stat] == 0)
	{
	   SavePlayerCoords(playerid);
       HidePlayerMenu(playerid);
       DuelInfo[stat] = 3;
       p=IsInDuelCP(playerid);
	   ResetPlayerWeaponsEX(playerid);
	   if(id == 0) id=1;
       if(p != -255)  DuelInfo[xloc] =p, TeleportPlayer(playerid, DuelCoords[p][p1pos][0], DuelCoords[p][p1pos][1], DuelCoords[p][p1pos][2], DuelCoords[p][p1pos][3], 0, false), SetPlayerInterior(playerid, DuelCoords[p][xint]);
       else DuelInfo[xloc] =id-1, TeleportPlayer(playerid, DuelCoords[id-1][p1pos][0], DuelCoords[id-1][p1pos][1], DuelCoords[id-1][p1pos][2], DuelCoords[id-1][p1pos][3], 0, false), SetPlayerInterior(playerid, DuelCoords[id-1][xint]);
       SetCameraBehindPlayer( playerid );
       TogglePlayerControllable2(playerid, 0);
       DuelInfo[player1]=playerid;
       ShowPlayerDialog(playerid, DIALOG_DUEL, DIALOG_STYLE_LIST, ""cb2"Choose Duel Weapon", "1. Desert Eagle\n2. Shotgun\n3. Sawn-Off Shotgun\n4. Combat Shotgun\n5. M4\n6. Mp5 \n7. Uzi\n8. Sniper Rifle\n9. Country Rifle\n10. FlameThrower\n11. Minigun\n12. Grenade\n13. Molotov Cocktails\n14. Satchel Charge\n15. ChainSaw", "Ok", "Exit");

       new str[128];
       format(str, sizeof(str), "» Duel « "fOUT_"%s wants a duel, type "fOUT2_"(/Duel)"fOUT_" to fight against him ", pName[playerid]);
       SendClientMessageToAll(fOUT2, str);
       SetPlayerVirtualWorldEX(playerid, 6757);
       SetTeleShow(5, 0);
       SetPlayerArmour(playerid, 100);
       SetPlayerHealth(playerid, 100);
	}
	else if(DuelInfo[stat] == 1)
	{
	   SavePlayerCoords(playerid);
       HidePlayerMenu(playerid);
       DuelInfo[stat] = 2;
       p=DuelInfo[xloc];
	   ResetPlayerWeaponsEX(playerid);

       TeleportPlayer(playerid, DuelCoords[p][p2pos][0], DuelCoords[p][p2pos][1], DuelCoords[p][p2pos][2], DuelCoords[p][p2pos][3], 0, false), SetPlayerInterior(playerid, DuelCoords[p][xint]);
       SetCameraBehindPlayer( playerid );
       TogglePlayerControllable2(playerid, 0);
       DuelInfo[player2]=playerid;
       DuelInfo[startcount]=3;
	   DuelInfo[starttimer]=SetTimer("StartDuel", 1000, true);

	   new str[128];
	   format(str, sizeof(str), "» Duel « "fOUT_"%s is fighting against %s in a duel", pName[DuelInfo[player2]], pName[DuelInfo[player1]]);
	   SendClientMessageToAll(fOUT2, str);
       SetPlayerVirtualWorldEX(playerid, 6757);
       SetTeleShow(5, 0);
       SetPlayerArmour(playerid, 100);
       SetPlayerHealth(playerid, 100);
       SetPVarInt(DuelInfo[player1], "induel", true);
       SetPVarInt(DuelInfo[player2], "induel", true);
	}
	return 1;
}
CMD:fallout(playerid)
{

    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPVarInt(playerid, "MissionProgress") || IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(aduty[playerid] == 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command while on admin duty.");
	if( GetPVarInt(playerid, "typedfallout")) return SendClientMessage( playerid, RED, ""RED_"» Error « {BABABA}You have already signed up for Fallout minigame" );
	if( FallOut > 1 ) return SendClientMessage( playerid, RED, ""RED_"» Error « {BABABA}Fallout minigame has already been started" );
    if(EventStarted > 1 && EventType == 4) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant join the fallout during an event countdown.");
	new str[128];
	if( FallOut < 1 )
    {
        if(EventType == 4 && EventStarted ==1)
        {
			SendClientMessageToAll( fOUT2, "» Fallout « "fOUT_"Fallout minigame will start in 60 seconds. Type "fOUT2_"/fallout "fOUT_"to join!" );
			SetTimer( "FalloutCountdown", 60000, 0 );
        }
        else
        {
			SendClientMessageToAll( fOUT2, "» Fallout « "fOUT_"Fallout minigame will start in 30 seconds. Type "fOUT2_"/fallout "fOUT_"to join!" );
			SetTimer( "FalloutCountdown", 30000, 0 );
		}
		new k=random(6);
		for( new i=0; i < MAX_SLOTS; i++ )
	    {
			Objects_[i] = CreateDynamicObject( 19128, gCoords[i][0], gCoords[i][1], gCoords[i][2], 0.00, 0.00, 0.00 );
			if(isodd(i))
			{
				if(k==0) SetDynamicObjectMaterial(Objects_[i], 0, 18646, "matcolours", "blue", 0);
				else if(k==1) SetDynamicObjectMaterial(Objects_[i], 0, 18646, "matcolours", "green", 0);
				else if(k==2) SetDynamicObjectMaterial(Objects_[i], 0, 18646, "matcolours", "white", 0);
				else if(k==3) SetDynamicObjectMaterial(Objects_[i], 0, 18646, "matcolours", "yellow", 0);
				else if(k==4) SetDynamicObjectMaterial(Objects_[i], 0, 18646, "matcolours", "orange", 0);
				else SetDynamicObjectMaterial(Objects_[i], 0, 18646, "matcolours", "red", 0);
			}
			else SetDynamicObjectMaterial(Objects_[i], 0, 18646, "matcolours", "black", 0xFFFFFFFF);
			Iter_Add(_Objects, i );
	    }
	    FallOut = 1;
	    if(EventStarted == 0) SendInfoText2(4500, "Type ~g~/Fallout~w~ To join the ~b~Fallout Minigame~w~!");
    }
    SetPVarInt(playerid, "falloutplace", Iter_Count(FalloutPlayers));
    Iter_Add(FalloutPlayers, playerid );
	if(Iter_Count(FalloutPlayers) == 1) format(str, sizeof(str), "» Fallout « "fOUT_"%s has signed up for the Fallout minigame "fOUT2_"(/Fallout) "fOUT_"(1 Player)", pName[playerid]);
	else format(str, sizeof(str), "» Fallout « "fOUT_"%s has signed up for the Fallout minigame "fOUT2_"(/Fallout) "fOUT_"(%d Players)", pName[playerid], Iter_Count(FalloutPlayers));
    Streamer_ToggleIdleUpdate(playerid, true);
    SetPVarInt(playerid, "typedfallout", true);
	SendClientMessageToAll( fOUT2, str );
	SetTeleShow(3, 0);
	return 1;
}
CMD:lms(playerid)
{
  if(IsInFight(playerid)) return SendMsg(playerid, 2);
  if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
  if(aduty[playerid] == 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command while on admin duty.");
  if(LMS > 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}The last man standing has already been started");

  new count=Iter_Count(InLms);
  if(count >= 30) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}The Last Man Standing is already full, try again later");
  if(EventStarted > 1 && EventType == 800) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant join the LMS during an event countdown.");
  new str[168];

  if(LMS == 0)
  {
	  new a=22+random(18);
	  if(a == 40) LmsWeapon=42;
	  else LmsWeapon = a;
	  LMS = 1;
	  if(EventType==800 && EventStarted == 1)
	  {
		  SendClientMessageToAll(-1, "{9ACC89}» LMS « {70AB5C}The Last Man Standing will start in 60 seconds");
	      LmsStartTimer=SetTimer("StartLms", 60*1000, false);
	      LmsStartTime=60;
    	  //new str[128];
	     // format(str, sizeof(str), "~g~Last Man Standing starts in ~p~%d~w~ ~r~seconds ~n~ ~w~~n~ Required players for start: ~y~2~n~~w~ Current players: ~r~%d", LmsStartTimer, Iter_Count(inLms));
	      //TextDrawSetStringEX(LMSwaiting, str);
	  }
	  else
	  {
		  //new str2[128];
		  SendClientMessageToAll(-1, "{9ACC89}» LMS « {70AB5C}The Last Man Standing will start in 30 seconds");
	      LmsStartTimer=SetTimer("StartLms", 30*1000, false);
	      LmsStartTime=30;
	      LmsStartTimer69=SetTimer("LmsCountdown", 1000, true);
	     /* format(str2, sizeof(str2), "~g~Last Man Standing starts in ~p~%d~w~ ~r~seconds ~n~ ~w~~n~ Required players for start: ~y~2~n~~w~ Current players: ~r~%d", LmsStartTimer, Iter_Count(inLms));
	      TextDrawSetStringEX(LMSwaiting, str2);*/
	  }
      if(EventStarted == 0) SendInfoText2(4500, "Type ~g~/LMS~w~ To join the ~p~Last Man Standing~w~!");
  }
  SetPVarInt(playerid, "Signed4Lms", true);
  Iter_Add(InLms, playerid);
  format(str, sizeof(str), "{9ACC89}» LMS « {70AB5C}%s has joined the Last Man Standing {9ACC89}(/LMS) {70AB5C}[%d/30]", pName[playerid], Iter_Count(InLms));
  SendClientMessageToAll(-1, str);

  SavePlayerCoords(playerid);
  SetPlayerVirtualWorldEX(playerid, 2);
  TeleportPlayer(playerid, LmsPos[count][0], LmsPos[count][1], LmsPos[count][2], LmsPos[count][3], 0, false);
  //SetPlayerCameraPos(playerid, 1367.7230, 1669.6848, 142.8822);
  //SetPlayerCameraLookAt(playerid, 1368.7217, 1669.6858, 142.7867);
  Streamer_UpdateEx(playerid, 1367.7230, 1669.6848, 142.8822);
  SetPlayerHealth(playerid, 100);
  SetPlayerArmour(playerid, 100);
  SetPVarInt(playerid, "LMSKILLES", 0);
  TogglePlayerControllable2(playerid, 0);

  PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][3], "~b~Kills: ~b~~h~-");
  PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][4], "~r~Players: ~r~~h~-");
  PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][1], "_");
  PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][5], "_");
  PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][7], "~g~Last Man Standing");
  for(new x=0; x<8;x++) PlayerTextDrawShow(playerid, DMpTD[playerid][x]);

  ResetPlayerWeaponsEX(playerid);
  GivePlayerWeaponEX(playerid, LmsWeapon, 9999);
  SetTeleShow(0, 0);
  return 1;
}
forward LmsCountdown();
public LmsCountdown()
{
     LmsStartTime--;
	 new str[128];
	 format(str, sizeof(str), "~r~The ~g~LMS~r~ will start in~n~~y~%d Seconds", LmsStartTime);
	 if(LmsStartTime > 0)
	 {
		 foreach(new i : InLms)
		 {
			  //if(InLms[i] > 0)
			  {
				SendInfoText(i, 1500, str);
			  }
		 }
	 }
	 return 1;
}
CMD:myprops(playerid)
{
  new str[700];
  new count = 0;
  for(new p=0; p<MAX_PROPS; p++)
  {
	if(fexist(PropPath(p)))
	{
      if(!strcmp(pInfo[p][Owner], pName[playerid], true))
	  {
	    count++;
        format(str, sizeof(str), "%s"LIGHTRED_"%30s\t"LIGHTYELLOW_"Earnings: %4d\n", str, pInfo[p][Name], pInfo[p][Earnings]);
	  }
	}
  }
  if(count ==0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You dont own any properties!");
  new str2[128];
  format(str2, sizeof(str2), "My Properties - "LIGHTYELLOW_"Total earnings %d", GetPlayerTotalPayday(playerid));
  ShowPlayerDialog(playerid, 945854, DIALOG_STYLE_LIST, str2, str, "Ok", "Close");
  return 1;
}
CMD:createprop(playerid, params[])
{
   if(!IsAdmin(playerid, 5)) return SendMsg(playerid, 5);
   new NaMe[50], iD, pEarnings, str[128];
   if(sscanf(params, "dds[50]", iD, pEarnings, NaMe)) return SendClientMessage(playerid, RED, "Usage : /Createprop "GRAY_"<id> <property payday(earnings)> <name>");
   if(iD > MAX_PROPS)  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Property ID is above the limit");
   if(fexist(PropPath(iD))) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}this prop already exists");
   if(pEarnings > 500000 || pEarnings < 8000) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Maximum property earnings should be 500k, and minimum 8k.");
   new Float:x, Float:y, Float:z;
   GetPlayerPos(playerid, x, y, z);

   format(str, sizeof(str), ""WHITE_"Property id %d has been "GREEN_"saved", iD);
   SendClientMessage(playerid, RED, str);

   format(pInfo[iD][Name], sizeof(NaMe), "%s", NaMe);
   pInfo[iD][ID] = iD;
   pInfo[iD][Earnings] = pEarnings;
   pInfo[iD][Pickup] = CreatePickup(1274, 23, x, y, z);
   pInfo[iD][Pos][0] = x;
   pInfo[iD][Pos][1] = y;
   pInfo[iD][Pos][2] = z;

   format(pInfo[iD][Owner], 24, "No owner");
   new INI:File2 = INI_Open(PropPath(iD));
   INI_SetTag(File2, "propdata");
   INI_WriteString(File2, "Name", pInfo[iD][Name]);
   INI_WriteString(File2, "Owner", "No owner");
   INI_WriteFloat(File2, "pickUpX", x);
   INI_WriteFloat(File2, "pickUpY", y);
   INI_WriteFloat(File2, "pickUpZ", z);
   INI_WriteInt(File2, "Earnings", pEarnings);
   INI_Close(File2);
   return 1;
}

CMD:deleteprop(playerid, params[])
{
   new iD;
   if(!IsAdmin(playerid, 5)) return SendMsg(playerid, 5);
   if(sscanf(params, "d", iD)) return SendClientMessage(playerid, RED, "Usage : /DeleteProp "GRAY_"<PropID> *use /propid to get the id of property in your range");
   if(!fexist(PropPath(iD))) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}this prop doesnt exist");
   format(pInfo[iD][Name], 64, "NoName");
   pInfo[iD][ID] = -255;
   pInfo[iD][Earnings] = 0;
   DestroyPickup(pInfo[iD][Pickup]);
   pInfo[iD][Pos][0] = 0;
   pInfo[iD][Pos][1] = 0;
   pInfo[iD][Pos][2] = 0;

   fremove(PropPath(iD));
   new str[128];
   format(str, sizeof(str), "Property id "LIGHTRED_"%d "WHITE_" has been removed", iD);
   SendClientMessage(playerid, WHITE, str);
   return 1;
}
CMD:propid(playerid)
{
   if(!IsAdmin(playerid, 5)) return SendMsg(playerid, 5);
   new p=GetPropID(playerid);
   if(p < 0)  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}There is no property in your range");
   new str[50];
   format(str, sizeof(str), "Property ID "LIGHTRED_"%d", p);
   SendClientMessage(playerid, WHITE, str);
   return 1;
}

//===SAMS
CMD:saminfo(playerid, params[])
{
    new id;
    if(sscanf(params, "d", id)) return SendClientMessage(playerid, RED, "Usage : /saminfo "WHITE_"<SamID>");
    new str[128];
    format(str, sizeof(str), ""WHITE_"Work: %d || MissleFired: %d", SAMS[id][Work], SAMS[id][MissleFired]);
    SendClientMessage(playerid, RED, str);
	if(GetSamInRange(playerid) == id) SendClientMessage(playerid, RED, "You are in range");
	else SendClientMessage(playerid, RED, "You are not in range");
	return 1;
}


CMD:samrange(playerid, params[])
{
    if(!IsAdmin(playerid, 6)) return SendMsg(playerid, 5);
    new id, Float:range;
    if(sscanf(params, "df", id, range)) return SendClientMessage(playerid, RED, "Usage : /samrange "WHITE_"<SamID> <Range>");
    if(!fexist(SamPath(id))) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}this sam doesnt exist");

    SAMS[id][SDist] = range;

    new str[128];
    format(str, sizeof(str), ""WHITE_"Sam id %d shooting range has been "GREEN_"saved", id);
    SendClientMessage(playerid, RED, str);

    new INI:File = INI_Open(SamPath(id));
    INI_SetTag(File, "samdata");
    INI_WriteFloat(File, "range", range);
	INI_Close(File);
	return 1;

}

CMD:createsam(playerid, params[])
{
   if(!IsAdmin(playerid, 6)) return SendMsg(playerid, 5);
   new iD, type;
   if(sscanf(params, "dd", iD, type)) return SendClientMessage(playerid, RED, "Usage : /CreateSam "WHITE_"<SamID> <Sam Type (1/2)> "GRAY_"1 for a normal sam || 2 for a killer sam"), SendClientMessage(playerid, GRAY, "*Killer sam - attack all players in the range of the sam base"), SendClientMessage(playerid, GRAY, "*Normal sam - only attack planes");
   if(iD > MAX_SAMS || iD < 0)  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Sam ID is above the limit");
   if(fexist(SamPath(iD))) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}this sam already exists");
   new Float:x, Float:y, Float:z, Float:a;
   GetPlayerPos(playerid, x, y, z);
   GetPlayerFacingAngle(playerid, a);
   new str[128];
   format(str, sizeof(str), ""WHITE_"Sam id %d has been "GREEN_"saved", iD);
   SendClientMessage(playerid, RED, str);
   SendClientMessage(playerid, GRAY, "-Sam Editor- Type /EditSam to move the sam's position");
   SendClientMessage(playerid, GRAY, "-Sam Editor- Type /AddSamKeypad to create a keypad");
   SendClientMessage(playerid, GRAY, "-Sam Editor- Type /SamID to get the SamID within your range");
   SendClientMessage(playerid, GRAY, "-Sam Editor- Type /SamRange to change the sam's range");

   SAMS[iD][Obj] = CreateDynamicObject(18848, x, y, z, 0, 0, a);
   SAMS[iD][SamPos][0] = x;
   SAMS[iD][SamPos][1] = y;
   SAMS[iD][SamPos][2] = z;
   SAMS[iD][SamPos][3] = a;
   SAMS[iD][Work] = 0;
   SAMS[iD][MissleFired] = 0;
   SAMS[iD][SDist] = 50.0;

   if(type == 1) SAMS[iD][isKiller] =0;
   else SAMS[iD][isKiller] =1;

   new INI:File2 = INI_Open(SamPath(iD));
   INI_SetTag(File2, "samdata");
   INI_WriteFloat(File2, "sX", x);
   INI_WriteFloat(File2, "sY", y);
   INI_WriteFloat(File2, "sZ", z);
   INI_WriteFloat(File2, "sA", a);
   INI_WriteInt(File2, "Killer",  SAMS[iD][isKiller]);
   INI_Close(File2);



   return 1;
}

CMD:editsam(playerid, params[])
{
   if(!IsAdmin(playerid, 6)) return SendMsg(playerid, 5);
   new iD;
   if(sscanf(params, "d", iD)) return SendClientMessage(playerid, RED, "Usage : /editsam "GRAY_"<SamID>");
   if(iD > MAX_SAMS)  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Sam ID is above the limit");
   if(!fexist(SamPath(iD))) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}this sam doesnt exists");
   if(!IsPlayerInRangeOfPoint(playerid, 15.00, SAMS[iD][SamPos][0], SAMS[iD][SamPos][1], SAMS[iD][SamPos][2])) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be within the range of the sam to edit it");
   EditDynamicObject(playerid, SAMS[iD][Obj]);
   return 1;
}
CMD:deletesam(playerid, params[])
{
   if(!IsAdmin(playerid, 6)) return SendMsg(playerid, 5);
   new iD;
   if(sscanf(params, "d", iD)) return SendClientMessage(playerid, RED, "Usage : /deletesam "GRAY_"<SamID>");
   if(iD > MAX_SAMS)  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Sam ID is above the limit");
   if(!fexist(SamPath(iD))) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}this sam doesnt exists");
   if(IsValidDynamicObject(SAMS[iD][Obj])) DestroyDynamicObject(SAMS[iD][Obj]);
   if(IsValidDynamicObject(SAMS[iD][kObj])) DestroyDynamicObject(SAMS[iD][kObj]);
   if(IsValidDynamicObject(SAMS[iD][SamMissle]))  DestroyDynamicObject(SAMS[iD][SamMissle]);
   SAMS[iD][Obj]=INVALID_OBJECT_ID;
   SAMS[iD][kObj]=INVALID_OBJECT_ID;
   SAMS[iD][SamMissle]=INVALID_OBJECT_ID;
   fremove(SamPath(iD));
   SAMS[iD][SamPos][0] = 0;
   SAMS[iD][SamPos][1] = 0;
   SAMS[iD][SamPos][2] = 0;
   SAMS[iD][SamPos][3] = 0;
   SAMS[iD][SamkPos][0] = 0;
   SAMS[iD][SamkPos][1] = 0;
   SAMS[iD][SamkPos][2] = 0;
   SAMS[iD][SamkPos][3] = 0;
   SAMS[iD][Work] = 0;
   SAMS[iD][MissleFired] = 0;
   new str[128];
   format(str, sizeof(str), ""WHITE_"Sam id %d has been "GREEN_"deleted", iD);
   SendClientMessage(playerid, RED, str);
   return 1;
}



CMD:editsamkeypad(playerid, params[])
{
   if(!IsAdmin(playerid, 6)) return SendMsg(playerid, 5);
   new iD;
   if(sscanf(params, "d", iD)) return SendClientMessage(playerid, RED, "Usage : /EditSamKeypad "GRAY_"<SamID>");
   if(iD > MAX_SAMS)  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Sam ID is above the limit");
   if(!fexist(SamPath(iD))) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}this sam doesnt exists");
   if(!IsPlayerInRangeOfPoint(playerid, 15.0, SAMS[iD][SamkPos][0], SAMS[iD][SamkPos][1], SAMS[iD][SamkPos][2])) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be within the range of the sam to edit it");
   EditDynamicObject(playerid, SAMS[iD][kObj]);
   return 1;
}



CMD:addsamkeypad(playerid, params[])
{
   if(!IsAdmin(playerid, 6)) return SendMsg(playerid, 5);
   new iD;
   if(sscanf(params, "d", iD)) return SendClientMessage(playerid, RED, "Usage : /addsamkeypad "GRAY_"<SamID>");
   if(iD > MAX_SAMS)  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Sam ID is above the limit");
   if(!fexist(SamPath(iD))) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}this sam doesnt exists");

   new Float:x, Float:y, Float:z, Float:a;
   GetPlayerPos(playerid, x, y, z);
   GetPlayerFacingAngle(playerid, a);
   new str[128];
   format(str, sizeof(str), ""WHITE_"Sam Keypad id %d has been "GREEN_"saved", iD);
   SendClientMessage(playerid, RED, str);
   SendClientMessage(playerid, GRAY, "-Sam Editor- Type /EditSamKeypad to move the sam's keypad position");
   SendClientMessage(playerid, GRAY, "-Sam Editor- Type /SamID to get the SamID within your range");

   if(IsValidDynamicObject(SAMS[iD][kObj])) DestroyDynamicObject(SAMS[iD][kObj]);
   SAMS[iD][kObj] = CreateDynamicObject(19273, x, y, z, 0, 0, a);
   SAMS[iD][SamkPos][0] = x;
   SAMS[iD][SamkPos][1] = y;
   SAMS[iD][SamkPos][2] = z;
   SAMS[iD][SamkPos][3] = a;

   new INI:File2 = INI_Open(SamPath(iD));
   INI_SetTag(File2, "samdata");
   INI_WriteFloat(File2, "kX", x);
   INI_WriteFloat(File2, "kY", y);
   INI_WriteFloat(File2, "kZ", z);
   INI_WriteFloat(File2, "kA", a);
   INI_Close(File2);
   return 1;
}

CMD:samid(playerid)
{
   if(!IsAdmin(playerid, 6)) return SendMsg(playerid, 5);
   new s=GetSamID(playerid);
   if(s < 0)  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}There are no sam bases in your range");
   new str[50];
   format(str, sizeof(str), "Sam ID "LIGHTRED_"%d", s);
   SendClientMessage(playerid, WHITE, str);
   return 1;
}

//===
CMD:interiors(playerid)
{
   if(!IsAdmin(playerid, 5)) return SendMsg(playerid, 5);
   ShowPlayerDialog(playerid, 7471, DIALOG_STYLE_MSGBOX, "House interiors", ""LIGHTRED_"Available houe Interior ids\n"LIGHTYELLOW_"1. mansion\n"LIGHTYELLOW_"2. mansion\n"LIGHTYELLOW_"3. normal house\n"LIGHTYELLOW_"4. normal house\n"LIGHTYELLOW_"5. cj house\n"LIGHTYELLOW_"6. normal house\n"LIGHTYELLOW_"7. small house (caravan)\n"LIGHTYELLOW_"8. villa", "Close", "");
   return 1;
}


CMD:renamehouse(playerid, params[])
{
   if(!IsAdmin(playerid, 5)) return SendMsg(playerid, 5);
   new NaMe[50], iD;
   if(sscanf(params, "ds[50]", iD, NaMe)) return SendClientMessage(playerid, RED, "Usage : /Renamehouse "GRAY_"<ID> <Name>");
   if(iD < 1 || iD >= MAX_HOUSES) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}invalid house id");
   if(hExist[iD] != 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}this house doesnt exist");
   if((strlen(NaMe) > 14) || (strlen(NaMe) == 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}invalid or long house name (max 15 characters)!");
   if((strfind(NaMe, "~", true) != -1))  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}An Invalid Character has been used in House Name");

   format(hInfo[iD][Name], 50, "%s", NaMe);

   UpdatehInfo(iD);
   new str[128];
   format(str, sizeof(str), "House ID %d has been "GREEN_"renamed", iD);
   SendClientMessage(playerid, WHITE, str);
   return 1;
}
CMD:sethousepp(playerid, params[])
{
   if(!IsAdmin(playerid, 5)) return SendMsg(playerid, 5);
   new iD, pp;
   if(sscanf(params, "dd", iD, pp)) return SendClientMessage(playerid, RED, "Usage : /SetHousePP "GRAY_"<ID> <PP Amount>");
   if(iD < 1 || iD >= MAX_HOUSES) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}invalid house id");
   if(hExist[iD] != 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}this house doesnt exist");
   if(pp > 0 && (pp > 100 || pp < 25)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}PP Points should be between 25 and 100");
   hInfo[iD][PP] = pp;
   UpdatehInfo(iD);
   new str[128];
   format(str, sizeof(str), ""GREEN_"PP Points"WHITE_" has been set for house ID %d", iD);
   SendClientMessage(playerid, WHITE, str);
   return 1;
}

CMD:sethousescore(playerid, params[])
{
   if(!IsAdmin(playerid, 5)) return SendMsg(playerid, 5);
   new iD, ScOrE;
   if(sscanf(params, "dd", iD, ScOrE)) return SendClientMessage(playerid, RED, "Usage : /SetHouseScore "GRAY_"<ID> <Score>");
   if(iD < 1 || iD >= MAX_HOUSES) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}invalid house id");
   if(hExist[iD] != 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}this house doesnt exist");
   if((ScOrE < 300) || (ScOrE > 25000)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}house score should be between 300 and 25000");
   hInfo[iD][Score] = ScOrE;
   UpdatehInfo(iD);
   new str[128];
   format(str, sizeof(str), ""GREEN_"Score"WHITE_" has been set for house ID %d", iD);
   SendClientMessage(playerid, WHITE, str);
   return 1;
}

CMD:sethouseprice(playerid, params[])
{
   if(!IsAdmin(playerid, 5)) return SendMsg(playerid, 5);
   new iD, PrIcE;
   if(sscanf(params, "dd", iD, PrIcE)) return SendClientMessage(playerid, RED, "Usage : /SetHousePrice "GRAY_"<ID> <Price>");
   if(iD < 1 || iD >= MAX_HOUSES) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}invalid house id");
   if(hExist[iD] != 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}this house doesnt exist");
   if((PrIcE < 2500000) || (PrIcE > 100000000)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}House price should be higher than 2.5 mil and lower than 100 mil");
   hInfo[iD][Cost] = PrIcE;
   UpdatehInfo(iD);
   new str[128];
   format(str, sizeof(str), ""GREEN_"Price"WHITE_" has been set for house ID %d", iD);
   SendClientMessage(playerid, WHITE, str);
   return 1;
}


CMD:readcmds(playerid)
{
   if(!IsAdmin(playerid, 5) && PlayerInfo[playerid][UserID] != 153569) return 0;
   if(PlayerInfo[playerid][readcmds] == 0)
   {
	  SendClientMessage(playerid, GRAY, "Commands Reading "GREEN_"ON");
      new shit[128];
      format(shit, sizeof(shit), "UPDATE `users` SET `readcmds` = 1 WHERE `UserID` = '%d'", PlayerInfo[playerid][UserID]);
  	  mysql_query(GTADM, shit);
  	  PlayerInfo[playerid][readcmds]=1;
   }
   else if(PlayerInfo[playerid][readcmds] == 1)
   {
	  SendClientMessage(playerid, GRAY, "Commands Reading "RED_"OFF");
      new shit[128];
      format(shit, sizeof(shit), "UPDATE `users` SET `readcmds` = 0 WHERE `UserID` = '%d'", PlayerInfo[playerid][UserID]);
  	  mysql_query(GTADM, shit);
  	  PlayerInfo[playerid][readcmds]=0;
   }
   return 1;
}

CMD:readvchat(playerid)
{
   if(!IsAdmin(playerid, 5) && PlayerInfo[playerid][UserID] != 153569) return 0;
   if(PlayerInfo[playerid][readvchat] == 0)
   {
	  SendClientMessage(playerid, GRAY, "Vehicle Chat Reading "GREEN_"ON");
      new shit[128];
      format(shit, sizeof(shit), "UPDATE `users` SET `readvchat` = 1 WHERE `UserID` = '%d'", PlayerInfo[playerid][UserID]);
  	  mysql_query(GTADM, shit);
  	  PlayerInfo[playerid][readvchat]=1;
   }
   else if(PlayerInfo[playerid][readvchat] == 1)
   {
	  SendClientMessage(playerid, GRAY, "Vehicle Chat Reading "RED_"OFF");
      new shit[128];
      format(shit, sizeof(shit), "UPDATE `users` SET `readvchat` = 0 WHERE `UserID` = '%d'", PlayerInfo[playerid][UserID]);
  	  mysql_query(GTADM, shit);
  	  PlayerInfo[playerid][readvchat]=0;
   }
   return 1;
}
CMD:readgchat(playerid, gangid)
{
   if(!IsAdmin(playerid, 5) && PlayerInfo[playerid][UserID] != 153569) return 0;
   if(PlayerInfo[playerid][readgchat] == 0)
   {
	  SendClientMessage(playerid, GRAY, "Gang Chat Reading "GREEN_"ON");
      new shit[128];
      format(shit, sizeof(shit), "UPDATE `users` SET `readgchat` = 1 WHERE `UserID` = '%d'", PlayerInfo[playerid][UserID]);
  	  mysql_query(GTADM, shit);
  	  PlayerInfo[playerid][readgchat]=1;
   }
   else if(PlayerInfo[playerid][readgchat] == 1)
   {
	  SendClientMessage(playerid, GRAY, "Gang Chat Reading "RED_"OFF");
      new shit[128];
      format(shit, sizeof(shit), "UPDATE `users` SET `readgchat` = 0 WHERE `UserID` = '%d'", PlayerInfo[playerid][UserID]);
  	  mysql_query(GTADM, shit);
  	  PlayerInfo[playerid][readgchat]=0;
   }
   return 1;
}
#if defined useirc
CMD:irc(playerid)
{
   if(IRCoff[playerid] == 1)
   {
	  IRCoff[playerid]=0;
	  SendClientMessage(playerid, GRAY, "IRC Chat "RED_"OFF");
   }
   else
   {
	  IRCoff[playerid]=1;
	  SendClientMessage(playerid, GRAY, "IRC Chat "GREEN_"ON");
   }
   return 1;
}
#endif

CMD:maptele(playerid)
{
   if(!IsAdmin(playerid, 10)) return SendMsg(playerid, 5);
   if(!GetPVarInt(playerid, "Map_Tele"))
   {
	  SetPVarInt(playerid, "Map_Tele", true);
	  SendClientMessage(playerid, GRAY, "MAP Teleporting "GREEN_"ON");
   }
   else
   {
	  DeletePVar(playerid, "Map_Tele");
	  SendClientMessage(playerid, GRAY, "MAP Teleporting "RED_"OFF");
   }
   return 1;
}

CMD:createhouse(playerid, params[])
{
   if(!IsAdmin(playerid, 5)) return SendMsg(playerid, 5);
   new NaMe[50], iD, PrIcE, ScOrE, interior, vip;
   if(sscanf(params, "ddddds[50]", iD, PrIcE, ScOrE, vip, interior, NaMe)) return SendClientMessage(playerid, RED, "Usage : /Createhouse "GRAY_"<id> <price> <score> <PP points> <interior*(use /interiors)> <name>");
   if(hExist[iD] > 0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}this house already exists");
   if((iD < 1)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}invalid house id");
   if(iD >= MAX_HOUSES)  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}House ID is above the limit");
   if((strlen(NaMe) > 14) || (strlen(NaMe) == 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}invalid or long house name (max 15 characters)!");
   if((PrIcE < 2500000) || (PrIcE > 100000000)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}House price should be higher than 2.5 mil and lower than 100 mil");
   if((ScOrE < 300) || (ScOrE > 25000)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}house score should be between 300 and 25000");
   if(vip > 0 && (vip > 100 || vip < 25) ) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}PP Points should be between 25 and 100");
   if(interior <= 0 || interior > 7) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}invalid interior , use /interiors to see the list with available interiors");
   if((strfind(NaMe, "~", true) != -1))  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}An invalid character has been used in house name");

   new Float:x, Float:y, Float:z, Float:a;
   GetPlayerPos(playerid, x, y, z);
   GetPlayerFacingAngle(playerid, a);

   hExist[iD]=1;
   format(hInfo[iD][Name], 50, "%s", NaMe);
   format(hInfo[iD][Owner], 24, "No owner");
   hInfo[iD][hOwnerID] = -255;
   hInfo[iD][Score] = ScOrE;
   hInfo[iD][Cost] =PrIcE;

   hInfo[iD][ExteriorX]= x;
   hInfo[iD][ExteriorY]= y;
   hInfo[iD][ExteriorZ]= z;

   hInfo[iD][CarX]= x;
   hInfo[iD][CarY]= y;
   hInfo[iD][CarZ]= z;
   hInfo[iD][CarA]= a;

   hInfo[iD][sX] = x;
   hInfo[iD][sY] = y;
   hInfo[iD][sZ] = z;
   hInfo[iD][SpawnA] = a;

   hInfo[iD][PP] = vip;
   new b=interior-1;
   hInfo[iD][HInt] = b;
   hInfo[iD][Interior] = floatround(Interiors[b][0]);
   hInfo[iD][InteriorX] = Interiors[b][1];
   hInfo[iD][InteriorY] = Interiors[b][2];
   hInfo[iD][InteriorZ] = Interiors[b][3];
   hInfo[iD][InteriorA] = Interiors[b][4];
   hInfo[iD][VirtualWorld] = Hvw;
   hInfo[iD][Locked] =1;

   HousePickup[iD] = CreatePickup(1273, 23, x, y, z);
   HouseIcon[iD] = CreateDynamicMapIcon(x, y, z, 31, 0, 0, -1, -1, 500.0);
   new str[128];
   format(str, sizeof(str), "House id %d has been "GREEN_"created", iD);
   SendClientMessage(playerid, WHITE, str);
   SendClientMessage(playerid, WHITE, "Use "GREEN_"(/housespawn) "WHITE_"and "GREEN_"(/carspawn) "WHITE_"to change the spawn position on this house");
   Hvw++;
   AddInsertHouse(iD);
   ResetHouseTimeStamp(iD);
   return 1;
}
CMD:deletehouse(playerid, params[])
{
   new iD;
   if(!IsAdmin(playerid, 5)) return SendMsg(playerid, 5);
   if(sscanf(params, "d", iD)) return SendClientMessage(playerid, RED, "Usage : /deletehouse "GRAY_"<HouseID>");
   if(hExist[iD] != 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}this house doesnt exist");
   if(hInfo[iD][hOwnerID] > 0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must approve this house before removing it");
   hExist[iD]=0;
   hInfo[iD][hOwnerID]= -255;
   hInfo[iD][ExteriorX]= 0.0;
   hInfo[iD][ExteriorY]= 0.0;
   hInfo[iD][ExteriorZ]= 0.0;
   hInfo[iD][CarX]= 0.0;
   hInfo[iD][CarY]= 0.0;
   hInfo[iD][CarZ]= 0.0;
   hInfo[iD][CarA]= 0.0;
   hInfo[iD][sX] = 0.0;
   hInfo[iD][sY] = 0.0;
   hInfo[iD][sZ] = 0.0;
   hInfo[iD][SpawnA] = 0.0;

   DestroyPickup(HousePickup[iD]);
   DestroyDynamicMapIcon(HouseIcon[iD]);
   new str[128];
   format(str, sizeof(str), "House id "LIGHTRED_"%d "WHITE_" has been removed", iD);
   SendClientMessage(playerid, WHITE, str);
   format(str, sizeof(str), "DELETE FROM `houses` WHERE `ID` = %d", iD);
   mysql_query(GTADM, str);
   return 1;
}


CMD:createint(playerid, params[])
{
   new iD;
   if(!IsAdmin(playerid, 5)) return SendMsg(playerid, 5);
   if(sscanf(params, "d", iD)) return SendClientMessage(playerid, RED, "Usage : /createint "GRAY_"<HouseID>");
   if(hExist[iD] != 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}this house doesnt exist");


   new Float:x, Float:y, Float:z, Float:a;
   GetPlayerPos(playerid, x, y, z);
   GetPlayerFacingAngle(playerid, a);
   new in=GetPlayerInterior(playerid);

   hInfo[iD][Interior] = in;
   hInfo[iD][InteriorX] = x;
   hInfo[iD][InteriorY] = y;
   hInfo[iD][InteriorZ] = z;
   hInfo[iD][Interior] = in;
   hInfo[iD][HInt] = -255;
   new str[128];
   format(str, sizeof(str), "House id %d "LIGHTRED_"Interior"WHITE_" has been created", iD);
   SendClientMessage(playerid, WHITE, str);
   UpdatehInfo(iD);
   return 1;
}

#if defined USEKILLIST
CMD:killist(playerid)
{
	if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
	if(DontShowKills[playerid] == 0)
	{
	     DontShowKills[playerid]=1;
		 SendClientMessage(playerid, WHITE, "Killist "RED_"OFF");
		 for(new i=0; i<sizeof(Killist); i++) TextDrawHideForPlayer(playerid, Killist[i]);

	}
	else
	{
	     DontShowKills[playerid]=0;
		 SendClientMessage(playerid, WHITE, "Killist - "GREEN_"ON");
		 for(new i=0; i<sizeof(Killist); i++) TextDrawShowForPlayer(playerid, Killist[i]);
	}
    return 1;
}
#endif
CMD:housefix(playerid)
{
	new Query[200];
	if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
	if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
	if(PlayerInfo[playerid][HouseFix] == 1)
	{
	     PlayerInfo[playerid][HouseFix]=0;
		 SendClientMessage(playerid, WHITE, "House Spawn Fix - "RED_"OFF");

	}
	else
	{
	     PlayerInfo[playerid][HouseFix]=1;
		 SendClientMessage(playerid, WHITE, "House Spawn Fix - "GREEN_"ON");
	}
	format(Query, sizeof(Query), "UPDATE `users` SET `HouseFix` = '%d' WHERE `UserID` = '%d'", PlayerInfo[playerid][HouseFix], PlayerInfo[playerid][UserID]);
	mysql_query(GTADM, Query);
    return 1;
}
CMD:housespawn(playerid, params[])
{
   new iD;
   if(!IsAdmin(playerid, 5)) return SendMsg(playerid, 5);
   if(sscanf(params, "d", iD)) return SendClientMessage(playerid, RED, "Usage : /HoudeSpawn "GRAY_"<HouseID>");
   if(hExist[iD] != 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}this house doesnt exist");


   new Float:x, Float:y, Float:z, Float:a;
   GetPlayerPos(playerid, x, y, z);
   GetPlayerFacingAngle(playerid, a);

   hInfo[iD][sX] = x;
   hInfo[iD][sY] = y;
   hInfo[iD][sZ] = z;
   hInfo[iD][SpawnA] = a;
   new str[128];
   format(str, sizeof(str), "House id %d "LIGHTRED_"spawn point"WHITE_" has been created", iD);
   SendClientMessage(playerid, WHITE, str);
   UpdatehInfo(iD);
   return 1;
}
CMD:carspawn(playerid, params[])
{
   new iD;
   if(!IsAdmin(playerid, 5)) return SendMsg(playerid, 5);
   if(sscanf(params, "d", iD)) return SendClientMessage(playerid, RED, "Usage : /carspawn "GRAY_"<HouseID>");
   if(hExist[iD] != 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}this house doesnt exist");

   new Float:x, Float:y, Float:z, Float:a;
   GetPlayerPos(playerid, x, y, z);
   GetPlayerFacingAngle(playerid, a);

   hInfo[iD][CarX] = x;
   hInfo[iD][CarY] = y;
   hInfo[iD][CarZ] = z;
   hInfo[iD][CarA] = a;
   new str[128];
   format(str, sizeof(str), "House id %d "LIGHTRED_"car spawn point"WHITE_" has been created", iD);
   SendClientMessage(playerid, WHITE, str);
   UpdatehInfo(iD);
   return 1;
}
CMD:housecmds(playerid)
{
   if(!IsAdmin(playerid, 5)) return SendMsg(playerid, 5);
   new str[850];
   strcat(str, ""COL_RED"/CreateHouse "WHITE_"- Creates a house on your position.\n"COL_RED"/Deletehouse "WHITE_"- Removes an existing house.\n"COL_RED"/HouseSpawn "WHITE_"- Change the spawn point of an existing house.");
   strcat(str, "\n"COL_RED"/CarSpawn "WHITE_"- Change the car spawn point of an existing house.\n"COL_RED"/Interiors "WHITE_"- Show a list of available house interiors to use.\n"COL_RED"/CreateInt "WHITE_"- Create inside house spawn (can be used if none of the default interiors fits the house.");
   strcat(str, "\n"COL_RED"/Approvehouse "WHITE_"- Approves a house.\n"COL_RED"/RenameHouse "WHITE_"- Renames a house.\n"COL_RED"/SetHousePP "WHITE_"- Sets house premium points.\n"COL_RED"/SetHousePrice "WHITE_"- Sets house price\n"COL_RED"/SetHouseScore "WHITE_"- Sets house score\n"COL_RED"/FreeHouseID "WHITE_"- Gives you a free house id.");
   ShowPlayerDialog(playerid, 7471, DIALOG_STYLE_MSGBOX, ""LIGHTYELLOW_"GTADM - "WHITE_"House Commands", str, "close", "");
   return 1;
}

CMD:vkick(playerid, params[])
{
  new id, str[128];
  if(sscanf(params, "u", id)) return SendClientMessage(playerid, RED, "Usage : /vkick "GRAY_"<playerid>");
  if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
  if(GetPlayerState(playerid) != 2) return SendClientMessage(playerid, RED, "You are not driving a vehicle");
  if(GetPlayerVehicleID(id) != GetPlayerVehicleID(playerid)) return SendClientMessage(playerid, RED, "This player is not inside your car");
  if(IsPlayerNPC(id) && !strcmp(pName[id], "Jonny")) return SendNpcPM(playerid, "retard"), GiveMedal(playerid, 24);
  if(IsPlayerNPC(id)) return 0;

  RemovePlayerFromVehicle(id);
  format(str, sizeof(str), "You have been kicked out of the vehicle by the Driver %s", pName[playerid]);
  SendClientMessage(id, RED, str);
  format(str, sizeof(str), "You have kicked %s out of your vehicle", pName[id]);
  SendClientMessage(playerid, RED, str);
  return 1;
}

CMD:hkick(playerid, params[])
{
  new id, str[128];
  if(sscanf(params, "u", id)) return SendClientMessage(playerid, RED, "Usage : /hkick "GRAY_"<playerid>");
  if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
  if(IsPlayerNPC(id) && !strcmp(pName[id], "Jonny")) return SendNpcPM(playerid, "retard"), GiveMedal(playerid, 24);
  if(IsPlayerNPC(id)) return 0;
  new h=PlayerInfo[playerid][pHouse];
  if(InHouse[id] != h) return SendClientMessage(playerid, RED, "This player is not inside your house");

  SetPlayerPosEx(id, hInfo[h][sX], hInfo[h][sY], hInfo[h][sZ], hInfo[h][SpawnA]-180, 0);
  SetPlayerVirtualWorldEX(id, 0);
  InHouse[id] = -255;

  ApplyAnimation(id, "PED", "BIKE_FALLR", 1.0, 0, 1, 1, 0, 0, 1);
  format(str, sizeof(str), "you have been kicked out of the house by the owner %s", pName[playerid]);
  SendClientMessage(id, RED, str);
  return 1;
}
CMD:changepass(playerid, params[])
{
  if((GetPVarInt(playerid, "LOGGED")) == 2) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be registered/logged in to use this command");

  new oldpass[34], newpass[34];
  if(sscanf(params, "s[34]s[34]", oldpass, newpass)) return SendClientMessage(playerid, RED, "Usage : /changepass "GRAY_"<old password> <new password>");

  new string[168];
  format(string, sizeof(string), "SELECT * FROM `users` WHERE `Name` = '%s' AND `Password` = md5('%s') ORDER BY `Score` LIMIT 1", pEscName[playerid], Escape_String(oldpass));
  mysql_tquery(GTADM, string, "ChangePassword", "ds", playerid, newpass);
  GetPVarString(playerid, "pPasss", newpass, 34);
  new INI:File2 = INI_Open("Passwords.ini");
  INI_WriteString(File2, pName[playerid], newpass);
  INI_Close(File2);
  return 1;
}

CMD:password(playerid, params[]) return cmd_changepass(playerid, params);
CMD:csvote(playerid, params[]) return cmd_nextcs(playerid, params);

CMD:teleports(playerid)
{
  if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
  ShowTeleports(playerid);
  return 1;
}
CMD:teles(playerid, params[])
{
   return cmd_teleports(playerid);
}

CMD:cmds(playerid)
{
  if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
  ShowCommands(playerid);
  return 1;
}
stock ShowCommands(playerid)
{
  ShowPlayerDialog(playerid, 22773, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM: "WHITE_"Commands list", "Account Commands\nGeneral Commands\nTeleports\nDeathmatch & Minigames Commands\nJob Commands\nGang Commands\nAnimations\nVehicle Commands\nPremium & VIP Commands", "Enter", "Cancel");
}

CMD:job(playerid)
{
  ShowPlayerDialog(playerid, 22775, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM: "WHITE_"Jobs", "Civilian\t\t20000$\nMedic\t\t33000$\nCop\t\t40000$\nHitman\t\t40000$\nMechanic\t45000$\nDealer\t\t45000$\nTerrorist\t50000$\nWhore\t\t40000$\nTrucker\t\t20000$", "Select", "Exit");
  return 1;
}
CMD:scare(playerid, params[])
{
  if(!IsAdmin(playerid, 4)) return SendMsg(playerid, 5);
  new id;
  if(sscanf(params, "u", id)) return SendClientMessage(playerid, RED, "Usage : /scare "GRAY_"<playerid>");
  if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
  if(IsPlayerNPC(id) && !strcmp(pName[id], "Jonny")) return SendNpcPM(playerid, "Thats your mom?!"), GiveMedal(playerid, 24);
  if(IsPlayerNPC(id)) return 0;
  PlayAudioStreamForPlayer(id, "http://dl.dropbox.com/u/52869044/Girl%20Screaming%20In%20Horror%21-cutmp3.net.mp3");
  return 1;
}
CMD:rapeheadset(playerid, params[])
{
  if(!IsAdmin(playerid, 4)) return SendMsg(playerid, 5);
  new id;
  if(sscanf(params, "u", id)) return SendClientMessage(playerid, RED, "Usage : /rapeheadset "GRAY_"<playerid>");
  if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
  if(IsPlayerNPC(id) && !strcmp(pName[id], "Jonny")) return SendNpcPM(playerid, "GTFO"), GiveMedal(playerid, 24);
  if(IsPlayerNPC(id)) return 0;
  PlayAudioStreamForPlayer(id, "http://promodj.com/download/3614014/X_shit_tHe_C0RPorat_on_eXtreMe_mus_c.mp3");
  return 1;
}


CMD:afk(playerid, params[])
{
  if(IsInFight(playerid)) return SendMsg(playerid, 2);
  if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
  if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
  if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
  if(!GetPVarInt(playerid, "GoingToAFK"))
  {
    if(PlayerInfo[playerid][Muted] > 0 || strlen(params) < 2 || strlen(params) > 30) SetPVarString(playerid, "AFKREASON", "No Reason");
    else SetPVarString(playerid, "AFKREASON", params);

    SendClientMessage(playerid, 0x4DBCE4FF, "{70AB5C}You'll be AFK in 10 seconds!");
    SetTimerEx("OnPlayerAFK", 1000*10, false, "i", playerid);
    SetPVarInt(playerid, "GoingToAFK", true);
  }
  return 1;
}

forward OnPlayerAFK(playerid);
public OnPlayerAFK(playerid)
{
 if(!IsDeathMatcher(playerid) && IsPlayerConnected(playerid))
 {
	new msg[128];
	new reason[64];
	GetPVarString(playerid, "AFKREASON", reason, 64);

	//format(msg, sizeof(msg), "{337D65}» AFK « {4DBCE4}%s is now Away From Keyboard (Reason: %s)", pName[playerid], reason);
	format(msg, sizeof(msg), "» AFK « {70AB5C}%s is now Away From Keyboard (Reason: %s)", pName[playerid], reason);
	SendClientMessageToAll(0xA3CC00FF, msg);
//	SendClientMessage(playerid, 0x4DBCE4FF, "Type {B2431B}(/re){4DBCE4} to get back into the game!");
	SetPVarInt(playerid, "AFK", true);
    SetPlayerColor(playerid, 0xFFFFFF00);
	DeletePVar(playerid, "GoingToAFK");
	if(GetPVarInt(playerid, "RACER")) RemoveFromRace(playerid);
	TogglePlayerControllableEx(playerid, 0);
	ApplyAnimation(playerid, "SUNBATHE", "ParkSit_M_IdleC", 4.1, 0, 1, 1, 1, 1);
	ShowPlayerDialog(playerid, 5111, DIALOG_STYLE_MSGBOX, "Away From Keyboard", "You are currently in AFK Mode", "Back", "");
 }
 return 1;
}

CMD:re(playerid)
{

  if(!GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You are not in AFK Mode");
  DeletePVar(playerid, "AFK");
  new msg[128];
  //if(IsAdmin(playerid, 5) && strfind(cmdtext, "/re", true) == -1 && strfind(cmdtext, "/back", true) == -1) |||||||||||||| if(PlayerInfo[playerid][UserID] != 52811
  //if(strfind(cmdtext, "/pm", true) == -1 && strfind(cmdtext, "pass", true) == -1)
// format(msg, sizeof(msg), "» AFK « {70AB5C}%s is back into the game ({B7FF00}/re{70AB5C})", pName[playerid]);
  format(msg, sizeof(msg), "» AFK « {70AB5C}%s is back into the game {B7FF00}(/re){70AB5C}", pName[playerid]);
  SendClientMessageToAll(0xA3CC00FF, msg);
  Paused[playerid] = 0;
  DeletePVar(playerid, "AFKREASON");
  TogglePlayerControllableEx(playerid, 1);
  new gang = PlayerInfo[playerid][pGang];
  if(gang > 0) SetPlayerColor(playerid, PlayerColors[GangInfo[gang][gColor]]);
  else SetPlayerColor(playerid, PlayerColors[random(200)] );
  return 1;
}
CMD:back(playerid)
{
   return cmd_re(playerid);
}


CMD:rules(playerid)
{
  //SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}This command is disabled, check the rules in class selection!");
  new str[800];
  strcat(str, "{FFFFFF}- No cheating.\n- Dont spam the chat!\n- Respect players.\n- Respect admins or ban.\n- No drive by and car parking.\n- No advertising!\n- No teaming in DM's.");
  strcat(str, "\n{FFFFFF}- No gang wars on roofs / in water!\n- No insulting or flaming.\n- No medal / score or other farming.\n- No scamming, play fair.");
  strcat(str, "\n{FFFFFF}- No heli killing.\n- No death evading.\n- No spawn killing.\n- Don't fight / shoot outside the turf in gangwars.\n- Don't interfere in gangwars.");
  strcat(str, "\n{FFFFFF}- Use {0088FF}/report {FFFFFF}to report rulebreakers.");
  strcat(str, "\n{FFFFFF}- Rule-breaking = {E62525}Ban{FFFFFF}.");
  ShowPlayerDialog(playerid, 87891, DIALOG_STYLE_MSGBOX, ""LIGHTYELLOW_"GTADM "WHITE_"- Rules", str, "Ok", "");
/*
  if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
  ShowRules(playerid, 8);
*/
  GiveMedal(playerid, 28);
  return 1;
}


CMD:setnews(playerid, params[])
{
  if(GetPVarInt(playerid, "AFK"))return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You can't use this command in AFK Mode"), 0;

  if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
  if(!IsAdmin(playerid, 5)) return SendMsg(playerid, 5);
  new str[128], newsstr[128];
  if(sscanf(params, "s[128]", str)) return SendClientMessage(playerid, RED, "Usage : /setnews "GRAY_"<news text>");

  format(newsstr, sizeof(newsstr), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s:~w~ %s", str);
  TextDrawSetStringEX(ScreenTXDS[7], newsstr);
  return 1;

}
CMD:updatenews(playerid)
{
  if(!IsAdmin(playerid, 5)) return SendMsg(playerid, 5);
  UpdateNews();
  return 1;
}
CMD:acmds(playerid)
{
  if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
  if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
  if(!IsAdmin(playerid, 1) && PlayerInfo[playerid][pRaceAdmin] == 0 && PlayerInfo[playerid][pCwAdmin] == 0) return SendMsg(playerid, 5);
  ShowPlayerDialog(playerid, 22774, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM - "WHITE_"Admin Commands", "Race admin\nParkour admin\nClan war admin\nAdmin Level 1\nAdmin Level 2\nAdmin Level 3\nAdmin Level 4\nAdmin Level 5\nAdmin Level 6\nAdmin Level 1337", "Go", "Exit");
  return 1;
}

CMD:credits(playerid)
{
  if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
  if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
  ShowPlayerDialog(playerid, 8540, DIALOG_STYLE_MSGBOX, ""LIGHTYELLOW_"GTADM - "WHITE_"Credits", "{FF5500}GTADM {F0A078}Grand Theft Auto Deathmatch - {F0D878}Freeroam server since 2012\n\n{A3A3A3}Credits goes to:\n {A3A3A3} {FFFFFF}RoNz {A3A3A3}- Server owner and Scripter.\n {A3A3A3} GTADM Staff and admins.\n {A3A3A3} {A3A3A3}GTADM Community - www.gtadm.com.\n\n {A3A3A3} Incognito for object streamer.\n {A3A3A3} BlueG for MySQL plugin.\n {A3A3A3} Y-Less for sscanf plugin.", "Thanks", "Exit");
  return 1;
}
CMD:info(playerid)
{
  ShowPlayerDialog(playerid, 9777, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM - "WHITE_"What do you want to do?", ""BLUE_"Check Help\n"GREEN_"Check Commands\n"LIGHTYELLOW_"Check Teleports\n"LIGHTRED_"Check Minigames\n"YELLOW2_"Visit us at www.gtadm.com!\n"YELLOW_"Type /info to open this box at any time", "Select", "Exit" );
  return 1;
}
CMD:help(playerid)
{
  if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
  if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
  ShowPlayerDialog(playerid, 8544, DIALOG_STYLE_MSGBOX, ""GRAY_"Help Center", ""ORANGE_"Welcome to GTADM help center\n\n"WHITE_"Here you can find all you need to know about our server\n\n"GRAY_"Catalog\n"WHITE_"1.Basic Things\n2.Job Help\n3.Money Help\n4.Minigames & score\n5.Houses & Vehicles\n6.Properties\n7. Premium\n8.Commands List", "Next", "Exit");
  return 1;
}
CMD:leavemealone(playerid, params[])
{
	new name[24];
	if(!IsAdmin(playerid, 5)) return 0;
	if(sscanf(params, "s[24]", name)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}"RED2_""RED_"» Error « {BABABA}"RED_" /leavemealone <new name>");

    if(!IsValidChars(name)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You have typed invalid characters");
    if((GetPVarInt(playerid, "LOGGED")) == 2) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be registered");
	SetPVarInt(playerid, "HiddenEX", true);
    new string[128];
    format(string, sizeof(string), "SELECT * FROM `users` WHERE `Name` = '%s' ORDER BY `Score` LIMIT 1", Escape_Name(name));
    mysql_tquery(GTADM, string, "SetName", "dds", playerid, playerid, name);
    Destroyp3D(playerid);
    SetPlayerColor( playerid, PlayerColors[random(200)] );

	return 1;
}
CMD:fuckmeoff(playerid)
{
	if(!IsAdmin(playerid, 5)) return 0;
	if(!GetPVarInt(playerid, "Hidden")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You are not in hidden mode!");
	new name[24];
	DeletePVar(playerid, "HiddenEX");
	GetPVarString(playerid, "HiddenName", name, 24);
	new str[128];

	format(str, sizeof(str), "{F81414}<> {3399ff}%s (%d) {ACACAC}has left the server {FFAF00}[%d/%d] {ACACAC}(Leaving)", pName[playerid], playerid, Iter_Count(Player), pmax), SendClientMessageToAll(GRAY, str);
	SetTimerEx("ComeBack", 3000, false, "i", playerid);

	if(strlen(name))
	{
    	SetPVarInt(playerid, "HiddenEY", true);
  	    new string[128];
     	format(string, sizeof(string), "SELECT * FROM `users` WHERE `Name` = '%s' ORDER BY `Score` LIMIT 1", Escape_Name(name));
        mysql_tquery(GTADM, string, "SetName", "dds", playerid, playerid, name);
	}
	DeletePVar(playerid, "Hidden");
    Createp3D(playerid);
    new gang = PlayerInfo[playerid][pGang];
    if(gang > 0) SetPlayerColor(playerid, PlayerColors[GangInfo[gang][gColor]]);
    else SetPlayerColor(playerid, PlayerColors[random(200)] );
	return 1;
}
CMD:admins(playerid)
{
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    new str[1500], str2[1500];
    foreach(new i : Player)
    {
            if(IsAdmin(i, 10) && !GetPVarInt(i, "Hidden") && !GetPVarInt(i, "HideMeBitch") && HFA[i] == 0)
			{
			   format(str, sizeof(str), "%s"LIGHTYELLOW_"%30s\t\t"LIGHTBLUE_"Level: "GRAY_"%4d\n"LIGHTYELLOW_"", str, pName[i], 1337);
			}
			else if(PlayerInfo[i][pAdmin] > 0 && !GetPVarInt(i, "Hidden") && !GetPVarInt(i, "HideMeBitch") && HFA[i] == 0)
			{
			   format(str, sizeof(str), ""LIGHTYELLOW_"%s%30s\t\t"LIGHTBLUE_"Level: "GRAY_"%4d\n"LIGHTYELLOW_"", str, pName[i], PlayerInfo[i][pAdmin]);
			}
    }
	format(str2, sizeof(str2), ""LIGHTYELLOW_"%30s\t\t"LIGHTBLUE_"Level: "GRAY_"%4d\n%s", "Jonny", 1337, str);
	format(str2, sizeof(str2), "{ABFF85}Admins Online:\n\n{255F17}Total of {6EB1FF}%d {255F17}Admins Online.\n{E62525}Total of {6EB1FF}%d {E62525}Admins AFK.\n\n"LIGHTYELLOW_"%s\n"LIGHTYELLOW_"", CountOnlineAdmins(), CountAFKAdmins(), str2, str);
    ShowPlayerDialog(playerid, 945854, DIALOG_STYLE_MSGBOX, ""LIGHTYELLOW_"GTADM "WHITE_"- Admins", str2, "Ok", "");
    return 1;
}
CMD:muted(playerid) return cmd_stfulist(playerid);
CMD:stfulist(playerid)
{
    if(!IsAdmin(playerid, 1)) return SendMsg(playerid, 5);
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    new str[1425];
    //new str2[256];
    new c;
    foreach(new i : Player)
    {
        if(PlayerInfo[i][Muted] > 0)
		{
          // format(str, sizeof(str), "{ABFF85}Muted Players:\n%s\n", str);
		   format(str, sizeof(str), ""LIGHTYELLOW_"%s\n%s - %d Seconds", str, pName[i], PlayerInfo[i][Muted]);
		   c++;
		}
    }
	if(c==0) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}There are no muted players");
    else ShowPlayerDialog(playerid, 945854, DIALOG_STYLE_MSGBOX, "STFU List", str, "Exit", "");
    return 1;
}
CMD:jailed(playerid)
{
    if(!IsAdmin(playerid, 1)) return SendMsg(playerid, 5);
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    new str[1225];
    //new str2[256];
    new c;
    foreach(new i : Player)
    {
        if(PlayerInfo[i][Jailed] > 0)
		{
           //format(str, sizeof(str), "{ABFF85}Jailed Players:\n%s\n", str);
		   format(str, sizeof(str), ""LIGHTYELLOW_"%s\n%s - %d Seconds", str, pName[i], PlayerInfo[i][Jailed]);
		   c++;
		}
    }
	if(c==0) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}There are no jailed players");
    else ShowPlayerDialog(playerid, 945854, DIALOG_STYLE_MSGBOX, "Jailed Players", str, "Exit", "");
    return 1;
}

CMD:raceadmins(playerid)
{
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    new str[1225];
    new str2[1225];
    new count=0;
    /*foreach(new i : Player)
    {
            if(PlayerInfo[i][pRaceAdmin] > 0)
			{
               format(str, sizeof(str), "%s"LIGHTYELLOW_"%30s\n", str, pName[i]);
			   format(str, sizeof(str), "{ABFF85}Online Race Admins:"LIGHTYELLOW_"\n\n%s"LIGHTYELLOW_"\n", str);
			   count++;
			}
    }*/
    foreach(new i : Player)
    {
            if(IsAdmin(i, 10) && !GetPVarInt(i, "Hidden") && !GetPVarInt(i, "HideMeBitch") && HFA[i] == 0)
			{
			   format(str, sizeof(str), "%s"LIGHTYELLOW_"%30s\n"LIGHTYELLOW_"", str, pName[i]);
			   count++;
			}
			else if(PlayerInfo[i][pRaceAdmin] > 0 && !GetPVarInt(i, "Hidden") && !GetPVarInt(i, "HideMeBitch") && HFA[i] == 0)
			{
			   format(str, sizeof(str), ""LIGHTYELLOW_"%s%30s\n"LIGHTYELLOW_"", str, pName[i], PlayerInfo[i][pRaceAdmin]);
			   count++;
			}
    }
	format(str2, sizeof(str2), ""LIGHTYELLOW_"%30s\n%s", "Jonny", str);
	format(str2, sizeof(str2), "{ABFF85}Race Admins Online:\n\n"LIGHTYELLOW_"%s\n"LIGHTYELLOW_"", str2, str);
    if(count == 0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}There are no race admins online");
    ShowPlayerDialog(playerid, 945854, DIALOG_STYLE_MSGBOX, "Race Admins", str2, "Ok", "");
    return 1;
}
CMD:parkouradmins(playerid)
{
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    new str[1225];
    new str2[1225];
    new count=0;
    /*foreach(new i : Player)
    {
            if(PlayerInfo[i][pOurAdmin] > 0)
			{
			   format(str, sizeof(str), "%s"LIGHTYELLOW_"%30s\n", str, pName[i]);
			   format(str, sizeof(str), "{ABFF85}Online Parkour Admins:"LIGHTYELLOW_"\n\n%s"LIGHTYELLOW_"\n", str);
			   count++;
			}
			   //	format(str2, sizeof(str2), ""LIGHTYELLOW_"%30s\t"LIGHTBLUE_"Level: "GRAY_"%4d\n%s", "Jonny", 1337, str);
	                //format(str2, sizeof(str2), "{ABFF85}Admins Online:\n\n{255F17}Total of {6EB1FF}%d {255F17}Admins Online.\n{E62525}Total of {6EB1FF}%d {E62525}Admins AFK.\n\n"LIGHTYELLOW_"%s\n"LIGHTYELLOW_"", CountOnlineAdmins(), CountAFKAdmins(), str2, str);
    }*/
    foreach(new i : Player)
    {
            if(IsAdmin(i, 10) && !GetPVarInt(i, "Hidden") && !GetPVarInt(i, "HideMeBitch") && HFA[i] == 0)
			{
			   format(str, sizeof(str), "%s"LIGHTYELLOW_"%30s\n"LIGHTYELLOW_"", str, pName[i]);
			   count++;
			}
			else if(PlayerInfo[i][pOurAdmin] > 0 && !GetPVarInt(i, "Hidden") && !GetPVarInt(i, "HideMeBitch") && HFA[i] == 0)
			{
			   format(str, sizeof(str), ""LIGHTYELLOW_"%s%30s\n"LIGHTYELLOW_"", str, pName[i], PlayerInfo[i][pOurAdmin]);
			   count++;
			}
    }
	format(str2, sizeof(str2), ""LIGHTYELLOW_"%30s\n%s", "Jonny", str);
	format(str2, sizeof(str2), "{ABFF85}Parkour Admins Online:\n\n"LIGHTYELLOW_"%s\n"LIGHTYELLOW_"", str2, str);
    if(count == 0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}There are no parkour admins online");
    ShowPlayerDialog(playerid, 945854, DIALOG_STYLE_MSGBOX, "Parkour Admins", str2, "Ok", "");
    return 1;
}
     /*       if(IsPlayerAdmin(i) && !GetPVarInt(i, "Hidden"))
			{
			   format(str, sizeof(str), "%s"LIGHTYELLOW_"%30s\t"LIGHTBLUE_"Level: "GRAY_"%4d\n"LIGHTYELLOW_"", str, pName[i], 1337);
			}
			else if(PlayerInfo[i][pAdmin] > 0 && !GetPVarInt(i, "Hidden"))
			{
			   format(str, sizeof(str), ""LIGHTYELLOW_"%s%30s\t"LIGHTBLUE_"Level: "GRAY_"%4d\n"LIGHTYELLOW_"", str, pName[i], PlayerInfo[i][pAdmin]);
			}
    }
    //format(str2, sizeof(str2), "{ABFF85}Admins Online:\n\n{255F17}Total of {6EB1FF}%d {255F17}Admins Online.\n{E62525}Total of {6EB1FF}%d {E62525}Admins AFK.", str2, CountOnlineAdmins(), CountAFKAdmins());
//	format(str3, sizeof(str3), "{ABFF85}Admins Online:\n\n{255F17}Total of {6EB1FF}%d {255F17}Admins Online.\n{E62525}Total of {6EB1FF}%d {E62525}Admins AFK.", CountOnlineAdmins(), CountAFKAdmins(), str);
	format(str2, sizeof(str2), ""LIGHTYELLOW_"%30s\t"LIGHTBLUE_"Level: "GRAY_"%4d\n%s", "Jonny", 1337, str);
*/
CMD:cwadmins(playerid)
{
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    new str[1225];
    new str2[1225];
//    new str2[1225];
   // new str2[256];
    new count=0;
    foreach(new i : Player)
    {
            if(IsAdmin(i, 10) && !GetPVarInt(i, "Hidden") && !GetPVarInt(i, "HideMeBitch") && HFA[i] == 0)
			{
			   format(str, sizeof(str), "%s"LIGHTYELLOW_"%30s\n"LIGHTYELLOW_"", str, pName[i]);
			}
			else if(PlayerInfo[i][pCwAdmin] > 0 && !GetPVarInt(i, "Hidden") && !GetPVarInt(i, "HideMeBitch") && HFA[i] == 0)
			{
			   format(str, sizeof(str), ""LIGHTYELLOW_"%s%30s\n"LIGHTYELLOW_"", str, pName[i], PlayerInfo[i][pCwAdmin]);
			   count++;
			}
    }
	format(str2, sizeof(str2), ""LIGHTYELLOW_"%30s\n%s", "Jonny", str);
	format(str2, sizeof(str2), "{ABFF85}CW Admins Online:\n\n"LIGHTYELLOW_"%s\n"LIGHTYELLOW_"", str2, str);
    if(count == 0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}There are no cw admins online");
    ShowPlayerDialog(playerid, 945854, DIALOG_STYLE_MSGBOX, "Cw Admins", str2, "Ok", "");
    return 1;
}

CMD:rtest(playerid)
{
  if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
  if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
  if(!IsAdmin(playerid, 5)) return SendMsg(playerid, 5);
  SendClientMessageToAll(AdminInfo, "HAHAHAHAHAHAHAHAHAHAHA");
  return 1;
}

CMD:lockdms(playerid)
{
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(!IsAdmin(playerid, 5)) return SendMsg(playerid, 5);
	LockDms = 1;
	new str[128];
	format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}Admin %s has locked the deathmatches", gAname(playerid));
    SendClientMessageToAll(AdminInfo, str);
    return 1;
}

CMD:unlockdms(playerid)
{
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(!IsAdmin(playerid, 5)) return SendMsg(playerid, 5);
	LockDms = 0;
	new str[128];
	format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}Admin %s has unlocked the deathmatches", gAname(playerid));
    SendClientMessageToAll(AdminInfo, str);
    return 1;
}
CMD:dmq(playerid)
{
    return cmd_exit(playerid);
}
CMD:cancel(playerid)
{
    return cmd_exit(playerid);
}

CMD:exit(playerid)
{
    if(IsInFight(playerid)) return SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You cant exit during a fight.");
    if(GetPVarInt(playerid, "Sync")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this cmd while being synced!");
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(!GetPVarInt(playerid, "MissionProgress") && !IsDeathMatcher(playerid)) return SendMsg(playerid, 0);
    else
    {
       TickCount[playerid][Fight]=0;
       if(GetPVarInt(playerid, "Trucker")) SendInfoText(playerid, 3000, "~r~Mission failed"), EndTMission(playerid);//GameTextForPlayer(playerid, "~r~Mission Failed", 3000, 4), EndTMission(playerid);
  	   if(GetPVarInt(playerid, "MissionProgress") > 0)
  	   {
   	     SendInfoText(playerid, 4000, "~r~Mission Failed");
   	     DeletePVar(playerid, "MissionProgress");
         new str[128];
         format(str, sizeof(str), "{6F6AA6}» Mission « {294FC2}%s has left the Mission {6F6AA6}(/Exit)", pName[playerid]);
         SendClientMessageToAll(LIGHTBLUE, str);
   	     PlayerTextDrawHide(playerid, pMissionTD[playerid]);
   	     TogglePlayerAllDynamicRaceCPs(playerid, true);
		 SetPlayerVirtualWorldEX(playerid, 0);
         for(new ad=0; ad<sizeof(MissionPickup); ad++) Streamer_RemoveArrayData(STREAMER_TYPE_PICKUP , MissionPickup[ad], E_STREAMER_PLAYER_ID, playerid);
         for(new ad=0; ad<sizeof(MissionCP); ad++) Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[ad], E_STREAMER_PLAYER_ID, playerid), TogglePlayerDynamicCP(playerid, MissionCP[ad], false);
	   	 for(new ad=0; ad<28; ad++) DestroyPlayerObject(playerid, MissionObjects[playerid][ad]);
  	   }
	   if(GetPVarInt(playerid, "instunt"))
	   {
		 DeletePVar(playerid, "instunt");
		 LoadPlayerCoords(playerid);

	   }
	   if(playerid == DuelInfo[player1] || playerid == DuelInfo[player2])
	   {
		   if(GetPVarInt(playerid, "cantexitduel")) return SendWarning(playerid, "You cant exit duel during the countdown!");
	       new str[128];
   	       format(str, sizeof(str), "» Duel « "fOUT_"%s has left the duel "fOUT2_"(/Exit)", pName[playerid]);
  	       SendClientMessageToAll(fOUT2, str);
  	       ResetPlayerWeaponsEX(playerid);
//  	       RemoveFromDuel(playerid, 1);
  	       if(DuelInfo[stat]==2)
  	       {
   	        if(playerid == DuelInfo[player1]) EndDuel(DuelInfo[player2], DuelInfo[player1], 1);
   	        else if(playerid == DuelInfo[player2]) EndDuel(DuelInfo[player1], DuelInfo[player2], 1);
   	       }
  	       else
  	       {
  	          RemoveFromDuel(playerid, 1);
  	          DuelInfo[stat]=0, DuelInfo[player1]=-225, DuelInfo[player2]=-1;
  	       }

	   }

	   if(GetPVarInt(playerid, "CAM"))
	   {
  		 DeletePVar(playerid, "CAM");
		 DeletePVar(playerid, "GragageColor");
		 CancelSelectTextDraw(playerid);
		 SetCameraBehindPlayer(playerid);
		 StopAudioStreamForPlayer(playerid);
		 for(new x=0; x<21; x++)
		 {
		     PlayerTextDrawHide(playerid, GarageTD[playerid][x]);
		 }
	   }
  	   if(GetPVarInt(playerid, "RACER") && RaceStarted ==1)
  	   {
  	      new str[128];
  	      format(str, sizeof(str), "{BAAB34}» Race «{F2EE05} %s has quit the race {BAAB34}(/Exit)", pName[playerid]);
   	      SendClientMessageToAll(0xF2EE05FF, str);
   	      RemoveFromRace(playerid);
  	   }
       if(STUNTING[playerid] > 0) STUNTING[playerid]=0, PlayerTextDrawHide(playerid, pInfoTD[playerid]), SendClientMessage(playerid, RED, "- The Stunt Race has been cancelled");

	   if(GetPVarInt(playerid, "InTic"))
	   {
         if ((GetTickCount() - TickCount[playerid][TTTJoin])  < 60*1000 && PlayerInfo[playerid][pScore] > 1000) return SendClientMessage( playerid, RED, ""RED_"» Error « {BABABA}You must spend atleast 1 minute in Tic-Tac-Toe before leaving it!" );
         DeletePVar(playerid, "InTic");
  		 DeletePVar(TickOP[playerid], "InTic");
		 TogglePlayerControllable2(playerid, 1);
		 TogglePlayerControllable2(TickOP[playerid], 1);
	 	 for(new x=0; x<17; x++)
		 {
			 PlayerTextDrawHide(playerid, TickTD[playerid][x]);
			 PlayerTextDrawHide(TickOP[playerid], TickTD[TickOP[playerid]][x]);
		 }
		 TickTurn[playerid]=0;
		 TickTurn[TickOP[playerid]]=0;
		 CancelSelectTextDraw(playerid);
		 CancelSelectTextDraw(TickOP[playerid]);
		 SendClientMessage(TickOP[playerid], -1, "Your opponent has quit the game!");
	     if(TickRound[playerid] > 1 && TickWon[TickOP[playerid]] > TickWon[playerid])
	     {
			GivePlayerMoneyEX(TickOP[playerid], 10000);
			GivePlayerMoneyEX(playerid, -1*10000);
			ScoreTDupdate(playerid, 1);
	     }
	     DestroyTikTD(TickOP[playerid]);
	     DestroyTikTD(playerid);
	   }

	   if(InDive[playerid] > 0)
	   {
            InDive[playerid]=0;
            SetPlayerVirtualWorldEX(playerid, 0);
            ResetPlayerWeaponsEX(playerid);
			LoadPlayerCoords(playerid);
  	        new str[128];
  	        format(str, sizeof(str), "{4A9EC2}» Diving «{294FC2} %s has left the Sky Diving Challenge {4A9EC2}(/Exit)", pName[playerid]);
 	        SendClientMessageToAll(0xF2EE05FF, str);
	   }
	   else if(InCanon[playerid] > 0)
	   {
          InCanon[playerid]=0;
  	      new str[128];
  	      format(str, sizeof(str), "{4A9EC2}» Cannon «{294FC2} %s has left the Cannon Challenge {4A9EC2}(/Exit)", pName[playerid]);
   	      SendClientMessageToAll(0xF2EE05FF, str);
		  SetPlayerVirtualWorldEX(playerid, 0);
		  LoadPlayerCoords(playerid);
		  HidePlayerMenu(playerid);
		  TogglePlayerControllable2(playerid, 1);
		  SetCameraBehindPlayer(playerid);
		  if(IsPlayerInAnyVehicle(playerid)) DestroyVehicleEX(GetPlayerVehicleID(playerid));
	   }

	   else if(Iter_Contains(InSumo, playerid))
	   {

         	new ba=GetTickCount() - TickCount[playerid][SumoJoin], sumo = Iter_Count(InSumo);
            if (sumo > 1 && ba  < 1000*30*1 && ba > 0) return SendClientMessage( playerid, RED, ""RED_"» Error « {BABABA}You must spend atleast 30 seconds in the sumo before leaving it!" );
			{
				new dstring[144];
				format(dstring, sizeof(dstring), "{70DB72}» Sumo «{FEC0F2} %s {BDDDFB}has left the Sumo {FEC0F2}(/Exit)", pName[playerid]);
				SendClientMessageToAll(GRAY, dstring);
				RemoveFromSumo(playerid);

				foreach(new i : InSumo)
				{
				  if(SumoSpec[i] == 1 && SumoSpecID[i]==playerid)
				  {
				   sumoshow(i);
				  }
				}
			}
	   }

       else if(GetPVarInt(playerid, "InHay"))
       {
			new str[128];
			format(str, sizeof(str), "» Hay Game « {FF6EC0}%s has left the Hay Game {F86EFF}(/Exit)", pName[playerid]);
			SendClientMessageToAll(0xF86EFFFF, str);
			DeletePVar(playerid, "InHay");
			//TextDrawHideForPlayer(playerid, Hwaiting);
			LoadPlayerCoords(playerid);
			SetPlayerVirtualWorldEX(playerid, 0);
			new count=CountHay();
			if(count == 0)
			{
		       KillTimer(haygametimer);
	           KillTimer(haygametimer2);
	           haygametimer=-1;
	           //TextDrawHideForPlayer(playerid, Hwaiting);
	           haygametimer2=-1;
	           haygamestarted = 0;
        	   //foreach(new i : Player) TextDrawHideForPlayer(i, Hwaiting);
			   SetDynamicObjectPos(MovingHay[0], -1033.86, 814.61, 78.30);
			   SetDynamicObjectPos(MovingHay2[18], -380.20999, 618.88000, 1002.75000);
		       SetDynamicObjectPos(MovingHay3[13], 315.42001, -1185.25000, 1002.78003);
		   	   SetDynamicObjectRot(MovingHay3[13], 0.0, 0.0, 0.0);

               SendClientMessageToAll(0xF86EFFFF, "» Hay Game «{FF6EC0} The Hay Game has been cancelled {F86EFF}(Not enough players)");
			}

       }
       #if defined USE_POOL

	   else if(GetPVarInt(playerid, "PoolWatch"))
       {
		SetCameraBehindPlayer(playerid);
		LoadPlayerCoords(playerid);
		DeletePVar(playerid, "PoolWatch");
		TextDrawHideForPlayer(playerid, PoolTD1);
		TextDrawHideForPlayer(playerid, PoolTD2);
		TextDrawHideForPlayer(playerid, PoolTD3);
        TogglePlayerControllable2(playerid, 1);
       }
       else if(GetPVarInt(playerid, "poolguy1") || GetPVarInt(playerid, "poolguy2"))
       {
         if ((GetTickCount() - TickCount[playerid][PoolJoin])  < 60*1000 && PlayerInfo[playerid][pScore] > 1000) return SendClientMessage( playerid, RED, ""RED_"» Error « {BABABA}You must spend atleast 1 minute in pool before leaving it!" );
		 RemoveFromPool(playerid);
         new str[128];
         format(str, sizeof(str), "{FF8C00}» Pool «{7FBA00} %s has left the Pool {FF8C00}(/Exit)", pName[playerid]);
         SendClientMessageToAll(-1, str);
         if(poolmode == 2)
         {
           if(playerid == poolguy1)
		   {
			 if(IsPlayerConnected(poolguy2))
			 {
				 format(str, sizeof(str), "{FF8C00}» Pool «{7FBA00} %s has won the pool against %s.", pName[poolguy2], pName[poolguy1]);
				 SendClientMessageToAll(-1, str);
				 RemoveFromPool(poolguy2);
				 PoolWinner(poolguy2);

			 }
			}
			else if(playerid == poolguy2)
			{
			 if(IsPlayerConnected(poolguy1))
			 {
				 format(str, sizeof(str), "{FF8C00}» Pool «{7FBA00} %s has won the pool against %s.", pName[poolguy1], pName[poolguy2]);
				 SendClientMessageToAll(-1, str);
				 RemoveFromPool(poolguy1);
				 PoolWinner(poolguy1);
			 }
			}
		 }
		 poolmode=0;
       }
       #endif
       else if(GetPVarInt(playerid, "InMG"))
       {
			new str[128];
			format(str, sizeof(str), "{8F6FA8}» Money Game «{6E8CC4} %s has left the Money Game {8F6FA8}(/Exit)", pName[playerid]);
			SendClientMessageToAll(0xF86EFFFF, str);
			DeletePVar(playerid, "InMG");
			//TextDrawHideForPlayer(playerid, Mwaiting);
			EventMoneyBags[playerid] = 0;
			PlayerTextDrawHide(playerid, pInfoTD[playerid]);
			LoadPlayerCoords(playerid);
			SetPlayerVirtualWorldEX(playerid, 0);
			new count=CountMG();
			if(count == 0)
			{
		       KillTimer(mgtimer);
	           KillTimer(mgtimer2);
	           KillTimer(mgtimer3);
	           mgtimer=-1;
	           mgtimer2=-1;
	           mgtimer3=-1;
	           //TextDrawHideForPlayer(playerid, Mwaiting);
	           mgstarted = 0;
	           SendClientMessageToAll(0xF86EFFFF, "{8F6FA8}» Money Game «{6E8CC4} The Money Game has been cancelled {8F6FA8}(Not enough players)");
			   EndMG();
			   //foreach(new i : Player) TextDrawHideForPlayer(i, Mwaiting);
			}

       }

	   else if(GetPVarInt(playerid, "CS"))
	   {
		 Remove_From_CS(playerid);
	   	 new str[128];
		 format(str, sizeof(str), "» CS « {D47098}%s has left Counter Strike {FF0D6E}(/Exit)", pName[playerid]);
		 SendClientMessageToAll(0xFF0D6EFF, str);
		 csteam1[playerid]=0;
		 csteam2[playerid]=0;
		 SetPlayerTeam(playerid, NO_TEAM);
	   }
	   else if(GetPVarInt(playerid, "pOur"))
	   {
	    RemoveFrompOur(playerid, 1);
    	SetPlayerVirtualWorldEX(playerid, 0);
	   }/*
	   else if(GetPVarInt(playerid, "inflappy"))//flappycarshit
       {
         SetPlayerVirtualWorldEX(playerid, 0);
    	 ResetPlayerWeaponsEX(playerid);
    	 LoadPlayerCoords(playerid);
    	 new str[128];
    	 format(str, sizeof(str), "{F4BBFF}» Flappy Car « {D19FE8}%s has left the Flappy Car Challenge {F4BBFF}(/Exit)", pName[playerid]);
    	 SendClientMessageToAll(0xF2EE05FF, str);
    	 DeletePVar(playerid, "inflappy");
    	 DestroyVehicle(GetPlayerVehicleID(playerid));
    	 if(IsPlayerInAnyVehicle(playerid)) RemovePlayerFromVehicle(playerid);
    	 new countzz=CountFC();
    	 if(countzz == 0)
    	 {
      	   for(new v = 1; v != MAX_VEHICLES; v++)
      	   {
	     	 new wa=GetVehicleVirtualWorld(v);
         	 if(wa == 66699 || wa == 66700 || wa == 66701 || wa == 66702 || wa == 66703 || wa == 66704 && GetVehicleModel(v) == 441)
         	 {
           	   DestroyVehicle(v);
         	 }
   		   }
         }
       }
	   else if(GetPVarInt(playerid, "DD"))
	   {
        //LoadPlayerCoords(playerid);
		 Remove_From_DD(playerid);
	   }
	   else if(GetPVarInt(playerid, "CO"))
	   {
         //LoadPlayerCoords(playerid);
		 Remove_From_CO(playerid);
	   }*/
       else if(GetPVarInt(playerid, "InDerby"))
       {
         Remove_From_Derby(playerid, 2);
         LoadPlayerCoords(playerid);
       }
       else if(GetPVarInt(playerid, "inCTF"))
       {
         Remove_From_CTF(playerid, 1);
       }
	   else if(Footballer[playerid] > 0)
	   {
       	 LoadPlayerCoords(playerid);
		 for(new f=0; f<8; f++) PlayerTextDrawHide(playerid, DMpTD[playerid][f]);

       	 SetPlayerVirtualWorldEX(playerid, 0);
       	 Footballer[playerid]=0;
       	 SetPlayerSkin(playerid, SavedSKIN[playerid]);
       	 SetCameraBehindPlayer(playerid);
       	 if(CountFootballers() == 0)
       	 {
            KillTimer(FootballStartTimer);
			KillTimer(FootballStartTimer2);
		    FootballStartTimer=-1;
		    FootballStartTimer2=-1;
			EndFootBall();
       	 }
       	 new str[128];
		 format(str, sizeof(str), "» Football « {1EB5E3}%s has left the Football {1189AD}(/Exit)", pName[playerid]);
		 SendClientMessageToAll(0x1189ADFF, str);
  // TextDrawHideForPlayer(playerid, Fwaiting);
       	 new gang = PlayerInfo[playerid][pGang];
	     if(gang > 0) SetPlayerColor(playerid, PlayerColors[GangInfo[gang][gColor]]);
	     else SetPlayerColor(playerid, PlayerColors[random(200)] );

	   }
#if defined USEDRIFT

       else if(GetPVarInt(playerid, "Drifter"))
       {
          new str[128];
	      if((GetPVarInt(playerid, "Drifter")) == 2)
		  {
            Iter_Remove(Drifter, playerid);
			TextDrawHideForPlayer(playerid, pDriftTD[playerid][2]);
			TextDrawHideForPlayer(playerid, pDriftTD[playerid][3]);
			TextDrawHideForPlayer(playerid, pDriftTD[playerid][4]);
			TextDrawHideForPlayer(playerid, pDriftTD[playerid][0]);
			format(str, sizeof(str), ""CTC1_"» Drift « "CTC2_"%s has left the drift "CTC1_"(/Exit)", pName[playerid]);
			DeletePVar(playerid, "Drifter");
			TogglePlayerControllable2(playerid, 1);
			SetCameraBehindPlayer(playerid);

		  }

		  SendClientMessageToAll(LIME, str);
          Remove_From_Drift(playerid);

       }

#endif
       else if(GetPVarInt(playerid, "WW"))
       {
		  ResetPlayerWeaponsEX(playerid);
          LoadPlayerCoords(playerid);
          new str[128];
	      format(str, sizeof(str), "{FF0000}» WW « {8B0000}%s has left the Walkies World {FF0000}(/Exit)", pName[playerid]);
          SendClientMessageToAll(YELLOW2, str);
          DeletePVar(playerid, "WW");
          for(new x=0; x<8; x++) PlayerTextDrawHide(playerid, DMpTD[playerid][x]);
          DeletePVar(playerid, "pDMKills");
          DeletePVar(playerid, "pDMDeaths");
          DeletePVar(playerid, "pDMKillStreak");
       }
       else if(GetPVarInt(playerid, "WW2"))
       {
		  ResetPlayerWeaponsEX(playerid);
          LoadPlayerCoords(playerid);
          new str[128];
	      format(str, sizeof(str), "{FF0000}» WW2 « {8B0000}%s has left the Walkies World {FF0000}(/Exit)", pName[playerid]);
          SendClientMessageToAll(YELLOW2, str);
          DeletePVar(playerid, "WW2");
          for(new x=0; x<8; x++) PlayerTextDrawHide(playerid, DMpTD[playerid][x]);
          DeletePVar(playerid, "pDMKills");
          DeletePVar(playerid, "pDMDeaths");
          DeletePVar(playerid, "pDMKillStreak");
       }
       else if(InCW[playerid] > 0)
       {
		 ResetPlayerWeaponsEX(playerid);
         LoadPlayerCoords(playerid);
 		 InCW[playerid] =0;
		 SetPlayerVirtualWorldEX(playerid, 0);
         for(new x=0; x<8; x++) PlayerTextDrawHide(playerid, DMpTD[playerid][x]);

	     if(HideShit[playerid] == 0)
		 {
			  new allow=1;
			  if(PlayerInfo[playerid][pGang] > 0)
			  {
				if(inGw[PlayerInfo[playerid][pGang]] > 0) allow=0;
			  }
//			  if(ClockOn[playerid] == 0 && allow==1)
			  if(allow==1)
			  {
                ShowScreenTXD(playerid);

			  }
		 }

         new msg[128];
         format(msg, sizeof(msg), "{9F00BF}» DoDM «{0050BF} %s has left the DoD Deathmatch {9F00BF}(/Exit) ", pName[playerid]);
         SendClientMessageToAll(0x0070BFFF, msg);
         SetPlayerVirtualWorldEX(playerid, 0);
         InCW[playerid]=0;
         nxsdm[playerid]=0;
         DeletePVar(playerid, "invitedToDoDDM");
         if(PlayerInfo[playerid][pGang] < 0) SetPlayerColor( playerid, PlayerColors[random(200)] );
         else
         {
	        new g = PlayerInfo[playerid][pGang];
            SetPlayerColor(playerid, PlayerColors[GangInfo[g][gColor]]);
         }
		 SetCameraBehindPlayer(playerid);
		 for(new x=0;x<sizeof(EnDCwTD_);x++) TextDrawHideForPlayer(playerid, EnDCwTD_[x]);
		 for(new x=0;x<sizeof(EnDCwTD);x++) TextDrawHideForPlayer(playerid, EnDCwTD[x]);

       }
       else if(GetPVarInt(playerid, "Signed4Lms"))
	   {
	    Remove_From_Lms(playerid, 2);
	   }
       else if( GetPVarInt(playerid, "inFallout"))
       {
        RemoveFromFallout(playerid, 1);
       }
	   else if(GetPVarInt(playerid, "INDM"))
	   {
	   Remove_From_Dm(playerid);
	   }
	   else if(GetPVarInt(playerid, "TDM"))
	   {
	   Remove_From_TDm(playerid);
	   }

       SetPlayerWeather(playerid, ServerWeather);
       if(TeleShowC == 0) SetTeleShow(0, 0);
       else if(TeleShowC == 1) SetTeleShow(1, 0);
       else if(TeleShowC == 2) SetTeleShow(2, 0);
       else if(TeleShowC == 3) SetTeleShow(3, 0);
       else if(TeleShowC == 4) SetTeleShow(4, 0);
       else if(TeleShowC == 5) SetTeleShow(5, 0);
       else if(TeleShowC == 6) SetTeleShow(6, 0);
       else if(TeleShowC == 7) SetTeleShow(7, 0);
       else if(TeleShowC == 8) SetTeleShow(8, 0);
       else if(TeleShowC == 9) SetTeleShow(9, 0);
    }
	return 1;
}


CMD:dmlist(playerid)
{
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(LockDms == 1) return SendMsg(playerid, 6);
    ShowDMDialog(playerid);
    return 1;
}
CMD:minigames(playerid)
{
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    new str[1024];
    strcat(str, "{BA5E3A}/DM\t\tDeathmatches List\n{FFA863}/TDM\t\tTeam Deathmatches List\n{BA3AAB}/Stunt\t\tStunts List\n{1BE06D}/Drift\t\tThe Drift\n{F2FF00}/Race\t\tThe Race\n{BA7C3A}/CS\t\tCounter-Strike\n{3A9EBA}/Fallout\t\tFallout\n{69BA3A}/LMS\t\tLast Man Standing\n{BA5E3A}/Derby\t\tDemolition Derby\n{3ABA6F}/Duel\t\tDuel a player");
    strcat(str, "\n{C7C432}/Football\tPlay Soccer!\n{C73232}/GunGame\tThe GunGame\n{00C2F7}/Dive\t\tSky Diving Challenge\n{E5A2E8}/Cannon\tThe Cannon Challenge\n{FF7AB8}/Parkour\tThe Parkour Race!\n{69BA3A}/CTF\t\tCapture The Flag!\n{BA5E3A}/Sumo\t\tSumo minigame!\n{FF7AB8}/TicTac\t\tTic-Tac-Toe!");
    strcat(str, "\n{12F4B8}/MG\t\tThe Money Game\n{C8F1FA}/Hay\t\tThe Hay Challenge\n{294FC2}/Mission\tComplete the missions!\n{BEBEBE}/Outrun\t\tThe Outrun Challenge\n{00159E}/Trucking\tTrucking Missions!");
	ShowPlayerDialog(playerid, 14567, DIALOG_STYLE_LIST, ""WHITE_"GTADM - "LIGHTYELLOW_"Minigames", str, "Select", "Exit");
	return 1;//\n{FF8C00}/SR\t\tShooting Range!
}
/*
CMD:minigames(playerid)
{
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    new str[1024];
    strcat(str, "{BA5E3A}/DM\t\tDeathmatches List\n{FFA863}/TDM\t\tTeam Deathmatches List\n{BA3AAB}/Stunt\t\tStunts List\n{1BE06D}/Drift\t\tThe Drift\n{F2FF00}/Race\t\tThe Race\n{BA7C3A}/CS\t\tCounter-Strike\n{3A9EBA}/Fallout\t\tFallout\n{69BA3A}/LMS\t\tLast Man Standing\n{BA5E3A}/Derby\t\tDemolition Derby\n{3ABA6F}/Duel\t\tDuel a player");
    strcat(str, "\n{C7C432}/Football\tPlay Soccer!\n{C73232}/GunGame\tThe GunGame\n{00C2F7}/Dive\t\tSky Diving Challenge\n{E5A2E8}/Cannon\tThe Cannon Challenge\n{FF7AB8}/Parkour\tThe Parkour Race!\n{69BA3A}/CTF\t\tCapture The Flag!\n{BA5E3A}/Sumo\t\tSumo minigame!\n{FF7AB8}/TicTac\t\tTic-Tac-Toe!");
    strcat(str, "\n{12F4B8}/MG\t\tThe Money Game\n{C8F1FA}/Hay\t\tThe Hay Challenge\n{294FC2}/Mission\tComplete the missions!\n{BEBEBE}/Outrun\t\tThe Outrun Challenge\n{00159E}/Trucking\tTrucking Missions!");
	//\n{FF00EA}/DD\t\tDisco Dodgebomb\n{168FBFF}/CO\t\tColosseum minigame\n{D19FE8}/FC\t\tFlappy Car minigame");
	ShowPlayerDialog(playerid, 14567, DIALOG_STYLE_LIST, ""WHITE_"GTADM - "LIGHTYELLOW_"Minigames", str, "Select", "Exit");
	return 1;
}
*/
CMD:count(playerid)
{
   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if(CanCountDown[playerid] == 0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use countdown that often");
   if(CountDownRunning == 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Another countdown is already running");

   CanCountDown[playerid]=0;
   CountDownRunning=1;

   new str[128];
   format(str, sizeof(str), "» Countdown « "BLUE_"%s has started the countdown", pName[playerid]);
   SendClientMessageToAll(LIGHTBLUE, str);

   Iter_Clear(countdownin);
   Iter_Add(countdownin, playerid);
   foreach (new i : Player)
   {
       if((IsPlayerInRangeOfPlayer(playerid, i, 20.00)) && (GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid)))
       {
		  Iter_Add(countdownin, i);
       }
   }
   foreach(new i : countdownin)
   {
	  SendInfoText(i, 1000, "~b~~h~~h~~h~CountDown Started");
   }
   SetTimer("CCDown4", 4000, false);
   SetTimer("CCDown3", 3000, false);
   SetTimer("CCDown2", 2000, false);
   SetTimer("CCDown1", 1000, false);
   //SendClientMessage( playerid, RED, ""RED_"» Error « {BABABA}This is being fixed!" );
   return 1;
}
CMD:bf(playerid) return cmd_dm(playerid, "19");

CMD:tdm(playerid, params[])
{
    if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");
	new DmID;
    if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(GetPVarInt(playerid, "MissionProgress") || IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
    if(LockDms == 1) return SendMsg(playerid, 6);
    if(IsInFight(playerid)) return SendMsg(playerid, 2);
    if(aduty[playerid] == 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command while on admin duty.");
	if(sscanf(params, "d", DmID)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}/TDM <1-3>");

 	if(DmID > 3 || DmID < 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}/TDM <1-3>");
 	SavePlayerCoords(playerid);

 	InHouse[playerid] = -255;
	new count1, count2;
	foreach(new i : Player)
 	{
	   if(GetPlayerTeam(i) == 3 && GetPVarInt(i, "TDM") == DmID) count1++;
	   if(GetPlayerTeam(i) == 4 && GetPVarInt(i, "TDM") == DmID) count2++;
 	}
 	if(count1 <= count2) SetPlayerTeam(playerid, 3);
 	else SetPlayerTeam(playerid, 4);

	Send_To_TDm(playerid, DmID);

	new str[128];
	SetPVarInt(playerid, "TDM", DmID);
    SetPlayerArmour(playerid , 0);
    ResetSpawnInfo(playerid);


    format(str, sizeof(str), "{FF0000}» TDM « {8B0000}%s takes part in \"%s\" Team Deathmatch - {FF0000}(/TDM%d) ", pName[playerid], GetPlayerDMName(playerid), DmID);

	foreach(new i : Player) if(!GetPVarInt(i, "TeleportsBlock")) SendClientMessage(i, DmCol1, str);

    SendInfoText(playerid, 3000, "Type ~r~(/Exit) ~w~to leave the deathmatch");


	SetPVarInt(playerid, "pDMKills", 0);
	SetPVarInt(playerid, "pDMDeaths", 0);
	SetPVarInt(playerid, "pDMKillStreak", 0);

	new TD[128];
	format(TD, sizeof(TD), "~b~~h~~h~~h~%s", GetPlayerDMName(playerid));

    PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][7], TD);
    PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][0], "-");
	PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][2], "-");
	PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][6], "-");

	format(TD, sizeof(TD), "~g~Team 1:~g~~h~ %d", TDMScore[DmID-1][0]);
	PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][3], TD);

	format(TD, sizeof(TD), "~r~Team 2:~r~~h~ %d", TDMScore[DmID-1][1]);
	PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][4], TD);

	PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][5], "~p~Ratio:~p~~h~ 0.00");
	PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][1], "~b~Serial Kills:~b~~h~ 0");
    for(new x=0; x<8; x++) PlayerTextDrawShow(playerid, DMpTD[playerid][x]);

	HidePlayerMenu(playerid);
	DisablePlayerRaceCheckpoint(playerid);
    return 1;
}



CMD:dm(playerid, params[])
{
    if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");
	new DmID;
    if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(GetPVarInt(playerid, "MissionProgress") || IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
    if(LockDms == 1) return SendMsg(playerid, 6);
    if(IsInFight(playerid)) return SendMsg(playerid, 2);
    if(aduty[playerid] == 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command while on admin duty.");
	if(sscanf(params, "d", DmID)) return cmd_dmlist(playerid);

 	if(DmID > 20 || DmID < 1) return cmd_dmlist(playerid);
 	SavePlayerCoords(playerid);

 	InHouse[playerid] = -255;
	Send_To_Dm(playerid, DmID);

	new str[128];//128
	SetPVarInt(playerid, "INDM", DmID);
    SetPlayerArmour(playerid , 0);
    ResetSpawnInfo(playerid);

	if(DmID == 18)
	{
		format(str, sizeof(str), "» Gungame « "GUNGAME_"%s has joined the GunGame {D86EFF}(/GunGame)", pName[playerid]);
	    foreach(new i : Player) if(!GetPVarInt(i, "TeleportsBlock")) SendClientMessage(i, GUNGAME, str);
	}
	else if(DmID == 19)
	{
      format(str, sizeof(str), "{FF0000}» BattleField « {8B0000}%s has joined the BattleField {FF0000}(/BF) ", pName[playerid]);
	  foreach(new i : Player) if(!GetPVarInt(i, "TeleportsBlock")) SendClientMessage(i, DmCol1, str);
	}
    else
	{
	  format(str, sizeof(str), "{FF0000}» DM « {8B0000}%s takes part in %s Deathmatch {FF0000}(/DM%d) ", pName[playerid], GetPlayerDMName(playerid), DmID);
	  //format(str, sizeof(str), "{FFA81C}» AFK « {CC00FF}%s is now Away From Keyboard (Reason: test)", pName[playerid]);
	  //format(str, sizeof(str), "{73EFFF}» Export «{00CED1} %s has exported a dumper!", pName[playerid]);
	  foreach(new i : Player) if(!GetPVarInt(i, "TeleportsBlock")) SendClientMessage(i, DmCol1, str);
	}
    SendInfoText(playerid, 3000, "Type ~r~(/Exit) ~w~to leave the deathmatch");
	SetPVarInt(playerid, "pDMKills", 0);
	SetPVarInt(playerid, "pDMDeaths", 0);
	SetPVarInt(playerid, "pDMKillStreak", 0);

	new TD[128];
	format(TD, sizeof(TD), "~b~~h~~h~~h~%s", GetPlayerDMName(playerid));

    PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][0], "-");
	PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][2], "-");
	PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][6], "-");
    PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][7], TD);
	PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][3], "~g~Kills:~g~~h~ 0");
	PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][4], "~r~Deaths:~r~~h~ 0");
	PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][5], "~p~Ratio:~p~~h~ 0.00");
	PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][1], "~b~Serial Kills:~b~~h~ 0");
    for(new x=0; x<8; x++) PlayerTextDrawShow(playerid, DMpTD[playerid][x]);

	UpdateShow(DmID);
	HidePlayerMenu(playerid);
	DisablePlayerRaceCheckpoint(playerid);
    return 1;
}
CMD:world(playerid, params[])
{
    if(!GetPVarInt(playerid, "WW") && !GetPVarInt(playerid, "WW2") && !GetPVarInt(playerid, "INDM")) return SendWarning(playerid, "{BABABA}You must be in a deathmatch to use this command.");
    if(IsInFight(playerid)) return SendMsg(playerid, 2);
	new world;
	if (sscanf(params, "d", world)) return SendWarning(playerid, "/world <world id>");
	if((world < 1) || (world > 100)) return SendWarning(playerid, "{BABABA}valid worlds are (1-100)");
	SetPlayerVirtualWorldEX(playerid, 2000000000+world);
	return 1;
}
CMD:askin(playerid, params[])
{
    if(!IsAdmin(playerid, 1)) return SendMsg(playerid, 5);
	new skin;
	if (sscanf(params, "d", skin)) return SendWarning(playerid, "/askin <skin id>");
	if((skin < 1) || (skin > 299)) return SendWarning(playerid, "{BABABA}valid skins are (1-299)");
	SetPlayerSkin(playerid, skin);
	return 1;
}
CMD:ww(playerid)
{
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   SavePlayerCoords(playerid);
   new rand=random(sizeof(wwcoords));
   TeleportPlayer(playerid, wwcoords[rand][0], wwcoords[rand][1], wwcoords[rand][2], wwcoords[rand][3], 0, false);

   new str[128];
   format(str, sizeof(str), "{FF0000}» WW « {8B0000}%s takes part in the Walkies World {FF0000}(/WW)", pName[playerid]);
   foreach(new i : Player) if(!GetPVarInt(i, "TeleportsBlock")) SendClientMessage(i, DmCol1, str);

   SendInfoText(playerid, 3000, "Type ~r~(/Exit) ~w~to leave the deathmatch");


   SetPVarInt(playerid, "WW", true);

   SetPVarInt(playerid, "pDMKills", 0);
   SetPVarInt(playerid, "pDMDeaths", 0);
   SetPVarInt(playerid, "pDMKillStreak", 0);

   new TD[128];
   format(TD, sizeof(TD), "~b~~h~~h~~h~%s", GetPlayerDMName(playerid));

   PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][7], TD);
   PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][3], "~g~Kills:~g~~h~ 0");
   PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][4], "~r~Deaths:~r~~h~ 0");
   PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][5], "~p~Ratio:~p~~h~ 0.00");
   PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][1], "~b~Serial Kills:~b~~h~ 0");
   for(new x=0; x<8; x++) PlayerTextDrawShow(playerid, DMpTD[playerid][x]);
   SetPlayerVirtualWorldEX(playerid, 2000000000);
   ResetPlayerWeaponsEX(playerid);
   GivePlayerWeaponEX(playerid, 24, 9999);
   SetPlayerArmour(playerid, 100);
   SetPlayerHealth(playerid, 100);
   SendClientMessage(playerid, RED, "You can switch your world using (/world <1-100)");
   SetTeleShow(4, 0);
   return 1;
}

CMD:ww2(playerid)
{
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   SavePlayerCoords(playerid);
   new rand=random(sizeof(ww2coords));
   TeleportPlayer(playerid, ww2coords[rand][0], ww2coords[rand][1], ww2coords[rand][2], ww2coords[rand][3], 0, false);

   new str[128];
   format(str, sizeof(str), "{FF0000}» WW2 « {8B0000}%s takes part in the Walkies World II {FF0000}(/WW2)", pName[playerid]);
   foreach(new i : Player) if(!GetPVarInt(i, "TeleportsBlock")) SendClientMessage(i, DmCol1, str);

   SendInfoText(playerid, 3000, "Type ~r~(/Exit) ~w~to leave the deathmatch");


   SetPVarInt(playerid, "WW2", true);

   SetPVarInt(playerid, "pDMKills", 0);
   SetPVarInt(playerid, "pDMDeaths", 0);
   SetPVarInt(playerid, "pDMKillStreak", 0);

   new TD[128];
   format(TD, sizeof(TD), "~b~~h~~h~~h~%s", GetPlayerDMName(playerid));

   PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][7], TD);
   PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][3], "~g~Kills:~g~~h~ 0");
   PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][4], "~r~Deaths:~r~~h~ 0");
   PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][5], "~p~Ratio:~p~~h~ 0.00");
   PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][1], "~b~Serial Kills:~b~~h~ 0");
   for(new x=0; x<8; x++) PlayerTextDrawShow(playerid, DMpTD[playerid][x]);
   SetPlayerVirtualWorldEX(playerid, 2000000000);
   SetPlayerInterior(playerid, 15);
   ResetPlayerWeaponsEX(playerid);
   GivePlayerWeaponEX(playerid, 24, 9999);
   GivePlayerWeaponEX(playerid, 34, 9999);
   SetPlayerHealth(playerid, 100);
   SendClientMessage(playerid, RED, "You can switch your world using (/world <1-100)");
   SetTeleShow(4, 0);
   return 1;
}

CMD:mg(playerid) return cmd_moneygame(playerid);
CMD:tdm1(playerid) return cmd_tdm(playerid, "1");
CMD:tdm2(playerid) return cmd_tdm(playerid, "2");
CMD:tdm3(playerid) return cmd_tdm(playerid, "3");
CMD:dm1(playerid) return cmd_dm(playerid, "1");
CMD:dm2(playerid) return cmd_dm(playerid, "2");
CMD:dm3(playerid) return cmd_dm(playerid, "3");
CMD:dm4(playerid) return cmd_dm(playerid, "4");
CMD:dm5(playerid) return cmd_dm(playerid, "5");
CMD:dm6(playerid) return cmd_dm(playerid, "6");
CMD:dm7(playerid) return cmd_dm(playerid, "7");
CMD:dm8(playerid) return cmd_dm(playerid, "8");
CMD:dm9(playerid) return cmd_dm(playerid, "9");
CMD:dm10(playerid) return cmd_dm(playerid, "10");
CMD:dm11(playerid) return cmd_dm(playerid, "11");
CMD:dm12(playerid) return cmd_dm(playerid, "12");
CMD:dm13(playerid) return cmd_dm(playerid, "13");
CMD:dm14(playerid) return cmd_dm(playerid, "14");
CMD:dm15(playerid) return cmd_dm(playerid, "15");
CMD:dm16(playerid) return cmd_dm(playerid, "16");
CMD:dm17(playerid) return cmd_dm(playerid, "17");
CMD:dm18(playerid) return cmd_dm(playerid, "18");
//CMD:dm20(playerid) return cmd_dm(playerid, "20");
CMD:gungame(playerid) return cmd_dm(playerid, "18");
CMD:minigun(playerid) return cmd_dm(playerid, "5");
CMD:cry(playerid) return cmd_anim(playerid, "69");
CMD:arena(playerid) return cmd_dm(playerid, "20");


stock GetPlayerDMName(playerid)
{
	new str[32];
	if(GetPVarInt(playerid, "INDM"))
	{
		switch(GetPVarInt(playerid, "INDM"))
		{
		  case 1: str = "Drugs Factory";
		  case 2: str = "Golf Field";
		  case 3: str = "Runnies";
		  case 4: str = "Rockets";
		  case 5: str = "Minigun";
		  case 6: str = "Beat Em up";
		  case 7: str = "Volcano Island";
		  case 8: str = "Ammunation";
		  case 9: str = "Blood Bowl";
		  case 10: str = "Liberty City";
		  case 11: str = "Grand Theft Auto II";
		  case 12: str = "Big Smoke";
		  case 13: str = "Bugs In The Atrium";
		  case 14: str = "Rain Forest";
		  case 15: str = "Underwater Paradise";
		  case 16: str = "Runnies II";
		  case 17: str = "Playing With Trash";
		  case 18: str = "Gun Game";
		  case 19: str = "BattleField";
		  //case 20: str = "Colosseum";
		}
	}
	else if(GetPVarInt(playerid, "WW"))
	{
       str = "Walkies World";
	}
	else if(GetPVarInt(playerid, "WW2"))
	{
       str = "Walkies World II";
	}
	else if(GetPVarInt(playerid, "TDM") == 1)
	{
       str = "K.A.C.C.";
	}
	else if(GetPVarInt(playerid, "TDM") == 2)
	{
       str = "Las Venturas Stadium";
	}
	else if(GetPVarInt(playerid, "TDM") == 3)
	{
       str = "Warehouse";
	}
	return str;
}
CMD:resettuning(playerid)
{
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if(GetPlayerState(playerid) != 2) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}you must be a driver of a vehicle to use this command");
   new v = GetPlayerVehicleID(playerid);
   if(v!= PlayerCar(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}you must be inside your own vehicle to use this command");
   RemoveCustomMods(v);
   ResetpTuning(playerid);
   PlayerPlaySound(playerid, 1134, 0, 0, 0);
   return 1;

}
CMD:nos(playerid)
{
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(GetPlayerState(playerid) != 2) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be a driver of a vehicle to use this command");
/*
   if(GetPVarInt(playerid, "pOur")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You can't tune this vehicle with a nitro");
   if(InCanon[playerid] > 0)return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this cmd in the Cannon");
*/
   new v = GetPlayerVehicleID(playerid);
   if(!IsValidNosVehicle(v)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You can't tune this vehicle with a nitro");
   if(pLevel[playerid][driving] < 25 && GetPlayerMoneyEx(playerid) < 5000) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}you need 5000$ to tune a car with a nitro");
   if(pLevel[playerid][driving] < 25) GivePlayerMoneyEX(playerid, -5000, 1);

   SetPVarFloat(playerid, "Nitro", 100.0);
   PlayerPlaySound(playerid, 1133, 0, 0, 0);
   CarNitro[v]=1;
   OnVehicleMod(playerid, v, 1010);

   return 1;
}
CMD:mod(playerid)
{
    if(GetPlayerState(playerid) != 2) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be a driver of a vehicle to use this command");
    if(PlayerInfo[playerid][premiumItems][1] != 1 && PlayerInfo[playerid][IsVIP] == 0 && !IsAdmin(playerid, 1)) return SendMsg(playerid, 5);
    if(GetPVarInt(playerid, "RACER")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Dont abuse mod in race bitch");
    if(InCanon[playerid] > 0)return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this cmd in the Cannon");
	new vehicleid = GetPlayerVehicleID(playerid);
    new v = GetVehicleModel(vehicleid);
    if(!IsValidNosVehicle(vehicleid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You can't tune this vehicle");
    PlayerPlaySound(playerid, 1133, 0, 0, 0);
	AddVehicleComponentEX(vehicleid, 1073+random(11));
    SendInfoText(playerid, 4000, "~b~Car modded!");
    ChangeVehicleColor(vehicleid, random(525), random(525));
    AddVehicleComponentEX(vehicleid, 1087);
    if(!IsDeathMatcher(playerid)) CarNitro[v]=1;
    switch(v)
    {
        case 560 :
        {
             AddVehicleComponentEX(vehicleid, 1139);
             AddVehicleComponentEX(vehicleid, 1026);
             AddVehicleComponentEX(vehicleid, 1027);
             AddVehicleComponentEX(vehicleid, 1029);
             AddVehicleComponentEX(vehicleid, 1032);
             AddVehicleComponentEX(vehicleid, 1149);
             AddVehicleComponentEX(vehicleid, 1141);
             AddVehicleComponentEX(vehicleid, 1169);
             AddVehicleComponentEX(vehicleid, 1079);
             AddVehicleComponentEX(vehicleid, 1098);
             ChangeVehiclePaintjob(vehicleid, random(2));
        }
        case 562 :
        {
             AddVehicleComponentEX(vehicleid, 1146);
             AddVehicleComponentEX(vehicleid, 1034);
             AddVehicleComponentEX(vehicleid, 1035);
             AddVehicleComponentEX(vehicleid, 1036);
             AddVehicleComponentEX(vehicleid, 1040);
             AddVehicleComponentEX(vehicleid, 1149);
             AddVehicleComponentEX(vehicleid, 1171);
             AddVehicleComponentEX(vehicleid, 1079);
             ChangeVehiclePaintjob(vehicleid, random(2));
        }
        case 559 :
        {
             AddVehicleComponentEX(vehicleid, 1158);
             AddVehicleComponentEX(vehicleid, 1162);
             AddVehicleComponentEX(vehicleid, 1159);
             AddVehicleComponentEX(vehicleid, 1160);
             AddVehicleComponentEX(vehicleid, 1069);
             AddVehicleComponentEX(vehicleid, 1070);
             AddVehicleComponentEX(vehicleid, 1067);
             AddVehicleComponentEX(vehicleid, 1065);
             AddVehicleComponentEX(vehicleid, 1079);
             ChangeVehiclePaintjob(vehicleid, random(2));
        }
        case 558 :
        {
                AddVehicleComponentEX(vehicleid, 1164);
                AddVehicleComponentEX(vehicleid, 1088);
                AddVehicleComponentEX(vehicleid, 1092);
                AddVehicleComponentEX(vehicleid, 1090);
                AddVehicleComponentEX(vehicleid, 1094);
                AddVehicleComponentEX(vehicleid, 1166);
                AddVehicleComponentEX(vehicleid, 1168);
                AddVehicleComponentEX(vehicleid, 1079);
                ChangeVehiclePaintjob(vehicleid, random(2));
        }
        case 565 :
        {
                AddVehicleComponentEX(vehicleid, 1049);
                AddVehicleComponentEX(vehicleid, 1046);
                AddVehicleComponentEX(vehicleid, 1047);
                AddVehicleComponentEX(vehicleid, 1051);
                AddVehicleComponentEX(vehicleid, 1054);
                AddVehicleComponentEX(vehicleid, 1150);
                AddVehicleComponentEX(vehicleid, 1153);
                AddVehicleComponentEX(vehicleid, 1079);
                ChangeVehiclePaintjob(vehicleid, random(2));
        }
        case 561 :
        {
                AddVehicleComponentEX(vehicleid, 1154);
                AddVehicleComponentEX(vehicleid, 1155);
                AddVehicleComponentEX(vehicleid, 1156);
                AddVehicleComponentEX(vehicleid, 1157);
                ChangeVehiclePaintjob(vehicleid, random(2));
        }
    }
    return 1;
}

CMD:fix(playerid)
{
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}you must be in a vehicle to use this command");
   if(!IsAdmin(playerid, 1)) return SendMsg(playerid, 5);
   if(IsInFight(playerid)) return SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You cant fix the car during a fight.");
   if(GetPVarInt(playerid, "RACER")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}dont abuse fix in race bitch");
   if(Iter_Contains(InSumo, playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}dont abuse fix in sumo bitch");
   if(InCanon[playerid] > 0)return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this cmd in the Cannon");
   if(GetPVarInt(playerid, "InDerby")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Dont abuse fix in derby bitch");

   new v=GetPlayerVehicleID(playerid);
   RepairVehicle(v);
   SetVehicleHealth(v, 1000.0);
   PlayerPlaySound(playerid, 1133, 0, 0, 0);
   new Float:zAngle;
   GetVehicleZAngle(v, zAngle);
   SetVehicleZAngle(v, zAngle);
   return 1;
}
CMD:fakemsg(playerid, params[])
{
//	SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Fak Off , THIS COMMAND DOESNT EXIST ANYMORE!");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   //if(!IsAdmin(playerid, 10) && PlayerInfo[playerid][UserID] != 52811) return 0;
   new id;
   if(PlayerInfo[id][pAdmin] > PlayerInfo[playerid][pAdmin]) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command on higher level admins.");
   if(!IsAdmin(playerid, 10)) return 0;
   new str[128];
   if (sscanf(params, "us[128]", id, str)) return SendWarning(playerid, "/fakemsg <playerid> <msg>");//inputtext instead of params, undefined symbol
   if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
   OnPlayerText(id, str);
   return 1;
}
CMD:mini(playerid)
{
//	SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Fak Off , THIS COMMAND DOESNT EXIST ANYMORE!");

   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(!IsAdmin(playerid, 10)) return 0;
   GivePlayerWeapon(playerid, 38, 9999);
   return 1;
}
CMD:crash(playerid, params[])
{
   if(!IsAdmin(playerid, 10)) return 0;
   new id, str[128];
   if (sscanf(params, "u", id)) return SendWarning(playerid, "/crash <playerid>");
   if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
   GameTextForPlayer(id, "¤¶§!$$%&'()*+, -./01~!@#$^&*()_-+={[}]:;'<, >.?/", 1000, 0);
   GameTextForPlayer(id, "¤¶§!$$%&'()*+, -./01~!@#$^&*()_-+={[}]:;'<, >.?/", 2000, 1);
   GameTextForPlayer(id, "¤¶§!$$%&'()*+, -./01~!@#$^&*()_-+={[}]:;'<, >.?/", 3000, 2);
   GameTextForPlayer(id, "¤¶§!$$%&'()*+, -./01~!@#$^&*()_-+={[}]:;'<, >.?/", 4000, 3);
   GameTextForPlayer(id, "¤¶§!$$%&'()*+, -./01~!@#$^&*()_-+={[}]:;'<, >.?/", 5000, 4);
   GameTextForPlayer(id, "¤¶§!$$%&'()*+, -./01~!@#$^&*()_-+={[}]:;'<, >.?/", 6000, 5);
   GameTextForPlayer(id, "¤¶§!$$%&'()*+, -./01~!@#$^&*()_-+={[}]:;'<, >.?/", 7000, 6);
   format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}You have crashed %s (%d) game.", pName[id], id);
   SendClientMessage(playerid, AdminInfo, str);
   return 1;
}
CMD:rpg(playerid)
{
//	SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Fak Off , THIS COMMAND DOESNT EXIST ANYMORE!");

   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(!IsAdmin(playerid, 10)) return 0;
   GivePlayerWeapon(playerid, 35, 9999);
   return 1;
}
CMD:hsr(playerid)
{
//	SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Fak Off , THIS COMMAND DOESNT EXIST ANYMORE!");

   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(!IsAdmin(playerid, 10)) return 0;
   GivePlayerWeapon(playerid, 36, 9999);
   return 1;
}
CMD:hide(playerid)
{
  if(!IsAdmin(playerid, 1)) return SendMsg(playerid, 5);
  if(Jonny[playerid] == 1)
  {
  	 SendInfoText(playerid, 3000, "~r~you are not hidden anymore!");
  	 Jonny[playerid]=0;
  	 new shit[128];
     format(shit, sizeof(shit), "UPDATE `users` SET `Jonny` = 0 WHERE `UserID` = '%d'", PlayerInfo[playerid][UserID]);
  	 mysql_query(GTADM, shit);
  }
  else
  {
     SendInfoText(playerid, 3000, "~g~you are now hidden!");
  	 Jonny[playerid]=1;
  	 new shit[128];
     format(shit, sizeof(shit), "UPDATE `users` SET `Jonny` = 1 WHERE `UserID` = '%d'", PlayerInfo[playerid][UserID]);
  	 mysql_query(GTADM, shit);
  }
  return 1;
}
CMD:hfa(playerid)
{
  if(!IsAdmin(playerid, 1)) return SendMsg(playerid, 5);
  if(HFA[playerid] == 1)
  {
  	 SendInfoText(playerid, 3000, "~r~you are not hidden from /admins anymore!");
  	 HFA[playerid]=0;
  	 new shit[128];
     format(shit, sizeof(shit), "UPDATE `users` SET `HFA` = 0 WHERE `UserID` = '%d'", PlayerInfo[playerid][UserID]);
  	 mysql_query(GTADM, shit);
  }
  else
  {
     SendInfoText(playerid, 3000, "~g~you are now hidden from /admins!");
  	 HFA[playerid]=1;
  	 new shit[128];
     format(shit, sizeof(shit), "UPDATE `users` SET `HFA` = 1 WHERE `UserID` = '%d'", PlayerInfo[playerid][UserID]);
  	 mysql_query(GTADM, shit);
  }
  return 1;
}
CMD:fuck(playerid)
{
  if(!IsAdmin(playerid, 10)) return SendMsg(playerid, 5);
  if(GetPVarInt(playerid, "Hidden"))
  {
    SendInfoText(playerid, 3000, "~r~you are not undercover anymore!");
    DeletePVar(playerid, "Hidden");
  }
  else
  {
    SendInfoText(playerid, 3000, "~g~you are now undercover!");
    SetPVarInt(playerid, "Hidden", true);
  }
  return 1;
}
CMD:ispin(playerid)
{
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be in a vehicle to use this command");
   //if(InCanon[playerid] > 0)return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this cmd in the Cannon");
   //if(InCanon[target] > 0)return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this cmd in the Cannon");
   if(!IsAdmin(playerid, 2)) return SendMsg(playerid, 5);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   SetVehicleAngularVelocity(GetPlayerVehicleID(playerid), 0.0, 0.0, 2.0);
   return 1;
}
CMD:islide(playerid)
{
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again");
   if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be in a vehicle to use this command");
   if(!IsAdmin(playerid, 2)) return SendMsg(playerid, 5);

   SetVehicleVelocity(GetPlayerVehicleID(playerid), 0, 0, 10);
   return 1;
}
CMD:poptires(playerid, params[])
{
	if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
	if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
	if(!IsAdmin(playerid, 2)) return SendMsg(playerid, 5);
	new id;
	if (sscanf(params, "u", id)) return SendWarning(playerid, "/poptires <playerid>");
	if(!IsPlayerInAnyVehicle(id)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This player is not in a vehicle!");
	if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
	if(IsDeathMatcher(id)) return SendWarning(playerid, "{BABABA}This player is in a minigame!");
	if(GetPVarInt(id, "AFK")) return SendWarning(playerid, "{BABABA}This player is in AFK mode!");
	if(!IsAdmin(playerid, 6 && GetPVarInt(id, "RACER"))) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This player is in a race.");
    if(IsPlayerNPC(id) && !strcmp(pName[id], "Jonny")) SendNpcPM(playerid, "fuck off kid!"), GiveMedal(playerid, 24);
    if(IsPlayerNPC(id)) return 0;
	new str[128];
    format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}You have popped %s (%d) tires.", pName[id], id);
    SendClientMessage(playerid, AdminInfo, str);
    /*format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}Admin %s has popped your tires.", gAname(playerid));
    SendClientMessage(id, AdminInfo, str);*/

	new vehicleid = GetPlayerVehicleID(id);
	new panels, doors, llights, tires;
	GetVehicleDamageStatus(vehicleid, panels, doors, llights, tires);
	UpdateVehicleDamageStatus(vehicleid, panels, doors, llights, 15);

	return 1;
}
CMD:aspin(playerid, params[])
{
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(!IsAdmin(playerid, 6)) return SendMsg(playerid, 5);
   new id;
   if (sscanf(params, "u", id)) return SendWarning(playerid, "/aflip <playerid>");
   if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
   if(IsPlayerNPC(id) && !strcmp(pName[id], "Jonny")) SendNpcPM(playerid, "fuck off kid!"), GiveMedal(playerid, 24);
   if(IsPlayerNPC(id)) return 0;
   if(!IsPlayerInAnyVehicle(id)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This player is not in a vehicle!");
   if(InCanon[id] > 0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this cmd in the Cannon");
   SetVehicleAngularVelocity(GetPlayerVehicleID(id), 0.0, 0.0, 2.0);
   return 1;
}

CMD:aflip(playerid, params[])
{
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(!IsAdmin(playerid, 6)) return SendMsg(playerid, 5);
   new id;
   if (sscanf(params, "u", id)) return SendWarning(playerid, "/aflip <playerid>");
   if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
   if(IsPlayerNPC(id) && !strcmp(pName[id], "Jonny")) SendNpcPM(playerid, "fuck off kid!"), GiveMedal(playerid, 24);
   if(IsPlayerNPC(id)) return 0;
   if(!IsPlayerInAnyVehicle(id)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This player is not in a vehicle!");
   if(InCanon[id] > 0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this cmd in the Cannon");

   new Float:vel[3], Float:angle;
   GetVehicleZAngle(GetPlayerVehicleID(id), angle);
   GetVehicleVelocity(GetPlayerVehicleID(id), vel[0], vel[1], vel[2]);
   SetVehicleVelocity(GetPlayerVehicleID(id), vel[0], vel[1], vel[2] + 0.3);
   SetVehicleAngularVelocity(GetPlayerVehicleID(id), floatsin(-angle - 90.0, degrees)/7.0, floatcos(-angle - 90.0, degrees)/7.0, 0.0);
   return 1;
}
CMD:iflip(playerid)
{
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}you must be in a vehicle to use this command");
   //if(InCanon[playerid] > 0)return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this cmd in the Cannon");
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(!IsAdmin(playerid, 2)) return SendMsg(playerid, 5);

   new Float:vel[3], Float:angle;
   GetVehicleZAngle(GetPlayerVehicleID(playerid), angle);
   GetVehicleVelocity(GetPlayerVehicleID(playerid), vel[0], vel[1], vel[2]);
   SetVehicleVelocity(GetPlayerVehicleID(playerid), vel[0], vel[1], vel[2] + 0.3);
   SetVehicleAngularVelocity(GetPlayerVehicleID(playerid), floatsin(-angle - 90.0, degrees)/7.0, floatcos(-angle - 90.0, degrees)/7.0, 0.0);
   return 1;
}
CMD:cars8(playerid)
{
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(PlayerInfo[playerid][pScore] < 8000) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must have at least 8000 score points to buy a car from cars 8");


   new m=CheckTeleMoney(playerid, 3000);
   if(GetPlayerMoneyEx(playerid) < m) return SendMoneyMSG(playerid, m);
   GivePlayerMoneyEX(playerid, m*-1, 1);

   TeleportPlayer(playerid, 355.4091, 2539.9963, 16.7134, 179.8127, 0);
   SendTeleMsg(playerid, "The Abandoned Airport Cars Dealer", "Cars8");

   return 1;
}
CMD:cars4(playerid)
{
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);

   if(PlayerInfo[playerid][pScore] < 2000) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must have at least 2000 score points to buy a car from cars 4");

   new m=CheckTeleMoney(playerid, 3000);
   if(GetPlayerMoneyEx(playerid) < m) return SendMoneyMSG(playerid, m);
   GivePlayerMoneyEX(playerid, m*-1, 1);

   TeleportPlayer(playerid, 2123.0027, -1130.8029, 25.4280, 214.2925, 0);
   SendTeleMsg(playerid, "Coutt and SchutZ Cars Dealer", "Cars4");

   return 1;
}
CMD:cars9(playerid)
{
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);

  // if(PlayerInfo[playerid][IsVIP] < 1 && PlayerInfo[playerid][premiumItems][3] != 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}you must have at least 1 vip points to buy a car from cars 9");
   if(PlayerInfo[playerid][premiumItems][3] < 1 && PlayerInfo[playerid][IsVIP] < 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must buy the permission of cars 9 dealer at the market.");
   new m=CheckTeleMoney(playerid, 3000);
   if(GetPlayerMoneyEx(playerid) < m) return SendMoneyMSG(playerid, m);
   GivePlayerMoneyEX(playerid, m*-1, 1);
   TeleportPlayer(playerid, -532.4695, 2578.4858, 55.2000, 0.0, 0);
   SendTeleMsg(playerid, "premium Cars Dealer", "Cars9");

   return 1;
}
CMD:cars2(playerid)
{
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(PlayerInfo[playerid][pScore] < 750) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must have at least 750 score points to buy a car from cars 2");


   new m=CheckTeleMoney(playerid, 3000);
   if(GetPlayerMoneyEx(playerid) < m) return SendMoneyMSG(playerid, m);
   GivePlayerMoneyEX(playerid, m*-1, 1);

   TeleportPlayer(playerid, 198.1870, -259.0056, 1.5781, 320.9127, 0);
   SendTeleMsg(playerid, "Truck Terminal Cars Dealer", "Cars2");
   return 1;
}

CMD:cars3(playerid)
{
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(PlayerInfo[playerid][pScore] < 1200) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must have at least 1200 score points to buy a car from cars 3");

   new m=CheckTeleMoney(playerid, 3000);
   if(GetPlayerMoneyEx(playerid) < m) return SendMoneyMSG(playerid, m);
   GivePlayerMoneyEX(playerid, m*-1, 1);

   TeleportPlayer(playerid, 2148.0974, 1409.8187, 10.8203, 266.9328, 0);
   SendTeleMsg(playerid, "Auto Bahn Cars Dealer", "Cars3");

   return 1;
}

CMD:cars1(playerid)
{
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(PlayerInfo[playerid][pScore] < 400) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must have at least 400 score points to buy a car from cars 1");


   new m=CheckTeleMoney(playerid, 3000);
   if(GetPlayerMoneyEx(playerid) < m) return SendMoneyMSG(playerid, m);
   GivePlayerMoneyEX(playerid, m*-1, 1);

   TeleportPlayer(playerid, -1661.7125, 1219.0985, 21.1563, 248.0402, 0);
   SendTeleMsg(playerid, "Otto's Autos Cars Dealer", "Cars1");

   return 1;
}
CMD:trucking1(playerid)
{
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(Job[playerid] != Trucker) return SendWarning(playerid, "{BABABA}You must be a Trucker to teleport to this place!");


   new m=CheckTeleMoney(playerid, 3000);
   if(GetPlayerMoneyEx(playerid) < m) return SendMoneyMSG(playerid, m);
   GivePlayerMoneyEX(playerid, m*-1, 1);

   TeleportPlayer(playerid, 187.4399, -314.7983, 1.5724, 24.2066, 0);
   SendTeleMsg(playerid, "Blueberry's Trucking Station", "Trucking1");

   return 1;
}
CMD:trucking2(playerid)
{
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(PlayerInfo[playerid][pTrucking] < 15) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be on Trucking level 2 to teleport to this trucking station!");
   if(Job[playerid] != Trucker) return SendWarning(playerid, "{BABABA}You must be a Trucker to teleport to this place!");


   new m=CheckTeleMoney(playerid, 3000);
   if(GetPlayerMoneyEx(playerid) < m) return SendMoneyMSG(playerid, m);
   GivePlayerMoneyEX(playerid, m*-1, 1);

   TeleportPlayer(playerid, -72.0006, -1112.6636, 1.0781, 195.9731, 0);
   SendTeleMsg(playerid, "RS Haul's Trucking Station", "Trucking2");

   return 1;
}
CMD:cars5(playerid)
{
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(PlayerInfo[playerid][pScore] < 3000) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must have at least 3000 score points to buy a car from cars 5");

   new m=CheckTeleMoney(playerid, 3000);
   if(GetPlayerMoneyEx(playerid) < m) return SendMoneyMSG(playerid, m);
   GivePlayerMoneyEX(playerid, m*-1, 1);

   TeleportPlayer(playerid, -1957.0332, 279.6328, 41.0471, 203.0997, 0);

   SendTeleMsg(playerid, "Wang Cars Dealer", "Cars5");
   return 1;
}

CMD:cars6(playerid)
{
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(PlayerInfo[playerid][pScore] < 4000) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must have at least 4000 score points to buy a car from cars 6");

   new m=CheckTeleMoney(playerid, 3000);
   if(GetPlayerMoneyEx(playerid) < m) return SendMoneyMSG(playerid, m);
   GivePlayerMoneyEX(playerid, m*-1, 1);

   TeleportPlayer(playerid, 556.6082, -1277.7703, 17.2482, 142.9392, 0);
   SendTeleMsg(playerid, "Grootti's Cars Dealer", "Cars6");
   return 1;
}

CMD:cars7(playerid)
{
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(PlayerInfo[playerid][pScore] < 6500) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must have at least 6500 score points to buy a car from cars 7");

   new m=CheckTeleMoney(playerid, 3000);
   if(GetPlayerMoneyEx(playerid) < m) return SendMoneyMSG(playerid, m);
   GivePlayerMoneyEX(playerid, m*-1, 1);
   GivePlayerMoneyEX(playerid, -3000, 1);

   TeleportPlayer(playerid, 1667.5288, 1795.4889, 10.8203, 358.3682, 0);
   SendTeleMsg(playerid, "$hody Cars Dealer", "Cars7");
   return 1;
}
CMD:move(playerid, params[])
{
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   new freeze, cmd[10];
   if(!IsAdmin(playerid, 1)) return SendMsg(playerid, 5);
   if(sscanf(params, "s[24]D(0)", cmd, freeze))  return SendWarning(playerid, ""GRAY_"/move <Up/Down/+X/-X/+Y/-Y/Off> "GRAY_"<freeze 1/0>");
   if((freeze != 1) && (freeze != 0)) return SendWarning(playerid, ""GRAY_"/move <Up/Down/+X/-X/+Y/-Y> "GRAY_"<freeze 1/0>");

   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   new Float:x, Float:y, Float:z;
   GetPlayerPos(playerid, x, y, z);
   PlayerPlaySound(playerid, 1190, x, y, z);
   if(!strcmp(cmd, "up", true, 2)) SetPlayerPos(playerid, x, y, z+1);
   else if(!strcmp(cmd, "down", true, 4)) SetPlayerPos(playerid, x, y, z-1);
   else if(!strcmp(cmd, "+x", true, 4)) SetPlayerPos(playerid, x+1, y, z);
   else if(!strcmp(cmd, "-x", true, 5)) SetPlayerPos(playerid, x-1, y, z);
   else if(!strcmp(cmd, "-y", true, 5)) SetPlayerPos(playerid, x, y-1, z);
   else if(!strcmp(cmd, "+y", true, 4)) SetPlayerPos(playerid, x, y+1, z);

   if(freeze == 1)
   {
    TogglePlayerControllable2(playerid, false);
    SendWarning(playerid, ""GRAY_"/unfreeze to unfreeze yourself");
   }
   return 1;
}


CMD:carnumber(playerid, params[])
{
   new v = GetPlayerVehicleID(playerid), str[32];
   if(playerid != VehicleInfo[v][Player] || VehicleInfo[v][Owned] == 0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}you must be inside your own vehicle to use this command");
   if(sscanf(params, "s[32]", str)) return SendClientMessage(playerid, RED, "carnumber : "GRAY_"<text>");
   if((strlen(str) > 32) || (strlen(str) < 1)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Vehicle numberplate should be between 1 and 32 characters");
   SetVehicleNumberPlate(VehicleInfo[v][ID], str);
   new str2[128];
   format(str2, sizeof(str2), "your vehicle numberplate has been set to %s", str);
   SendClientMessage(playerid, AdminInfo, str2);
   format(Player_Info[playerid][numplate], 32, "%s", str);
   new Query[200];
   format(Query, sizeof(Query), "UPDATE `users` SET `numplate` = '%s' WHERE `UserID` = '%d'", Escape_String(str), PlayerInfo[playerid][UserID]);
   mysql_query(GTADM, Query);
   return 1;
}
CMD:ask(playerid, params[])
{
   if ((GetTickCount() - TickCount[playerid][AskTick])  < 30*1000 ) return SendClientMessage( playerid, RED, ""RED_"» Error « {BABABA}You can't use this command that often!" );
   if((GetPVarInt(playerid, "LOGGED")) == 2) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be registered/logged in to use this command");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(PlayerInfo[playerid][Muted] > 0)  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command while being muted!");
   if(BlockAsk[playerid] == 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You are blocked from asking questions.");
   if(PlayerInfo[playerid][Muted] > 0)  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command while being muted!");

   new question[80], str[256], adminscount=CountOnlineAdmins();
   if(adminscount < 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}There are no online admins.");
   if(sscanf(params, "s[80]", question)) return SendClientMessage(playerid, RED, "Usage : "GRAY_"/ask <question>");
   if(strlen(question) > 80) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Your question is too long!");


   format(str, sizeof(str), "» Support «  "LIGHTBLUE_"Your question has been sent to online admins. {70AB5C}(Online Admins: %d) {E62525}(AFK Admins: %d)", adminscount, CountAFKAdmins());
   SendClientMessage(playerid, BLUE, str);
   format(str, sizeof(str), "» Support «  "LIGHTBLUE_"%s has asked a question: "BLUE_"\"%s\"", pName[playerid], question);
   foreach(new x : Player) if(IsAdmin(x, 1)) SendClientMessage(x, BLUE, str);
   SetPVarInt(playerid, "AskedQuestion", true);
   TickCount[playerid][AskTick]=GetTickCount();
   return 1;
}
CMD:answer(playerid, params[])
{
  new id, q_answer[100];
  if(!IsAdmin(playerid, 1)) return SendMsg(playerid, 5);
  if(sscanf(params, "us[100]", id, q_answer)) return SendClientMessage(playerid, RED, "Usage : "GRAY_"/answer <id> <text>");

  if(!IsPlayerConnected(id)) return SendWarning(playerid, "{BABABA}This player is not connected");
  if(!GetPVarInt(id, "AskedQuestion")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This player didnt ask a question.");


  new str[128];
  format(str, sizeof(str), "» Support «  "LIGHTBLUE_"Admin has answered your question: "BLUE_"\"%s\"", q_answer);
  SendClientMessage(id, BLUE, str);
  new str2[128];
  format(str2, sizeof(str2), "{3BB023}» Admin action « {ABFF85}You have answered %s's (%d) question \"%s\"", pName[id], id, q_answer);
  SendClientMessage(playerid, AdminInfo, str2);
  DeletePVar(id, "AskedQuestion");
  return 1;
}
CMD:blockask(playerid, params[])
{
  if(!IsAdmin(playerid, 4)) return SendMsg(playerid, 5);
  new id;
  if(sscanf(params, "us[128]", id)) return SendClientMessage(playerid, RED, "Usage : "GRAY_"/blockask <id>");
  if(BlockAsk[id] == 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This player is already blocked from asking questions.");
  if((GetPVarInt(playerid, "LOGGED")) == 2) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be registered/logged in to use this command");
  if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
  if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
  if(!IsPlayerConnected(id)) return SendWarning(playerid, "{BABABA}This player is not connected");
  BlockAsk[id]=1;
  new str[128];
  format(str, sizeof(str), "» Support « "LIGHTBLUE_"Admin has blocked you from asking questions.");
  SendClientMessage(id, BLUE, str);
  format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}You have blocked %s (%d) from asking questions.", pName[id], id);
  SendClientMessage(playerid, AdminInfo, str);
  format(str, sizeof(str), "UPDATE `users` SET `BlockAsk` = 1 WHERE `UserID` = '%d'", PlayerInfo[id][UserID]);
  mysql_query(GTADM, str);
  return 1;
}
CMD:unblockask(playerid, params[])
{
  if(!IsAdmin(playerid, 4)) return SendMsg(playerid, 5);
  new id;
  if(sscanf(params, "us[128]", id)) return SendClientMessage(playerid, RED, "Usage : "GRAY_"/unblockask <id>");
  if(BlockAsk[id] == 0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This player is not blocked from asking questions.");
  if((GetPVarInt(playerid, "LOGGED")) == 2) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be registered/logged in to use this command");
  if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
  if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
  if(!IsPlayerConnected(id)) return SendWarning(playerid, "{BABABA}This player is not connected");
  BlockAsk[id]=0;
  new str[128];
  format(str, sizeof(str), "» Support « "LIGHTBLUE_"Admin has unblocked you from asking questions.");
  SendClientMessage(id, BLUE, str);
  format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}You have unblocked %s (%d) from asking questions.", pName[id], id);
  SendClientMessage(playerid, AdminInfo, str);
  format(str, sizeof(str), "UPDATE `users` SET `BlockAsk` = 0 WHERE `UserID` = '%d'", PlayerInfo[id][UserID]);
  mysql_query(GTADM, str);
  return 1;
}
CMD:changename(playerid, params[])
{
   if((GetPVarInt(playerid, "LOGGED")) == 2) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be registered/logged in to use this command");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   new str[24];
   if(sscanf(params, "s[24]", str)) return SendClientMessage(playerid, RED, "» Error « {BABABA}/changename <name>");
   if(!IsValidChars(str)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You have typed invalid characters");
   if(!strcmp(pName[playerid], str)) return SendWarning(playerid, "This is already your name");
  // if((strfind(str, "dod", true) != -1)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}An invalid character has been used");
   //if((strfind(str, "d0d", true) != -1)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}An invalid character has been used");
   if(!strcmp(str, "Jonny", true) || !strcmp(str, "Jonny", true)) return SendNpcPM(playerid, "wannabe kid"), GiveMedal(playerid, 24);
   foreach (new i : Player) if((!strcmp(pName[i], str)) && (strlen(pName[i]) > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This name is already taken");

   new string[128];
   format(string, sizeof(string), "SELECT `UserID` FROM `users` WHERE `Name` = '%s' ORDER BY `Score` LIMIT 1", Escape_String(str));
   mysql_tquery(GTADM, string, "ChangeName", "ds", playerid, str);

   return 1;
}

stock RenamePlayer(adminid, playerid, newname[])
{
	  new oldname[24];
	  format(oldname, 24, "%s", pName[playerid]);

	  new SQL_OldName[24], SQL_NewName[24];
      mysql_escape_string(oldname, SQL_OldName);
      mysql_escape_string(newname, SQL_NewName);

	  DeletePVar(playerid, "RequestedName");

      for(new p=0; p<MAX_PROPS; p++)
      {
        if(fexist(PropPath(p)))
        {
         if(!strcmp(pInfo[p][Owner], oldname))
		 {
		   format(pInfo[p][Owner], 24, "%s", newname);
           new INI:File2 = INI_Open(PropPath(p));
           INI_SetTag(File2, "propdata");
           INI_WriteString(File2, "Owner", newname);
           INI_Close(File2);
		 }
		}
	  }


      SetPlayerName(playerid, newname);
      format(pName[playerid], 24, "%s", newname);

      new Query[168];
      format(Query, sizeof(Query), "UPDATE `users` SET `Name` = '%s' WHERE `UserID` = '%d'", SQL_NewName, PlayerInfo[playerid][UserID]);
      mysql_query(GTADM, Query);

      format(Query, sizeof(Query), "UPDATE `whitelist` SET `name` = '%s' WHERE `name` = '%s'", SQL_NewName, SQL_OldName);
      mysql_query(GTADM, Query);

	  if(PlayerInfo[playerid][pGang] > 0)
	  {
	    if(PlayerInfo[playerid][pGangRank] == 4)
	    {
           format(Query, sizeof(Query), "UPDATE `gangs` SET `Leader` = '%s' WHERE `GangID` = '%d'", SQL_NewName, PlayerInfo[playerid][pGang]);
           mysql_query(GTADM, Query);
           format(GangInfo[PlayerInfo[playerid][pGang]][leader], 24, "%s", pName[playerid]);
	    }
	  }
   	  if((PlayerInfo[playerid][pHouse] > 0) && PlayerInfo[playerid][pHouse] < MAX_HOUSES)
   	  {
	    format(hInfo[PlayerInfo[playerid][pHouse]][Owner], 24, "%s", pName[playerid]);
        UpdatehInfo(PlayerInfo[playerid][pHouse]);
   	  }
	  if(!GetPVarInt(playerid, "Hidden") && Jonny[playerid] == 0 && !GetPVarInt(playerid, "HiddenEY") && !GetPVarInt(playerid, "HideMeBitch"))
	  {
    	  new str[128];
    	  if(playerid == adminid) format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}Admin %s has renamed himself as \"%s\"", oldname, newname);
    	  else format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}Admin %s has renamed %s (%d) as  \"%s\"", gAname(adminid), oldname, playerid, newname);
          SendClientMessageToAll(AdminInfo, str);
	  }
	  if(GetPVarInt(playerid, "HiddenEY"))
	  {
			DeletePVar(playerid, "Hidden");
			DeletePVar(playerid, "HiddenEY");
			DeletePVar(playerid, "HiddenEX");
			DeletePVar(playerid, "HiddenName");
	  }
      format(pEscName[playerid], 30, "%s", Escape_Name(newname));
   	  return 1;
}
CMD:setname(playerid, params[])
{
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(!IsAdmin(playerid, 4)) return SendMsg(playerid, 5);
	new id, str[24];
    if(sscanf(params, "us[24]", id, str)) return SendClientMessage(playerid, RED, "Usage : "GRAY_"/setname <PlayerID> <NewName>");
	if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
    if(!IsValidChars(str)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You have typed invalid characters");
    if(IsPlayerNPC(id) && !strcmp(pName[id], "Jonny")) return SendNpcPM(playerid, "I didnt ask for name change smart ass"), GiveMedal(playerid, 24);
    if(IsPlayerNPC(id)) return 0;
    //if((strfind(str, "dod", true) != -1)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}An invalid character has been used");
    //if((strfind(str, "d0d", true) != -1)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}An invalid character has been used");
    //if((strfind(str, "danger of death", true) != -1)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}An invalid character has been used");
    //if((strfind(str, "dangerofdeath", true) != -1)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}An invalid character has been used");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}this player is not connected");
    if((GetPVarInt(id, "LOGGED")) == 2) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This player is not registered");
    foreach (new i : Player)
	{
	   if((strcmp(pName[i], str)) == 0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This name is already taken");
	}
    new string[128];
    format(string, sizeof(string), "SELECT * FROM `users` WHERE `Name` = '%s' ORDER BY `Score` LIMIT 1", Escape_Name(str));
    mysql_tquery(GTADM, string, "SetName", "dds", playerid, id, str);
	return 1;

}
CMD:rename(playerid, params[])
{
    if((GetPVarInt(playerid, "LOGGED")) == 2) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This player is not registered");
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(!IsAdmin(playerid, 1)) return SendMsg(playerid, 5);
	new id;

    if(sscanf(params, "u", id)) return SendClientMessage(playerid, RED, "Usage : "GRAY_"/rename <id>");
	if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
	new str[24];
	GetPVarString(id, "RequestedName", str, 24);

	if(!strlen(str)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This player hasnt requested a name change "), SendClientMessage(playerid, RED, "You can use (/setname <id> <NewName>) instead");

	foreach (new i : Player)
	  if(!strcmp(pName[i], str))
		return
	     SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This name is already taken");

    RenamePlayer(playerid, id, str);
  //  SavePInfo(id);
    return 1;
}
CMD:ramp(playerid, params[]) return cmd_rampset(playerid, params);
CMD:rampset(playerid, params[])
{
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
	if(PlayerInfo[playerid][IsVIP] == 1 || IsAdmin(playerid, 1)) ShowPlayerDialog(playerid, 4871, DIALOG_STYLE_LIST, "Select your ramp", "Ramp Type 1\nRamp Type 2\nRamp Type 3\nRamp Type 4\nRamp Type 5\nRamps off\nSpecial ramp", "Select", "Exit");
	else ShowPlayerDialog(playerid, 4871, DIALOG_STYLE_LIST, "Select your ramp", "Ramp Type 1\nRamp Type 2\nRamp Type 3\nRamp Type 4\nRamp Type 5\nRamps off", "Select", "Exit");
    return 1;
}
	CMD:speedo(playerid)
	{
		if(!IsAdmin(playerid, 10)) return 0;
		if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again...");
		if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
		ShowPlayerDialog(playerid, 4874, DIALOG_STYLE_LIST, "Speed-O-Meter", "On\nOff", "Select", "Exit");
		return 1;
	}
/*
CMD:register(playerid)
{
        if(GetPVarInt(playerid, "LOGGED") != 2) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You are already registered");
        ShowPlayerDialog(playerid, DIALOG_REGISTER2, DIALOG_STYLE_PASSWORD, ""LIGHTRED_"Register To The Server"
		, "Your Name is not registered in our database\n\n"WHITE_"Enter your password below to register a new account:",
		"Register", "Register Later");
		return 1;
}
*/
CMD:stats(playerid, params[])
{
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
	new id;
    if(sscanf(params, "u", id)) return ShowPlayerStates(playerid, playerid);

	if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
	ShowPlayerStates(id, playerid);
	return 1;
}

CMD:skills(playerid)
{
	if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
	if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
	SetPVarInt(playerid, "Skilling", true);
	ShowSkills(playerid);
	return 1;
}

CMD:gotohouse(playerid, params[])
{
    if(IsInFight(playerid)) return SendMsg(playerid, 2);
    if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(!IsAdmin(playerid, 4)) return SendMsg(playerid, 5);
	if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
	new i;
    if(sscanf(params, "d", i)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA} /gotohouse <houseid>");
    if(hExist[i] != 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}this house doesnt exist");
	if(i >= 0) TeleportPlayer(playerid, hInfo[i][sX], hInfo[i][sY], hInfo[i][sZ], hInfo[i][SpawnA], 0);
    return 1;
}
CMD:gotoprop(playerid, params[])
{
    if(IsInFight(playerid)) return SendMsg(playerid, 2);
    if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(!IsAdmin(playerid, 4)) return SendMsg(playerid, 5);
	if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
	new i;
    if(sscanf(params, "d", i)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA} /gotoprop <propid>");
    if(fexist(PropPath(i)) != 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This property doesnt exist");
	//if(i >= 0) TeleportPlayer(playerid, pInfo[i][sX], pInfo[i][sY], pInfo[i][sZ], pInfo[i][SpawnA], 0);
	if(i >= 0) TeleportPlayer(playerid, pInfo[i][Pos][0], pInfo[i][Pos][1], pInfo[i][Pos][2], 0);
    return 1;
}
CMD:house(playerid)
{
    if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");
	new h = PlayerInfo[playerid][pHouse];
	new ba=GetTickCount() - TickCount[playerid][house];
    if (( ba  < 1000*60*3 && ba > 0)&& !IsPlayerInRangeOfPoint(playerid, 30.0, hInfo[h][sX], hInfo[h][sY], hInfo[h][sZ])) return SendClientMessage( playerid, RED, ""RED_"» Error « {BABABA}You can't teleport to your house that often!" );
    if(IsInFight(playerid)) return SendMsg(playerid, 2);
    if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);

	if(PlayerInfo[playerid][pHouse] < 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You dont own a house!");

	InCar[playerid]=0;

    TeleportPlayer(playerid, hInfo[h][sX], hInfo[h][sY], hInfo[h][sZ], hInfo[h][SpawnA], 0, false);
	if(PlayerInfo[playerid][HouseFix] > 0)
	{
	   TogglePlayerControllable2(playerid, 0);
	   SetTimerEx("WarningUnfreeze", 3000, false, "id", playerid, GetPlayerVirtualWorld(playerid));
	   Streamer_Update(playerid);
	   SendpInfo(playerid, "- ~y~Loading....", 2500);
	}

    if(GetPlayerVirtualWorld(playerid) == 19888 || GetPlayerVirtualWorld(playerid) == 19999)
    {
       SetPlayerVirtualWorldEX(playerid, 0);
       for( new w=0; w < 13; w++ ) GivePlayerWeaponEX( playerid, pWeapons[playerid][w], pAmmo[playerid][w] );
    }
    TickCount[playerid][house] = GetTickCount();
    if(PlayerInfo[playerid][pCar] > 0)
    {
		 new g=PlayerCar(playerid);
    	 if(( g == -255 ) || g == INVALID_VEHICLE_ID)
    	 {
			new v;
	     	v = CreateVehicle(PlayerInfo[playerid][pCar], hInfo[h][CarX], hInfo[h][CarY], hInfo[h][CarZ], hInfo[h][CarA], pMods[playerid][18], pMods[playerid][19], 3600000);
            ResetCarInfo(v);
         	VehicleInfo[v][ID] = v;
         	VehicleInfo[v][Owned] = 1;
            VehicleInfo[v][Player] = playerid;
            OnVehicleSpawn(v);
         }
         else
		 {
		    SetVehicleToRespawn(g);
            VehicleInfo[g][Player] = playerid;
            OnVehicleSpawn(g);
		 }
	}
    return 1;
}

CMD:car(playerid)
{
    if(IsInFight(playerid)) return SendMsg(playerid, 2);
    if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
    if(GetPlayerVirtualWorld(playerid) == 871) return SendWarning(playerid, "You cant use this command here!");
    if(IsInBank(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside a bank");
	if((PlayerInfo[playerid][pCar] <= 0) || (PlayerInfo[playerid][pHouse] <= 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You dont own a car. You can buy one at /cars1-9.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You can't use this command inside a vehicle");
    if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");
	if(IsArmedVehicle(PlayerInfo[playerid][pCar]))  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant spawn an armed vehicle.");

	new g=PlayerCar(playerid);
    new Float:x, Float:y, Float:z, Float:angle;
   	GetPlayerPos(playerid, x, y, z);
   	GetPlayerFacingAngle(playerid, angle);

    if(( g == -255 ) || g == INVALID_VEHICLE_ID)
    {
		new v, i =PlayerInfo[playerid][pHouse];
		v = CreateVehicle(PlayerInfo[playerid][pCar], hInfo[i][CarX], hInfo[i][CarY], hInfo[i][CarZ], hInfo[i][CarA], pMods[playerid][18], pMods[playerid][19], 3600000);
        ResetCarInfo(v);
    	VehicleInfo[v][ID] = v;
    	VehicleInfo[v][Owned]=1;
        VehicleInfo[v][Player] = playerid;
        OnVehicleSpawn(VehicleInfo[v][ID]);

    	SetVehiclePos(v, x, y, z);
    	SetVehicleVirtualWorld(v, GetPlayerVirtualWorld(playerid));
    	LinkVehicleToInterior(v, GetPlayerInterior(playerid));
    	PutPlayerInVehicle(playerid, v, 0);
    	SetVehicleZAngle(v, angle);
    }
	else
	{
		SetVehiclePos(g, x, y, z);
		SetVehicleVirtualWorld(g, GetPlayerVirtualWorld(playerid));
		LinkVehicleToInterior(g, GetPlayerInterior(playerid));
		PutPlayerInVehicle(playerid, g, 0);
		SetVehicleZAngle(g, angle);
	}
	return 1;
}

CMD:carcolor(playerid, params[])
{
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    new col1, col2;
    if(sscanf(params, "dD(1)", col1, col2)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA} /carcolor <col1><col2>");
    if(GetPlayerState(playerid) != 2) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be in a vehicle to use this command");
    new v = GetPlayerVehicleID(playerid),
	    car= PlayerCar(playerid);
    ChangeVehicleColor(v, col1, col2);
    if(v == car)
    {
      pMods[playerid][18] = col1;
      pMods[playerid][19] = col2;
      new Query[256];
      format(Query, sizeof(Query), "UPDATE `users` SET `Mod19` = %d , `Mod20` = %d WHERE `UserID` = '%d'", pMods[playerid][18], pMods[playerid][19], PlayerInfo[playerid][UserID]);
      mysql_query(GTADM, Query);
    }
	if(SCar[v] == 1)
	{
		new query[256];
	    format(query, sizeof(query), "UPDATE `users` SET `Car2Color1`=%d, `Car2Color2`=%d WHERE `UserID` = '%d'", col1, col2, PlayerInfo[playerid][UserID]);
	    mysql_query(GTADM, query);
	    PlayerInfo[playerid][pSecVc1] = col1, PlayerInfo[playerid][pSecVc2] = col2;
	}
    return 1;
}
CMD:wheels(playerid, params[])
{
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    new str[24];
    if(sscanf(params, "s[24]", str)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA} /wheels <wheels name>");
    if(GetPlayerState(playerid) != 2) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be in a vehicle to use this command");
    new v = GetPlayerVehicleID(playerid);
    if(!IsValidNosVehicle(v)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}you cant tune with vehicle with wheels");
    if(InCanon[playerid] > 0)return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this cmd in the Cannon");
    if(pLevel[playerid][driving] < 25 && GetPlayerMoneyEx(playerid) < 2500) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You need 2500$ to tune a car with wheels!");

	if(!strcmp(str, "offroad")) AddVehicleComponentEX(v, 1025), PlayerPlaySound(playerid, 1133, 0, 0, 0), OnVehicleMod(playerid, v, 1025), wheelscmd(playerid);
	else if(!strcmp(str, "wires")) AddVehicleComponentEX(v, 1076), PlayerPlaySound(playerid, 1133, 0, 0, 0), OnVehicleMod(playerid, v, 1076), wheelscmd(playerid);
	else if(!strcmp(str, "classic")) AddVehicleComponentEX(v, 1077), PlayerPlaySound(playerid, 1133, 0, 0, 0), OnVehicleMod(playerid, v, 1077), wheelscmd(playerid);
	else if(!strcmp(str, "twist")) AddVehicleComponentEX(v, 1078), PlayerPlaySound(playerid, 1133, 0, 0, 0), OnVehicleMod(playerid, v, 1078), wheelscmd(playerid);
	else if(!strcmp(str, "cutter")) AddVehicleComponentEX(v, 1079), PlayerPlaySound(playerid, 1133, 0, 0, 0), OnVehicleMod(playerid, v, 1079), wheelscmd(playerid);
	else if(!strcmp(str, "switch")) AddVehicleComponentEX(v, 1080), PlayerPlaySound(playerid, 1133, 0, 0, 0), OnVehicleMod(playerid, v, 1080), wheelscmd(playerid);
	else if(!strcmp(str, "grove")) AddVehicleComponentEX(v, 1081), PlayerPlaySound(playerid, 1133, 0, 0, 0), OnVehicleMod(playerid, v, 1081), wheelscmd(playerid);
	else if(!strcmp(str, "import")) AddVehicleComponentEX(v, 1082), PlayerPlaySound(playerid, 1133, 0, 0, 0), OnVehicleMod(playerid, v, 1082), wheelscmd(playerid);
	else if(!strcmp(str, "dollar")) AddVehicleComponentEX(v, 1083), PlayerPlaySound(playerid, 1133, 0, 0, 0), OnVehicleMod(playerid, v, 1083), wheelscmd(playerid);
	else if(!strcmp(str, "trance")) AddVehicleComponentEX(v, 1084), PlayerPlaySound(playerid, 1133, 0, 0, 0), OnVehicleMod(playerid, v, 1084), wheelscmd(playerid);
	else if(!strcmp(str, "atomic")) AddVehicleComponentEX(v, 1085), PlayerPlaySound(playerid, 1133, 0, 0, 0), OnVehicleMod(playerid, v, 1085), wheelscmd(playerid);
	else if(!strcmp(str, "shadow")) AddVehicleComponentEX(v, 1073), PlayerPlaySound(playerid, 1133, 0, 0, 0), OnVehicleMod(playerid, v, 1073), wheelscmd(playerid);
	else if(!strcmp(str, "mega")) AddVehicleComponentEX(v, 1074), PlayerPlaySound(playerid, 1133, 0, 0, 0), OnVehicleMod(playerid, v, 1074), wheelscmd(playerid);
	else if(!strcmp(str, "rimshine")) AddVehicleComponentEX(v, 1075), PlayerPlaySound(playerid, 1133, 0, 0, 0), OnVehicleMod(playerid, v, 1075), wheelscmd(playerid);
	else return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Usage (/wheels) "GRAY_"(offroad/wires/classic/twist/cutter/switch/grove/import/dollar/trance/atomic/shadow/mega/rimshine)");
    return 1;
}
stock wheelscmd(playerid){ if(pLevel[playerid][driving] < 25) GivePlayerMoneyEX(playerid, -2500, 1); }
CMD:lowride(playerid, params[])
{
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) != 2) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be in a vehicle to use this command");
    new v = GetPlayerVehicleID(playerid);
    if(GetPlayerMoneyEx(playerid) < 2500) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}you need 2500$ to tune a car with a nitro");
    if(InCanon[playerid] > 0)return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this cmd in the Cannon");

    GivePlayerMoneyEX(playerid, -2500, 1);
    AddVehicleComponentEX(v, 1087), PlayerPlaySound(playerid, 1133, 0, 0, 0);
    OnVehicleMod(playerid, v, 1087);
    return 1;
}
CMD:acar(playerid, params[])
{
    if(GetPVarInt(playerid, "AFK")) return SendWarning(playerid, "you cant use this command in AFK Mode type (/back) then try again");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(!IsAdmin(playerid, 2)) return SendMsg(playerid, 5);
    new id, vname[30];
    if(sscanf(params, "us[30]", id, vname)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}/acar <id><name>");
	if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
    if(IsPlayerNPC(id) && !strcmp(pName[id], "Jonny")) return SendNpcPM(playerid, "I didnt ask for a car smart ass"), GiveMedal(playerid, 24);
    if(IsPlayerNPC(id)) return 0;
    else
    {
         if(GetPlayerState(id) == 7) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}That player is not spawned");
         new v = GetVehicleID(vname);
   	     if(v == INVALID_VEHICLE_ID) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Invalid vehicle name");
		 if(IsArmedVehicle(v))  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant spawn an armed vehicle.");
   	     new Float:pos[4], str[128];
	     GetPlayerPos(id, pos[0], pos[1], pos[2]);
	     GetPlayerFacingAngle(id, pos[3]);

  	     new ah= CreateVehicle(GetVehicleID(vname), pos[0], pos[1], pos[2], pos[3], -1, -1, 10);
         ResetCarInfo(ah);
		 VehicleInfo[ah][Player]=INVALID_PLAYER_ID;
  	     AdminCar[ah]=1;
         PutPlayerInVehicle(id, ah, 0);
	     format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}Admin %s has given you a %s", gAname(playerid), vInfo[GetVehicleID(vname)-400][vName]);
	     SendClientMessage(id, AdminInfo, str);
	     SetVehicleVirtualWorld(ah, GetPlayerVirtualWorld(id));

	}
    return 1;

}

CMD:givecar(playerid, params[])
{
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(!IsAdmin(playerid, 5)) return SendMsg(playerid, 5);
    new id, vname[30];
    if(sscanf(params, "us[30]", id, vname)) return SendClientMessage(playerid, RED, ""RED2_""RED_"» Error « {BABABA}"RED_" "GRAY_"/givecar <id><name>");
	if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
    if(IsPlayerNPC(id) && !strcmp(pName[id], "Jonny")) return SendNpcPM(playerid, "I didnt ask for a car smart ass"), GiveMedal(playerid, 24);
    if(IsPlayerNPC(id)) return 0;
	if(PlayerInfo[id][IsVIP]==0 && !IsAdmin(id, 1) && !IsAdmin(playerid, 10)) return SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You dont have a permission to give a housecar to non vip players!");
    if((GetPVarInt(id, "LOGGED")) == 2) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This player is not registered");
    if(PlayerInfo[id][pHouse] < 0) return SendClientMessage(playerid, RED, "error - The player must have a house to own a car");

    new vmodel = GetVehicleID(vname);

   	if(vmodel == INVALID_VEHICLE_ID) return SendClientMessage(playerid, RED, "error - invalid vehicle name");
	if(IsArmedVehicle(vmodel))  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant spawn an armed vehicle.");
    ResetpTuning(id);

	new car=PlayerCar(id);


   	if(car >= 0)
	{
        RemoveCustomMods(car);

		DestroyVehicleEX(VehicleInfo[car][ID]);
        VehicleInfo[car][Player]=-1;
        VehicleInfo[car][Owned]=0;
        PlayerInfo[id][pCar] = -255;
	}

   	new Float:hpos[4], str[128];
   	GetPlayerPos(id, hpos[0], hpos[1], hpos[2]);
   	GetPlayerFacingAngle(id, hpos[3]);

    new h = PlayerInfo[id][pHouse];


    new v= CreateVehicle(vmodel, hInfo[h][CarX], hInfo[h][CarY], hInfo[h][CarZ], hInfo[h][CarA], pMods[id][18], pMods[id][19], 60);
    ResetCarInfo(v);
    VehicleInfo[v][ID]=v;
    VehicleInfo[v][Player]=id;
    VehicleInfo[v][Owned]=1;
    PlayerInfo[id][pCar] = vmodel;

   	if(!IsDeathMatcher(id))
   	{
	 SetVehiclePos(v, hpos[0], hpos[1], hpos[2]);
	 SetVehicleZAngle(v, hpos[3]);
     PutPlayerInVehicle(id, v, 0);
   	}

   	format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}Admin %s has given you a %s as a house car", gAname(playerid), vInfo[vmodel-400][vName]);
   	SendClientMessage(id, AdminInfo, str);

    new Query[128];
    format(Query, sizeof(Query), "UPDATE `users` SET `Car` = %d WHERE `UserID` = %d", PlayerInfo[id][pCar], PlayerInfo[id][UserID]);
    mysql_query(GTADM, Query);
    return 1;
}



CMD:rainbow(playerid, params[])
{
    if(!IsAdmin(playerid, 3)) return SendMsg(playerid, 5);
	if(PlayerInfo[playerid][Muted] > 1)
	{
	  new string[128];
   	  if(PlayerInfo[playerid][Muted] > 1) format(string, sizeof(string), ""RED_"» Error « {BABABA}You are on the STFU list, you have to wait more %d seconds to chat again", PlayerInfo[playerid][Muted]);
	  SendClientMessage(playerid, RED, string);
	  return 0;
	}
	if(ChatLocked == 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}the chat is locked by an administrator");
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(isnull(params)) return SendWarning(playerid, "Usage : /Rainbow <text>");
    if (strlen(params) > 16) return SendWarning(playerid, "{BABABA}The RainBow Text can only contain 16 Letters");
	new string[128];
    format(string, sizeof(string), "%s", params);
    SendRainbowMessage(string);
    return 1;
}
CMD:me(playerid, params[])
{
	if(PlayerInfo[playerid][Muted] > 1)
	{
	  new string[128];
   	  if(PlayerInfo[playerid][Muted] > 1) format(string, sizeof(string), ""RED_"» Error « {BABABA}You are on the STFU list, you have to wait more %d seconds to chat again", PlayerInfo[playerid][Muted]);
	  SendClientMessage(playerid, RED, string);
	  return 0;
	}
	if ((GetTickCount() - TickCount[playerid][MeSpam])  < 30*1000 ) return SendClientMessage( playerid, RED, ""RED_"» Error « {BABABA}You cant use this command that often!" );
	if(ChatLocked == 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}the chat is locked by an administrator");
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if (isnull(params)) return SendWarning(playerid, "Usage : /Me <text>");
	new string[1024], color;//300
	color = GetPlayerColor(playerid);
	format(string, sizeof(string), "%s", params);
    TickCount[playerid][MeSpam]=GetTickCount();//

    str_replace("/q", "Imnoob", string);
    str_replace("/ q", "Im noob", string);
    /*str_replace("rietz", "", string);
    str_replace("eliot", "", string);
    str_replace("rietzz", "", string);
    str_replace("schneider", "", string);
    str_replace("isplash", "", string);
    str_replace("dino", "", string);
    str_replace("adin", "", string);
    str_replace("dod", "", string);
    str_replace("d0d", "", string);
    str_replace("d0dlerz", "", string);
    str_replace("dodlerz", "", string);*/

	new adtest[180];
	format(adtest, sizeof(adtest), "%s", params);
	if(stringContainsIP(adtest)) MutePlayer(playerid, 250, -255, "Advertising");
	else
	{
    	format(string, sizeof(string), "{ACACAC}*** %s {FF9900}%s", pName[playerid], string);
        SendPMessageToAll(playerid, string, color);
    }
    return 1;
}
stock SendPMessageToAll(playerid, msg[], color)
{
   foreach(new i : Player)
   {
	  new dontallow=0;
	  for(new x=0; x<5; x++)
	  {
		 if(Blocked[i][x] == playerid)
		 {
		   dontallow=1;
		 }
	  }
	  if(dontallow == 0)
	  {
           SendClientMessageEX(i, color, msg, 140);
	  }
   }
}
CMD:cschat(playerid, params[])
{
	if(!GetPVarInt(playerid, "CS"))  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be in CS to use this command!");
	if(PlayerInfo[playerid][Muted] > 1)
	{
	  new string[128];
   	  if(PlayerInfo[playerid][Muted] > 1) format(string, sizeof(string), ""RED_"» Error « {BABABA}You are on the STFU list, you have to wait more %d seconds to chat again", PlayerInfo[playerid][Muted]);
	  SendClientMessage(playerid, RED, string);
	  return 0;
	}
	if(ChatLocked == 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}The chat is locked by an administrator");
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if (!strlen(params)) return SendWarning(playerid, "{BABABA}/cschat <text>");
	new string[128];
	if(GetPVarInt(playerid, "CS") == 2 || GetPVarInt(playerid, "CS") == 4)
	{
       format(string, sizeof(string), "» Terrorists « %s {%06x}%s {9C9C9C}[%d] {FFFFFF}%s", (GetPlayerColor(playerid) >>> 8), pName[playerid], playerid, params);
	   foreach(new i : Player) if(GetPVarInt(i, "CS") == 2 || GetPVarInt(i, "CS") == 4) SendClientMessage(i, 0xF5185BFF, string);
	}
	else
	{
       format(string, sizeof(string), ""BLUE_"» Counters « {%06x}%s {9C9C9C}[%d] {FFFFFF}%s", (GetPlayerColor(playerid) >>> 8), pName[playerid], playerid, params);
	   foreach(new i : Player) if(GetPVarInt(i, "CS") == 1 || GetPVarInt(i, "CS") == 3) SendClientMessage(i, 0xF5185BFF, string);
	}
    return 1;
}
CMD:ctfchat(playerid, params[])
{
	if(!GetPVarInt(playerid, "inCTF"))  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be in CTF to use this command!");
	if(PlayerInfo[playerid][Muted] > 1)
	{
	  new string[128];
   	  if(PlayerInfo[playerid][Muted] > 1) format(string, sizeof(string), ""RED_"» Error « {BABABA}You are on the STFU list, you have to wait more %d seconds to chat again", PlayerInfo[playerid][Muted]);
	  SendClientMessage(playerid, RED, string);
	  return 0;
	}
	if(ChatLocked == 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}The chat is locked by an administrator");
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if (!strlen(params)) return SendClientMessage(playerid, RED,  ""RED_"» Error « {BABABA}/ctfchat <text>");
	new string[128];
	if(GetPVarInt(playerid, "inCTF") == 1)
	{
       format(string, sizeof(string), ""BLUE_"» Blue Team « {%06x}%s {9C9C9C}[%d] {FFFFFF}%s", (GetPlayerColor(playerid) >>> 8), pName[playerid], playerid, params);
	   foreach(new i : Player) if(GetPVarInt(i, "inCTF") == 1) SendClientMessage(i, 0xF5185BFF, string);
	}
	else
	{
       format(string, sizeof(string), ""GREEN_"» Green Team « {%06x}%s {9C9C9C}[%d] {FFFFFF}%s", (GetPlayerColor(playerid) >>> 8), pName[playerid], playerid, params);
	   foreach(new i : Player) if(GetPVarInt(i, "inCTF") == 2) SendClientMessage(i, 0xF5185BFF, string);
	}
    return 1;
}
CMD:dodmchat(playerid, params[])
{
	if(nxsdm[playerid] == 0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be in the DoDM to use this command!");
	if(PlayerInfo[playerid][Muted] > 1)
	{
	  new string[128];
   	  if(PlayerInfo[playerid][Muted] > 1) format(string, sizeof(string), ""RED_"» Error « {BABABA}You are on the STFU list, you have to wait more %d seconds to chat again", PlayerInfo[playerid][Muted]);
	  SendClientMessage(playerid, RED, string);
	  return 0;
	}
	if(ChatLocked == 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}The chat is locked by an administrator");
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if (!strlen(params)) return SendClientMessage(playerid, RED,  ""RED_"» Error « {BABABA}/dodmchat <text>");
	new string[128];
	if(InCW[playerid] == 1)
	{
       format(string, sizeof(string), ""BLUE_"» Team 1 « {%06x}%s {9C9C9C}[%d] {FFFFFF}%s", (GetPlayerColor(playerid) >>> 8), pName[playerid], playerid, params);
	   foreach(new i : Player) if(InCW[i] == 1) SendClientMessage(i, 0xF5185BFF, string);
	}
	if(InCW[playerid] == 2)
	{
       format(string, sizeof(string), ""GREEN_"» Team 2 « {%06x}%s {9C9C9C}[%d] {FFFFFF}%s", (GetPlayerColor(playerid) >>> 8), pName[playerid], playerid, params);
	   foreach(new i : Player) if(InCW[i] == 2) SendClientMessage(i, 0xF5185BFF, string);
	}
	else
	{
       format(string, sizeof(string), ""YELLOW_"» Team 3 « {%06x}%s {9C9C9C}[%d] {FFFFFF}%s", (GetPlayerColor(playerid) >>> 8), pName[playerid], playerid, params);
	   foreach(new i : Player) if(InCW[i] == 3) SendClientMessage(i, 0xF5185BFF, string);
	}
    return 1;
}
CMD:fchat(playerid, params[])
{
	if(Footballer[playerid] == 0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be in Football to use this command!");
	if(PlayerInfo[playerid][Muted] > 1)
	{
	  new string[128];
   	  if(PlayerInfo[playerid][Muted] > 1) format(string, sizeof(string), ""RED_"» Error « {BABABA}You are on the STFU list, you have to wait more %d seconds to chat again", PlayerInfo[playerid][Muted]);
	  SendClientMessage(playerid, RED, string);
	  return 0;
	}
	if(ChatLocked == 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}The chat is locked by an administrator");
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if (!strlen(params)) return SendClientMessage(playerid, RED,  ""RED_"» Error « {BABABA}/fchat <text>");
	new string[128];
	if(Footballer[playerid] == 1)
	{
       format(string, sizeof(string), ""BLUE_"» Team 1 « {%06x}%s {9C9C9C}[%d] {FFFFFF}%s", (GetPlayerColor(playerid) >>> 8), pName[playerid], playerid, params);
	   foreach(new i : Player) if(Footballer[i] == 1) SendClientMessage(i, 0xF5185BFF, string);
	}
	else
	{
       format(string, sizeof(string), ""GREEN_"» Team 2 « {%06x}%s {9C9C9C}[%d] {FFFFFF}%s", (GetPlayerColor(playerid) >>> 8), pName[playerid], playerid, params);
	   foreach(new i : Player) if(Footballer[i] == 2) SendClientMessage(i, 0xF5185BFF, string);
	}
    return 1;
}
CMD:cochat(playerid, params[])
{
	if(!GetPVarInt(playerid, "CO")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be in the Colosseum to use this command!");
	if(PlayerInfo[playerid][Muted] > 1)
	{
	  new string[128];
   	  if(PlayerInfo[playerid][Muted] > 1) format(string, sizeof(string), ""RED_"» Error « {BABABA}You are on the STFU list, you have to wait more %d seconds to chat again", PlayerInfo[playerid][Muted]);
	  SendClientMessage(playerid, RED, string);
	  return 0;
	}
	if(ChatLocked == 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}The chat is locked by an administrator");
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if (!strlen(params)) return SendClientMessage(playerid, RED,  ""RED_"» Error « {BABABA}/cochat <text>");
	new string[128];
	if(GetPVarInt(playerid, "CO") == 1)
	{
       format(string, sizeof(string), ""BLUE_"» Team 1 « {%06x}%s {9C9C9C}[%d] {FFFFFF}%s", (GetPlayerColor(playerid) >>> 8), pName[playerid], playerid, params);
	   foreach(new i : Player) if(GetPVarInt(i, "CO") == 1) SendClientMessage(i, 0xF5185BFF, string);
	}
	else
	{
       format(string, sizeof(string), ""GREEN_"» Team 2 « {%06x}%s {9C9C9C}[%d] {FFFFFF}%s", (GetPlayerColor(playerid) >>> 8), pName[playerid], playerid, params);
	   foreach(new i : Player) if(GetPVarInt(i, "CO") == 2) SendClientMessage(i, 0xF5185BFF, string);
	}
    return 1;
}
CMD:ddchat(playerid, params[])
{
	if(!GetPVarInt(playerid, "DD")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be in the Disco Dodgebomb to use this command!");
	if(PlayerInfo[playerid][Muted] > 1)
	{
	  new string[128];
   	  if(PlayerInfo[playerid][Muted] > 1) format(string, sizeof(string), ""RED_"» Error « {BABABA}You are on the STFU list, you have to wait more %d seconds to chat again", PlayerInfo[playerid][Muted]);
	  SendClientMessage(playerid, RED, string);
	  return 0;
	}
	if(ChatLocked == 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}The chat is locked by an administrator");
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if (!strlen(params)) return SendClientMessage(playerid, RED,  ""RED_"» Error « {BABABA}/fchat <text>");
	new string[128];
	if(GetPVarInt(playerid, "DD") == 1)
	{
       format(string, sizeof(string), ""BLUE_"» Team 1 « {%06x}%s {9C9C9C}[%d] {FFFFFF}%s", (GetPlayerColor(playerid) >>> 8), pName[playerid], playerid, params);
	   foreach(new i : Player) if(GetPVarInt(i, "DD") == 1) SendClientMessage(i, 0xF5185BFF, string);
	}
	else
	{
       format(string, sizeof(string), ""GREEN_"» Team 2 « {%06x}%s {9C9C9C}[%d] {FFFFFF}%s", (GetPlayerColor(playerid) >>> 8), pName[playerid], playerid, params);
	   foreach(new i : Player) if(GetPVarInt(i, "DD") == 2) SendClientMessage(i, 0xF5185BFF, string);
	}
    return 1;
}
CMD:disarm(playerid, params[])
{
    if(!IsAdmin(playerid, 4)) return SendMsg(playerid, 5);
    new id;
    if(sscanf(params, "u", id)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA} /disarm <id>");
	if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
    if(IsPlayerNPC(id)) return 0;
	ResetPlayerWeaponsEX(id);
    return 1;
}
CMD:asay(playerid, params[])
{
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(!IsAdmin(playerid, 1)) return SendMsg(playerid, 5);
    if (isnull(params)) return SendWarning(playerid, "Usage : /asay <text>");
	new string[256];
    format(string, sizeof(string), ""RED_"* "WHITE_"Admin: "RED_"%s", params);
    SendClientMessageToAll(-1, string);
    return 1;
}

CMD:eventtext(playerid, params[])
{
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(!IsAdmin(playerid, 5)) return SendMsg(playerid, 1);
    if (isnull(params)) return SendWarning(playerid, "Usage : /eventtext <text>");
    if(EventStarted == 0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}The Event has not been started yet");
	new string[256];
    format(string, sizeof(string), "» Event « {CDF590}%s", params);
    SendClientMessageToAll(0xE8AF02FF, string);
    return 1;
}

CMD:export(playerid, params[])
{
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(!GetPVarInt(playerid, "ExportTDShown"))
    {
		SetPVarInt(playerid, "ExportTDShown", true);
	    for(new x=0; x<sizeof(ExportTD); x++) TextDrawShowForPlayer(playerid, ExportTD[x]);
	    SetTimerEx("HideExportTD", 6000, false, "d", playerid);
    }

	return 1;
}

forward HideExportTD(playerid);
public HideExportTD(playerid)
{
	DeletePVar(playerid, "ExportTDShown");
	for(new x=0; x<sizeof(ExportTD); x++) TextDrawHideForPlayer(playerid, ExportTD[x]);
	return 1;
}
CMD:permit(playerid, params[])
{
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
    if(!strcmp(params, "hunter", true))
	{
       new str[128];
	   if(PlayerInfo[playerid][IsVIP] == 0 && GetPlayerMoneyEx(playerid) < 5000000) return SendWarning(playerid, "{BABABA}You need 5, 000, 000$ to buy Hunter's permission");
	   if(permit[playerid] == 2) return SendWarning(playerid, "You have already bought a permission for hunter.");
	   permit[playerid] = 2;
       if(PlayerInfo[playerid][IsVIP] == 0) GivePlayerMoneyEX(playerid, -5000000, 1);
	   format(str, sizeof(str), ""RED2_"» Permit « "RED_"%s has bought a permission for Hunter", pName[playerid]);
       SendClientMessageToAll(RED, str);
       SendClientMessage(playerid, RED, ""RED2_"» Permit « "RED_"The permission will be lost once you log off");
	}
 	else if(!strcmp(params, "rhino", true))
	{
       new str[128];
	   if(PlayerInfo[playerid][IsVIP] == 0 && GetPlayerMoneyEx(playerid) < 3500000) return SendWarning(playerid, "{BABABA}You need 3, 500, 000$ to buy Rhino's permission");
	   if(permit[playerid] == 2) return SendWarning(playerid, "You have already bought a permission for hunter.");
	   permit[playerid] = 3;
       if(PlayerInfo[playerid][IsVIP] == 0) GivePlayerMoneyEX(playerid, -3500000, 1);

	   format(str, sizeof(str), ""RED2_"» Permit « "RED_"%s has bought a permission for Rhino", pName[playerid]);
       SendClientMessageToAll(RED, str);
       SendClientMessage(playerid, RED, ""RED2_"» Permit « "RED_"The permission will be lost once you log off");
	}
	else if(!strcmp(params, "seasparrow", true))
	{
       new str[128];
	   if(PlayerInfo[playerid][IsVIP] == 0 && GetPlayerMoneyEx(playerid) < 4500000) return SendWarning(playerid, "{BABABA}You need 4, 500, 000$ to buy Sea sparrow's permission");
	   if(permit[playerid] == 2) return SendWarning(playerid, "You have already bought a permission for hunter.");
	   permit[playerid] = 4;
       if(PlayerInfo[playerid][IsVIP] == 0) GivePlayerMoneyEX(playerid, -4500000, 1);

	   format(str, sizeof(str), ""RED2_"» Permit « "RED_"%s has bought a permission for Sea sparrow", pName[playerid]);
       SendClientMessageToAll(RED, str);
       SendClientMessage(playerid, RED, ""RED2_"» Permit « "RED_"The permission will be lost once you log off");
	}
	else if(!strcmp(params, "hydra", true))
	{
       new str[128];
       if(PlayerInfo[playerid][IsVIP] == 0 && GetPlayerMoneyEx(playerid) < 5000000) return SendWarning(playerid, "{BABABA}You need 5, 000, 000$ to buy Hydra's permission");
   	   if(permit[playerid] == 2) return SendWarning(playerid, "You have already bought a permission for hunter.");
	   permit[playerid] = 5;
       if(PlayerInfo[playerid][IsVIP] == 0) GivePlayerMoneyEX(playerid, -5000000, 1);
	   format(str, sizeof(str), ""RED2_"» Permit « "RED_"%s has bought a permission for Hydra", pName[playerid]);
       SendClientMessageToAll(RED, str);
       SendClientMessage(playerid, RED, ""RED2_"» Permit « "RED_"The permission will be lost once you log off");
    }
    else return SendWarning(playerid, "/permit <hunter/rhino/seasparrow/hydra>");
	return 1;

}



CMD:setcash(playerid, params[])
{
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(!IsAdmin(playerid, 10)) return SendMsg(playerid, 5);
	new id, amount;
	if (sscanf(params, "ud", id, amount)) return SendWarning(playerid, "/setcash [playerid] [amount]");
	if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
    if(IsPlayerNPC(id) && !strcmp(pName[id], "Jonny")) return SendNpcPM(playerid, "dumb, people make money , money doesnt make people"), GiveMedal(playerid, 24);
    if(IsPlayerNPC(id)) return 0;
	if(amount < 0 || amount > 100000000) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Invalid amount");
	ResetPlayerMoneyEx(id), GivePlayerMoneyEX(id, amount);
	if(id != playerid)
	{
		new str[128];
		format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}Admin %s has set your Cash to %d", gAname(playerid), amount);
		SendClientMessage(id, AdminInfo, str);

		format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}You have set %s's Cash to %d", pName[id], amount);
		SendClientMessage(playerid, AdminInfo, str);
	}
	if(id == playerid)
	{
        new str[128];
		format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}You have set your own cash to %d", amount);
		SendClientMessage(playerid, AdminInfo, str);
	}

	return 1;
}

CMD:setscore(playerid, params[])
{
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(!IsAdmin(playerid, 10)) return SendMsg(playerid, 5);
	new id, amount;
	if (sscanf(params, "ud", id, amount)) return SendWarning(playerid, "/setscore [playerid] [amount]");
	if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
    if(IsPlayerNPC(id) && !strcmp(pName[id], "Jonny")) return SendNpcPM(playerid, "Excuse me! are you stupid?"), GiveMedal(playerid, 24);
    if(IsPlayerNPC(id)) return 0;

	new str2[80];
	PlayerInfo[id][pScore] = 0;
	ScoreTDupdate(id, amount);
	if(id != playerid)
	{
		format(str2, sizeof(str2), "{3BB023}» Admin action « {ABFF85}Admin %s has set your Score to %d.", gAname(playerid), amount);
    	SendClientMessage(id, BLUE, str2);
		format(str2, sizeof(str2), "{3BB023}» Admin action « {ABFF85}You have set %s's Score to %d.", pName[id], amount);
		SendClientMessage(playerid, BLUE, str2);

	}
	if(id == playerid)
	{
	 format(str2, sizeof(str2), "{3BB023}» Admin action « {ABFF85}You have set your own Score to %d.", amount);
	 SendClientMessage(id, BLUE, str2);
	}


	return 1;
}

CMD:freeze(playerid, params[])
{
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(!IsAdmin(playerid, 2)) return SendMsg(playerid, 5);
	new id;
	if (sscanf(params, "u", id)) return SendWarning(playerid, "Usage- "GRAY_"/freeze <id>");
	if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
    if(IsPlayerNPC(id) && !strcmp(pName[id], "Jonny")) return SendNpcPM(playerid, "Excuse me! are you stupid?"), GiveMedal(playerid, 24);
    if(IsPlayerNPC(id)) return 0;

    TogglePlayerControllable2(id, false);
    if(id != playerid)
    {
      new str[128];
      format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}You have been freezed by admin "GRAY_"%s", gAname(playerid));
	  SendClientMessage(id, RED, str);
      format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}You have freezed "GRAY_"%s (%d) type /unfreeze to unfreeze him", pName[id], id);
	  SendClientMessage(playerid, RED, str);
	}
	return 1;
}

CMD:unfreeze(playerid, params[])
{
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(!IsAdmin(playerid, 2)) return SendMsg(playerid, 5);
	new id;
	if (sscanf(params, "u", id)) return SendWarning(playerid, "/unfreeze <id>");
	if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
	if(GetPVarInt(id, "pOur")) return SendWarning(playerid, "{BABABA}You cant unfreeze players in parkour.");
    if(GetPVarInt(id, "Signed4Lms")) return SendWarning(playerid, "{BABABA}You cant unfreeze players in LMS.");
	if(GetPVarInt(id, "RACER")) return SendWarning(playerid, "{BABABA}You cant unfreeze players in race.");
	TogglePlayerControllable2(id, true);
    if(id != playerid)
    {
      new str[128];
	  format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}Admin %s has unfreezed you", gAname(playerid));
      SendClientMessage(id, AdminInfo, str);
	}
    else if(id == playerid)
	{
      new str[128];
      format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}You have unfreezed yourself");
      SendClientMessage(playerid, AdminInfo, str);
    }
	return 1;
}

CMD:kill(playerid)
{

   if(GetPVarInt(playerid, "InHay")) return SendWarning(playerid, "{BABABA}You cant use this command in hay game");
   if((playerid == DuelInfo[player1]) || (playerid ==  DuelInfo[player2]) || PlayerInfo[playerid][Jailed] > 0) return 0;
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if(GetPVarInt(playerid, "RACER") && RaceStarted ==2) return 1;
   if(GetPVarInt(playerid, "SumoShowIt")) return 1;
   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(pInGW[playerid])  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command during a gangwar!");
   if(Iter_Contains(InSumo, playerid))
   {
      Suicide[playerid]=true;
      if(SumoCar[playerid] > 0) DestroyVehicleEX(SumoCar[playerid]);
      SumoCar[playerid]=0;
   }
   SetPlayerHealth(playerid, -1);
   GiveMedal(playerid, 60);
   if(DrugsEffect[playerid]==1) GiveMedal(playerid, 76);
   return 1;
}

CMD:mute(playerid, params[])
{
      if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
      if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
      if(!IsAdmin(playerid, 1)) return SendMsg(playerid, 5);
	  new id, Reason[128], Secs;
      if(sscanf(params, "uds[128]", id, Secs, Reason)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA} /Mute "GRAY_"<playerid> <Seconds> <reason>");
  	  if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
	  if(playerid == id) return SendMsg(playerid, 7);
      if(IsPlayerNPC(id) && !strcmp(pName[id], "Jonny"))
	  {
	     SendNpcPM(playerid, "You gonna pay for this"), GiveMedal(playerid, 24);
	     new str[128];
	     format(str, sizeof(str), "Ladies and gentlemen, %s needs a shower", pName[playerid]);
         SetPlayerAttachedObject(playerid, 2, 18729, 7, 0.20, -0.05, -1.54, 0.0, -4.0, -211.0, 1.00, 1.00, 1.00);
         SetPlayerAttachedObject(playerid, 3, 1264, 2, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 1.00, 1.00, 1.00);
         GiveMedal(playerid, 24);
         SendBotMessage(str);
	     return 0;
	  }
      if(IsPlayerNPC(id)) return 0;

//0, 18729, 7, -3.60, 0.45, -1.55, -356.0, -4.0, 183.0, 1.00, 1.00, 1.00
//1, 18729, 7, 0.20, -0.05, -1.54, 0.0, -4.0, -211.0, 1.00, 1.00, 1.00
	  if(PlayerInfo[id][pAdmin] > PlayerInfo[playerid][pAdmin]) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}you cant mute higher rank admins");
	  MutePlayer(id, Secs, playerid, Reason);
	  return 1;
}
CMD:unmute(playerid, params[])
{
      if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
      if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
      if(!IsAdmin(playerid, 1)) return SendMsg(playerid, 5);
	  new id;
      if(sscanf(params, "u", id)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA} /UnMute "GRAY_"<playerid>");
   	  if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
      if(PlayerInfo[id][Muted] == 0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}this player is not on the STFU list");
	  UnMutePlayer(id, playerid);
	  return 1;
}
CMD:meronz(playerid)
{
	if(!IsAdmin(playerid, 10)) return 0;
	if(RoNzCar >= 0)  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}RoNz car is already created;");
	new Float:pos[4];
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	GetPlayerFacingAngle(playerid, pos[3]);

	RoNzCar= CreateVehicle(578, pos[0], pos[1], pos[2], pos[3], -1, -1, 200);
	ResetCarInfo(RoNzCar);
	VehicleInfo[RoNzCar][Player]=INVALID_PLAYER_ID;
	AdminCar[RoNzCar]=1;
	PutPlayerInVehicle(playerid, RoNzCar, 0);

	// *Export using dialog*:
	lolRoNz[0] = CreateObject(2909, 0, 0, -1000, 0, 0, 0, 100);
	AttachObjectToVehicle(lolRoNz[0], RoNzCar, -1.425000, -1.800000, 1.125000, 0.000000, 0.000000, 0.000000);

	// *Export using dialog*:
	lolRoNz[1] = CreateObject(2909, 0, 0, -1000, 0, 0, 0, 100);
	AttachObjectToVehicle(lolRoNz[1], RoNzCar, 1.274999, -1.800000, 1.125000, 0.000000, 0.000000, 0.000000);

	// *Export using dialog*:
	lolRoNz[2] = CreateObject(2909, 0, 0, -1000, 0, 0, 0, 100);
	AttachObjectToVehicle(lolRoNz[2], RoNzCar, -0.000000, -1.875000, 2.025000, -0.000000, 89.099983, 0.000000);

	// *Export using dialog*:
	lolRoNz[3] = CreateObject(13667, 0, 0, -1000, 0, 0, 0, 100);
	AttachObjectToVehicle(lolRoNz[3], RoNzCar, -0.524999, 4.499999, 17.175008, 0.000000, 0.000001, -261.899932);

	// *Export using dialog*:
	lolRoNz[4] = CreateObject(19365, 0, 0, -1000, 0, 0, 0, 100);
	AttachObjectToVehicle(lolRoNz[4], RoNzCar, -0.075000, -5.999996, 1.200000, -0.000001, 0.000000, 89.099983);

    lolRoNz[5] = CreateObject(19327, 0, 0, -1000, 0, 0, 0, 100);
    AttachObjectToVehicle(lolRoNz[5], RoNzCar, -0.150000, -6.149996, 0.749999, 0.000000, 0.000000, 0.000000);
    SetObjectMaterialText(lolRoNz[5], "RoNz", 0, OBJECT_MATERIAL_SIZE_256x128, "Arial", 28, 1, 0xFFFFFFFF, 0, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);

	return 1;
}
CMD:ronzjail(playerid, params[])
{
 if(!IsAdmin(playerid, 10)) return 0;
 new Float:pos[3], id;
 if(sscanf(params, "u", id)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA} /ronzjail "GRAY_"<playerid>");
 if(GetVehicleModel(RoNzCar) < 400) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}RoNz car is not created;");
 GetVehiclePos(RoNzCar, pos[0], pos[1], pos[2]);
 SetPlayerPos(id, pos[0], pos[1], pos[2]+0.2);
 SetPVarInt(id, "ronzjailed", true);
 return 1;
}
CMD:ronzunjail(playerid, params[])
{
 if(!IsAdmin(playerid, 10)) return 0;
 new Float:pos[3], id;
 if(sscanf(params, "u", id)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA} /ronzunjail "GRAY_"<playerid>");
 GetPlayerPos(id, pos[0], pos[1], pos[2]);
 SetPlayerPos(id, pos[0], pos[1], pos[2]+10.0);
 DeletePVar(id, "ronzjailed");
 return 1;
}


CMD:unjail(playerid, params[])
{
      if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
      if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
      if(!IsAdmin(playerid, 1)) return SendMsg(playerid, 5);
	  new id;
      if(sscanf(params, "u", id)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA} /UnJail "GRAY_"<playerid>");
  	  if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
      if(PlayerInfo[id][Jailed] == 0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}this player is not Jailed");
	  UnJailPlayer(id, playerid);
	  return 1;
}

CMD:jail(playerid, params[])
{
      if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
      if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
      if(!IsAdmin(playerid, 1)) return SendMsg(playerid, 5);
	  new id, Reason[50], Secs;
      if(sscanf(params, "uds[50]", id, Secs, Reason)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA} /Jail "GRAY_"<playerid> <Seconds> <reason>");
 	  if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
 	  if(Secs < 60) return SendWarning(playerid, "You must jail for atleast 60 seconds.");
      if(IsPlayerNPC(id) && !strcmp(pName[id], "Jonny"))
	  {
	     SendNpcPM(playerid, "You gonna pay for this");
	     new str[128];
	     format(str, sizeof(str), "Ladies and gentlemen, %s needs a shower", pName[playerid]);
         SetPlayerAttachedObject(playerid, 2, 18729, 7, 0.20, -0.05, -1.54, 0.0, -4.0, -211.0, 1.00, 1.00, 1.00);
         SetPlayerAttachedObject(playerid, 3, 1264, 2, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 1.00, 1.00, 1.00);
         GiveMedal(playerid, 24);
         SendBotMessage(str);
	     return 0;
	  }
      if(IsPlayerNPC(id)) return 0;
	  if(playerid == id) return SendMsg(playerid, 7);
	  if(PlayerInfo[id][pAdmin] > PlayerInfo[playerid][pAdmin]) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}you cant jail a higher ranked admin");
	  if(GetPVarInt(playerid, "Hidden") || GetPVarInt(playerid, "HideMeBitch") || Jonny[playerid] == 1) JailPlayer(id, Secs, "Jonny", Reason);
	  else JailPlayer(id, Secs, pName[playerid], Reason);
	  return 1;

}
CMD:fine(playerid, params[])
{
      if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
      if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
      if(!IsAdmin(playerid, 3)) return SendMsg(playerid, 5);
      if ((GetTickCount() - TickCount[playerid][FineTick])  < 60*1000 ) return SendClientMessage( playerid, RED, ""RED_"» Error « {BABABA}You cant use this command that often!" );
	  new id, Reason[50], Cash;
      if(sscanf(params, "uds[50]", id, Cash, Reason)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA} /fine "GRAY_"<playerid> <bank cash> <reason>");
 	  if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
 	  if(PlayerInfo[id][pBank] < Cash) return SendWarning(playerid, "{BABABA}This player hasnt that amount of money!");
      if(Cash > 100000000 || Cash < 1000000) return SendWarning(playerid, "{BABABA}Invalid amount!");
      if(IsPlayerNPC(id) && !strcmp(pName[id], "Jonny"))
	  {
	     SendNpcPM(playerid, "You gonna pay for this");
	     new str[128];
	     format(str, sizeof(str), "Ladies and gentlemen, %s needs a shower", pName[playerid]);
         SetPlayerAttachedObject(playerid, 2, 18729, 7, 0.20, -0.05, -1.54, 0.0, -4.0, -211.0, 1.00, 1.00, 1.00);
         SetPlayerAttachedObject(playerid, 3, 1264, 2, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 1.00, 1.00, 1.00);
         SendBotMessage(str);
	     return 0;
	  }
      if(IsPlayerNPC(id)) return 0;
	  if(playerid == id) return SendMsg(playerid, 7);
	  if(PlayerInfo[id][pAdmin] > PlayerInfo[playerid][pAdmin]) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant fine a higher ranked admin");
	  else FinePlayer(id, Cash, gAname(playerid), Reason), TickCount[playerid][FineTick]=GetTickCount();
	  return 1;

}
CMD:vipsetting(playerid)
{
   if(PlayerInfo[playerid][IsVIP] == 0) return SendWarning(playerid, "Only VIP's can use this command!");
   new str[1024], textlolo[70];
   if(strlen(PlayerInfo[playerid][HeadText]) < 3) format(textlolo, sizeof(textlolo), "-");
   else format(textlolo, sizeof(textlolo), "%s", PlayerInfo[playerid][HeadText]);

//  format(str, sizeof(str), ""cornsilk2"Vip Skin (current - %d)\n"YELLOW_"Vip Job (current - %s)\n"ORANGE_"First Weapon (current - %d)\n"lime2"Second Weapon (current - %d)\n"LIGHTBLUE_"Third Weapon (current - %d)\n"GREEN_"HeadText (current - %s)", PlayerInfo[playerid][pVipSkin], GetPlayerVIPJob(playerid), PlayerInfo[playerid][pVipWeapon1], PlayerInfo[playerid][pVipWeapon2], PlayerInfo[playerid][pVipWeapon3], PlayerInfo[playerid][HeadText]);
   format(str, sizeof(str), ""cornsilk2"VIP Skin (current - %d)\n{1B91E0}VIP Job (current - %s)\n"ORANGE_"First Weapon (current - %d)\n{FFEE00}Second Weapon (current - %d)\n"LIGHTBLUE_"Third Weapon (current - %d)\n{EB1CC1}Change your Headtext (Current: %s)\n{255F17}VIP Commands", PlayerInfo[playerid][pVipSkin], GetPlayerVIPJob(playerid), PlayerInfo[playerid][pVipWeapon1], PlayerInfo[playerid][pVipWeapon2], PlayerInfo[playerid][pVipWeapon3], textlolo);
   ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM "WHITE_"- VIP Setting", str, "Select", "Exit");
   return 1;
}
CMD:setheadtext(playerid) return cmd_headtext(playerid);
CMD:myheadtext(playerid) return cmd_headtext(playerid);
CMD:headtext(playerid)
{
   //if(PlayerInfo[playerid][premiumItems][4] < 1 && PlayerInfo[playerid][IsVIP] < 1) return SendMsg(playerid, 5);
   if(PlayerInfo[playerid][IsVIP] == 0) return SendWarning(playerid, "Only VIP's can use this command!");
   new str[700], textlolo[70];
   if(strlen(PlayerInfo[playerid][HeadText]) < 3) format(textlolo, sizeof(textlolo), "-");
   else format(textlolo, sizeof(textlolo), "%s", PlayerInfo[playerid][HeadText]);
   if(PlayerInfo[playerid][IsVIP] <  1)
   {
   format(str, sizeof(str), "Current Headtext: %s\nChanges Left: %d\n"GRAY_"Enter Your New HeadText Below\n"GRAY_"Colors:\n{FFFFFF}~w~ WHITE\n{FF0000}~r~ RED \n{0000FF} ~b~BLUE\n{12DE00}~g~ GREEN\n{EA00FF}~p~ PINK\n{FFEE00}~y~ YELLOW\n{FF9100}~o~ ORANGE\n{00E5FF}~lb~ LIGHT BLUE\n"lime2"~lg~ LIME\n{FFBFFA}~lp~ LIGHT PINK\n{403E40}~l~ BLACK", textlolo, PlayerInfo[playerid][premiumItems][4]);
   ShowPlayerDialog(playerid, 8771, DIALOG_STYLE_INPUT, "HeadText", str, "Set", "Exit");
   }
   else
   {
	   ShowPlayerDialog(playerid, 8414, DIALOG_STYLE_INPUT, ""LIGHTYELLOW_"GTADM "WHITE_"- HeadText", ""GRAY_"Enter Your New HeadText Below\n"GRAY_"Colors:\n{FFFFFF}~w~ WHITE\n{FF0000}~r~ RED \n{0000FF} ~b~BLUE\n{12DE00}~g~ GREEN\n{EA00FF}~p~ PINK\n{FFEE00}~y~ YELLOW\n{FF9100}~o~ ORANGE\n{00E5FF}~lb~ LIGHT BLUE\n"lime2"~lg~ LIME\n{FFBFFA}~lp~ LIGHT PINK\n{403E40}~l~ BLACK", "Set", "Exit");
   }
   return 1;
}
CMD:respawncars(playerid, params[])
{
    if(!IsAdmin(playerid, 3)) return SendMsg(playerid, 5);
	for(new i = 1; i <= MAX_VEHICLES; i++)
	{
		if(i != BotVehicle && !VehicleHasDriver(i))
		{
		   SetVehicleToRespawn(i);
		}
	}
	new str[128];
	format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}Admin %s has respawned all the vehicles!", gAname(playerid));
    SendClientMessageToAll(AdminInfo, str);
	return 1;
}
CMD:setvipskin(playerid, params[])
{
      if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
      if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
      if(!IsAdmin(playerid, 5)) return SendMsg(playerid, 5);

	  new id, skin, job, weap1, weap2, weap3, ammo1, ammo2, ammo3;

      if(sscanf(params, "udddddddd", id, skin, job, weap1, ammo1, weap2, ammo2, weap3, ammo3)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}"RED_"» Error « {BABABA} /setvipskin "GRAY_"<playerid> <skinid> <job> <weapon1> <ammo> <weapon2> <ammo> <weapon3> <ammo> ");
	  if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
      if(IsPlayerNPC(id)) return 0;
      if(PlayerInfo[id][IsVIP] == 0 && !IsAdmin(id, 1))return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This player is not VIP!");
	  if(0 > weap1 > 46 || 0 > weap2 > 46 || 0 > weap2 > 46) return SendWarning(playerid, "{BABABA}weapon id's must be "GRAY_"between 1-46");
	  if(ammo1 <= 0 || ammo2 <= 0 || ammo3 <= 0) return SendWarning(playerid, "{BABABA}invalid ammo amount");
	  if(skin > 299 || skin < 0) return SendWarning(playerid, "{BABABA}Invalid skin id");
	  //if(skin == 115 || skin == 188 || skin == 137 && PlayerInfo[id][IsVIP] == 0 || PlayerInfo[id][IsVIP] == 1 || PlayerInfo[id][IsVIP] == 2) return SendWarning(playerid, "{BABABA}That player must be VIP Level 3+ to use this skin.");
	  if(job > 7 || job < 0) return SendWarning(playerid, "{BABABA}valid jobs are (0-7)");
	  if((IsvalidWeapon(weap1) == 0) || (IsvalidWeapon(weap2) == 0) || (IsvalidWeapon(weap3) == 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}invalid weapon id");
      if((IsvalidWeapon(weap1) == 2) || (IsvalidWeapon(weap2) == 2) || (IsvalidWeapon(weap3) == 2)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}this weaponid is not allowed");

      if((GetPVarInt(id, "LOGGED")) == 2) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This player is not registered");

	  new str[128];
	  format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}Admin %s has changed your vip skin", gAname(playerid));
      SendClientMessage(id, AdminInfo, str);
      SetPlayerSkin(id, skin);
      RemovePlayerAttachedObject(id, 1);
      RemovePlayerAttachedObject(id, 2);
      RemovePlayerAttachedObject(id, 3);

      PlayerInfo[id][pVipSkin] = skin;
	  PlayerInfo[id][pVipWeapon1] = weap1;
	  PlayerInfo[id][pVipAmmo1] = ammo1;
	  PlayerInfo[id][pVipWeapon2] = weap2;
	  PlayerInfo[id][pVipAmmo2] = ammo2;
	  PlayerInfo[id][pVipWeapon3] = weap3;
	  PlayerInfo[id][pVipAmmo3] = ammo3;
	  PlayerInfo[id][pVipJob] = job;
	  GivePlayerWeaponEX(id, PlayerInfo[id][pVipWeapon1], PlayerInfo[id][pVipAmmo1]);
	  GivePlayerWeaponEX(id, PlayerInfo[id][pVipWeapon2], PlayerInfo[id][pVipAmmo2]);
	  GivePlayerWeaponEX(id, PlayerInfo[id][pVipWeapon3], PlayerInfo[id][pVipAmmo3]);
	  Job[id] = job;

      new Query[300];
      format(Query, sizeof(Query), "UPDATE `users` SET `VipSkin` = %d, `VipJob` = %d, `VipWeap1` = %d, `VipWeap2` = %d, `VipWeap3` = %d, `VipAmmo1` = %d, `VipAmmo2` = %d, `VipAmmo3` = %d WHERE `Name` = '%s'", PlayerInfo[id][pVipSkin], PlayerInfo[id][pVipJob], PlayerInfo[id][pVipWeapon1], PlayerInfo[id][pVipWeapon2], PlayerInfo[id][pVipWeapon3], PlayerInfo[id][pVipAmmo1], PlayerInfo[id][pVipAmmo2], PlayerInfo[id][pVipAmmo3], Escape_Name(pName[id]));
      mysql_query(GTADM, Query);
      return 1;
}
CMD:setskin(playerid, params[])
{
      if(!IsAdmin(playerid, 5)) return SendMsg(playerid, 5);

	  new Id, skin;

      if(sscanf(params, "ud", Id, skin)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA} /setskin "GRAY_"<playerid> <skinid>");
      if(IsPlayerNPC(Id)) return 0;
	  if(!IsPlayerConnected(Id))  return SendWarning(playerid, "{BABABA}This player is not connected");
      if(IsPlayerNPC(Id)) return 0;
	  if(skin > 299 || skin < 0) return SendWarning(playerid, "{BABABA}invalid skin id");
	  //if(skin == 115 || skin == 188 || skin == 137 && PlayerInfo[Id][IsVIP] == 0 || PlayerInfo[Id][IsVIP] == 1 || PlayerInfo[Id][IsVIP] == 2) return SendWarning(playerid, "{BABABA}That player must be VIP Level 3+ to use this skin.");

	  new str[128];
	  format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}Admin %s has set your skin to %d", gAname(playerid), skin);
      SendClientMessage(Id, AdminInfo, str);
      SetPlayerSkin(Id, skin);
      return 1;
}

CMD:tban(playerid, params[])
{
	new ban_target, ban_time, ban_reason[50], Reason[60];
    if(!IsAdmin(playerid, 3)) return SendMsg(playerid, 5);
	if(sscanf(params, "uds[50]", ban_target, ban_time, ban_reason)) return SendWarning(playerid, "{BABABA}Usage /tban <playerid> <hours> <reason>");
	if(!IsPlayerConnected(ban_target))  return SendWarning(playerid, "{BABABA}This player is not connected");
    if(ban_time < 1) return SendWarning(playerid, "{BABABA}Invalid ban time!");
    if(ban_time > 300) return SendWarning(playerid, "You cant temp ban for more than 300 hours!");
	if(!IsPlayerConnected(ban_target)) return SendWarning(playerid, "{BABABA}Wrong player id!");
    if(strlen(ban_reason) > 10) return SendClientMessage(playerid, 0xFFFFFF, ""RED_"» Error « {BABABA}Ban reason cant be longer than 10 characters");

	new str[256];
	format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}Admin %s has banned %s (%d) (Reason: %s (%d hours))", gAname(playerid), pName[ban_target], ban_target, ban_reason, ban_time);
    SendClientMessageToAll(AdminInfo, str);

	format(Reason, sizeof(Reason), "%s (%d hours)", ban_reason, ban_time);
    if(GetPVarInt(playerid, "Hidden") || GetPVarInt(playerid, "HideMeBitch")) tBanEX( ban_target, Reason, -255, ban_time*60);
	else tBanEX( ban_target, Reason, playerid, ban_time*60);

	return 1;
}

CMD:gpciban(playerid, params[])
{
      if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
      if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
      if(!IsAdmin(playerid, 5)) return SendMsg(playerid, 5);
      new Reason[64], target;
      if(sscanf(params, "us[64]", target, Reason)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA} /gpciban "GRAY_"[playerid] [reason]");
      if(PlayerInfo[target][pAdmin] > PlayerInfo[playerid][pAdmin]) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command on higher level admins.");
	  if(!IsPlayerConnected(target) || IsPlayerNPC(target))  return SendWarning(playerid, "{BABABA}This player is not connected");
	  if(strlen(Reason) > 10) return SendClientMessage(playerid, 0xFFFFFF, ""RED_"» Error « {BABABA}Ban reason cant be longer than 10 characters");
//      if((!IsPlayerAdmin(playerid)) && (PlayerInfo[target][pAdmin] > 0)) SendWarning(playerid, "You cant ban other admins");
	  new str[256], string[256];
	  format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}Admin %s has banned %s (%d) (Reason: %s)", gAname(playerid), playerid, pName[target], target, Reason);
      SendClientMessageToAll(AdminInfo, str);

      format(string, sizeof(string), "DELETE FROM `bans` WHERE `NAME` = '%s'", pEscName[target]);
      mysql_query(GTADM, string);
      BanEX2( target, Reason, playerid );
      return 1;
}

CMD:ban(playerid, params[])
{
      if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
      if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
      if(!IsAdmin(playerid, 4)) return SendMsg(playerid, 5);
      new Reason[64], target;
      if(sscanf(params, "us[64]", target, Reason)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA} /ban "GRAY_"[playerid] [reason]");
	  if(!IsPlayerConnected(target))  return SendWarning(playerid, "{BABABA}This player is not connected");
	  if(PlayerInfo[target][pAdmin] > PlayerInfo[playerid][pAdmin]) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command on higher level admins.");
	  if(strlen(Reason) > 10) return SendClientMessage(playerid, 0xFFFFFF, ""RED_"» Error « {BABABA}Ban reason cant be longer than 10 characters");
      if(IsPlayerNPC(target) && !strcmp(pName[target], "Jonny"))
	  {
	     SendNpcPM(playerid, "You gonna pay for this");
	     new str[128];
	     format(str, sizeof(str), "Ladies and gentlemen, %s needs a shower", pName[playerid]);
         SetPlayerAttachedObject(playerid, 2, 18729, 7, 0.20, -0.05, -1.54, 0.0, -4.0, -211.0, 1.00, 1.00, 1.00);
         SetPlayerAttachedObject(playerid, 3, 1264, 2, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 1.00, 1.00, 1.00);
         GiveMedal(playerid, 24);
         SendBotMessage(str);
	     return 0;
	  }
	  if(IsPlayerNPC(target)) return 0;
      if(target == INVALID_PLAYER_ID) return SendWarning(playerid, "Player not found");
      if((!IsAdmin(playerid, 10)) && (PlayerInfo[target][pAdmin] > 0)) SendWarning(playerid, "You cant ban other admins");
	  if(playerid == target) return SendMsg(playerid, 7);
	  new str[256];
	  format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}Admin %s has banned %s (%d) (Reason: %s)", pName[playerid], pName[target], target, Reason);
      SendClientMessageToAll(AdminInfo, str);
      if(GetPVarInt(playerid, "Hidden") || GetPVarInt(playerid, "HideMeBitch")) BanEX( target, Reason, -255 );
	  else BanEX( target, Reason, playerid );
      return 1;
}
CMD:unban(playerid, params[])
{
      if(!IsAdmin(playerid, 3)) return SendMsg(playerid, 5);
      new UnName[32], string[168];
//      new unban[128];
      if(sscanf(params, "s[24]", UnName)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA} /unban "GRAY_"<Account Name>");

	  format(string, sizeof(string), "SELECT * FROM `bans` WHERE `NAME` = '%s'", Escape_Name(UnName));
	  mysql_tquery(GTADM, string, "p_Unban", "sd", UnName, playerid);
	  return 1;
}

CMD:baninfo(playerid, params[])
{
      if(!IsAdmin(playerid, 1)) return SendMsg(playerid, 5);
      new UnName[32], string[168];
      if(sscanf(params, "s[32]", UnName)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA} /baninfo "GRAY_"<Account Name>");

	  format(string, sizeof(string), "SELECT * FROM `bans` WHERE `Name` = '%s' LIMIT 1", Escape_Name(UnName));
	  mysql_tquery(GTADM, string, "p_Info", "sd", UnName, playerid);
	  return 1;
}

CMD:unbanip(playerid, params[])
{
    if(!IsAdmin(playerid, 4)) return SendMsg(playerid, 5);
    new unban_ip[25], cmd[128], str[128];
    if(sscanf(params, "s[25]", unban_ip)) return SendWarning(playerid, "/unbanip "GRAY_"<IP>");
    if(strlen(unban_ip) < 5 || strfind(unban_ip, ".", true) == -1) return SendWarning(playerid, "{BABABA}IP is not valid!");

    format(cmd, sizeof(cmd), "unbanip %s", unban_ip);
    SendRconCommand(cmd);
    SendRconCommand("reloadbans");

	format(str, sizeof(str), "-AdminsMsg- Admin %s has unbanned the ip \"%s\"", gAname(playerid), unban_ip);
	foreach (new i : Player)
    {
		if(IsAdmin(playerid, 1))
		{
          SendClientMessage(i, AdminInfo, str);
		}
    }
    return 1;
}
CMD:banip(playerid, params[])
{
    if(!IsAdmin(playerid, 4)) return SendMsg(playerid, 5);
    new unban_ip[25], cmd[128], str[128];
    if(sscanf(params, "s[25]", unban_ip)) return SendWarning(playerid, "/banip "GRAY_"<IP>");
    if(strlen(unban_ip) < 5 || strfind(unban_ip, ".", true) == -1) return SendWarning(playerid, "{BABABA}IP is not valid!");
    if(!IsAdmin(playerid, 10) && strfind(unban_ip, "*", true) != -1) return SendWarning(playerid, "{BABABA}You are not allowed to ban ranges!");


    format(cmd, sizeof(cmd), "banip %s", unban_ip);
    SendRconCommand(cmd);
    SendRconCommand("reloadbans");

	format(str, sizeof(str), "-Ban- Admin %s has banned the ip \"%s\"", gAname(playerid), unban_ip);
	printf("%s", str);
	foreach (new i : Player)
    {
		if(IsAdmin(playerid, 1))
		{
          SendClientMessage(i, AdminInfo, str);
		}
    }
    return 1;
}


/*CMD:blackadd(playerid, params[])
{
    if(!IsAdmin(playerid, 5)) return SendMsg(playerid, 5);
    new target, reason[64], str[128], ip[20];
    if(sscanf(params, "us[64]", target, reason)) return SendWarning(playerid, "/blackadd "GRAY_"<playerid> <Reason>");
	if(!IsPlayerConnected(target))  return SendWarning(playerid, "{BABABA}This player is not connected");
    if(playerid == target) return SendMsg(playerid, 7);
    if(IsPlayerNPC(target) && !strcmp(pName[target], "Jonny")) return SendNpcPM(playerid, "OMGWTFLOLZLMAO");
    if(IsPlayerNPC(target)) return 0;

    GetRangeIP(target, ip);
    format(ip, sizeof(ip), "%s.*.*", ip);
	format(str, sizeof(str), "-AdminsMsg- admin %s has added the ip %s to the blacklist", gAname(playerid), ip);
	foreach (new i : Player)
    {
		if(IsAdmin(playerid, 1))
		{
          SendClientMessage(i, AdminInfo, str);
		}
    }


    new cmd[45];
    format(cmd, sizeof(cmd), "banip %s", ip);
    SendRconCommand(cmd);
	format(str, sizeof(str), "%s (blacklist)", reason);
    if(GetPVarInt(playerid, "Hidden"))  BanEX( target, str, -255 );
	else BanEX( target, str, playerid );
    return 1;
}*/
CMD:addgiftcode(playerid, params[])
{
  //if(PlayerInfo[playerid][UserID] != 4) return 0;
  if(!IsAdmin(playerid, 10)) return 0;
  if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
  if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
  if(!IsAdmin(playerid, 10)) return SendMsg(playerid, 5);
  new baname[24], string[168], type, amount;
  if(sscanf(params, "s[30]dd", baname, type, amount)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA} /addgiftcode "GRAY_"<CODE> <Type> <Amount> *Use /Gifts to see the gift types");

  format(string, sizeof(string), "INSERT INTO `gifts` (`GiftCode` , `GiftType` , `GiftAmount`)VALUES ('%s',  '%d',  '%d');", baname, type, amount);
  mysql_query(GTADM, string);
  SendClientMessage(playerid, -1, "{FF00EA}» Gift « {9D00FF}Gift Code Added!");
  return 1;
}
CMD:gifts(playerid, params[])
{
  if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
  if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
  if(!IsAdmin(playerid, 10)) return SendMsg(playerid, 5);
  ShowPlayerDialog(playerid, 5415, DIALOG_STYLE_MSGBOX, "Gift Types", "0\tMoney\n1\tScore\n2\tPP\n3\tCombat EXP\n4\tFist EXP\n5\tHP EXP\n6\tDealing EXP\n7\tDriving EXP\n8\tGangster EXP\n9\tMedicine EXP\n10\tJustice EXP", "Ok", "");
  return 1;
}
CMD:whiteadd(playerid, params[])
{
  if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
  if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
  if(!IsAdmin(playerid, 5)) return SendMsg(playerid, 5);
  new baname[24], string[168];
  if(sscanf(params, "s[24]", baname)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA} /whiteadd "GRAY_"[Account Name]");

  format(string, sizeof(string), "SELECT `Name` FROM `users` WHERE `Name` = '%s'", Escape_Name(baname));
  mysql_tquery(GTADM, string, "fwhiteadd", "ds", playerid, baname);
  return 1;
}/*
CMD:offlineaddvip(playerid, params[])
{
  if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
  if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
  if(!IsAdmin(playerid, 10)) return SendMsg(playerid, 5);
  new baname[24], string[168], lvl;
  if(sscanf(params, "s[24]d", baname, lvl)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA} /OfflineAddVIP "GRAY_"[Account Name] [Days]");
  foreach (new i : Player) if((!strcmp(pName[i], baname)) && (strlen(pName[i]) > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This player is already online!");
  if((lvl < 0)) return SendClientMessage(playerid, RED, ""RED2_" Usage"RED_" - "GRAY_"/OfflineAddVIP <name> <days>");
  new id=baname[24];
  //============================================================================================================
    if(!lvl) {
        PlayerInfo[id][vipexpiresin] = 0;
        PlayerInfo[id][IsVIP] = 0;
        //======================================================================
        PlayerInfo[id][pVipSkin] = 0;
  		new Query[128];
  		format(Query, sizeof(Query), "UPDATE `users` SET `VipSkin` = 0 WHERE `UserID` = '%d'", PlayerInfo[id][UserID]);
  		mysql_query(GTADM, Query);
  		//======================================================================
  		PlayerInfo[id][pVipJob] = 0;
  		new Query2[128];
  		format(Query2, sizeof(Query2), "UPDATE `users` SET `VipJob` = 0 WHERE `UserID` = '%d'", PlayerInfo[id][UserID]);
  		mysql_query(GTADM, Query2);
  		//======================================================================
  		PlayerInfo[id][pVipWeapon1] = 0;
	    PlayerInfo[id][pVipAmmo1] = 0;
        new Query3[128];
        format(Query3, sizeof(Query3), "UPDATE `users` SET `VipWeap1` = 0, `VipAmmo1` = 0 WHERE `UserID` = '%d'", PlayerInfo[id][UserID]);
	    mysql_query(GTADM, Query3);
	    //======================================================================
	    PlayerInfo[id][pVipWeapon2] = 0;
	    PlayerInfo[id][pVipAmmo2] = 0;
        new Query4[128];
	    format(Query4, sizeof(Query4), "UPDATE `users` SET `VipWeap2` = 0, `VipAmmo2` = 0 WHERE `UserID` = '%d'", PlayerInfo[id][UserID]);
	    mysql_query(GTADM, Query4);
	    //======================================================================
	    PlayerInfo[id][pVipWeapon3] = 0;
        PlayerInfo[id][pVipAmmo3] = 0;
	    new Query5[128];
	    format(Query5, sizeof(Query5), "UPDATE `users` SET `VipWeap3` = 0, `VipAmmo3` = 0 WHERE `UserID` = '%d'", PlayerInfo[id][UserID]);
	    mysql_query(GTADM, Query5);
	    //======================================================================
	    PlayerInfo[id][HeadText][0]='\0';
        new Query6[168];
        format(Query6, sizeof(Query6), "UPDATE `users` SET `HeadText` = 'no' WHERE `UserID` = '%d'", PlayerInfo[id][UserID]);
        mysql_query(GTADM, Query6);
	} else {
		PlayerInfo[id][IsVIP] = 1;
		lvl *= 86400;
	    PlayerInfo[id][vipexpiresin] = gettime() + lvl;
	}
	format(str, sizeof(str), "UPDATE users SET IsVIP = %d, vipexpiresin = %i", PlayerInfo[id][IsVIP], PlayerInfo[id][vipexpiresin]);
	mysql_query(GTADM, str);

	//======================================================================================================================================
  format(string, sizeof(string), "SELECT `Name` FROM `users` WHERE `Name` = '%s'", Escape_Name(baname));
  mysql_tquery(GTADM, string, "osvl", "dsdd", playerid, baname, 1, lvl);
  return 1;
}*/
/*
CMD:offlinesetviplevel(playerid, params[])
{
  if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
  if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
  if(!IsAdmin(playerid, 10)) return SendMsg(playerid, 5);
  new baname[24], string[168], lvl;
  if(sscanf(params, "s[24]d", baname, lvl)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA} /OfflineSetVipLevel "GRAY_"[Account Name] [Points]");
  foreach (new i : Player) if((!strcmp(pName[i], baname)) && (strlen(pName[i]) > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This player is already online!");

  format(string, sizeof(string), "SELECT `Name` FROM `users` WHERE `Name` = '%s'", Escape_Name(baname));
  mysql_tquery(GTADM, string, "osvl", "dsdd", playerid, baname, 1, lvl);
  return 1;
}
*/
CMD:offlinesetvippoints(playerid, params[])
{
  if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
  if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
  if(!IsAdmin(playerid, 10)) return SendMsg(playerid, 5);
  new baname[24], string[168], lvl;
  if(sscanf(params, "s[24]d", baname, lvl)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA} /OfflineSetVipPoints "GRAY_"[Account Name] [Points]");
  foreach (new i : Player) if((!strcmp(pName[i], baname)) && (strlen(pName[i]) > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This player is already online!");

  format(string, sizeof(string), "SELECT `Name` FROM `users` WHERE `Name` = '%s'", Escape_Name(baname));
  mysql_tquery(GTADM, string, "osvl", "dsdd", playerid, baname, 2, lvl);
  return 1;
}
CMD:offlinesetlevel(playerid, params[])
{
  if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
  if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
  if(!IsAdmin(playerid, 10)) return SendMsg(playerid, 5);
  new baname[24], string[168], lvl;
  if(sscanf(params, "s[24]d", baname, lvl)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA} /OfflineSetLevel "GRAY_"[Account Name] [Level 0-6]");
  foreach (new i : Player) if((!strcmp(pName[i], baname)) && (strlen(pName[i]) > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This player is already online!");
  if((lvl > 6) || (lvl < 0)) return SendWarning(playerid, "/OfflineSetLevel "GRAY_"[Account Name] [Level 0-6]");

  format(string, sizeof(string), "SELECT `Name` FROM `users` WHERE `Name` = '%s'", Escape_Name(baname));
  mysql_tquery(GTADM, string, "osvl", "dsdd", playerid, baname, 3, lvl);
  return 1;
}
CMD:offlinerename(playerid, params[])
{
  if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
  if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
  if(!IsAdmin(playerid, 10)) return SendMsg(playerid, 5);
  new baname[24], newname[24], string[168];
  if(sscanf(params, "s[24]s[24]", baname, newname)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA} /offlinerename "GRAY_"[Account Name] [Account New Name]");
  if(!IsValidChars(newname)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Newname contains invalid characters");
  foreach (new i : Player) if((!strcmp(pName[i], baname)) && (strlen(pName[i]) > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This player is already online!");
  foreach (new i : Player) if((!strcmp(pName[i], newname)) && (strlen(pName[i]) > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This name is already taken!");

  format(string, sizeof(string), "SELECT `Name` FROM `users` WHERE `Name` = '%s'", Escape_Name(newname));
  mysql_tquery(GTADM, string, "osvl2", "dss", playerid, baname, newname);
  return 1;
}
CMD:offlinemute(playerid, params[])
{
  if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
  if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
  if(!IsAdmin(playerid, 3)) return SendMsg(playerid, 5);
  new baname[24], string[168], lvl;
  if(sscanf(params, "s[24]d", baname, lvl)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA} /OfflineMute "GRAY_"[Account Name] [Seconds]");
  foreach (new i : Player) if((!strcmp(pName[i], baname)) && (strlen(pName[i]) > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This player is already online!");
  if(lvl > 3600 && !IsAdmin(playerid, 5)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant offline mute for more than 3600 seconds!");
  format(string, sizeof(string), "SELECT `Name` FROM `users` WHERE `Name` = '%s'", Escape_Name(baname));
  mysql_tquery(GTADM, string, "osvl", "dsdd", playerid, baname, 6, lvl);
  printf("-Mute- %s has offline muted %s for %d seconds", pName[playerid], baname, lvl);
  new str[256];
  format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}Admin %s has offline muted %s for %d secs", pName[playerid], Escape_Name(baname), lvl);
  foreach(new i : Player) if(IsAdmin(i, 1)) SendClientMessage(i, -1, str);
  return 1;
}
CMD:offlinejail(playerid, params[])
{
  if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
  if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
  if(!IsAdmin(playerid, 3)) return SendMsg(playerid, 5);
  new baname[24], string[168], lvl;
  if(sscanf(params, "s[24]d", baname, lvl)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA} /OfflineJail "GRAY_"[Account Name] [Seconds]");
  foreach (new i : Player) if((!strcmp(pName[i], baname)) && (strlen(pName[i]) > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This player is already online!");
  if(lvl > 3600 && !IsAdmin(playerid, 5)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant offline jail for more than 3600 seconds!");
  format(string, sizeof(string), "SELECT `Name` FROM `users` WHERE `Name` = '%s'", Escape_Name(baname));
  mysql_tquery(GTADM, string, "osvl", "dsdd", playerid, baname, 7, lvl);
  printf("-Jail- %s has offline jailed %s for %d seconds", pName[playerid], baname, lvl);
  new str[256];
  format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}Admin %s has offline jailed %s for %d secs", pName[playerid], Escape_Name(baname), lvl);
  foreach(new i : Player) if(IsAdmin(i, 1)) SendClientMessage(i, -1, str);
  return 1;
}
forward osvl2(playerid, lolstr[], lolstr2[]);
public osvl2(playerid, lolstr[], lolstr2[])
{
   new string[256];
   new rows, fields;
   cache_get_row_count(rows);
   cache_get_field_count(fields);
   if(rows > 0)
   {
     SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This name is already taken!");
   }
   else
   {
	  format(string, sizeof(string), "SELECT `Name` FROM `users` WHERE `Name` = '%s'", Escape_Name(lolstr));
      mysql_tquery(GTADM, string, "osvl", "dsdd", playerid, lolstr2, 4, 0);
   }
   return 1;
}
forward osvl(playerid, lolstr[], type, lollvl);
public osvl(playerid, lolstr[], type, lollvl)
{
   new str[600];
   new rows, fields, data[50];
   cache_get_row_count(rows);
   cache_get_field_count(fields);
   if(rows > 0)
   {
	 if(type == 1)
	 {
	  //format(str, sizeof(str), "UPDATE `users` SET `IsVIP` = %d WHERE `Name` = '%s'", lollvl, Escape_Name(lolstr));
	 }
	 else if(type == 2)
	 {
	  format(str, sizeof(str), "UPDATE `users` SET `VIP` = %d WHERE `Name` = '%s'", lollvl, Escape_Name(lolstr));
	 }
	 else if(type == 3)
	 {
	  format(str, sizeof(str), "UPDATE `users` SET `Admin` = %d WHERE `Name` = '%s'", lollvl, Escape_Name(lolstr));
	 }
	 else if(type == 4)
	 {
      cache_get_value_index(0, 0, data);
	  format(str, sizeof(str), "UPDATE `users` SET `Name` = '%s' WHERE `Name` = '%s'", Escape_Name(lolstr), data);
	 }
	 else if(type == 5)
	 {
	  format(str, sizeof(str), "UPDATE `users` SET `IsVIP` = %d WHERE `Name` = '%s'", lollvl, Escape_Name(lolstr));
	 }
	 else if(type == 6)///muted
	 {
	  format(str, sizeof(str), "UPDATE `users` SET `Muted` = %d WHERE `Name` = '%s'", lollvl, Escape_Name(lolstr));
	 }
	 else if(type == 7)//jailed
	 {
	  format(str, sizeof(str), "UPDATE `users` SET `Jailed` = %d WHERE `Name` = '%s'", lollvl, Escape_Name(lolstr));
	 }
	 else if(type == 8)//vip
	 {
			if(!lollvl)
			{
		  		format(str, sizeof(str), "UPDATE `users` SET IsVIP = 0, vipexpiresin = 0, `VipSkin` = 0, `VipJob` = 0, `VipWeap1` = 0, `VipAmmo1` = 0, `VipWeap2` = 0, `VipAmmo2` = 0, `VipWeap3` = 0, `VipAmmo3` = 0, `HeadText` = 'no' WHERE `Name` = '%s'", Escape_Name(lolstr));
			}
			else
			{
				new expire;
				lollvl *= 86400;
			    expire = gettime() + lollvl;
    			format(str, sizeof(str), "UPDATE users SET `IsVIP` = '1', `vipexpiresin` = '%i' WHERE `Name` = '%s'", expire, Escape_Name(lolstr));
			}

	 }
	 mysql_query(GTADM, str);
	 SendClientMessage(playerid, -1, "{00904C} » Account settings «{00D9AD} User account has been modified!");
   }
   else SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This account doesnt exist!");
   return 1;
}

CMD:whiteremove(playerid, params[])
{
  if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
  if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
  if(!IsAdmin(playerid, 5)) return SendMsg(playerid, 5);
  new baname[24], string[168];
  if(sscanf(params, "s[24]", baname)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA} /whiteremove "GRAY_"[Account Name]");

  format(string, sizeof(string), "SELECT `name` FROM `whitelist` WHERE `name` = '%s'", Escape_Name(baname));
  mysql_tquery(GTADM, string, "fwhiteremove", "ds", playerid, baname);
  return 1;
}

CMD:usegiftcode(playerid, params[])
{
  if((GetPVarInt(playerid, "LOGGED")) == 2) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be registered/logged in to use this command");
  if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
  if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
  new baname[24], string[168];
  if(sscanf(params, "s[24]", baname)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA} /usegiftcode [Code]");


  format(string, sizeof(string), "SELECT TIMESTAMPDIFF(HOUR, NOW(), DATE_ADD(last_gift_use, INTERVAL 24 HOUR)) FROM `users` WHERE `UserID` = '%d'", PlayerInfo[playerid][UserID]);
  mysql_tquery(GTADM, string, "usecode2", "ds", playerid, baname);
  return 1;
}

forward usecode2(playerid, code[]);
public usecode2(playerid, code[])
{
   new string[256];
   new last, rows, fields;
   cache_get_row_count(rows);
   cache_get_field_count(fields);
   if(rows > 0)
   {
      cache_get_value_index_int(0, 0, last);
      printf("%d", last);
	  if(last <= 0)
	  {
		  format(string, sizeof(string), "SELECT `GiftType`, `GiftAmount` FROM `gifts` WHERE `GiftCode` = '%s'", Escape_Name(code));
		  mysql_tquery(GTADM, string, "usecode", "ds", playerid, code);
	  }
	  else SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You can only use one gift code in every 24 Hours!");
   }
   else SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This code does not exist (or has been already used)! ");
   return 1;
}

forward usecode(playerid, code[]);
public usecode(playerid, code[])
{
   new string[256];
   new rows, fields, type, amount;
   cache_get_row_count(rows);
   cache_get_field_count(fields);
   if(rows > 0)
   {
      cache_get_value_name_int(0, "GiftType", type);
      cache_get_value_name_int(0, "GiftAmount", amount);
	  RewardPlayer(playerid, type, amount);
	  format(string, sizeof(string), "DELETE FROM `gifts` WHERE `GiftCode` = '%s'", Escape_Name(code));
	  mysql_query(GTADM, string);
	  format(string, sizeof(string), "UPDATE `users` SET `last_gift_use` = CURRENT_TIMESTAMP WHERE `UserID` = '%d'", PlayerInfo[playerid][UserID]);
	  mysql_query(GTADM, string);
   }
   else SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This code does not exist (or has already been used)! ");
   return 1;
}
stock RewardPlayer(playerid, type, amount)
{
  new str[128];
  switch(type)
  {
	  case 0:
	  {
		  GivePlayerMoneyEX(playerid, amount);
		  format(str, sizeof(str), "{FF00EA}» Gift « {9D00FF}%s (%d) has earned $%d from a gift code!", pName[playerid], playerid, amount);
	  }
	  case 1:
	  {
		  format(str, sizeof(str), "{FF00EA}» Gift « {9D00FF}%s (%d) has earned %d score points from a gift code!", pName[playerid], playerid, amount);
		  ScoreTDupdate(playerid, amount);
	  }
	  case 2:
	  {
		  format(str, sizeof(str), "{FF00EA}» Gift « {9D00FF}%s (%d) has earned %d PP from a gift code!", pName[playerid], playerid, amount);
		  GivePP(playerid, amount);
	  }/*
	  case 3:
	  {
		    format(str, sizeof(str), "{FF00EA}» Gift « {9D00FF}%s (%d) has earned Second Car Permission from a gift code!", pName[playerid], playerid, amount);
			PlayerInfo[playerid][VipItems][0] = 1;
			SendClientMessage(playerid, 0xBBF582FF, "-Second Car- {6AC213} You are now able to use the command (/Car2)");
			SendClientMessage(playerid, 0xBBF582FF, "-Second Car- {6AC213} To set your second vehicle use the command (/SetSecondCar)");
			SendClientMessage(playerid, GRAY, "-NOTE- Only CarColor , Wheels and Nitro will save on your second car");
			new Query[168];
			format(Query, sizeof(Query), "UPDATE `users` SET `VipFe1` = 1 WHERE `UserID` = '%d'", PlayerInfo[playerid][UserID]);
			mysql_query(GTADM, Query);
	  }
	  case 4:
	  {
			PlayerInfo[playerid][VipItems][2] = 1;
		    format(str, sizeof(str), "{FF00EA}» Gift « {9D00FF}%s (%d) has earned Ammunation-Discount from a gift code!", pName[playerid], playerid);
			SendClientMessage(playerid, 0xBBF582FF, "-Discount- {6AC213} You have got a discount of 1/4 for buying spawn weapons from any AMMU-Nation Store");

			new Query[168];
			format(Query, sizeof(Query), "UPDATE `users` SET `VipFe3` = 1 WHERE `UserID` = '%d'", PlayerInfo[playerid][UserID]);
			mysql_query(GTADM, Query);
	  }
	  case 5:
	  {
			PlayerInfo[playerid][VipItems][3] = 1;
		    format(str, sizeof(str), "{FF00EA}» Gift « {9D00FF}%s (%d) has earned CarDealer-Discount from a gift code!", pName[playerid], playerid);
			SendClientMessage(playerid, 0xBBF582FF, "-Discount- {6AC213} You have got a discount of 1/4 for buying cars from any car dealer");

			new Query[168];
			format(Query, sizeof(Query), "UPDATE `users` SET `VipFe4` = 1 WHERE `UserID` = '%d'", PlayerInfo[playerid][UserID]);
			mysql_query(GTADM, Query);
	  }*/
	  case 3..10:
	  {

		    format(str, sizeof(str), "{FF00EA}» Gift « {9D00FF}%s (%d) has earned %d %s EXP from a gift code!", pName[playerid], playerid, amount, skullname[type-3]);
            UpdateSkills(playerid, type-3, amount);

	  }
  }
  SendClientMessageToAll(-1, str);
}

CMD:playurl(playerid, params[])
{
      if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
      if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
      if(!IsAdmin(playerid, 6)) return SendMsg(playerid, 5);
      new URL[128];
      if(sscanf(params, "s[128]", URL)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA} /playurl "GRAY_"[URL]");
	  foreach (new i : Player) PlayAudioStreamForPlayer(i, URL);
      return 1;
}

CMD:kick(playerid, params[])
{
      if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
      if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
      if(!IsAdmin(playerid, 3)) return SendMsg(playerid, 5);
      new Reason[50], target;
      if(sscanf(params, "us[50]", target, Reason)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA} /kick "GRAY_"[playerid] [reason]");
	  if(!IsPlayerConnected(target))  return SendWarning(playerid, "{BABABA}This player is not connected");
	  if(PlayerInfo[target][pAdmin] > PlayerInfo[playerid][pAdmin]) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command on higher level admins.");
      if(IsPlayerNPC(target) && !strcmp(pName[target], "Jonny"))
	  {
	     SendNpcPM(playerid, "You gonna pay for this");
	     new str[128];
	     format(str, sizeof(str), "Ladies and gentlemen, %s needs a shower", pName[playerid]);
         SetPlayerAttachedObject(playerid, 2, 18729, 7, 0.20, -0.05, -1.54, 0.0, -4.0, -211.0, 1.00, 1.00, 1.00);
         SetPlayerAttachedObject(playerid, 3, 1264, 2, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 1.00, 1.00, 1.00);
         GiveMedal(playerid, 24);
         SendBotMessage(str);
	     return 0;
	  }
      if(IsPlayerNPC(target)) return 0;
	  if(playerid == target) return SendMsg(playerid, 7);

      KickEX(target, Reason, playerid);
      return 1;
}
/*
CMD:setviplevel(playerid, params[])
{
    if(!IsAdmin(playerid, 10)) return SendMsg(playerid, 5);
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    new id, lvl, str[128];
	if(sscanf(params, "ud", id, lvl)) return SendClientMessage(playerid, RED, ""RED2_" Usage"RED_" - "GRAY_"/SetVip <id> <level>");
    if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
    if(IsPlayerNPC(id) && !strcmp(pName[id], "Jonny")) return SendNpcPM(playerid, "im the most important");
    if(IsPlayerNPC(id)) return 0;
	if(lvl == PlayerInfo[id][IsVIP]) return SendWarning(playerid, "{BABABA}The player is already have this amount of VIP Points.");
	if((lvl < 0)) return SendClientMessage(playerid, RED, ""RED2_" Usage"RED_" - "GRAY_"/SetVIPLevel <id> <level>");
    if((GetPVarInt(id, "LOGGED")) == 2) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This player is not registered");
	PlayerInfo[id][IsVIP] = lvl;
	if(playerid != id)
	{
  	   format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}Admin %s has set your VIP-Level to "GRAY_"%d", gAname(playerid), lvl);
       SendClientMessage(id, AdminInfo, str);
	   format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}You have set %s's VIP-Level to "GRAY_"%d", pName[id], lvl);
       SendClientMessage(playerid, AdminInfo, str);
    }
	if(playerid == id)
	{
	   format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}You have set your own VIP-Level to "GRAY_"%d", lvl);
       SendClientMessage(playerid, AdminInfo, str);
	}
	new Query[168];
	format(Query, sizeof(Query), "UPDATE `users` SET `IsVIP` = %d WHERE `UserID` = '%d'", PlayerInfo[id][IsVIP], PlayerInfo[id][UserID]);
	mysql_query(GTADM, Query);
	return 1;
}*/
CMD:offlineaddvip(playerid, params[])
{
  if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
  if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
  if(!IsAdmin(playerid, 10)) return SendMsg(playerid, 5);
  new baname[24], string[168], lvl;
  if(sscanf(params, "s[24]d", baname, lvl)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA} /offlineaddvip "GRAY_"[Account Name] [Days]");
  foreach (new i : Player) if((!strcmp(pName[i], baname)) && (strlen(pName[i]) > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This player is already online!");
  if(lvl < 0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA} /offlineaddvip "GRAY_"[Account Name] [Days]");

  format(string, sizeof(string), "SELECT `Name` FROM `users` WHERE `Name` = '%s'", Escape_Name(baname));
  mysql_tquery(GTADM, string, "osvl", "dsdd", playerid, baname, 8, lvl);
  return 1;
}
CMD:addvip(playerid, params[])
{
    if(!IsAdmin(playerid, 10))
		return SendMsg(playerid, 5);
    new id, lvl, lvl2;
	if(sscanf(params, "udD(0)", id, lvl, lvl2))
		return SendClientMessage(playerid, RED, ""RED2_" Usage"RED_" - "GRAY_"/AddVip <id> <days> <hours>");
    if(IsPlayerNPC(id) && !strcmp(pName[id], "Jonny")) return SendNpcPM(playerid, "im the most important");
    if(!IsPlayerConnected(id) || IsPlayerNPC(id))
		return SendWarning(playerid, "{BABABA}That player is not connected.");
/*
	if(lvl == PlayerInfo[id][IsVIP])
	{
	    new string[128];
	    format(string, sizeof(string), ""RED_"» Error « {BABABA}That player is already VIP level %i.", lvl);
		return SendClientMessage(playerid, RED, string);
	}
*/
	if((lvl < 0 || lvl2 < 0)) return SendClientMessage(playerid, RED, ""RED2_" Usage"RED_" - "GRAY_"/AddVIP <id> <days> <hours>");
    if((GetPVarInt(id, "LOGGED")) == 2) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This player is not registered");

	new str[128];
	if(playerid == id)
	{
	   format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}You have set your own VIP to expire in "GRAY_"%d days and %d hours", lvl, lvl2);
       SendClientMessage(playerid, AdminInfo, str);
	}
	else
	{
  	   format(str, sizeof(str), "{3BB023}» Admin action «  {ABFF85}Admin %s has set your VIP to expire in "GRAY_"%d days and %d hours", gAname(playerid), lvl, lvl2);
       SendClientMessage(id, AdminInfo, str);
	   format(str, sizeof(str), "{3BB023}» Admin action «  {ABFF85}You have set %s's VIP to expire in "GRAY_"%d days and %d hours", pName[id], lvl, lvl2);
       SendClientMessage(playerid, AdminInfo, str);
    }
    if(!lvl && !lvl2)
	{
        PlayerInfo[id][vipexpiresin] = 0;
        PlayerInfo[id][IsVIP] = 0;
        SendClientMessage(id, -1, "Your VIP has expired.");
        ForceClassSelection(id);
        SetPlayerHealth(id, 0.0);
        //======================================================================
        PlayerInfo[id][pVipSkin] = 0;
        SetPlayerSkin(id, 0);
  		new Query[128];
  		format(Query, sizeof(Query), "UPDATE `users` SET `VipSkin` = 0 WHERE `UserID` = '%d'", PlayerInfo[id][UserID]);
  		mysql_query(GTADM, Query);
  		//======================================================================
  		PlayerInfo[id][pVipJob] = 0;
  		new Query2[128];
  		format(Query2, sizeof(Query2), "UPDATE `users` SET `VipJob` = 0 WHERE `UserID` = '%d'", PlayerInfo[id][UserID]);
  		mysql_query(GTADM, Query2);
  		//======================================================================
  		PlayerInfo[id][pVipWeapon1] = 0;
	    PlayerInfo[id][pVipAmmo1] = 0;
        new Query3[128];
        format(Query3, sizeof(Query3), "UPDATE `users` SET `VipWeap1` = 0, `VipAmmo1` = 0 WHERE `UserID` = '%d'", PlayerInfo[id][UserID]);
	    mysql_query(GTADM, Query3);
	    //======================================================================
	    PlayerInfo[id][pVipWeapon2] = 0;
	    PlayerInfo[id][pVipAmmo2] = 0;
        new Query4[128];
	    format(Query4, sizeof(Query4), "UPDATE `users` SET `VipWeap2` = 0, `VipAmmo2` = 0 WHERE `UserID` = '%d'", PlayerInfo[id][UserID]);
	    mysql_query(GTADM, Query4);
	    //======================================================================
	    PlayerInfo[id][pVipWeapon3] = 0;
        PlayerInfo[id][pVipAmmo3] = 0;
	    new Query5[128];
	    format(Query5, sizeof(Query5), "UPDATE `users` SET `VipWeap3` = 0, `VipAmmo3` = 0 WHERE `UserID` = '%d'", PlayerInfo[id][UserID]);
	    mysql_query(GTADM, Query5);
	    //======================================================================
	    PlayerInfo[id][HeadText][0]='\0';
        new Query6[168];
        format(Query6, sizeof(Query6), "UPDATE `users` SET `HeadText` = 'no' WHERE `UserID` = '%d'", PlayerInfo[id][UserID]);
        mysql_query(GTADM, Query6);
	}
	else
	{
		PlayerInfo[id][IsVIP] = 1;
		lvl2 *=3600;
		lvl *= 86400;
	    PlayerInfo[id][vipexpiresin] = gettime() + lvl + lvl2;
	}
	format(str, sizeof(str), "UPDATE users SET IsVIP = %d, vipexpiresin = %i WHERE UserID = %d", PlayerInfo[id][IsVIP], PlayerInfo[id][vipexpiresin], PlayerInfo[id][UserID]);
	mysql_query(GTADM, str);
	return 1;
}
CMD:setvippoints(playerid, params[])
{
    if(!IsAdmin(playerid, 10)) return SendMsg(playerid, 5);
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    new id, lvl, str[128];
	if(sscanf(params, "ud", id, lvl)) return SendClientMessage(playerid, RED, ""RED2_" Usage"RED_" - "GRAY_"/SetVIPPoints <id> <points>");
    if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
    if(IsPlayerNPC(id) && !strcmp(pName[id], "Jonny")) return SendNpcPM(playerid, "im the most important");
    if(IsPlayerNPC(id)) return 0;
	if(lvl == PlayerInfo[id][pVip]) return SendWarning(playerid, "{BABABA}The player is already have this amount of VIP Points.");
	if((lvl < 0)) return SendClientMessage(playerid, RED, ""RED2_" Usage"RED_" - "GRAY_"/SetVIPPoints <id> <points>");
    if((GetPVarInt(id, "LOGGED")) == 2) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This player is not registered");
	if(PlayerInfo[id][IsVIP] == 0) return SendWarning(playerid, "{BABABA}You cant give VIP Points to a non vip player.");
	PlayerInfo[id][pVip] = lvl;
	if(playerid != id)
	{
  	   format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}Admin %s has set your VIP-Points to "GRAY_"%d", gAname(playerid), lvl);
       SendClientMessage(id, AdminInfo, str);
	   format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}You have set %s's VIP-Points to "GRAY_"%d", pName[id], lvl);
       SendClientMessage(playerid, AdminInfo, str);
    }
	if(playerid == id)
	{
	   format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}You have set your own VIP-Points to "GRAY_"%d", lvl);
       SendClientMessage(playerid, AdminInfo, str);
	}
	new Query[168];
	format(Query, sizeof(Query), "UPDATE `users` SET `VIP` = %d WHERE `UserID` = '%d'", PlayerInfo[id][pVip], PlayerInfo[id][UserID]);
	mysql_query(GTADM, Query);
	return 1;
}
CMD:setlevel(playerid, params[])
{

    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(!IsAdmin(playerid, 10)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You are not authorized to use this command.");
//    if(!IsAdmin(playerid, 10)) return SendMsg(playerid, 5);
    new id, lvl;
	if(sscanf(params, "ud", id, lvl)) return SendClientMessage(playerid, RED, ""RED2_" Usage"RED_" - "GRAY_"/SetLevel <id> <level>");
	if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
    if(IsPlayerNPC(id)) return SendNpcPM(playerid, "Fool"), GiveMedal(playerid, 24);
    if((GetPVarInt(id, "LOGGED")) == 2) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This player is not registered");
	if(lvl == PlayerInfo[id][pAdmin]) return SendWarning(playerid, "{BABABA}The player is already in that admin level.");
	if((lvl > 6) || (lvl < 0)) return SendClientMessage(playerid, RED, ""RED2_" Usage"RED_" - "GRAY_"/SetLevel <id> <level(0-6)>");
	new str[128];
    format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}Admin %s has set your admin level to %d", gAname(playerid), lvl);
 	SendClientMessage(id, AdminInfo, str);
    format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}You have set %s's admin level to %d", pName[id], lvl);
    SendClientMessage(playerid, AdminInfo, str);
    if(lvl == 0)
	{
	   ShowPlayerDialog(id, 87454, DIALOG_STYLE_MSGBOX, "Demoted", ""RED_"Demoted!\n"LIGHTYELLOW_"You are no longer an admin", "Ok", "");
	}
	else if(lvl > PlayerInfo[id][pAdmin])
	{
       new str2[256];
  	   format(str2, sizeof(str2), ""GREENBLUE_"Congratulations!\n"LIGHTYELLOW_"You have been hired as a level %d admin by %s\n"LIGHTYELLOW_" use (/acmds) to check the available admin commands", lvl, pName[playerid]);
	   ShowPlayerDialog(id, 87454, DIALOG_STYLE_MSGBOX, "Promoted", str2, "Ok", "");
	   PlayerPlaySound(id, 5450 , 0.0, 0.0, 0.0);
	}
	else if(lvl < PlayerInfo[id][pAdmin])
	{
       new str2[256];
  	   format(str2, sizeof(str2), ""RED_"Demoted!\n"LIGHTYELLOW_"You have been demoted to admin level %d by %s\n"LIGHTYELLOW_" use (/acmds) to check the available admin commands", lvl, pName[playerid]);
	   ShowPlayerDialog(id, 87454, DIALOG_STYLE_MSGBOX, "Demoted", str2, "Ok", "");
	}
	PlayerInfo[id][pAdmin] = lvl;
    new Query[168];
    format(Query, sizeof(Query), "UPDATE `users` SET `Admin` = %d WHERE `Name` = '%s'", PlayerInfo[id][pAdmin], Escape_Name(pName[id]));
    mysql_query(GTADM, Query);


	return 1;
}
CMD:setraceadmin(playerid, params[])
{
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(!IsAdmin(playerid, 10)) return SendMsg(playerid, 5);
    new id;
	if(sscanf(params, "u", id)) return SendClientMessage(playerid, RED, ""RED2_" Usage"RED_" - "GRAY_"/SetRaceAdmin <id>");
	if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
	if(PlayerInfo[id][pRaceAdmin] > 0) return SendWarning(playerid, "{BABABA}This player is already a race admin");
    if(IsPlayerNPC(id) && !strcmp(pName[id], "Jonny")) return SendNpcPM(playerid, "i'll race you to your moms bed"), GiveMedal(playerid, 24);
    if(IsPlayerNPC(id)) return 0;
	new str[256];
	format(str, sizeof(str), ""GREENBLUE_"Congratulations!\n"LIGHTYELLOW_"You have been hired as a race admin by %s\n"LIGHTYELLOW_" use (/acmds) to check the available race admin commands", pName[playerid]);
	ShowPlayerDialog(id, 87454, DIALOG_STYLE_MSGBOX, "Promoted", str, "Ok", "");
    PlayerInfo[id][pRaceAdmin]=1;

    new Query[168];
    format(Query, sizeof(Query), "UPDATE `users` SET `RaceAdmin` = %d WHERE `Name` = '%s'", PlayerInfo[id][pRaceAdmin], Escape_Name(pName[id]));
    mysql_query(GTADM, Query);


	new str2[128];
    format(str2, sizeof(str2), "{3BB023}» Admin action « {ABFF85}Admin %s has hired you as a race admin", gAname(playerid));
 	SendClientMessage(id, AdminInfo, str2);
    format(str2, sizeof(str2), "You have hired %s as a race admin", pName[id]);
    SendClientMessage(playerid, AdminInfo, str2);
	PlayerPlaySound(id, 5450 , 0.0, 0.0, 0.0);
	return 1;
}

CMD:setparkouradmin(playerid, params[])
{
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(!IsAdmin(playerid, 10)) return SendMsg(playerid, 5);
    new id;
	if(sscanf(params, "u", id)) return SendClientMessage(playerid, RED, ""RED2_" Usage"RED_" - "GRAY_"/SetParkourAdmin <id>");
	if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
	if(PlayerInfo[id][pOurAdmin] > 0) return SendWarning(playerid, "{BABABA}This player is already a race admin");
    if(IsPlayerNPC(id) && !strcmp(pName[id], "Jonny")) return SendNpcPM(playerid, "i'll race you to your moms bed"), GiveMedal(playerid, 24);
    if(IsPlayerNPC(id)) return 0;
	new str[256];
	format(str, sizeof(str), ""GREENBLUE_"Congratulations!\n"LIGHTYELLOW_"You have been hired as a parkour admin by %s\n"LIGHTYELLOW_" use (/acmds) to check the available parkour admin commands", pName[playerid]);
	ShowPlayerDialog(id, 87454, DIALOG_STYLE_MSGBOX, "Promoted", str, "Ok", "");
    PlayerInfo[id][pOurAdmin]=1;

    new Query[168];
    format(Query, sizeof(Query), "UPDATE `users` SET `ParkourAdmin` = %d WHERE `Name` = '%s'", PlayerInfo[id][pOurAdmin], Escape_Name(pName[id]));
    mysql_query(GTADM, Query);


	new str2[128];
    format(str2, sizeof(str2), "{3BB023}» Admin action « {ABFF85}Admin %s has hired you as a parkour admin", gAname(playerid));
 	SendClientMessage(id, AdminInfo, str2);
    format(str2, sizeof(str2), "You have hired %s as a parkour admin", pName[id]);
    SendClientMessage(playerid, AdminInfo, str2);
	PlayerPlaySound(id, 5450 , 0.0, 0.0, 0.0);
	return 1;
}


CMD:setcwadmin(playerid, params[])
{
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(!IsAdmin(playerid, 10)) return SendMsg(playerid, 5);
    new id;
	if(sscanf(params, "u", id)) return SendClientMessage(playerid, RED, ""RED2_" Usage"RED_" - "GRAY_"/SetCwADmin <id>");
	if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
	if(PlayerInfo[id][pCwAdmin] > 0) return SendWarning(playerid, "{BABABA}This player is already a Clan War admin");
    if(IsPlayerNPC(id) && !strcmp(pName[id], "Jonny")) return SendNpcPM(playerid, "really?"), GiveMedal(playerid, 24);
    if(IsPlayerNPC(id)) return 0;
	new str[256];
	format(str, sizeof(str), ""GREENBLUE_"Congratulations!\n"LIGHTYELLOW_"You have been hired as a clan war admin by %s\n"LIGHTYELLOW_" use (/acmds) to check the available race admin commands", pName[playerid]);
	ShowPlayerDialog(id, 87454, DIALOG_STYLE_MSGBOX, "Promoted", str, "Ok", "");
    PlayerInfo[id][pCwAdmin]=1;

    new Query[168];
    format(Query, sizeof(Query), "UPDATE `users` SET `CwAdmin` = %d WHERE `Name` = '%s'", PlayerInfo[id][pCwAdmin], Escape_Name(pName[id]));
    mysql_query(GTADM, Query);

	new str2[128];
    format(str2, sizeof(str2), "{3BB023}» Admin action « {ABFF85}Admin %s has hired you as a clan war admin", gAname(playerid));
 	SendClientMessage(id, AdminInfo, str2);
    format(str2, sizeof(str2), "You have hired %s as a clan war admin", pName[id]);
    SendClientMessage(playerid, AdminInfo, str2);
	PlayerPlaySound(id, 5450 , 0.0, 0.0, 0.0);
	return 1;
}
CMD:deletecwadmin(playerid, params[])
{
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(!IsAdmin(playerid, 10)) return SendMsg(playerid, 5);
    new id;
	if(sscanf(params, "u", id)) return SendClientMessage(playerid, RED, ""RED2_" Usage"RED_" - "GRAY_"/DeleteCwAdmin <id>");
	if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
	if(PlayerInfo[id][pCwAdmin] == 0) return SendWarning(playerid, "{BABABA}This player is not a Clan War admin");
    if(IsPlayerNPC(id) && !strcmp(pName[id], "Jonny")) return SendNpcPM(playerid, "Fool, that doesn't make any sense"), GiveMedal(playerid, 24);
    if(IsPlayerNPC(id)) return 0;
	ShowPlayerDialog(id, 87454, DIALOG_STYLE_MSGBOX, "Promoted", ""RED_"Demoted!\n"LIGHTYELLOW_"You are no longer a clan war admin", "Ok", "");
    PlayerInfo[id][pCwAdmin]=0;

    new Query[168];
    format(Query, sizeof(Query), "UPDATE `users` SET `CwAdmin` = %d WHERE `Name` = '%s'", PlayerInfo[id][pCwAdmin], Escape_Name(pName[id]));
    mysql_query(GTADM, Query);

	new str2[128];
    format(str2, sizeof(str2), "{3BB023}» Admin action « {ABFF85}Admin %s has removed your clan war admin level", gAname(playerid));
 	SendClientMessage(id, AdminInfo, str2);
    format(str2, sizeof(str2), "You have removed %s's clan war admin level", pName[id]);
    SendClientMessage(playerid, AdminInfo, str2);
	return 1;
}
CMD:deleteraceadmin(playerid, params[])
{
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(!IsAdmin(playerid, 10)) return SendMsg(playerid, 5);
    new id;
	if(sscanf(params, "u", id)) return SendClientMessage(playerid, RED, ""RED2_" Usage"RED_" - "GRAY_"/deleteraceadmin <id>");
	if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
    if(IsPlayerNPC(id) && !strcmp(pName[id], "Jonny")) return SendNpcPM(playerid, "Fool, that doesn't make any sense"), GiveMedal(playerid, 24);
    if(IsPlayerNPC(id)) return 0;
	if(PlayerInfo[id][pRaceAdmin] == 0) return SendWarning(playerid, "{BABABA}This player is not a Race admin");
	ShowPlayerDialog(id, 87454, DIALOG_STYLE_MSGBOX, "Promoted", ""RED_"Demoted!\n"LIGHTYELLOW_"You are no longer a race admin", "Ok", "");
    PlayerInfo[id][pRaceAdmin]=0;

    new Query[168];
    format(Query, sizeof(Query), "UPDATE `users` SET `RaceAdmin` = %d WHERE `Name` = '%s'", PlayerInfo[id][pRaceAdmin], Escape_Name(pName[id]));
    mysql_query(GTADM, Query);

	new str2[128];
    format(str2, sizeof(str2), "{3BB023}» Admin action « {ABFF85}Admin %s has removed your race admin level", gAname(playerid));
 	SendClientMessage(id, AdminInfo, str2);
    format(str2, sizeof(str2), "You have removed %s's race admin level", pName[id]);
    SendClientMessage(playerid, AdminInfo, str2);
	return 1;
}

CMD:bank(playerid)
{
  if(IsInFight(playerid)) return SendMsg(playerid, 2);
  if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
  if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
  if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
  if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
  if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");

  new m=CheckTeleMoney(playerid, 3000);
  if(GetPlayerMoneyEx(playerid) < m) return SendMoneyMSG(playerid, m);
  GivePlayerMoneyEX(playerid, m*-1, 1);
  switch (GetPlayerClosestBank(playerid))
  {
    case BANK_1 : TeleportPlayer(playerid, -834.0406, 1496.5610, 18.7154, 271.7514, 0);
    case BANK_2 : TeleportPlayer(playerid, -185.9201, 1039.6997, 19.5938, 176.7214, 0);
    case BANK_3 : TeleportPlayer(playerid, 1824.2734, -1842.5873, 13.4141, 269.1516, 0);
    case BANK_4 : TeleportPlayer(playerid, -1911.7802, 486.7261, 35.1719, 272.0165, 0);
    case BANK_5 : TeleportPlayer(playerid, 2165.4414, 2009.1182, 10.8203, 174.6008, 0);
	case BANK_6 : TeleportPlayer(playerid, -1555.4460, -2752.8757, 48.5391, 56.7296, 0);
	case BANK_7 : TeleportPlayer(playerid, 1462.5032, -1037.1724, 23.6563, 357.3435, 0);
  }
  SendTeleMsg(playerid, "The Closest Bank", "Bank");
  return 1;
}
CMD:tow(playerid)
{
   if(GetPVarInt(playerid, "AFK")) return SendWarning(playerid, "you cant use this command in AFK Mode type (/back) then try again");
   if(!IsPlayerInAnyVehicle(playerid)) return SendWarning(playerid, "you must be in a vehicle to use this command");
   if(PlayerInfo[playerid][premiumItems][0] != 1 && PlayerInfo[playerid][IsVIP] == 0 && !IsAdmin(playerid, 1)) return SendMsg(playerid, 5);
   if(GetPlayerState(playerid) != 2) return SendWarning(playerid, "You must be a driver of a vehicle to use this command");

   new Float:pX, Float:pY, Float:pZ;
   GetPlayerPos(playerid, pX, pY, pZ);
   new Float:vvX, Float:vvY, Float:vvZ;
   new Found=0;
   new vid=0;
   while((vid<MAX_VEHICLES)&&(!Found))
   {
      vid++;
      GetVehiclePos(vid, vvX, vvY, vvZ);
      if  ((floatabs(pX-vvX)<7.0)&&(floatabs(pY-vvY)<7.0)&&(floatabs(pZ-vvZ)<7.0)&&(vid!=GetPlayerVehicleID(playerid)))
      {
         Found=1;
         if  (IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
         {
              DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
         }
         AttachTrailerToVehicle(vid, GetPlayerVehicleID(playerid));
      }
   }
   if (!Found)
   {
      SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}There is no car in your range to tow.");
   }
   return 1;
}
CMD:jump(playerid)
{
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");

   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);


   new m=CheckTeleMoney(playerid, 3000);
   if(GetPlayerMoneyEx(playerid) < m) return SendMoneyMSG(playerid, m);
   GivePlayerMoneyEX(playerid, m*-1, 1);

   TeleportPlayer(playerid, 1542.9836, -1352.3636, 329.4724, 181.9508, 0); // jump
   SendTeleMsg(playerid, "Los Santos SkyScraper", "Jump");

   return 1;
}

CMD:locolow(playerid)
{
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");

   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);

   new m=CheckTeleMoney(playerid, 3000);
   if(GetPlayerMoneyEx(playerid) < m) return SendMoneyMSG(playerid, m);
   GivePlayerMoneyEX(playerid, m*-1, 1);

   TeleportPlayer(playerid, 2644.6462, -2017.9552, 13.5521, 181.5526, 0); // locolow

   SendTeleMsg(playerid, "Loco Low Lowrider", "Locolow");
   return 1;
}

CMD:transls(playerid)
{
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");

   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");

   new m=CheckTeleMoney(playerid, 3000);
   if(GetPlayerMoneyEx(playerid) < m) return SendMoneyMSG(playerid, m);
   GivePlayerMoneyEX(playerid, m*-1, 1);

   TeleportPlayer(playerid, 1041.4203, -1036.1045, 31.7283, 0.5416, 0); // transls
   SendTeleMsg(playerid, "Transfender of Los Santos", "TransLS");
   return 1;
}
CMD:buyweapons(playerid)
{
   if(pInGW[playerid])  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command during a gangwar!");
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(pLevel[playerid][combat] < 50) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must have at least 50 combat levels to use this command!");
   ShowWeaponDialog(playerid);
   /*new str14[128];
   format(str14, sizeof(str14), "{ACACAC}» Weapons «{71A3F5} %s has used the command ", pName[playerid]);
   SendClientMessageToAll(0xF86EFFFF, str14);*/
   return 1;
}
CMD:ammuls(playerid)
{
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");

   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);

   new m=CheckTeleMoney(playerid, 3000);
   if(GetPlayerMoneyEx(playerid) < m) return SendMoneyMSG(playerid, m);
   GivePlayerMoneyEX(playerid, m*-1, 1);

   TeleportPlayer(playerid, 1355.8066, -1279.2745, 13.3754, 270.9041, 0); // ammuls
   SendTeleMsg(playerid, "Ammunation of Los Santos", "AmmuLS");

   return 1;
}

CMD:ammusf(playerid)
{
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");

   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");

   new m=CheckTeleMoney(playerid, 3000);
   if(GetPlayerMoneyEx(playerid) < m) return SendMoneyMSG(playerid, m);
   GivePlayerMoneyEX(playerid, m*-1, 1);

   TeleportPlayer(playerid, -2625.6606, 215.3046, 4.4779, 178.1291, 0); // ammusf
   SendTeleMsg(playerid, "Ammunation of San Fierro", "AmmuSF");

   return 1;
}


CMD:waa(playerid)
{
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");

   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");

   new m=CheckTeleMoney(playerid, 3000);
   if(GetPlayerMoneyEx(playerid) < m) return SendMoneyMSG(playerid, m);
   GivePlayerMoneyEX(playerid, m*-1, 1);

   TeleportPlayer(playerid, -2706.7500, 217.8762, 4.1797, 92.3217, 0); // WAA
   SendTeleMsg(playerid, "Wheel Arch Angels", "WAA");

   return 1;
}
CMD:transsf(playerid)
{
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");

   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");

   new m=CheckTeleMoney(playerid, 3000);
   if(GetPlayerMoneyEx(playerid) < m) return SendMoneyMSG(playerid, m);
   GivePlayerMoneyEX(playerid, m*-1, 1);

   TeleportPlayer(playerid, -1935.6849, 228.2063, 34.1563, 0.1775, 0); // transsf
   SendTeleMsg(playerid, "Transfender of San Fierro", "TransSF");

   return 1;
}

CMD:ufo(playerid)
{
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");

   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");

   new m=CheckTeleMoney(playerid, 1500);
   if(GetPlayerMoneyEx(playerid) < m) return SendMoneyMSG(playerid, m);
   GivePlayerMoneyEX(playerid, m*-1, 1);

   TeleportPlayer(playerid, -80.0306, 1385.4258, 16.9959, 289.0969, 0); // ufo
   SendTeleMsg(playerid, "Secret UFO", "UFO");

   return 1;
}
CMD:dirttrack(playerid)
{
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPlayerState(playerid) == 2) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in vehicle.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");

   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");

   new m=CheckTeleMoney(playerid, 1500);
   if(GetPlayerMoneyEx(playerid) < m) return SendMoneyMSG(playerid, m);
   GivePlayerMoneyEX(playerid, m*-1, 1);

   TeleportPlayer(playerid, -1373.3596, -687.9955, 1054.4989, 41.7995, 4, false); // ufo
   SendTeleMsg(playerid, "Dirttrack Stadium", "DirtTrack");

   return 1;
}
CMD:8track(playerid)
{
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPlayerState(playerid) == 2) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in vehicle.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");

   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");

   new m=CheckTeleMoney(playerid, 1500);
   if(GetPlayerMoneyEx(playerid) < m) return SendMoneyMSG(playerid, m);
   GivePlayerMoneyEX(playerid, m*-1, 1);

   TeleportPlayer(playerid, -1401.9575, -244.5173, 1043.4193, 343.8801, 7); // ufo
   SendTeleMsg(playerid, "8track Stadium", "8Track");

   return 1;
}
CMD:kickstart(playerid)
{
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");

   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");

   new m=CheckTeleMoney(playerid, 1500);
   if(GetPlayerMoneyEx(playerid) < m) return SendMoneyMSG(playerid, m);
   GivePlayerMoneyEX(playerid, m*-1, 1);

   TeleportPlayer(playerid, -1360.9132, 1564.5665, 1052.5313, 51.8564, 14); // ufo
   SendTeleMsg(playerid, "Kickstart Stadium", "KickStart");

   return 1;
}
CMD:bridge(playerid)
{
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");

   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");

   new m=CheckTeleMoney(playerid, 3000);
   if(GetPlayerMoneyEx(playerid) < m) return SendMoneyMSG(playerid, m);
   GivePlayerMoneyEX(playerid, m*-1, 1);

   TeleportPlayer(playerid, -2680.3049, 1594.7830, 217.2739, 2.5376, 0); // ufo
   SendTeleMsg(playerid, "Gant Bridge", "Bridge");

   return 1;
}

CMD:casino1(playerid)
{
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");

   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");

   new m=CheckTeleMoney(playerid, 3000);
   if(GetPlayerMoneyEx(playerid) < m) return SendMoneyMSG(playerid, m);
   GivePlayerMoneyEX(playerid, m*-1, 1);

   TeleportPlayer(playerid, 1657.1383, 2258.9407, 10.8203, 358.9664, 0); // casino1
   SendTeleMsg(playerid, "The Casino the of Las Venturas", "Casino1");

   return 1;
}
CMD:casino2(playerid)
{
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");

   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");

   new m=CheckTeleMoney(playerid, 3000);
   if(GetPlayerMoneyEx(playerid) < m) return SendMoneyMSG(playerid, m);
   GivePlayerMoneyEX(playerid, m*-1, 1);

   TeleportPlayer(playerid, 2150.2429, 1679.6859, 10.8203, 90.2008, 0); // casino2
   SendTeleMsg(playerid, "Caligula's Casino", "Casino2");

   return 1;
}
CMD:casino3(playerid)
{
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");

   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");

   new m=CheckTeleMoney(playerid, 3000);
   if(GetPlayerMoneyEx(playerid) < m) return SendMoneyMSG(playerid, m);
   GivePlayerMoneyEX(playerid, m*-1, 1);

   TeleportPlayer(playerid, 2032.3619, 1007.7547, 10.8203, 267.5756, 0); // casino3
   SendTeleMsg(playerid, "The Four Dragons Casino", "Casino3");

   return 1;
}
CMD:vinewood(playerid)
{
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");

   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");

   new m=CheckTeleMoney(playerid, 3000);
   if(GetPlayerMoneyEx(playerid) < m) return SendMoneyMSG(playerid, m);
   GivePlayerMoneyEX(playerid, m*-1, 1);

   TeleportPlayer(playerid, 1389.9952, -815.4349, 74.3955, 5.2848, 0); // vinewood
   SendTeleMsg(playerid, "Vinewood", "Vinewood");

   return 1;
}
CMD:skatepark(playerid)
{
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");

   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");

   new m=CheckTeleMoney(playerid, 3000);
   if(GetPlayerMoneyEx(playerid) < m) return SendMoneyMSG(playerid, m);
   GivePlayerMoneyEX(playerid, m*-1, 1);

   TeleportPlayer(playerid, 1876.1714, -1389.0027, 13.5576, 67.1248, 0); // skatepark
   SendTeleMsg(playerid, "the Skatepark", "Skatepark");

   return 1;
}

CMD:area69(playerid)
{
    if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
    if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");

    TeleportPlayer(playerid, 214.3797, 1906.3962, 17.6406, 145.1741, 0);
    SendTeleMsg(playerid, "Area69", "Area69");
	return 1;
}
CMD:lc(playerid)
{
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");


   new m=CheckTeleMoney(playerid, 3000);
   if(GetPlayerMoneyEx(playerid) < m) return SendMoneyMSG(playerid, m);
   GivePlayerMoneyEX(playerid, m*-1, 1);

   TeleportPlayer(playerid, -751.7931, 507.7140, 1371.8872, 210.6810, 1);
   SetPlayerVirtualWorldEX(playerid, 1111);
   SendTeleMsg(playerid, "Liberty City", "LC");

   return 1;
}
CMD:speed1(playerid)
{
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");

   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);

   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");
   SavePlayerCoords(playerid);
   TeleportPlayer(playerid, -237.1074, 1494.6616, 703.1224, -180.0, 0);
   SetPlayerVirtualWorldEX(playerid, 19888);
   SetPVarInt(playerid, "instunt", true);
   for( new w=0; w < 13; w++ ) GetPlayerWeaponData( playerid, w, pWeapons[playerid][w], pAmmo[playerid][w] );
   ResetPlayerWeaponsEX(playerid);
   SendsTeleMsg(playerid, "SPEED1 Stunt Map ", "SPEED1");
   TogglePlayerControllable2(playerid, 0);
   SendClientMessage(playerid, 0xB37F27FF, "Stunt Map is loading...");
   KillTimer(ssTimer[playerid]);
   ssTimer[playerid]=SetTimerEx("StuntUnfreeze", 3000, false, "i", playerid);
   Streamer_Update(playerid);
   SendInfoText(playerid, 3000, "Loading.....");
   SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} Do you want to spawn a stunt vehicle? {A6856A}(/SV)");
   return 1;
}
CMD:speed2(playerid)
{
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");
   SavePlayerCoords(playerid);

   TeleportPlayer(playerid, 1546.5449, -1472.6460, 3163.8022, 90, 0);

   SetPlayerVirtualWorldEX(playerid, 19888);
   SetPVarInt(playerid, "instunt", true);
   for( new w=0; w < 13; w++ ) GetPlayerWeaponData( playerid, w, pWeapons[playerid][w], pAmmo[playerid][w] );
   ResetPlayerWeaponsEX(playerid);
   SendsTeleMsg(playerid, "SPEED2 Stunt Map", "SPEED2");
   TogglePlayerControllable2(playerid, 0);
   //SendClientMessage(playerid, 0xB37F27FF, "Stunt Map is loading...");
   KillTimer(ssTimer[playerid]);
   ssTimer[playerid]=SetTimerEx("StuntUnfreeze", 3000, false, "i", playerid);
   SendInfoText(playerid, 3000, "Loading.....");
   SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} Do you want to spawn a stunt vehicle? {A6856A}(/SV)");
   Streamer_Update(playerid);
   return 1;
}
CMD:speed3(playerid)
{
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");
   SavePlayerCoords(playerid);

   TeleportPlayer(playerid, -644.1062, 2880.7671, 1190.3650, -90, 0);

   SetPlayerVirtualWorldEX(playerid, 19888);
   SetPVarInt(playerid, "instunt", true);
   for( new w=0; w < 13; w++ ) GetPlayerWeaponData( playerid, w, pWeapons[playerid][w], pAmmo[playerid][w] );
   ResetPlayerWeaponsEX(playerid);
   SendsTeleMsg(playerid, "SPEED1 Stunt Map", "SPEED3");
   TogglePlayerControllable2(playerid, 0);
   //SendClientMessage(playerid, 0xB37F27FF, "Stunt Map is loading...");
   KillTimer(ssTimer[playerid]);
   ssTimer[playerid]=SetTimerEx("StuntUnfreeze", 3000, false, "i", playerid);
   SendInfoText(playerid, 3000, "Loading.....");
   SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} Do you want to spawn a stunt vehicle? {A6856A}(/SV)");
   Streamer_Update(playerid);
   return 1;
}


CMD:css(playerid)
{
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");
   SavePlayerCoords(playerid);

   TeleportPlayer(playerid, -2331.3867, -1617.1444, 483.7146, 78.1452, 0);

   SetPlayerVirtualWorldEX(playerid, 19888);
   SetPVarInt(playerid, "instunt", true);
   for( new w=0; w < 13; w++ ) GetPlayerWeaponData( playerid, w, pWeapons[playerid][w], pAmmo[playerid][w] );
   ResetPlayerWeaponsEX(playerid);
   SendsTeleMsg(playerid, "Chilliad Stunt Map", "CSS");
   SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} Do you want to spawn a stunt vehicle? {A6856A}(/SV)");
   return 1;
}
CMD:dive(playerid)
{
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
	ShowPlayerDialog(playerid, 14568, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM - "WHITE_"Dive Minigame", "{BA5E3A}/Dive1\t\tSky Diving Challenge #1\n{BA3AAB}/Dive2\t\tSky Diving Challenge #2", "Select", "Exit");
	return 1;
}
CMD:trucking(playerid)
{
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(Job[playerid] != Trucker) return SendWarning(playerid, "{BABABA}You must be a Trucker to use this command!");
	ShowPlayerDialog(playerid, 14569, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM - "WHITE_"Trucking", "{BA5E3A}/Trucking1\tBlueberry's Trucking Station\n{BA3AAB}/Trucking2\tRS Haul's Trucking Station", "Select", "Exit");
	return 1;
}

CMD:dive1(playerid)
{
	if(IsInFight(playerid)) return SendMsg(playerid, 2);
	if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
	if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");
    if(aduty[playerid] == 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command while on admin duty.");
	if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
	if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
    if(EventStarted > 1 && EventType == 1000) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant join the Dive Challenge during an event countdown.");
	if(IsPlayerInAnyVehicle(playerid)) RemovePlayerFromVehicle(playerid);
	SavePlayerCoords(playerid);
	ResetPlayerWeaponsEX(playerid);
	GivePlayerWeapon(playerid, 46, 1);
	SetPlayerPos(playerid, -2545.8879, 1948.1498, 4253.4888);
	SetPlayerFacingAngle(playerid, 94.6369);
	SetPlayerVirtualWorldEX(playerid, 19888);
	InDive[playerid]=1;

	new str[256];
	format(str, sizeof(str), "{4A9EC2}» Diving «{294FC2} %s has joined the Sky Diving Challenge {4A9EC2}(/Dive)", pName[playerid]);
	SendClientMessageToAll(0xF2EE05FF, str);
	SendInfoText(playerid, 4000, "~r~Dont Open Your Parachute");
	SetTeleShow(6, 0);

	return 1;
}
CMD:dive2(playerid)
{
	if(IsInFight(playerid)) return SendMsg(playerid, 2);
	if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
	if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");
    if(aduty[playerid] == 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command while on admin duty.");
	if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
	if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
    if(EventStarted > 1 && EventType == 1001) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant join the Dive Challenge during an event countdown.");
	if(IsPlayerInAnyVehicle(playerid)) RemovePlayerFromVehicle(playerid);
	SavePlayerCoords(playerid);
	ResetPlayerWeaponsEX(playerid);
	GivePlayerWeapon(playerid, 46, 1);
	SetPlayerPos(playerid, -1231.1007, 719.1548, 4693.3608);
	SetPlayerVirtualWorldEX(playerid, 19888);
	InDive[playerid]=2;

	new str[256];
	format(str, sizeof(str), "{4A9EC2}» Diving «{294FC2} %s has joined the Sky Diving Challenge 2 {4A9EC2}(/Dive2)", pName[playerid]);
	SendClientMessageToAll(0xF2EE05FF, str);
	SendInfoText(playerid, 4000, "~r~Dont Open Your Parachute");
	SetTeleShow(1, 0);
	return 1;
}

CMD:canon(playerid) return cmd_cannon(playerid);
CMD:cannonworld(playerid, params[])
{
    if(!InCanon[playerid]) return SendWarning(playerid, "{BABABA}You can use this command only in cannon.");
    new world;
	if (sscanf(params, "d", world)) return SendWarning(playerid, "/CannonWorld <world id (1-5)>");
	if((world < 0) || (world > 5)) return SendWarning(playerid, "{BABABA}valid worlds are (1-5)");
	SetPlayerVirtualWorldEX(playerid, 19999+world);
	SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 19999+world);
	return 1;
}
CMD:cannon(playerid)
{
	if(IsInFight(playerid)) return SendMsg(playerid, 2);
	if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
	if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(aduty[playerid] == 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command while on admin duty.");
	if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
	if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
    if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");
	if(GetPVarInt(playerid, "usesanims")) return SendWarning(playerid, "You cant join the cannon while using anims!");
	SavePlayerCoords(playerid);
	ResetPlayerWeaponsEX(playerid);
	TeleportPlayer(playerid, -61.7874, 2503.0874, 16.2115, 271.2715, 0);
	new ah= CreateVehicle(411, -61.7874, 2503.0874, 16.2115, 271.2715, -1, -1, 10);
    ResetCarInfo(ah);
	AdminCar[ah]=1;
	VehicleInfo[ah][Player]=INVALID_PLAYER_ID;

	AddVehicleComponent(ah, 1087);
	AddVehicleComponent(ah, 1080);
	CarNitro[ah]=1;

	SetVehicleVirtualWorld(ah, 20000);
	SetPlayerVirtualWorldEX(playerid, 20000);
	PutPlayerInVehicle(playerid, ah, 0);
	InCanon[playerid]=1;
	new str[128];
	format(str, sizeof(str), "{4A9EC2}» Cannon «{294FC2} %s has joined the Cannon Challenge {4A9EC2}(/Cannon)", pName[playerid]);
	SendClientMessageToAll(0xF2EE05FF, str);
    Streamer_UpdateEx(playerid, -50.8230, 2500.2991, 18.440);
	SendClientMessage(playerid, 0xF2EE05FF, "{FFC307}» {AA8202}Top 5 Records of the Cannon challenge {FFC307}«");
	format(str, sizeof(str), "{AA8202}#1 - {FFC307}%f By %s", CanonRecordDistance[0], CanonRecordPlayers[0]);
	SendClientMessage(playerid, 0xF2EE05FF, str);
	format(str, sizeof(str), "{AA8202}#2 - {FFC307}%f By %s", CanonRecordDistance[1], CanonRecordPlayers[1]);
	SendClientMessage(playerid, 0xF2EE05FF, str);
	format(str, sizeof(str), "{AA8202}#3 - {FFC307}%f By %s", CanonRecordDistance[2], CanonRecordPlayers[2]);
	SendClientMessage(playerid, 0xF2EE05FF, str);
	format(str, sizeof(str), "{AA8202}#4 - {FFC307}%f By %s", CanonRecordDistance[3], CanonRecordPlayers[3]);
	SendClientMessage(playerid, 0xF2EE05FF, str);
	format(str, sizeof(str), "{AA8202}#5 - {FFC307}%f By %s", CanonRecordDistance[4], CanonRecordPlayers[4]);
	SendClientMessage(playerid, 0xF2EE05FF, str);
	SendClientMessage(playerid, GRAY, "- Use (/cannonrecords) To check the records again");
	SendClientMessage(playerid, GRAY, "- Use (/cannonworld 1-5) To change your world");
	SetTeleShow(6, 0);
	return 1;
}

CMD:canonrecords(playerid) return cmd_cannonrecords(playerid);
CMD:cannonrecords(playerid)
{
	if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
	new str[128];
	SendClientMessage(playerid, 0xF2EE05FF, "{FFC307}» {AA8202}Top 5 Records of the Cannon challenge {FFC307}«");
	format(str, sizeof(str), "{AA8202}#1 - {FFC307}%f By %s", CanonRecordDistance[0], CanonRecordPlayers[0]);
	SendClientMessage(playerid, 0xF2EE05FF, str);
	format(str, sizeof(str), "{AA8202}#2 - {FFC307}%f By %s", CanonRecordDistance[1], CanonRecordPlayers[1]);
	SendClientMessage(playerid, 0xF2EE05FF, str);
	format(str, sizeof(str), "{AA8202}#3 - {FFC307}%f By %s", CanonRecordDistance[2], CanonRecordPlayers[2]);
	SendClientMessage(playerid, 0xF2EE05FF, str);
	format(str, sizeof(str), "{AA8202}#4 - {FFC307}%f By %s", CanonRecordDistance[3], CanonRecordPlayers[3]);
	SendClientMessage(playerid, 0xF2EE05FF, str);
	format(str, sizeof(str), "{AA8202}#5 - {FFC307}%f By %s", CanonRecordDistance[4], CanonRecordPlayers[4]);
	SendClientMessage(playerid, 0xF2EE05FF, str);
	return 1;
}
CMD:resetcannon(playerid)
{
    if(!IsAdmin(playerid, 6)) return SendMsg(playerid, 5);
    for(new x=0; x<5; x++) CanonRecordDistance[x]=0, CanonRecordPlayers[x]="N/A";
	new str[128];
	format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}Admin %s has reset the Cannon records", gAname(playerid));
	SendClientMessageToAll(-1, str);
    return 1;
}
CMD:resetracerecords(playerid, params[])
{
	if(!IsAdmin(playerid, 6)) return SendMsg(playerid, 5);
	new rend, str[512];
	if(sscanf(params, "d", rend)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Usage /ResetRaceRecords <RaceID>");
	if(rend < 0 || rend > (MAX_RACES-1)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Invalid race ID , please check the created races list in (/RaceEditor)");
	for(new x=0; x<5; x++) RaceRecords[rend][toptime][x]=0;

	format(RaceRecords[rend][Top1Player], 24, "N/A");
	format(RaceRecords[rend][Top2Player], 24, "N/A");
	format(RaceRecords[rend][Top3Player], 24, "N/A");
	format(RaceRecords[rend][Top4Player], 24, "N/A");
	format(RaceRecords[rend][Top5Player], 24, "N/A");
	format(RaceRecords[rend][Top1Car], 32, "N/A");
	format(RaceRecords[rend][Top2Car], 32, "N/A");
	format(RaceRecords[rend][Top3Car], 32, "N/A");
	format(RaceRecords[rend][Top4Car], 32, "N/A");
	format(RaceRecords[rend][Top5Car], 32, "N/A");

	format(str, sizeof(str), "UPDATE `racerecords` SET `Top1Player` = 'N/A', `Top2Player` = 'N/A', `Top3Player` = 'N/A', `Top4Player` = 'N/A', `Top5Player` = 'N/A', Top1Record = '0', Top2Record = '0', Top3Record = '0', Top4Record = '0', Top5Record = '0', `Top1Car` = 'N/A', `Top2Car` = 'N/A', `Top3Car` = 'N/A', `Top4Car` = 'N/A', `Top5Car` = 'N/A' WHERE `RaceID` = '%d'", rend);
	mysql_query(GTADM, str);

	format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}Admin %s has reset the Records of Race%s", gAname(playerid), RaceIDstring(rend));
	SendClientMessageToAll(-1, str);
	return 1;
}

CMD:stf(playerid)
{
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(GetPlayerVirtualWorld(playerid) != 19888 && GetPlayerVirtualWorld(playerid) != 19999) for( new w=0; w < 13; w++ ) GetPlayerWeaponData( playerid, w, pWeapons[playerid][w], pAmmo[playerid][w] );
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");
   SavePlayerCoords(playerid);

   TeleportPlayer(playerid, 5381.6826, -2233.4302, 2.5285, 250.8071, 0);
   SetPlayerVirtualWorldEX(playerid, 19888);
   SetPVarInt(playerid, "instunt", true);
   ResetPlayerWeaponsEX(playerid);
   SendsTeleMsg(playerid, "'SparkyTheFun' Stunt Map", "STF");
   DestroyDynamicCP(StuntCP[playerid]);
   StuntCP[playerid]=CreateDynamicCP(5433.7681, -2217.0601, 1.5038, 15.00, 19888, -1, playerid, 200.0);
   StuntMap[playerid]=1;
   TogglePlayerControllable2(playerid, 0);
   //SendClientMessage(playerid, 0xB37F27FF, "Stunt Map is loading...");
   KillTimer(ssTimer[playerid]);
   ssTimer[playerid]=SetTimerEx("StuntUnfreeze", 3000, false, "i", playerid);
   SendInfoText(playerid, 3000, "Loading.....");
   SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} Do you want to spawn a stunt vehicle? {A6856A}(/SV)");
   Streamer_Update(playerid);
   return 1;
}

CMD:wd(playerid)
{
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(GetPlayerVirtualWorld(playerid) != 19888 && GetPlayerVirtualWorld(playerid) != 19999) for( new w=0; w < 13; w++ ) GetPlayerWeaponData( playerid, w, pWeapons[playerid][w], pAmmo[playerid][w] );
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");
   SavePlayerCoords(playerid);

   TeleportPlayer(playerid, -3805.6208, -200.0186, 107.7737, 180.0, 0);
   SetPlayerVirtualWorldEX(playerid, 19999);
   SetPVarInt(playerid, "instunt", true);
   ResetPlayerWeaponsEX(playerid);
   SendsTeleMsg(playerid, "'Warrior's Dance' Stunt Map", "WD");
   DestroyDynamicCP(StuntCP[playerid]);
   StuntCP[playerid]=CreateDynamicCP(-3806.1609, -239.5034, 105.7737, 15.00, 19999, -1, playerid, 200.0);
   StuntMap[playerid]=2;
   TogglePlayerControllable2(playerid, 0);
   //SendClientMessage(playerid, 0xB37F27FF, "Stunt Map is loading...");
   KillTimer(ssTimer[playerid]);
   ssTimer[playerid]=SetTimerEx("StuntUnfreeze", 3000, false, "i", playerid);
   SendInfoText(playerid, 3000, "Loading.....");
   SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} Do you want to spawn a stunt vehicle? {A6856A}(/SV)");
   Streamer_Update(playerid);
   return 1;
}
CMD:hr(playerid)
{
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(GetPlayerVirtualWorld(playerid) != 19888 && GetPlayerVirtualWorld(playerid) != 19999) for( new w=0; w < 13; w++ ) GetPlayerWeaponData( playerid, w, pWeapons[playerid][w], pAmmo[playerid][w] );
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");
   SavePlayerCoords(playerid);

   TeleportPlayer(playerid, 3055.7170, -1488.3647, 1042.0687, 181.0318, 0);
   SetPlayerVirtualWorldEX(playerid, 19999);
   SetPVarInt(playerid, "instunt", true);
   ResetPlayerWeaponsEX(playerid);
   SendsTeleMsg(playerid, "'Hell Roads' Stunt Map", "HR");
   DestroyDynamicCP(StuntCP[playerid]);
   StuntCP[playerid]=CreateDynamicCP(3095.8750, -1559.6678, 1041.0687, 15.00, 19999, -1, playerid, 200.0);
   StuntMap[playerid]=5;
   TogglePlayerControllable2(playerid, 0);
   //SendClientMessage(playerid, 0xB37F27FF, "Stunt Map is loading...");
   KillTimer(ssTimer[playerid]);
   ssTimer[playerid]=SetTimerEx("StuntUnfreeze", 3000, false, "i", playerid);
   SendInfoText(playerid, 3000, "Loading.....");
   SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} Do you want to spawn a stunt vehicle? {A6856A}(/SV)");
   Streamer_Update(playerid);
   return 1;
}

CMD:mr(playerid)
{
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(GetPlayerVirtualWorld(playerid) != 19888 && GetPlayerVirtualWorld(playerid) != 19999) for( new w=0; w < 13; w++ ) GetPlayerWeaponData( playerid, w, pWeapons[playerid][w], pAmmo[playerid][w] );
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");
   SavePlayerCoords(playerid);

   TeleportPlayer(playerid, 4165.8457, 2822.1362, 12.2298, -180.0, 0);
   SetPlayerVirtualWorldEX(playerid, 19888);
   SetPVarInt(playerid, "instunt", true);
   ResetPlayerWeaponsEX(playerid);
   SendsTeleMsg(playerid, "'The Marine' Stunt Map", "MR");
   DestroyDynamicCP(StuntCP[playerid]);
   StuntCP[playerid]=CreateDynamicCP(4164.2524, 2784.9731, 11.2668, 15.00, 19888, -1, playerid, 200.0);
   StuntMap[playerid]=4;
   TogglePlayerControllable2(playerid, 0);
   //SendClientMessage(playerid, 0xB37F27FF, "Stunt Map is loading...");
   KillTimer(ssTimer[playerid]);
   ssTimer[playerid]=SetTimerEx("StuntUnfreeze", 3000, false, "i", playerid);
   SendInfoText(playerid, 3000, "Loading.....");
   SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} Do you want to spawn a stunt vehicle? {A6856A}(/SV)");
   Streamer_Update(playerid);
   return 1;
}

CMD:wtf(playerid)
{
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(GetPlayerVirtualWorld(playerid) != 19888 && GetPlayerVirtualWorld(playerid) != 19999) for( new w=0; w < 13; w++ ) GetPlayerWeaponData( playerid, w, pWeapons[playerid][w], pAmmo[playerid][w] );
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");
   SavePlayerCoords(playerid);

   TeleportPlayer(playerid, -4195.0708, 2681.6228, 30.0, 0.0, 0);
   SetPlayerVirtualWorldEX(playerid, 19999);
   SetPVarInt(playerid, "instunt", true);
   ResetPlayerWeaponsEX(playerid);
   SendsTeleMsg(playerid, "'What The F*uck' Stunt Map", "WTF");
   DestroyDynamicCP(StuntCP[playerid]);
   StuntCP[playerid]=CreateDynamicCP(-4197.2993, 2749.3262, 35.5, 15.00, 19999, -1, playerid, 200.0);
   StuntMap[playerid]=3;
   TogglePlayerControllable2(playerid, 0);
   //SendClientMessage(playerid, 0xB37F27FF, "Stunt Map is loading...");
   KillTimer(ssTimer[playerid]);
   ssTimer[playerid]=SetTimerEx("StuntUnfreeze", 3000, false, "i", playerid);
   SendInfoText(playerid, 3000, "Loading.....");
   SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} Do you want to spawn a stunt vehicle? {A6856A}(/SV)");
   Streamer_Update(playerid);
   return 1;
}
CMD:aa(playerid)
{
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(GetPlayerVirtualWorld(playerid) != 19888 && GetPlayerVirtualWorld(playerid) != 19999) for( new w=0; w < 13; w++ ) GetPlayerWeaponData( playerid, w, pWeapons[playerid][w], pAmmo[playerid][w] );
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");
   SavePlayerCoords(playerid);

   TeleportPlayer(playerid, 846.7130, 1782.2064, 269.0216, 0.0, 0);
   SetPlayerVirtualWorldEX(playerid, 19888);
   ResetPlayerWeaponsEX(playerid);
   SendsTeleMsg(playerid, "'Abandoned Airport' Stunt Map", "AA");

   TogglePlayerControllable2(playerid, 0);
   //SendClientMessage(playerid, 0xB37F27FF, "Stunt Map is loading...");
   KillTimer(ssTimer[playerid]);
   ssTimer[playerid]=SetTimerEx("StuntUnfreeze", 3000, false, "i", playerid);
   SendInfoText(playerid, 3000, "Loading.....");
   SetPVarInt(playerid, "instunt", true);
   SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} Do you want to spawn a stunt vehicle? {A6856A}(/SV)");
   Streamer_Update(playerid);
   return 1;
}
CMD:lvair(playerid)
{
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(GetPlayerVirtualWorld(playerid) != 19888 && GetPlayerVirtualWorld(playerid) != 19999) for( new w=0; w < 13; w++ ) GetPlayerWeaponData( playerid, w, pWeapons[playerid][w], pAmmo[playerid][w] );
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");
   SavePlayerCoords(playerid);

   TeleportPlayer(playerid, 1319.4143, 1279.1984, 10.8203, 1.2050);
   SetPlayerVirtualWorldEX(playerid, 19888);
   ResetPlayerWeaponsEX(playerid);
   SendsTeleMsg(playerid, "'Las Venturas Airport' Stunt Map", "LVAIR");

   TogglePlayerControllable2(playerid, 0);
   //SendClientMessage(playerid, 0xB37F27FF, "Stunt Map is loading...");
   KillTimer(ssTimer[playerid]);
   ssTimer[playerid]=SetTimerEx("StuntUnfreeze", 3000, false, "i", playerid);
   SendInfoText(playerid, 3000, "Loading.....");
   SetPVarInt(playerid, "instunt", true);
   SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} Do you want to spawn a stunt vehicle? {A6856A}(/SV)");
   Streamer_Update(playerid);
   return 1;
}/*
CMD:sw(playerid)
{
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");

   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(GetPlayerVirtualWorld(playerid) != 19888 && GetPlayerVirtualWorld(playerid) != 19999 && GetPlayerVirtualWorld(playerid) != 20069) for( new w=0; w < 13; w++ ) GetPlayerWeaponData( playerid, w, pWeapons[playerid][w], pAmmo[playerid][w] );
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");
   SavePlayerCoords(playerid);

   TeleportPlayer(playerid, 2513.3091, -1676.9182, 13.5438, 71.2963);
   SetPlayerVirtualWorldEX(playerid, 20069);
   ResetPlayerWeaponsEX(playerid);
   SendsTeleMsg(playerid, "'Stunt World' Stunt Map", "SW");

   TogglePlayerControllable2(playerid, 0);
   //SendClientMessage(playerid, 0xB37F27FF, "Stunt Map is loading...");
   KillTimer(ssTimer[playerid]);
   ssTimer[playerid]=SetTimerEx("StuntUnfreeze", 3000, false, "i", playerid);
   SendInfoText(playerid, 3000, "Loading.....");
   SetPVarInt(playerid, "instunt", true);
   SetPlayerHealth(playerid, 10000000);
   GOD[playerid]=1;
   SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} Do you want to spawn a stunt vehicle? {A6856A}(/SV)");
   SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} Welcome to the Stunt World map. This map has a lot of stunts all around San Andreas, you just need to find them!");
   Streamer_Update(playerid);
   return 1;
}*/
CMD:lsair(playerid)
{
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(GetPlayerVirtualWorld(playerid) != 19888 && GetPlayerVirtualWorld(playerid) != 19999) for( new w=0; w < 13; w++ ) GetPlayerWeaponData( playerid, w, pWeapons[playerid][w], pAmmo[playerid][w] );
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");
   SavePlayerCoords(playerid);

   TeleportPlayer(playerid, 1954.8923, -2641.7117, 13.6453, 2.3508, 0);
   SetPlayerVirtualWorldEX(playerid, 19888);
   ResetPlayerWeaponsEX(playerid);
   SendsTeleMsg(playerid, "'Los Santos Airport' Stunt Map", "LSAIR");

   TogglePlayerControllable2(playerid, 0);
   //SendClientMessage(playerid, 0xB37F27FF, "Stunt Map is loading...");
   KillTimer(ssTimer[playerid]);
   ssTimer[playerid]=SetTimerEx("StuntUnfreeze", 3000, false, "i", playerid);
   SendInfoText(playerid, 3000, "Loading.....");
   SetPVarInt(playerid, "instunt", true);
   SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} Do you want to spawn a stunt vehicle? {A6856A}(/SV)");
   Streamer_Update(playerid);
   return 1;
}
CMD:fw(playerid)
{
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(GetPlayerVirtualWorld(playerid) != 19888 && GetPlayerVirtualWorld(playerid) != 19999) for( new w=0; w < 13; w++ ) GetPlayerWeaponData( playerid, w, pWeapons[playerid][w], pAmmo[playerid][w] );
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");
   SavePlayerCoords(playerid);

   TeleportPlayer(playerid, -2846.9822, 2197.4150, 799.9898, 179.5929);
   SetPlayerVirtualWorldEX(playerid, 19888);
   ResetPlayerWeaponsEX(playerid);
   SendsTeleMsg(playerid, "'Freeway' Stunt Map", "FW");

   TogglePlayerControllable2(playerid, 0);
   //SendClientMessage(playerid, 0xB37F27FF, "Stunt Map is loading...");
   KillTimer(ssTimer[playerid]);
   ssTimer[playerid]=SetTimerEx("StuntUnfreeze", 3000, false, "i", playerid);
   SendInfoText(playerid, 3000, "Loading.....");
   SetPVarInt(playerid, "instunt", true);
   SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} Do you want to spawn a stunt vehicle? {A6856A}(/SV)");
   Streamer_Update(playerid);
   return 1;
}
CMD:lw(playerid)
{
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(GetPlayerVirtualWorld(playerid) != 19888 && GetPlayerVirtualWorld(playerid) != 19999) for( new w=0; w < 13; w++ ) GetPlayerWeaponData( playerid, w, pWeapons[playerid][w], pAmmo[playerid][w] );
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");
   SavePlayerCoords(playerid);

   TeleportPlayer(playerid, 3357.7297, -2066.9441, 46.1797, 270.1016);
   SetPlayerVirtualWorldEX(playerid, 19888);
   ResetPlayerWeaponsEX(playerid);
   SendsTeleMsg(playerid, "'Long Way' Stunt Map", "LW");

   TogglePlayerControllable2(playerid, 0);
   //SendClientMessage(playerid, 0xB37F27FF, "Stunt Map is loading...");
   KillTimer(ssTimer[playerid]);
   ssTimer[playerid]=SetTimerEx("StuntUnfreeze", 3000, false, "i", playerid);
   SendInfoText(playerid, 3000, "Loading.....");
   SetPVarInt(playerid, "instunt", true);
   SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} Do you want to spawn a stunt vehicle? {A6856A}(/SV)");
   Streamer_Update(playerid);
   return 1;
}
CMD:ml(playerid)
{
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(GetPlayerVirtualWorld(playerid) != 19888 && GetPlayerVirtualWorld(playerid) != 19999) for( new w=0; w < 13; w++ ) GetPlayerWeaponData( playerid, w, pWeapons[playerid][w], pAmmo[playerid][w] );
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");
   SavePlayerCoords(playerid);

   TeleportPlayer(playerid, 51.3834, 154.0454, 2.4466, 59.1510);
   SetPlayerVirtualWorldEX(playerid, 19888);
   ResetPlayerWeaponsEX(playerid);
   SendsTeleMsg(playerid, "'Mid Lake' Stunt Map", "ML");

   TogglePlayerControllable2(playerid, 0);
   //SendClientMessage(playerid, 0xB37F27FF, "Stunt Map is loading...");
   KillTimer(ssTimer[playerid]);
   ssTimer[playerid]=SetTimerEx("StuntUnfreeze", 3000, false, "i", playerid);
   SendInfoText(playerid, 3000, "Loading.....");
   SetPVarInt(playerid, "instunt", true);
   SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} Do you want to spawn a stunt vehicle? {A6856A}(/SV)");
   Streamer_Update(playerid);
   return 1;
}
CMD:dam(playerid)
{
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(GetPlayerVirtualWorld(playerid) != 19888 && GetPlayerVirtualWorld(playerid) != 19999) for( new w=0; w < 13; w++ ) GetPlayerWeaponData( playerid, w, pWeapons[playerid][w], pAmmo[playerid][w] );
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");
   SavePlayerCoords(playerid);

   TeleportPlayer(playerid, -501.2695, 2193.5315, 42.4960, 91.8834);
   SetPlayerVirtualWorldEX(playerid, 19888);
   ResetPlayerWeaponsEX(playerid);
   SendsTeleMsg(playerid, "'Dam' Stunt Map", "DAM");

   TogglePlayerControllable2(playerid, 0);
   //SendClientMessage(playerid, 0xB37F27FF, "Stunt Map is loading...");
   KillTimer(ssTimer[playerid]);
   ssTimer[playerid]=SetTimerEx("StuntUnfreeze", 3000, false, "i", playerid);
   SendInfoText(playerid, 3000, "Loading.....");
   SetPVarInt(playerid, "instunt", true);
   SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} Do you want to spawn a stunt vehicle? {A6856A}(/SV)");
   Streamer_Update(playerid);
   return 1;
}
CMD:rc(playerid)
{
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(GetPlayerVirtualWorld(playerid) != 19888 && GetPlayerVirtualWorld(playerid) != 19999) for( new w=0; w < 13; w++ ) GetPlayerWeaponData( playerid, w, pWeapons[playerid][w], pAmmo[playerid][w] );
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");
   SavePlayerCoords(playerid);

   TeleportPlayer(playerid, -1811.7500, 533.0374, 234.8874, 30.8685);
   SetPlayerVirtualWorldEX(playerid, 19888);
   ResetPlayerWeaponsEX(playerid);
   SendsTeleMsg(playerid, "'Rollercoaster' Stunt Map", "RC");

   TogglePlayerControllable2(playerid, 0);
   //SendClientMessage(playerid, 0xB37F27FF, "Stunt Map is loading...");
   KillTimer(ssTimer[playerid]);
   ssTimer[playerid]=SetTimerEx("StuntUnfreeze", 3000, false, "i", playerid);
   SendInfoText(playerid, 3000, "Loading.....");
   SetPVarInt(playerid, "instunt", true);
   SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} Do you want to spawn a stunt vehicle? {A6856A}(/SV)");
   Streamer_Update(playerid);
   return 1;
}
CMD:tube(playerid)
{
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(GetPlayerVirtualWorld(playerid) != 19888 && GetPlayerVirtualWorld(playerid) != 19999) for( new w=0; w < 13; w++ ) GetPlayerWeaponData( playerid, w, pWeapons[playerid][w], pAmmo[playerid][w] );
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");
   SavePlayerCoords(playerid);

   TeleportPlayer(playerid, -182.9501, -2725.7676, 924.5065, 90.0188);
   SetPlayerVirtualWorldEX(playerid, 19888);
   ResetPlayerWeaponsEX(playerid);
   SendsTeleMsg(playerid, "'Tube' Stunt Map", "TB");

   TogglePlayerControllable2(playerid, 0);
   //SendClientMessage(playerid, 0xB37F27FF, "Stunt Map is loading...");
   KillTimer(ssTimer[playerid]);
   ssTimer[playerid]=SetTimerEx("StuntUnfreeze", 3000, false, "i", playerid);
   SendInfoText(playerid, 3000, "Loading.....");
   SetPVarInt(playerid, "instunt", true);
   SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} Do you want to spawn a stunt vehicle? {A6856A}(/SV)");
   Streamer_Update(playerid);
   return 1;
}
/*
CMD:bs(playerid)
{
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail."); return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail."); return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail."); return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");

   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(GetPlayerVirtualWorld(playerid) != 19888 && GetPlayerVirtualWorld(playerid) != 19999) for( new w=0; w < 13; w++ ) GetPlayerWeaponData( playerid, w, pWeapons[playerid][w], pAmmo[playerid][w] );
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");
   SavePlayerCoords(playerid);

   TeleportPlayer(playerid, -2221.7932, 2554.3943, 1.7506, 187.5096);
   SetPlayerVirtualWorldEX(playerid, 19888);
   ResetPlayerWeaponsEX(playerid);
   SendsTeleMsg(playerid, "'Bayside' Stunt Map", "BS");

   TogglePlayerControllable2(playerid, 0);
   //SendClientMessage(playerid, 0xB37F27FF, "Stunt Map is loading...");
   KillTimer(ssTimer[playerid]);
   ssTimer[playerid]=SetTimerEx("StuntUnfreeze", 3000, false, "i", playerid);
   SendInfoText(playerid, 3000, "Loading.....");
   SetPVarInt(playerid, "instunt", true);
   SetPlayerHealth(playerid, 10000000);
   GOD[playerid]=1;
   SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} Do you want to spawn a stunt vehicle? {A6856A}(/SV)");
   Streamer_Update(playerid);
   return 1;
}*/
CMD:ex(playerid)
{
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(GetPlayerVirtualWorld(playerid) != 19888 && GetPlayerVirtualWorld(playerid) != 19999) for( new w=0; w < 13; w++ ) GetPlayerWeaponData( playerid, w, pWeapons[playerid][w], pAmmo[playerid][w] );
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");
   SavePlayerCoords(playerid);

   TeleportPlayer(playerid, 487.7537, 2534.0632, 56.0650, 89.4931);
   SetPlayerVirtualWorldEX(playerid, 19999);
   ResetPlayerWeaponsEX(playerid);
   SendsTeleMsg(playerid, "'Extreme' Stunt Map", "EX");

   TogglePlayerControllable2(playerid, 0);
   //SendClientMessage(playerid, 0xB37F27FF, "Stunt Map is loading...");
   KillTimer(ssTimer[playerid]);
   ssTimer[playerid]=SetTimerEx("StuntUnfreeze", 3000, false, "i", playerid);
   SendInfoText(playerid, 3000, "Loading.....");
   SetPVarInt(playerid, "instunt", true);
   SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} Do you want to spawn a stunt vehicle? {A6856A}(/SV)");
   Streamer_Update(playerid);
   return 1;
}
CMD:sre(playerid)
{
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(GetPlayerVirtualWorld(playerid) != 19888 && GetPlayerVirtualWorld(playerid) != 19999) for( new w=0; w < 13; w++ ) GetPlayerWeaponData( playerid, w, pWeapons[playerid][w], pAmmo[playerid][w] );
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");
   SavePlayerCoords(playerid);

   TeleportPlayer(playerid, -724.4813, 1712.9370, 16.5260, 3.7437);
   SetPlayerVirtualWorldEX(playerid, 19999);
   ResetPlayerWeaponsEX(playerid);
   SendsTeleMsg(playerid, "'Sherman Reservoir' Stunt Map", "SRR");

   TogglePlayerControllable2(playerid, 0);
   //SendClientMessage(playerid, 0xB37F27FF, "Stunt Map is loading...");
   KillTimer(ssTimer[playerid]);
   ssTimer[playerid]=SetTimerEx("StuntUnfreeze", 3000, false, "i", playerid);
   SendInfoText(playerid, 3000, "Loading.....");
   SetPVarInt(playerid, "instunt", true);
   SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} Do you want to spawn a stunt vehicle? {A6856A}(/SV)");
   Streamer_Update(playerid);
   return 1;
}

forward StuntUnfreeze(playerid);
public StuntUnfreeze(playerid)
{
	new vw=GetPlayerVirtualWorld(playerid);
	if(vw == 14567 || vw == 19999 || vw ==19888)
	{
		TogglePlayerControllable2(playerid, 1);
		if(vw != 14567) PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	ssTimer[playerid]=-1;
	return 1;
}

forward WarningUnfreeze(playerid, w);
public WarningUnfreeze(playerid, w)
{
	if(w == GetPlayerVirtualWorld(playerid)) TogglePlayerControllable2(playerid, 1);
	return 1;
}
CMD:stunt(playerid)
{
	new k[20];
	if(GetPVarInt(playerid, "GoBack")) k="Back";
	else k="Exit";
    ShowPlayerDialog(playerid, 19888, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM "WHITE_"- Stunt Maps (Total 21)", "{69C96A}/Speed1\n{69C9B8}/Speed2\n{94C969}/Speed3\n{C9A169}/CSS\n{696CC9}/STF\n{C9696A}/WD\n{C969B1}/WTF\n{E3F235}/MR\n{E32FF5}/HR\n{BABABA}/AA\n"CTC1_"/LSAIR\n"CTC2_"/LVAIR\n"BLUE_"/FW\n"GREEN_"/LW\n"LIGHTRED_"/RC\n"SKIN_"/Tube\n"SKIN2_"/Dam\n"WOOD_"/ML\n"AdminInfo_"/EX\n"LIGHTBLUE_"/SRE", "Teleport", k);
	return 1;
}

CMD:stunts(playerid) return cmd_stunt(playerid);
CMD:phoneshop(playerid)
{
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");
   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");

   new m=CheckTeleMoney(playerid, 3000);
   if(GetPlayerMoneyEx(playerid) < m) return SendMoneyMSG(playerid, m);
   GivePlayerMoneyEX(playerid, m*-1, 1);

   TeleportPlayer(playerid, 836.6714, -2038.2030, 12.8672, 182.3911, 0);
   SendTeleMsg(playerid, "The Phone Shop", "PhoneShop");
   return 1;
}
CMD:sf(playerid)
{
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");
   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");

   new m=CheckTeleMoney(playerid, 3000);
   if(GetPlayerMoneyEx(playerid) < m) return SendMoneyMSG(playerid, m);
   GivePlayerMoneyEX(playerid, m*-1, 1);

   TeleportPlayer(playerid, -2039.7915, 135.5700, 28.8359, 272.5558, 0);
   SendTeleMsg(playerid, "San Fierro", "SF");
   return 1;
}
CMD:lsa(playerid)
{
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");

   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");

   new m=CheckTeleMoney(playerid, 1000);
   if(GetPlayerMoneyEx(playerid) < m) return SendMoneyMSG(playerid, m);
   GivePlayerMoneyEX(playerid, m*-1, 1);
   TeleportPlayer(playerid, 1954.8923, -2641.7117, 13.6453, 2.3508, 0);
   SendTeleMsg(playerid, "Los Santos Airport", "LSA");
   return 1;
}
CMD:sfa(playerid)
{
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");

   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");

   new m=CheckTeleMoney(playerid, 1000);
   if(GetPlayerMoneyEx(playerid) < m) return SendMoneyMSG(playerid, m);
   GivePlayerMoneyEX(playerid, m*-1, 1);
   TeleportPlayer(playerid, -1272.0801, 21.7595, 14.1484, 135.0265, 0);
   SendTeleMsg(playerid, "San Fierro Airport", "SFA");
   return 1;
}
CMD:lva(playerid)
{
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");

   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");

   new m=CheckTeleMoney(playerid, 1000);
   if(GetPlayerMoneyEx(playerid) < m) return SendMoneyMSG(playerid, m);
   GivePlayerMoneyEX(playerid, m*-1, 1);
   TeleportPlayer(playerid, 1319.4143, 1279.1984, 10.8203, 1.2050);
   SendTeleMsg(playerid, "Las Venturas Airport", "LVA");
   return 1;
}
CMD:skydive(playerid)
{
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if(GetPlayerInterior(playerid) != 0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}you must be outside");
   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(pInGW[playerid])  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You can't use this command in a gang war.");

   if(GetPlayerMoneyEx(playerid) < 21000) return SendWarning(playerid, "{BABABA}You need at least 21000$ to use this command ");
   GivePlayerMoneyEX(playerid, -21000, 1);

   new Float:x, Float:y, Float:z, Float:a;
   GetPlayerPos(playerid, x, y, z);
   GetPlayerFacingAngle(playerid, a);
   TeleportPlayer(playerid, x, y, z+1200, a, 0);
   GivePlayerWeaponEX(playerid, 46, 10);
   new str[128];
   format(str, sizeof(str), "{760A22}» Sky dive « {B10F4E}%s is performing a sky dive {760A22}(/Skydive)", pName[playerid]);
   SendClientMessageToAll(PURPLE, str);
   GiveMedal(playerid, 58);
   return 1;
}

CMD:lv(playerid)
{
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");

   new m=CheckTeleMoney(playerid, 3000);
   if(GetPlayerMoneyEx(playerid) < m) return SendMoneyMSG(playerid, m);
   GivePlayerMoneyEX(playerid, m*-1, 1);

   TeleportPlayer(playerid, 1907.2357, 959.4983, 10.8203, 179.0354, 0);

   SendTeleMsg(playerid, "Las Venturas", "LV");
   return 1;
}

CMD:binco(playerid)
{
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");

   new m=CheckTeleMoney(playerid, 3000);
   if(GetPlayerMoneyEx(playerid) < m) return SendMoneyMSG(playerid, m);
   GivePlayerMoneyEX(playerid, m*-1, 1);

   TeleportPlayer(playerid, 2245.6619, -1660.7756, 15.2866, 165.5753, 0);
   SendTeleMsg(playerid, "Binco", "Binco");
   return 1;
}
CMD:ls(playerid)
{
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");

   new m=CheckTeleMoney(playerid, 3000);
   if(GetPlayerMoneyEx(playerid) < m) return SendMoneyMSG(playerid, m);
   GivePlayerMoneyEX(playerid, m*-1, 1);

   TeleportPlayer(playerid, 2513.3091, -1676.9182, 13.5438, 71.2963, 0);
   SendTeleMsg(playerid, "Los Santos", "LS");
   return 1;
}

CMD:casino4(playerid)
{
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");

   new m=CheckTeleMoney(playerid, 3000);
   if(GetPlayerMoneyEx(playerid) < m) return SendMoneyMSG(playerid, m);
   GivePlayerMoneyEX(playerid, m*-1, 1);

   TeleportPlayer(playerid, 2538.1628, 1822.1898, 10.8203, 87.4306, 0);

   SendTeleMsg(playerid, "The StarFish Casino", "Casino4");
   return 1;
}
CMD:ammulv(playerid)
{
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");

   new m=CheckTeleMoney(playerid, 3000);
   if(GetPlayerMoneyEx(playerid) < m) return SendMoneyMSG(playerid, m);
   GivePlayerMoneyEX(playerid, m*-1, 1);

   TeleportPlayer(playerid, 2151.5417, 941.5031, 10.6719, 1.5838, 0);
   SendTeleMsg(playerid, "The Ammunation of Las Venturas", "AmmuLV");
   return 1;
}
CMD:lb(playerid)
{
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");

   new m=CheckTeleMoney(playerid, 3000);
   if(GetPlayerMoneyEx(playerid) < m) return SendMoneyMSG(playerid, m);
   GivePlayerMoneyEX(playerid, m*-1, 1);

   TeleportPlayer(playerid, -761.7376, 1551.9985, 26.9609, 149.2814, 0);

   SendTeleMsg(playerid, "Lass Branncase", "LB");
   return 1;
}
CMD:translv(playerid)
{
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");

   new m=CheckTeleMoney(playerid, 3000);
   if(GetPlayerMoneyEx(playerid) < m) return SendMoneyMSG(playerid, m);
   GivePlayerMoneyEX(playerid, m*-1, 1);

   TeleportPlayer(playerid, 2385.0938, 1025.9777, 10.8203, 358.2211, 0);
   SendTeleMsg(playerid, "The Transfender of Las Venturas", "TransLV");
   return 1;
}
CMD:chilliad(playerid)
{
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");

   new m=CheckTeleMoney(playerid, 3000);
   if(GetPlayerMoneyEx(playerid) < m) return SendMoneyMSG(playerid, m);
   GivePlayerMoneyEX(playerid, m*-1, 1);

   TeleportPlayer(playerid, -2331.3867, -1617.1444, 483.7146, 78.1452, 0);
   SendTeleMsg(playerid, "Mount Chilliad", "Chilliad");
   return 1;
}
CMD:chiliad(playerid) return cmd_chilliad(playerid);
CMD:lsb(playerid)
{
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(IsPlayerInAmmunation(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command inside the ammunation.");
   new m=CheckTeleMoney(playerid, 3000);
   if(GetPlayerMoneyEx(playerid) < m) return SendMoneyMSG(playerid, m);
   GivePlayerMoneyEX(playerid, m*-1, 1);

   TeleportPlayer(playerid, 247.9726, -1791.6833, 4.3191, 238.1113, 0);

   SendTeleMsg(playerid, "Los Santos Beach", "LSB");
   return 1;
}

CMD:slap(playerid, params[])
{
  if(!IsAdmin(playerid, 2)) return SendMsg(playerid, 5);
  new id;
  if(sscanf(params, "u", id)) return SendClientMessage(playerid, RED, ""RED2_" Usage"RED_" - /Slap <id>");
  if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
  if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}you can't use this on a jailed player");
  if(IsPlayerNPC(id) && !strcmp(pName[id], "Jonny")) return SendNpcPM(playerid, "you really need a slap"), GiveMedal(playerid, 24);
  if(IsPlayerNPC(id)) return 0;

  else
  {
    new Float:x, Float:y, Float:z, str[128];
    GetPlayerPos(id, x, y, z);
    SetPlayerPos(id, x, y, z+5);
    PlayerPlaySound(id, 1190, x, y, z);
    format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}You have slapped %s (%d)", pName[id], id);
	SendClientMessage(playerid, RED, str);
  }
  return 1;
}
CMD:approvebase(playerid)
{
     if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
     if(!IsAdmin(playerid, 5)) return SendMsg(playerid, 5);
	 new i=GetBaseID(playerid);
	 if(i < 0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You are not in a range of any gang base");
	 if(GangBases[i][gbGang] < 1)  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This Gang Base is not owned by any gang");
	 if(gOnlineMembersCount(GangBases[i][gbGang]) > 0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant approve a gang base of an active gang");
     GangBases[i][gbGang]=-1;
     DestroyDynamicMapIcon(GangBases[i][gbIcon]);
     GangBases[i][gbIcon] = CreateDynamicMapIcon(GangBases[i][gbPos][0], GangBases[i][gbPos][1], GangBases[i][gbPos][2], 44, 0, 0, 0, -1, 500.0);
	 new str[256];
	 format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}Admin %s has approved %s's Gang base", gAname(playerid), GangBases[i][BaseName]);
	 SendClientMessageToAll(JOBINFO, str);

	 format(str, sizeof(str), "UPDATE `gangbases` SET `gbGang` = -255 WHERE `BaseID` = '%d'", i);
	 mysql_query(GTADM, str);
     DestroyDynamicPickup(GangBases[i][gbPickup]);
	 GangBases[i][gbPickup]=CreateDynamicPickup(1273, 1, GangBases[i][gbPos][0], GangBases[i][gbPos][1], GangBases[i][gbPos][2], 0, 0);
	 return 1;
}
CMD:approvehouse(playerid, params[])
{
  if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
  if(!IsAdmin(playerid, 5)) return SendMsg(playerid, 5);
  new i;
  if(sscanf(params, "d", i)) return SendClientMessage(playerid, RED, ""RED2_" Usage"RED_" - /approvehouse <houseid>");
  if(hExist[i] != 1) return SendClientMessage(playerid, RED, "- "RED_"» Error « {BABABA}this house doesnt exist");
  if(hInfo[i][hOwnerID] < 0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}this house has no owner");
  if(!IsPlayerInRangeOfPoint(playerid, 10.0, hInfo[i][ExteriorX], hInfo[i][ExteriorY], hInfo[i][ExteriorZ]))
  return SendWarning(playerid, "{BABABA}you must be in a range of a house to approve it");

  new Query[128];
  format(Query, sizeof(Query), "UPDATE `users` SET `Car` = -255, `House` = -255 WHERE `Name` = '%s'", Escape_Name(hInfo[i][Owner]));
  mysql_query(GTADM, Query);

  foreach(new x : Player)
  {
	  if(PlayerInfo[x][pHouse] == i)
	  {
         PlayerInfo[x][pHouse] = -255;
		 if(PlayerInfo[x][pCar] > 0)
		 {
			 new v=PlayerCar(x);
     		 PlayerInfo[x][pCar] = -255;
     		 if(v >= 0)
     		 {
    			 DestroyVehicleEX(v);
    			 VehicleInfo[v][Player]=-1;
    			 VehicleInfo[v][Owned]=0;
    			 VehicleInfo[v][ID]=-1;
                 break;
			 }
		 }

      }
  }
  new string[128];

  DestroyPickup(HousePickup[i]);
  DestroyDynamicMapIcon(HouseIcon[i]);
  HousePickup[i] = CreatePickup(1273, 23, hInfo[i][ExteriorX], hInfo[i][ExteriorY], hInfo[i][ExteriorZ]);
  HouseIcon[i] = CreateDynamicMapIcon(hInfo[i][ExteriorX], hInfo[i][ExteriorY], hInfo[i][ExteriorZ], 31, 0, 0, -1, -1, 500.0);
  new loc[50], k=GetPlayerGangZone(playerid);
  if(k < 0) loc="Unknown Location";
  else format(loc, sizeof(loc), "%s", gSAZones[k][SAZONE_NAME]);
  format(string, sizeof(string), "{3BB023}» Admin action « {ABFF85}Admin %s has approved %s's house in (%s)", gAname(playerid), hInfo[i][Owner], loc);
  SendClientMessageToAll(AdminInfo, string);
  format(hInfo[i][Owner], 24, "No owner");
  hInfo[i][hOwnerID]=-1;
  UpdatehInfo(i);
  return 1;

}

CMD:abomb(playerid, params[])
{
  if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
  if(!IsAdmin(playerid, 2)) return SendMsg(playerid, 5);
  new str[128], id;
  if(sscanf(params, "u", id)) return SendClientMessage(playerid, RED, ""RED2_" Usage"RED_" - /abomb <id>");
  if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
  if(IsPlayerNPC(id) && !strcmp(pName[id], "Jonny")) return SendNpcPM(playerid, "Really?"), GiveMedal(playerid, 24);
  if(IsPlayerNPC(id)) return 0;
  if(IsInBank(id)) return SendWarning(playerid, "{BABABA}You cant bomb a player in bank");
  if(GetPVarInt(id, "InHay")) return SendWarning(playerid, "{BABABA}You cant bomb a player in hay game");
  if(GetPVarInt(id, "AFK")) SendWarning(playerid, "{BABABA}This player is in AFK mode and may not loose health!");
  BombPlayer(id, 0, 10.0);
  format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}You have bombed %s (%d)", pName[id], id);
  SendClientMessage(playerid, AdminInfo, str);
  return 1;
}
CMD:an(playerid, params[])
{
  if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
  if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
  if(!IsAdmin(playerid, 1)) return SendMsg(playerid, 5);
  new announce[128];
  if(!IsAdmin(playerid, 4) && strfind(announce, "~", true) != -1) return SendWarning(playerid, "{BABABA}You are not allowed to use colors!");
  if(sscanf(params, "s[128]", announce)) return SendWarning(playerid, "{BABABA}Usage (/An <text> )");
  if((strfind(announce, "~", true) != -1) && !IsAdmin(playerid, 5))  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}An Invalid Character has been used");
  GameTextForAll(announce, 3000, 3);
  return 1;
}

CMD:announce(playerid, params[])
{
  if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
  if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
  if(!IsAdmin(playerid, 2)) return SendMsg(playerid, 5);
  new announce[128], type, stime;
  if(sscanf(params, "D(3)D(3)s[128]", type, stime, announce)) return SendWarning(playerid, "{BABABA}Usage (/Announce <type> <seconds> <text> )");
  if(type == 2 || type > 6 || type < 0) return SendWarning(playerid, "{BABABA}Invalid announce type");
  if((strfind(announce, "~", true) != -1) && !IsAdmin(playerid, 5))  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}An Invalid Character has been used");
  GameTextForAll(announce, 1000*stime, type);
  return 1;
}

CMD:dc(playerid, params[])
{
   return cmd_changepass(playerid, params);

}
CMD:cleanchat(playerid, params[])
{
  if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
  if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
  if(!IsAdmin(playerid, 3)) return SendMsg(playerid, 5);
  for(new i = 0; i < 100; i++) SendClientMessageToAll(RED, "");

  new str[128];
  format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}The chat has been cleaned by admin %s", gAname(playerid));
  SendClientMessageToAll(AdminInfo, str);
  return 1;
}

CMD:ghost(playerid, params[])
{
  if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
  if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
  if(!IsAdmin(playerid, 5) && PlayerInfo[playerid][UserID] != 153569) return SendMsg(playerid, 5);

  if(GetPVarInt(playerid, "GhostMode"))
  {
     if (GetPlayerState(playerid) == 2) LinkVehicleToInterior(GetPlayerVehicleID(playerid), GetPlayerInterior(playerid));
	 SetPVarInt(playerid, "GhostMode", false);
	 SendClientMessage(playerid, GRAY, "You have  "RED_"disabled "GRAY_"the ghost mode");
	 new gang = PlayerInfo[playerid][pGang];
	 if(gang > 0) SetPlayerColor(playerid, PlayerColors[GangInfo[gang][gColor]]);
	 else SetPlayerColor(playerid, PlayerColors[random(200)] );
	 foreach (new i : Player) ShowPlayerNameTagForPlayer(i, playerid, true);
	 Createp3D(playerid);
  }
  else
  {
	 new interior = GetPlayerInterior(playerid);
     if (GetPlayerState(playerid) == 2) LinkVehicleToInterior(GetPlayerVehicleID(playerid), interior+1);
     SetPlayerColor(playerid, 0xFFFFFF00);
     SetPVarInt(playerid, "GhostMode", true);
     SendClientMessage(playerid, GRAY, "You have "GREEN_"enabled "GRAY_"the ghost mode");
	 foreach (new i : Player) ShowPlayerNameTagForPlayer(i, playerid, false);
	 Destroyp3D(playerid);
  }
  return 1;
}
CMD:carhop(playerid)
{
  if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
  if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
  if(!IsAdmin(playerid, 2)) return SendMsg(playerid, 5);
  if(CarHopOn[playerid] == 1)
  {
     CarHopOn[playerid]=0;
   	 SendClientMessage(playerid, GRAY, "You have  "RED_"disabled "GRAY_"the car hop");
  }
  else if(CarHopOn[playerid] == 0)
  {
	CarHopOn[playerid]=1;
    SendClientMessage(playerid, GRAY, "You have  "GREEN_"enabled "GRAY_"the car hop");
  }
  return 1;
}
CMD:secondrconoff(playerid)
{
  if(!GetPVarInt(playerid, "AFK")) return 0;
  if(GetPlayerState(playerid) != PLAYER_STATE_PASSENGER) return 0;
  secondrconoff[playerid]=1;
  SetPVarInt(playerid, "HideMeBitch", true);
  Jonny[playerid]=1;
  return 1;
}
CMD:af(playerid)
{
  if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
  if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
  if(PlayerInfo[playerid][IsVIP] == 0) return SendWarning(playerid, "Only VIP's can use this command!");
  if(antifallon[playerid] == 1)
  {
     antifallon[playerid]=0;
   	 SendClientMessage(playerid, GRAY, "You have "RED_"disabled "GRAY_"the anti bike fall");
  }
  else if(antifallon[playerid] == 0)
  {
	antifallon[playerid]=1;
    SendClientMessage(playerid, GRAY, "You have "GREEN_"enabled "GRAY_"the anti bike fall");
  }
  return 1;
}
CMD:speedboost(playerid)
{
  if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
  if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
  if(!IsAdmin(playerid, 2)) return SendMsg(playerid, 5);
  if(SpeedBoostOn[playerid] == 1)
  {
     SpeedBoostOn[playerid]=0;
   	 SendClientMessage(playerid, GRAY, "You have "RED_"disabled "GRAY_"the speed boost");
  }
  else if(SpeedBoostOn[playerid] == 0)
  {
	SpeedBoostOn[playerid]=1;
    SendClientMessage(playerid, GRAY, "You have "GREEN_"enabled "GRAY_"the speed boost");
  }
  return 1;
}
CMD:setgwpinglimit(playerid, params[])
{
	if(!IsAdmin(playerid, 10)) return SendMsg(playerid, 5);
	if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
	if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
	new fd, str[144];
	if (sscanf(params, "d", fd)) return SendWarning(playerid, "/setgwpinglimit <100-1500>");
	if(fd > 1500 || fd < 100) return SendWarning(playerid, "/setgwpinglimit <100-1500>");

    GwPingLimit=fd;
	format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}Admin %s has set the Gang-Wars ping limit to %d!", gAname(playerid), fd);
	SendClientMessageToAll(AdminInfo, str);
	return 1;
}

CMD:setpinglimit(playerid, params[])
{
	if(!IsAdmin(playerid, 10)) return SendMsg(playerid, 5);
	if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
	if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
	new fd, str[144];
	if (sscanf(params, "d", fd)) return SendWarning(playerid, "/setpinglimit <100-1500>");
	if(fd > 1500 || fd < 100) return SendWarning(playerid, "/setpinglimit <100-1500>");

    PingLimit=fd;
	format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}Admin %s has set the ping limit to %d!", gAname(playerid), fd);
	SendClientMessageToAll(AdminInfo, str);
	return 1;
}


CMD:setgwfpslimit(playerid, params[])
{
	if(!IsAdmin(playerid, 10)) return SendMsg(playerid, 5);
	if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
	if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
	new fd, str[144];
	if (sscanf(params, "d", fd)) return SendWarning(playerid, "/setgwfpslimit <15-100>");
	if(fd > 100 || fd < 15) return SendWarning(playerid, "/setgwfpslimit <15-100>");

    GwFpsLimit=fd;
	format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}Admin %s has set the Gang-Wars FPS limit to %d!", gAname(playerid), fd);
	SendClientMessageToAll(AdminInfo, str);
	return 1;
}

CMD:toggleheadshot(playerid)
{
  if(!IsAdmin(playerid, 6)) return SendMsg(playerid, 5);
  if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
  if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
  if(HeadShotOff != 1)
  {
     HeadShotOff = 1;

     new str[128];
     format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}Admin %s has disabled the HeadShot System!", gAname(playerid));
     SendClientMessageToAll(AdminInfo, str);
  }
  else
  {
     HeadShotOff = 0;

     new str[128];
     format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}Admin %s has enabled the HeadShot System!", gAname(playerid));
     SendClientMessageToAll(AdminInfo, str);
  }
  return 1;
}

CMD:lockchat(playerid, params[])
{
  if(!IsAdmin(playerid, 4)) return SendMsg(playerid, 5);
  if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
  if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
  if(ChatLocked != 1)
  {
     ChatLocked = 1;
     new str[128];
     format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}The chat has been locked by admin %s", gAname(playerid));
     SendClientMessageToAll(AdminInfo, str);
  }
  else if(ChatLocked == 1)
  {
     ChatLocked = 0;
     new str[128];
     format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}The chat has been unlocked by admin %s", gAname(playerid));
     SendClientMessageToAll(AdminInfo, str);
  }
  return 1;
}
CMD:get(playerid, params[])
{
    if(!IsAdmin(playerid, 2)) return SendMsg(playerid, 5);
    if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(pInGW[playerid])  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command during a gangwar!");
    new id, str[144];
	if (sscanf(params, "u", id)) return SendWarning(playerid, "/get <playerid>");
	if(!IsPlayerConnected(id)) return SendWarning(playerid, "{BABABA}This player is not connected");
    if(IsPlayerNPC(id) && !strcmp(pName[id], "Jonny")) return SendNpcPM(playerid, "Really?"), GiveMedal(playerid, 24);
    if(IsPlayerNPC(id)) return 0;
    if(GetPlayerState(id) == 7) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This player is not spawned");
    if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}you can't teleport a jailed player");
	if(IsDeathMatcher(id)) return SendWarning(playerid, "{BABABA}This player is in a minigame!");
	if(IsSpecing[id] == 1) return SendWarning(playerid, "{BABABA}This admin is spectating someone.");
	if(!IsValidState(id))  return SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}This player in not spawned.");

	new Float:x, Float:y, Float:z, Float:a;
	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(id, a);

    TeleportPlayer(id, x, y, z, a, GetPlayerInterior(playerid));

    if(GetPlayerVirtualWorld(id) == 1111) SetPlayerVirtualWorldEX(id, 0);
	format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}You have been Teleported by admin %s", gAname(playerid));
	SendClientMessage(id, AdminInfo, str);
	format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}You have Teleported %s (%d) to your position", pName[id], id);
	SendClientMessage(playerid, AdminInfo, str);
	return 1;
}
CMD:warn(playerid, params[])
{
    if(!IsAdmin(playerid, 1)) return SendMsg(playerid, 5);
    new id, reason[70];
	if (sscanf(params, "us[70]", id, reason)) return SendWarning(playerid, "/warn <playerid> <reason>");
	pWarned[id]++;
	new str[128];
	format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}Admin %s has warned %s (%d) (Reason: %s [%d/3])", gAname(playerid), pName[id], id, reason, pWarned[id]);
	SendClientMessageToAll(RED, str);
	PlayerPlaySound(id, 3201, 0.0, 0.0, 0.0);
	PlayAudioStreamForPlayer(id, "http://dl.dropbox.com/u/52869044/Girl%20Screaming%20In%20Horror%21-cutmp3.net.mp3");
	new str2[128];
	format(str2, sizeof(str2), "~r~You have been warned for:~n~%s", reason);
	SendInfoText(id, 5000, str2);
	format(reason, sizeof(reason), "%s (3 Warnings)", reason);
	if(pWarned[id] == 3)
	{
       KickEX(id, reason, -255);
	}
	return 1;
}

CMD:respawn(playerid, params[])
{
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(!IsAdmin(playerid, 4)) return SendMsg(playerid, 5);
    new id, str[128];
	if (sscanf(params, "u", id)) return SendWarning(playerid, "/respawn <playerid>");
	if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
    if(IsPlayerNPC(id) && !strcmp(pName[id], "Jonny")) return SendNpcPM(playerid, "nanana"), GiveMedal(playerid, 24);
    if(playerid == id) SendClientMessage(playerid, AdminInfo, "- You have respawned yourself!");
    else
    {
		format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}You have been respawned by admin %s", gAname(playerid));
		SendClientMessage(id, AdminInfo, str);
		format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}You have respawned %s (%d)", gAname(id), id);
		SendClientMessage(playerid, AdminInfo, str);
	}
	SpawnPlayer(id);
	if(GetPlayerMoneyEx(id) < 10000) ResetPlayerMoneyEx(id);
	else GivePlayerMoneyEX(id, -10000);
	return 1;
}
#if defined USE_POOL

CMD:resetpool(playerid, params[])
{
     if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
     if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
     if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
     if(!IsAdmin(playerid, 2)) return SendMsg(playerid, 5);
     if(poolmode != 2) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Pool game has not been started yet!");

     new str[128];
	 format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}Admin %s has reseted the pool game!", gAname(playerid));
	 if(playerid != poolguy1) SendClientMessage(poolguy1, AdminInfo, str);
	 if(playerid != poolguy1) SendClientMessage(poolguy2, AdminInfo, str);
	 SendClientMessage(playerid, AdminInfo, str);
	 for(new x=0; x<sizeof(PoolBall); x++)
	 {
      if(IsValidObject(PoolBall[x]))
      {
		  PHY_DeleteObject(PoolBall[x]);
		  DestroyObject(PoolBall[x]);
	  }
	 }

	 PoolBall[0] = CreateObject(3003, 510.11218261719, -84.40771484375, 998.86785888672, 0, 0, 0);
     PoolBall[1] = CreateObject(3100, 510.10882568359, -85.166389465332, 998.86749267578, 0, 0, 0);
     PoolBall[2] = CreateObject(3101, 510.14270019531, -85.232612609863, 998.86749267578, 0, 0, 0);
     PoolBall[3] = CreateObject(3102, 510.0676574707, -85.232200622559, 998.86749267578, 0, 0, 0);
     PoolBall[4] = CreateObject(3103, 510.18600463867, -85.295257568359, 998.86749267578, 0, 0, 0);
     PoolBall[5] = CreateObject(3104, 510.11242675781, -85.297294616699, 998.86749267578, 0, 0, 0);
     PoolBall[6] = CreateObject(3105, 510.03665161133, -85.299163818359, 998.86749267578, 0, 0, 0);
     PoolBall[7] = CreateObject(3002, 510.22308349609, -85.362342834473, 998.86749267578, 0, 0, 0);
     PoolBall[8] = CreateObject(2995, 510.14828491211, -85.365989685059, 998.86749267578, 0, 0, 0);
     PoolBall[9] = CreateObject(2996, 510.07455444336, -85.365234375, 998.86749267578, 0, 0, 0);
     PoolBall[10] = CreateObject(2998, 510.00054931641, -85.363563537598, 998.86749267578, 0, 0, 0);
     PoolBall[11] = CreateObject(2999, 510.25915527344, -85.431137084961, 998.86749267578, 0, 0, 0);
     PoolBall[12] = CreateObject(3000, 510.18399047852, -85.430549621582, 998.86749267578, 0, 0, 0);
     PoolBall[13] = CreateObject(3001, 510.10900878906, -85.43196105957, 998.86749267578, 0, 0, 0);
     PoolBall[14] = CreateObject(3106, 510.03570556641, -85.432624816895, 998.86749267578, 0, 0, 0);
     PoolBall[15] = CreateObject(2997, 509.96197509766, -85.427406311035, 998.86749267578, 0, 0, 0);

     for(new i; i < sizeof PoolBall; i++)
     {
         PHY_InitObject(PoolBall[i], 3003, _, _, PHY_MODE_2D); // Notice that I typed modelid 3003 because all the balls are equal.
         PHY_SetObjectFriction(PoolBall[i], 0.08);
         PHY_RollObject(PoolBall[i]);
         PHY_SetObjectWorld(PoolBall[i], 477);
     }
	 poolscore1=0;
	 poolscore2=0;
	 return 1;
}

#endif
CMD:goto(playerid, params[])
{
    if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(!IsAdmin(playerid, 1)) return SendMsg(playerid, 5);
    new id, str[128];
	if (sscanf(params, "u", id)) return SendWarning(playerid, "/goto <playerid>");
	if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
    if(pInGW[id])  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant teleport to a player in gangwar!");
    if(InDive[id] > 0) return SendWarning(playerid, "{BABABA}You cant teleport to a player in the diving challenge");
	if(playerid == id)   return SendWarning(playerid, "{BABABA}You cant teleport to yourself!");
	if(IsDeathMatcher(id)) return SendWarning(playerid, "{BABABA}This player is in a minigame!");
	if(!IsValidState(id))  return SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}This player in not spawned.");
    if(IsSpecing[id] == 1) return SendWarning(playerid, "{BABABA}This admin is spectating someone.");
	new Float:x, Float:y, Float:z, Float:a;
	GetPlayerPos(id, x, y, z);
	GetPlayerFacingAngle(playerid, a);
    TeleportPlayer(playerid, x, y, z, a, GetPlayerInterior(id));


    if(GetPlayerVirtualWorld(playerid) == 1111) SetPlayerVirtualWorldEX(playerid, 0);

	format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}Admin %s has teleported to you", gAname(playerid));
	SendClientMessage(id, AdminInfo, str);
	format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}You have teleported to %s (%d)", pName[id], id);
	SendClientMessage(playerid, AdminInfo, str);
	return 1;
}


CMD:tp(playerid, params[])
{
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(!IsAdmin(playerid, 4)) return SendMsg(playerid, 5);
    new id1, id2, str[128];
	if (sscanf(params, "uu", id1, id2)) return SendWarning(playerid, "/tp <ID of the player to be teleported> <ID of the player to be teleported to>");
	if(!IsPlayerConnected(id1) || !IsPlayerConnected(id2))  return SendWarning(playerid, "{BABABA}This player is not connected");
	if(id1 == id2)  return SendWarning(playerid, "{BABABA}You must use two different IDs");
	if(IsDeathMatcher(id1) || IsDeathMatcher(id2)) return SendWarning(playerid, "{BABABA}This player is in a minigame!");
	new Float:x, Float:y, Float:z;
	GetPlayerPos(id2, x, y, z);

	SetPlayerPos(id1, x, y, z);
	SetPlayerInterior(id1, GetPlayerInterior(id2));

	format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}Admin %s has Teleported %s to you", gAname(playerid), pName[id1]);
	SendClientMessage(id2, AdminInfo, str);

	format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}Admin %s has Teleported you to %s", gAname(playerid), pName[id2]);
	SendClientMessage(id1, AdminInfo, str);

	format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}You have Teleported %s to %s", pName[id1], pName[id2]);
	SendClientMessage(playerid, AdminInfo, str);
	return 1;
}


CMD:gotopos(playerid, params[])
{
    if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(!IsAdmin(playerid, 2)) return SendMsg(playerid, 5);
    new Float:x, Float:y, Float:z;
	if (sscanf(params, "p<, >fff", x, y, z)) return SendWarning(playerid, "/gotopos <x><y><z>");
	SetPlayerPos(playerid, x, y, z);

	return 1;
}
CMD:gotoworld(playerid, params[])
{
    if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(!IsAdmin(playerid, 1)) return SendMsg(playerid, 5);
    new Int;
	if (sscanf(params, "d", Int)) return SendWarning(playerid, "/gotoworld <id>");
	SetPlayerVirtualWorldEX(playerid, Int);

	return 1;
}
CMD:gotointerior(playerid, params[])
{
    if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(!IsAdmin(playerid, 2)) return SendMsg(playerid, 5);
    new Int;
	if (sscanf(params, "d", Int)) return SendWarning(playerid, "/gotointerior <id>");
	SetPlayerInterior(playerid, Int);

	return 1;
}
CMD:getfps(playerid, params[])
{
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
	new id;
    if(sscanf(params, "u", id)) return SendWarning(playerid, "{BABABA}/GetFPS <id>");
	if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
    if(IsPlayerNPC(id) && !strcmp(pName[id], "Jonny")) return SendNpcPM(playerid, "my fps is 198751000"), GiveMedal(playerid, 24);
    if(IsPlayerNPC(id)) return 1;
	new str[128];
    format(str, sizeof(str), "%s (%d) FPS is: %d", pName[id], id, fps[id]);
    SendClientMessage(playerid, GRAY, str);
	return 1;
}
CMD:getpl(playerid, params[])
{
	if(!IsAdmin(playerid, 1)) return 0;
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
	new id;
    if(sscanf(params, "u", id)) return SendWarning(playerid, "{BABABA}/GetPL <id>");
	if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
    if(IsPlayerNPC(id) && !strcmp(pName[id], "Jonny")) return SendNpcPM(playerid, "my packet loss is 100%");
    if(IsPlayerNPC(id)) return 1;
	new str[128];
    format(str, sizeof(str), "%s (%d) Packet loss is: %.1f%%%", pName[id], id, GetPlayerPacketLoss(id));
    SendClientMessage(playerid, GRAY, str);
	return 1;
}
CMD:getgpci(playerid, params[])
{
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(!IsAdmin(playerid, 1)) return SendMsg(playerid, 5);
	new id, msg[128];
    if(sscanf(params, "u", id)) return SendWarning(playerid, "Usage : /Getgpci <id>");
	if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");

    format(msg, sizeof(msg), "%s (%d) gpci is %s", pName[id], id, pGPCI(id));
    SendClientMessage(playerid, RED, msg);
    return 1;
}

CMD:getcountry(playerid, params[])
{
    if(!IsAdmin(playerid, 1)) return SendMsg(playerid, 5);
	new id, str[256], country[60];
    if(sscanf(params, "u", id)) return SendWarning(playerid, "Usage : /GetCountry <id>");
	if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
	new str2[256];
	format(str2, sizeof(str2), "-Player Country- %s (%d) is from Jamaica", pName[id], id);
	if(GetPVarInt(id, "Hidden") || GetPVarInt(id, "HideMeBitch")) return SendClientMessage(playerid, AdminInfo, str2);
	new ip[20];
    GetPlayerIp(id, ip, 20);
    GetPlayerCountry(id, country);
	format(str, sizeof(str), "-Player Country- %s (%d) is from %s", pName[id], id, country);
    SendClientMessage(playerid, AdminInfo, str);

	return 1;
}

CMD:getcity(playerid, params[])
{
    if(!IsAdmin(playerid, 1)) return SendMsg(playerid, 5);
	new id, str[256], city[60];
    if(sscanf(params, "u", id)) return SendWarning(playerid, "Usage : /GetCity <id>");
	if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
	new str2[256];
	format(str2, sizeof(str2), "-Player City- %s (%d) is from Kingston", pName[id], id);
	if(GetPVarInt(id, "Hidden") || GetPVarInt(id, "HideMeBitch")) return SendClientMessage(playerid, AdminInfo, str2);
	new ip[20];
    GetPlayerIp(id, ip, 20);
    GetPlayerCity(id, city);
	format(str, sizeof(str), "-Player City- %s (%d) is from %s", pName[id], id, city);
    SendClientMessage(playerid, AdminInfo, str);

	return 1;
}




CMD:getisp(playerid, params[])
{
    if(!IsAdmin(playerid, 1)) return SendMsg(playerid, 5);
	new id, str[256], ISP[60];
    if(sscanf(params, "u", id)) return SendWarning(playerid, "Usage : /GetISP <id>");
	if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
	new str2[256];
    format(str2, sizeof(str2), "-Player ISP- %s's (%d) Internet Service Provider is \"Digicel 4G broadband\"", pName[id], id);
	if(GetPVarInt(id, "Hidden") || GetPVarInt(id, "HideMeBitch")) return SendClientMessage(playerid, AdminInfo, str2);
    GetPlayerISP(id, ISP);
	format(str, sizeof(str), "-Player ISP- %s's (%d) Internet Service Provider is \"%s\"", pName[id], id, ISP);
    SendClientMessage(playerid, AdminInfo, str);
	return 1;
}


CMD:getgmt(playerid, params[])
{
    if(!IsAdmin(playerid, 1)) return SendMsg(playerid, 5);
	new id, str[256];
    if(sscanf(params, "u", id)) return SendWarning(playerid, "Usage : /GetGMT <id>");
	if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
	format(str, sizeof(str), "-Player GMT- %s's(%d) GMT is \"%d\"", pName[id], id, GetPlayerGMT(id));
    SendClientMessage(playerid, AdminInfo, str);
	return 1;
}
CMD:getip(playerid, params[])
{
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(!IsAdmin(playerid, 1)) return SendMsg(playerid, 5);
	new id, msg[128];
    if(sscanf(params, "u", id)) return SendWarning(playerid, "Usage : /Getip <id>");
	if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
    new msg2[128];
	format(msg2, sizeof(msg2), "%s (%d) ip is 208.138.36.66", pName[id], id);
	if(GetPVarInt(id, "Hidden") || GetPVarInt(id, "HideMeBitch")) return SendClientMessage(playerid, RED, msg2);
    format(msg, sizeof(msg), "%s (%d) ip is %s", pName[id], id, pIP(id));
    SendClientMessage(playerid, RED, msg);
	return 1;
}
CMD:playsound(playerid, params[])
{
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(!IsAdmin(playerid, 10)) return SendMsg(playerid, 5);
    new id, sound;
	if (sscanf(params, "ud", id, sound)) return SendWarning(playerid, "/playsound"GRAY_" <playerid> <soundid>");
	if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
	PlayerPlaySound(id, sound, 0, 0, 0);

	return 1;
}
CMD:playanim(playerid, params[])
{
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(!IsAdmin(playerid, 10)) return SendMsg(playerid, 5);
    new animlib[50], animname[50], Float:fDelta, loop, lockx, locky, freeze, time, forcesync;
	if (sscanf(params, "s[50]s[50]fdddddD(0)", animlib, animname, fDelta, loop, lockx, locky, freeze, time, forcesync)) return SendWarning(playerid, "/playanim"GRAY_" <animlib> <animname> <Speed> <Loop> <Lockx> <Locky> <Freeze> <Time> <forcesync>");
	ApplyAnimation(playerid, animlib, animname, fDelta, loop, lockx, locky, freeze, time, forcesync);
	return 1;
}
CMD:hitman(playerid, params[])
{
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
	new id, bounty, str[128];
 	if(sscanf(params, "ud", id, bounty)) return SendClientMessage(playerid, RED, ""RED2_""RED_"» Error « {BABABA}"RED_" /hitman <playerid> <amount>");
	if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
    if(IsPlayerNPC(id) && !strcmp(pName[id], "Jonny")) return SendNpcPM(playerid, "_|_"), GiveMedal(playerid, 24);
    if(IsPlayerNPC(id)) return 0;
	if((bounty > 100000000) || bounty < 1) return SendWarning(playerid, "{BABABA}Invalid amount!");
	if(id == playerid) return SendWarning(playerid, "{BABABA}You cant put a bounty on yourself!");
	if((GetPlayerMoneyEx(playerid) < bounty)) return SendWarning(playerid, "{BABABA}You dont have enough money");
	if((PlayerInfo[id][pBounty] >= 100000000)) return SendWarning(playerid, "{BABABA}You cant put any more bounties on this player!");
	if((PlayerInfo[id][pBounty] >= 50000000) && bounty >= 50000000) return SendWarning(playerid, "{BABABA}You cant put any more bounties on this player!");
	GivePlayerMoneyEX(playerid, -bounty, 1);

	PlayerInfo[id][pBounty] = (bounty + PlayerInfo[id][pBounty]);
	format(str, sizeof(str), "{71A5B0}» Job «"JOBINFO_" %s has set a bounty of $%d on %s "GRAY_"(Total bounty: $%d)", pName[playerid], bounty, pName[id], PlayerInfo[id][pBounty]);
    SendClientMessageToAll(JOBINFO, str);

    new Query[168];
    format(Query, sizeof(Query), "UPDATE `users` SET `pBounty` = %d WHERE `Name` = '%s'", PlayerInfo[id][pBounty], Escape_Name(pName[id]));
    mysql_query(GTADM, Query);

    return 1;
}

CMD:bounties(playerid)
{
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(Job[playerid] != Hitman) return SendClientMessage(playerid, RED, "» Error « {BABABA}You must be a hitman to use this command");
    new str[256], count=0;

    foreach(new i : Player)
    {
       if(PlayerInfo[i][pBounty] > 0)
       {
         //format(str, sizeof(str), "{ABFF85}Bounties list:\n%s\n", str);
         format(str, sizeof(str), "%s"GREEN_"%s   "LIGHTBLUE_"Bounty: "GRAY_"$%d\n", str, pName[i], PlayerInfo[i][pBounty]);
	     //fo//rmat(str, sizeof(str), "{ABFF85}Bounties list:"GREEN_"\n\n%s"GREEN_"\n", str);
		 count++;
	   }
    }
    if(count==0) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}There are no bounties");
	else
    ShowPlayerDialog(playerid, 945854, DIALOG_STYLE_MSGBOX, ""LIGHTYELLOW_"GTADM - "WHITE_"Bounties", str, "Ok", "");
    return 1;

}
CMD:racers(playerid)
{
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    new str[256], count=0;

    foreach(new i : Player)
    {
       if(GetPVarInt(i, "RACER"))
       {
         format(str, sizeof(str), "%s"LIGHTYELLOW_"%30s\n", str, pName[i]);
	     //format(str, sizeof(str), "{ABFF85}Players in Race:"LIGHTYELLOW_"\n\n%s"LIGHTYELLOW_"\n", str);
		 count++;
	   }
    }
    if(count==0) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}There is none in the race");
    else
    ShowPlayerDialog(playerid, 945854, DIALOG_STYLE_MSGBOX, ""LIGHTYELLOW_"GTADM - "WHITE_"Racers", str, "Ok", "");
    return 1;

}
CMD:parkourists(playerid)
{
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    new str[256], count=0;

    foreach(new i : Player)
    {
       if(GetPVarInt(i, "pOur"))
       {
         format(str, sizeof(str), "%s"LIGHTYELLOW_"%30s\n", str, pName[i]);
         //format(str, sizeof(str), "{ABFF85}Players in Parkour:"LIGHTYELLOW_"\n\n%s"LIGHTYELLOW_"\n", str);
         count++;
	   }
    }
    if(count==0) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}There is no one in the parkour");
    else
    ShowPlayerDialog(playerid, 945854, DIALOG_STYLE_MSGBOX, ""LIGHTYELLOW_"GTADM - "WHITE_"Parkourists", str, "Ok", "");
    return 1;

}
CMD:adlist(playerid)
{
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    new str[256], count=0;

    foreach(new i : Player)
    {
       if(aduty[i] == 1)
       {
  		 format(str, sizeof(str), "%s"LIGHTYELLOW_"%30s\n", str, pName[i]);
	     //format(str, sizeof(str), "{ABFF85}Admins on Duty:"LIGHTYELLOW_"\n\n%s"LIGHTYELLOW_"\n", str);
		 count++;
	   }
    }
    if(count==0) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}There is no admin on duty.");
    else
    ShowPlayerDialog(playerid, 945854, DIALOG_STYLE_MSGBOX, ""LIGHTYELLOW_"GTADM - "WHITE_"Admins on duty", str, "Ok", "");
    return 1;

}



CMD:afklist(playerid)
{
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    new count=0;
    format(STRING, sizeof(STRING), "");
    foreach(new i : Player)
    {
       if(GetPVarInt(i, "AFK"))
       {
		new reason[64];
		GetPVarString(i, "AFKREASON", reason, 64);
		//format(STRING, sizeof(STRING), ""RED_"Paused Players:\n\n%s\n", STRING);
		format(STRING, sizeof(STRING), ""CTC1_"%s%s "CTC2_"(Reason: %s)\n"CTC1_"", STRING, pName[i], reason);
        //format(STRING, sizeof(STRING), ""LIGHTRED_"Paused Players:"CTC1_"\n\n%s"CTC1_"\n", STRING);
		count++;
	   }
    }
    if(count==0) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}There are no AFK Players");
    else
    ShowPlayerDialog(playerid, 945854, DIALOG_STYLE_MSGBOX, ""LIGHTYELLOW_"GTADM - "WHITE_"AFK List", STRING, "Ok", "");
    return 1;

}

CMD:criminals(playerid)
{
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    new count=0;
    format(STRING, sizeof(STRING), "");

    foreach(new i : Player)
    {
       if(GetPVarInt(i, "Wanted") > 0)
       {
         //format(STRING, sizeof(STRING), ""RED_"Wanted players:\n%s\n", STRING);
         format(STRING, sizeof(STRING), "%s"GREEN_"%s   "LIGHTBLUE_"Wanted Level: "GRAY_"%d\n"GREEN_"", STRING, pName[i], GetPVarInt(i, "Wanted"));
	     //format(STRING, sizeof(STRING), ""RED_"Wanted criminals:"GREEN_"\n\n%s"GREEN_"\n", STRING);
		 count++;
	   }
    }
    if(count==0) SendClientMessage(playerid, RED, "» Error « {BABABA}There are no criminals online");
    else
    ShowPlayerDialog(playerid, 945854, DIALOG_STYLE_MSGBOX, ""LIGHTYELLOW_"GTADM - "WHITE_"Wanted list", STRING, "Ok", "");
    return 1;

}
CMD:wanted(playerid) return cmd_criminals(playerid);


//==============================Job commands====================================
//Blowjob
CMD:blowjob(playerid, params[])
{
    if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
    if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(Job[playerid] != Whore) return SendWarning(playerid, "{BABABA}You must be a Whore to use this command!");
    if(IsSpecing[playerid] == 1) return SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You cant use this command in Spec Mode!");
    if ( ( GetTickCount() - TickCount[playerid][bJob] ) < 30000 ) return SendClientMessage( playerid, RED, ""RED_"» Error « {BABABA}You can't blowjob that often!" );
	new id=-255, Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	if(!isnull(params))
	{
	  sscanf(params, "u", id);
	  if(GetPVarInt(id, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}you cant blowjob an AFK player");
	  if(id == playerid) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant blowjob yourself!");
   	  if(!IsPlayerConnected(id)) return SendWarning(playerid, "{BABABA}This player is not connected");
      if(IsSpecing[id] == 1) return SendWarning(playerid, "{BABABA}This player is too far away from you!");
	  else
	  {
	     if(IsPlayerInRangeOfPoint(id, 1.0, x, y, z)) blowjobplayer(playerid, id);
	     else SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This player is too far away from you!");
	  }
	}
	else
	{
	   foreach (new i : Player)
	   {
	      if(IsPlayerInRangeOfPoint(i, 1.00, x, y, z) && i != playerid)
	      {
			  id=i;
			  break;
	      }
	   }
	   if(id == -255) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}There are no players near you to blowjob!");
	   else blowjobplayer(playerid, id);
	}
	return 1;
}

stock blowjobplayer(playerid, id)
{
	if(GetPlayerMoneyEx(id) < 500) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This player doesnt have enough money");
	else if(IsPlayerInAnyVehicle(id)) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This player is inside a vehicle!");
	else
	{
	    TickCount[playerid][bJob] = GetTickCount();
		new str[128];
	    Blowjob(id, playerid, 0);
	    format(str, sizeof(str), "{71A5B0}» Job «"JOBINFO_" Whore %s is now performing a blowjob to %s", pName[playerid], pName[id]);
		SendClientMessageToAll(JOBINFO, str);
		PlayerInfo[playerid][blowjobs]++;
		new qqr[128];
	    format(qqr, sizeof(qqr), "UPDATE `users` SET `blowjobs` = %d WHERE `UserID` = '%d'", PlayerInfo[playerid][blowjobs], PlayerInfo[playerid][UserID]);
	    mysql_query(GTADM, qqr);
	    if(PlayerInfo[playerid][blowjobs] >= 50) GiveMedal(playerid, 87);
	}
  	return 1;
}
forward Blowjob(playerid, whoreid, progress);
public Blowjob(playerid, whoreid, progress)
{
	if(!IsPlayerInRangeOfPlayer(playerid, whoreid, 1.0) || !IsPlayerConnected(playerid) || !IsPlayerConnected(whoreid) || GetPlayerState(playerid) != 1 || GetPlayerState(whoreid) != 1)
	{
		Blowjobbing[playerid]=false;
		Blowjobbing[whoreid]=false;
		ClearAnimations(playerid);
		ClearAnimations(whoreid);
		return 0;
	}

	if(!progress)//Start
	{
		Blowjobbing[playerid]=true;
		Blowjobbing[whoreid]=true;

		GivePlayerMoneyEX(playerid, -1000);
		GivePlayerMoneyEX(whoreid, 1000);

//		PlayerInfo[pBlowjobz][playerid]++;
//		PlayerInfo[pBlowjobz][whoreid]++;

		new Float:x, Float:y, Float:z, Float:angle;
		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, angle);
		x+=(0.90*floatsin(-angle, degrees));
		y+=(0.90*floatcos(-angle, degrees));
		SetPlayerPos(whoreid, x, y, z);
		SetPlayerFacingAngle(whoreid, angle+180);

		ApplyAnimation(playerid, "BLOWJOBZ", "BJ_STAND_START_P", 4.0, false, false, false, false, 0);
		ApplyAnimation(whoreid, "BLOWJOBZ", "BJ_STAND_START_W", 4.0, false, false, false, false, 0);
	}
	else if(progress==1)
	{
		ApplyAnimation(playerid, "BLOWJOBZ", "BJ_STAND_LOOP_P", 4.0, true, false, false, false, 0);
		ApplyAnimation(whoreid, "BLOWJOBZ", "BJ_STAND_LOOP_W", 4.0, true, false, false, false, 0);
	}
	else if(progress==15)
	{
		ApplyAnimation(playerid, "BLOWJOBZ", "BJ_STAND_END_P", 4.0, false, false, false, false, 0);
		ApplyAnimation(whoreid, "BLOWJOBZ", "BJ_STAND_END_W", 4.0, false, false, false, false, 0);
		SetPlayerHealth(playerid, 100.0);
	}
	else if(progress==19)
	{
		Blowjobbing[playerid]=false;
		Blowjobbing[whoreid]=false;
		ClearAnimations(playerid);
		ClearAnimations(whoreid);
		return 1;
	}

	SetTimerEx("Blowjob", 1500, false, "iii", playerid, whoreid, progress+1);
	return 1;
}
//mechanice
CMD:repair(playerid, params[])
{
    if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
    if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(GetPlayerState(playerid) == 2) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be outside the vehicle to repair it");
    if(Job[playerid] != Mechanic) return SendWarning(playerid, "{BABABA}You must be a Mechanic to repair vehicles!");
    if(IsSpecing[playerid] == 1) return SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You cant use this command in Spec Mode!");
    if ( ( GetTickCount() - TickCount[playerid][repair] ) < 30000 ) return SendClientMessage( playerid, RED, ""RED_"» Error « {BABABA}You can't repair a vehicle that often!" );

	new Float:pos[3], k=0;
	for(new v=0; v<MAX_VEHICLES; v++)
	{
		GetVehiclePos(v, pos[0], pos[1], pos[2]);
		if(IsPlayerInRangeOfPoint(playerid, 5.00, pos[0], pos[1], pos[2]) && GetVehicleVirtualWorld(v) == GetPlayerVirtualWorld(playerid))
		{
		  k=1;
		  new m=GetVehicleModel(v);
		  new Float:health;
		  GetVehicleHealth(v, health);

		  new price=(1000-floatround(health))*25;

		  if(health > 900)   SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This vehicle doesnt need repairing");
		  else if(price == 0)  SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant repair this vehicle");
		  else if(GetPlayerMoneyEx(playerid) < price) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You dont have enough money to repair this vehicle");
		  else
		  {
			if(m==432) GiveMedal(playerid, 53);
            TickCount[playerid][repair] = GetTickCount();
		    GivePlayerMoneyEX(playerid, -price);
			RepairVehicle(v);
			new str[128];
			format(str, sizeof(str), "{71A5B0}» Job «"JOBINFO_" Mechanic %s has repaired a/an %s", pName[playerid], vInfo[m-400][vName]);
			SendClientMessageToAll(JOBINFO, str);
			UpdateSkills(playerid, driving, 500);
			PlayerInfo[playerid][carsrepaired]++;
		    new qqr[128];
	        format(qqr, sizeof(qqr), "UPDATE `users` SET `carsrepaired` = %d WHERE `UserID` = '%d'", PlayerInfo[playerid][carsrepaired], PlayerInfo[playerid][UserID]);
	        mysql_query(GTADM, qqr);
		  }
		  break;
		}
	}
	if(k == 0) SendWarning(playerid, "{BABABA}There are no vehicles near you to repair!");
	return 1;
}

CMD:rob(playerid)
{
    if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
    if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(Job[playerid] != Drugdealer) return SendWarning(playerid, "{BABABA}You must be a Dealer to Rob!");
    if ( ( GetTickCount() - TickCount[playerid][RobTK] ) < 900000 ) return SendClientMessage( playerid, RED, ""RED_"» Error « {BABABA}You can't rob that often!" );
    if(pLevel[playerid][drugdealing] < 15) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must have at least level 15 in dealing to Rob!");
  	if(IsPlayerInAmmunation(playerid))
  	{
		  if(pLevel[playerid][drugdealing] < 15) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must have at least level 15 in dealing to Rob the ammunation!");
		  else
		  {
			  UpdateSkills(playerid, drugdealing, 800);
              SetPlayerWantedLevelEx(playerid, 6);
	          TickCount[playerid][RobTK]=GetTickCount();
			  new str[128];
			  format(str, sizeof(str), "{71A5B0}» Robbery «"JOBINFO_" %s has Robbed the Ammunation!", pName[playerid]);
			  SendClientMessageToAll(JOBINFO, str);
			  SendInfoText(playerid, 3000, "~r~Ammunation Robbed");
	          switch(random(6))
	          {
				case 0:
				{
			        format(str, sizeof(str), ""GRAY_"*** You have successfully robbed {656969}Grenades!");
			        SendClientMessage(playerid, -1, str);
				    GivePlayerWeaponEX(playerid, 16, 9999);
				}
				case 1:
				{
			        format(str, sizeof(str), ""GRAY_"*** You have successfully robbed {656969}M4 And a Dildo!");
			        SendClientMessage(playerid, -1, str);
				    GivePlayerWeaponEX(playerid, 31, 9999);
				    GivePlayerWeaponEX(playerid, 12, 9999);
				}
				case 2:
				{
			        format(str, sizeof(str), ""GRAY_"*** You have successfully robbed {656969}Chainsaw And a Sniper!");
			        SendClientMessage(playerid, -1, str);
				    GivePlayerWeaponEX(playerid, 34, 9999);
				    GivePlayerWeaponEX(playerid, 9, 9999);
				}
				case 3:
				{
			        format(str, sizeof(str), ""GRAY_"*** You have successfully robbed {656969}$100000!");
			        SendClientMessage(playerid, -1, str);
					GivePlayerMoneyEX(playerid, 100000, 1);
				}
				case 4:
				{
			        format(str, sizeof(str), ""GRAY_"*** You have successfully robbed {656969}$50000!");
			        SendClientMessage(playerid, -1, str);
					GivePlayerMoneyEX(playerid, 50000, 1);
				}
				case 5:
				{
			        format(str, sizeof(str), ""GRAY_"*** You have successfully robbed {656969}Satchel And some Flowers!");
			        SendClientMessage(playerid, -1, str);
				    GivePlayerWeaponEX(playerid, 39, 9999);
				    GivePlayerWeaponEX(playerid, 14, 9999);
				}
	          }
		  }
    }
  	else if(IsInBank(playerid))
  	{
		  if(pLevel[playerid][drugdealing] < 35) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must have at least level 35 in dealing to Rob the ammunation!");
		  else
		  {
			  UpdateSkills(playerid, drugdealing, 1000);
              SetPlayerWantedLevelEx(playerid, 6);
	          TickCount[playerid][RobTK]=GetTickCount();
			  new str[128];
			  format(str, sizeof(str), "{71A5B0}» Robbery «"JOBINFO_" %s has Robbed the Bank!", pName[playerid]);
			  SendClientMessageToAll(JOBINFO, str);
			  SendInfoText(playerid, 3000, "~r~Bank Robbed");
	          switch(random(6))
	          {
				case 0:
				{
			        format(str, sizeof(str), ""GRAY_"*** You have successfully robbed {656969}$1000000!");
			        SendClientMessage(playerid, -1, str);
					GivePlayerMoneyEX(playerid, 1000000, 1);
				}
				case 1:
				{
			        format(str, sizeof(str), ""GRAY_"*** You have successfully robbed {656969}$100000!");
			        SendClientMessage(playerid, -1, str);
					GivePlayerMoneyEX(playerid, 100000, 1);
				}
				case 2:
				{
			        format(str, sizeof(str), ""GRAY_"*** You have successfully robbed {656969}$500000!");
			        SendClientMessage(playerid, -1, str);
					GivePlayerMoneyEX(playerid, 500000, 1);
				}
				case 3:
				{
			        format(str, sizeof(str), ""GRAY_"*** You have successfully robbed {656969}$400000!");
			        SendClientMessage(playerid, -1, str);
					GivePlayerMoneyEX(playerid, 400000, 1);
				}
				case 4:
				{
			        format(str, sizeof(str), ""GRAY_"*** You have successfully robbed {656969}$300000!");
			        SendClientMessage(playerid, -1, str);
					GivePlayerMoneyEX(playerid, 300000, 1);
				}
				case 5:
				{
			        format(str, sizeof(str), ""GRAY_"*** You have successfully robbed {656969}$800000!");
			        SendClientMessage(playerid, -1, str);
					GivePlayerMoneyEX(playerid, 800000, 1);
				}
	          }
		  }
    }
  	else if(GetPropID(playerid) != -255)
  	{

		  if(pLevel[playerid][drugdealing] < 50) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must have at least level 50 in dealing to Rob Properties!");
		  else
		  {
		    UpdateSkills(playerid, drugdealing, 1200);
            SetPlayerWantedLevelEx(playerid, 6);
            TickCount[playerid][RobTK]=GetTickCount();
			new p=GetPropID(playerid);
			new m=pInfo[p][Earnings];
			UpdateSkills(playerid, drugdealing, 3000);
			SetPlayerWantedLevelEx(playerid, 6);
			TickCount[playerid][RobTK]=GetTickCount();
			new str[128];
			format(str, sizeof(str), "{71A5B0}» Robbery «"JOBINFO_" %s has Robbed \"%s\" Property!", pName[playerid], pInfo[p][Name]);
			SendClientMessageToAll(JOBINFO, str);
			SendInfoText(playerid, 3000, "~r~Property Robbed");
			format(str, sizeof(str), ""GRAY_"*** You have successfully robbed {656969}$%d!", m);
			SendClientMessage(playerid, -1, str);
			GivePlayerMoneyEX(playerid, m, 1);
		  }
  	}
  	else
  	{
	   new t=0;
	   foreach (new i : Player)
	   {

		 if(!IsPlayerInAnyVehicle(i) && i!= playerid && g_IsPaused[i] != true && !GetPVarInt(i, "AFK") )
		 {
	       if((IsPlayerInRangeOfPlayer(playerid, i, 5.00)) && (GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid)))
	       {
			   t=1;
			   if(pLevel[playerid][drugdealing] < 20) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must have at least level 20 in dealing to Rob Players!");
			   UpdateSkills(playerid, drugdealing, 500);
	           SetPlayerWantedLevelEx(playerid, 6);
	           TickCount[playerid][RobTK]=GetTickCount();
			   new d = GetPlayerMoney(i);
			   new k=floatround(d/2);
			   new str[128];
			   format(str, sizeof(str), "{71A5B0}» Robbery «"JOBINFO_" %s has Robbed $%d from %s!", pName[playerid], k, pName[i]);
			   SendClientMessageToAll(JOBINFO, str);
			   SendInfoText(playerid, 3000, "~r~Player Robbed");
		   	   GivePlayerMoneyEX(playerid, k, 1);
		   	   GivePlayerMoneyEX(i, k*-1, 1);
		   	   GiveMedal(playerid, 82);
			   break;
	       }
		 }
	   }
	   if(t== 0) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}There is nothing to Rob!");

  	}
  	return 1;
}
//DrugDealer
CMD:deal(playerid, params[])
{
    if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
    if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(Job[playerid] != Drugdealer) return SendWarning(playerid, "{BABABA}You must be a Dealer to sell drugs!");
	if(PlayerInfo[playerid][pDrugs] <= 0)  return SendWarning(playerid, "{BABABA}You have used all of your drugs!");
    if ( ( GetTickCount() - TickCount[playerid][OffetTK] ) < 5000 ) return SendClientMessage( playerid, RED, ""RED_"» Error « {BABABA}You have already sent an offer!" );
    if(IsSpecing[playerid] == 1) return SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You cant use this command in Spec Mode!");


	new id=-255, Float:x, Float:y, Float:z, price;
	GetPlayerPos(playerid, x, y, z);
	if(!isnull(params))
	{
	  sscanf(params, "uD(1500)", id, price);
      if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
      if(IsSpecing[id] == 1) return SendWarning(playerid, "{BABABA}This player is too far away from you!");
      else if(IsPlayerNPC(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
      else if(IsInFight(id)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This player is in fight!");
	  else if(price > 20000)  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant sell drugs in that price!");
	  else if(id == playerid)  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant sell drugs to yourself!");
	  else
	  {
	     if(IsPlayerInRangeOfPoint(id, 3.00, x, y, z)) offerdrugs(playerid, id, price);
	     else SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This player is too far away from you!");
	  }
	}
	else
	{
	   foreach (new i : Player)
	   {
	      if(IsPlayerInRangeOfPoint(i, 3.00, x, y, z) && i != playerid)
	      {
			  id=i;
			  break;
	      }
	   }
	   if(id == -255) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}There are no players near you!");
	   else offerdrugs(playerid, id, 1500);
	}
	return 1;
}
stock offerdrugs(playerid, offered, price)
{
    if(g_IsPaused[offered] == true || GetPVarInt(offered, "AFK")) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant deal with a paused or an AFK player!");
    else if(IsPlayerInAnyVehicle(playerid)) SendWarning(playerid, "{BABABA}You must be on foot to use this command!");
    else if(IsPlayerInAnyVehicle(offered)) SendWarning(playerid, "{BABABA}You cant deal with players in vehicle!");
    else if(IsInFight(offered)) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant deal with a player in fight!");
	else if(PlayerInfo[offered][Jailed] > 0) SendWarning(playerid, "{BABABA}You cant cuff jailed players!");
    else
    {
		new str[128];
	    dOffers[playerid]=offered;
	    dOfferMoney[playerid]=price;
	    dOffered[offered]=playerid;
	    ApplyAnimation(playerid, "DEALER", "DEALER_DEAL", 3.0, 1, 0, 0, 10000, 0);
	    UpdateSkills(playerid, drugdealing, 50);
        TickCount[playerid][OffetTK]=GetTickCount();
		format(str, sizeof(str), "{FFFFFF}%s {9C9C9C}wants to sell you 1 drug spliff for {FFFFFF}$%d", pName[playerid], price);
	    ShowPlayerDialog(offered, 8451, DIALOG_STYLE_MSGBOX, "Drug Dealing", str, "Buy", "Refuse");
	}
//	format(str, sizeof(str), "{71A5B0}» Job «"JOBINFO_" Drugs Dealer %s wants to sell you 1 drug spliff , Press ~k~~PED_ANSWER_PHONE~ to accept");
//	SendClientMessage(playerid, -1, str);
}


CMD:speedrecords(playerid)
{
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
	new str[128];
	SendClientMessage(playerid, -1, "{FFFFFF}====="LIGHTYELLOW_" Speed Records {FFFFFF}=====");
	for(new x=0; x<20; x++)
	{
		format(str, sizeof(str), "%d - %s  %d KM/H", x+1, SpeedRecordNames[x], SpeedRecords[x]);
		SendClientMessage(playerid, -1, str);
	}
	return 1;
}
//medic
CMD:sellrepairingkits(playerid, params[])
{
    if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
    if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(pLevel[playerid][driving] < 30) return SendWarning(playerid, "{BABABA}You must have at least Level 30 in Driving to sell repairing kits!");
    if(Job[playerid] != Mechanic) return SendWarning(playerid, "{BABABA}You must be a mechanic to sell repairing kits!");
	if(pRepairKets[playerid] == 0)  return SendWarning(playerid, "{BABABA}You have sold all of your repairing kits!");
    if(IsSpecing[playerid] == 1) return SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You cant use this command in Spec Mode!");
    if ( ( GetTickCount() - TickCount[playerid][OffetTK] ) < 5000 ) return SendClientMessage( playerid, RED, ""RED_"» Error « {BABABA}You have already sent an offer!" );
	new id=-255, Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	if(!isnull(params))
	{
	  sscanf(params, "u", id);
      if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
      else if(IsPlayerNPC(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
      else if(GetPVarInt(id, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}you cant heal an AFK player");
      else if(IsInFight(id)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This player is in fight!");
	  else if(id == playerid)  SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command on yourself!");
	  else
	  {
	     if(IsPlayerInRangeOfPoint(id, 3.00, x, y, z)) offerrkit(playerid, id);
	     else SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This player is too far away from you!");
	  }
	}
	else
	{
	   foreach (new i : Player)
	   {
	      if(IsPlayerInRangeOfPoint(i, 3.00, x, y, z) && i != playerid)
	      {
			  id=i;
			  break;
	      }
	   }
	   if(id == -255) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}There are no players near you to sell!");
	   else offerrkit(playerid, id);
	}
	return 1;
}
stock offerrkit(medic, healed)
{

    if(g_IsPaused[healed] == true || GetPVarInt(healed, "AFK")) SendClientMessage(medic, RED, ""RED_"» Error « {BABABA}You cant deal with a paused or an AFK player!");
    else if(IsPlayerInAnyVehicle(medic)) SendClientMessage(medic, RED, ""RED_"» Error « {BABABA}You must be on foot to use this command!");
    else if(IsPlayerInAnyVehicle(healed)) SendClientMessage(medic, RED, ""RED_"» Error « {BABABA}You cant deal with players in vehicle!");    else if(IsInFight(healed)) SendClientMessage(medic, RED, ""RED_"» Error « {BABABA}You cant deal with a player in fight!");
	else if(GetPlayerMoneyEx(healed) < 10000) SendClientMessage(medic, RED, ""RED_"» Error « {BABABA}This player doesnt have enough money to buy repairing kits!");
	else if(PlayerInfo[healed][Jailed] > 0) SendClientMessage(medic, RED, ""RED_"» Error « {BABABA}You cant cuff jailed players!");
 	else
	{
	   new str[128];
	   format(str, sizeof(str), "%s (%d) Offering you 1 repairing kit for $10000", pName[medic], medic);
	   ShowPlayerDialog(healed, 9787, DIALOG_STYLE_MSGBOX, "Repairing kits", str, "Buy", "Reject");
       dOffers[healed]=medic;
	   UpdateSkills(medic, driving, 50);
	   TickCount[medic][OffetTK]=GetTickCount();
    }
  	return 1;
}
CMD:sellmedkit(playerid, params[]) return cmd_sellmedkits(playerid, params);
CMD:usemedkit(playerid, params[]) return cmd_usemedkits(playerid, params);

CMD:userepairkit(playerid, params[]) return cmd_userepairkits(playerid, params);
CMD:userepairingkit(playerid, params[]) return cmd_userepairkits(playerid, params);
CMD:userepairingkits(playerid, params[]) return cmd_userepairkits(playerid, params);

CMD:sellrepairingkit(playerid, params[]) return cmd_sellrepairingkits(playerid, params);
CMD:sellrepairkit(playerid, params[]) return cmd_sellrepairingkits(playerid, params);
CMD:sellrepairkits(playerid, params[]) return cmd_sellrepairingkits(playerid, params);


CMD:sellmedkits(playerid, params[])
{
    if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
    if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(pLevel[playerid][medicine] < 20) return SendWarning(playerid, "{BABABA}You must have at least Level 20 in Medicine to sell medkits!");
    if(Job[playerid] != Medic) return SendWarning(playerid, "{BABABA}You must be a medic to sell medkits!");
	if(pMedKets[playerid] == 0)  return SendWarning(playerid, "{BABABA}You have sold all of your medkits!");
    if(IsSpecing[playerid] == 1) return SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You cant use this command in Spec Mode!");
    if ( ( GetTickCount() - TickCount[playerid][OffetTK] ) < 5000 ) return SendClientMessage( playerid, RED, ""RED_"» Error « {BABABA}You have already sent an offer!" );


	new id=-255, Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	if(!isnull(params))
	{
	  sscanf(params, "u", id);
      if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
      else if(IsPlayerNPC(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
      else if(GetPVarInt(id, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}you cant heal an AFK player");
      else if(IsInFight(id)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This player is in fight!");
	  else if(id == playerid)  SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command on yourself!");
	  else
	  {
	     if(IsPlayerInRangeOfPoint(id, 3.00, x, y, z)) offerkit(playerid, id);
	     else SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This player is too far away from you!");
	  }
	}
	else
	{
	   foreach (new i : Player)
	   {
	      if(IsPlayerInRangeOfPoint(i, 3.00, x, y, z) && i != playerid)
	      {
			  id=i;
			  break;
	      }
	   }
	   if(id == -255) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}There are no players near you to sell!");
	   else offerkit(playerid, id);
	}
	return 1;
}
CMD:usemedkits(playerid, params[])
{
    if(pInGW[playerid])  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command during a gangwar!");
    if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
    if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(pLevel[playerid][hitpoint] < 15) return SendWarning(playerid, "{BABABA}You must have at least Level 15 in Hitpoints to use medkits!");

	if(pMedKets[playerid] == 0)  return SendWarning(playerid, "{BABABA}You dont have any medkits!");
    pMedKets[playerid]--;
    UpdateSkills(playerid, hitpoint, 1000);

	new Float:health;
	GetPlayerHealth(playerid, health);
	SetPlayerHealth(playerid, health+floatround(health/4));
	GetPlayerHealth(playerid, health);
	if(floatround(health) > 100) SetPlayerHealth(playerid, 100);
	GiveMedal(playerid, 83);
    new str14[128];
    format(str14, sizeof(str14), "{ACACAC}» Medkits «{71A3F5} %s has healed himself using a medkit.", pName[playerid]);
    SendClientMessageToAll(0xF86EFFFF, str14);
	return 1;
}
CMD:userepairkits(playerid, params[])
{
    if(pInGW[playerid])  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command during a gangwar!");
    if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
    if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);

	if(pRepairKets[playerid] == 0)  return SendWarning(playerid, "{BABABA}You dont have any repairing kits!");
    if(!IsPlayerInAnyVehicle(playerid)) return SendWarning(playerid, "{BABABA}You must be inside a vehicle to use this command!");
    if(InCanon[playerid] > 0)return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this cmd in the Cannon");
    pRepairKets[playerid]--;
    UpdateSkills(playerid, driving, 1000);

	new v=GetPlayerVehicleID(playerid);
	RepairVehicle(v);
	SetVehicleHealth(v, 1000.0);
	PlayerPlaySound(playerid, 1133, 0, 0, 0);
	new Float:zAngle;
	GetVehicleZAngle(v, zAngle);
	SetVehicleZAngle(v, zAngle);
	GiveMedal(playerid, 84);
    new str14[128];
    format(str14, sizeof(str14), "{ACACAC}» Repair kits «{71A3F5} %s has repaired his vehicle using a repair kit.", pName[playerid]);
    SendClientMessageToAll(0xF86EFFFF, str14);
	return 1;
}
stock offerkit(medic, healed)
{
    if(g_IsPaused[healed] == true || GetPVarInt(healed, "AFK")) SendClientMessage(medic, RED, ""RED_"» Error « {BABABA}You cant deal with a paused or an AFK player!");
    else if(IsPlayerInAnyVehicle(medic)) SendClientMessage(medic, RED, ""RED_"» Error « {BABABA}You must be on foot to use this command!");
    else if(IsPlayerInAnyVehicle(healed)) SendClientMessage(medic, RED, ""RED_"» Error « {BABABA}You cant deal with players in vehicle!");    else if(IsInFight(healed)) SendClientMessage(medic, RED, ""RED_"» Error « {BABABA}You cant deal with a player in fight!");
    else if(IsInFight(healed)) SendClientMessage(medic, RED, ""RED_"» Error « {BABABA}You cant deal with a player in fight!");
	else if(GetPlayerMoneyEx(healed) < 10000) SendClientMessage(medic, RED, ""RED_"» Error « {BABABA}This player doesnt have enough money to buy a medkit!");
	else if(PlayerInfo[healed][Jailed] > 0) SendClientMessage(medic, RED, ""RED_"» Error « {BABABA}You cant cuff jailed players!");
 	else
	{
	   new str[128];
	   format(str, sizeof(str), "%s (%d) Offering you 1 medkit for $10000", pName[medic], medic);
	   ShowPlayerDialog(healed, 9786, DIALOG_STYLE_MSGBOX, "Medkits", str, "Buy", "Reject");
       dOffers[healed]=medic;
	   UpdateSkills(medic, medicine, 50);
	   TickCount[medic][OffetTK]=GetTickCount();
  	}
  	return 1;
}
CMD:heal(playerid, params[])
{
    if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
    if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(Job[playerid] != Medic) return SendWarning(playerid, "{BABABA}You must be a medic to heal other players!");
    if(IsSpecing[playerid] == 1) return SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You cant use this command in Spec Mode!");
    if ( pLevel[playerid][medicine] < 30 && ( GetTickCount() - TickCount[playerid][heal] ) < 120000 ) return SendClientMessage( playerid, RED, ""RED_"» Error « {BABABA}You can't heal that often!" );
    if ( pLevel[playerid][medicine] >= 30 && ( GetTickCount() - TickCount[playerid][heal] ) < 60000 ) return SendClientMessage( playerid, RED, ""RED_"» Error « {BABABA}You can't heal that often!" );
	new id=-255, Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	if(!isnull(params))
	{
	  sscanf(params, "u", id);
      if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
      if(IsSpecing[id] == 1) return SendWarning(playerid, "{BABABA}This player is too far away from you!");
      else if(IsPlayerNPC(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
      else if(GetPVarInt(id, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}you cant heal an AFK player");
	  else if(id == playerid)  SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant heal yourself!");
	  else
	  {
	     if(IsPlayerInRangeOfPoint(id, 3.00, x, y, z)) healplayer(playerid, id);
	     else SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This player is too far away from you!");
	  }
	}
	else
	{
	   foreach (new i : Player)
	   {
	      if(IsPlayerInRangeOfPoint(i, 3.00, x, y, z) && i != playerid)
	      {
			  id=i;
			  break;
	      }
	   }
	   if(id == -255) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}There are no players near you to heal!");
	   else healplayer(playerid, id);
	}
	return 1;
}

stock healplayer(medic, healed)
{
    if(IsPlayerInAnyVehicle(medic)) SendClientMessage(medic, RED, ""RED_"» Error « {BABABA}You must be on foot to use this command!");
    else if(IsPlayerInAnyVehicle(healed)) SendClientMessage(medic, RED, ""RED_"» Error « {BABABA}You cant heal players in vehicle!");
    else if(g_IsPaused[healed] == true || GetPVarInt(healed, "AFK")) SendClientMessage(medic, RED, ""RED_"» Error « {BABABA}You cant heal a paused or an AFK player!");
	else if(PlayerInfo[healed][Jailed] > 0) SendClientMessage(medic, RED, ""RED_"» Error « {BABABA}You cant cuff jailed players!");
	else
	{
		new Float:hl, str[128];
		GetPlayerHealth(healed, hl);
		if(hl > 99) SendClientMessage(medic, RED, ""RED_"» Error « {BABABA}This player doesnt need any help!");
		else if(GetPlayerMoneyEx(healed) < 3500) SendClientMessage(medic, RED, ""RED_"» Error « {BABABA}This player doesnt have enough money to get healed!");
	 	else
		{

		   new Float:health;
	       GetPlayerHealth(healed, health);
	       if(pLevel[medic][medicine] >= 50)
		   {
			 if(pInGW[medic] || pInGW[healed]) SetPlayerHealth(healed, 100), UpdateSkills(medic, medicine, 800), SendClientMessage(medic, RED, ""RED2_"-Note-"RED_" You cant heal with armour during a gangwar!");
  		     else SetPlayerHealth(healed, 100), SetPlayerArmour(healed, 100), UpdateSkills(medic, medicine, 800);
		   }
		   else if(pLevel[medic][medicine] > 14 && pLevel[medic][medicine] <50) UpdateSkills(medic, medicine, 800), SetPlayerHealth(healed, 100);
		   else if(pLevel[medic][medicine] > 9 && pLevel[medic][medicine] <15)  UpdateSkills(medic, medicine, 500), SetPlayerHealth(healed, health+floatround(health/2));
		   else if(pLevel[medic][medicine] < 10)  UpdateSkills(medic, medicine, 200), SetPlayerHealth(healed, health+floatround(health/4));
		   TickCount[medic][heal] = GetTickCount();
	       format(str, sizeof(str), "{71A5B0}» Job «"JOBINFO_" %s has been healed by medic %s", pName[healed], pName[medic]);
	       SendClientMessageToAll(JOBINFO, str);
	       GivePlayerMoneyEX(healed, -3500, 1);
	       GivePlayerMoneyEX(medic, 3500, 1);
	       UpdateSkills(healed, hitpoint, 100);
	       GetPlayerHealth(healed, health);
	       if(floatround(health) > 100) SetPlayerHealth(healed, 100);
	  	}
	    PlayerInfo[medic][Heals]++;
		new qqr[128];
	    format(qqr, sizeof(qqr), "UPDATE `users` SET `Heals` = %d WHERE `UserID` = '%d'", PlayerInfo[medic][Heals], PlayerInfo[medic][UserID]);
	    mysql_query(GTADM, qqr);
	    if(PlayerInfo[medic][Heals] == 50) GiveMedal(medic, 47);
	}
  	return 1;
}
//cop
CMD:arrest(playerid, params[])
{
    if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
    if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(Job[playerid] != Cop) return SendWarning(playerid, "{BABABA}You must be a cop to arrest other players!");
    if(pLevel[playerid][justice] < 10) return SendWarning(playerid, "{BABABA}You must have at least 10 Justice Level to be able to arrest!");
    if(IsSpecing[playerid] == 1) return SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You cant use this command in Spec Mode!");
	new id=-255, Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	if(!isnull(params))
	{
	  sscanf(params, "u", id);
   	  if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
      if(IsSpecing[id] == 1) return SendWarning(playerid, "{BABABA}This player is too far away from you!");
      else if(IsPlayerNPC(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
      else if(GetPVarInt(id, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant arrest an AFK player");
	  else if(id == playerid)  SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant arrest yourself!");
	  else
	  {
	     if(pLevel[playerid][justice] < 40 && IsPlayerInRangeOfPoint(id, 3.00, x, y, z)) arrestplayer(playerid, id);
	     else if(pLevel[playerid][justice] >= 40 && IsPlayerInRangeOfPoint(id, 6.00, x, y, z)) arrestplayer(playerid, id);
	     else SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This player is too far away from you!");
	  }
	}
	else
	{
	   foreach (new i : Player)
	   {
		 if(i != playerid)
		 {
	      if((pLevel[playerid][justice] < 40 && IsPlayerInRangeOfPoint(i, 3.00, x, y, z)) || (pLevel[playerid][justice] >= 40 && IsPlayerInRangeOfPoint(i, 6.00, x, y, z)) )
	      {
			  id=i;
			  break;
	      }
		 }
	   }
	   if(id == -255) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}There are no players near you to arrest!");
	   else arrestplayer(playerid, id);
	}
	return 1;
}
//

CMD:release(playerid, params[])
{
      if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
      if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
      if(pLevel[playerid][justice] < 30) return SendWarning(playerid, "{BABABA}You must have at least 30 Justice Level to be able to release player from jail!");
	  new id;
      if(sscanf(params, "u", id)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA} /release "GRAY_"<playerid>");
  	  if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
      if(PlayerInfo[id][Jailed] == 0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This player is not Jailed");
      if(!GetPVarInt(id, "Arrested")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This player has not been arrested by a Cop!");
      if(id == playerid) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant release yourself!");
	  ReleasePlayer(id, playerid);
	  return 1;
}

CMD:stun(playerid, params[])
{
    if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
    if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(Job[playerid] != Cop) return SendWarning(playerid, "{BABABA}You must be a cop to stun other players!");
    if(pLevel[playerid][justice] < 20) return SendWarning(playerid, "{BABABA}You must have at least 20 Justice Level to be able to stun players!");
    if ( ( GetTickCount() - TickCount[playerid][StunTK] ) < 10000 ) return SendClientMessage( playerid, RED, ""RED_"» Error « {BABABA}You can't stun that often!" );
    if(IsSpecing[playerid] == 1) return SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You cant use this command in Spec Mode!");
	new id=-255, Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	if(!isnull(params))
	{
	  sscanf(params, "u", id);
   	  if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
      if(IsSpecing[id] == 1) return SendWarning(playerid, "{BABABA}This player is too far away from you!");
      else if(GetPVarInt(id, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}you cant arrest an AFK player");
	  else if(id == playerid)  SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant stun yourself!");
	  else
	  {
	     if(IsPlayerInRangeOfPoint(id, 3.00, x, y, z)) stunplayer(playerid, id);
	     else SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This player is too far away from you!");
	  }
	}
	else
	{
	   foreach (new i : Player)
	   {
	      if(IsPlayerInRangeOfPoint(i, 3.00, x, y, z) && i != playerid)
	      {
			  id=i;
			  break;
	      }
	   }
	   if(id == -255) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}There are no players near you to stun!");
	   else stunplayer(playerid, id);
	}
	return 1;
}

stock stunplayer(cop, stuned)
{
    if(IsPlayerInAnyVehicle(cop)) SendClientMessage(cop, RED, ""RED_"» Error « {BABABA}You must be on foot to use this command!");
    else if(IsPlayerInAnyVehicle(stuned)) SendClientMessage(cop, RED, ""RED_"» Error « {BABABA}You cant cuff players in vehicle!");
    else if(g_IsPaused[stuned] == true || GetPVarInt(stuned, "AFK")) SendClientMessage(cop, RED, ""RED_"» Error « {BABABA}You cant deal with a paused or an AFK player!");
	else
	{
	 	new str[128];
	    if(Job[stuned] == Cop) SendClientMessage(cop, RED, ""RED_"» Error « {BABABA}You cant arrest other cops!");
		else if(!GetPVarInt(stuned, "Wanted")) SendClientMessage(cop, RED, ""RED_"» Error « {BABABA}You cant arrest innocent players!");
		else if(pInGW[cop] || pInGW[stuned])  SendClientMessage(cop, RED, ""RED_"» Error « {BABABA}You cant use this command during a gangwar!");
	 	else
		{
	       format(str, sizeof(str), "{71A5B0}» Job «"JOBINFO_" %s has been stunned by officer %s", pName[stuned], pName[cop]);
	       SendClientMessageToAll(JOBINFO, str);
	       SendpInfo(stuned, "~r~Stunned!", 3000);
	       TogglePlayerControllable2(stuned, 0);
	       SetTimerEx("WarningUnfreeze", 3000, false, "id", stuned, GetPlayerVirtualWorld(stuned));
	       UpdateSkills(cop, justice, 1200);
	       TickCount[cop][StunTK] = GetTickCount();
	  	}
	}
  	return 1;
}
stock arrestplayer(cop, arrested)
{
	new str[128];
    if(g_IsPaused[arrested] == true || GetPVarInt(arrested, "AFK")) SendClientMessage(cop, RED, ""RED_"» Error « {BABABA}You cant arrest a paused or an AFK player!");
    else if(IsPlayerInAnyVehicle(cop)) SendClientMessage(cop, RED, ""RED_"» Error « {BABABA}You must be on foot to use this command!");
    else if(IsPlayerInAnyVehicle(arrested)) SendClientMessage(cop, RED, ""RED_"» Error « {BABABA}You cant arrest players in vehicle!");
    else if(Job[arrested] == Cop) SendClientMessage(cop, RED, ""RED_"» Error « {BABABA}You cant arrest other cops!");
	else if(!GetPVarInt(arrested, "Wanted")) SendClientMessage(cop, RED, ""RED_"» Error « {BABABA}You cant arrest innocent players!");
	else if(pInGW[cop] || pInGW[arrested])  SendClientMessage(cop, RED, ""RED_"» Error « {BABABA}You cant use this command during a gangwar!");
	else if(GetPlayerSpecialAction(arrested) != SPECIAL_ACTION_CUFFED) SendClientMessage(cop, RED, ""RED_"» Error « {BABABA}You must cuff the player before arresting him");
	else if(PlayerInfo[arrested][Jailed] > 0) SendClientMessage(cop, RED, ""RED_"» Error « {BABABA}You cant cuff jailed players!");
 	else
	{
       format(str, sizeof(str), "{71A5B0}» Job «"JOBINFO_" %s has been arrested by officer %s", pName[arrested], pName[cop]);
       SendClientMessageToAll(JOBINFO, str);
       ArrestPlayer(arrested);
       SendpInfo(arrested, "~r~Busted!", 3000);
       UpdateSkills(cop, justice, 800);
       SetPVarInt(arrested, "Arrested", true);
  	}
    PlayerInfo[cop][Arrests]++;
	new qqr[128];
    format(qqr, sizeof(qqr), "UPDATE `users` SET `Arrests` = %d WHERE `UserID` = '%d'", PlayerInfo[cop][Arrests], PlayerInfo[cop][UserID]);
    mysql_query(GTADM, qqr);
    if(PlayerInfo[cop][Arrests] == 50) GiveMedal(cop, 46);
  	return 1;
}
stock ReleasePlayer(playerid, admin)
{
    PlayerInfo[playerid][Jailed]=0;
    new Admin[24];
    if(admin == -255 || GetPVarInt(admin, "Hidden") || GetPVarInt(playerid, "HideMeBitch")) format(Admin, 24, "Jonny");
    else format(Admin, 24, "%s", pName[admin]);
	new str[128];

    format(str, sizeof(str), "{71A5B0}» Job «"JOBINFO_" %s has been released from jail by Officer %s", pName[playerid], Admin);
    SendClientMessageToAll(AdminInfo, str);
    SetPlayerWantedLevelEx(playerid, 0);
    TeleportPlayer(playerid, -1155.0387, -990.8308, 129.2600, 92.4781, 14);
    DeletePVar(playerid, "Arrested");
}


CMD:cuff(playerid, params[])
{
    if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
    if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(Job[playerid] != Cop) return SendWarning(playerid, "{BABABA}You must be a cop to cuff other players!");
    if(IsSpecing[playerid] == 1) return SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You cant use this command in Spec Mode!");
    if ( ( GetTickCount() - TickCount[playerid][cuff] ) < 15000 ) return SendClientMessage( playerid, RED, ""RED_"» Error « {BABABA}You can't cuff that often!" );

	new id=-255, Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	if(!isnull(params))
	{
	  sscanf(params, "u", id);
   	  if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
      if(IsSpecing[id] == 1) return SendWarning(playerid, "{BABABA}This player is too far away from you!");
      else if(IsPlayerNPC(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
      else if(GetPVarInt(id, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}you cant cuff an AFK player");
	  else if(id == playerid)  SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant cuff yourself!");
	  else
	  {
	     if(IsPlayerInRangeOfPoint(id, 3.00, x, y, z)) cuffplayer(playerid, id);
	     else SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This player is too far away from you!");
	  }
	}
	else
	{
	   foreach (new i : Player)
	   {
	      if(IsPlayerInRangeOfPoint(i, 3.00, x, y, z) && i != playerid)
	      {
			  id=i;
			  break;
	      }
	   }
	   if(id == -255) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}There are no players near you to cuff!");
	   else cuffplayer(playerid, id);
	}
	return 1;
}

stock cuffplayer(cop, cuffed)
{
	new str[128];
    if(g_IsPaused[cuffed] == true || GetPVarInt(cuffed, "AFK")) SendClientMessage(cop, RED, ""RED_"» Error « {BABABA}You cant cuff a paused or an AFK player!");
    else if(IsPlayerInAnyVehicle(cop)) SendClientMessage(cop, RED, ""RED_"» Error « {BABABA}You must be on foot to use this command!");
    else if(IsPlayerInAnyVehicle(cuffed)) SendClientMessage(cop, RED, ""RED_"» Error « {BABABA}You cant cuff players in vehicle!");
//	else if(IsInFight(cuffed)) SendClientMessage(cop, RED, ""RED_"» Error « {BABABA}You cant deal with a player in fight!");
    else if(Job[cuffed] == Cop) SendClientMessage(cop, RED, ""RED_"» Error « {BABABA}You cant cuff other cops!");
	else if(!GetPVarInt(cuffed, "Wanted")) SendClientMessage(cop, RED, ""RED_"» Error « {BABABA}You cant cuff an innocent players!");
	else if(pInGW[cop] || pInGW[cuffed])  SendClientMessage(cop, RED, ""RED_"» Error « {BABABA}You cant use this command during a gangwar!");
	else if(GetPlayerSpecialAction(cuffed) == SPECIAL_ACTION_CUFFED) SendClientMessage(cop, RED, ""RED_"» Error « {BABABA}This player is already has been cuffed!");
	else if(PlayerInfo[cuffed][Jailed] > 0) SendClientMessage(cop, RED, ""RED_"» Error « {BABABA}You cant cuff jailed players!");
    else
	{
        TickCount[cop][cuff] = GetTickCount();
		SetPlayerSpecialAction(cuffed, SPECIAL_ACTION_CUFFED);
		SetPlayerAttachedObject(cuffed, 8, 19418, 6, -0.011000, 0.028000, -0.022000, -15.600012, -33.699977, -81.700035, 0.891999, 1.000000, 1.168000);
  	    format(str, sizeof(str), "{71A5B0}» Job «"JOBINFO_" %s has been cuffed by officer %s", pName[cuffed], pName[cop]);
        SendClientMessageToAll(JOBINFO, str);
  	    SetTimerEx("uncuff", 15000, false, "i", cuffed);
        SendInfoText(cuffed, 3000, "~r~Cuffed");
        SendClientMessage(cuffed, GRAY, "You will be uncuffed in 15 seconds");
        UpdateSkills(cop, justice, 200);
  	}
}
forward uncuff(playerid);
public uncuff(playerid) if(IsPlayerConnected(playerid)) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE), RemovePlayerAttachedObject(playerid, 8);

//terrorist

CMD:bomb(playerid, params[])
{
    if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
    if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(Job[playerid] != Terrorist) return SendWarning(playerid, "{BABABA}You must be a terrorist to attach bombs!");
    if(IsSpecing[playerid] == 1) return SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You cant use this command in Spec Mode!");
    if ( ( GetTickCount() - TickCount[playerid][bomb] ) < 10000 ) return SendClientMessage( playerid, RED, ""RED_"» Error « {BABABA}You need to wait at least 10 seconds to be able to use the bomb again!" );

	new id=-255, Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	if(!isnull(params))
	{
	  sscanf(params, "u", id);
	  if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
	  else
	  {
	     if(IsPlayerInRangeOfPoint(id, 3.00, x, y, z)) bombplayer(playerid, id);
         if(IsSpecing[id] == 1) return SendWarning(playerid, "{BABABA}This player is too far away from you!");
	     else SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This player is too far away from you!");
	  }
	}
	else
	{
	   foreach (new i : Player)
	   {
	      if(IsPlayerInRangeOfPoint(i, 3.00, x, y, z) && i != playerid)
	      {
			  id=i;
			  break;
	      }
	   }
	   if(id == -255) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}There are no players near you to bomb!");
	   else bombplayer(playerid, id);
	}
	return 1;
}

stock bombplayer(terror, bombed)
{
	new str[128];
    if (PlayerBombs[terror] <= 0) SendClientMessage( terror, RED, ""RED_"» Error « {BABABA}You have already used all of your bombs" );
	else if(pInGW[terror] || pInGW[bombed])  SendClientMessage(terror, RED, ""RED_"» Error « {BABABA}You cant use this command during a gangwar!");
 	else
	{
 	   PlayerBombs[terror]--;
 	   TickCount[terror][bomb] = GetTickCount();
 	   ApplyAnimation(terror, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
  	   SetPlayerAttachedObject(bombed, 4, 1252, 1, 0.00, -0.12, -0.02, 0.0, -78.0, 2.0, 1.00, 1.00, 1.00);
  	   SendClientMessage(bombed, JOBINFO, "{71A5B0}» Job «"JOBINFO_" The bomb will blow up in 5 seconds");
	   if(terror == bombed)  format(str, sizeof(str), "{71A5B0}» Job «"JOBINFO_" Terrorist %s will blow up himself soon!", pName[terror]);
	   else format(str, sizeof(str), "{71A5B0}» Job «"JOBINFO_" Terrorist %s has attached a bomb to %s!", pName[terror], pName[bombed]);
	   SendClientMessageToAll(JOBINFO, str);
	   SetTimerEx("TerrorBomb", 5000, false, "i", bombed);
       PlayerInfo[terror][pBombed]++;
 	   new qqr[128];
       format(qqr, sizeof(qqr), "UPDATE `users` SET `Bombed` = %d WHERE `UserID` = '%d'", PlayerInfo[terror][pBombed], PlayerInfo[terror][UserID]);
       mysql_query(GTADM, qqr);
       if(PlayerInfo[terror][pBombed] == 50) GiveMedal(terror, 48);
	}
}
forward TerrorBomb(playerid);
public TerrorBomb(playerid)
{
  if(!IsInBank(playerid))
  {
	if(IsPlayerAttachedObjectSlotUsed(playerid, 4)) RemovePlayerAttachedObject(playerid, 4);
    if(GetPlayerState(playerid) != 7) BombPlayer(playerid, 0, 10.0);
    new str[128];
    format(str, sizeof(str), "{71A5B0}» Job «"JOBINFO_" %s has been blown up", pName[playerid]);
	SendClientMessageToAll(JOBINFO, str);
  }
  return 1;
}

CMD:gc(playerid, params[]) return cmd_givecash(playerid, params);

CMD:givecash(playerid, params[])
{
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
	new id, amount, str[128];
	if (sscanf(params, "ud", id, amount)) return SendWarning(playerid, "/givecash [playerid] [amount]");
    if(IsPlayerNPC(id) && !strcmp(pName[id], "Jonny")) return SendNpcPM(playerid, "_|_"), GiveMedal(playerid, 24);
    if(IsPlayerNPC(id)) return 0;
	if ((id == INVALID_PLAYER_ID) || (id == playerid)) return SendWarning(playerid, "{BABABA}This player is not connected");
	if((amount > GetPlayerMoneyEx(playerid) || amount < 0 || amount > 100000000)) return SendClientMessage(playerid, RED, "Insufficient Funds");
	GivePlayerMoneyEX(id, amount, 1);
	GivePlayerMoneyEX(playerid, 0 - amount, 1);
	format(str, sizeof(str), "You have received "GRAY_"$%d "BLUE_"from "GRAY_"%s", amount, pName[playerid]);
	SendClientMessage(id, BLUE, str);

	format(str, sizeof(str), "You have sent "GRAY_"$%d "BLUE_"to "GRAY_"%s", amount, pName[id]);
	SendClientMessage(playerid, BLUE, str);
	format(str, sizeof(str), "~y~You have received ~g~$%d~y~ from ~r~%s!", amount, pName[playerid]);
	SendpInfo(id, str, 6000);
	return 1;
}

CMD:talk(playerid, params[])
{
    if(!IsAdmin(playerid, 2)) return SendMsg(playerid, 5);
    if(musiclock == 1) return SendWarning(playerid, "You cant use this command at the moment!");
	new id, msg[256];
	if(sscanf(params, "us[128]", id, msg)) return SendWarning(playerid, "/talk [playerid] [text]");
    if ((id == INVALID_PLAYER_ID)) return SendWarning(playerid, "{BABABA}This player is not connected");
    if(IsPlayerNPC(id) && !strcmp(pName[id], "Jonny")) return SendNpcPM(playerid, "_|_"), GiveMedal(playerid, 24);
    if(IsPlayerNPC(id)) return 0;

    format(msg, sizeof(msg), "http://translate.google.com/translate_tts?tl=en&q=%s", msg);
    PlayAudioStreamForPlayer(id, msg);

    format(msg, sizeof(msg), "~"ORANGE_"voice msg sended to %s", pName[id]);
    SendClientMessage(playerid, WHITE, msg);

	return 1;
}
CMD:talkall(playerid, params[])
{
    if(!IsAdmin(playerid, 5) && PlayerInfo[playerid][UserID] != 153569) return SendMsg(playerid, 5);
    if(musiclock == 1) return SendWarning(playerid, "You cant use this command at the moment!");
    new str[800];
    strcat(str, "{FFFFFF}- /TalkEN\n- /TalkES\n- /TalkRU\n- /TalkDE\n- /TalkNL\n- /TalkIS\n- /TalkNO\n- /TalkLV\n- /TalkSV\n- /TalkAR\n- /TalkMK\n- /TalkLA\n- /TalkFR\n- /TalkIS");
    strcat(str, "\n{FFFFFF}- /TalkFI\n- /Talkzh-TW\n- /TalkEL\n- /TalkRO");
    ShowPlayerDialog(playerid, 87891, DIALOG_STYLE_MSGBOX, ""LIGHTYELLOW_"GTADM "WHITE_"- Google translate", str, "Ok", "");
	return 1;
}
CMD:talkro(playerid, params[])
{
    if(!IsAdmin(playerid, 5) && PlayerInfo[playerid][UserID] != 153569) return SendMsg(playerid, 5);
    if(musiclock == 1) return SendWarning(playerid, "You cant use this command at the moment!");
	new msg[256];
	if(sscanf(params, "s[256]", msg)) return SendWarning(playerid, "/talkro <text>");
	format(msg, sizeof(msg), "http://translate.google.com/translate_tts?tl=ro&q=%s", msg);
	foreach(new i : Player) PlayAudioStreamForPlayer(i, msg);
	return 1;
}
CMD:talkzhtw(playerid, params[])
{
    if(!IsAdmin(playerid, 5) && PlayerInfo[playerid][UserID] != 153569) return SendMsg(playerid, 5);
    if(musiclock == 1) return SendWarning(playerid, "You cant use this command at the moment!");
	new msg[256];
	if(sscanf(params, "s[256]", msg)) return SendWarning(playerid, "/talkzhtw <text>");
	format(msg, sizeof(msg), "http://translate.google.com/translate_tts?tl=zh-TW&q=%s", msg);
	foreach(new i : Player) PlayAudioStreamForPlayer(i, msg);
	return 1;
}
CMD:talkel(playerid, params[])
{
    if(!IsAdmin(playerid, 5) && PlayerInfo[playerid][UserID] != 153569) return SendMsg(playerid, 5);
    if(musiclock == 1) return SendWarning(playerid, "You cant use this command at the moment!");
	new msg[256];
	if(sscanf(params, "s[256]", msg)) return SendWarning(playerid, "/talkel <text>");
	format(msg, sizeof(msg), "http://translate.google.com/translate_tts?tl=el&q=%s", msg);
	foreach(new i : Player) PlayAudioStreamForPlayer(i, msg);
	return 1;
}
CMD:talkfi(playerid, params[])
{
    if(!IsAdmin(playerid, 5) && PlayerInfo[playerid][UserID] != 153569) return SendMsg(playerid, 5);
    if(musiclock == 1) return SendWarning(playerid, "You cant use this command at the moment!");
	new msg[256];
	if(sscanf(params, "s[256]", msg)) return SendWarning(playerid, "/talkfi <text>");
	format(msg, sizeof(msg), "http://translate.google.com/translate_tts?tl=fi&q=%s", msg);
	foreach(new i : Player) PlayAudioStreamForPlayer(i, msg);
	return 1;
}
CMD:talkhu(playerid, params[])
{
    if(!IsAdmin(playerid, 5) && PlayerInfo[playerid][UserID] != 153569) return SendMsg(playerid, 5);
    if(musiclock == 1) return SendWarning(playerid, "You cant use this command at the moment!");
	new msg[256];
	if(sscanf(params, "s[256]", msg)) return SendWarning(playerid, "/talkhu <text>");
	format(msg, sizeof(msg), "http://translate.google.com/translate_tts?tl=hu&q=%s", msg);
	foreach(new i : Player) PlayAudioStreamForPlayer(i, msg);
	return 1;
}
CMD:talkvi(playerid, params[])
{
    if(!IsAdmin(playerid, 5) && PlayerInfo[playerid][UserID] != 153569) return SendMsg(playerid, 5);
    if(musiclock == 1) return SendWarning(playerid, "You cant use this command at the moment!");
	new msg[256];
	if(sscanf(params, "s[256]", msg)) return SendWarning(playerid, "/talkvi <text>");
	format(msg, sizeof(msg), "http://translate.google.com/translate_tts?tl=vi&q=%s", msg);
	foreach(new i : Player) PlayAudioStreamForPlayer(i, msg);
	return 1;
}
CMD:talkfr(playerid, params[])
{
    if(!IsAdmin(playerid, 5) && PlayerInfo[playerid][UserID] != 153569) return SendMsg(playerid, 5);
    if(musiclock == 1) return SendWarning(playerid, "You cant use this command at the moment!");
	new msg[256];
	if(sscanf(params, "s[256]", msg)) return SendWarning(playerid, "/talkfr <text>");
	format(msg, sizeof(msg), "http://translate.google.com/translate_tts?tl=fr&q=%s", msg);
	foreach(new i : Player) PlayAudioStreamForPlayer(i, msg);
	return 1;
}
CMD:talkla(playerid, params[])
{
    if(!IsAdmin(playerid, 5) && PlayerInfo[playerid][UserID] != 153569) return SendMsg(playerid, 5);
    if(musiclock == 1) return SendWarning(playerid, "You cant use this command at the moment!");
	new msg[256];
	if(sscanf(params, "s[256]", msg)) return SendWarning(playerid, "/talkla <text>");
	format(msg, sizeof(msg), "http://translate.google.com/translate_tts?tl=la&q=%s", msg);
	foreach(new i : Player) PlayAudioStreamForPlayer(i, msg);
	return 1;
}
CMD:talkmk(playerid, params[])
{
    if(!IsAdmin(playerid, 5) && PlayerInfo[playerid][UserID] != 153569) return SendMsg(playerid, 5);
    if(musiclock == 1) return SendWarning(playerid, "You cant use this command at the moment!");
	new msg[256];
	if(sscanf(params, "s[256]", msg)) return SendWarning(playerid, "/talkmk <text>");
	format(msg, sizeof(msg), "http://translate.google.com/translate_tts?tl=mk&q=%s", msg);
	foreach(new i : Player) PlayAudioStreamForPlayer(i, msg);
	return 1;
}
CMD:talkar(playerid, params[])
{
    if(!IsAdmin(playerid, 5) && PlayerInfo[playerid][UserID] != 153569) return SendMsg(playerid, 5);
    if(musiclock == 1) return SendWarning(playerid, "You cant use this command at the moment!");
	new msg[256];
	if(sscanf(params, "s[256]", msg)) return SendWarning(playerid, "/talkar <text>");
	format(msg, sizeof(msg), "http://translate.google.com/translate_tts?tl=ar&q=%s", msg);
	foreach(new i : Player) PlayAudioStreamForPlayer(i, msg);
	return 1;
}
CMD:talkes(playerid, params[])
{
    if(!IsAdmin(playerid, 5) && PlayerInfo[playerid][UserID] != 153569) return SendMsg(playerid, 5);
    if(musiclock == 1) return SendWarning(playerid, "You cant use this command at the moment!");
	new msg[256];
	if(sscanf(params, "s[256]", msg)) return SendWarning(playerid, "/talkes <text>");
	format(msg, sizeof(msg), "http://translate.google.com/translate_tts?tl=es&q=%s", msg);
	foreach(new i : Player) PlayAudioStreamForPlayer(i, msg);
	return 1;
}
CMD:talksv(playerid, params[])
{
    if(!IsAdmin(playerid, 5) && PlayerInfo[playerid][UserID] != 153569) return SendMsg(playerid, 5);
    if(musiclock == 1) return SendWarning(playerid, "You cant use this command at the moment!");
	new msg[256];
	if(sscanf(params, "s[256]", msg)) return SendWarning(playerid, "/talksv <text>");
	format(msg, sizeof(msg), "http://translate.google.com/translate_tts?tl=sv&q=%s", msg);
	foreach(new i : Player) PlayAudioStreamForPlayer(i, msg);
	return 1;
}
CMD:talknl(playerid, params[])
{
    if(!IsAdmin(playerid, 5) && PlayerInfo[playerid][UserID] != 153569) return SendMsg(playerid, 5);
    if(musiclock == 1) return SendWarning(playerid, "You cant use this command at the moment!");
	new msg[256];
	if(sscanf(params, "s[256]", msg)) return SendWarning(playerid, "/talknl <text>");
	format(msg, sizeof(msg), "http://translate.google.com/translate_tts?tl=nl&q=%s", msg);
	foreach(new i : Player) PlayAudioStreamForPlayer(i, msg);
	return 1;
}
CMD:talkis(playerid, params[])
{
    if(!IsAdmin(playerid, 5) && PlayerInfo[playerid][UserID] != 153569) return SendMsg(playerid, 5);
    if(musiclock == 1) return SendWarning(playerid, "You cant use this command at the moment!");
	new msg[256];
	if(sscanf(params, "s[256]", msg)) return SendWarning(playerid, "/talkis <text>");
	format(msg, sizeof(msg), "http://translate.google.com/translate_tts?tl=is&q=%s", msg);
	foreach(new i : Player) PlayAudioStreamForPlayer(i, msg);
	return 1;
}
CMD:talkin(playerid, params[])
{
    if(!IsAdmin(playerid, 5) && PlayerInfo[playerid][UserID] != 153569) return SendMsg(playerid, 5);
    if(musiclock == 1) return SendWarning(playerid, "You cant use this command at the moment!");
	new msg[256];
	if(sscanf(params, "s[256]", msg)) return SendWarning(playerid, "/talkin <text>");
	format(msg, sizeof(msg), "http://translate.google.com/translate_tts?tl=in&q=%s", msg);
	foreach(new i : Player) PlayAudioStreamForPlayer(i, msg);
	return 1;
}
CMD:talkde(playerid, params[])
{
    if(!IsAdmin(playerid, 5) && PlayerInfo[playerid][UserID] != 153569) return SendMsg(playerid, 5);
    if(musiclock == 1) return SendWarning(playerid, "You cant use this command at the moment!");
	new msg[256];
	if(sscanf(params, "s[256]", msg)) return SendWarning(playerid, "/talkde <text>");
	format(msg, sizeof(msg), "http://translate.google.com/translate_tts?tl=de&q=%s", msg);
	foreach(new i : Player) PlayAudioStreamForPlayer(i, msg);
	return 1;
}
CMD:talkno(playerid, params[])
{
    if(!IsAdmin(playerid, 5) && PlayerInfo[playerid][UserID] != 153569) return SendMsg(playerid, 5);
    if(musiclock == 1) return SendWarning(playerid, "You cant use this command at the moment!");
	new msg[256];
	if(sscanf(params, "s[256]", msg)) return SendWarning(playerid, "/talkno <text>");
	format(msg, sizeof(msg), "http://translate.google.com/translate_tts?tl=no&q=%s", msg);
	foreach(new i : Player) PlayAudioStreamForPlayer(i, msg);
	return 1;
}
CMD:talkru(playerid, params[])
{
    if(!IsAdmin(playerid, 5) && PlayerInfo[playerid][UserID] != 153569) return SendMsg(playerid, 5);
    if(musiclock == 1) return SendWarning(playerid, "You cant use this command at the moment!");
	new msg[256];
	if(sscanf(params, "s[256]", msg)) return SendWarning(playerid, "/talkru <text>");
	format(msg, sizeof(msg), "http://translate.google.com/translate_tts?tl=ru&q=%s", msg);
	foreach(new i : Player) PlayAudioStreamForPlayer(i, msg);
	return 1;
}
CMD:talken(playerid, params[])
{
    if(!IsAdmin(playerid, 5) && PlayerInfo[playerid][UserID] != 153569) return SendMsg(playerid, 5);
    if(musiclock == 1) return SendWarning(playerid, "You cant use this command at the moment!");
	new msg[256];
	if(sscanf(params, "s[256]", msg)) return SendWarning(playerid, "/talken <text>");
	format(msg, sizeof(msg), "http://translate.google.com/translate_tts?tl=en&q=%s", msg);
	foreach(new i : Player) PlayAudioStreamForPlayer(i, msg);
	return 1;
}
CMD:talklv(playerid, params[])
{
    if(!IsAdmin(playerid, 5) && PlayerInfo[playerid][UserID] != 153569) return SendMsg(playerid, 5);
    if(musiclock == 1) return SendWarning(playerid, "You cant use this command at the moment!");
	new msg[256];
	if(sscanf(params, "s[256]", msg)) return SendWarning(playerid, "/talklv <text>");
	format(msg, sizeof(msg), "http://translate.google.com/translate_tts?tl=lv&q=%s", msg);
	foreach(new i : Player) PlayAudioStreamForPlayer(i, msg);
	return 1;
}
CMD:showrules(playerid, params[])
{
    if(!IsAdmin(playerid, 1)) return SendMsg(playerid, 5);
	new id;
	if(sscanf(params, "us[128]", id)) return SendWarning(playerid, "/showrules [playerid]");
    if ((id == INVALID_PLAYER_ID)) return SendWarning(playerid, "{BABABA}This player is not connected");
    if(IsPlayerNPC(id) && !strcmp(pName[id], "Jonny")) return SendNpcPM(playerid, "_|_"), GiveMedal(playerid, 24);
    if(IsPlayerNPC(id)) return 0;
	cmd_rules(id);
	new str[128];
    format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}You have shown the /rules to %s (%d)", pName[id], id);
    SendClientMessage(playerid, AdminInfo, str);
    return 1;
}
CMD:blockpm(playerid)
{
	if(GetPVarInt(playerid, "BlockedPM"))
	{
		  DeletePVar(playerid, "BlockedPM");
		  SendClientMessage(playerid, RED, "» Block PM « "RED2_"Your PM has been enabled");
		  new qqr[128];
	      format(qqr, sizeof(qqr), "UPDATE `users` SET `PmBlocked` = 0 WHERE `UserID` = '%d'", PlayerInfo[playerid][UserID]);
	      mysql_query(GTADM, qqr);
	}
	else
	{
		  SetPVarInt(playerid, "BlockedPM", true);
		  SendClientMessage(playerid, RED, "» Block PM « "RED2_"Your PM has been blocked You will not receive private messages from players!");
		  new qqr[128];
	      format(qqr, sizeof(qqr), "UPDATE `users` SET `PmBlocked` = 1 WHERE `UserID` = '%d'", PlayerInfo[playerid][UserID]);
	      mysql_query(GTADM, qqr);

	}
	return 1;
}
CMD:hitsound(playerid)
{
  if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
  if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
  if(HitSound[playerid] != 1)
  {
     HitSound[playerid] = 1;

     SendClientMessage(playerid, RED, "{00904C} » Account settings «{00D9AD} You have turned hit sounds on.");
     new lmao[128];
     format(lmao, sizeof(lmao), "UPDATE `users` SET `HitSound` = 1 WHERE `UserID` = '%d'", PlayerInfo[playerid][UserID]);
     mysql_query(GTADM, lmao);
  }
  else
  {
     HitSound[playerid] = 0;

     SendClientMessage(playerid, RED, "{00904C} » Account settings «{00D9AD} You have turned hit sounds off.");
     new shit[128];
     format(shit, sizeof(shit), "UPDATE `users` SET `HitSound` = 0 WHERE `UserID` = '%d'", PlayerInfo[playerid][UserID]);
     mysql_query(GTADM, shit);
  }
  return 1;
}
CMD:showdmg(playerid)
{
  if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
  if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
  if(damagetxds[playerid] != 1)
  {
     damagetxds[playerid] = 1;

     SendClientMessage(playerid, RED, "{00904C} » Account settings «{00D9AD} You have turned damage textdraws on.");
     new lmao[128];
     format(lmao, sizeof(lmao), "UPDATE `users` SET `damagetxds` = 1 WHERE `UserID` = '%d'", PlayerInfo[playerid][UserID]);
     mysql_query(GTADM, lmao);
  }
  else
  {
     damagetxds[playerid] = 0;

     SendClientMessage(playerid, RED, "{00904C} » Account settings «{00D9AD} You have turned damage textdraws off.");
     new shit[128];
     format(shit, sizeof(shit), "UPDATE `users` SET `damagetxds` = 0 WHERE `UserID` = '%d'", PlayerInfo[playerid][UserID]);
     mysql_query(GTADM, shit);
  }
  return 1;
}
/*
CMD:aduty(playerid)
{
  if(!IsAdmin(playerid, 3)) return SendMsg(playerid, 5);
  if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
  if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
  if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
  if(GetPVarInt(playerid, "INDM")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command while on admin duty.");
  if(pInGW[playerid])  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in a gang war.");
  if(aduty[playerid] != 1)
  {
     aduty[playerid] = 1;

     foreach(new i : Player)
     {
	   new str[128];
       format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}Admin %s is now on duty.", gAname(playerid));
     //SendClientMessageToAll(AdminInfo, str);
       if(PlayerInfo[i][pAdmin] > 0) SendClientMessage(i, -1, str);
     }
     GOD[playerid]=1;
     SetPlayerColor(playerid, 0xDCDCDCFF);
     SetPlayerHealth(playerid, 10000000);
  }
  else
  {
     aduty[playerid] = 0;

     foreach(new i : Player)
     {
	   new str[128];
       format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}Admin %s is not on duty anymore.", gAname(playerid));
     //SendClientMessageToAll(AdminInfo, str);
       if(PlayerInfo[i][pAdmin] > 0) SendClientMessage(i, -1, str);
     }
     GOD[playerid]=0;
     new gang = PlayerInfo[playerid][pGang];
	 if(gang > 0) SetPlayerColor(playerid, PlayerColors[GangInfo[gang][gColor]]);
	 else SetPlayerColor(playerid, PlayerColors[random(200)] );
	 SetPlayerHealth(playerid, 100);
  }
  return 1;
}*/
CMD:block(playerid, params[])
{
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
	new id, reason[256];
	if (sscanf(params, "us[256]", id, reason)) return SendWarning(playerid, "/block [playerid] [reason]");
    if ((!IsPlayerConnected(id))) return SendWarning(playerid, "{BABABA}This player is not connected!");
    if (IsPlayerNPC(id)) return SendWarning(playerid, "{BABABA}You cant block a bot!");
    if (id == playerid) return SendWarning(playerid, "{BABABA}You cant block yourself!");
    if (PlayerInfo[id][pAdmin] > 0 && PlayerInfo[playerid][pAdmin] < 1) return SendWarning(playerid, "{BABABA}You cant block an admin!");
    if(PlayerInfo[playerid][Muted] > 0) format(reason, sizeof(reason), "No Reason");
	new blockid=-1;

	for(new x=0; x<5; x++)
	{
		if(Blocked[playerid][x] == id) blockid=7777;
	}
	if(blockid == 7777)  return SendWarning(playerid, "{BABABA}You have already blocked this player!");

	for(new x=0; x<5; x++)
	{
		if(Blocked[playerid][x] == -255)
		{
		   blockid=x;
		   break;
		}
	}
	if(blockid < 0)  return SendWarning(playerid, "{BABABA}You cant block more than 5 players!");
    Blocked[playerid][blockid]=id;

	new str[150];
	if(!IsAdmin(playerid, 1)) format(str, sizeof(str), "» Block «  "RED2_"%s (%d) has blocked you (Reason: %s)", pName[playerid], playerid, reason);
	SendClientMessage(id, RED, str);

	format(str, sizeof(str), "» Block «  "RED2_"You have blocked %s (%d) (Reason: %s)", pName[id], id, reason);
	SendClientMessage(playerid, RED, str);

	format(str, sizeof(str), "» Block « "RED2_" %s (%d) has blocked %s (%d) (Reason: %s)", pName[playerid], playerid, pName[id], id, reason);
	foreach(new i : Player) if(PlayerInfo[i][pAdmin] > 0 && i != playerid && i!= id) SendClientMessage(i, RED, str);


	return 1;
}

CMD:unblock(playerid, params[])
{
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
	new id;
	if (sscanf(params, "u", id)) return SendWarning(playerid, "/unblock [playerid]");
    if ((!IsPlayerConnected(id))) return SendWarning(playerid, "{BABABA}This player is not connected!");

	new blockid=-1;
	for(new x=0; x<5; x++)
	{
		if(Blocked[playerid][x] == id) blockid=x;
	}
	if(blockid < 0)  return SendWarning(playerid, "{BABABA}This player is not blocked!");

    Blocked[playerid][blockid]=-1;

	new str[150];
	if(!IsAdmin(playerid, 1)) format(str, sizeof(str), "» Block «  "RED2_"%s (%d) has unblocked you", pName[playerid], playerid);
	SendClientMessage(id, RED, str);

	format(str, sizeof(str), "» Block « "RED2_"You have unblocked %s (%d)", pName[id], id);
	SendClientMessage(playerid, RED, str);

	format(str, sizeof(str), "» Block «"RED2_" %s (%d) has unblocked %s (%d)", pName[playerid], playerid, pName[id], id);
	foreach(new i : Player) if(PlayerInfo[i][pAdmin] > 0 && i != playerid && i!= id) SendClientMessage(i, RED, str);


	return 1;
}

CMD:blockteleports(playerid)
{
	if(!IsAdmin(playerid, 10)) return 0;
	if(GetPVarInt(playerid, "TeleportsBlock"))
	{
		  DeletePVar(playerid, "TeleportsBlock");
		  SendClientMessage(playerid, RED, "-Block Teleports- Teleport messages has been enabled!");
		  new qqr[128];
	      format(qqr, sizeof(qqr), "UPDATE `users` SET `TeleportsBlocked` = 0 WHERE `UserID` = '%d'", PlayerInfo[playerid][UserID]);
	      mysql_query(GTADM, qqr);
	}
	else
	{
		  SetPVarInt(playerid, "TeleportsBlock", true);
		  SendClientMessage(playerid, RED, "-Block Teleports- Teleport messages has been blocked!");
		  new qqr[128];
	      format(qqr, sizeof(qqr), "UPDATE `users` SET `TeleportsBlocked` = 1 WHERE `UserID` = '%d'", PlayerInfo[playerid][UserID]);
	      mysql_query(GTADM, qqr);

	}
	return 1;
}
CMD:pm(playerid, params[])
{
	if((PlayerInfo[playerid][Muted] > 1))
	{
	  new string[256];//256
   	  if(PlayerInfo[playerid][Muted] > 1) format(string, sizeof(string), ""RED_"» Error « {BABABA}You are on the STFU list, you have to wait more %d seconds to chat again", PlayerInfo[playerid][Muted]);
	  SendClientMessage(playerid, RED, string);
	  return 0;
	}
	if((GetPVarInt(playerid, "LOGGED")) == 2) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be registered/logged in to use this command");
	if(ChatLocked == 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}The chat is locked by an administrator");
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
	new id, msg[256];
	if (sscanf(params, "us[256]", id, msg)) return SendWarning(playerid, "/pm [playerid] [msg]");
	if(GetPVarInt(id, "BlockedPM") && !IsAdmin(playerid, 10))  return SendWarning(playerid, "{BABABA}This player has blocked his pm");
    if ((!IsPlayerConnected(id))) return SendWarning(playerid, "{BABABA}This player is not connected");
    if(IsPlayerNPC(id) && strfind(pName[id], "Jonny", false)) return SendWarning(playerid, "{BABABA}This player is not connected");
    str_replace("/q", "Imnoob", msg);
    str_replace("/ q", "Im noob", msg);
    /*str_replace("rietz", "", msg);
    str_replace("eliot", "", msg);
    str_replace("rietzz", "", msg);
    str_replace("schneider", "", msg);
    str_replace("isplash", "", msg);
    str_replace("adin", "", msg);
    str_replace("dino", "", msg);
    str_replace("dod", "", msg);
    str_replace("dodlerz", "", msg);
    str_replace("d0dlerz", "", msg);
    str_replace("d0d", "", msg);*/

	new adtest[180];
	format(adtest, sizeof(adtest), "%s", msg);
	if(stringContainsIP(adtest)) MutePlayer(playerid, 250, -255, "Advertising");
	else
	{
	    if(IsPlayerNPC(id))
		{
		   if(!strcmp(pName[id], "Jonny"))
		   {
	          SendPMToBot(playerid, msg);
		   }
		}
		else
		{
			if ((id == INVALID_PLAYER_ID) || (id == playerid)) return SendClientMessage(playerid, RED, "» Error « {BABABA}Wrong ID");
			new blockid=-1;
			for(new x=0; x<5; x++)
			{
				if(Blocked[id][x] == playerid) blockid=7777;
			}
			if(blockid == 7777 && !IsAdmin(playerid, 1))  return SendWarning(playerid, "{BABABA}This player has blocked you!");
			for(new x=0; x<5; x++)
			{
				if(Blocked[playerid][x] == id) blockid=17;
			}
			if(blockid == 17)  return SendWarning(playerid, "{BABABA}You have blocked this player!");

			new Message[256];
	   		format(Message, sizeof(Message), "» PM « from %s (%d): %s", pName[playerid], playerid, msg);
	   	    SendClientMessageEX(id, PINK, Message);

	    	format(Message, sizeof(Message), "» PM « to %s (%d): %s", pName[id], id, msg);
	    	SendClientMessageEX(playerid, PINK, Message);
	    	PlayerPlaySound(id, 1057, 0.0, 0.0, 0.0);

	   		format(Message, sizeof(Message), "PM - ~w~%s (%d) sent you a ~r~~h~~h~Private Message~w~!", pName[playerid], playerid);
	   		PlayerTextDrawSetString(id, pPMTD[id][0], Message);
			PlayerTextDrawShow(id, pPMTD[id][0]);
			PlayerTextDrawShow(id, pPMTD[id][1]);
			SetTimerEx("hidePMTD", 4000, false, "i", id);

	    	format(Message, sizeof(Message), "» PM « from %s to %s: %s", pName[playerid], pName[id], msg);
			SendClientMessageEX(id, RACE, "Use "PINK_"/r <Message> "RACE_"to reply directly to the private message");
			PMReply[id]=playerid;



			if(IsAdmin(id, 10) || IsAdmin(playerid, 10))
			{
			  foreach (new i : Player)
			  {
			       if(IsAdmin(i, 10) && (i != playerid) && (i != id))
				   {
				     SendClientMessage(i, GRAY, Message);
				   }
			  }
			}
			else
			{
		    	foreach (new i : Player)
				{
				     if(IsAdmin(i, PlayerInfo[playerid][pAdmin]+1) && (i != playerid) && (i != id))
					 {
					   SendClientMessage(i, GRAY, Message);
					 }
				}
			}
		    printf("-PM- from %s to %s: %s", pName[playerid], pName[id], msg);
		    #if defined useirc
    	    IRC_OnPlayerPM(Message);//irc
    	    #endif
	   	    if(GetPVarInt(id, "AFK")) SendWarning(playerid, "{BABABA}This player is AFK and may not answer your PM!");
			else
			{
	   	      if(GetPVarInt(id, "RACER")) SendWarning(playerid, "{BABABA}This player is Racing and may not answer your PM!");
			  else
			  {
				  if(g_IsPaused[id] == true) SendWarning(playerid, "{BABABA}This player is Paused and may not answer your PM!");
			  }
			}
 	    }
    }
	return 1;
}

CMD:r(playerid, params[])
{
      if((GetPVarInt(playerid, "LOGGED")) == 2) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be registered/logged in to use this command");
	  if(PMReply[playerid] < 0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You haven't received any Private Messages");
	  if(!strlen(params)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Usage /r <Message>");
	  new str[135];
	  format(str, sizeof(str), "%d %s", PMReply[playerid], params);
	  cmd_pm(playerid, str);
	  return 1;
}
stock SendPMToBot(playerid, message[])
{
  if(CantBotChat[playerid] == 0)
  {
	new str[300], szString[512];

	format(str, sizeof(str), "%s", message);
    str_replace("jonny", "cleverbot", str);
    str_replace(" ", "%20", str);

    format(szString, 512, "gtadm.com/newbot/test.php?text=%s", str);
    HTTP(playerid, HTTP_GET, szString, "", "CleverBot_Response");
    CantBotChat[playerid] =1;
    new NPCID = GetPlayerIDFromName("Jonny");
    format(str, sizeof(str), "» PM « to Jonny (%d): %s", NPCID, message);
   	SendClientMessage(playerid, PINK, str);

    format(str, sizeof(str), "» PM « from %s to Jonny: %s", pName[playerid], message);

    foreach (new i : Player) if(IsAdmin(i, PlayerInfo[playerid][pAdmin]+1) && (i != playerid)) SendClientMessage(i, GRAY, str);
  }
  return 1;
}

forward CleverBot_Response(index, response_code, data[]);
public CleverBot_Response(index, response_code, data[])
{
  if(response_code == 200)
  {
	 new str[160];
	 format(str, sizeof(str), "%s", data);
	 if((strfind(str, "please", true) != -1)) GiveMedal(index, 54);
	 strdel(str, 0, 10);
     str_replace("cleverbot", "Jonny", str);
	 SendNpcPM(index, str);
     PlayerPlaySound(index, 1057, 0.0, 0.0, 0.0);
     PMReply[index]=GetPlayerIDFromName("Jonny");
  }
  CantBotChat[index]=0;
}


stock SendMessageToBot(playerid, message[])
{
  if(CantBotChat[playerid] == 0)
  {
	new str[300], szString[512];

	format(str, sizeof(str), "%s", message);
    if(strlen(str) > 15) str_replace("jonny", "", str);
    else str_replace("jonny", "cleverbot", str);
    str_replace(" ", "%20", str);

    format(szString, 512, "gtadm.com/newbot/test.php?text=%s", str);
    print(szString);
    HTTP(playerid, HTTP_GET, szString, "", "CleverBot_Response2");
    CantBotChat[playerid] =1;
  }
  return 1;
}


forward CleverBot_Response2(index, response_code, data[]);
public CleverBot_Response2(index, response_code, data[])
{
  if(response_code == 200)
  {
	 new str[160];
	 format(str, sizeof(str), "%s", data);
	 strdel(str, 0, 10);
	 str_replace("cleverbot", "Jonny", str);
     SendBotMessage(str);
  }
  CantBotChat[index]=0;
}
CMD:set3dtext(playerid, params[])
{
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(!IsAdmin(playerid, 5)) return SendMsg(playerid, 5);
	new text[50], id, str[128];
	if(sscanf(params, "us[50]", id, text)) return SendWarning(playerid, "/set3dtext <playerid> <text>"), SendClientMessage(playerid, GRAY, "Use {FF0000}~r~ {0000FF}~b~ {12DE00}~g~ {EA00FF}~p~ {403E40}~l~ {FFFFFF}~w~ "), SendClientMessage(playerid, GRAY, "  {FFEE00}~y~ {AAFF00}~lg~ {FF9100}~o~ {00E5FF}~lb~ {FFBFFA}~lp~ "GRAY_"For Colors (its case sensitive!)");
    if (!IsPlayerConnected(id) || IsPlayerNPC(id)) return SendWarning(playerid, "{BABABA}This player is not connected");
    if((GetPVarInt(id, "LOGGED")) == 2) return SendWarning(playerid, "{BABABA}This player isnt registered");
    if((strlen(text) < 3) || strlen(text) >= 30) return SendWarning(playerid, "3d text must be between 3 and 30 characters");
    if(PlayerInfo[id][IsVIP]==0 && !IsAdmin(id, 1) && !IsAdmin(playerid, 5)) return SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You dont have a permission to give a headtext to non vip players! Use /market and buy it again.");

    str_replace("~w~", "{FFFFFF}", text);
    str_replace("~r~", "{FF0000}", text);
    str_replace("~b~", "{0000FF}", text);
    str_replace("~g~", "{12DE00}", text);
    str_replace("~p~", "{EA00FF}", text);
    str_replace("~y~", "{FFEE00}", text);
    str_replace("~o~", "{FF9100}", text);
    str_replace("~lb~", "{00E5FF}", text);
    str_replace("~lg~", "{AAFF00}", text);
    str_replace("~lp~", "{FFBFFA}", text);
    str_replace("~l~", "{403E40}", text);
    format(PlayerInfo[id][HeadText], 50, "%s", text);

//    Set3DText(id, 1);
    new Query[168];
    format(Query, sizeof(Query), "UPDATE `users` SET `HeadText` = '%s' WHERE `UserID` = '%d'", Escape_String(PlayerInfo[id][HeadText]), PlayerInfo[id][UserID]);
    mysql_query(GTADM, Query);

   	if(id != playerid)
	{
	   format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}Admin %s has changed your 3d text to %s", gAname(playerid), PlayerInfo[id][HeadText]);
  	   SendClientMessage(id, AdminInfo, str);
	   format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}You have changed %s's 3d text to %s", pName[id], PlayerInfo[id][HeadText]);
  	   SendClientMessage(playerid, AdminInfo, str);
    }
    else if(id == playerid)
	{
	   format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}You have set your own 3dtext as "GRAY_"%s", PlayerInfo[id][HeadText]);
  	   SendClientMessage(playerid, AdminInfo, str);
    }

    return 1;
}
CMD:delete3dtext(playerid, params[])
{
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(!IsAdmin(playerid, 5)) return SendMsg(playerid, 5);
	new id, str[128];
	if (sscanf(params, "u", id)) return SendWarning(playerid, "/delete3dtext <playerid>");
    if ((!IsPlayerConnected(id))) return SendWarning(playerid, "{BABABA}This player is not connected");
    if(IsPlayerNPC(id) && !strcmp(pName[id], "Jonny")) return SendNpcPM(playerid, "_|_"), GiveMedal(playerid, 24);
    if(PlayerInfo[id][IsVIP] == 0 && !IsAdmin(id, 1)) return SendWarning(playerid, "This player is not VIP!");
    if(IsPlayerNPC(id)) return 0;
	PlayerInfo[id][HeadText][0]='\0';

//    Set3DText(id, 0);
	if(id != playerid)
	{
	   format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}Admin %s has removed your HeadText", gAname(playerid));
  	   SendClientMessage(id, AdminInfo, str);
	   format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}You have Removed %s's HeadText", pName[id]);
  	   SendClientMessage(playerid, AdminInfo, str);
    }
    if(id == playerid) SendClientMessage(playerid, BLUE, "{3BB023}» Admin action « {ABFF85}You have removed your own 3dtext");
    new Query[168];
    format(Query, sizeof(Query), "UPDATE `users` SET `HeadText` = 'no' WHERE `UserID` = '%d'", PlayerInfo[id][UserID]);
    mysql_query(GTADM, Query);

    return 1;

}
//==============================================================================
public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{

	for (new i = 0; i < strlen (inputtext); ++i)
		if (inputtext [i] == '%')
			inputtext [i] = '#';

    switch( dialogid )
    {

        case DIALOG_REGISTER:
        {
            if(response)
            {
                if(!IsPlayerNPC(playerid))
                {
                  if(!strlen(inputtext)) return ShowPlayerDialog(playerid, DIALOG_REGISTER, DIALOG_STYLE_PASSWORD, "Registering...", ""RED_"You have entered an invalid password.\n"WHITE_"Type your password below to register a new account.", "Register", "");
                  OnPlayerRegister(playerid, inputtext);
                }
            }
            else
            {
               ShowPlayerDialog(playerid, DIALOG_REGISTER, DIALOG_STYLE_PASSWORD, "Registering...", ""RED_"You have entered an invalid password.\n"WHITE_"Type your password below to register a new account.", "Register", "");
            }
        }/*
        case DIALOG_REGISTER2:
        {
            if(response)
            {
                if(!IsPlayerNPC(playerid))
                {
                if(!strlen(inputtext)) return ShowPlayerDialog(playerid, DIALOG_REGISTER, DIALOG_STYLE_PASSWORD, "Registering...", ""RED_"You have entered an invalid password.\n"WHITE_"Type your password below to register a new account.", "Register", "");
                OnPlayerRegister(playerid, inputtext);
                }
            }
        }*/
        case 5111:
        {
			if(!response)
			{
             ShowPlayerDialog(playerid, 5111, DIALOG_STYLE_MSGBOX, "Away From Keyboard", "You are currently in AFK Mode", "Back", "");
			}
			else
			{
				DeletePVar(playerid, "AFK");
				new msg[128];
				format(msg, sizeof(msg), "» AFK « {70AB5C}%s is back into the game.", pName[playerid]);
				SendClientMessageToAll(0xA3CC00FF, msg);
				Paused[playerid] = 0;
				DeletePVar(playerid, "AFKREASON");
				TogglePlayerControllableEx(playerid, 1);
				ClearAnimations(playerid, 1);
			    new gang = PlayerInfo[playerid][pGang];
	 		    if(gang > 0) SetPlayerColor(playerid, PlayerColors[GangInfo[gang][gColor]]);
	            else SetPlayerColor(playerid, PlayerColors[random(200)] );
			}

        }
	    case 1712:
	    {
		    if(!strlen(inputtext) || strcmp(inputtext, RconPass[playerid]))
		    {
                pSecRCON[playerid]++;
                ShowPlayerDialog(playerid, 1712, DIALOG_STYLE_PASSWORD, "Secondary rcon password", ""RED_"Wrong password entered\n"RED2_"Please Enter "RED_"YOUR OWN"RED2_" Secondary rcon password to be able to login", "Enter", "");
			    if(pSecRCON[playerid] >= 3)
			    {
			       new string[128];
				   format(string, sizeof(string), "{3BB023}» Admin action « {ABFF85}Admin Jonny has banned %s (%d) (Reason: Wrong RCON)", pName[playerid], playerid);
			       SendClientMessageToAll(AdminInfo, string);
			       new string2[128];
			       format(string2, sizeof(string2), "-Ban- Admin Jonny has banned %s (%d) (Reason: Wrong RCON), pName[playerid], playerid");
		       	   printf("%s", string2);


	               BanEX(playerid, "Wrong RCON", -255);
			    }
		    }
		    else
		    {
				new string[128];
				format(string, sizeof(string), "» RCON Logged In « {AA8202}%s (%d) has logged in as RCON Admin", pName[playerid], playerid);
				foreach (new i : Player) if(IsAdmin(i, 1) && !GetPVarInt(playerid, "Hidden") && !GetPVarInt(playerid, "HideMeBitch")) SendClientMessage(i, ORANGE, string);
				#if defined useirc
                IRC_OnAdminLogin(playerid, 2);//irc
                #endif
                DeletePVar(playerid, "lolola");
		    }

	    }
		case 18505:
		{
			if(response)
			{
				PlayAudioStreamForPlayer(playerid, Results_Links[playerid][listitem]);
				GiveMedal(playerid, 16);
				SendClientMessage(playerid, GRAY, "- Type (/stopmusic) to stop the music.");
			}
		}
		case 18992:
		{
			if(response)
			{
				new id;
				PlayAudioStreamForPlayer(id, Results_Links[playerid][listitem]);
				GiveMedal(id, 16);
				SendClientMessage(id, GRAY, "- Type (/stopmusic) to stop the music.");
			}
		}
		case 18506:
		{
			if(response)
			{
				foreach(new i : Player) PlayAudioStreamForPlayer(i, Results_Links[playerid][listitem]), SendClientMessage(i, GRAY, "- Type (/stopmusic) to stop the Music.");
				if(!IsAdmin(playerid, 1))
				{
				  new str[128];
				  format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}Admin %s has played an audio stream for all players.", gAname(playerid), playerid);
				  SendClientMessageToAll(-1, str);
				}


			}
		}
        case 3434:
        {
			switch ( listitem )
			{
			        case 0 : ShowPlayerDialog( playerid, 3435, DIALOG_STYLE_LIST, "Airplanes", "Beagle\nCropduster\nDodo\nNevada\nRustler\nShamal\nSkimmer\nStuntplane\nBack", "Select", "Cancel" );
			        case 1 : ShowPlayerDialog( playerid, 3436, DIALOG_STYLE_LIST, "Helicopters", "Cargobob\nLeviathan\nMaverick\nNews Maverick\nPolice Maverick\nRaindance\nSeasparrow\nSparrow\nBack", "Select", "Cancel" );
			        case 2 : ShowPlayerDialog( playerid, 3437, DIALOG_STYLE_LIST, "Bikes", "BF-400\nBike\nBMX\nFaggio\nFCR-900\nFreeway\nMountain Bike\nNRG-500\nPCJ-600\nPizzaboy\nQuad\nSanchez\nWayfarer\nBack", "Select", "Cancel" );
			        case 3 : ShowPlayerDialog( playerid, 3438, DIALOG_STYLE_LIST, "Convertibles", "Comet\nFeltzer\nStallion\nWindsor\nBack", "Select", "Cancel" );
			        case 4 : ShowPlayerDialog( playerid, 3439, DIALOG_STYLE_LIST, "Industrial", "Benson\nBobcat\nBurrito\nBoxville\nBoxburg\nCement Truck\nDFT-30\nFlatbed\nLinerunner\nMule\nNewsvan\nPacker\nPetrol Tanker\nPony\nRoadtrain\nRumpo\nSadler\nSadler Shit\nTopfun\nTractor\nTrashmaster\nUtility Van\nWalton\nYankee\nYosemite\nBack", "Select", "Cancel" );
			        case 5 : ShowPlayerDialog( playerid, 3440, DIALOG_STYLE_LIST, "Lowriders", "Blade\nBroadway\nRemington\nSavanna\nSlamvan\nTahoma\nTornado\nVoodoo\nBack", "Select", "Cancel" );
			        case 6 : ShowPlayerDialog( playerid, 3441, DIALOG_STYLE_LIST, "Off Road", "Bandito\nBF Injection\nDune\nHuntley\nLandstalker\nMesa\nMonster\nMonster A\nMonster B\nPatriot\nRancher A\nRancher B\nSandking\nBack", "Select", "Cancel" );
			        case 7 : ShowPlayerDialog( playerid, 3442, DIALOG_STYLE_LIST, "Public Service Vehicles", "Ambulance\nBarracks\nBus\nCabbie\nCoach\nCop Bike (HPV-1000)\nEnforcer\nFBI Rancher\nFBI Truck\nFiretruck\nFiretruck LA\nPolice Car (LoutSP)\nPolice Car (LVPD)\nPolice Car (SFPD)\nRanger\nS.W.A.T\nTaxi\nBack", "Select", "Cancel" );
			        case 8 : ShowPlayerDialog( playerid, 3443, DIALOG_STYLE_LIST, "Saloons", "Admiral\nBloodring Banger\nBravura\nBuccaneer\nCadrona\nClover\nElegant\nElegy\nEmperor\nEsperanto\nFortune\nGlendale Shit\nGlendale\nGreenwood\nHermes\nIntruder\nMajestic\nManana\nMerit\nNebula\nOceanic\nPicador\nPremier\nPrevion\nPrimo\nSentinel\nStafford\nSultan\nSunrise\nTampa\nVincent\nVirgo\nWillard\nWashington\nBack", "Select", "Cancel" );
			        case 9 : ShowPlayerDialog( playerid, 3444, DIALOG_STYLE_LIST, "Sport Vehicles", "Alpha\nBanshee\nBlista Compact\nBuffalo\nBullet\nCheetah\nClub\nEuros\nFlash\nHotring Racer\nHotring Racer A\nHotring Racer B\nInfernus\nJester\nPhoenix\nSabre\nSuper GT\nTurismo\nUranus\nZR-350\nBack", "Select", "Cancel" );
			        case 10 : ShowPlayerDialog( playerid, 3445, DIALOG_STYLE_LIST, "Station Wagons", "Moonbeam\nPerenniel\nRegina\nSolair\nStratum\nBack", "Select", "Cancel" );
			        case 11 : ShowPlayerDialog( playerid, 3446, DIALOG_STYLE_LIST, "Boats", "Coastguard\nDinghy\nJetmax\nLaunch\nMarquis\nPredator\nReefer\nSpeeder\nSquallo\nTropic\nBack", "Select", "Cancel" );
			        case 12 : ShowPlayerDialog( playerid, 3447, DIALOG_STYLE_LIST, "Trailers", "Article Trailer\nArticle Trailer 2\nArticle Trailer 3\nBaggage Trailer A\nBaggage Trailer B\nFarm Trailer\nFreight Flat Trailer (Train)\nFreight Box Trailer (Train)\nPetrol Trailer\nStreak Trailer (Train)\nStairs Trailer\nUtility Trailer\nBack", "Select", "Cancel" );
			        case 13 : ShowPlayerDialog( playerid, 3448, DIALOG_STYLE_LIST, "Unique Vehicles", "Baggage\nBrownstreak (Train)\nCaddy\nCamper\nCamper A\nCombine Harvester\nDozer\nDumper\nForklift\nFreight (Train)\nHotknife\nHustler\nHotdog\nKart\nMower\nMr Whoopee\nRomero\nSecuricar\nStretch\nSweeper\nTram\nTowtruck\nTug\nVortex\nBack", "Select", "Cancel" );
			        case 14 : ShowPlayerDialog( playerid, 3449, DIALOG_STYLE_LIST, "RC Vehicles", "RC Bandit\nRC Raider\nRC Goblin\nRC Tiger\nRC Cam\nBack", "Select", "Cancel" );
			}
        }
		case 3435 :
		{
		    if ( listitem > 10 ) return cmd_setsecondcar(playerid);
		    new model_array[] = { 511, 512, 593, 553, 476, 519, 460, 513 };
			new str[128];
			format(str, sizeof(str), "» Second vehicle « {6AC213} Your second vehicle has been set to %s", vInfo[model_array[listitem]-400][vName]);
			SendClientMessage(playerid, 0xBBF582FF, str);
			PlayerInfo[playerid][pSecV]=model_array[listitem];
			new query[256];
		    format(query, sizeof(query), "UPDATE `users` SET `Car2` = %d, `Car2Nitro`=0, `Car2Wheel`=0, `Car2Color1`=0, `Car2Color2`=0 WHERE `UserID` = '%d'", PlayerInfo[playerid][pSecV], PlayerInfo[playerid][UserID]);
		    mysql_query(GTADM, query);
		    PlayerInfo[playerid][pSecVc1] = 0, PlayerInfo[playerid][pSecVc2] = 0, PlayerInfo[playerid][pSecNitro] = 0, PlayerInfo[playerid][pSecWheel] = 0;
		}
		case 3436 :
		{
		    if ( listitem > 8 ) return cmd_setsecondcar(playerid);
	 		new model_array[] = { 548, 417, 487, 488, 497, 563, 447, 469 };
			new str[128];
			format(str, sizeof(str), "» Second vehicle « {6AC213} Your second vehicle has been set to %s", vInfo[model_array[listitem]-400][vName]);
			SendClientMessage(playerid, 0xBBF582FF, str);
			PlayerInfo[playerid][pSecV]=model_array[listitem];
			new query[256];
		    format(query, sizeof(query), "UPDATE `users` SET `Car2` = %d, `Car2Nitro`=0, `Car2Wheel`=0, `Car2Color1`=0, `Car2Color2`=0 WHERE `UserID` = '%d'", PlayerInfo[playerid][pSecV], PlayerInfo[playerid][UserID]);
		    mysql_query(GTADM, query);
		    PlayerInfo[playerid][pSecVc1] = 0, PlayerInfo[playerid][pSecVc2] = 0, PlayerInfo[playerid][pSecNitro] = 0, PlayerInfo[playerid][pSecWheel] = 0;


		}
		case 3437 :
		{
		    if ( listitem > 12 ) return cmd_setsecondcar(playerid);
		    new model_array[] = { 581, 509, 481, 462, 521, 463, 510, 522, 461, 448, 471, 468, 586 };
			new str[128];
			format(str, sizeof(str), "» Second vehicle « {6AC213} Your second vehicle has been set to %s", vInfo[model_array[listitem]-400][vName]);
			SendClientMessage(playerid, 0xBBF582FF, str);
			PlayerInfo[playerid][pSecV]=model_array[listitem];
			new query[256];
		    format(query, sizeof(query), "UPDATE `users` SET `Car2` = %d, `Car2Nitro`=0, `Car2Wheel`=0, `Car2Color1`=0, `Car2Color2`=0 WHERE `UserID` = '%d'", PlayerInfo[playerid][pSecV], PlayerInfo[playerid][UserID]);
		    mysql_query(GTADM, query);
		    PlayerInfo[playerid][pSecVc1] = 0, PlayerInfo[playerid][pSecVc2] = 0, PlayerInfo[playerid][pSecNitro] = 0, PlayerInfo[playerid][pSecWheel] = 0;


		}
	/*	case 33303:
		{
          if(response)
          {
    	    switch(listitem)
    	    {*/
			  /*case 0:
			  {
			    new Float:x, Float:y, Float:z, Float:angle;
    	      	GetPlayerPos(playerid, x, y, z);
  			  	GetPlayerFacingAngle(playerid, angle);
              	SetVehiclePos(411, x, y, z);
              	SetVehicleVirtualWorld(411, GetPlayerVirtualWorld(playerid));
              	LinkVehicleToInterior(411, GetPlayerInterior(playerid));
	          	PutPlayerInVehicle(playerid, 411, 0);
	          	SetVehicleZAngle(411, angle);
	          	SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} You have spawned an infernus!");
	          }
	          case 1:
	          {
              	new Float:x, Float:y, Float:z, Float:angle;
   		      	GetPlayerPos(playerid, x, y, z);
              	GetPlayerFacingAngle(playerid, angle);
              	SetVehiclePos(522, x, y, z);
              	SetVehicleVirtualWorld(522, GetPlayerVirtualWorld(playerid));
	          	LinkVehicleToInterior(522, GetPlayerInterior(playerid));
	          	PutPlayerInVehicle(playerid, 522, 0);
	          	SetVehicleZAngle(522, angle);
	          	SendClientMessage(playerid, -1, "{A6856A}» Stunt «{96A66A} You have spawned an NRG-500!");*/
       	case 3307:
		{
          if(response)
          {
            switch(listitem)
    	    {
				 case 0: return cmd_vinf(playerid);
				 case 1: return cmd_vnrg(playerid);
				 case 2: return cmd_vtur(playerid);
				 case 3: return cmd_vbul(playerid);
				 case 4: return cmd_vbmx(playerid);
				 case 5: return cmd_vmount(playerid);
				 case 6: return cmd_vstunt(playerid);
				 case 7: return cmd_vjetmax(playerid);
				 case 8: return cmd_vmaverick(playerid);
    	    }
	      }
        }
		case 3438 :
		{
		    if ( listitem > 3 ) return cmd_setsecondcar(playerid);
		    new model_array[] = { 480, 533, 439, 555 };
			new str[128];
			format(str, sizeof(str), "» Second vehicle « {6AC213} Your second vehicle has been set to %s", vInfo[model_array[listitem]-400][vName]);
			SendClientMessage(playerid, 0xBBF582FF, str);
			PlayerInfo[playerid][pSecV]=model_array[listitem];
			new query[256];
		    format(query, sizeof(query), "UPDATE `users` SET `Car2` = %d, `Car2Nitro`=0, `Car2Wheel`=0, `Car2Color1`=0, `Car2Color2`=0 WHERE `UserID` = '%d'", PlayerInfo[playerid][pSecV], PlayerInfo[playerid][UserID]);
		    mysql_query(GTADM, query);
		    PlayerInfo[playerid][pSecVc1] = 0, PlayerInfo[playerid][pSecVc2] = 0, PlayerInfo[playerid][pSecNitro] = 0, PlayerInfo[playerid][pSecWheel] = 0;


		}


		case 3439 :
		{
		    if ( listitem > 24 ) return cmd_setsecondcar(playerid);
		    new model_array[] = { 499, 422, 482, 498, 609, 524, 578, 455, 403, 414, 582, 443, 514, 413, 515, 440, 543, 605, 459, 531, 408, 552, 478, 456, 554 };
			new str[128];
			format(str, sizeof(str), "» Second vehicle « {6AC213} Your second vehicle has been set to %s", vInfo[model_array[listitem]-400][vName]);
			SendClientMessage(playerid, 0xBBF582FF, str);
			PlayerInfo[playerid][pSecV]=model_array[listitem];
		    format(str, sizeof(str), "UPDATE `users` SET `Car2` = %d, `Car2Nitro`=0, `Car2Wheel`=0, `Car2Color1`=0, `Car2Color2`=0 WHERE `UserID` = '%d'", PlayerInfo[playerid][pSecV], PlayerInfo[playerid][UserID]);
		    mysql_query(GTADM, str);
		    PlayerInfo[playerid][pSecVc1] = 0, PlayerInfo[playerid][pSecVc2] = 0, PlayerInfo[playerid][pSecNitro] = 0, PlayerInfo[playerid][pSecWheel] = 0;


		}
		case 3440 :
		{
		    if ( listitem > 7 ) return cmd_setsecondcar(playerid);
            new model_array[] = { 536, 575, 534, 567, 535, 566, 576, 412 };
			new str[128];
			format(str, sizeof(str), "» Second vehicle « {6AC213} Your second vehicle has been set to %s", vInfo[model_array[listitem]-400][vName]);
			SendClientMessage(playerid, 0xBBF582FF, str);
			PlayerInfo[playerid][pSecV]=model_array[listitem];
		    format(str, sizeof(str), "UPDATE `users` SET `Car2` = %d, `Car2Nitro`=0, `Car2Wheel`=0, `Car2Color1`=0, `Car2Color2`=0 WHERE `UserID` = '%d'", PlayerInfo[playerid][pSecV], PlayerInfo[playerid][UserID]);
		    mysql_query(GTADM, str);
		    PlayerInfo[playerid][pSecVc1] = 0, PlayerInfo[playerid][pSecVc2] = 0, PlayerInfo[playerid][pSecNitro] = 0, PlayerInfo[playerid][pSecWheel] = 0;


		}
		case 3441 :
		{
		    if ( listitem > 12 ) return cmd_setsecondcar(playerid);
	    	new model_array[] = { 568, 424, 573, 579, 400, 500, 444, 556, 557, 470, 489, 505, 495 };
			new str[128];
			format(str, sizeof(str), "» Second vehicle « {6AC213} Your second vehicle has been set to %s", vInfo[model_array[listitem]-400][vName]);
			SendClientMessage(playerid, 0xBBF582FF, str);
			PlayerInfo[playerid][pSecV]=model_array[listitem];
		    format(str, sizeof(str), "UPDATE `users` SET `Car2` = %d, `Car2Nitro`=0, `Car2Wheel`=0, `Car2Color1`=0, `Car2Color2`=0 WHERE `UserID` = '%d'", PlayerInfo[playerid][pSecV], PlayerInfo[playerid][UserID]);
		    mysql_query(GTADM, str);
		    PlayerInfo[playerid][pSecVc1] = 0, PlayerInfo[playerid][pSecVc2] = 0, PlayerInfo[playerid][pSecNitro] = 0, PlayerInfo[playerid][pSecWheel] = 0;


		}
		case 3442 :
		{
		    if ( listitem > 17 ) return cmd_setsecondcar(playerid);
		    new model_array[] = { 416, 433, 431, 438, 437, 523, 427, 490, 528, 407, 544, 596, 598, 597, 599, 601, 420 };
			new str[128];
			format(str, sizeof(str), "» Second vehicle « {6AC213} Your second vehicle has been set to %s", vInfo[model_array[listitem]-400][vName]);
			SendClientMessage(playerid, 0xBBF582FF, str);
			PlayerInfo[playerid][pSecV]=model_array[listitem];
			new query[256];
		    format(query, sizeof(query), "UPDATE `users` SET `Car2` = %d, `Car2Nitro`=0, `Car2Wheel`=0, `Car2Color1`=0, `Car2Color2`=0 WHERE `UserID` = '%d'", PlayerInfo[playerid][pSecV], PlayerInfo[playerid][UserID]);
		    mysql_query(GTADM, query);
		    PlayerInfo[playerid][pSecVc1] = 0, PlayerInfo[playerid][pSecVc2] = 0, PlayerInfo[playerid][pSecNitro] = 0, PlayerInfo[playerid][pSecWheel] = 0;


		}
	    case 2145:
	    {
		 if(response)
		 {
		  switch(listitem)
		  {
				case 0:
				{
					 new query[256];
					 format(query, sizeof(query), "SELECT  * FROM `sms` WHERE `To` = '%s' ORDER BY `Date` DESC LIMIT 10", GetPhoneNumber(playerid));
					 mysql_tquery(GTADM, query, "GetSMS", "i", playerid);

				}
				case 1:
				{
	                 ShowPlayerDialog(playerid, 2146, DIALOG_STYLE_INPUT, "SMS", "Enter the phone number to send the SMS to!", "Enter", "Exit");
				}
		  }
		 }
	    }
	    case 2146:
	    {
		  if(response)
		  {
			 if(strlen(inputtext) != 9) ShowPlayerDialog(playerid, 2146, DIALOG_STYLE_INPUT, "SMS", ""RED_"Phone number must consist of 9 digits\n"WHITE_"Enter the phone number to send the SMS to!", "Enter", "Exit");
			 SetPVarString(playerid, "SMSNUM", inputtext);
			 ShowPlayerDialog(playerid, 2147, DIALOG_STYLE_INPUT, "SMS", "Type your message below!", "Send", "Back");
		  }
		  else ShowPlayerDialog(playerid, 2145, DIALOG_STYLE_LIST, "SMS", "Inbox\nSend SMS", "Select", "Exit");
	    }
	    case 2147:
	    {
		  if(response)
		  {
			 if(strlen(inputtext) == 0) ShowPlayerDialog(playerid, 2147, DIALOG_STYLE_INPUT, "SMS", "You cant send an empty message\nType your message below!", "Send", "Back");
			 else if(strlen(inputtext) > 256) ShowPlayerDialog(playerid, 2147, DIALOG_STYLE_INPUT, "SMS", "The message is too long\nType your message below!", "Send", "Back");
			 else
			 {
				 new SMSNUMB[20], query[500];
				 GetPVarString(playerid, "SMSNUM", SMSNUMB, 20);
				 format(query, sizeof(query), "INSERT INTO  `sms` (`From` , `To` , `Message` , `Date`)VALUES ('%s %s',  '%s',  '%s', CURDATE( ));", pName[playerid], GetPhoneNumber(playerid), SMSNUMB, inputtext);
				 mysql_query(GTADM, query);
				 SendClientMessage(playerid, -1, "{71A839}» Phone «{66CC00} Your message has been successfully sent!");
				 foreach(new i : Player)
				 {
					if(pPhone[i] > 0 && strcmp(GetPhoneNumber(i), SMSNUMB) == 0)
					{
                        PlayerPlaySound(CallID[playerid], 20804, 0, 0, 0);
			       	    SendClientMessage(i, -1, "{71A839}» Phone «{66CC00} You have received a new text message");
					}
				 }
			 }
		  }
		  else ShowPlayerDialog(playerid, 2146, DIALOG_STYLE_INPUT, "SMS", "Enter the phone number to send the SMS to!", "Enter", "Exit"), DeletePVar(playerid, "SMSNUM");
	    }
	    case 2148:
	    {
		  if(response)
		  {
			 new query[256];
			 format(query, sizeof(query), "SELECT * FROM `sms` WHERE `SmsID` = '%d' LIMIT 1", SMSID[playerid][listitem]);
			 mysql_tquery(GTADM, query, "SeeSMS", "i", playerid);
		  }
		  else ShowPlayerDialog(playerid, 2145, DIALOG_STYLE_LIST, "SMS", "Inbox\nSend SMS", "Select", "Exit");
	    }
	    case 2149:
	    {
               ShowMobileScreen(playerid, 0);
	    }
		case 3443 :
		{
		    if ( listitem > 33 ) return cmd_setsecondcar(playerid);
	    	new model_array[] = { 445, 504, 401, 518, 527, 542, 507, 562, 585, 419, 526, 604, 466, 492, 474, 546, 517, 410, 551, 516, 467, 600, 426, 436, 547, 405, 580, 560, 550, 549, 540, 491, 529, 421 };
			new str[128];
			format(str, sizeof(str), "» Second vehicle « {6AC213} Your second vehicle has been set to %s", vInfo[model_array[listitem]-400][vName]);
			SendClientMessage(playerid, 0xBBF582FF, str);
			PlayerInfo[playerid][pSecV]=model_array[listitem];
			new query[256];
		    format(query, sizeof(query), "UPDATE `users` SET `Car2` = %d, `Car2Nitro`=0, `Car2Wheel`=0, `Car2Color1`=0, `Car2Color2`=0 WHERE `UserID` = '%d'", PlayerInfo[playerid][pSecV], PlayerInfo[playerid][UserID]);
		    mysql_query(GTADM, query);
		    PlayerInfo[playerid][pSecVc1] = 0, PlayerInfo[playerid][pSecVc2] = 0, PlayerInfo[playerid][pSecNitro] = 0, PlayerInfo[playerid][pSecWheel] = 0;


		}
		case 3444 :
		{
		    if ( listitem > 19 ) return cmd_setsecondcar(playerid);
    		new model_array[] = { 602, 429, 496, 402, 541, 415, 589, 587, 565, 494, 502, 503, 411, 559, 603, 475, 506, 451, 558, 477 };
			new str[128];
			format(str, sizeof(str), "» Second vehicle « {6AC213} Your second vehicle has been set to %s", vInfo[model_array[listitem]-400][vName]);
			SendClientMessage(playerid, 0xBBF582FF, str);
			PlayerInfo[playerid][pSecV]=model_array[listitem];
			new query[256];
		    format(query, sizeof(query), "UPDATE `users` SET `Car2` = %d, `Car2Nitro`=0, `Car2Wheel`=0, `Car2Color1`=0, `Car2Color2`=0 WHERE `UserID` = '%d'", PlayerInfo[playerid][pSecV], PlayerInfo[playerid][UserID]);
		    mysql_query(GTADM, query);
		    PlayerInfo[playerid][pSecVc1] = 0, PlayerInfo[playerid][pSecVc2] = 0, PlayerInfo[playerid][pSecNitro] = 0, PlayerInfo[playerid][pSecWheel] = 0;


		}
		case 3445 :
		{
		    if ( listitem > 4 ) return cmd_setsecondcar(playerid);
		    new model_array[] = { 418, 404, 479, 458, 561 };
			new str[128];
			format(str, sizeof(str), "» Second vehicle « {6AC213} Your second vehicle has been set to %s", vInfo[model_array[listitem]-400][vName]);
			SendClientMessage(playerid, 0xBBF582FF, str);
			PlayerInfo[playerid][pSecV]=model_array[listitem];
			new query[256];
		    format(query, sizeof(query), "UPDATE `users` SET `Car2` = %d, `Car2Nitro`=0, `Car2Wheel`=0, `Car2Color1`=0, `Car2Color2`=0 WHERE `UserID` = '%d'", PlayerInfo[playerid][pSecV], PlayerInfo[playerid][UserID]);
		    mysql_query(GTADM, query);
		    PlayerInfo[playerid][pSecVc1] = 0, PlayerInfo[playerid][pSecVc2] = 0, PlayerInfo[playerid][pSecNitro] = 0, PlayerInfo[playerid][pSecWheel] = 0;


		}
		#if defined USE_NEWBANK
		case 5141:
		{
		   if(response)
		   {
			 new str1[50];
			 format(str1, sizeof(str1), "{255F17}Private Account:{60FF52} $%d", PlayerInfo[playerid][pBank]);
			 switch(listitem)
			 {
				case 0:  ShowPlayerDialog(playerid, 5142, DIALOG_STYLE_LIST, str1, "{FF6E42}Deposit\n{81FF42}Withdraw", "Select", "Exit");
				case 1:
				{
				  if(PlayerInfo[playerid][pGang] < 1)
				  {
					 SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You are not in a gang!");
					 ShowBank1(playerid);
				  }
				  else
				  {
				     format(str1, sizeof(str1), "{00E5EE} Gang Account:{60FF52} $%d", GangInfo[PlayerInfo[playerid][pGang]][gBank]);
				     ShowPlayerDialog(playerid, 5143, DIALOG_STYLE_LIST, str1, "{FF6E42}Deposit\n{81FF42}Withdraw", "Select", "Exit");
				  }
				}
			 }
		   }
		}
		case 5142:
		{
		   if(response)
		   {
			  new str[512], str2[512];
			  format(str2, sizeof(str2), "{60FF52}ID\t\t{60FF52}Amount{E8FF52}\n1\t\t$1\n2\t\t$10\n3\t\t$100\n4\t\t$1000\n5\t\t$10000\n6\t\t$100000\n7\t\t$1000000\n8\t\t$10000000\n9\t\t$100000000\n10\t\tDeposit All\n\n{E8FF52}Current Balance:{60FF52} $%d", PlayerInfo[playerid][pBank]);
			  format(str, sizeof(str), "{60FF52}ID\t\t{60FF52}Amount{E8FF52}\n1\t\t$1\n2\t\t$10\n3\t\t$100\n4\t\t$1000\n5\t\t$10000\n6\t\t$100000\n7\t\t$1000000\n8\t\t$10000000\n9\t\t$100000000\n\n{E8FF52}Current Balance:{60FF52} $%d", PlayerInfo[playerid][pBank]);
			  switch(listitem)
			  {
				  case 0: ShowPlayerDialog(playerid, 5144, DIALOG_STYLE_INPUT, "{E3E34D}Private Bank of GTADM", str2, "Deposit", "Back");
				  case 1:  ShowPlayerDialog(playerid, 5145, DIALOG_STYLE_INPUT, "{E3E34D}Private Bank of GTADM", str, "Withdraw", "Back");
			  }
		   }
		   else ShowBank1(playerid);
		}
		case 5144:
		{
		   if(response)
		   {//bank, deposite
			   new row=strval(inputtext);
			   if(row < 1 || row > 10) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Invalid ID entered!");
			   else
			   {
			       new amount;
			       switch(row)
			       {
					   case 1:amount=1;
					   case 2:amount=10;
					   case 3:amount=100;
					   case 4:amount=1000;
					   case 5:amount=10000;
					   case 6:amount=100000;
					   case 7:amount=1000000;
					   case 8:amount=10000000;
					   case 9:amount=100000000;
					   case 10:amount=GetPlayerMoneyEx(playerid);
			       }

			       new oldcash = PlayerInfo[playerid][pBank];

			       if(amount > GetPlayerMoneyEx(playerid)) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You dont have that amount of money!"), PlayerPlaySound(playerid, 1085, 0, 0, 0);
			       else if(oldcash >= 2000000000) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Your bank account is full!"), PlayerPlaySound(playerid, 1085, 0, 0, 0);
			       else if(oldcash + amount > 2000000000)
			       {
			          PlayerInfo[playerid][pBank]=2000000000;
			          new y=2000000000-oldcash;
			          GivePlayerMoneyEX(playerid, -y);
			          new Query[128];
			          format(Query, sizeof(Query), "UPDATE `users` SET `pBank` = %d WHERE `Name` = '%s'", PlayerInfo[playerid][pBank], pEscName[playerid]);
			          mysql_query(GTADM, Query);
			       }
			       else
			       {
			            GivePlayerMoneyEX(playerid, -amount);
			            PlayerInfo[playerid][pBank] = (oldcash + amount);
			            PlayerPlaySound(playerid, 1083, 0, 0, 0);
			            if(amount >= 100000000) GiveMedal(playerid, 29);

			            new Query[128];
			            format(Query, sizeof(Query), "UPDATE `users` SET `pBank` = %d WHERE `Name` = '%s'", PlayerInfo[playerid][pBank], pEscName[playerid]);
			            mysql_query(GTADM, Query);
				   }
			   }
			   new str[512];
			   format(str, sizeof(str), "{60FF52}ID\t\t{60FF52}Amount{E8FF52}\n1\t\t$1\n2\t\t$10\n3\t\t$100\n4\t\t$1000\n5\t\t$10000\n6\t\t$100000\n7\t\t$1000000\n8\t\t$10000000\n9\t\t$100000000\n10\t\tDeposit All\n\n{E8FF52}Current Balance:{60FF52} $%d", PlayerInfo[playerid][pBank]);
		       ShowPlayerDialog(playerid, 5144, DIALOG_STYLE_INPUT, "{E3E34D}Private Bank of GTADM", str, "Deposit", "Back");
		   }
		   else
		   {
			 new str1[50];
			 format(str1, sizeof(str1), "{255F17}Private Account:{60FF52} $%d", PlayerInfo[playerid][pBank]);
		     ShowPlayerDialog(playerid, 5142, DIALOG_STYLE_LIST, str1, "{FF6E42}Deposit\n{81FF42}Withdraw", "Select", "Exit");
		   }
		}

		case 5145:
		{//Bank, Withdraw
		   if(response)
		   {
			   new row=strval(inputtext);
			   if(row < 1 || row > 9) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Invalid ID entered!");
			   else
			   {
			       new amount;
			       switch(row)
			       {
					   case 1:amount=1;
					   case 2:amount=10;
					   case 3:amount=100;
					   case 4:amount=1000;
					   case 5:amount=10000;
					   case 6:amount=100000;
					   case 7:amount=1000000;
					   case 8:amount=10000000;
					   case 9:amount=100000000;
			       }
			       new oldcash = PlayerInfo[playerid][pBank];

		           if(amount > oldcash)
				   {
				     PlayerPlaySound(playerid, 1085, 0, 0, 0);
				   }
				   else if(amount + GetPlayerMoneyEx(playerid) > 100000000)
				   {
						 new y=100000000-GetPlayerMoneyEx(playerid);
						 GivePlayerMoneyEX(playerid, y);
		                 PlayerInfo[playerid][pBank] = oldcash-y;

			             new Query[128];
		                 format(Query, sizeof(Query), "UPDATE `users` SET `pBank` = %d WHERE `Name` = '%s'", PlayerInfo[playerid][pBank], pEscName[playerid]);
		                 mysql_query(GTADM, Query);
			             PlayerPlaySound(playerid, 1084, 0, 0, 0);
				   }
				   else
				   {
		             GivePlayerMoneyEX(playerid, amount);
			         PlayerInfo[playerid][pBank] = (oldcash - amount);
		             PlayerPlaySound(playerid, 1084, 0, 0, 0);

			         new Query[128];
		             format(Query, sizeof(Query), "UPDATE `users` SET `pBank` = %d WHERE `Name` = '%s'", PlayerInfo[playerid][pBank], pEscName[playerid]);
		             mysql_query(GTADM, Query);
				   }

			   }
			   new str[512];
			   format(str, sizeof(str), "{60FF52}ID\t\t{60FF52}Amount{E8FF52}\n1\t\t$1\n2\t\t$10\n3\t\t$100\n4\t\t$1000\n5\t\t$10000\n6\t\t$100000\n7\t\t$1000000\n8\t\t$10000000\n9\t\t$100000000\n\n{E8FF52}Current Balance:{60FF52} $%d", PlayerInfo[playerid][pBank]);
		       ShowPlayerDialog(playerid, 5145, DIALOG_STYLE_INPUT, "{E3E34D}Private Bank of GTADM", str, "Withdraw", "Back");
		   }
		   else
		   {
			 new str1[50];
			 format(str1, sizeof(str1), "{255F17}Private Account:{60FF52} $%d", PlayerInfo[playerid][pBank]);
		     ShowPlayerDialog(playerid, 5142, DIALOG_STYLE_LIST, str1, "{FF6E42}Deposit\n{81FF42}Withdraw", "Select", "Exit");
		   }
		}
		case 5143:
		{
		   if(response)
		   {
			  if(PlayerInfo[playerid][pGang] > 0)
			  {
				  new str[512], str2[512];
				  format(str2, sizeof(str2), "{60FF52}ID\t\t{60FF52}Amount{E8FF52}\n1\t\t$1\n2\t\t$10\n3\t\t$100\n4\t\t$1000\n5\t\t$10000\n6\t\t$100000\n7\t\t$1000000\n8\t\t$10000000\n9\t\t$100000000\n10\t\tDeposit All\n\n{E8FF52}Current Balance:{60FF52} $%d", GangInfo[PlayerInfo[playerid][pGang]][gBank]);
				  format(str, sizeof(str), "{60FF52}ID\t\t{60FF52}Amount{E8FF52}\n1\t\t$1\n2\t\t$10\n3\t\t$100\n4\t\t$1000\n5\t\t$10000\n6\t\t$100000\n7\t\t$1000000\n8\t\t$10000000\n9\t\t$100000000\n\n{E8FF52}Current Balance:{60FF52} $%d", GangInfo[PlayerInfo[playerid][pGang]][gBank]);

				  switch(listitem)
				  {
					  case 0: ShowPlayerDialog(playerid, 5146, DIALOG_STYLE_INPUT, "{E3E34D}Private Bank of GTADM", str2, "Deposit", "Back");
					  case 1:
					  {
						 if(PlayerInfo[playerid][pGangRank] < 3) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be at least rank 3 to withdraw money from gang bank!");
			             else ShowPlayerDialog(playerid, 5147, DIALOG_STYLE_INPUT, "{E3E34D}Private Bank of GTADM", str, "Withdraw", "Back");
					  }
				  }
			  }
		   }
		   else ShowBank1(playerid);
		}

		case 5146:
		{//Gangbank, deposite
		   if(response && PlayerInfo[playerid][pGang] > 0)
		   {
			   new row=strval(inputtext), g=PlayerInfo[playerid][pGang];
			   if(row < 1 || row > 10) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Invalid ID entered!");
			   if(g < 1) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You are not in a gang");
			   else
			   {
			       new amount;
			       switch(row)
			       {
					   case 1:amount=1;
					   case 2:amount=10;
					   case 3:amount=100;
					   case 4:amount=1000;
					   case 5:amount=10000;
					   case 6:amount=100000;
					   case 7:amount=1000000;
					   case 8:amount=10000000;
					   case 9:amount=100000000;
					   case 10:amount=GetPlayerMoneyEx(playerid);
			       }

			       new oldcash = GangInfo[g][gBank];

			       if(amount > GetPlayerMoneyEx(playerid))   SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You dont have that amount of money!"), PlayerPlaySound(playerid, 1085, 0, 0, 0);
			       else if(oldcash >= 2000000000) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Your bank account is full!"), PlayerPlaySound(playerid, 1085, 0, 0, 0);
			       else if(oldcash + amount > 2000000000)
			       {
			          GangInfo[g][gBank]=2000000000;
			          new y=2000000000-oldcash;
			          GivePlayerMoneyEX(playerid, -y);
			          new Query[128];
			          format(Query, sizeof(Query),  "UPDATE `gangs` SET `GangBank` = %d WHERE `GangID` = %d", GangInfo[g][gBank], g);
			          mysql_query(GTADM, Query);
			       }
			       else
			       {
			            GivePlayerMoneyEX(playerid, -amount);
			            GangInfo[g][gBank] = (oldcash + amount);
			            PlayerPlaySound(playerid, 1083, 0, 0, 0);
			            if(amount >= 100000000) GiveMedal(playerid, 29);
			            new Query[128];
			            format(Query, sizeof(Query), "UPDATE `gangs` SET `GangBank` = %d WHERE `GangID` = %d", GangInfo[g][gBank], g);
			            mysql_query(GTADM, Query);

				   }
			   }
			   new str[512];
			   format(str, sizeof(str), "{60FF52}ID\t\t{60FF52}Amount{E8FF52}\n1\t\t$1\n2\t\t$10\n3\t\t$100\n4\t\t$1000\n5\t\t$10000\n6\t\t$100000\n7\t\t$1000000\n8\t\t$10000000\n9\t\t$100000000\n10\t\tDeposit All\n\n{E8FF52}Current Balance:{60FF52} $%d", GangInfo[PlayerInfo[playerid][pGang]][gBank]);
		       ShowPlayerDialog(playerid, 5146, DIALOG_STYLE_INPUT, "{E3E34D}Gang Bank of GTADM", str, "Deposit", "Back");
		   }
		   else
		   {
			  new str1[256];
			  if(PlayerInfo[playerid][pGang] < 1)
			  {
				 SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You are not in a gang!");
				 ShowBank1(playerid);
			  }
			  else
			  {
			     format(str1, sizeof(str1), "{00E5EE} Gang Account:{60FF52} $%d", GangInfo[PlayerInfo[playerid][pGang]][gBank]);
			     ShowPlayerDialog(playerid, 5143, DIALOG_STYLE_LIST, str1, "{FF6E42}Deposit\n{81FF42}Withdraw", "Select", "Exit");
			  }
		   }
		}



		case 5147:
		{//Gangbank, Withdraw
		   if(response && PlayerInfo[playerid][pGang] > 0)
		   {
			   new row=strval(inputtext), g=PlayerInfo[playerid][pGang];
			   if(row < 1 || row > 9) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Invalid ID entered!");
			   if(g < 1) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You are not in a gang");
			   else
			   {
			       new amount;
			       switch(row)
			       {
					   case 1:amount=1;
					   case 2:amount=10;
					   case 3:amount=100;
					   case 4:amount=1000;
					   case 5:amount=10000;
					   case 6:amount=100000;
					   case 7:amount=1000000;
					   case 8:amount=10000000;
					   case 9:amount=100000000;
			       }

			       new oldcash = GangInfo[g][gBank];

		           if(amount > oldcash)
				   {
				     PlayerPlaySound(playerid, 1085, 0, 0, 0);
				   }
				   else if(amount + GetPlayerMoneyEx(playerid) > 100000000)
				   {
						 new y=100000000-GetPlayerMoneyEx(playerid);
						 GivePlayerMoneyEX(playerid, y);
		                 GangInfo[g][gBank] = oldcash-y;

			             new Query[128];
		                 format(Query, sizeof(Query), "UPDATE `gangs` SET `GangBank` = %d WHERE `GangID` = %d", GangInfo[g][gBank], g);
		                 mysql_query(GTADM, Query);

			             PlayerPlaySound(playerid, 1084, 0, 0, 0);
				   }
				   else
				   {
		             GivePlayerMoneyEX(playerid, amount);
			         GangInfo[g][gBank] = (oldcash - amount);
		             PlayerPlaySound(playerid, 1084, 0, 0, 0);
			         new Query[128];
		             format(Query, sizeof(Query), "UPDATE `gangs` SET `GangBank` = %d WHERE `GangID` = %d", GangInfo[g][gBank], g);
		             mysql_query(GTADM, Query);

				   }
			   }
			   new str[512];
			   format(str, sizeof(str), "{60FF52}ID\t\t{60FF52}Amount{E8FF52}\n1\t\t$1\n2\t\t$10\n3\t\t$100\n4\t\t$1000\n5\t\t$10000\n6\t\t$100000\n7\t\t$1000000\n8\t\t$10000000\n9\t\t$100000000\n\n{E8FF52}Current Balance:{60FF52} $%d", GangInfo[PlayerInfo[playerid][pGang]][gBank]);
		       ShowPlayerDialog(playerid, 5147, DIALOG_STYLE_INPUT, "{E3E34D}Bank of GTADM", str, "Withdraw", "Back");
		   }
		   else
		   {
			  new str1[256];
			  if(PlayerInfo[playerid][pGang] < 1)
			  {
				 SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You are not in a gang!");
				 ShowBank1(playerid);
			  }
			  else
			  {
			     format(str1, sizeof(str1), "{00E5EE} Gang Account:{60FF52} $%d", GangInfo[PlayerInfo[playerid][pGang]][gBank]);
			     ShowPlayerDialog(playerid, 5143, DIALOG_STYLE_LIST, str1, "{FF6E42}Deposit\n{81FF42}Withdraw", "Select", "Exit");
			  }
		   }
		}
		#endif

#if defined USE_OLDBANK

		case 8485: //deposit, gang
		{
		       new amount= strval(inputtext);
	           if(response && amount > 0)
		       {
			       new g=PlayerInfo[playerid][pGang];
			       ShowMenuForPlayer(BankMenu2_, playerid), TogglePlayerControllable2(playerid, 0), ShowBankTD(playerid);
			       new oldcash = GangInfo[g][gBank];

			       if(amount > GetPlayerMoneyEx(playerid))   PlayerPlaySound(playerid, 1085, 0, 0, 0);
			       else if(oldcash >= 2000000000) PlayerPlaySound(playerid, 1085, 0, 0, 0);
			       else if(oldcash + amount > 2000000000)
			       {
			          GangInfo[g][gBank]=2000000000;
			          new y=2000000000-oldcash;
			          GivePlayerMoneyEX(playerid, -y);
			          new Query[128];
			          format(Query, sizeof(Query),  "UPDATE `gangs` SET `GangBank` = %d WHERE `GangID` = %d", GangInfo[g][gBank], g);
			          mysql_query(GTADM, Query);
			       }
			       else
			       {
			            GivePlayerMoneyEX(playerid, -amount);
			            GangInfo[g][gBank] = (oldcash + amount);
			            PlayerPlaySound(playerid, 1083, 0, 0, 0);
			            if(amount >= 100000000) GiveMedal(playerid, 29);
			            new Query[128];
			            format(Query, sizeof(Query), "UPDATE `gangs` SET `GangBank` = %d WHERE `GangID` = %d", GangInfo[g][gBank], g);
			            mysql_query(GTADM, Query);

				   }
			       new str[30];
			       format(str, sizeof(str), "Gang Bank: $%d", GangInfo[g][gBank]);
			       PlayerTextDrawSetStringEX(playerid, BankTD[playerid], str);
		       }
		       else
			   {
			      if(response) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Invalid Amount!");
				  ShowMenuForPlayer(BankMenu2_, playerid), TogglePlayerControllable2(playerid, 0), ShowBankTD(playerid);
			   }
		}
		case 8484://withdraw, gang
		{
		       new amount= strval(inputtext);
	           if(response && amount > 0)
		       {
				       new g=PlayerInfo[playerid][pGang];
			           ShowMenuForPlayer(BankMenu3_, playerid), TogglePlayerControllable2(playerid, 0), ShowBankTD(playerid);
				       new oldcash = GangInfo[g][gBank];

			           if(amount > oldcash)
					   {
					     PlayerPlaySound(playerid, 1085, 0, 0, 0);
					   }
					   else if(amount + GetPlayerMoneyEx(playerid) > 100000000)
					   {
							 new y=100000000-GetPlayerMoneyEx(playerid);
							 GivePlayerMoneyEX(playerid, y);
			                 GangInfo[g][gBank] = oldcash-y;

				             new Query[128];
			                 format(Query, sizeof(Query), "UPDATE `gangs` SET `GangBank` = %d WHERE `GangID` = %d", GangInfo[g][gBank], g);
			                 mysql_query(GTADM, Query);

				             PlayerPlaySound(playerid, 1084, 0, 0, 0);
					   }
					   else
					   {
			             GivePlayerMoneyEX(playerid, amount);
				         GangInfo[g][gBank] = (oldcash - amount);
			             PlayerPlaySound(playerid, 1084, 0, 0, 0);
				         new Query[128];
			             format(Query, sizeof(Query), "UPDATE `gangs` SET `GangBank` = %d WHERE `GangID` = %d", GangInfo[g][gBank], g);
			             mysql_query(GTADM, Query);

					   }
				       new str[30];
				       format(str, sizeof(str), "Gang Bank: $%d", GangInfo[g][gBank]);
				       PlayerTextDrawSetStringEX(playerid, BankTD[playerid], str);
			   }
		       else
			   {
			           if(response) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Invalid Amount!");
					   ShowMenuForPlayer(BankMenu3_, playerid), TogglePlayerControllable2(playerid, 0), ShowBankTD(playerid);
	           }
		}
		case 8487://deposit, bank
		{
		       new amount= strval(inputtext);
	           if(response && amount > 0)
		       {
			           ShowMenuForPlayer(BankMenu2, playerid), TogglePlayerControllable2(playerid, 0), ShowBankTD(playerid);
				       new oldcash = PlayerInfo[playerid][pBank];

			           if(amount > GetPlayerMoneyEx(playerid))   PlayerPlaySound(playerid, 1085, 0, 0, 0);
			           else if(oldcash >= 2000000000) PlayerPlaySound(playerid, 1085, 0, 0, 0);
			           else if(oldcash + amount > 2000000000)
			           {
			              PlayerInfo[playerid][pBank]=2000000000;
			              new y=2000000000-oldcash;
			              GivePlayerMoneyEX(playerid, -y);
				          new Query[128];
			              format(Query, sizeof(Query), "UPDATE `users` SET `pBank` = %d WHERE `Name` = '%s'", PlayerInfo[playerid][pBank], pEscName[playerid]);
			              mysql_query(GTADM, Query);
			           }
			           else
			           {
				            GivePlayerMoneyEX(playerid, -amount);
				            PlayerInfo[playerid][pBank] = (oldcash + amount);
				            PlayerPlaySound(playerid, 1083, 0, 0, 0);
				            if(amount >= 100000000) GiveMedal(playerid, 29);

				            new Query[128];
			                format(Query, sizeof(Query), "UPDATE `users` SET `pBank` = %d WHERE `Name` = '%s'", PlayerInfo[playerid][pBank], pEscName[playerid]);
			                mysql_query(GTADM, Query);
					   }
				       new str[30];
				       format(str, sizeof(str), "Bank: $%d", PlayerInfo[playerid][pBank]);
				       PlayerTextDrawSetStringEX(playerid, BankTD[playerid], str);
			   }
		       else
			   {
			           if(response) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Invalid Amount!");
					   ShowMenuForPlayer(BankMenu2, playerid), TogglePlayerControllable2(playerid, 0), ShowBankTD(playerid);
	           }

		}
		case 8486://withdraw, bank
		{
		       new amount= strval(inputtext);
	           if(response && amount > 0)
		       {
			           ShowMenuForPlayer(BankMenu3, playerid), TogglePlayerControllable2(playerid, 0), ShowBankTD(playerid);
				       new oldcash = PlayerInfo[playerid][pBank];

			           if(amount > oldcash)
					   {
					     PlayerPlaySound(playerid, 1085, 0, 0, 0);
					   }
					   else if(amount + GetPlayerMoneyEx(playerid) > 100000000)
					   {
							 new y=100000000-GetPlayerMoneyEx(playerid);
							 GivePlayerMoneyEX(playerid, y);
			                 PlayerInfo[playerid][pBank] = oldcash-y;

				             new Query[128];
			                 format(Query, sizeof(Query), "UPDATE `users` SET `pBank` = %d WHERE `Name` = '%s'", PlayerInfo[playerid][pBank], pEscName[playerid]);
			                 mysql_query(GTADM, Query);
				             PlayerPlaySound(playerid, 1084, 0, 0, 0);
					   }
					   else
					   {
			             GivePlayerMoneyEX(playerid, amount);
				         PlayerInfo[playerid][pBank] = (oldcash - amount);
			             PlayerPlaySound(playerid, 1084, 0, 0, 0);

				         new Query[128];
			             format(Query, sizeof(Query), "UPDATE `users` SET `pBank` = %d WHERE `Name` = '%s'", PlayerInfo[playerid][pBank], pEscName[playerid]);
			             mysql_query(GTADM, Query);
					   }
				       new str[30];
				       format(str, sizeof(str), "Bank: $%d", PlayerInfo[playerid][pBank]);
				       PlayerTextDrawSetStringEX(playerid, BankTD[playerid], str);
			   }
		       else
			   {
			           if(response) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Invalid Amount!");
					   ShowMenuForPlayer(BankMenu3, playerid), TogglePlayerControllable2(playerid, 0), ShowBankTD(playerid);
	           }

		}
#endif
 		case 3446 :
		{
		    if ( listitem > 9 ) return cmd_setsecondcar(playerid);
			new model_array[] = { 472, 473, 493, 595, 484, 430, 453, 452, 446, 454 };
			new str[128];
			format(str, sizeof(str), "» Second vehicle « {6AC213} Your second vehicle has been set to %s", vInfo[model_array[listitem]-400][vName]);
			SendClientMessage(playerid, 0xBBF582FF, str);
			PlayerInfo[playerid][pSecV]=model_array[listitem];
			new query[256];
		    format(query, sizeof(query), "UPDATE `users` SET `Car2` = %d, `Car2Nitro`=0, `Car2Wheel`=0, `Car2Color1`=0, `Car2Color2`=0 WHERE `UserID` = '%d'", PlayerInfo[playerid][pSecV], PlayerInfo[playerid][UserID]);
		    mysql_query(GTADM, query);
		    PlayerInfo[playerid][pSecVc1] = 0, PlayerInfo[playerid][pSecVc2] = 0, PlayerInfo[playerid][pSecNitro] = 0, PlayerInfo[playerid][pSecWheel] = 0;


		}
		case 3447 :
		{
		    if ( listitem > 11 ) return cmd_setsecondcar(playerid);
		    new model_array[] = { 435, 450, 591, 606, 607, 610, 569, 590, 584, 570, 608, 611 };
			new str[128];
			format(str, sizeof(str), "» Second vehicle « {6AC213} Your second vehicle has been set to %s", vInfo[model_array[listitem]-400][vName]);
			SendClientMessage(playerid, 0xBBF582FF, str);
			PlayerInfo[playerid][pSecV]=model_array[listitem];
			new query[256];
		    format(query, sizeof(query), "UPDATE `users` SET `Car2` = %d, `Car2Nitro`=0, `Car2Wheel`=0, `Car2Color1`=0, `Car2Color2`=0 WHERE `UserID` = '%d'", PlayerInfo[playerid][pSecV], PlayerInfo[playerid][UserID]);
		    mysql_query(GTADM, query);
		    PlayerInfo[playerid][pSecVc1] = 0, PlayerInfo[playerid][pSecVc2] = 0, PlayerInfo[playerid][pSecNitro] = 0, PlayerInfo[playerid][pSecWheel] = 0;


		}
		case 5622:
		{
		  if(response)
		  {
			cmd_levelhelp(playerid);
		  }
		}
 		case 5621:
		{
		  if(response)
		  {
			new str[1250];
			switch(listitem)
			{
			  case 0:
			  {
				strcat(str, "{A1F084}Level 9:{A2B09D} Spawn with UZI\n");
				strcat(str, "{A1F084}Level 13:{A2B09D} Spawn with Combat Shotgun\n");
				strcat(str, "{A1F084}Level 19:{A2B09D} Spawn with Desert Eagle\n");
				strcat(str, "{A1F084}Level 23:{A2B09D} Spawn with Sawn Offs\n{A1F084}Level 25:{A2B09D} At this level you can perfom HeadShots with Sniper Rifle!\n");
				strcat(str, "{A1F084}Level 30:{A2B09D} HeadShot - One shot Kill\n{A1F084}Level 50:{A2B09D} Buying weapons using the cmd (/buyweapons)");
			    ShowPlayerDialog(playerid, 5622, DIALOG_STYLE_MSGBOX, "Combat", str, "Back", "Exit");
			  }
			  case 1:
			  {
				strcat(str, "{A1F084}Level 10:{A2B09D} Ability to use Boxing fight style (/FS)\n");
				strcat(str, "{A1F084}Level 15:{A2B09D} You get 1000EXP for each player beaten up (/FS)\n");
				strcat(str, "{A1F084}Level 20:{A2B09D} Ability to use Kung FO fight style (/FS)\n");
				strcat(str, "{A1F084}Level 30:{A2B09D} Ability to use Knee Head fight style (/FS)\n");
				strcat(str, "{A1F084}Level 40:{A2B09D} Ability to use Grab kick fight style (/FS)\n");
				strcat(str, "{A1F084}Level 50:{A2B09D} Ability to use Elbow fight style (/FS)");
				ShowPlayerDialog(playerid, 5622, DIALOG_STYLE_MSGBOX, "Fist", str, "Back", "Exit");
			  }
			  case 2:
			  {
				strcat(str, "{A1F084}Level 10:{A2B09D} Spawn with 10 Armour\n");
				strcat(str, "{A1F084}Level 15:{A2B09D} Ability to use Medkits (/UseMedkit)\n");
				strcat(str, "{A1F084}Level 20:{A2B09D} Spawn with 20 Armour\n");
				strcat(str, "{A1F084}Level 30:{A2B09D} Spawn with 30 Armour\n");
				strcat(str, "{A1F084}Level 40:{A2B09D} Spawn with 40 Armour\n");
				strcat(str, "{A1F084}Level 50:{A2B09D} Spawn with 50 Armour");
				ShowPlayerDialog(playerid, 5622, DIALOG_STYLE_MSGBOX, "Fist", str, "Back", "Exit");
			  }
			  case 3:
			  {
				strcat(str, "{A1F084}Level 10:{A2B09D} Ability to arrest other players (/arrest)\n");
				strcat(str, "{A1F084}Level 20:{A2B09D} Ability to stun other players (/stun)\n");
				strcat(str, "{A1F084}Level 30:{A2B09D} Ability to release jailed players (/release)\n");
				strcat(str, "{A1F084}Level 40:{A2B09D} Ability to arrest players from longer distance");
				ShowPlayerDialog(playerid, 5622, DIALOG_STYLE_MSGBOX, "Fist", str, "Back", "Exit");
			  }
			  case 4:
			  {
				strcat(str, "{A1F084}Level 10:{A2B09D} 50 Percent health healing (/heal)\n");
				strcat(str, "{A1F084}Level 15:{A2B09D} Full health healing\n");
				strcat(str, "{A1F084}Level 20:{A2B09D} Ability to sell medkits (/SellMedkits)\n");
				strcat(str, "{A1F084}Level 30:{A2B09D} You can heal players more often (less waiting time)!\n");
				strcat(str, "{A1F084}Level 50:{A2B09D} Healing with armour!");
				ShowPlayerDialog(playerid, 5622, DIALOG_STYLE_MSGBOX, "Fist", str, "Back", "Exit");
			  }
			  case 5:
			  {
				strcat(str, "{A1F084}Level 15:{A2B09D} Ability to Rob the ammunation! (/Rob)\n");
				strcat(str, "{A1F084}Level 20:{A2B09D} Ability to Rob other players!\n");
				strcat(str, "{A1F084}Level 35:{A2B09D} Ability to Rob the Bank!\n");
				strcat(str, "{A1F084}Level 50:{A2B09D} Ability to Rob properties!");
				ShowPlayerDialog(playerid, 5622, DIALOG_STYLE_MSGBOX, "Fist", str, "Back", "Exit");
			  }
			  case 6:
			  {
				strcat(str, "{A1F084}Level 10:{A2B09D} Ability to rename gang (/Gangname)\n");
				strcat(str, "{A1F084}Level 15:{A2B09D} Auto Armour - your armour will auto refill when u start a gangwar!\n");
				strcat(str, "{A1F084}Level 18:{A2B09D} From this level you will get 1000 EXP per a turf!\n");
				strcat(str, "{A1F084}Level 20:{A2B09D} Ability to use unique gang colors (Gangcolors 205-210)!\n");
				strcat(str, "{A1F084}Level 25:{A2B09D} In this level you will get a certain amount of money after winning a turf!\n");
				strcat(str, "{A1F084}Level 30:{A2B09D} Auto Weapons - You will get Grenades, sawn-off, sniper when a gang war starts!\n");
				strcat(str, "{A1F084}Level 40:{A2B09D} Turfs Payday - You will get 25 Percent of the gang payday!\n");
				strcat(str, "{A1F084}Level 50:{A2B09D} Turfs Payday - You will get 50 Percent of the gang payday!");
				ShowPlayerDialog(playerid, 5622, DIALOG_STYLE_MSGBOX, "Fist", str, "Back", "Exit");
			  }
			  case 7:
			  {
				strcat(str, "{A1F084}Level 10:{A2B09D} Ability to use the command (/VC)\n");
				strcat(str, "{A1F084}Level 20:{A2B09D} Less waiting time between each car you Export!\n");
				strcat(str, "{A1F084}Level 25:{A2B09D} You can get Nitro And Wheels for free (/NOS) (/Wheels)f!\n");
				strcat(str, "{A1F084}Level 30:{A2B09D} You can sell reparing kits (/SellRepairingKits)!\n");
				//strcat(str, "{A1F084}Level 40:{A2B09D} You can use the Tuning Garage (/Tuning)");
				ShowPlayerDialog(playerid, 5622, DIALOG_STYLE_MSGBOX, "Fist", str, "Back", "Exit");
			  }
			}

		  }
		}

		case 3448 :
		{
		    if ( listitem > 23 ) return cmd_setsecondcar(playerid);
		    new model_array[] = { 485, 537, 457, 483, 508, 532, 486, 406, 530, 538, 434, 545, 588, 571, 572, 423, 442, 428, 409, 574, 449, 525, 583, 539 };
			new str[128];
			format(str, sizeof(str), "» Second vehicle « {6AC213} Your second vehicle has been set to %s", vInfo[model_array[listitem]-400][vName]);
			SendClientMessage(playerid, 0xBBF582FF, str);
			PlayerInfo[playerid][pSecV]=model_array[listitem];
			new query[256];
		    format(query, sizeof(query), "UPDATE `users` SET `Car2` = %d, `Car2Nitro`=0, `Car2Wheel`=0, `Car2Color1`=0, `Car2Color2`=0 WHERE `UserID` = '%d'", PlayerInfo[playerid][pSecV], PlayerInfo[playerid][UserID]);
		    mysql_query(GTADM, query);
		    PlayerInfo[playerid][pSecVc1] = 0, PlayerInfo[playerid][pSecVc2] = 0, PlayerInfo[playerid][pSecNitro] = 0, PlayerInfo[playerid][pSecWheel] = 0;


		}
		case 3449:
		{
		    if ( listitem > 5 ) return cmd_setsecondcar(playerid);
	    	new model_array[] = { 441, 465, 501, 564, 594 };
			new str[128];
			format(str, sizeof(str), "» Second vehicle « {6AC213} Your second vehicle has been set to %s", vInfo[model_array[listitem]-400][vName]);
			SendClientMessage(playerid, 0xBBF582FF, str);
			PlayerInfo[playerid][pSecV]=model_array[listitem];
			new query[256];
		    format(query, sizeof(query), "UPDATE `users` SET `Car2` = %d, `Car2Nitro`=0, `Car2Wheel`=0, `Car2Color1`=0, `Car2Color2`=0 WHERE `UserID` = '%d'", PlayerInfo[playerid][pSecV], PlayerInfo[playerid][UserID]);
		    mysql_query(GTADM, query);
		    PlayerInfo[playerid][pSecVc1] = 0, PlayerInfo[playerid][pSecVc2] = 0, PlayerInfo[playerid][pSecNitro] = 0, PlayerInfo[playerid][pSecWheel] = 0;


		}
	    case 1360:
	    {
		 if(response)
		 {
		  ClanTag[playerid]=listitem;
		  SendClientMessage(playerid, -1, "- "GREENBLUE_"You have changed your "LIGHTYELLOW_"Clan tag color!");
		  new Query[128];
	 	  format(Query, sizeof(Query), "UPDATE `users` SET `ClanTag` = %d WHERE `UserID` = '%d'", listitem, PlayerInfo[playerid][UserID]);
		  mysql_query(GTADM, Query);
		 }
	    }
		case 4874:
		{
		 if(response)
		 {
		    pSpeedo[playerid]=listitem;
		    if(pSpeedo[playerid] == 1) pSpeedo[playerid]=255;
			new str[128];
		    format(str, sizeof(str), "UPDATE `users` SET `Speedo` = %d WHERE `UserID` = '%d'", pSpeedo[playerid], PlayerInfo[playerid][UserID]);
		    mysql_query(GTADM, str);
		    if(pSpeedo[playerid] == 255) for(new x=0; x<9; x++) PlayerTextDrawHide(playerid, SpeedO[playerid][x]);
		 }
		}
	    case 4871:
	    {
		  if(response)
		  {
			switch(listitem)
			{
			  case 0:PlayerInfo[playerid][Ramp] = 1;
			  case 1:PlayerInfo[playerid][Ramp] = 2;
			  case 2:PlayerInfo[playerid][Ramp] = 3;
			  case 3:PlayerInfo[playerid][Ramp] = 4;
			  case 4:PlayerInfo[playerid][Ramp] = 5;
			  case 5:
			  {
				PlayerInfo[playerid][Ramp] = 0;
				SendClientMessage(playerid, DARKORANGE, "{00904C} » Account settings «{00D9AD} Your ramps has been disabled");
				new Query[128];
				format(Query, sizeof(Query), "UPDATE `users` SET `Ramp` = 0 WHERE `Name` = '%s'", pEscName[playerid]);
				mysql_query(GTADM, Query);

			  }
			  case 6:
			  {
				if(IsAdmin(playerid, 1)) PlayerInfo[playerid][Ramp] = 6;
			  }
			}
			if(listitem >= 0 && listitem <= 4 || listitem == 6)
			{

			 new str[128];
			 format(str, sizeof(str), "{00904C} » Account settings «{00D9AD} Your Ramp Type has been set to %d", PlayerInfo[playerid][Ramp]);
			 SendClientMessage(playerid, DARKORANGE, str);
			 SendClientMessage(playerid, GRAY, "To spawn the ramp press the fire key while driving");
			 new Query[168];
			 format(Query, sizeof(Query), "UPDATE `users` SET `Ramp` = %d WHERE `Name` = '%s'", PlayerInfo[playerid][Ramp], pEscName[playerid]);
			 mysql_query(GTADM, Query);
			}
		  }
	    }
		case 8451:
		{
		  if(response)
		  {
		   if(dOffered[playerid] >=0)
		   {
			if(IsPlayerInRangeOfPlayer(playerid, dOffered[playerid], 5.00))
			{
				if(GetPlayerMoneyEx(playerid) >= dOfferMoney[dOffered[playerid]])
				{
					ApplyAnimation(playerid, "DEALER", "DRUGS_BUY", 1.0, 1, 0, 0, 0, 3000, 1);
					PlayerInfo[playerid][pDrugs]++;
					PlayerInfo[dOffers[playerid]][pDrugs]--;
					new str[128];
					GivePlayerMoneyEX(playerid, dOfferMoney[dOffered[playerid]]*-1);
					GivePlayerMoneyEX(dOffered[playerid], dOfferMoney[dOffered[playerid]]);
					ClearAnimations(dOffered[playerid]);
				    SendInfoText(dOffered[playerid], 4000, "~r~You have sold one drug spliff~w~!");
				    format(str, sizeof(str), "~w~You have bought one ~g~drug spliff~w~!~n~~w~Total Drugs: ~p~%d", PlayerInfo[playerid][pDrugs]);
				    SendInfoText(playerid, 4000, str);
		            if(pLevel[dOffered[playerid]][drugdealing] < 15) UpdateSkills(dOffered[playerid], drugdealing, 200);
					else UpdateSkills(dOffered[playerid], drugdealing, 500);
					dOffered[playerid]=-1;
					dOffers[playerid]=-1;
					dOfferMoney[playerid]=-1;
				}
			}
			else SendClientMessage(playerid, RED2, ""RED_"» Error « {BABABA}Player is not in range");
		   }

		  }
		  else
		  {
	        SendClientMessage(dOffers[playerid], RED2, ""RED_"» Error « {BABABA}Player has rejected your offer");
		  }
		}
		case 9786:
		{
			new Float:x, Float:y, Float:z;
			GetPlayerPos(dOffers[playerid], x, y, z);
			if(response)
			{
		        if(IsPlayerInRangeOfPoint(playerid, 10.00, x, y, z))
		        {
			       UpdateSkills(playerid, medicine, 500);
			       UpdateSkills(dOffers[playerid], hitpoint, 250);
			       pMedKets[playerid]++;
			       GivePlayerMoneyEX(playerid, -10000);
			       GivePlayerMoneyEX(dOffers[playerid], 10000);
		        }
		        else SendClientMessage(playerid, RED2, ""RED_"» Error « {BABABA}Player is not in range");
			}
			else
			{
		        SendClientMessage(dOffers[playerid], RED2, ""RED_"» Error « {BABABA}Player has rejected your offer");
			}
		}
		case 9787:
		{
			new Float:x, Float:y, Float:z;
			GetPlayerPos(dOffers[playerid], x, y, z);
			if(response)
			{
		        if(IsPlayerInRangeOfPoint(playerid, 10.00, x, y, z))
		        {
			       UpdateSkills(playerid, driving, 800);
			       UpdateSkills(dOffers[playerid], driving, 500);
			       pRepairKets[playerid]++;
			       GivePlayerMoneyEX(playerid, -10000);
			       GivePlayerMoneyEX(dOffers[playerid], 10000);
		        }
		        else SendClientMessage(playerid, RED2, ""RED_"» Error « {BABABA}Player is not in range");
			}
			else
			{
		        SendClientMessage(dOffers[playerid], RED2, ""RED_"» Error « {BABABA}Player has rejected your offer");
			}
		}
 		case 7512:
		{
		 if(response)
		 {
		  switch(listitem)
		  {
			  case 0:
			  {
				   SetPlayerVirtualWorldEX(playerid, 9000000+playerid);
//				   SetPlayerAttachedObject(playerid, 1, Glasses[0], 2, 0.098771, 0.030772, -0.000335, 85.342658, 84.122947, 4.236968, 1.000000);
				   for(new x=0; x<sizeof(ShopTD); x++) TextDrawShowForPlayer(playerid, ShopTD[x]);
				   SelectTextDraw(playerid, 0x22FF99FF);
				   SetPVarInt(playerid, "Clothes_Selection", 1);
			   	   SetPVarInt(playerid, "Buying_Clothes", true);
				   TogglePlayerControllable2(playerid, 0);
				   SetPlayerPos(playerid, 217.1866, -98.5885, 1005.257);
				   SetPlayerFacingAngle(playerid, 80.2669);

				   SetPlayerCameraPos(playerid, 207.5845, -99.9918, 1005.5294);
				   SetPlayerCameraLookAt(playerid, 207.4314, -99.0050, 1004.9586);
				   SetPVarInt(playerid, "Gobj", CreatePlayerObject(playerid, Glasses[0], 207.54, -99.61, 1005.36, 0.00, 0.00, -76.00, 100.0));
			  }
			  case 1:
			  {
				 if(strlen(PlayerClothes[playerid][GlassString]) >20)
				 {
                  PlayerClothes[playerid][Glass] = 0;
				  RemovePlayerAttachedObject(playerid, 1);
				  GivePlayerMoneyEX(playerid, 50000);
			  	  new str[512];
	  		      format(str, sizeof(str), "UPDATE `users` SET `GlassesString` = 'No' WHERE `UserID` = '%d'", PlayerInfo[playerid][UserID]);
    		  	  mysql_query(GTADM, str);
			      format(PlayerClothes[playerid][GlassString], 200, "No");

				  PlayerClothes[playerid][Glass]=0;
			     }
				 else SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You have not bought any Glasses to sell.");
			  }
		  }
		 }
		}
		case 7513:
		{
		 if(response)
		 {
		  switch(listitem)
		  {
			  case 0:
			  {
				   SetPlayerVirtualWorldEX(playerid, 9000000+playerid);
				   for(new x=0; x<sizeof(ShopTD); x++) TextDrawShowForPlayer(playerid, ShopTD[x]);
				   SelectTextDraw(playerid, 0x22FF99FF);
				   SetPVarInt(playerid, "Clothes_Selection", 1);
			   	   SetPVarInt(playerid, "Buying_Clothes", 2);
				   TogglePlayerControllable2(playerid, 0);
				   SetPlayerPos(playerid, 217.1866, -98.5885, 1005.257);
				   SetPlayerFacingAngle(playerid, 80.2669);
				   SetPlayerCameraPos(playerid, 206.9729, -100.6917, 1006.0209);
				   SetPlayerCameraLookAt(playerid, 207.3904, -99.7846, 1005.5259);
				   SetPVarInt(playerid, "Gobj", CreatePlayerObject(playerid, Hats[0], 207.54, -99.61, 1005.36, 100.00, 00.00, 0.00, 100.0));
			  }
			  case 1:
			  {
				 if(strlen(PlayerClothes[playerid][HatString]) > 20)
				 {
				  RemovePlayerAttachedObject(playerid, 2);
				  GivePlayerMoneyEX(playerid, 60000);
			  	  new str[512];
	  		      format(str, sizeof(str), "UPDATE `users` SET `CapsString` = 'No' WHERE `UserID` = '%d'", PlayerInfo[playerid][UserID]);
    		  	  mysql_query(GTADM, str);
				  format(PlayerClothes[playerid][HatString], 200, "No");

				  PlayerClothes[playerid][Caps]=0;
				 }
				 else SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You have not bought any Caps to sell.");
			  }
		  }
		 }
		}

		case 7555:
		{
		   if(response)
		   {
			 if(GetPlayerMoneyEx(playerid) >= 100000)
			 {
				if(strlen(PlayerClothes[playerid][GlassString]) < 20)
				{
                 if(PlayerInfo[playerid][pHouse] > 0)
                 {
				  new am=GetPVarInt(playerid, "Clothes_Selection")-1;
				  SetCameraBehindPlayer(playerid);
				  for(new x=0; x<sizeof(ShopTD); x++) TextDrawHideForPlayer(playerid, ShopTD[x]);
				  CancelSelectTextDraw(playerid);
			      DestroyPlayerObject(playerid, GetPVarInt(playerid, "Gobj"));
				  DeletePVar(playerid, "Gobj");
			  	  SetPlayerAttachedObject(playerid, 1, Glasses[am], 2, 0.098771, 0.030772, -0.000335, 85.342658, 84.122947, 4.236968, 1.000000, 1.000, 1.000);
				  TogglePlayerControllable2(playerid, 1);
				  SetPlayerPos(playerid, 217.5214, -96.8268, 1005.2578);
				  SetPlayerFacingAngle(playerid, 178.0513);
				  SetPlayerCameraPos(playerid, 217.4618, -98.8051, 1006.8578);
				  SetPlayerCameraLookAt(playerid, 217.5214, -96.8268, 1005.8578);
				  EditAttachedObject(playerid, 1);
				  GivePlayerMoneyEX(playerid, -100000, 1);
				  PlayerClothes[playerid][Glass]=Glasses[am];
				  format(PlayerClothes[playerid][GlassString], 200, "%d, %f, %f, %f, %f, %f, %f, %f, %f, %f", Glasses[am], 0.098771, 0.030772, -0.000335, 85.342658, 84.122947, 4.236968, 1.0, 1.0, 1.0);

			  	  new str[512];
	  		      format(str, sizeof(str), "UPDATE `users` SET `GlassesString` = '%s' WHERE `UserID` = '%d'", PlayerClothes[playerid][GlassString], PlayerInfo[playerid][UserID]);
    		  	  mysql_query(GTADM, str);
				  GiveMedal(playerid, 27);
                 }
                 else SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You must own a house to buy this item");
				}
				else SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You must sell your own glasses before buying new ones");
			 }
			 else SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You dont have enough money to buy this item");
		   }
		}
		#if defined USE_LOTTO
		case 8718:
		{
		  if(response)
		  {
			new d=strval(inputtext);
		    if(d < 1 || d > 100) return ShowPlayerDialog(playerid, 8718, DIALOG_STYLE_INPUT, "Select Your Number", "Invalid Number Entered\nChoose a number between 1 and 100", "Enter", "Exit");
		    if(Iter_Contains(lotonumbers, d)) return ShowPlayerDialog(playerid, 8718, DIALOG_STYLE_INPUT, "Select Your Number", "Invalid Number Entered\nChoose a number between 1 and 100", "Enter", "Exit");
		    if(GetPlayerMoneyEx(playerid) < 10000) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You need $10000 to join the lotto.");
			GivePlayerMoneyEX(playerid, -10000, 1);
			Iter_Add(lotonumbers, d);
			Iter_Add(lotoplayers, playerid);
			LotoNumber[playerid]=d;
            new str[256];
	        format(str, sizeof(str), "{E01BE0}» Lotto « {A81BE0}%s has choosen the number %d! {E01BE0}(/Lotto)", pName[playerid], d);
	        SendClientMessageToAll(-1, str);
		  }
		}
		#endif
		case 14568:
		{
		   if(response)
		   {
			switch(listitem)
			{
			  case 0: cmd_dive1(playerid);
			  case 1: cmd_dive2(playerid);//SetPVarInt(playerid, "GoBack", true), cmd_stunt(playerid);
			}
		   }
		}
		case 14569:
		{
		   if(response)
		   {
			switch(listitem)
			{
			  case 0: cmd_trucking1(playerid);
			  case 1: cmd_trucking2(playerid);//SetPVarInt(playerid, "GoBack", true), cmd_stunt(playerid);
			}
		   }
		}

		case 14567:
		{
		   //if(!response && PlayerInfo[playerid][pScore] < 300 && GetPlayerVirtualWorld(playerid) == 0) cmd_info(playerid);
		   if(response)
		   {
			switch(listitem)
			{
			  case 0: ShowDMDialog(playerid);//SetPVarInt(playerid, "GoBack", true), ShowDMDialog(playerid);
			  case 1: cmd_tdm(playerid, "");
			  case 2: cmd_stunt(playerid);//SetPVarInt(playerid, "GoBack", true), cmd_stunt(playerid);
			  case 3:
			  {
                #if defined USEDRIFT
				SetPVarInt(playerid, "GoBack", true), cmd_drifts(playerid);
				#endif
			  }
 		      case 4: cmd_race(playerid);
			  case 5: cmd_cs(playerid);
			  case 6: cmd_fallout(playerid);
			  case 7: cmd_lms(playerid);
			  case 8: cmd_derby(playerid);
			  case 9: cmd_duel(playerid, "1");
			  case 10: cmd_football(playerid);
			  case 11: cmd_gungame(playerid);
			  case 12: cmd_dive(playerid);
			  case 13: cmd_canon(playerid);
			  case 14: cmd_parkour(playerid);
			  case 15: cmd_ctf(playerid);
			  case 16: cmd_sumo(playerid);
			  /*case 17:
			  {
			  #if defined USE_POOL
				  cmd_pool(playerid);
			  #endif
			  }*/
			  //case 17: cmd_sr(playerid);
			  case 17: SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}/tictac <playerid>");
			  case 18: cmd_mg(playerid);
			  case 19: cmd_hay(playerid);
			  case 20: cmd_mission(playerid);
			  case 21: cmd_outrun(playerid, "");
			  case 22: cmd_trucking(playerid);
			  //case 23: cmd_tiles(playerid);
			}
		   }
		}
			 /* case 4: cmd_race(playerid);
			  case 5: cmd_cs(playerid);
			  case 6: cmd_fallout(playerid);
			  case 7: cmd_lms(playerid);
			  case 8: cmd_derby(playerid);
			  case 9: cmd_duel(playerid, "1");
			  case 10: cmd_football(playerid);
			  case 11: cmd_gungame(playerid);
			  case 12: cmd_dive(playerid);
			  case 13: cmd_canon(playerid);
			  case 14: cmd_parkour(playerid);
			  case 15: cmd_ctf(playerid);
			  case 16: cmd_sumo(playerid);
			  case 17: SendWarning(playerid, "{BABABA}/tictac <playerid>");
			  case 18: cmd_mg(playerid);
			  case 19: cmd_hay(playerid);
			  case 20: cmd_mission(playerid);
			  case 21: cmd_outrun(playerid, "");
			  case 22: cmd_trucking(playerid);
			}
		   }
		}*/
		case 9326:
		{
		  if(!response) return ShowPlayerDialog(playerid, -1, DIALOG_STYLE_INPUT, "", "", "", "");
		  {
			if(response)
			{
			  switch(listitem)
			  {
				case 0: cmd_topplayers(playerid);
				case 1: cmd_topgangs2(playerid);
				case 2: cmd_topminigamers(playerid);
				case 3: cmd_topworkers(playerid);
				case 4: cmd_topaddicted(playerid);
				case 5: cmd_topkillers(playerid);
				case 6: cmd_topweakest(playerid);
				case 7: cmd_topgangsters(playerid);
				case 8: cmd_topgwweakest(playerid);
				case 9: cmd_topdrinkers(playerid);
				case 10: cmd_topspree(playerid);
				case 11: cmd_topaccidents(playerid);
				case 12: cmd_topevents(playerid);
				case 13: cmd_toppp(playerid);
				case 14: cmd_topreaction(playerid);
				case 15: cmd_topexporters(playerid);
				case 16: cmd_topheadshots(playerid);
				case 17: cmd_richest(playerid);
				case 18: cmd_topbeatenup(playerid);
			  }
			}
          }
		}
		case 9325:
		{
		  if(!response) return cmd_toplist(playerid);
          {
		    if(response)
			{
			  switch(listitem)
			  {
				case 0: cmd_toplms(playerid);
				case 1: cmd_topracers(playerid);
				case 2: cmd_topderbies(playerid);
				case 3: cmd_topsumo(playerid);
				case 4: cmd_topfallout(playerid);
				case 5: cmd_toptictac(playerid);
				case 6: cmd_topctf(playerid);
				case 7: cmd_toppool(playerid);
				case 8: cmd_topoutrun(playerid);
				case 9: cmd_topcs(playerid);
				case 10: cmd_topmg(playerid);
				case 11: cmd_topfarmers(playerid);
				case 12: cmd_topfb(playerid);
				case 13: cmd_topgg(playerid);
				case 14: cmd_toprunners(playerid);
				case 15: cmd_topduels(playerid);
				case 16: cmd_topdrifters(playerid);
				case 17: cmd_topmissions(playerid);
				case 18: cmd_topdives(playerid);
				case 19: cmd_topracerecords(playerid);
				//case 20: cmd_topdd(playerid);
				//case 21: cmd_topco(playerid);
			//	case 22: cmd_topfc(playerid);
			  }
			}
		  }
		}
		case 9324:
		{
		  if(!response) return cmd_toplist(playerid);
          {
		    if(response)
			{
			  switch(listitem)
			  {
		        case 0: cmd_topdealers(playerid);
				case 1: cmd_topmedics(playerid);
				case 2: cmd_topcops(playerid);
				case 3: cmd_toptruckers(playerid);
				case 4: cmd_topwhores(playerid);
				case 5: cmd_topmechanics(playerid);
				case 6: cmd_tophitmans(playerid);
			  }
			}
		  }
		}
		case 9327..9343:
		{
		  if(response) return cmd_toplist(playerid);
		}
		case 10357..10364:
		{
		  if(response) return cmd_topworkers(playerid);
		}
		case 10450..10459:
		{
		  if(response) return cmd_acmds(playerid);
		}
		case 10365..10388:
		{
		  if(response) return cmd_topminigamers(playerid);
		}
		case 225:
		{
			if(response)
			{
			  switch(listitem)
			  {
				case 0:
				{
				   if(DisableAutoShoot == 1) DisableAutoShoot=0;
				   else DisableAutoShoot=1;
			       new str[256];
			  	   format(str, sizeof(str), "UPDATE `serversetting` SET `DisableAutoBallShooting` = %d", DisableAutoShoot);
				   mysql_query(GTADM, str);
				   ShowFootballDialog(playerid);
				}
				case 1:
				{
			      ShowPlayerDialog(playerid, 228, DIALOG_STYLE_INPUT, "Team 1 Name", "Enter The name of Team 1", "Enter", "Exit");
				}
				case 2:
				{
			      ShowPlayerDialog(playerid, 229, DIALOG_STYLE_INPUT, "Team 2 Name", "Enter The name of Team 2", "Enter", "Exit");
				}
				case 3:
				{
					if(FootballStarted == 1)
					{
						new str[128];
					    AllowPlaying=0;
					    format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}Admin %s has ended the Football match", gAname(playerid));
						SendClientMessageToAll(LIGHTBLUE, str);
						EndFootBall();

					}
					else SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}The football match has not been started");
				}
				case 4:
				{
					if(IsValidDynamicObject(football)) DestroyDynamicObject(football);
			        football = CreateDynamicObject(1946, 1347.5692, 2150.1047, 10.3000, 0.0000, 0.0000, 0.0000, 777);
			        SetDynamicObjectMaterial(football, 0, 7913, "vgnbballsign2", "eris_4", 0);
				}
			    case 5:
			    {
			        ShowPlayerDialog(playerid, 239, DIALOG_STYLE_LIST, "FootBall Panel", "\nWaka Waka - Shakira\nMondial Song\nHalla Madrid\nReal Madrid - Campeones\nBarcelona Song\nNosa Nosa -)\nBeatles- I'm a Loser\nCrazy Frog - We Are The Champions (Ding a Dang Dong)\nFirework", "Select", "Exit");
			    }
			    case 6:
			    {
					CreateFireWork(1312.0427, 2104.7026, 10.0000, 0, 20.0);
					CreateFireWork(1322.3083, 2104.4873, 10.0000, 1, 21.0);
					CreateFireWork(1330.8383, 2104.3083, 10.0000, 2, 19.0);
					CreateFireWork(1338.1215, 2104.1555, 10.0000, 3, 20.0);
					CreateFireWork(1354.2445, 2103.4639, 10.0000, 4, 22.0);
					CreateFireWork(1372.0115, 2103.5940, 10.0000, 5, 18.0);
					CreateFireWork(1391.8708, 2104.4524, 10.0000, 5, 20.0);

					CreateFireWork(1309.0511, 2183.9521, 11.0688, 0, 15.0);
					CreateFireWork(1322.1454, 2184.2363, 11.0688, 1, 16.0);
					CreateFireWork(1340.9464, 2185.2776, 11.0688, 2, 17.0);
					CreateFireWork(1360.1575, 2184.5615, 11.0688, 3, 18.0);
					CreateFireWork(1376.0549, 2183.9697, 11.0688, 4, 23.0);
					CreateFireWork(1386.9771, 2183.5642, 11.0688, 1, 22.0);
					CreateFireWork(1302.1725, 2173.9912, 11.0688, 2, 21.0);
					CreateFireWork(1302.9054, 2158.6941, 11.0688, 3, 20.0);
					CreateFireWork(1302.2330, 2139.9653, 11.0688, 5, 18.0);
					CreateFireWork(1301.7145, 2125.5408, 11.0688, 4, 19.0);


					SetTimer("MoreFWorks", 5000, false);
					SetTimer("MoreFWorks", 10000, false);
			    }
			  }
			}
		}
		case 228:
		{
			 if(response && strlen(inputtext) > 0)
			 {
				 format(Team1Name, sizeof(Team1Name), "%s", inputtext);
				 new str[256];
				 format(str, sizeof(str), "UPDATE `serversetting` SET `Team1Name` = '%s'", Team1Name);
			     mysql_query(GTADM, str);
			 }
			 ShowFootballDialog(playerid);

		}
		case 229:
		{
			 if(response && strlen(inputtext) > 0)
			 {
				 format(Team2Name, sizeof(Team2Name), "%s", inputtext);
				 new str[256];
				 format(str, sizeof(str), "UPDATE `serversetting` SET `Team2Name` = '%s'", Team2Name);
			     mysql_query(GTADM, str);
			 }
			 ShowFootballDialog(playerid);

		}
		case 239:
		{
			 switch(listitem)
			 {
				 case 0:foreach (new i : Player) if(GetPlayerVirtualWorld(i) == 777) PlayAudioStreamForPlayer(i, "http://dl.dropbox.com/u/52869044/Waka%20Waka%20%28This%20Time%20for%20Africa%29%20%28The%20Official%202010%20FIFA%20....mp3");
				 case 1:foreach (new i : Player) if(GetPlayerVirtualWorld(i) == 777) PlayAudioStreamForPlayer(i, "http://dl.dropbox.com/u/52869044/Mondial%20Song%20%21%21%21%21%21%21%21%21%21%21%21%21%21%21%21%21%21%21%21%21%20New%21%21.mp3");
				 case 2:foreach (new i : Player) if(GetPlayerVirtualWorld(i) == 777) PlayAudioStreamForPlayer(i, "http://dl.dropbox.com/u/52869044/Halla%20Madrid%20..%20By%20-%20Maroine%20Belb.wmv.mp3");
				 case 3:foreach (new i : Player) if(GetPlayerVirtualWorld(i) == 777) PlayAudioStreamForPlayer(i, "http://dl.dropbox.com/u/52869044/Real%20Madrid%20%7BSong%7D%20-%20Campeones.mp3");
				 case 4:foreach (new i : Player) if(GetPlayerVirtualWorld(i) == 777) PlayAudioStreamForPlayer(i, "http://dl.dropbox.com/u/52869044/Barcelona%20Song%20-%20Barcelona%20FC%20Anthem.mp3");
				 case 5:foreach (new i : Player) if(GetPlayerVirtualWorld(i) == 777) PlayAudioStreamForPlayer(i, "http://dl.dropbox.com/u/52869044/Nosa%20Nosa%20-%29.mp3");
				 case 6:foreach (new i : Player) if(GetPlayerVirtualWorld(i) == 777) PlayAudioStreamForPlayer(i, "http://dl.dropbox.com/u/52869044/Beatles-%20I%27m%20a%20Loser.mp3");
				 case 7:foreach (new i : Player) if(GetPlayerVirtualWorld(i) == 777) PlayAudioStreamForPlayer(i, "http://dl.dropbox.com/u/52869044/Crazy%20Frog%20-%20We%20Are%20The%20Champions%20%28Ding%20a%20Dang%20Dong%29.mp3");
				 case 8:foreach (new i : Player) if(GetPlayerVirtualWorld(i) == 777) PlayAudioStreamForPlayer(i, "http://dl.dropbox.com/u/52869044/Firework%20%E2%98%85%202012%20HD.mp3");
			 }
		}
		case 12815://secret
		{
		   if(response)
		   {
				switch(listitem)
				{
				   case 0:
				   {
					DeletePVar(playerid, "GangChatting");
					DeletePVar(playerid, "VehicleChatting");
					DeletePVar(playerid, "RconChatting");
					DeletePVar(playerid, "AdminChatting");
					DeletePVar(playerid, "Level5+Chatting");
					DeletePVar(playerid, "PMChatting");
					DeletePVar(playerid, "DoDChatting");
					DeletePVar(playerid, "SecretChatting");
					PMChattingID[playerid]=-1;
				   }
				   case 1:
				   {
					  if(PlayerInfo[playerid][pGang] < 1) SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You are not in a gang!");
					  else
					  {
						DeletePVar(playerid, "VehicleChatting");
						DeletePVar(playerid, "AdminChatting");
						DeletePVar(playerid, "RconChatting");
						DeletePVar(playerid, "Level5+Chatting");
						DeletePVar(playerid, "PMChatting");
						DeletePVar(playerid, "DoDChatting");
						DeletePVar(playerid, "SecretChatting");
					    SetPVarInt(playerid, "GangChatting", true);
					  }
				   }
				   case 2:
				   {
	             	ShowPlayerDialog(playerid, 8914, DIALOG_STYLE_INPUT, "Chat", "Enter player ID to PM", "Ok", "Exit");
				   }
				   case 3:
				   {
					  if(!IsPlayerInAnyVehicle(playerid)) SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You are not in a vehicle!");
					  else
					  {
						DeletePVar(playerid, "GangChatting");
						DeletePVar(playerid, "AdminChatting");
						DeletePVar(playerid, "RconChatting");
						DeletePVar(playerid, "Level5+Chatting");
						DeletePVar(playerid, "PMChatting");
						DeletePVar(playerid, "DoDChatting");
						DeletePVar(playerid, "SecretChatting");
					    SetPVarInt(playerid, "VehicleChatting", true);
					  }
				   }
   		           case 4:
				   {
					  if(!IsDoDMember(playerid)) SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You are not a DoD clan member!");
					  else
					  {
						DeletePVar(playerid, "GangChatting");
						DeletePVar(playerid, "VehicleChatting");
						DeletePVar(playerid, "AdminChatting");
						DeletePVar(playerid, "PMChatting");
						DeletePVar(playerid, "RconChatting");
						DeletePVar(playerid, "Level5+Chatting");
						DeletePVar(playerid, "SecretChatting");
					    SetPVarInt(playerid, "DoDChatting", true);

					  }
				   }
				   case 5:
				   {
					  if(!IsAdmin(playerid, 1)) SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You are not an Admin!");
					  else
					  {
						DeletePVar(playerid, "GangChatting");
						DeletePVar(playerid, "VehicleChatting");
						DeletePVar(playerid, "RconChatting");
						DeletePVar(playerid, "PMChatting");
						DeletePVar(playerid, "DoDChatting");
						DeletePVar(playerid, "Level5+Chatting");
						DeletePVar(playerid, "SecretChatting");
					    SetPVarInt(playerid, "AdminChatting", true);

					  }
				   }
				   case 6:
				   {
					  if(!IsAdmin(playerid, 5) || PlayerInfo[playerid][UserID] == 153569) SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You are not Level 5+!");
					  else
					  {
						DeletePVar(playerid, "GangChatting");
						DeletePVar(playerid, "VehicleChatting");
						DeletePVar(playerid, "AdminChatting");
						DeletePVar(playerid, "PMChatting");
						DeletePVar(playerid, "RconChatting");
						DeletePVar(playerid, "DoDChatting");
						DeletePVar(playerid, "SecretChatting");
					    SetPVarInt(playerid, "Level5+Chatting", true);

					  }
				   }
				   case 7:
				   {
					  if(!IsAdmin(playerid, 10)) SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You are not an RCON-Admin!");
					  else
					  {
						DeletePVar(playerid, "GangChatting");
						DeletePVar(playerid, "VehicleChatting");
						DeletePVar(playerid, "AdminChatting");
						DeletePVar(playerid, "PMChatting");
						DeletePVar(playerid, "DoDChatting");
						DeletePVar(playerid, "Level5+Chatting");
						DeletePVar(playerid, "SecretChatting");
					    SetPVarInt(playerid, "RconChatting", true);
					 }
				   }
   	               case 8:
				   {
					  if(PlayerInfo[playerid][UserID] != 153569 && PlayerInfo[playerid][UserID] != 12879) SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You are not allowed to use this chat.");
					  else
					  {
						DeletePVar(playerid, "GangChatting");
						DeletePVar(playerid, "VehicleChatting");
						DeletePVar(playerid, "AdminChatting");
						DeletePVar(playerid, "PMChatting");
						DeletePVar(playerid, "DoDChatting");
						DeletePVar(playerid, "Level5+Chatting");
						DeletePVar(playerid, "RconChatting");
					    SetPVarInt(playerid, "SecretChatting", true);
					 }
				   }
				}
		   }
		}
		case 12816://admin == 5 || 6 / not dod
		{
		   if(response)
		   {
				switch(listitem)
				{
				   case 0:
				   {
					DeletePVar(playerid, "GangChatting");
					DeletePVar(playerid, "VehicleChatting");
					DeletePVar(playerid, "RconChatting");
					DeletePVar(playerid, "AdminChatting");
					DeletePVar(playerid, "Level5+Chatting");
					DeletePVar(playerid, "PMChatting");
					PMChattingID[playerid]=-1;
				   }
				   case 1:
				   {
					  if(PlayerInfo[playerid][pGang] < 1) SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You are not in a gang!");
					  else
					  {
						DeletePVar(playerid, "VehicleChatting");
						DeletePVar(playerid, "AdminChatting");
						DeletePVar(playerid, "RconChatting");
						DeletePVar(playerid, "Level5+Chatting");
						DeletePVar(playerid, "PMChatting");
					    SetPVarInt(playerid, "GangChatting", true);
					  }
				   }
				   case 2:
				   {
	             	ShowPlayerDialog(playerid, 8914, DIALOG_STYLE_INPUT, "Chat", "Enter player ID to PM", "Ok", "Exit");
				   }
				   case 3:
				   {
					  if(!IsPlayerInAnyVehicle(playerid)) SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You are not in a vehicle!");
					  else
					  {
						DeletePVar(playerid, "GangChatting");
						DeletePVar(playerid, "AdminChatting");
						DeletePVar(playerid, "RconChatting");
						DeletePVar(playerid, "Level5+Chatting");
						DeletePVar(playerid, "PMChatting");
					    SetPVarInt(playerid, "VehicleChatting", true);
					  }
				   }
				   case 4:
				   {
					  if(!IsAdmin(playerid, 1)) SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You are not an Admin!");
					  else
					  {
						DeletePVar(playerid, "GangChatting");
						DeletePVar(playerid, "VehicleChatting");
						DeletePVar(playerid, "RconChatting");
						DeletePVar(playerid, "PMChatting");
						DeletePVar(playerid, "Level5+Chatting");
					    SetPVarInt(playerid, "AdminChatting", true);

					  }
				   }
				   case 5:
				   {
					  if(!IsAdmin(playerid, 5) || PlayerInfo[playerid][UserID] == 153569) SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You are not Level 5+!");
					  else
					  {
						DeletePVar(playerid, "GangChatting");
						DeletePVar(playerid, "VehicleChatting");
						DeletePVar(playerid, "AdminChatting");
						DeletePVar(playerid, "PMChatting");
						DeletePVar(playerid, "RconChatting");
					    SetPVarInt(playerid, "Level5+Chatting", true);

					  }
				   }
				}
		   }
		}
		case 8913://admin > 6 && not dod
		{
		   if(response)
		   {
				switch(listitem)
				{
				   case 0:
				   {
					DeletePVar(playerid, "GangChatting");
					DeletePVar(playerid, "VehicleChatting");
					DeletePVar(playerid, "RconChatting");
					DeletePVar(playerid, "AdminChatting");
					DeletePVar(playerid, "Level5+Chatting");
					DeletePVar(playerid, "PMChatting");
					PMChattingID[playerid]=-1;
				   }
				   case 1:
				   {
					  if(PlayerInfo[playerid][pGang] < 1) SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You are not in a gang!");
					  else
					  {
						DeletePVar(playerid, "VehicleChatting");
						DeletePVar(playerid, "AdminChatting");
						DeletePVar(playerid, "RconChatting");
						DeletePVar(playerid, "Level5+Chatting");
						DeletePVar(playerid, "PMChatting");
					    SetPVarInt(playerid, "GangChatting", true);
					  }
				   }
				   case 2:
				   {
	             	ShowPlayerDialog(playerid, 8914, DIALOG_STYLE_INPUT, "Chat", "Enter player ID to PM", "Ok", "Exit");
				   }
				   case 3:
				   {
					  if(!IsPlayerInAnyVehicle(playerid)) SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You are not in a vehicle!");
					  else
					  {
						DeletePVar(playerid, "GangChatting");
						DeletePVar(playerid, "AdminChatting");
						DeletePVar(playerid, "RconChatting");
						DeletePVar(playerid, "Level5+Chatting");
						DeletePVar(playerid, "PMChatting");
					    SetPVarInt(playerid, "VehicleChatting", true);
					  }
				   }
				   case 4:
				   {
					  if(!IsAdmin(playerid, 1)) SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You are not an Admin!");
					  else
					  {
						DeletePVar(playerid, "GangChatting");
						DeletePVar(playerid, "VehicleChatting");
						DeletePVar(playerid, "RconChatting");
						DeletePVar(playerid, "PMChatting");
						DeletePVar(playerid, "Level5+Chatting");
					    SetPVarInt(playerid, "AdminChatting", true);

					  }
				   }
				   case 5:
				   {
					  if(!IsAdmin(playerid, 5) || PlayerInfo[playerid][UserID] == 153569) SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You are not Level 5+!");
					  else
					  {
						DeletePVar(playerid, "GangChatting");
						DeletePVar(playerid, "VehicleChatting");
						DeletePVar(playerid, "AdminChatting");
						DeletePVar(playerid, "PMChatting");
						DeletePVar(playerid, "RconChatting");
					    SetPVarInt(playerid, "Level5+Chatting", true);

					  }
				   }
				   case 6:
				   {
					  if(!IsAdmin(playerid, 10)) SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You are not an RCON-Admin!");
					  else
					  {
						DeletePVar(playerid, "GangChatting");
						DeletePVar(playerid, "VehicleChatting");
						DeletePVar(playerid, "AdminChatting");
						DeletePVar(playerid, "PMChatting");
						DeletePVar(playerid, "Level5+Chatting");
					    SetPVarInt(playerid, "RconChatting", true);
					 }
				   }
				}
		   }
		}
		case 12819://admin 1 - 4 & dod
		{
		   if(response)
		   {
				switch(listitem)
				{
				   case 0:
				   {
					DeletePVar(playerid, "GangChatting");
					DeletePVar(playerid, "VehicleChatting");
					DeletePVar(playerid, "DoDChatting");
					DeletePVar(playerid, "AdminChatting");
					DeletePVar(playerid, "PMChatting");
					PMChattingID[playerid]=-1;
				   }
				   case 1:
				   {
					  if(PlayerInfo[playerid][pGang] < 1) SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You are not in a gang!");
					  else
					  {
						DeletePVar(playerid, "VehicleChatting");
						DeletePVar(playerid, "AdminChatting");
						DeletePVar(playerid, "DoDChatting");
						DeletePVar(playerid, "PMChatting");
					    SetPVarInt(playerid, "GangChatting", true);
					  }
				   }
				   case 2:
				   {
	             	ShowPlayerDialog(playerid, 8914, DIALOG_STYLE_INPUT, "Chat", "Enter player ID to PM", "Ok", "Exit");
				   }
				   case 3:
				   {
					  if(!IsPlayerInAnyVehicle(playerid)) SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You are not in a vehicle!");
					  else
					  {
						DeletePVar(playerid, "GangChatting");
						DeletePVar(playerid, "AdminChatting");
						DeletePVar(playerid, "DoDChatting");
						DeletePVar(playerid, "PMChatting");
					    SetPVarInt(playerid, "VehicleChatting", true);
					  }
				   }
				   case 4:
				   {
					  if(!IsDoDMember(playerid)) SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You are not a DoD Member!");
					  else
					  {
						DeletePVar(playerid, "GangChatting");
						DeletePVar(playerid, "VehicleChatting");
						DeletePVar(playerid, "AdminChatting");
						DeletePVar(playerid, "PMChatting");
					    SetPVarInt(playerid, "DoDChatting", true);

					  }
				   }
				   case 5:
				   {
					  if(!IsAdmin(playerid, 1)) SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You are not an admin!");
					  else
					  {
						DeletePVar(playerid, "GangChatting");
						DeletePVar(playerid, "VehicleChatting");
						DeletePVar(playerid, "AdminChatting");
						DeletePVar(playerid, "PMChatting");
						DeletePVar(playerid, "DoDChatting");
					    SetPVarInt(playerid, "AdminChatting", true);

					  }
				   }
				}
		   }
		}
		case 12820://admin 1- 5 & dod
		{
		   if(response)
		   {
				switch(listitem)
				{
				   case 0:
				   {
					DeletePVar(playerid, "GangChatting");
					DeletePVar(playerid, "VehicleChatting");
					DeletePVar(playerid, "DoDChatting");
					DeletePVar(playerid, "AdminChatting");
					DeletePVar(playerid, "PMChatting");
					DeletePVar(playerid, "Level5+Chatting");
					PMChattingID[playerid]=-1;
				   }
				   case 1:
				   {
					  if(PlayerInfo[playerid][pGang] < 1) SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You are not in a gang!");
					  else
					  {
						DeletePVar(playerid, "VehicleChatting");
						DeletePVar(playerid, "AdminChatting");
						DeletePVar(playerid, "DoDChatting");
						DeletePVar(playerid, "PMChatting");
						DeletePVar(playerid, "Level5+Chatting");
					    SetPVarInt(playerid, "GangChatting", true);
					  }
				   }
				   case 2:
				   {
	             	ShowPlayerDialog(playerid, 8914, DIALOG_STYLE_INPUT, "Chat", "Enter player ID to PM", "Ok", "Exit");
				   }
				   case 3:
				   {
					  if(!IsPlayerInAnyVehicle(playerid)) SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You are not in a vehicle!");
					  else
					  {
						DeletePVar(playerid, "GangChatting");
						DeletePVar(playerid, "AdminChatting");
						DeletePVar(playerid, "DoDChatting");
						DeletePVar(playerid, "PMChatting");
						DeletePVar(playerid, "Level5+Chatting");
					    SetPVarInt(playerid, "VehicleChatting", true);
					  }
				   }
				   case 4:
				   {
					  if(!IsDoDMember(playerid)) SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You are not a DoD Member!");
					  else
					  {
						DeletePVar(playerid, "GangChatting");
						DeletePVar(playerid, "VehicleChatting");
						DeletePVar(playerid, "AdminChatting");
						DeletePVar(playerid, "PMChatting");
						DeletePVar(playerid, "Level5+Chatting");
					    SetPVarInt(playerid, "DoDChatting", true);

					  }
				   }
				   case 5:
				   {
					  if(!IsAdmin(playerid, 1)) SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You are not an admin!");
					  else
					  {
						DeletePVar(playerid, "GangChatting");
						DeletePVar(playerid, "VehicleChatting");
						DeletePVar(playerid, "AdminChatting");
						DeletePVar(playerid, "PMChatting");
						DeletePVar(playerid, "DoDChatting");
						DeletePVar(playerid, "Level5+Chatting");
					    SetPVarInt(playerid, "AdminChatting", true);

					  }
				   }
   	               case 6:
				   {
					  if(!IsAdmin(playerid, 5)) SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You are not Level 5+!");
					  else
					  {
						DeletePVar(playerid, "GangChatting");
						DeletePVar(playerid, "VehicleChatting");
						DeletePVar(playerid, "AdminChatting");
						DeletePVar(playerid, "PMChatting");
						DeletePVar(playerid, "DoDChatting");
						DeletePVar(playerid, "AdminChatting");
					    SetPVarInt(playerid, "Level5+Chatting", true);

					  }
				   }
				}
		   }
		}
		case 12822://not admin , not dod
		{
		   if(response)
		   {
				switch(listitem)
				{
				   case 0:
				   {
					DeletePVar(playerid, "GangChatting");
					DeletePVar(playerid, "VehicleChatting");
					DeletePVar(playerid, "PMChatting");
					PMChattingID[playerid]=-1;
				   }
				   case 1:
				   {
					  if(PlayerInfo[playerid][pGang] < 1) SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You are not in a gang!");
					  else
					  {
						DeletePVar(playerid, "VehicleChatting");
						DeletePVar(playerid, "PMChatting");
					    SetPVarInt(playerid, "GangChatting", true);
					  }
				   }
				   case 2:
				   {
	             	ShowPlayerDialog(playerid, 8914, DIALOG_STYLE_INPUT, "Chat", "Enter player ID to PM", "Ok", "Exit");
				   }
				   case 3:
				   {
					  if(!IsPlayerInAnyVehicle(playerid)) SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You are not in a vehicle!");
					  else
					  {
						DeletePVar(playerid, "GangChatting");
						DeletePVar(playerid, "PMChatting");
					    SetPVarInt(playerid, "VehicleChatting", true);
					  }
				   }
				}
		   }
		}
		case 12821://admin 1- 1337 & dod
		{
		   if(response)
		   {
				switch(listitem)
				{
				   case 0:
				   {
					DeletePVar(playerid, "GangChatting");
					DeletePVar(playerid, "VehicleChatting");
					DeletePVar(playerid, "DoDChatting");
					DeletePVar(playerid, "AdminChatting");
					DeletePVar(playerid, "PMChatting");
					DeletePVar(playerid, "Level5+Chatting");
					DeletePVar(playerid, "Level5+Chatting");
					PMChattingID[playerid]=-1;
				   }
				   case 1:
				   {
					  if(PlayerInfo[playerid][pGang] < 1) SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You are not in a gang!");
					  else
					  {
						DeletePVar(playerid, "VehicleChatting");
						DeletePVar(playerid, "AdminChatting");
						DeletePVar(playerid, "DoDChatting");
						DeletePVar(playerid, "PMChatting");
						DeletePVar(playerid, "Level5+Chatting");
						DeletePVar(playerid, "Level5+Chatting");
					    SetPVarInt(playerid, "GangChatting", true);
					  }
				   }
				   case 2:
				   {
	             	ShowPlayerDialog(playerid, 8914, DIALOG_STYLE_INPUT, "Chat", "Enter player ID to PM", "Ok", "Exit");
				   }
				   case 3:
				   {
					  if(!IsPlayerInAnyVehicle(playerid)) SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You are not in a vehicle!");
					  else
					  {
						DeletePVar(playerid, "GangChatting");
						DeletePVar(playerid, "AdminChatting");
						DeletePVar(playerid, "DoDChatting");
						DeletePVar(playerid, "PMChatting");
						DeletePVar(playerid, "Level5+Chatting");
						DeletePVar(playerid, "Level5+Chatting");
					    SetPVarInt(playerid, "VehicleChatting", true);
					  }
				   }
				   case 4:
				   {
					  if(!IsDoDMember(playerid)) SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You are not a DoD Member!");
					  else
					  {
						DeletePVar(playerid, "GangChatting");
						DeletePVar(playerid, "VehicleChatting");
						DeletePVar(playerid, "AdminChatting");
						DeletePVar(playerid, "PMChatting");
						DeletePVar(playerid, "Level5+Chatting");
						DeletePVar(playerid, "Level5+Chatting");
					    SetPVarInt(playerid, "DoDChatting", true);

					  }
				   }
				   case 5:
				   {
					  if(!IsAdmin(playerid, 1)) SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You are not an admin!");
					  else
					  {
						DeletePVar(playerid, "GangChatting");
						DeletePVar(playerid, "VehicleChatting");
						DeletePVar(playerid, "AdminChatting");
						DeletePVar(playerid, "PMChatting");
						DeletePVar(playerid, "DoDChatting");
						DeletePVar(playerid, "Level5+Chatting");
						DeletePVar(playerid, "Level5+Chatting");
					    SetPVarInt(playerid, "AdminChatting", true);

					  }
				   }
   	               case 6:
				   {
					  if(!IsAdmin(playerid, 5)) SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You are not Level 5+!");
					  else
					  {
						DeletePVar(playerid, "GangChatting");
						DeletePVar(playerid, "VehicleChatting");
						DeletePVar(playerid, "AdminChatting");
						DeletePVar(playerid, "PMChatting");
						DeletePVar(playerid, "DoDChatting");
						DeletePVar(playerid, "AdminChatting");
						DeletePVar(playerid, "Level5+Chatting");
					    SetPVarInt(playerid, "Level5+Chatting", true);

					  }
				   }
                   case 7:
				   {
					  if(!IsAdmin(playerid, 10)) SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You are not RCON Admin!");
					  else
					  {
						DeletePVar(playerid, "GangChatting");
						DeletePVar(playerid, "VehicleChatting");
						DeletePVar(playerid, "AdminChatting");
						DeletePVar(playerid, "PMChatting");
						DeletePVar(playerid, "DoDChatting");
						DeletePVar(playerid, "AdminChatting");
						DeletePVar(playerid, "Level5+Chatting");
					    SetPVarInt(playerid, "RconChatting", true);

				      }
				   }
				}
		   }
		}
		case 12818://not admin , only dod
		{
		   if(response)
		   {
				switch(listitem)
				{
				   case 0:
				   {
					DeletePVar(playerid, "GangChatting");
					DeletePVar(playerid, "VehicleChatting");
					DeletePVar(playerid, "PMChatting");
					DeletePVar(playerid, "DoDChatting");
					PMChattingID[playerid]=-1;
				   }
				   case 1:
				   {
					  if(PlayerInfo[playerid][pGang] < 1) SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You are not in a gang!");
					  else
					  {
						DeletePVar(playerid, "VehicleChatting");
						DeletePVar(playerid, "DoDChatting");
                        DeletePVar(playerid, "PMChatting");
					    SetPVarInt(playerid, "GangChatting", true);
					  }
				   }
				   case 2:
				   {
	             	ShowPlayerDialog(playerid, 8914, DIALOG_STYLE_INPUT, "Chat", "Enter player ID to PM", "Ok", "Exit");
				   }
				   case 3:
				   {
					  if(!IsPlayerInAnyVehicle(playerid)) SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You are not in a vehicle!");
					  else
					  {
						DeletePVar(playerid, "GangChatting");
						DeletePVar(playerid, "DoDChatting");
						DeletePVar(playerid, "PMChatting");
					    SetPVarInt(playerid, "VehicleChatting", true);
					  }
				   }
				   case 4:
				   {
					  if(!IsDoDMember(playerid)) SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You are not a DoD member!");
					  else
					  {
						DeletePVar(playerid, "GangChatting");
						DeletePVar(playerid, "VehicleChatting");
						DeletePVar(playerid, "RconChatting");
						DeletePVar(playerid, "PMChatting");
						DeletePVar(playerid, "Level5+Chatting");
					    SetPVarInt(playerid, "DoDChatting", true);

					  }
				   }
				}
		   }
		}
		case 12817://admin == 1 - 4
		{
		   if(response)
		   {
				switch(listitem)
				{
				   case 0:
				   {
					DeletePVar(playerid, "GangChatting");
					DeletePVar(playerid, "VehicleChatting");
					DeletePVar(playerid, "RconChatting");
					DeletePVar(playerid, "AdminChatting");
					DeletePVar(playerid, "Level5+Chatting");
					DeletePVar(playerid, "PMChatting");
					PMChattingID[playerid]=-1;
				   }
				   case 1:
				   {
					  if(PlayerInfo[playerid][pGang] < 1) SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You are not in a gang!");
					  else
					  {
						DeletePVar(playerid, "VehicleChatting");
						DeletePVar(playerid, "AdminChatting");
						DeletePVar(playerid, "PMChatting");
					    SetPVarInt(playerid, "GangChatting", true);
					  }
				   }
				   case 2:
				   {
	             	ShowPlayerDialog(playerid, 8914, DIALOG_STYLE_INPUT, "Chat", "Enter player ID to PM", "Ok", "Exit");
				   }
				   case 3:
				   {
					  if(!IsPlayerInAnyVehicle(playerid)) SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You are not in a vehicle!");
					  else
					  {
						DeletePVar(playerid, "GangChatting");
						DeletePVar(playerid, "AdminChatting");
						DeletePVar(playerid, "PMChatting");
					    SetPVarInt(playerid, "VehicleChatting", true);
					  }
				   }
				   case 4:
				   {
					  if(!IsAdmin(playerid, 1)) SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You are not an Admin!");
					  else
					  {
						DeletePVar(playerid, "GangChatting");
						DeletePVar(playerid, "VehicleChatting");
						DeletePVar(playerid, "PMChatting");
					    SetPVarInt(playerid, "AdminChatting", true);

					  }
				   }
				}
		   }
		}
		case 8914:
		{
			 if(response)
			 {
			   new id=strval(inputtext);
			   if(!IsPlayerConnected(id)) SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}Player is not connected!");
			   else
			   {
					DeletePVar(playerid, "VehicleChatting");
					DeletePVar(playerid, "AdminChatting");
					DeletePVar(playerid, "Level5+Chatting");
					DeletePVar(playerid, "RconChatting");
					DeletePVar(playerid, "GangChatting");

					SetPVarInt(playerid, "PMChatting", true);
					PMChattingID[playerid]=id;
			   }
			 }
		}

		case 7556:
		{
		   if(response)
		   {
			 if(GetPlayerMoneyEx(playerid) >= 120000)
			 {
				if(strlen(PlayerClothes[playerid][HatString]) < 20)
				{
                 if(PlayerInfo[playerid][pHouse] > 0)
                 {
				  new am=GetPVarInt(playerid, "Clothes_Selection");
				  SetCameraBehindPlayer(playerid);
				  for(new x=0; x<sizeof(ShopTD); x++) TextDrawHideForPlayer(playerid, ShopTD[x]);
				  CancelSelectTextDraw(playerid);
			      DestroyPlayerObject(playerid, GetPVarInt(playerid, "Gobj"));
				  DeletePVar(playerid, "Gobj");
			  	  SetPlayerAttachedObject(playerid, 2, Hats[am], 2, 0.135928, 0.002891, -0.008518, 0.000000, 0.000000, 347.188201, 1.0, 1.0, 1.0);
				  TogglePlayerControllable2(playerid, 1);
				  SetPlayerPos(playerid, 217.5214, -96.8268, 1005.2578);
				  SetPlayerFacingAngle(playerid, 178.0513);
				  SetPlayerCameraPos(playerid, 217.4618, -98.8051, 1006.8578);
				  SetPlayerCameraLookAt(playerid, 217.5214, -96.8268, 1005.8578);
				  EditAttachedObject(playerid, 2);
				  GivePlayerMoneyEX(playerid, -100000, 1);
				  PlayerClothes[playerid][Caps]=Hats[am];
				  format(PlayerClothes[playerid][HatString], 200, "%d, %f, %f, %f, %f, %f, %f, %f, %f, %f", Hats[am], 0.135928, 0.002891, -0.008518, 0.000000, 0.000000, 347.188201, 1.0, 1.0, 1.0);

			  	  new str[512];
	  		      format(str, sizeof(str), "UPDATE `users` SET `CapsString` ='%s' WHERE `UserID` = '%d'", PlayerClothes[playerid][HatString], PlayerInfo[playerid][UserID]);
    		  	  mysql_query(GTADM, str);
				  GiveMedal(playerid, 25);
                 }
                 else SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You must own a house to buy this item");
				}
				else SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You must sell your own cap before buying a new one");
			 }
			 else SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You dont have enough money to buy this item");
		   }

		}
        case 7854:
        {
			if(response)
			{

			  if((GetPVarInt(playerid, "CS")) == 1)
			  {
			   switch(listitem)
			   {
				 case 0:GivePlayerWeapon(playerid, 24, 1000), GivePlayerWeapon(playerid, 31, 1000), GivePlayerWeapon(playerid, 16, 5);
				 case 1:GivePlayerWeapon(playerid, 29, 1000), GivePlayerWeapon(playerid, 31, 1000), GivePlayerWeapon(playerid, 34, 30);
				 case 2:GivePlayerWeapon(playerid, 25, 100), GivePlayerWeapon(playerid, 31, 1000), GivePlayerWeapon(playerid, 16, 5);
				 case 3:GivePlayerWeapon(playerid, 33, 500), GivePlayerWeapon(playerid, 31, 1000), GivePlayerWeapon(playerid, 16, 5);
				 case 4:GivePlayerWeapon(playerid, 27, 1000), GivePlayerWeapon(playerid, 31, 1000), GivePlayerWeapon(playerid, 29, 1000);
				 case 5:GivePlayerWeapon(playerid, 17, 5), GivePlayerWeapon(playerid, 31, 1000), GivePlayerWeapon(playerid, 24, 1000);
			   }
			   GivePlayerWeapon(playerid, 4, 20);
			   PlayAudioStreamForPlayer(playerid, "https://dl.dropbox.com/u/52869044/CounterStrike_GTADM/lock_and_load.mp3");
			  }
			  else if((GetPVarInt(playerid, "CS")) == 2)
			  {
			   switch(listitem)
			   {
				 case 0:GivePlayerWeapon(playerid, 24, 1000), GivePlayerWeapon(playerid, 30, 1000), GivePlayerWeapon(playerid, 16, 5);
				 case 1:GivePlayerWeapon(playerid, 29, 1000), GivePlayerWeapon(playerid, 30, 1000), GivePlayerWeapon(playerid, 34, 30);
				 case 2:GivePlayerWeapon(playerid, 25, 100), GivePlayerWeapon(playerid, 30, 1000), GivePlayerWeapon(playerid, 16, 5);
				 case 3:GivePlayerWeapon(playerid, 33, 500), GivePlayerWeapon(playerid, 30, 1000), GivePlayerWeapon(playerid, 16, 5);
				 case 4:GivePlayerWeapon(playerid, 27, 1000), GivePlayerWeapon(playerid, 30, 1000), GivePlayerWeapon(playerid, 29, 1000);
				 case 5:GivePlayerWeapon(playerid, 17, 5), GivePlayerWeapon(playerid, 30, 1000), GivePlayerWeapon(playerid, 24, 1000);
			   }
			   GivePlayerWeapon(playerid, 4, 20);
			   PlayAudioStreamForPlayer(playerid, "https://dl.dropbox.com/u/52869044/CounterStrike_GTADM/lock_and_load.mp3");
			  }
			}
			else
			{
              if(GetPVarInt(playerid, "CS"))
              {
				if((GetPVarInt(playerid, "CS")) == 1)
				ShowPlayerDialog(playerid, 7854, DIALOG_STYLE_LIST, "Choose Your Weaponpack", ""cornsilk2"WeaponsPack#1"lime2" Desert Eagle + M4 + Grenades\n"cornsilk2"WeaponsPack#2"lime2" MP5 + M4 + Sniper\n"cornsilk2"WeaponsPack#3"lime2" Shotgun + M4 + Grenades\n"cornsilk2"WeaponsPack#4"lime2" Country Rifle + M4 + Grenades\n"cornsilk2"WeaponsPack#5"lime2" Combat Shotgun + M4 + MP5\n"cornsilk2"WeaponsPack#6"lime2" SmokeBombs + M4 + Desert Eagle", "Choose", "");
				else
				ShowPlayerDialog(playerid, 7854, DIALOG_STYLE_LIST, "Choose Your Weaponpack", ""cornsilk2"WeaponsPack#1"lime2" Desert Eagle + AK47 + Grenades\n"cornsilk2"WeaponsPack#2"lime2" MP5 + AK47 + Sniper\n"cornsilk2"WeaponsPack#3"lime2" Shotgun + AK47 + Grenades\n"cornsilk2"WeaponsPack#4"lime2" Country Rifle + AK47 + Grenades\n"cornsilk2"WeaponsPack#5"lime2" Combat Shotgun + AK47 + MP5\n"cornsilk2"WeaponsPack#6"lime2" SmokeBombs + AK47 + Desert Eagle", "Choose", "");
              }
			}
        }
        case 5457:
        {
			if(response)
			{
			   if(Job[playerid] != Trucker) SendWarning(playerid, "You must be a Trucker to start trucking mission!");
			   else
			   {
				    DisablePlayerRaceCheckpoint(playerid);
				    PlayerInfo[playerid][DelevryType]=random(8);
				//	GameTextForPlayer(playerid, "~g~RS Haul", 3000, 4);
					SendInfoText(playerid, 3000, "~g~RS Haul");
                    SendClientMessage(playerid, 0x317000FF, "{00159E}» Trucking «"DARKBLUE_" Take one of the Trucks to start the Trucking mission!");
					SetPVarInt(playerid, "Trucker2", 1);
	 				for(new g=0; g<sizeof(Tanks2); g++)
					{
						SetVehicleParamsForPlayer(Tanks2[g], playerid, 1, 0);
					}
				    TogglePlayerDynamicCP(playerid, Trucking_Start2, false);
			   }
			}
		}
		case 5456:
		{
			if(response)
			{
			   if(Job[playerid] != Trucker) SendWarning(playerid, "You must be a Trucker to start a trucking mission!");
			   else
			   {
                   TogglePlayerDynamicCP(playerid, Trucking_Start, false);
				   PlayerInfo[playerid][DelevryType]=random(3);
				   DisablePlayerRaceCheckpoint(playerid);
				   switch(PlayerInfo[playerid][DelevryType])
				   {
					   case 0:
					   {
							//GameTextForPlayer(playerid, "~y~Gas Delivery", 3000, 4);
							SendInfoText(playerid, 3000, "~y~Gas Delivery");
							SendClientMessage(playerid, 0x317000FF, "{00159E}» Trucking «"DARKBLUE_" Follow the Truck Icon on your radar to get a LineRunner.");
							SetPVarInt(playerid, "Trucker", 1);
							TogglePlayerDynamicCP(playerid, v_Mission_cps[0], true);
							Streamer_AppendArrayData(STREAMER_TYPE_MAP_ICON , v_Mission_icons[0], E_STREAMER_PLAYER_ID, playerid);
					   }
					   case 1:
					   {
							///GameTextForPlayer(playerid, "~y~Bombs Delivery", 3000, 4);
							SendInfoText(playerid, 3000, "~y~Bombs Delivery");
							SendClientMessage(playerid, 0x317000FF, "{00159E}» Trucking «"DARKBLUE_" Follow the Truck Icon on your radar to get a Truck.");
							SetPVarInt(playerid, "Trucker", 1);
							TogglePlayerDynamicCP(playerid, v_Mission_cps[7], true);
							Streamer_AppendArrayData(STREAMER_TYPE_MAP_ICON , v_Mission_icons[7], E_STREAMER_PLAYER_ID, playerid);

					   }
					   case 2:
					   {
							///GameTextForPlayer(playerid, "~y~Clothes Delivery", 3000, 4);
							SendInfoText(playerid, 3000, "~y~Clothes Delivery");
							SendClientMessage(playerid, 0x317000FF, "{00159E}» Trucking «"DARKBLUE_" Follow the Truck Icon on your radar to get a Truck.");
							SetPVarInt(playerid, "Trucker", 1);
							TogglePlayerDynamicCP(playerid, v_Mission_cps[13], true);
							Streamer_AppendArrayData(STREAMER_TYPE_MAP_ICON , v_Mission_icons[13], E_STREAMER_PLAYER_ID, playerid);

					   }
				   }
			   }

			}
		}

        case 17789:
        {
	       if(response)
	       {
			new engine, llights, alarm, doors, bonnet, boot, objective;
			new v=GetPlayerVehicleID(playerid);
        	if( v != PlayerCar(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be inside your own vehicle to use this command");
         	GetVehicleParamsEx(v, engine, llights, alarm, doors, bonnet, boot, objective);

			switch(listitem)
			{
				case 0:
				{
				  if(llights == 0) SetVehicleParamsEx(v, engine, 1, alarm, doors, bonnet, boot, objective);
				  else if(llights == 1) SetVehicleParamsEx(v, engine, 0, alarm, doors, bonnet, boot, objective);
				}
				case 1:
				{
				  if(alarm == 0) SetVehicleParamsEx(v, engine, llights, 1, doors, bonnet, boot, objective);
				  else if(alarm == 1) SetVehicleParamsEx(v, engine, llights, 0, doors, bonnet, boot, objective);
				}
				case 2:
				{
				  if(doors == 0) SetVehicleParamsEx(v, engine, llights, alarm, 1, bonnet, boot, objective);
				  else if(doors == 1) SetVehicleParamsEx(v, engine, llights, alarm, 0, bonnet, boot, objective);
				}
				case 3:
				{
		          if(bonnet == 0) SetVehicleParamsEx(v, engine, llights, alarm, doors, 1, boot, objective);
				  else if(bonnet == 1) SetVehicleParamsEx(v, engine, llights, alarm, doors, 0, boot, objective);
				}
				case 4:
				{
				  if(boot == 0) SetVehicleParamsEx(v, engine, llights, alarm, doors, bonnet, 1, objective);
				  else if(boot == 1) SetVehicleParamsEx(v, engine, llights, alarm, doors, bonnet, 0, objective);
				}
			}
			cmd_vc(playerid);
	       }
        }

        case DIALOG_LOGIN:
        {
            if(( !response ) || !strlen(inputtext))
            {
                if(!IsPlayerNPC(playerid))
                {
                    PassCount[playerid]++;
                    if(PassCount[playerid] >= 3) KickEX(playerid, "Login Failed", -255);
					else
					{
	                    new Dialog[256];
	                    format(Dialog, sizeof(Dialog), "You have entered an incorrect password\nIf you are not the owner of this account please rejoin with another name\n\n"LIGHTYELLOW_"Account: "WHITE_"%s\n\n{0059FF}Type your password below:\n"RED_"tries left %d/3", pName[playerid], PassCount[playerid]);
	                    ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, ""LIGHTRED_"Login", Dialog, "Login", "Quit");
					}
				 }
            }
            if( response )
            {
     			 new Query[300];
     			 format(Query, sizeof(Query), "SELECT `UserID` FROM `users` WHERE `Name` = '%s' AND `Password` = md5('%s') ORDER BY `Score` LIMIT 1", pEscName[playerid], Escape_String(inputtext));
				 SetPVarString(playerid, "pPasss", inputtext);
                 mysql_tquery(GTADM, Query, "OnPlayerLogin", "i", playerid);
            }
        }
	    case DIALOG_DUEL:
	    {
	    	if(!response) ShowPlayerDialog(playerid, DIALOG_DUEL, DIALOG_STYLE_LIST, ""cb2"Choose Duel Weapon", "1. Desert Eagle\n2. Shotgun\n3. Sawn-Off Shotgun\n4. Combat Shotgun\n5. M4\n6. Mp5 \n7. Uzi\n8. Sniper Rifle\n9. Country Rifle\n10. FlameThrower\n11. Minigun\n12. Grenade\n13. Molotov Cocktails\n14. Satchel Charge\n15. ChainSaw", "Ok", "Exit");
	    	if(response)
	    	{
               DuelInfo[stat] = 1;
               switch(listitem)
               {
                 case 0: DuelInfo[weapon] = 24;
                 case 1: DuelInfo[weapon] = 25;
                 case 2: DuelInfo[weapon] = 26;
                 case 3: DuelInfo[weapon] = 27;
                 case 4: DuelInfo[weapon] = 31;
                 case 5: DuelInfo[weapon] = 29;
                 case 6: DuelInfo[weapon] = 28;
                 case 7: DuelInfo[weapon] = 34;
                 case 8: DuelInfo[weapon] = 33;
                 case 9: DuelInfo[weapon] = 37;
                 case 10: DuelInfo[weapon] = 38;
                 case 11: DuelInfo[weapon] = 16;
                 case 12: DuelInfo[weapon] = 18;
                 case 13: DuelInfo[weapon] = 39;
                 case 14: DuelInfo[weapon] = 9;
               }

	    	}
    	}
        case 19888:
    	{
	      if(response)
	      {
    	    switch(listitem)
    	    {
				 case 0: return cmd_speed1(playerid);
				 case 1: return cmd_speed2(playerid);
				 case 2: return cmd_speed3(playerid);
				 case 3: return cmd_css(playerid);
				 case 4: return cmd_stf(playerid);
				 case 5: return cmd_wd(playerid);
				 case 6: return cmd_wtf(playerid);
				 case 7: return cmd_mr(playerid);
				 case 8: return cmd_hr(playerid);
				 case 9: return cmd_aa(playerid);
				 case 10: return cmd_lsair(playerid);
				 case 11: return cmd_lvair(playerid);
				 case 12: return cmd_fw(playerid);
				 case 13: return cmd_lw(playerid);
				 case 14: return cmd_rc(playerid);
				 case 15: return cmd_tube(playerid);
				 case 16: return cmd_dam(playerid);
				 case 17: return cmd_ml(playerid);
				 case 18: return cmd_ex(playerid);
				 case 19: return cmd_sre(playerid);
				 //case 20: return cmd_sw(playerid);
    	    }
	      }
	 	  if(!response && GetPVarInt(playerid, "GoBack")) cmd_minigames(playerid);
		  DeletePVar(playerid, "GoBack");
    	}
	    case 2025:
	    {
		 if(response)
		 {

			new model;
			if(listitem == 0) model=GetPVarInt(playerid, "model");
			else if(listitem == 1) SetPVarInt(playerid, "model", 5837), model=5837;
			else if(listitem == 2) SetPVarInt(playerid, "model", 18755), model=18755;
			new Float:object_x, Float:object_y, Float:object_z;
            GetPlayerPos(playerid, object_x, object_y, object_z);

			SetPVarInt(playerid, "Gate_ObjectID", CreateDynamicObject(model, object_x+1.0, object_y+1.0, object_z, 0.0, 0.0, 0.0));
            SetPVarInt(playerid, "GateEditing", 1);
			SendClientMessage(playerid, GREENBLUE, "-GateEditor- Use /MoveGate OR /EditGate To Change The Gate's (closed) Position");
			SendClientMessage(playerid, GREENBLUE, "-GateEditor- Press 'N' When you are Done");
			Streamer_Update(playerid);
	     }
	    }
	    case 19889:
	    {
	      if(response)
	      {
	    	new Float:pos[3], Float:gpos[3];
	    	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	    	GetPlayerPos(playerid, gpos[0], gpos[1], gpos[2]);
			GetXYInFrontOfPlayer(playerid, pos[0], pos[1], 1.5);
	    	new k=GetFreePickupID(),
			y=GetPlayerVirtualWorld(playerid);
	    	if(k < 0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}No more pickups can be created");
	    	switch(listitem)
	    	{
	    		   case 0: wWPickup[k]=CreateDynamicPickup(1240, 2, pos[0], pos[1], pos[2], y), wPickup[k][Model_]=1240, wPickup[k][Spawn]=2;
	    		   case 1: wWPickup[k]=CreateDynamicPickup(1242, 2, pos[0], pos[1], pos[2], y), wPickup[k][Model_]=1242, wPickup[k][Spawn]=2;
	    		   case 2: wWPickup[k]=CreateDynamicPickup(GetWeaponModel(26), 2, pos[0], pos[1], pos[2], y), wPickup[k][Model_]=26, wPickup[k][Spawn]=2;
	    		   case 3: wWPickup[k]=CreateDynamicPickup(GetWeaponModel(24), 2, pos[0], pos[1], pos[2], y), wPickup[k][Model_]=24, wPickup[k][Spawn]=2;
	    		   case 4: wWPickup[k]=CreateDynamicPickup(GetWeaponModel(34), 2, pos[0], pos[1], pos[2], y), wPickup[k][Model_]=34, wPickup[k][Spawn]=2;
	    		   case 5: wWPickup[k]=CreateDynamicPickup(GetWeaponModel(31), 2, pos[0], pos[1], pos[2], y), wPickup[k][Model_]=31, wPickup[k][Spawn]=2;
	    		   case 6: wWPickup[k]=CreateDynamicPickup(GetWeaponModel(16), 2, pos[0], pos[1], pos[2], y), wPickup[k][Model_]=16, wPickup[k][Spawn]=2;
	    		   case 7: wWPickup[k]=CreateDynamicPickup(GetWeaponModel(39), 2, pos[0], pos[1], pos[2], y), wPickup[k][Model_]=39, wPickup[k][Spawn]=2;
	    		   case 8: wWPickup[k]=CreateDynamicPickup(GetWeaponModel(25), 2, pos[0], pos[1], pos[2], y), wPickup[k][Model_]=25, wPickup[k][Spawn]=2;
	    		   case 9: wWPickup[k]=CreateDynamicPickup(GetWeaponModel(32), 2, pos[0], pos[1], pos[2], y), wPickup[k][Model_]=32, wPickup[k][Spawn]=2;
	    		   case 10: wWPickup[k]=CreateDynamicPickup(GetWeaponModel(46), 2, pos[0], pos[1], pos[2], y), wPickup[k][Model_]=46, wPickup[k][Spawn]=2;
	    		   case 11: wWPickup[k]=CreateDynamicPickup(GetWeaponModel(42), 2, pos[0], pos[1], pos[2], y), wPickup[k][Model_]=42, wPickup[k][Spawn]=2;
	    		   case 12: wWPickup[k]=CreateDynamicPickup(GetWeaponModel(41), 2, pos[0], pos[1], pos[2], y), wPickup[k][Model_]=41, wPickup[k][Spawn]=2;
       			   case 13: wWPickup[k]=CreateDynamicPickup(GetWeaponModel(9), 2, pos[0], pos[1], pos[2], y), wPickup[k][Model_]=9, wPickup[k][Spawn]=2;
           		   case 14: wWPickup[k]=CreateDynamicPickup(GetWeaponModel(4), 2, pos[0], pos[1], pos[2], y), wPickup[k][Model_]=4, wPickup[k][Spawn]=2;
           		   case 15: wWPickup[k]=CreateDynamicPickup(GetWeaponModel(6), 2, pos[0], pos[1], pos[2], y), wPickup[k][Model_]=6, wPickup[k][Spawn]=2;
             	   case 16: wWPickup[k]=CreateDynamicPickup(GetWeaponModel(8), 2, pos[0], pos[1], pos[2], y), wPickup[k][Model_]=8, wPickup[k][Spawn]=2;
             	   case 17: wWPickup[k]=CreateDynamicPickup(GetWeaponModel(5), 2, pos[0], pos[1], pos[2], y), wPickup[k][Model_]=5, wPickup[k][Spawn]=2;
               	   case 18: wWPickup[k]=CreateDynamicPickup(GetWeaponModel(3), 2, pos[0], pos[1], pos[2], y), wPickup[k][Model_]=3, wPickup[k][Spawn]=2;
               	   case 19: wWPickup[k]=CreateDynamicPickup(GetWeaponModel(7), 2, pos[0], pos[1], pos[2], y), wPickup[k][Model_]=7, wPickup[k][Spawn]=2;
                   case 20: wWPickup[k]=CreateDynamicPickup(GetWeaponModel(2), 2, pos[0], pos[1], pos[2], y), wPickup[k][Model_]=2, wPickup[k][Spawn]=2;
                   case 21: wWPickup[k]=CreateDynamicPickup(GetWeaponModel(14), 2, pos[0], pos[1], pos[2], y), wPickup[k][Model_]=14, wPickup[k][Spawn]=2;
                   case 22: wWPickup[k]=CreateDynamicPickup(GetWeaponModel(15), 2, pos[0], pos[1], pos[2], y), wPickup[k][Model_]=15, wPickup[k][Spawn]=2;
				   case 23: wWPickup[k]=CreateDynamicPickup(GetWeaponModel(1), 2, pos[0], pos[1], pos[2], y), wPickup[k][Model_]=1, wPickup[k][Spawn]=2;
				   case 24: wWPickup[k]=CreateDynamicPickup(GetWeaponModel(10), 2, pos[0], pos[1], pos[2], y), wPickup[k][Model_]=10, wPickup[k][Spawn]=2;
				   case 25: wWPickup[k]=CreateDynamicPickup(GetWeaponModel(11), 2, pos[0], pos[1], pos[2], y), wPickup[k][Model_]=11, wPickup[k][Spawn]=2;
				   case 26: wWPickup[k]=CreateDynamicPickup(GetWeaponModel(12), 2, pos[0], pos[1], pos[2], y), wPickup[k][Model_]=12, wPickup[k][Spawn]=2;
				   case 27: wWPickup[k]=CreateDynamicPickup(GetWeaponModel(13), 2, pos[0], pos[1], pos[2], y), wPickup[k][Model_]=13, wPickup[k][Spawn]=2;
 			       case 28: wWPickup[k]=CreateDynamicPickup(GetWeaponModel(27), 2, pos[0], pos[1], pos[2], y), wPickup[k][Model_]=27, wPickup[k][Spawn]=2;
 			       case 29: wWPickup[k]=CreateDynamicPickup(GetWeaponModel(28), 2, pos[0], pos[1], pos[2], y), wPickup[k][Model_]=28, wPickup[k][Spawn]=2;
	    	}
	    	wPickup[k][WPos][0]=pos[0];
	    	wPickup[k][WPos][1]=pos[1];
	    	wPickup[k][WPos][2]=pos[2];
	    	wPickup[k][Wworld]=y;

	        new INI:File = INI_Open(PickupPath(k));
	        INI_SetTag(File, "lol");
	        INI_WriteFloat(File, "WPos1", wPickup[k][WPos][0]);
	        INI_WriteFloat(File, "WPos2", wPickup[k][WPos][1]);
	        INI_WriteFloat(File, "WPos3", wPickup[k][WPos][2]);
	        INI_WriteInt(File, "world", wPickup[k][Wworld]);
	        INI_WriteInt(File, "Model", wPickup[k][Model_]);
	        INI_WriteInt(File, "Spawn", wPickup[k][Spawn]);
	    	INI_Close(File);
	      }
	    }
	    case DM_DIALOG:
	    {
	      if(response)
	      {
			new sDm[10];
            switch(listitem)
            {
		    	case 0..16: format(sDm, 10, "%i", listitem+1), cmd_dm(playerid, sDm);
                case 17: cmd_ww(playerid);
                case 18: cmd_ww2(playerid);
                case 19: cmd_tdm1(playerid);
                case 20: cmd_tdm2(playerid);
                case 21: cmd_tdm3(playerid);
                case 22: cmd_dm(playerid, "20");
                case 23: format(sDm, 10, "%i", 1+random(17)), cmd_dm(playerid, sDm);
            }
	      }
	      if(!response && GetPVarInt(playerid, "GoBack")) cmd_minigames(playerid);
	      DeletePVar(playerid, "GoBack");

	    }
	    case DIALOG_SELL_HOUSE:
	    {
           if(!response) return 1;
	       SellHouse(playerid, GetHouseID(playerid));
	       return 1;
	    }
	    case 5748:
	    {
		  if(response)
		  {
			new str[5];
			format(str, sizeof(str), "%d", listitem);
		    cmd_gangcolor(playerid, str);
		  }
	    }
		case 5466:
		{
		  if(response)
		  {
		   switch(listitem)
		   {
			  case 0:
			  {
				   SetPlayerFightingStyle(playerid, 4);
				   PlayerInfo[playerid][pFS] = 4;
			  }
			  case 1:
			  {
                  if(pLevel[playerid][fist] >= 10)
                  {
				   SetPlayerFightingStyle(playerid, 5);
				   PlayerInfo[playerid][pFS] = 5;
                  }
                  else SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You need at least Level 10 in fist to use this Fighting Style!");
			  }
			  case 2:
			  {
                  if(pLevel[playerid][fist] >= 20)
                  {
				   SetPlayerFightingStyle(playerid, 6);
				   PlayerInfo[playerid][pFS] = 6;
                  }
                  else SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You need at least Level 20 in fist to use this Fighting Style!");
			  }
			  case 3:
			  {
                  if(pLevel[playerid][fist] >= 30)
                  {
				   SetPlayerFightingStyle(playerid, 7);
				   PlayerInfo[playerid][pFS] = 7;
                  }
                  else SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You need at least Level 30 in fist to use this Fighting Style!");
			  }
			  case 4:
			  {
                  if(pLevel[playerid][fist] >= 40)
                  {
				   SetPlayerFightingStyle(playerid, 15);
				   PlayerInfo[playerid][pFS] = 15;
                  }
                  else SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You need at least Level 40 in fist to use this Fighting Style!");
			  }
			  case 5:
			  {
                  if(pLevel[playerid][fist] >= 50)
                  {
				   SetPlayerFightingStyle(playerid, 16);
				   PlayerInfo[playerid][pFS] = 17;
                  }
                  else SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You need at least Level 50 in fist to use this Fighting Style!");
			  }
		   }
		   new str[128];
		   format(str, sizeof(str), "UPDATE `users` SET `FS` = %d WHERE `UserID` = '%d'", PlayerInfo[playerid][pFS], PlayerInfo[playerid][UserID]);
		   mysql_query(GTADM, str);
		  }
		}
	    case 6589:
	    {
	       if(response)
	       {
	    	 switch(listitem)
	    	 {
	    	  case 0: SendToCw(playerid, 1);
	    	  case 1: SendToCw(playerid, 2);
	    	  case 2: SendToCw(playerid, 3);
			 }
	       }
	    }
	    case 6591:
	    {
		    if(response)
		    {
	 	         cwplace=listitem;
				 foreach (new i : Player) if(nxsdm[i] == 1) SetCwPos(i);
				 new str[128];
				 format(str, sizeof(str), "{9F00BF}» DoDM «{0050BF}Admin %s has changed the clan war location", gAname(playerid));
				 SendClientMessageToAll(AdminInfo, str);
	 	    }

	    }
		case 1500:
		{
		    if(EventStarted > 0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}An event has already been started");
			if(response)
			{
			   switch(listitem)
			   {
				  case 0:
				  {
		           ShowPlayerDialog(playerid, 1502, DIALOG_STYLE_MSGBOX, "The Hidden Gift Box", "The Pickup will be created in your "RED_"current position", "<< Next", "Back >>");
				  }
				  case 1:
				  {
				   EventType=2;
		           ShowPlayerDialog(playerid, 1503, DIALOG_STYLE_INPUT, "Race Event", "Enter The RaceID for the Event", "<< Next", "Back >>");
				  }
				  case 2:
				  {
				   EventType=3;
		           ShowPlayerDialog(playerid, 1510, DIALOG_STYLE_LIST, "Event Start Time", "Start The Event in {2427B5}3 {7678F5}Minutes\nStart The Event in {2427B5}15 {7678F5}Minutes\nStart The Event in {2427B5}30 {7678F5}Minutes\nStart The Event in {2427B5}1 {7678F5}Hour\nStart The Event in {2427B5}3 {7678F5}Hours\nStart The Event in {2427B5}5 {7678F5}Hours\nStart The Event in {2427B5}10 {7678F5}Hours\nStart The Event in {2427B5}24 {7678F5}Hours", "<< Next", "Back >>");
				  }
				  case 3:
				  {
				   EventType=4;
		           ShowPlayerDialog(playerid, 1510, DIALOG_STYLE_LIST, "Event Start Time", "Start The Event in {2427B5}3 {7678F5}Minutes\nStart The Event in {2427B5}15 {7678F5}Minutes\nStart The Event in {2427B5}30 {7678F5}Minutes\nStart The Event in {2427B5}1 {7678F5}Hour\nStart The Event in {2427B5}3 {7678F5}Hours\nStart The Event in {2427B5}5 {7678F5}Hours\nStart The Event in {2427B5}10 {7678F5}Hours\nStart The Event in {2427B5}24 {7678F5}Hours", "<< Next", "Back >>");
				  }
				  case 4:
				  {
				    EventType=200;
		            ShowPlayerDialog(playerid, 1510, DIALOG_STYLE_LIST, "Event Start Time", "Start The Event in {2427B5}3 {7678F5}Minutes\nStart The Event in {2427B5}15 {7678F5}Minutes\nStart The Event in {2427B5}30 {7678F5}Minutes\nStart The Event in {2427B5}1 {7678F5}Hour\nStart The Event in {2427B5}3 {7678F5}Hours\nStart The Event in {2427B5}5 {7678F5}Hours\nStart The Event in {2427B5}10 {7678F5}Hours\nStart The Event in {2427B5}24 {7678F5}Hours", "<< Next", "Back >>");
				  }
				  case 5:
				  {
				    EventType=400;
		            ShowPlayerDialog(playerid, 1544, DIALOG_STYLE_INPUT, "Riddle Event", "Enter the answer for the Riddle\n"RED_"Note:- Use /EventText to type the riddle question", "<< Next", "Back >>");
				  }
				  case 6:
				  {
				    EventType=700;
		            ShowPlayerDialog(playerid, 1510, DIALOG_STYLE_LIST, "Event Start Time", "Start The Event in {2427B5}3 {7678F5}Minutes\nStart The Event in {2427B5}15 {7678F5}Minutes\nStart The Event in {2427B5}30 {7678F5}Minutes\nStart The Event in {2427B5}1 {7678F5}Hour\nStart The Event in {2427B5}3 {7678F5}Hours\nStart The Event in {2427B5}5 {7678F5}Hours\nStart The Event in {2427B5}10 {7678F5}Hours\nStart The Event in {2427B5}24 {7678F5}Hours", "<< Next", "Back >>");
			 	  }
				  case 7:
				  {
				    EventType=800;
		            ShowPlayerDialog(playerid, 1510, DIALOG_STYLE_LIST, "Event Start Time", "Start The Event in {2427B5}3 {7678F5}Minutes\nStart The Event in {2427B5}15 {7678F5}Minutes\nStart The Event in {2427B5}30 {7678F5}Minutes\nStart The Event in {2427B5}1 {7678F5}Hour\nStart The Event in {2427B5}3 {7678F5}Hours\nStart The Event in {2427B5}5 {7678F5}Hours\nStart The Event in {2427B5}10 {7678F5}Hours\nStart The Event in {2427B5}24 {7678F5}Hours", "<< Next", "Back >>");
			 	  }
				  case 8:
				  {
				    EventType=900;
		            ShowPlayerDialog(playerid, 1510, DIALOG_STYLE_LIST, "Event Start Time", "Start The Event in {2427B5}3 {7678F5}Minutes\nStart The Event in {2427B5}15 {7678F5}Minutes\nStart The Event in {2427B5}30 {7678F5}Minutes\nStart The Event in {2427B5}1 {7678F5}Hour\nStart The Event in {2427B5}3 {7678F5}Hours\nStart The Event in {2427B5}5 {7678F5}Hours\nStart The Event in {2427B5}10 {7678F5}Hours\nStart The Event in {2427B5}24 {7678F5}Hours", "<< Next", "Back >>");
				  }
				  case 9:
				  {
				    EventType=1000;
		            ShowPlayerDialog(playerid, 1510, DIALOG_STYLE_LIST, "Event Start Time", "Start The Event in {2427B5}3 {7678F5}Minutes\nStart The Event in {2427B5}15 {7678F5}Minutes\nStart The Event in {2427B5}30 {7678F5}Minutes\nStart The Event in {2427B5}1 {7678F5}Hour\nStart The Event in {2427B5}3 {7678F5}Hours\nStart The Event in {2427B5}5 {7678F5}Hours\nStart The Event in {2427B5}10 {7678F5}Hours\nStart The Event in {2427B5}24 {7678F5}Hours", "<< Next", "Back >>");
				  }
				  case 10:
				  {
				    EventType=1001;
		            ShowPlayerDialog(playerid, 1510, DIALOG_STYLE_LIST, "Event Start Time", "Start The Event in {2427B5}3 {7678F5}Minutes\nStart The Event in {2427B5}15 {7678F5}Minutes\nStart The Event in {2427B5}30 {7678F5}Minutes\nStart The Event in {2427B5}1 {7678F5}Hour\nStart The Event in {2427B5}3 {7678F5}Hours\nStart The Event in {2427B5}5 {7678F5}Hours\nStart The Event in {2427B5}10 {7678F5}Hours\nStart The Event in {2427B5}24 {7678F5}Hours", "<< Next", "Back >>");
				  }
				  case 11:
				  {
				    EventType=444;
		            ShowPlayerDialog(playerid, 1510, DIALOG_STYLE_LIST, "Event Start Time", "Start The Event in {2427B5}3 {7678F5}Minutes\nStart The Event in {2427B5}15 {7678F5}Minutes\nStart The Event in {2427B5}30 {7678F5}Minutes\nStart The Event in {2427B5}1 {7678F5}Hour\nStart The Event in {2427B5}3 {7678F5}Hours\nStart The Event in {2427B5}5 {7678F5}Hours\nStart The Event in {2427B5}10 {7678F5}Hours\nStart The Event in {2427B5}24 {7678F5}Hours", "<< Next", "Back >>");
                  }
	              case 12:
                  {
				    EventType=2429;
		            ShowPlayerDialog(playerid, 1510, DIALOG_STYLE_LIST, "Event Start Time", "Start The Event in {2427B5}3 {7678F5}Minutes\nStart The Event in {2427B5}15 {7678F5}Minutes\nStart The Event in {2427B5}30 {7678F5}Minutes\nStart The Event in {2427B5}1 {7678F5}Hour\nStart The Event in {2427B5}3 {7678F5}Hours\nStart The Event in {2427B5}5 {7678F5}Hours\nStart The Event in {2427B5}10 {7678F5}Hours\nStart The Event in {2427B5}24 {7678F5}Hours", "<< Next", "Back >>");
				  }
				  case 13:
				  {
					EventType=24;
					ShowPlayerDialog(playerid, 1510, DIALOG_STYLE_LIST, "Event Start Time", "Start The Event in {2427B5}3 {7678F5}Minutes\nStart The Event in {2427B5}15 {7678F5}Minutes\nStart The Event in {2427B5}30 {7678F5}Minutes\nStart The Event in {2427B5}1 {7678F5}Hour\nStart The Event in {2427B5}3 {7678F5}Hours\nStart The Event in {2427B5}5 {7678F5}Hours\nStart The Event in {2427B5}10 {7678F5}Hours\nStart The Event in {2427B5}24 {7678F5}Hours", "<< Next", "Back >>");
			      }
			      case 14:
			      {
					EventType=69;
					ShowPlayerDialog(playerid, 1542, DIALOG_STYLE_INPUT, "DM Event Kills", "Enter the amount of kills that is required to win the event", "Enter", "Exit");
			      }
                  case 15:
			      {
					EventType=70;
					ShowPlayerDialog(playerid, 1542, DIALOG_STYLE_INPUT, "DM Event Kills", "Enter the amount of kills that is required to win the event", "Enter", "Exit");
			      }
                  case 16:
			      {
					EventType=71;
					ShowPlayerDialog(playerid, 1542, DIALOG_STYLE_INPUT, "DM Event Kills", "Enter the amount of kills that is required to win the event", "Enter", "Exit");
			      }
                  case 17:
			      {
					EventType=72;
					ShowPlayerDialog(playerid, 1542, DIALOG_STYLE_INPUT, "DM Event Kills", "Enter the amount of kills that is required to win the event", "Enter", "Exit");
			      }
			      case 18:
			      {
					EventType=6969;
					ShowPlayerDialog(playerid, 1510, DIALOG_STYLE_LIST, "Event Start Time", "Start The Event in {2427B5}3 {7678F5}Minutes\nStart The Event in {2427B5}15 {7678F5}Minutes\nStart The Event in {2427B5}30 {7678F5}Minutes\nStart The Event in {2427B5}1 {7678F5}Hour\nStart The Event in {2427B5}3 {7678F5}Hours\nStart The Event in {2427B5}5 {7678F5}Hours\nStart The Event in {2427B5}10 {7678F5}Hours\nStart The Event in {2427B5}24 {7678F5}Hours", "<< Next", "Back >>");
			      }
			      case 19:
			      {
					EventType=6970;
					ShowPlayerDialog(playerid, 1510, DIALOG_STYLE_LIST, "Event Start Time", "Start The Event in {2427B5}3 {7678F5}Minutes\nStart The Event in {2427B5}15 {7678F5}Minutes\nStart The Event in {2427B5}30 {7678F5}Minutes\nStart The Event in {2427B5}1 {7678F5}Hour\nStart The Event in {2427B5}3 {7678F5}Hours\nStart The Event in {2427B5}5 {7678F5}Hours\nStart The Event in {2427B5}10 {7678F5}Hours\nStart The Event in {2427B5}24 {7678F5}Hours", "<< Next", "Back >>");
			      }
			      case 20:
			      {
					EventType=6971;
					ShowPlayerDialog(playerid, 1510, DIALOG_STYLE_LIST, "Event Start Time", "Start The Event in {2427B5}3 {7678F5}Minutes\nStart The Event in {2427B5}15 {7678F5}Minutes\nStart The Event in {2427B5}30 {7678F5}Minutes\nStart The Event in {2427B5}1 {7678F5}Hour\nStart The Event in {2427B5}3 {7678F5}Hours\nStart The Event in {2427B5}5 {7678F5}Hours\nStart The Event in {2427B5}10 {7678F5}Hours\nStart The Event in {2427B5}24 {7678F5}Hours", "<< Next", "Back >>");
			      }
			      case 21:
			      {
					EventType=73;
					ShowPlayerDialog(playerid, 1542, DIALOG_STYLE_INPUT, "DM Event Kills", "Enter the amount of kills that is required to win the event", "Enter", "Exit");
			      }
			      case 22:
			      {
					EventType=6972;
					ShowPlayerDialog(playerid, 1510, DIALOG_STYLE_LIST, "Event Start Time", "Start The Event in {2427B5}3 {7678F5}Minutes\nStart The Event in {2427B5}15 {7678F5}Minutes\nStart The Event in {2427B5}30 {7678F5}Minutes\nStart The Event in {2427B5}1 {7678F5}Hour\nStart The Event in {2427B5}3 {7678F5}Hours\nStart The Event in {2427B5}5 {7678F5}Hours\nStart The Event in {2427B5}10 {7678F5}Hours\nStart The Event in {2427B5}24 {7678F5}Hours", "<< Next", "Back >>");
				  }
				  case 23:
			      {
					EventType=6973;
					ShowPlayerDialog(playerid, 1510, DIALOG_STYLE_LIST, "Event Start Time", "Start The Event in {2427B5}3 {7678F5}Minutes\nStart The Event in {2427B5}15 {7678F5}Minutes\nStart The Event in {2427B5}30 {7678F5}Minutes\nStart The Event in {2427B5}1 {7678F5}Hour\nStart The Event in {2427B5}3 {7678F5}Hours\nStart The Event in {2427B5}5 {7678F5}Hours\nStart The Event in {2427B5}10 {7678F5}Hours\nStart The Event in {2427B5}24 {7678F5}Hours", "<< Next", "Back >>");
				  }
				  case 24:
			      {
					EventType=6974;
					ShowPlayerDialog(playerid, 1501, DIALOG_STYLE_LIST, "Enter player name", "Enter the player name of a hit", "<< Next", "Back >>");
				  }
			   }
			}
		}
		case 1503:
		{
		    if(EventStarted > 0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}An event has already been started");
			if(!response) ShowPlayerDialog(playerid, 1500, DIALOG_STYLE_LIST, "{2427B5}GTADM {FFFFFF}- {7678F5}Event Creation ", "Start a DM Event\nStart The Hidden 'Gift Box' Event\nStart Race Event\nStart Derby Event\nStart Fallout Event", "Select", "Exit");
			else
			{
		   	  new rend=strval(inputtext);
			  if(rend < 0 || rend > (MAX_RACES-1)) ShowPlayerDialog(playerid, 1503, DIALOG_STYLE_INPUT, "Race Event", "Enter The RaceID for the Event \n"RED_"This Race Doesnt Exist", "<< Next", "Back >>");
			  else if(RaceInfo[rend][RaceCpCount] <= 0)  ShowPlayerDialog(playerid, 1503, DIALOG_STYLE_INPUT, "Race Event", "Enter The RaceID for the Event \n"RED_"This Race Doesnt Exist", "<< Next", "Back >>");
			  else
			  {
				EventType=2;
				EventRaceType=rend;
				ShowPlayerDialog(playerid, 1510, DIALOG_STYLE_LIST, "Event Start Time", "Start The Event in {2427B5}3 {7678F5}Minutes\nStart The Event in {2427B5}15 {7678F5}Minutes\nStart The Event in {2427B5}30 {7678F5}Minutes\nStart The Event in {2427B5}1 {7678F5}Hour\nStart The Event in {2427B5}3 {7678F5}Hours\nStart The Event in {2427B5}5 {7678F5}Hours\nStart The Event in {2427B5}10 {7678F5}Hours\nStart The Event in {2427B5}24 {7678F5}Hours", "<< Next", "Back >>");
			  }
			}

		}
		case 1502:
		{
		    if(EventStarted > 0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}An event has already been started");
			if(!response) ShowPlayerDialog(playerid, 1500, DIALOG_STYLE_LIST, "{2427B5}GTADM {FFFFFF}- {7678F5}Event Creation ", "Start a DM Event\nStart The Hidden 'Gift Box' Event\nStart Race Event\nStart Derby Event\nStart Fallout Event", "Select", "Exit");
			else
			{
				EventType=1;
				ShowPlayerDialog(playerid, 1510, DIALOG_STYLE_LIST, "Event Start Time", "Start The Event in {2427B5}3 {7678F5}Minutes\nStart The Event in {2427B5}15 {7678F5}Minutes\nStart The Event in {2427B5}30 {7678F5}Minutes\nStart The Event in {2427B5}1 {7678F5}Hour\nStart The Event in {2427B5}3 {7678F5}Hours\nStart The Event in {2427B5}5 {7678F5}Hours\nStart The Event in {2427B5}10 {7678F5}Hours\nStart The Event in {2427B5}24 {7678F5}Hours", "<< Next", "Back >>");
				GetPlayerPos(playerid, EventPickupCoords[0], EventPickupCoords[1], EventPickupCoords[2]);
			}

		}
		case 1501:
		{
		    if(EventStarted > 0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}An event has already been started");
			if(!response) ShowPlayerDialog(playerid, 1500, DIALOG_STYLE_LIST, "{2427B5}GTADM {FFFFFF}- {7678F5}Event Creation ", "Start a DM Event\nStart The Hidden 'Gift Box' Event\nStart Race Event\nStart Derby Event\nStart Fallout Event", "Select", "Exit");
			else
			{
				EventType=6+listitem;
				switch(listitem)
				{
					//case 0..17: ShowPlayerDialog(playerid, 1542, DIALOG_STYLE_INPUT, "DM Event Kills", "Enter the amount of kills that is required to win the event", "Enter", "Exit");
					case 2..3: ShowPlayerDialog(playerid, 1542, DIALOG_STYLE_INPUT, "DM Event Kills", "Enter the amount of kills that is required to win the event", "Enter", "Exit");
                    case 5: ShowPlayerDialog(playerid, 1542, DIALOG_STYLE_INPUT, "DM Event Kills", "Enter the amount of kills that is required to win the event", "Enter", "Exit");
                    case 8: ShowPlayerDialog(playerid, 1542, DIALOG_STYLE_INPUT, "DM Event Kills", "Enter the amount of kills that is required to win the event", "Enter", "Exit");
                    case 24: ShowPlayerDialog(playerid, 1592, DIALOG_STYLE_INPUT, "Enter the hit name", "Enter the name of a player to kill", "Enter", "Exit");
		            default:ShowPlayerDialog(playerid, 1510, DIALOG_STYLE_LIST, "Event Start Time", "Start The Event in {2427B5}3 {7678F5}Minutes\nStart The Event in {2427B5}15 {7678F5}Minutes\nStart The Event in {2427B5}30 {7678F5}Minutes\nStart The Event in {2427B5}1 {7678F5}Hour\nStart The Event in {2427B5}3 {7678F5}Hours\nStart The Event in {2427B5}5 {7678F5}Hours\nStart The Event in {2427B5}10 {7678F5}Hours\nStart The Event in {2427B5}24 {7678F5}Hours", "<< Next", "Back >>");
				}
			}
		}
		case 1542:
		{

		    if(EventStarted > 0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}An event has already been started");
			if(!response)
			{
			       //new str[256];
				    //for(new x=1; x< 18; x++) format(str, sizeof(str), "%s\nDM%d", str, x);
			      /* for(new x=2; x< 4; x++) format(str, sizeof(str), "%s\nDM%d", str, x);
	               for(new x=5; x< 6; x++) format(str, sizeof(str), "%s\nDM%d", str, x);
			       for(new x=8; x< 9; x++) format(str, sizeof(str), "%s\nDM%d", str, x);
			      // strcat(str, "\nGunGame"GRAY_" (The first player to reach the minigun level will win the event)");*/
		           //ShowPlayerDialog(playerid, 1501, DIALOG_STYLE_LIST, "Select The DM Event", str, "<< Next", "Back >>");
		           //SendWarning(playerid, "No where to return.. damn..");

			}
			else
			{
			   new io=strval(inputtext);
			   if(io == 0) ShowPlayerDialog(playerid, 1542, DIALOG_STYLE_INPUT, "DM Event Kills", "Enter the amount of kills that is required to win the event", "Enter", "Exit");
			   else EventKS=io, ShowPlayerDialog(playerid, 1510, DIALOG_STYLE_LIST, "Event Start Time", "Start The Event in {2427B5}3 {7678F5}Minutes\nStart The Event in {2427B5}15 {7678F5}Minutes\nStart The Event in {2427B5}30 {7678F5}Minutes\nStart The Event in {2427B5}1 {7678F5}Hour\nStart The Event in {2427B5}3 {7678F5}Hours\nStart The Event in {2427B5}5 {7678F5}Hours\nStart The Event in {2427B5}10 {7678F5}Hours\nStart The Event in {2427B5}24 {7678F5}Hours", "<< Next", "Back >>");
			}
		}
	/*	case 1592:
		{

		    if(EventStarted > 0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}An event has already been started");
			if(!response)
			{

			}
			else
			{
			   new io=strval(inputtext);
			   foreach(new i : Player)
			   if(io == 0) ShowPlayerDialog(playerid, 1592, DIALOG_STYLE_INPUT, "Enter the hit name", "Enter the name of a player to kill", "Enter", "Exit");
			   else eventhit[i]=io, ShowPlayerDialog(playerid, 1510, DIALOG_STYLE_LIST, "Event Start Time", "Start The Event in {2427B5}3 {7678F5}Minutes\nStart The Event in {2427B5}15 {7678F5}Minutes\nStart The Event in {2427B5}30 {7678F5}Minutes\nStart The Event in {2427B5}1 {7678F5}Hour\nStart The Event in {2427B5}3 {7678F5}Hours\nStart The Event in {2427B5}5 {7678F5}Hours\nStart The Event in {2427B5}10 {7678F5}Hours\nStart The Event in {2427B5}24 {7678F5}Hours", "<< Next", "Back >>");
			   eventhit[i]=1;
			}
		}*/
		case 1544:
		{
		    if(EventStarted > 0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}An event has already been started");
			if(!response) ShowPlayerDialog(playerid, 1500, DIALOG_STYLE_LIST, "{2427B5}GTADM {FFFFFF}- {7678F5}Event Creation ", "Start a DM Event\nStart The Hidden 'Gift Box' Event\nStart Race Event\nStart Derby Event\nStart Fallout Event", "Select", "Exit");
			if(strlen(inputtext) < 1) ShowPlayerDialog(playerid, 1544, DIALOG_STYLE_INPUT, "Riddle Event", "Too Short answer\nEnter the answer for the Riddle\n"RED_"Note:- Use /EventText to type the riddle question", "<< Next", "Back >>");
			else
			{
			  format(EventAnswer, sizeof(EventAnswer), "%s", inputtext);
			  ShowPlayerDialog(playerid, 1510, DIALOG_STYLE_LIST, "Event Start Time", "Start The Event in {2427B5}1 {7678F5}Minutes\nStart The Event in {2427B5}3 {7678F5}Minutes", "<< Next", "Back >>");

			}
		}
		case 1510:
		{
 		     if(EventStarted > 0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}An event has already been started");
			 if(!response)
			 {
			   switch(EventType)
			   {

				case 1: ShowPlayerDialog(playerid, 1502, DIALOG_STYLE_MSGBOX, "The Hidden Gift Box", "The Pickup will be created in your "RED_"current position", "<< Next", "Back >>");
				case 2: ShowPlayerDialog(playerid, 1503, DIALOG_STYLE_INPUT, "Race Event", "Enter The RaceID for the Event", "<< Next", "Back >>");
				case 3: ShowPlayerDialog(playerid, 1510, DIALOG_STYLE_LIST, "Event Start Time", "Start The Event in {2427B5}3 {7678F5}Minutes\nStart The Event in {2427B5}15 {7678F5}Minutes\nStart The Event in {2427B5}30 {7678F5}Minutes\nStart The Event in {2427B5}1 {7678F5}Hour\nStart The Event in {2427B5}3 {7678F5}Hours\nStart The Event in {2427B5}5 {7678F5}Hours\nStart The Event in {2427B5}10 {7678F5}Hours\nStart The Event in {2427B5}24 {7678F5}Hours", "<< Next", "Back >>");
				case 4: ShowPlayerDialog(playerid, 1510, DIALOG_STYLE_LIST, "Event Start Time", "Start The Event in {2427B5}3 {7678F5}Minutes\nStart The Event in {2427B5}15 {7678F5}Minutes\nStart The Event in {2427B5}30 {7678F5}Minutes\nStart The Event in {2427B5}1 {7678F5}Hour\nStart The Event in {2427B5}3 {7678F5}Hours\nStart The Event in {2427B5}5 {7678F5}Hours\nStart The Event in {2427B5}10 {7678F5}Hours\nStart The Event in {2427B5}24 {7678F5}Hours", "<< Next", "Back >>");
				case 400:ShowPlayerDialog(playerid, 1544, DIALOG_STYLE_INPUT, "Riddle Event", "Enter the answer for the Riddle\n"RED_"Note:- Use /EventText to type the riddle question", "<< Next", "Back >>");
				case 700: ShowPlayerDialog(playerid, 1510, DIALOG_STYLE_LIST, "Event Start Time", "Start The Event in {2427B5}3 {7678F5}Minutes\nStart The Event in {2427B5}15 {7678F5}Minutes\nStart The Event in {2427B5}30 {7678F5}Minutes\nStart The Event in {2427B5}1 {7678F5}Hour\nStart The Event in {2427B5}3 {7678F5}Hours\nStart The Event in {2427B5}5 {7678F5}Hours\nStart The Event in {2427B5}10 {7678F5}Hours\nStart The Event in {2427B5}24 {7678F5}Hours", "<< Next", "Back >>");
				case 800: ShowPlayerDialog(playerid, 1510, DIALOG_STYLE_LIST, "Event Start Time", "Start The Event in {2427B5}3 {7678F5}Minutes\nStart The Event in {2427B5}15 {7678F5}Minutes\nStart The Event in {2427B5}30 {7678F5}Minutes\nStart The Event in {2427B5}1 {7678F5}Hour\nStart The Event in {2427B5}3 {7678F5}Hours\nStart The Event in {2427B5}5 {7678F5}Hours\nStart The Event in {2427B5}10 {7678F5}Hours\nStart The Event in {2427B5}24 {7678F5}Hours", "<< Next", "Back >>");
				case 900: ShowSetEvent(playerid);
				case 1000: ShowSetEvent(playerid);
				case 1001: ShowSetEvent(playerid);
				case 444: ShowSetEvent(playerid);
				case 2429: ShowSetEvent(playerid);
				default:
				{
					new str[256];
					 //for(new x=1; x< 18; x++) format(str, sizeof(str), "%s\nDM%d", str, x);
			        for(new x=2; x< 4; x++) format(str, sizeof(str), "%s\nDM%d", str, x);
	                for(new x=5; x< 6; x++) format(str, sizeof(str), "%s\nDM%d", str, x);
			        for(new x=8; x< 9; x++) format(str, sizeof(str), "%s\nDM%d", str, x);
			      // strcat(str, "\nGunGame"GRAY_" (The first player to reach the minigun level will win the event)");
					ShowPlayerDialog(playerid, 1501, DIALOG_STYLE_LIST, "Select The DM Event", str, "<< Next", "Back >>");
				}

			   }
			 }
			 else
			 {
		       new d=gettime();
			   SendClientMessage(playerid, 0xE8AF02FF, "» Event « The Event has been successfully created!");
			   SendClientMessage(playerid, GRAY, "-Note- The Event will be cancelled once the server restarts!");
		       switch(listitem)
		       {
				 case 0:
				 {
			         if(EventType == 400) EventStartTime=d+60;
			         else EventStartTime=d+180;
				 }
				 case 1:
				 {
			         if(EventType == 400) EventStartTime=d+180;
			         else EventStartTime=d+900;
				 }
				 case 2:EventStartTime=d+1800;
				 case 3:EventStartTime=d+3600;
				 case 4:EventStartTime=d+10800;
				 case 5:EventStartTime=d+18000;
				 case 6:EventStartTime=d+36000;
				 case 7:EventStartTime=d+86400;
		       }
               EventStarted=10;
			 }
		}

        case 32700:
        {
			 if(response)
			 {
               DerbyVote[DerbyMapsTroll[listitem]]++;
               new str[128];
               format(str, sizeof(str), "-Derby Vote- %s has voted for \"%s\" (%d votes)", pName[playerid], DerbyInfo[DerbyMapsTroll[listitem]][DerbyMaps], DerbyVote[DerbyMapsTroll[listitem]]);
			   foreach(new i : Player) if(GetPVarInt(i, "InDerby")) SendClientMessage(i, GRAY, str);
			 }
        }
        case 212:
        {
		   if(response)
		   {
               if(Anims[listitem][playonce] == 0) ApplyAnimation(playerid, Anims[listitem][Lib], Anims[listitem][AnimName], 4.1, 1, 1, 1, 1, 1, 1);
               else ApplyAnimation(playerid, Anims[listitem][Lib], Anims[listitem][AnimName], 4.1, 0, 1, 1, 1, 1, 1);
	           if(listitem == 68) GiveMedal(playerid, 52);
	   	   }
        }
		case 1349:
		{
		#if defined USEDRIFT

			if(response)
			{
			  new k[15];
			  format(k, sizeof(k), "%d", listitem+1);
			  cmd_drift(playerid, k);
			}
			if(!response && GetPVarInt(playerid, "GoBack")) cmd_minigames(playerid);
			DeletePVar(playerid, "GoBack");
		#endif
		}
	    case 3000:
	    {
            if(!response)
	        {
		       pMods[playerid][18] = 1;
		       pMods[playerid][19] = 1;
		       new hhh=PlayerInfo[playerid][pHouse];
               new v = CreateVehicle(PlayerInfo[playerid][pCar], hInfo[hhh][CarX], hInfo[hhh][CarY], hInfo[hhh][CarZ], hInfo[hhh][CarA], pMods[playerid][18], pMods[playerid][19], 3600000);
			   ResetCarInfo(v);
               VehicleInfo[v][ID]=v;
               VehicleInfo[v][Player]=playerid;
               VehicleInfo[v][Owned]=1;
               ShowPlayerDialog(playerid, 4454, DIALOG_STYLE_MSGBOX, "Car Bought", ""GREENBLUE_"Congratulations"LIGHTYELLOW_" The car has been delievered to your house\n"LIGHTYELLOW_"To spawn your vehicle use /car\n"LIGHTYELLOW_"To change car color use /carcolor<1><2>\n"LIGHTYELLOW_"You can also use(/wheels) (/nos) (/lowride) to mod your vehicle", "ok", "");
		    }
	        else
	        {
		       switch(listitem)
		       {
		         case 0: pMods[playerid][18] = 1;
	             case 1: pMods[playerid][18] = 158;
		         case 2: pMods[playerid][18] = 6;
		         case 3: pMods[playerid][18] = 126;
		         case 4: pMods[playerid][18] = 3;
		         case 5: pMods[playerid][18] = 0;
		         case 6: pMods[playerid][18] = 30;
		         case 7: pMods[playerid][18] = 16;
	      	     case 8: pMods[playerid][18] = 24;
		         case 9: pMods[playerid][18] = 2;
		         case 10: pMods[playerid][18] = 181;
		       }
		       ShowPlayerDialog(playerid, 3001, DIALOG_STYLE_LIST, "Pick Your Car Color 2", ""WHITE_"White\n"BLUE_"Blue\n"YELLOW_"Yellow\n"PINK_"Pink\n"RED_"Red\n"BLACK_"Black\n"WOOD_"Brown\n"GREEN_"Green\n"GRAY_"Gray\n"LIGHTBLUE_"Sky Blue\n"LIME_"Light Green", "Choose", "Cancel");
	        }
	        new Query[256];
	        format(Query, sizeof(Query), "UPDATE `users` SET `Mod19` = %d , `Mod20` = %d WHERE `UserID` = '%d'", pMods[playerid][18], pMods[playerid][19], PlayerInfo[playerid][UserID]);
	        mysql_query(GTADM, Query);
	    }
		case 2001:
		{
		   if(response)
		   {
				switch(listitem)
				{
				  case 0: ShowPlayerDialog(playerid, 2002, DIALOG_STYLE_LIST, "My Wardrobe - Glasses", "{1B87E0}Wear Glasses\n{1B87E0}Remove Glasses\n{1B87E0}Edit Glasses", "Select", "Cancel");
				  case 1: ShowPlayerDialog(playerid, 2003, DIALOG_STYLE_LIST, "My Wardrobe - Caps", "{1B87E0}Wear Cap\n{1B87E0}Remove Cap\n{1B87E0}Edit Cap", "Select", "Cancel");
				}
		   }
		   else ShowHouseMenu(playerid);
		}

		case 7915:
		{
		   if(response)
		   {
			 new rows, Float:pos[3];
		     for(new i=0; i<MAX_MAPS; i++)
		     {
				 if(strlen(MI[i][mapname]) > 0)
				 {
					if(rows == listitem)
					{
					   if(IsValidDynamicObject(MI[i][objects][1]))
					   {
						   GetDynamicObjectPos(MI[i][objects][1], pos[0], pos[1], pos[2]);
						   SetPlayerPos(playerid, pos[0]+2.0, pos[1]+2.0, pos[2]+5.0);

                           SetPlayerVirtualWorldEX(playerid, MI[i][m_world]);
                           SetPlayerInterior(playerid, MI[i][m_int]);
					   }
					   else if(IsValidObject(MI[i][objects][1]))
					   {
						   GetObjectPos(MI[i][objects][1], pos[0], pos[1], pos[2]);
						   SetPlayerPos(playerid, pos[0]+2.0, pos[1]+2.0, pos[2]+5.0);
					   }
					   break;
					}
		            rows++;
				 }
		     }

		   }
		}

		case 4523:
		{
	#if defined USEDRIFT

			if(!response) ShowPlayerDialog(playerid, 4523, DIALOG_STYLE_LIST, "Select Your Vehicle", "Alpha\nBanshee\nBlista Compact\nBuffalo\nBullet\nCheetah\nClub\nEuros\nFlash\nHotring Racer\nHotring Racer A\nHotring Racer B\nInfernus\nJester\nPhoenix\nSabre\nSuper GT\nTurismo\nUranus\nZR-350\nElegy\nSultan", "Select", "Cancel" );
			else
			{
                new modee[] = { 602, 429, 496, 402, 541, 415, 589, 587, 565, 494, 502, 503, 411, 559, 603, 475, 506, 451, 558, 477, 562, 560};
				new Map=GetPVarInt(playerid, "DriftMap");
		  	    new ah;
				switch(Map)
				{
					  case 1: ah= CreateVehicle(modee[listitem], -300.4979, 1516.8981, 75.3594, 179.3745, -1, -1, 10), SetPlayerPosEx(playerid, -300.4979, 1516.8981, 75.3594, 179.3745, 0), pDCOUNTER[playerid]= 120, pDCP[playerid] = CreateDynamicRaceCP(1, -436.2558, 1441.0142, 33.323, 0.0, 0.0, 0.0, 15.0, 8011, -1, playerid, 1000.0);
					  case 2: ah= CreateVehicle(modee[listitem], -2425.3379, -607.1253, 132.5625, 33.3634, -1, -1, 10), SetPlayerPosEx(playerid, -2425.3379, -607.1253, 132.5625, 33.3634, 0), pDCOUNTER[playerid]= 150, pDCP[playerid] = CreateDynamicRaceCP(1, -2783.0325, -487.6381, 7.1841, 0.0, 0.0, 0.0, 15.0, 8011, -1, playerid, 1000.0);
					  case 3: ah= CreateVehicle(modee[listitem], 1294.8658, -712.7390, 93.0439, 288.0684, -1, -1, 10), SetPlayerPosEx(playerid, 1294.8658, -712.7390, 93.0439, 288.0684, 0), pDCOUNTER[playerid]= 150, pDCP[playerid] = CreateDynamicRaceCP(1, 1365.9576, -932.0800, 33.9166, 0.0, 0.0, 0.0, 15.0, 8011, -1, playerid, 1000.0);
					  case 4: ah= CreateVehicle(modee[listitem], 1477.0559, 1822.6667, 10.5393, 181.4275, -1, -1, 10), SetPlayerPosEx(playerid, 1477.0559, 1822.6667, 10.5393, 181.4275, 0), pDCOUNTER[playerid]= 150, pDCP[playerid] = CreateDynamicRaceCP(1, 1475.1215, 1192.8035, 10.5474, 0.0, 0.0, 0.0, 15.0, 8011, -1, playerid, 1000.0);
					  case 5: ah= CreateVehicle(modee[listitem], -1084.7936, 407.9283, 14.1484, 134.5673, -1, -1, 10), SetPlayerPosEx(playerid, -1084.7936, 407.9283, 14.1484, 134.5673, 0), pDCOUNTER[playerid]= 150, pDCP[playerid] = CreateDynamicRaceCP(1, -1694.6788, -386.5874, 14.1484, 0.0, 0.0, 0.0, 15.0, 8011, -1, playerid, 1000.0);
					  case 6: ah= CreateVehicle(modee[listitem], 269.1199, 2945.2686, 10.5606, 348.3203, -1, -1, 10), SetPlayerPosEx(playerid, 269.1199, 2945.2686, 10.5606, 348.3203, 0), pDCOUNTER[playerid]= 150, pDCP[playerid] = CreateDynamicRaceCP(1, -48.1406, 3329.1758, 3.9800, 0.0, 0.0, 0.0, 15.0, 8011, -1, playerid, 1000.0);
					  case 7: ah= CreateVehicle(modee[listitem], 1252.6611, -2055.8806, 59.3632, 267.1501, -1, -1, 10), SetPlayerPosEx(playerid, 1252.6611, -2055.8806, 59.3632, 267.1501, 0), pDCOUNTER[playerid]= 150, pDCP[playerid] = CreateDynamicRaceCP(1, 1426.0657, -1882.1542, 13.1324, 0.0, 0.0, 0.0, 15.0, 8011, -1, playerid, 1000.0);
				}
			    ResetCarInfo(ah);
		  	    AdminCar[ah]=1;
		  	    VehicleInfo[ah][Player]=INVALID_PLAYER_ID;

		  	    SetVehicleVirtualWorld(ah, GetPlayerVirtualWorld(playerid));
		        PutPlayerInVehicle(playerid, ah, 0);
				AddVehicleComponent(ah, 1087);
				AddVehicleComponent(ah, 1080);
             	CarNitro[ah]=1;

				TogglePlayerControllable2(playerid, 0);
				SetPVarInt(playerid, "DriftScore", 0);
				pDrift[playerid]=0;
				SetPVarInt(playerid, "Drifter", 2);
				SetPVarInt(playerid, "Combo", 0);

				SetTimerEx("Drift3", 1000, false, "i", playerid);
				SetTimerEx("Drift2", 2000, false, "i", playerid);
				SetTimerEx("Drift1", 3000, false, "i", playerid);
				SetTimerEx("StartArenaDrift", 4000, false, "i", playerid);
				new str[30];
				format(str, sizeof(str), "%s", TimeConvert(pDCOUNTER[playerid]));
				TextDrawSetString(pDriftTD[playerid][0], str);
				DisablePlayerRaceCheckpoint(playerid);
			///	TextDrawSetStringEX(pDriftTD[playerid][1], "_");
			}
		#endif
		}
		case 2002:
		{
		   if(response)
		   {
			  switch(listitem)
			  {
				  case 0:
				  {
					  if(strlen(PlayerClothes[playerid][GlassString]) > 20)
					  {
                        PlayerClothes[playerid][Glass] = 1;
                        SetGlass(playerid);
					  }
					  else SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You dont have any stored Glasses in your Wardrobe");
				  }
				  case 1:
				  {
                         PlayerClothes[playerid][Glass] = 0;
                         RemovePlayerAttachedObject(playerid, 1);
				  }
				  case 2:
				  {
						 if(PlayerClothes[playerid][Glass] == 1 && IsPlayerAttachedObjectSlotUsed(playerid, 1))
						 {
                             EditAttachedObject(playerid, 1);
						 }
						 else SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You are not wearing glasses");
				  }
			  }
		   }
		   else ShowPlayerDialog(playerid, 2001, DIALOG_STYLE_LIST, "My Wardrobe", "{1B87E0}Glasses\n{1B87E0}Caps", "Select", "Cancel");
		}
		case 2003:
		{
		   if(response)
		   {
			  switch(listitem)
			  {
				  case 0:
				  {
					  if(strlen(PlayerClothes[playerid][HatString]) > 20)
					  {
                        PlayerClothes[playerid][Caps] = 1;
                        SetCaps(playerid);
                      }
					  else SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You dont have any stored Caps in your Wardrobe");
				  }
				  case 1:
				  {
                         PlayerClothes[playerid][Caps] = 0;
                         RemovePlayerAttachedObject(playerid, 2);
				  }
				  case 2:
				  {
						 if(PlayerClothes[playerid][Caps] == 1 && IsPlayerAttachedObjectSlotUsed(playerid, 2))
						 {
                             EditAttachedObject(playerid, 2);
						 }
						 else SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You are not wearing a cap");

				  }
			  }
		   }
		   else ShowPlayerDialog(playerid, 2001, DIALOG_STYLE_LIST, "My Wardrobe", "{1B87E0}Glasses\n{1B87E0}Caps", "Select", "Cancel");

		}
	    case 3001:
	    {
           if(!response)
	       {
		       pMods[playerid][18] = 1;
		       pMods[playerid][19] = 1;
		       new hhh=PlayerInfo[playerid][pHouse];
               new v = CreateVehicle(PlayerInfo[playerid][pCar], hInfo[hhh][CarX], hInfo[hhh][CarY], hInfo[hhh][CarZ], hInfo[hhh][CarA], pMods[playerid][18], pMods[playerid][19], 3600000);
			   ResetCarInfo(v);
               VehicleInfo[v][ID]=v;
               VehicleInfo[v][Player]=playerid;
               VehicleInfo[v][Owned]=1;
               ShowPlayerDialog(playerid, 4454, DIALOG_STYLE_MSGBOX, "Car Bought", ""GREENBLUE_"Congratulations"LIGHTYELLOW_" The car has been delievered to your house\n"LIGHTYELLOW_"To spawn your vehicle use /car\n"LIGHTYELLOW_"To change car color use /carcolor<1><2>\n"LIGHTYELLOW_"You can also use(/wheels) (/nos) (/lowride) to mod your vehicle", "ok", "");
           }
           else
           {
		       switch(listitem)
		       {
		         case 0: pMods[playerid][19] = 1;
	             case 1: pMods[playerid][19] = 158;
		         case 2: pMods[playerid][19] = 6;
		         case 3: pMods[playerid][19] = 126;
		         case 4: pMods[playerid][19] = 3;
		         case 5: pMods[playerid][19] = 0;
		         case 6: pMods[playerid][19] = 30;
		         case 7: pMods[playerid][19] = 16;
	      	     case 8: pMods[playerid][19] = 24;
		         case 9: pMods[playerid][19] = 2;
		         case 10: pMods[playerid][19] = 181;
		       }
		       new hhh=PlayerInfo[playerid][pHouse];
               new v = CreateVehicle(PlayerInfo[playerid][pCar], hInfo[hhh][CarX], hInfo[hhh][CarY], hInfo[hhh][CarZ], hInfo[hhh][CarA], pMods[playerid][18], pMods[playerid][19], 3600000);
			   ResetCarInfo(v);
               VehicleInfo[v][ID]=v;
               VehicleInfo[v][Player]=playerid;
               VehicleInfo[v][Owned]=1;
               ShowPlayerDialog(playerid, 4454, DIALOG_STYLE_MSGBOX, "Car Bought", ""GREENBLUE_"Congratulations"LIGHTYELLOW_" The car has been delievered to your house\n"LIGHTYELLOW_"To spawn your vehicle use /car\n"LIGHTYELLOW_"To change car color use /carcolor<1><2>\n"LIGHTYELLOW_"You can also use(/wheels) (/nos) (/lowride) to mod your vehicle", "ok", "");
           }
           new Query[256];
           format(Query, sizeof(Query), "UPDATE `users` SET `Mod19` = %d , `Mod20` = %d WHERE `UserID` = '%d'", pMods[playerid][18], pMods[playerid][19], PlayerInfo[playerid][UserID]);
           mysql_query(GTADM, Query);
	    }
		case 8540:
		{
		  new str[128];
		  if(!response) format(str, sizeof(str), "{ACACAC}*** %s {FF9900}doesnt thank for this server!", pName[playerid], playerid);
		  else if(response) GiveMedal(playerid, 34), format(str, sizeof(str), "{ACACAC}*** %s {FF9900}thanks for this server!", pName[playerid], playerid);
          new color = GetPlayerColor(playerid);
          SendClientMessageToAll(color, str);
	    }

	    case 8544:
	    {
          //if(!response && PlayerInfo[playerid][pScore] < 300 && GetPlayerVirtualWorld(playerid) == 0) cmd_info(playerid);
		  if(response)
		  {
		    new str[1224];
		    strcat(str, "{0AA1FF}What this server is all about?\n{FFFFFF}This is a SA-MP Deathmatch & Freeroam server which means that you are allowed to kill everyone to gain MONEY and SCORE\n");
		    strcat(str, "You can create your own gang , Invite your friends to start a war against other gangs, and capture turfs all over The San Andreas MAP\n\n{0AA1FF}Teleports - {FFFFFF}You can Teleport all around The San Andreas MAP (Check {0AA1FF}/Teleports{FFFFFF})");
			strcat(str, "\n{0AA1FF}Minigames - {FFFFFF}this server contains some minigames such as derby and lms which are based on deathmatch ruleZ\n{0AA1FF}Job - {FFFFFF}Select your job from 7 different available jobs\n{0AA1FF}Buying your own House & Car - {FFFFFF}There are hundreds of houses around available for purchase");
		    ShowPlayerDialog(playerid, 8545, DIALOG_STYLE_MSGBOX, ""GRAY_"Help Center - Basics", str, "Next", "Exit");
		  }
	    }
	    case 8545:
		{
          //if(!response && PlayerInfo[playerid][pScore] < 300 && GetPlayerVirtualWorld(playerid) == 0) cmd_info(playerid);
		  if(response)
		  {
		    new str[1224];
		    strcat(str, "{FFFFFF}There are 7 available jobs that you can choose from\n{FF9D00}Job1: Medic - {FFFFFF}With medic as job you can heal other injured players ({0AA1FF}/heal <ID>"WHITE_") \n{FF9D00}Job2: Cop - {FFFFFF}Being a cop will let you to arrest wanted players using ({0AA1FF}/arrest <ID>"WHITE_") & ({0AA1FF}/cuff <ID>"WHITE_") \n{FF9D00}Job3: Hitman - {FFFFFF}With Hitman you can kill players and get their bounty, Check ({0AA1FF}/bounties"WHITE_") to see others bounty.");
		    strcat(str, "\n{FF9D00}Job4: Mechanic - {FFFFFF}A mechanic can repair your damaged cars using ({0AA1FF}/repair"WHITE_")");
		    strcat(str, "\n{FF9D00}Job5: Dealer - {FFFFFF}Sell drugs to other players ({0AA1FF}/deal"WHITE_") & Rob other players and properties(/Rob)\n{FF9D00}Job6: Terrorist - {FFFFFF}If you are a Terrorist you can plant bombs on anyone using ({0AA1FF}/Bomb <ID>"WHITE_")Watch out! do not hurt yourself!\n{FF9D00}Job7: Whore/pimp - {FFFFFF}Earn money by ****** players **** ({0AA1FF}/blowjob <ID>"WHITE_")");
		    strcat(str, "\n{FF9D00}Job8: Trucker - {FFFFFF}Earn money by delivering the trucks to the required destination!");
		    ShowPlayerDialog(playerid, 8547, DIALOG_STYLE_MSGBOX, "{BEBEBE}Help Center - Jobs", str, "Next", "Exit");
		  }
		}

        case 8547:
        {
          //if(!response && PlayerInfo[playerid][pScore] < 300 && GetPlayerVirtualWorld(playerid) == 0) cmd_info(playerid);
		  if(response)
		  {
		    new str[1024];
		    strcat(str, "{0AA1FF}How do I get money?\n"WHITE_"There are several ways to get money. First of all you can kill other players and get all the cash they had in their hands\n.You can also export vehicles at the Cargo Ship in SF, LV, or LS and get alot of money \nYou can do your job to get money, For Examble as a medic heal others and get money cause doing ur job\nAnother way to earn money is by winning /Duels /Lms and Derby Matches or any kind of Minigame");
		    strcat(str, "\n {0AA1FF}How do I store my money?\n"WHITE_"You can save your money in any bank, You will find banks everywere.\nYou can also type({0AA1FF}/bank"WHITE_") and get teleported to the nearest bank");
		    strcat(str, "\n {0AA1FF}What can I do with money?\n"WHITE_"With money you can do many things such as Teleporting , Buying Weapons, Buying Permissions\nBuying Houses, Buying Cars");
            ShowPlayerDialog(playerid, 8546, DIALOG_STYLE_MSGBOX, ""GRAY_"Help Center - Money", str, "Next", "Exit");
		  }
        }
//
        case 8546:
        {
          //if(!response && PlayerInfo[playerid][pScore] < 300 && GetPlayerVirtualWorld(playerid) == 0) cmd_info(playerid);
		  if(response)
		  {
		    new str[700];
		    strcat(str, "{FF9D00}How to get score?\n"WHITE_"You can get score by  killing other players, Export Vehicles, And Winning Minigames!\n{FF9D00}Which Minigames are available?\n "GRAY_"** There are many different minigames in the server , use /Minigames to see the full list!\n"WHITE_"-There are 17 different Minigames ({0AA1FF}/dm1-17"WHITE_")");
		    strcat(str, "\n-"WHITE_"The Demolition Derby Match ({0AA1FF}/derby"WHITE_")\n"WHITE_"- Last Man Standing Match ({0AA1FF}/lms"WHITE_")\n"WHITE_"- Dueling other players ({0AA1FF}/Duel"WHITE_")\n"WHITE_"- {0AA1FF}(/Fallout) "WHITE_" and Counter Strike {0AA1FF}(/CS)");
            ShowPlayerDialog(playerid, 8548, DIALOG_STYLE_MSGBOX, ""GRAY_"Help Center - Score & Minigames", str, "Next", "Exit");
		  }
        }
        case 8548:
        {
          //if(!response && PlayerInfo[playerid][pScore] < 300 && GetPlayerVirtualWorld(playerid) == 0) cmd_info(playerid);
		  if(response)
		  {
		    new str[1300];
		    strcat(str, "{FF9D00}How to buy a house?\n\n"WHITE_"You can find houses everywhere around The San Andreas MAP, \n The GREEN house icon means that the house is available and you can buy it!\n The RED house icon means that the house is already owned by someone.");
		    strcat(str, "\n"WHITE_"To purchase a house you need Score & Money, When you have enough Score & Money for the house you want \nYou would be able to see the house menu and buy it!\n"WHITE_"In Addition to score & money Mapped Houses requires Premium Points (Type (/Premium) for more info)");
		    strcat(str, "\n\n{FF9D00}What can I do in my house?\n"WHITE_"1)You will spawn in your house when you die\n2)You can store your Weapons\n3)You can teleport to your house using (/house)\n4)You can refill your Health & Armour!");
            strcat(str, "\n"WHITE_"5)Store your Glasses and Caps in the wardrobe (You can buy them from /Binco!)\n6)Kick someone out of your house using (/hkick)\n"WHITE_"6)also you will be able to buy your own car\n\n{FF9D00}How can i buy my own car?");
		    strcat(str, "\n"WHITE_"You can buy a car from one of the 9 car dealers around san andreas\nTo teleport to a car dealer use (/cars(1-9))\n"WHITE_"you will find your car parked near your house when you spawn or teleport to your house\nyou can also spawn your car at any time using (/car)");
            ShowPlayerDialog(playerid, 8550, DIALOG_STYLE_MSGBOX, "{FF9D00}Help Center - Vehicles & Houses", str, "Next", "Exit");
		  }
        }
        case 8144:
        {
         //if(!response && PlayerInfo[playerid][pScore] < 300 && GetPlayerVirtualWorld(playerid) == 0) cmd_info(playerid);
 		 if(response) ShowCommands(playerid);
		}
        case 8550:
        {
          //if(!response && PlayerInfo[playerid][pScore] < 300 && GetPlayerVirtualWorld(playerid) == 0) cmd_info(playerid);
		  if(response)
		  {
		    new str[700];
		    strcat(str, "{FF9D00}What are the properties?\n"WHITE_"Owning a property is a good way to earn money, Once you buy a property you will recieve your earnings every 15 minutes\n the more expensive the property is, The higher earnings you get");
			strcat(str, "\nYou can find properties all around The San Andreas MAP.\nto buy a property all you have to do is to go throught the property icon then the property menu shows up\n\n{FF9D00}What are the requirements to buy a property?\n"WHITE_"- Enough cash\n- You can buy the property when it has no owner, or when the owner is offline/afk\n- The maximum number of properties you can own is 7");
            ShowPlayerDialog(playerid, 8549, DIALOG_STYLE_MSGBOX, ""GRAY_"Help Center - Properties", str, "Next", "Exit");
		  }
		}
		case 8549:
		{
            //if(!response && PlayerInfo[playerid][pScore] < 300 && GetPlayerVirtualWorld(playerid) == 0) cmd_info(playerid);
			if(response)
			{
				new str[1024];
				strcat(str, "{BEBEBE}-{168BFF}PremiumPointsHelp{BEBEBE}-");
				strcat(str, "\n**{BBF582}What can I do with Premium Points?");
				strcat(str, "\n{BEBEBE}With Premium Points you will be able to buy special stuff! Just like: A headtext, Permission to use the car-tow command ({168BFF}/tow{BEBEBE}), \n{BEBEBE}Permission to the teleport ({168BFF}/cars9{BEBEBE}), ({168BFF}/Neon{BEBEBE}) aswell.");
				strcat(str, "\n{BEBEBE}For further info about what you can buy , Type ({168BFF}/Market{BEBEBE})!");
				strcat(str, "\n**{BBF582}How do I earn the Premium Points?");
				strcat(str, "\n{BEBEBE}To earn the Premium Points you must win, Events, Take records in Derby/Parkour/Race's.");
				strcat(str, "\n{BEBEBE}Find all the Easter Eggs, Horse-Shoes & Oysters - Spray all the Tags is also an option!");
				strcat(str, "\n**{BBF582}Where can I spend my Premium Points?");
				strcat(str, "\n{BEBEBE}You will be able to spend your Premium Points at the GTADM's Market ({168BFF}/Market{BEBEBE}).");
				strcat(str, "\n{BEBEBE}You can check how many Premium Points you have earned in ({168BFF}/stats{BEBEBE}).");
				ShowPlayerDialog(playerid, 8144, DIALOG_STYLE_MSGBOX, "PremiumPoints Help", str, "Show Cmds", "");
			}
		}
		case 177:
		{
         //if(!response && PlayerInfo[playerid][pScore] < 300 && GetPlayerVirtualWorld(playerid) == 0) cmd_info(playerid);
		 if(response) ShowPlayerDialog(playerid, 8544, DIALOG_STYLE_MSGBOX, "Help Center", ""LIGHTYELLOW_"Welcome to GTADM help center\n\n"WHITE_"here you can find all you need to know about our server\n\n"GRAY_"Catalog\n"WHITE_"1.Basic Things\n2.Job Help\n3.Money Help\n4.Minigames & score\n5.Houses & Vehicles\n6.Properties\n7.Commands List", "Next", "quit");
		}
        case 22773:
        {
          //if(!response && PlayerInfo[playerid][pScore] < 300 && GetPlayerVirtualWorld(playerid) == 0) cmd_info(playerid);
		  if(response)
		  {
			 switch(listitem)
			 {
				case 0: ShowPlayerDialog(playerid, 2277, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM: "WHITE_"Account Commands", "/Chat\n/Stats\n/Changename\n/Password "GRAY_"(or /changepass)\n/Ramp\n/Mission\n/Hitsound\n/ShowDmg\n/HouseFix\n/Block\n/BlockPM\n/GetFPS\n/LevelHelp", "Back", "");
				case 2: ShowTeleports(playerid);
				case 3: cmd_minigames(playerid);
				case 4: ShowPlayerDialog(playerid, 2277, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM: "WHITE_"Job Commands", "/heal\n/deal\n/cuff\n/rob\n/sellmedkits\n/sellrepairkits\n/Usemedkits\n/userepairkits\n/arrest\n/bomb\n/Job\n/repair\n/hitman\n/bounties\n/wanted\n/blowjob\n/stun", "Back", "");
				case 6: ShowPlayerDialog(playerid, 2277, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM: "WHITE_"Animation Commands", "/anims\n/Dance\n/Smoke\n/Drink\n/Piss", "Back", "");
				case 7: ShowPlayerDialog(playerid, 2277, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM: "WHITE_"Vehicle Commands", "/vc\n/car\n/nos\n/wheels\n/lowride\n/carcolor\n/vkick\n/carnumber", "Back", "");
				case 1: ShowPlayerDialog(playerid, 2277, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM: "WHITE_"General Commands", "/rules\n/help\n/myweather\n/mytime\n/skydive\n/youtube\n/music\n/radio\n/pm\n/me\n/kill\n/afk\n/re\n/exit"GRAY_"(or /dmq)\n/hkick\n/house\n/admins\n/raceadmins\n/cwadmins\n/parkouradmins\n/vips\n/myprops\n/house\n/medals\n/tip\n/toplist\n/locate\n/powerup\n/skills\n/lotto\n/topgangs\n/world\n/racers\n/parkourists\n/racerecords\n/parkourrecords\n/ask\n/adlist\n/phonecmds", "Back", "");
				case 8: ShowPlayerDialog(playerid, 2277, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM: "WHITE_"Premium Commands", "/Tow\n/Mod\n/Neon\n/Cars9\n/Tuning", "Back", "");
				case 5: ShowPlayerDialog(playerid, 2277, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM: "WHITE_"Gang Commands", "/GangCreate\n/GangJoin\n/GangLeave\n/GangKick\n/GangColors\n/GangColor\n/GangAttack\n/GangRank\n/GangInfo\n/GangMembers\n/Gangname", "Back", "");
			 }
		  }
        }
		case 2277: ShowCommands(playerid);
        case 22775:
        {
		   if(response)
		   {
			 new a=GetPlayerMoneyEx(playerid);
			 if(Job[playerid]==listitem) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This is already your job!");
			 if(a < 20000 && listitem ==0 || a < 33000 && listitem ==1 || a < 40000 && listitem ==2 || a < 40000 && listitem ==3 || a < 45000 && listitem ==4|| a < 45000 && listitem ==5|| a < 50000 && listitem ==6 || a < 40000 && listitem ==7|| a < 20000 && listitem ==8) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You dont have enough money to change your job");
			 Job[playerid]=listitem;
			 new str[128];
			 switch(listitem)
			 {
				case 0: SetPlayerSkin(playerid, 2), format(str, sizeof(str), "{71A5B0}» Job «"JOBINFO_" %s is now a Civilian", pName[playerid]), GivePlayerMoneyEX(playerid, -20000, 1);
				case 1: SetPlayerSkin(playerid, 274), format(str, sizeof(str), "{71A5B0}» Job «"JOBINFO_" %s is now a Medic", pName[playerid]), pMedKets[playerid] =3, GivePlayerMoneyEX(playerid, -33000, 1);
				case 2: SetPlayerSkin(playerid, 266), format(str, sizeof(str), "{71A5B0}» Job «"JOBINFO_" %s is now a Cop", pName[playerid]), GivePlayerMoneyEX(playerid, -40000, 1);
				case 3: SetPlayerSkin(playerid, 150), format(str, sizeof(str), "{71A5B0}» Job «"JOBINFO_" %s is now a Hitman", pName[playerid]), GivePlayerMoneyEX(playerid, -40000, 1);
				case 4: SetPlayerSkin(playerid, 7), format(str, sizeof(str), "{71A5B0}» Job «"JOBINFO_" %s is now a Mechanic", pName[playerid]), pRepairKets[playerid]=3, GivePlayerMoneyEX(playerid, -45000, 1);
				case 5: SetPlayerSkin(playerid, 8), format(str, sizeof(str), "{71A5B0}» Job «"JOBINFO_" %s is now a Dealer", pName[playerid]), PlayerInfo[playerid][pDrugs]=3, GivePlayerMoneyEX(playerid, -45000, 1);
				case 6: SetPlayerSkin(playerid, 149), format(str, sizeof(str), "{71A5B0}» Job «"JOBINFO_" %s is now a Terrorist", pName[playerid]), GivePlayerMoneyEX(playerid, -50000, 1);
				case 7: SetPlayerSkin(playerid, 252), format(str, sizeof(str), "{71A5B0}» Job «"JOBINFO_" %s is now a Whore/Pimp", pName[playerid]), GivePlayerMoneyEX(playerid, -40000, 1);
				case 8: SetPlayerSkin(playerid, 254), format(str, sizeof(str), "{71A5B0}» Job «"JOBINFO_" %s is now a Trucker", pName[playerid]), GivePlayerMoneyEX(playerid, -20000, 1);
			 }
			 TickCount[playerid][OffetTK]=0;
			 SendClientMessageToAll(JOBINFO, str);
		   }
        }/*
   	    case 687:
		{
			 if(response)
			 {
			   new query[200];
			   format(query, sizeof(query), "SELECT `Name`, `GangRank` FROM `users` WHERE `Gang` = %d ORDER BY `Online` DESC LIMIT 26", GangInfoView[playerid]);
			   mysql_tquery(GTADM, query, "ShowGangMembers", "dd", playerid, GangInfoView[playerid]);
          	   GangInfoView[playerid]=-1;
			 }
		}
*/
		case 10124:
		{
		   if(response)
		   {
		      if(pganggo[playerid]==PlayerInfo[playerid][pGang] && pganggo[playerid]>0 && PlayerInfo[playerid][pGangRank] >= 3) ShowPlayerDialog(playerid, 10125, DIALOG_STYLE_LIST, PlayerGangShow[playerid][listitem], "Set Rank\nKick", "<< Go", "Back >>"), pganggo2[playerid]=listitem;
		   }
		}
		case 10125:
		{
			if(response)
			{
			  switch(listitem)
			  {
				 case 0:ShowPlayerDialog(playerid, 10126, DIALOG_STYLE_LIST, "Select a new rank", "Rank 0\nRank 1\nRank 2\nRank 3\nMake leader", "<< Go", "Back >>");
				 case 1:cmd_gangkick(playerid, PlayerGangShow[playerid][pganggo2[playerid]]);
			  }
			}
			else
            {
			   new str[20];
			   valstr(str, pganggo[playerid]);
			   cmd_ganginfo(playerid, str);
			}
		}
		case 10126:
		{
			if(response)
			{
			  new str[50];
			  format(str, sizeof(str), "%s %d", PlayerGangShow[playerid][pganggo2[playerid]], listitem);
			  switch(listitem)
			  {
				 case 0..3:cmd_gangrank(playerid, str);
				 case 4: cmd_gangsetleader(playerid, PlayerGangShow[playerid][pganggo2[playerid]]);
			  }
			}
			else
			{
			  if(pganggo[playerid]==PlayerInfo[playerid][pGang] && pganggo[playerid]>0 && PlayerInfo[playerid][pGangRank] >= 3) ShowPlayerDialog(playerid, 10125, DIALOG_STYLE_LIST, PlayerGangShow[playerid][listitem], "Set Rank\nKick", "<< Go", "Back >>");
			}
		}
	    case 1144:
	    {
		   if(response)
		   {
			   new gang=PlayerList[playerid][listitem];
			   new cmdd[15];
			   format(cmdd, sizeof(cmdd), "%d", gang);
			   cmd_ganginfo(playerid, cmdd);
		   }
	    }
        case 4544:
        {
		  if(response)
		  {
            switch(listitem)
			{
			   case 0:
			   {
				 new Float:x, Float:y, Float:z;
				 GetPlayerPos(playerid, x, y, z);
                 partyX = x, partyY = y, partyZ = z, partyVw = GetPlayerVirtualWorld(playerid);
                 Party = 1;
             	 new str[128];
	             format(str, sizeof(str), "{6F6AA6}» Party « {0099FF}%s has started the Party! {6F6AA6}(/Party)", gAname(playerid));
	             SendClientMessageToAll(LIGHTBLUE, str);
	             SendInfoText2(30000, "Type ~b~/party~w~ To join the ~r~party~w~!");
                 new gametextstr[50];
   				 gametextstr="~g~/party";
                 GameTextForAll(gametextstr, 30000, 1);
                 foreach(new i : Player)
                 {
                   if(EventStarted == 0) TextDrawShowForPlayer(playerid, PartyTD2);
                   else if(EventStarted == 1) TextDrawShowForPlayer(playerid, PartyTD);
                 }
	             //SendClientMessageToAll(LIGHTBLUE, "Type (/party) to join it");
			   }
			   case 1:
			   {
                 partyX = -1563.1523, partyY = 63.7251, partyZ = 17.3312;
                 partyVw=0;
                 StartShipParty(playerid);
                 Party = 1;
                 SendInfoText2(30000, "Type ~g~/party~w~ To join the ~b~titanic party~w~!");
                 new gametextstr[50];
                 gametextstr="~b~/party";
                 GameTextForAll(gametextstr, 30000, 1);
                 foreach(new i : Player)
                 {
                   if(EventStarted == 0) TextDrawShowForPlayer(playerid, PartyTD2);
                   else if(EventStarted == 1) TextDrawShowForPlayer(playerid, PartyTD);
                 }
			   }
			   case 2:
			   {
                 partyX = 961.3387, partyY = -2487.3472, partyZ = 55.2720;
                 partyVw=0;
                 StartxMasParty(playerid);
                 Party = 1;
                 foreach(new i : Player)
                 {
                   if(EventStarted == 0) TextDrawShowForPlayer(playerid, PartyTD2);
                   else if(EventStarted == 1) TextDrawShowForPlayer(playerid, PartyTD);
                 }
			   }
			}
			partyarea=CreateDynamicSphere(partyX, partyY, partyZ, 50.0, partyVw);

		  }
		}/*
	    if(current == OwnedMenu)
        {
          switch(row)
          {
		     case 0:
		     {
  	             EnterHouse(playerid, GetHouseID(playerid));
		     }
		     case 1:
		     {
				 if(GetHouseID(playerid) > 0)
				 {
                   new string[101];
                   new price = floatround(hInfo[GetHouseID(playerid)][Cost]*0.5, floatround_ceil);
                   format(string, sizeof(string), "Do you really want to sell your house for $%d?", price);
                   ShowPlayerDialog(playerid, DIALOG_SELL_HOUSE, DIALOG_STYLE_MSGBOX, "{33AA33}COMMAND", string, "Yes", "No");
				 }
		     }
        }
    }

    if(current == OwnedMenu2)
    {
        switch(row)
        {
		     case 0:
		     {
                   EnterHouse(playerid, GetHouseID(playerid));
		     }
		     case 1:
		     {
				 if(GetHouseID(playerid) > 0)
				 {

                   if (( GetTickCount() - TickCount[playerid][Knock] ) < 10000 ) return SendClientMessage(playerid, RED, "You have to wait 10 seconds to knock the door again");
		           TickCount[playerid][Knock] = GetTickCount();
				   SetPlayerFacingAngle(playerid, hInfo[GetHouseID(playerid)][SpawnA]-180);
				   new str[128];
                   foreach (new i : Player)
                   {
				     if(PlayerInfo[i][pHouse] == GetHouseID(playerid))
					 {
					   format(str, sizeof(str), "%s is knocking your house's door", pName[playerid]);
					   SendClientMessage(i, PINK, str);
					   PlayerPlaySound(i, 6401 , 0.0, 0.0, 0.0);
					   break;
					 }
                   }
                   PreloadAnimLib(playerid, "POLICE");
				   SetTimerEx("KnockTheDoor", 1000, false, "i", playerid);
				 }
		     }
        }
    }

    if((current == NotOwnedMenu) || (current == NotOwnedMenu2))
    {
        switch(row)
        {
           case 0:
	       {
	           if(GetPlayerMoneyEx(playerid) < hInfo[GetHouseID(playerid)][Cost]) return  ShowPlayerDialog(playerid, 1499, DIALOG_STYLE_MSGBOX, ""RED_"House Menu", "You don't have enough money!", "OK", "");
	           if(PlayerInfo[playerid][pScore] < hInfo[GetHouseID(playerid)][Score]) return SendClientMessage(playerid, 0xFFAFFFAA, "You dont have enough score to buy this house");
	           if(PlayerInfo[playerid][pCook] < hInfo[GetHouseID(playerid)][PP] && PlayerInfo[playerid][IsVIP] == 0) return SendClientMessage(playerid, 0xFFAFFFAA, "You dont have enough Premium Points to buy this house");
	           BuyHouse(playerid, GetHouseID(playerid));

	       }
           case 1:
           {
  	           EnterHouse(playerid, GetHouseID(playerid));

           }
        }
        case 2278:
        {
		  //if(!response && PlayerInfo[playerid][pScore] < 300 && GetPlayerVirtualWorld(playerid) == 0) cmd_info(playerid);
		  if(response)
		  {
			switch(listitem)
			{
			  case 0: cmd_lsa(playerid);
			  case 1: cmd_house(playerid);
			  case 2: cmd_bank(playerid);
			  case 3: cmd_market(playerid);
			  case 4: cmd_cars1(playerid);
			  case 5: cmd_ls(playerid);
			  case 6: cmd_binco(playerid);
			  case 7: cmd_sf(playerid);
			  case 8: cmd_lv(playerid);
			  case 9: cmd_lsb(playerid);
			  case 10: cmd_lb(playerid);
			  case 11: cmd_ufo(playerid);
			  case 12: cmd_casino1(playerid);
			  case 13: cmd_casino2(playerid);
			  case 14: cmd_casino3(playerid);
			  case 15: cmd_casino4(playerid);
			  case 16: cmd_chilliad(playerid);
			  case 17: cmd_transls(playerid);
			  case 18: cmd_transsf(playerid);
			  case 19: cmd_translv(playerid);
			  case 20: cmd_waa(playerid);
			  case 21: cmd_locolow(playerid);
			  case 22: cmd_ammuls(playerid);
			  case 23: cmd_ammulv(playerid);
			  case 24: cmd_ammusf(playerid);
			  case 25: cmd_trucking1(playerid);
			  case 26: cmd_trucking2(playerid);
			}
		  }
		}*/
		case 9777:
		{
		  if(response)
		  {
			switch(listitem)
			{
			  case 0: cmd_help(playerid);
			  case 1: cmd_cmds(playerid);
			  case 2: cmd_teleports(playerid);
			  case 3: cmd_minigames(playerid);
			  case 4: cmd_info(playerid);
			  case 5: cmd_info(playerid);
			}
		  }
		}/*
        case 1009:
        {
          if(!response) TogglePlayerControllable(playerid, 1);
          if(response)
          {
  		    new wwab=strval(inputtext);
            if(!isNumeric(inputtext) || wwab < 1 || wwab > 8) ShowHouseMenu(playerid), SendWarning(playerid, "{BABABA}Invalid ID entered!");
            else
            {
              ShowHouseMenu(playerid);
		      switch(wwab)
              {
                case 1: SetPlayerHealth(playerid, 100), ShowHouseMenu(playerid), PlayerPlaySound(playerid, CheckSound, 0.0, 0.0, 0.0);
                case 2: SetPlayerArmour(playerid, 100), ShowHouseMenu(playerid), PlayerPlaySound(playerid, CheckSound, 0.0, 0.0, 0.0);
                case 3: ShowPlayerDialog(playerid, 2001, DIALOG_STYLE_LIST, "My Wardrobe", "{1B87E0}Glasses\n{1B87E0}Caps", "Select", "Cancel"), PlayerPlaySound(playerid, CheckSound, 0.0, 0.0, 0.0);
                case 4:
                {
                  new count = 0;
                  for(new x=0;x<16;x++)
                  {
                    if(hweapons[playerid][holding][x] > 0)
                    {
         	         count++;
         	         hweapons[playerid][holding][x]=0;
                    }
                  }
		          if(count ==0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You are not holding any spawn weapons to store");
                  SavePlayerWeapons(playerid);
		          ResetPlayerWeaponsEX(playerid);
                  SendInfoText(playerid, 3000, "~g~Weapons Stored");
                  PlayerPlaySound(playerid, CheckSound, 0.0, 0.0, 0.0);
	            }
                case 5:
	            {
                 new wcount=0;
                 for(new x=0;x<16;x++)
                 {
                   if(( hweapons[playerid][storein][x] > 0) && hweapons[playerid][holding][x] == 0)
                   {
                     wcount++;
                     GivePlayerWeaponEX(playerid, GetWeaponIDfromSlot(x), hweapons[playerid][storein][x]);
                     hweapons[playerid][holding][x] =1;
                     PlayerPlaySound(playerid, CheckSound, 0.0, 0.0, 0.0);
                   }
                 }
                 if(wcount ==0)
                 SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You dont have any stored weapons"), SendInfoText(playerid, 3000, "~n~~n~~n~~n~~r~No Stored Weapons");
	           }
	           case 6: GivePlayerWeaponEX(playerid, 4, 9999), ShowHouseMenu(playerid), PlayerPlaySound(playerid, CheckSound, 0.0, 0.0, 0.0);
	           case 7: GivePlayerWeaponEX(playerid, 5, 9999), ShowHouseMenu(playerid), PlayerPlaySound(playerid, CheckSound, 0.0, 0.0, 0.0);
	           case 8: ExitHouse(playerid, InHouse[playerid]), PlayerPlaySound(playerid, CheckSound, 0.0, 0.0, 0.0);
	         }
	        }
          }
        }*/
	    case 1015:
	    {
		  if(response)
		  {
    		new wwae=strval(inputtext);
			if(!isNumeric(inputtext) || wwae < 0 || wwae > 20) ShowWeaponDialog(playerid), SendWarning(playerid, "{BABABA}Invalid ID entered!");
			else
			{
     			new m;
		        if(wwae != 0) m=SpawnWeapPrices[wwae-1];
				if(PlayerInfo[playerid][IsVIP] == 1) m = floatround(m*0.75);
		        if(GetPlayerVirtualWorld(playerid) != 0) return 0;
				ShowWeaponDialog(playerid);
				switch(wwae)
	            {
				  case 0:
				  {
		             if(GetPlayerMoneyEx(playerid) < 5000) return SendWarning(playerid, "{BABABA}You dont have enough money");
					 SetPlayerArmour(playerid, 100);
					 GivePlayerMoneyEX(playerid, -5000, 1);
		     		 SendInfoText(playerid, 2000, "~w~Armour purchased");
		     		 PlayerPlaySound(playerid, BuySound, 0.0, 0.0, 0.0);
				  }
				  case 1:
				  {
		             if(GetPlayerMoneyEx(playerid) < m) return SendWarning(playerid, "{BABABA}You dont have enough money");
					 GivePlayerWeaponEX(playerid, 1, 1);
					 GivePlayerMoneyEX(playerid, m*-1, 1);
		             hweapons[playerid][storein][0] = hweapons[playerid][storein][0]+1;
		             hweapons[playerid][holding][0] = 1;
		     		 SendInfoText(playerid, 2000, "~y~Weapon purchased");
     		 	     PlayerPlaySound(playerid, BuySound, 0.0, 0.0, 0.0);

				  }
				  case 2:
				  {
		             if(GetPlayerMoneyEx(playerid) < m) return SendWarning(playerid, "{BABABA}You dont have enough money");
					 GivePlayerWeaponEX(playerid, 22, 200);
					 GivePlayerMoneyEX(playerid, m*-1, 1);
		             hweapons[playerid][storein][1] = hweapons[playerid][storein][1]+200;
		             hweapons[playerid][holding][1] = 1;
		     		 SendInfoText(playerid, 2000, "~y~Weapon purchased");
     		 	     PlayerPlaySound(playerid, BuySound, 0.0, 0.0, 0.0);
				  }
				  case 3:
				  {
		             if(GetPlayerMoneyEx(playerid) < m) return SendWarning(playerid, "{BABABA}You dont have enough money");
					 GivePlayerWeaponEX(playerid, 24, 150);
					 GivePlayerMoneyEX(playerid, m*-1, 1);
		             hweapons[playerid][storein][2] = hweapons[playerid][storein][2]+150;
		             hweapons[playerid][holding][2] = 1;
		     		 SendInfoText(playerid, 2000, "~y~Weapon purchased");
		     		 PlayerPlaySound(playerid, BuySound, 0.0, 0.0, 0.0);
				  }
				  case 4:
				  {
		             if(GetPlayerMoneyEx(playerid) < m) return SendWarning(playerid, "{BABABA}You dont have enough money");
					 GivePlayerWeaponEX(playerid, 25, 50);
					 GivePlayerMoneyEX(playerid, m*-1, 1);
		             hweapons[playerid][storein][3] = hweapons[playerid][storein][3]+50;
		             hweapons[playerid][holding][3]= 1;

		             hweapons[playerid][storein][4]=0;
		             hweapons[playerid][storein][5]=0;
		     		 SendInfoText(playerid, 2000, "~y~Weapon purchased");
		     		 PlayerPlaySound(playerid, BuySound, 0.0, 0.0, 0.0);
				  }
				  case 5:
				  {
		             if(GetPlayerMoneyEx(playerid) < m) return SendWarning(playerid, "{BABABA}You dont have enough money");
					 GivePlayerWeaponEX(playerid, 26, 200);
					 GivePlayerMoneyEX(playerid, m*-1, 1);
		             hweapons[playerid][storein][4] = hweapons[playerid][storein][4]+200;
		             hweapons[playerid][holding][4]= 1;
		     		 SendInfoText(playerid, 2000, "~y~Weapon purchased");
		     		 PlayerPlaySound(playerid, BuySound, 0.0, 0.0, 0.0);

		             hweapons[playerid][storein][3]=0;
		             hweapons[playerid][storein][5]=0;
		             hweapons[playerid][holding][3]=0;
		             hweapons[playerid][holding][5]=0;
				  }
				  case 6:
				  {
		             if(GetPlayerMoneyEx(playerid) < m) return SendWarning(playerid, "{BABABA}You dont have enough money");
					 GivePlayerWeaponEX(playerid, 27, 200);
		             hweapons[playerid][storein][5] = hweapons[playerid][storein][5]+200;
		             hweapons[playerid][holding][5] = 1;
					 GivePlayerMoneyEX(playerid, m*-1, 1);
		     		 SendInfoText(playerid, 2000, "~y~Weapon purchased");
		     		 PlayerPlaySound(playerid, BuySound, 0.0, 0.0, 0.0);
		             hweapons[playerid][storein][3]=0;
		             hweapons[playerid][storein][4]=0;
		             hweapons[playerid][holding][3]=0;
		             hweapons[playerid][holding][4]=0;
				  }
				  case 7:
				  {
		             if(GetPlayerMoneyEx(playerid) < m) return SendWarning(playerid, "{BABABA}You dont have enough money");
					 GivePlayerWeaponEX(playerid, 31, 200);
		             hweapons[playerid][storein][6] = hweapons[playerid][storein][6]+200;
		             hweapons[playerid][holding][6] = 1;
					 GivePlayerMoneyEX(playerid, m*-1, 1);
		     		 SendInfoText(playerid, 2000, "~y~Weapon purchased");
		     		 PlayerPlaySound(playerid, BuySound, 0.0, 0.0, 0.0);
		             hweapons[playerid][holding][7] = 0;
		             hweapons[playerid][storein][7] = 0;
				  }
				  case 8:
				  {
		             if(GetPlayerMoneyEx(playerid) < m) return SendWarning(playerid, "{BABABA}You dont have enough money");
					 GivePlayerWeaponEX(playerid, 30, 200);
		             hweapons[playerid][storein][7] = hweapons[playerid][storein][7]+200;
		             hweapons[playerid][holding][7] = 1;
					 GivePlayerMoneyEX(playerid, m*-1, 1);
		     		 SendInfoText(playerid, 2000, "~y~Weapon purchased");
		     		 PlayerPlaySound(playerid, BuySound, 0.0, 0.0, 0.0);
		             hweapons[playerid][holding][6] = 0;
		             hweapons[playerid][storein][6] = 0;
				  }
				  case 9:
				  {
		             if(GetPlayerMoneyEx(playerid) < m) return SendWarning(playerid, "{BABABA}You dont have enough money");
					 GivePlayerWeaponEX(playerid, 29, 200);
		             hweapons[playerid][storein][8] = hweapons[playerid][storein][8]+200;
		             hweapons[playerid][holding][8] = 1;
					 GivePlayerMoneyEX(playerid, m*-1, 1);
		     		 SendInfoText(playerid, 2000, "~y~Weapon purchased");
		     		 PlayerPlaySound(playerid, BuySound, 0.0, 0.0, 0.0);
		     		 hweapons[playerid][storein][9] = 0;
		             hweapons[playerid][holding][9] = 0;

		             hweapons[playerid][storein][10] = 0;
		             hweapons[playerid][holding][10] = 0;
				  }
				  case 10:
				  {
		             if(GetPlayerMoneyEx(playerid) < m) return SendWarning(playerid, "{BABABA}You dont have enough money");
					 GivePlayerWeaponEX(playerid, 28, 200);
		             hweapons[playerid][storein][9] = hweapons[playerid][storein][9]+200;
		             hweapons[playerid][holding][9] = 1;
					 GivePlayerMoneyEX(playerid, m*-1, 1);
		     		 SendInfoText(playerid, 2000, "~y~Weapon purchased");
		     		 PlayerPlaySound(playerid, BuySound, 0.0, 0.0, 0.0);
		     		 hweapons[playerid][storein][10] = 0;
		             hweapons[playerid][holding][10] = 0;

		             hweapons[playerid][storein][8] = 0;
		             hweapons[playerid][holding][8] = 0;
				  }
				  case 11:
				  {
		             if(GetPlayerMoneyEx(playerid) < m) return SendWarning(playerid, "{BABABA}You dont have enough money");
					 GivePlayerWeaponEX(playerid, 32, 200);
		             hweapons[playerid][storein][10] = hweapons[playerid][storein][10]+200;
		             hweapons[playerid][holding][10] = 1;
					 GivePlayerMoneyEX(playerid, m*-1, 1);
		     		 SendInfoText(playerid, 2000, "~y~Weapon purchased");
		     		 PlayerPlaySound(playerid, BuySound, 0.0, 0.0, 0.0);

		     		 hweapons[playerid][storein][9] = 0;
		             hweapons[playerid][holding][9] = 0;

		             hweapons[playerid][storein][8] = 0;
		             hweapons[playerid][holding][8] = 0;

				  }
				  case 12:
				  {
		             if(GetPlayerMoneyEx(playerid) < m) return SendWarning(playerid, "{BABABA}You dont have enough money");
					 GivePlayerWeaponEX(playerid, 34, 10);
		             hweapons[playerid][storein][11] = hweapons[playerid][storein][11]+10;
		             hweapons[playerid][holding][11] = 1;

		             hweapons[playerid][storein][12] = 0;
		             hweapons[playerid][holding][12] = 0;
					 GivePlayerMoneyEX(playerid, m*-1, 1);
		     		 SendInfoText(playerid, 2000, "~y~Weapon purchased");
		     		 PlayerPlaySound(playerid, BuySound, 0.0, 0.0, 0.0);
				  }
				  case 13:
				  {
		             if(GetPlayerMoneyEx(playerid) < m) return SendWarning(playerid, "{BABABA}You dont have enough money");
					 GivePlayerWeaponEX(playerid, 33, 20);
		             hweapons[playerid][storein][12] = hweapons[playerid][storein][12]+20;
		             hweapons[playerid][holding][12] = 1;

		             hweapons[playerid][storein][11] = 0;
		             hweapons[playerid][holding][11] = 0;
					 GivePlayerMoneyEX(playerid, m*-1, 1);
		     		 SendInfoText(playerid, 2000, "~y~Weapon purchased");
		     		 PlayerPlaySound(playerid, BuySound, 0.0, 0.0, 0.0);
				  }
				  case 14:
				  {
		             if(GetPlayerMoneyEx(playerid) < m) return SendWarning(playerid, "{BABABA}You dont have enough money");
					 GivePlayerWeaponEX(playerid, 16, 10);
		             hweapons[playerid][storein][13] = hweapons[playerid][storein][13]+10;
		             hweapons[playerid][holding][13] = 1;

		             hweapons[playerid][storein][15] = 0;
		             hweapons[playerid][holding][15] = 0;
					 GivePlayerMoneyEX(playerid, m*-1, 1);
		     		 SendInfoText(playerid, 2000, "~y~Weapon purchased");
		     		 PlayerPlaySound(playerid, BuySound, 0.0, 0.0, 0.0);
				  }
				  case 15:
				  {
		             if(GetPlayerMoneyEx(playerid) < m) return SendWarning(playerid, "{BABABA}You dont have enough money");
					 GivePlayerWeaponEX(playerid, 9, 200);
		             hweapons[playerid][storein][14] = hweapons[playerid][storein][14]+200;
		             hweapons[playerid][holding][14] = 1;
					 GivePlayerMoneyEX(playerid, m*-1, 1);
		     		 SendInfoText(playerid, 2000, "~y~Weapon purchased");
		     		 PlayerPlaySound(playerid, BuySound, 0.0, 0.0, 0.0);
				  }
				  case 16:
				  {
		             if(GetPlayerMoneyEx(playerid) < m) return SendWarning(playerid, "{BABABA}You dont have enough money");
					 GivePlayerWeaponEX(playerid, 39, 10);
		             hweapons[playerid][storein][15] = hweapons[playerid][storein][15]+200;
		             hweapons[playerid][holding][15] = 1;

		             hweapons[playerid][storein][13] = 0;
		             hweapons[playerid][holding][13] = 0;
					 GivePlayerMoneyEX(playerid, m*-1, 1);
		     		 SendInfoText(playerid, 2000, "~y~Weapon purchased");
		     		 PlayerPlaySound(playerid, BuySound, 0.0, 0.0, 0.0);
		    	  }
				  case 17:
				  {
		             if(GetPlayerMoneyEx(playerid) < m) return SendWarning(playerid, "{BABABA}You dont have enough money");
					 GivePlayerWeaponEX(playerid, 8, 200);
		             hweapons[playerid][storein][16] = hweapons[playerid][storein][16]+200;
		             hweapons[playerid][holding][16] = 1;

		             hweapons[playerid][storein][14] = 0;
		             hweapons[playerid][holding][14] = 0;

					 GivePlayerMoneyEX(playerid, m*-1, 1);
		     		 SendInfoText(playerid, 2000, "~y~Weapon purchased");
		     		 PlayerPlaySound(playerid, BuySound, 0.0, 0.0, 0.0);
				  }
				  case 18:
				  {
		             if(GetPlayerMoneyEx(playerid) < m) return SendWarning(playerid, "{BABABA}You dont have enough money");
					 GivePlayerWeaponEX(playerid, 4, 200);
		             hweapons[playerid][storein][16] = hweapons[playerid][storein][16]+200;
		             hweapons[playerid][holding][16] = 1;

		             hweapons[playerid][storein][14] = 0;
		             hweapons[playerid][holding][14] = 0;

					 GivePlayerMoneyEX(playerid, m*-1, 1);
		     		 SendInfoText(playerid, 2000, "~y~Weapon purchased");
		     		 PlayerPlaySound(playerid, BuySound, 0.0, 0.0, 0.0);
				  }
                  case 19:
				  {
		             if(GetPlayerMoneyEx(playerid) < m) return SendWarning(playerid, "{BABABA}You dont have enough money");
					 GivePlayerWeaponEX(playerid, 42, 200);
		             hweapons[playerid][storein][16] = hweapons[playerid][storein][16]+200;
		             hweapons[playerid][holding][16] = 1;

		             hweapons[playerid][storein][14] = 0;
		             hweapons[playerid][holding][14] = 0;

					 GivePlayerMoneyEX(playerid, m*-1, 1);
		     		 SendInfoText(playerid, 2000, "~y~Weapon purchased");
		     		 PlayerPlaySound(playerid, BuySound, 0.0, 0.0, 0.0);
				  }
	  	          case 20:
				  {
		             if(GetPlayerMoneyEx(playerid) < m) return SendWarning(playerid, "{BABABA}You dont have enough money");
					 ResetPlayerWeaponsEX(playerid);

					 for(new x=0; x<17; x++)
					 {
                         hweapons[playerid][storein][x]=0;
                         hweapons[playerid][storein][x]=0;
					 }

					 GivePlayerMoneyEX(playerid, m*-1, 1);
				     //SendClientMessage(playerid, RED, "{00904C}» Account settings «{00D9AD} All of your spawn weapons were resetted, please reconnect to the server before buying your new weapons again.");
		     		 SendInfoText(playerid, 2000, "~y~Spawn weapons reset");
		     		 PlayerPlaySound(playerid, CheckSound, 0.0, 0.0, 0.0);
				  }

				}
			}
		  }
	    }
        case 30:
        {

			 switch(listitem)
			 {
			  case 0: PlayerCarAudio(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=38370");
			  case 1: PlayerCarAudio(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=37586");
			  case 2: PlayerCarAudio(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=105772");
			  case 3: PlayerCarAudio(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=147941");

			  case 4: PlayerCarAudio(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=65456");
			  case 5: PlayerCarAudio(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1377200");

			  case 6: PlayerCarAudio(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=2235429");
			  case 7: PlayerCarAudio(playerid, "http://icy-e-02.sharp-stream.com/kiss100.mp3");


			 }
        }
        case 22774:
        {
	      if(response)
   	      {
			if(!IsAdmin(playerid, listitem-2)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Your admin level is not high enough to view these commands");
			switch(listitem)
			{
				  /*case 0: ShowPlayerDialog(playerid, 22778, DIALOG_STYLE_MSGBOX, "Race Admin commands", "/RaceEditor\n/Endrace\n/StartRace\n/GotoRaceEnd\n/StopEditing", "Exit", "Back");
				  case 1: ShowPlayerDialog(playerid, 22778, DIALOG_STYLE_MSGBOX, "Parkour Admin commands", "/ParkourEditor\n/StartParkour\n/EndParkour\n/StopEditing\n/AddCP", "Exit", "Back");
				  case 2: cmd_cwcmds(playerid);
				  case 3: ShowPlayerDialog(playerid, 22778, DIALOG_STYLE_MSGBOX, "level 1 commands", "/GetIP\n/GetGPCI\n/GetCountry\n/GetCity\n/GetISP\n/GPCIScan\n/OfflineGPCIScan\n/Mod\n/Asay\n/Rename\n/Spec\n/Jailed\n/Muted\n/Move\n/Goto\n/Tow\n/an\n/Fix\n/(Un)Mute\n/Weapons\n/BanInfo\n/attach\n/Seen\n/WhiteList\n/AccountScan\n/IPscan\n/pIPscan\n/Warn\n/(Un)Jail\n/Answer\n/APM\n/ShowRules\n\n"GRAY_"to talk in admin chat type # before your text", "Exit", "Back");
				  case 4: ShowPlayerDialog(playerid, 22778, DIALOG_STYLE_MSGBOX, "level 2 commands", "/iFlip\n/iSpin\n/ISlide\n/Acar\n/aBomb\n/Slap\n/Get\n/(un)Freeze\n/Announce\n/GotoInterior\n/GotoPos\n/StartParty\n/EndParty\n/PopTires\n/Talk\n/CarHop\n/SpeedBoost", "Exit", "Back");
				  case 5: ShowPlayerDialog(playerid, 22778, DIALOG_STYLE_MSGBOX, "level 3 commands", "/Kick\n/RainBow\n/SetTime\n/SetWeather\n/Aheal\n/Aarmour\n/GiveWeapon\n/Afix\n/tban\n/CleanChat (dc)\n/Savepos\n/Loadpos\n/Unban\n/Respawncars\n/Aduty\n/OfflineMute\n/OfflineJail\n/TempBans\n/Jetpack\n/Fine", "Exit", "Back");
				  case 6: ShowPlayerDialog(playerid, 22778, DIALOG_STYLE_MSGBOX, "level 4 commands", "/TP\n/Setname\n/Offlineban\n/Lockchat\n/Gotohouse\n/Gotoprop\n/Ban\n/Scare\n/RapeHeadset\n/Disarm\n/unbanip\n/Botmsg\n/Botpm\n/Csay\n/(Un)Blockask", "Exit", "Back");
				  case 7: ShowPlayerDialog(playerid, 22778, DIALOG_STYLE_MSGBOX, "level 5 commands", "/banip\n/Housecmds\n/readcmds\n/readvchat\n/readgchat\n/(un)lockdms\n/Ifly\n/Approvebase\n/Approvehouse\n/GiveCar\n/Set3dText\n/Delete3dText\n/Ghost\n/SetEvent\n/EndEvent\n/Setvipskin\n/Setnews\n/fp\n/GotoGate\n/CreateGate\n/CreateProp\n/DeleteProp\n/PropID\n/GPCIBan\n/OfflineGPCIBan\n/whiteadd\n/WhiteRemove\n/Sumomap\n/PlayMusic\n/PlayYoutube\n/YouTubeID\n/PlayMP3\n/GPCIBans\n/TalkAll", "Exit", "Back");
				  case 8: ShowPlayerDialog(playerid, 22778, DIALOG_STYLE_MSGBOX, "level 6 commands", "/AddCar\n/DeleteCar\n/Endrace\n/Endparkour\n/StartRace\n/an2\n/AddPickup\n/DeletePickup\n/aflip\n/aspin\n/resetcannon\n/resetracerecords\n/toggleheadshot\n/Troll\n/UNTroll\n/CreateSam\n/EditSam\n/DeleteSam\n/AddSamKeypad\n/EditSamKeypad\n/SamRange", "Exit", "Back");
				  case 9: ShowPlayerDialog(playerid, 22778, DIALOG_STYLE_MSGBOX, "RCON commands", "/Setscore\n/God\n/Jetpack\n/Setcash\n/Setvip(level/points)\n/SetLevel\n/SetRaceAdmin (/DeleteRaceAdmin)\n/SetCwAdmin (/DeleteCWAdmin)\n/SetParkourAdmin (/DeleteParkourAdmin)\n/SetPW\n/aSetAdminPassword\n/FreePP\n/v\n/DeleteMap\n/Maps\n/OfflineSetLevel\n/OfflineSetVIPLevel\n/OfflineSetVIPPoints\n/OfflineRename\n/FakeMSG\n/S\n/Minigun\n/RPG\n/HSR\n/GivePP\n/(Un)Hide", "Exit", "Back");*/
				  case 0:
				  {
				    new string[1000];
                    strcat(string, ""COL_RED"/RaceEditor "COL_WHITE"- Opens the race editor.\n");
			        strcat(string, ""COL_RED"/EndRace "COL_WHITE"- Ends the race.\n");
			        strcat(string, ""COL_RED"/StartRace "COL_WHITE"- Starts the race.\n");
			        strcat(string, ""COL_RED"/GotoRaceEnd "COL_WHITE"- Teleports to the last race checkpoint.\n");
			        strcat(string, ""COL_RED"/StopEditing "COL_WHITE"- Exits the race editor.\n");
			        ShowPlayerDialog(playerid, 10450, DIALOG_STYLE_MSGBOX, ""LIGHTYELLOW_"GTADM - "WHITE_"Race Admin Commands", string, "Back", "");
				 }
				 case 1:
				 {
                    new string[1000];
                    strcat(string, ""COL_RED"/ParkourEditor "COL_WHITE"- Open the parkour editor.\n");
			        strcat(string, ""COL_RED"/StartParkour "COL_WHITE"- Start a parkour.\n");
			        strcat(string, ""COL_RED"/EndParkour "COL_WHITE"- End a parkour.\n");
			        strcat(string, ""COL_RED"/AddCP "COL_WHITE"- Adds a checkpoint in the parkour editor mode.\n");
			        strcat(string, ""COL_RED"/StopEditing "COL_WHITE"- Exits the parkour editor.\n");
			        ShowPlayerDialog(playerid, 10451, DIALOG_STYLE_MSGBOX, ""LIGHTYELLOW_"GTADM - "WHITE_"Parkour Admin Commands", string, "Back", "");
                 }
                 case 2:
				 {
                    new string[1000];
                    strcat(string, ""COL_RED"/CWWeapons "COL_WHITE"- Change the weapons of the clan war.\n");
			        strcat(string, ""COL_RED"/FreezeAll "COL_WHITE"- Freezes all players in the clan war.\n");
	                strcat(string, ""COL_RED"/HealAll "COL_WHITE"- Heal all players in the clan war.\n");
			        strcat(string, ""COL_RED"/UnfreezeAll "COL_WHITE"- Unfreezes all players in the clan war.\n");
			        strcat(string, ""COL_RED"/CWPos "COL_WHITE"- Changes position of the clan war.\n");
			        strcat(string, ""COL_RED"/CWInvite "COL_WHITE"- Invites someone to the DoD DM.\n");
			        strcat(string, ""COL_RED"/ResetCW "COL_WHITE"- Resets all the clan war scores to 0.\n");
                    strcat(string, ""COL_RED"/CWScore "COL_WHITE"- Sets the winning score of clan war.\n");
                    strcat(string, ""COL_RED"/CWTeams "COL_WHITE"- Renames the clan war teams.\n");
			        ShowPlayerDialog(playerid, 10452, DIALOG_STYLE_MSGBOX, ""LIGHTYELLOW_"GTADM - "WHITE_"CW Admin Commands", string, "Back", "");
                 }
                 case 3:
				 {
                    new string[1800];
                    strcat(string, ""COL_RED"/GetIP "COL_WHITE"- Shows the IP address of a player.\n");
			        strcat(string, ""COL_RED"/GetGPCI "COL_WHITE"- Shows the GPCI address of a player.\n");
			        strcat(string, ""COL_RED"/GetCountry "COL_WHITE"- Shows the country of a player.\n");
			        strcat(string, ""COL_RED"/GetCity "COL_WHITE"- Shows the city of a player.\n");
			        strcat(string, ""COL_RED"/GetISP "COL_WHITE"- Shows the ISP of a player.\n");
                    strcat(string, ""COL_RED"/GPCIScan "COL_WHITE"- Shows the accounts with same GPCI address.\n");
			        strcat(string, ""COL_RED"/OfflineGPCIScan "COL_WHITE"- Shows the Offline GPCI address of a player.\n");
			        strcat(string, ""COL_RED"/ASay "COL_WHITE"- * ADMIN: text in the main chat.\n");
			        strcat(string, ""COL_RED"/Spec "COL_WHITE"- Spectates a player.\n");
			        strcat(string, ""COL_RED"/SpecOff "COL_WHITE"- Exits the spectating mode.\n");
			        strcat(string, ""COL_RED"/Jailed "COL_WHITE"- Shows a list of jailed players.\n");
                    strcat(string, ""COL_RED"/Muted "COL_WHITE"- Shows a list of muted players.\n");
			        strcat(string, ""COL_RED"/Spec "COL_WHITE"- Spectates a player.\n");
			        strcat(string, ""COL_RED"/Move "COL_WHITE"- Moves you through buildings, etc.\n");
                    strcat(string, ""COL_RED"/Goto "COL_WHITE"- Teleports you to another player.\n");
			        strcat(string, ""COL_RED"/Tow "COL_WHITE"- Tows a vehicle.\n");
			        strcat(string, ""COL_RED"/Fix "COL_WHITE"- Fixes the vehicle you are in.\n");
	                strcat(string, ""COL_RED"/GetPL "COL_WHITE"- Shows packetloss of a player.\n");
			        strcat(string, ""COL_RED"/Un(Mute) "COL_WHITE"- (Un)Mutes a player.\n");
			        strcat(string, ""COL_RED"/Attach "COL_WHITE"- Attaches objects to another player.\n");
                    strcat(string, ""COL_RED"/Seen "COL_WHITE"- Shows the last activity of a player.\n");
			        strcat(string, ""COL_RED"/AccountScan "COL_WHITE"- Scans to find accounts.\n");
			        strcat(string, ""COL_RED"/IPScan "COL_WHITE"- Scans to find IP addresses of accounts.\n");
			        strcat(string, ""COL_RED"/PIPScan "COL_WHITE"- Shows the accounts with the same IP address.\n");
			        strcat(string, ""COL_RED"/Warn "COL_WHITE"- Warns a player (3 warnings = auto kick).\n");
			        strcat(string, ""COL_RED"/(Un)Jail "COL_WHITE"- (Un)Jails a player.\n");
			        strcat(string, ""COL_RED"/APM "COL_WHITE"- Sends Admin Private Message to a player.\n");
			        strcat(string, ""COL_RED"/ShowRules "COL_WHITE"- Shows the rules to a player.\n");
                    strcat(string, ""COL_RED"/Hide "COL_WHITE"- Sends admin commands using Jonny.\n");
                    strcat(string, ""COL_RED"/HFA "COL_WHITE"- Hides you from /(race/parkour/cw)admins.\n");
			        strcat(string, ""COL_RED"* "COL_WHITE"To talk in the admin chat, type "COL_RED"#text"COL_WHITE", or use "COL_RED"/chat"COL_WHITE".");
			        ShowPlayerDialog(playerid, 10453, DIALOG_STYLE_MSGBOX, ""LIGHTYELLOW_"GTADM - "WHITE_"Admin Level 1 Commands", string, "Back", "");
                 }
                 case 4:
				 {
                    new string[1024];
                    strcat(string, ""COL_RED"/IFlip "COL_WHITE"- Flips your vehicle.\n");
			        strcat(string, ""COL_RED"/ISpin "COL_WHITE"- Spins your vehicle.\n");
			        strcat(string, ""COL_RED"/ISlide "COL_WHITE"- Drops your vehicle from the air.\n");
			        strcat(string, ""COL_RED"/ACar "COL_WHITE"- Spawns any vehicle to a player.\n");
			        strcat(string, ""COL_RED"/ABomb "COL_WHITE"- Explodes a player.\n");
                    strcat(string, ""COL_RED"/Slap "COL_WHITE"- Slaps a player.\n");
			        strcat(string, ""COL_RED"/Get "COL_WHITE"- Teleports a player to you.\n");
			        strcat(string, ""COL_RED"/(Un)Freeze "COL_WHITE"- (Un)Freeze's a player.\n");
			        strcat(string, ""COL_RED"/Announce "COL_WHITE"- Sends a message on the screen to all players.\n");
			        strcat(string, ""COL_RED"/GotoInterior "COL_WHITE"- Changes your interior.\n");
	                strcat(string, ""COL_RED"/GotoPos "COL_WHITE"- Teleports to a specified position.\n");
                    strcat(string, ""COL_RED"/StartParty "COL_WHITE"- Starts a party.\n");
			        strcat(string, ""COL_RED"/EndParty "COL_WHITE"- Ends a party.\n");
			        strcat(string, ""COL_RED"/PopTires "COL_WHITE"- Pops tires of the player's vehicle.\n");
			        strcat(string, ""COL_RED"/Talk "COL_WHITE"- Sends an audio message to a player.\n");
			        strcat(string, ""COL_RED"/CarHop "COL_WHITE"- Enables the car hop.\n");
                    strcat(string, ""COL_RED"/SpeedBoost "COL_WHITE"- Enables the speed boost.\n");
			        ShowPlayerDialog(playerid, 10454, DIALOG_STYLE_MSGBOX, ""LIGHTYELLOW_"GTADM - "WHITE_"Admin Level 2 Commands", string, "Back", "");
                 }
                 case 5:
                 {
                    new string[1024];
	                strcat(string, ""COL_RED"/Kick "COL_WHITE"- Kicks a player.\n");
			        strcat(string, ""COL_RED"/RainBow "COL_WHITE"- Sends a message in the chat with colors to all players.\n");
			        strcat(string, ""COL_RED"/SetTime "COL_WHITE"- Changes the time for all players.\n");
			        strcat(string, ""COL_RED"/SetWeather "COL_WHITE"- Changes the weather for all players.\n");
			        strcat(string, ""COL_RED"/AHeal "COL_WHITE"- Heals a player.\n");
                    strcat(string, ""COL_RED"/AArmour "COL_WHITE"- Gives an armour to a player.\n");
			        strcat(string, ""COL_RED"/GiveWeapon "COL_WHITE"- Gives a weapon to a player.\n");
			        strcat(string, ""COL_RED"/AFix "COL_WHITE"- Fixes the vehicle of a player.\n");
			        strcat(string, ""COL_RED"/TBan "COL_WHITE"- Temporary bans a player.\n");
			        strcat(string, ""COL_RED"/CleanChat "COL_WHITE"- Cleans the chat.\n");
                    strcat(string, ""COL_RED"/SavePos "COL_WHITE"- Saves your position.\n");
			        strcat(string, ""COL_RED"/LoadPos "COL_WHITE"- Loads your position.\n");
			        strcat(string, ""COL_RED"/Unban "COL_WHITE"- Unban's a player.\n");
			        strcat(string, ""COL_RED"/RespawnCars "COL_WHITE"- Respawns the vehicles without a driver.\n");
			        strcat(string, ""COL_RED"/ADuty "COL_WHITE"- Admin Duty.\n");
                    strcat(string, ""COL_RED"/OfflineMute "COL_WHITE"- Offline mutes a player.\n");
			        strcat(string, ""COL_RED"/OfflineJail "COL_WHITE"- Offline jails a player.\n");
			        strcat(string, ""COL_RED"/TempBans "COL_WHITE"- Shows the list of current temp bans.\n");
			        strcat(string, ""COL_RED"/Jetpack "COL_WHITE"- Spawns a jetpack.\n");
			        strcat(string, ""COL_RED"/Fine "COL_WHITE"- Fines a players bank account.\n");
                    strcat(string, ""COL_RED"/DJFW "COL_WHITE"- DJ Fireworks.\n");
			        ShowPlayerDialog(playerid, 10455, DIALOG_STYLE_MSGBOX, ""LIGHTYELLOW_"GTADM - "WHITE_"Admin Level 3 Commands", string, "Back", "");
                 }
                 case 6:
				 {
                    new string[1024];
                    strcat(string, ""COL_RED"/TP "COL_WHITE"- Teleports a player to another player.\n");
			        strcat(string, ""COL_RED"/SetName "COL_WHITE"- Sets the new name of a player.\n");
			        strcat(string, ""COL_RED"/LockChat "COL_WHITE"- Locks the chat.\n");
			        strcat(string, ""COL_RED"/GotoHouse "COL_WHITE"- Teleports to the specified house.\n");
			        strcat(string, ""COL_RED"/GotoProp "COL_WHITE"- Teleports to the specified property.\n");
			        strcat(string, ""COL_RED"/Scare "COL_WHITE"- Sends a scary audio message to a player.\n");
			        strcat(string, ""COL_RED"/RapeHeadset "COL_WHITE"- Sends an annoying audio message to a player.\n");
			        strcat(string, ""COL_RED"/Disarm "COL_WHITE"- Disarms a player.\n");
			        strcat(string, ""COL_RED"/UnbanIP "COL_WHITE"- Unbans IP address of a player.\n");
			        strcat(string, ""COL_RED"/BotMSG "COL_WHITE"- Sends a message in the chat using Jonny.\n");
			        strcat(string, ""COL_RED"/BotPM "COL_WHITE"- Sends a private message to a player using Jonny.\n");
			        strcat(string, ""COL_RED"/(Un)BlockAsk "COL_WHITE"- (Un)Blocks a player from asking questions.\n");
		            strcat(string, ""COL_RED"/Ban "COL_WHITE"- Bans a player.\n");
                    strcat(string, ""COL_RED"/OfflineBan "COL_WHITE"- Offline ban's the player.\n");
			        ShowPlayerDialog(playerid, 10456, DIALOG_STYLE_MSGBOX, ""LIGHTYELLOW_"GTADM - "WHITE_"Admin Level 4 Commands", string, "Back", "");
                 }
                 case 7:
				 {
                    new string[2500];
                    strcat(string, ""COL_RED"/HouseCmds "COL_WHITE"- Shows the house commands.\n");
			        strcat(string, ""COL_RED"/ReadCmds "COL_WHITE"- Shows the commands that players typed.\n");
			        strcat(string, ""COL_RED"/ReadVChat "COL_WHITE"- Shows the vehicle chat of players.\n");
			        strcat(string, ""COL_RED"/ReadGChat "COL_WHITE"- Shows the gang chat of players.\n");
			        strcat(string, ""COL_RED"/(Un)LockDMS "COL_WHITE"- (Un)Locks the deathmatches.\n");
			        strcat(string, ""COL_RED"/IFly "COL_WHITE"- Makes you fly.\n");
			        strcat(string, ""COL_RED"/ApproveBase "COL_WHITE"- Approves a gang base.\n");
			        strcat(string, ""COL_RED"/GiveCar "COL_WHITE"- Gives a house car to a player.\n");
			        strcat(string, ""COL_RED"/Set3DText "COL_WHITE"- Sets a 3d text to a player.\n");
			        strcat(string, ""COL_RED"/Delete3DText "COL_WHITE"- Deletes 3d text of a player.\n");
			        strcat(string, ""COL_RED"/Ghost "COL_WHITE"- Makes you invisible.\n");
			        strcat(string, ""COL_RED"/SetEvent "COL_WHITE"- Starts an event.\n");
			        strcat(string, ""COL_RED"/EndEvent "COL_WHITE"- Ends the event.\n");
			        strcat(string, ""COL_RED"/SetVIPSkin "COL_WHITE"- Sets VIP skin of a player.\n");
			        strcat(string, ""COL_RED"/SetNews "COL_WHITE"- Sets a text in the news textdraw.\n");
			        strcat(string, ""COL_RED"/FP "COL_WHITE"- Shows the football commands.\n");
			        strcat(string, ""COL_RED"/GotoGate "COL_WHITE"- Teleports you to the created gate.\n");
			        strcat(string, ""COL_RED"/FreeGateID "COL_WHITE"- Shows the free gate id.\n");
			        strcat(string, ""COL_RED"/CreateProp "COL_WHITE"- Creates a property.\n");
			        strcat(string, ""COL_RED"/DeleteProp "COL_WHITE"- Deletes a property.\n");
			        strcat(string, ""COL_RED"/PropID "COL_WHITE"- Shows the property id in your range.\n");
			        strcat(string, ""COL_RED"/GPCIBan "COL_WHITE"- Bans the player's GPCI address.\n");
			        strcat(string, ""COL_RED"/OfflineGPCIBan "COL_WHITE"- Offline ban's the player's GPCI address. \n");
			        strcat(string, ""COL_RED"/WhiteAdd "COL_WHITE"- Adds a player to the white list.\n");
			        strcat(string, ""COL_RED"/WhiteRemove "COL_WHITE"- Removes a player from the white list.\n");
			        strcat(string, ""COL_RED"/WhiteList "COL_WHITE"- Shows a list of players that are allowed to connect.\n");
			        strcat(string, ""COL_RED"/PlayMusic "COL_WHITE"- Plays the music to the all players.\n");
			        strcat(string, ""COL_RED"/PlayYoutube "COL_WHITE"- Plays the music from the YouTube to all players.\n");
                    strcat(string, ""COL_RED"/WhiteRemove "COL_WHITE"- Removes a player from the white list.\n");
			        strcat(string, ""COL_RED"/SumoMap "COL_WHITE"- Changes the sumo map.\n");
			        strcat(string, ""COL_RED"/YoutubeID "COL_WHITE"- Plays the music from YouTube to a player.\n");
			        strcat(string, ""COL_RED"/PlayMP3 "COL_WHITE"- Plays the music to all players from the link.\n");
			        strcat(string, ""COL_RED"/GPCIBans "COL_WHITE"- Shows a list of GPCI Banned players.\n");
			        strcat(string, ""COL_RED"/TalkAll "COL_WHITE"- Sends an audio message to the all players.\n");
			        strcat(string, ""COL_RED"/LeaveMeAlone "COL_WHITE"- Reconnects you with another name as undercover.\n");
			        strcat(string, ""COL_RED"/FuckMeOff "COL_WHITE"- Reconnects you to your old name from the leavemealone.\n");
			        ShowPlayerDialog(playerid, 10457, DIALOG_STYLE_MSGBOX, ""LIGHTYELLOW_"GTADM - "WHITE_"Admin Level 5 Commands", string, "Back", "");
                 }
                 case 8:
				 {
                    new string[1500];
                    strcat(string, ""COL_RED"/AddCar "COL_WHITE"- Adds a vehicle to the server.\n");
			        strcat(string, ""COL_RED"/DeleteCar "COL_WHITE"- Deletes a vehicle from the server.\n");
			        strcat(string, ""COL_RED"/EndRace "COL_WHITE"- Ends the race.\n");
			        strcat(string, ""COL_RED"/EndParkour "COL_WHITE"- Ends the parkour.\n");
			        strcat(string, ""COL_RED"/StartRace "COL_WHITE"- Starts the race.\n");
			        strcat(string, ""COL_RED"/An2 "COL_WHITE"- Sends an announce message on the screen.\n");
			        strcat(string, ""COL_RED"/AddPickup "COL_WHITE"- Adds a weapon pickup to the server.\n");
			        strcat(string, ""COL_RED"/DeletePickup "COL_WHITE"- Deletes a weapon pickup from the server.\n");
			        strcat(string, ""COL_RED"/AFlip "COL_WHITE"- Flips a players vehicle.\n");
			        strcat(string, ""COL_RED"/ASpin "COL_WHITE"- Spins a players vehicle.\n");
			        strcat(string, ""COL_RED"/ResetCannon "COL_WHITE"- Resets the cannon records.\n");
			        strcat(string, ""COL_RED"/ResetRaceRecords "COL_WHITE"- Resets the race records.\n");
			        strcat(string, ""COL_RED"/ToggleHeadshot "COL_WHITE"- Enables/Disables the headshot.\n");
			        strcat(string, ""COL_RED"/(Un)Troll "COL_WHITE"- (Un)Trolls the players text.\n");
			        strcat(string, ""COL_RED"/CreateSAM "COL_WHITE"- Creates a SAM missile.\n");
			        strcat(string, ""COL_RED"/EditSam "COL_WHITE"- Edits the SAM missile.\n");
			        strcat(string, ""COL_RED"/DeleteSAM "COL_WHITE"- Deletes the SAM missile from the server.\n");
			        strcat(string, ""COL_RED"/AddSAMKeypad "COL_WHITE"- Adds a SAM keypad to the server.\n");
			        strcat(string, ""COL_RED"/EditSAMKeypad "COL_WHITE"- Edits the SAM keypad.\n");
			        strcat(string, ""COL_RED"/SAMRange "COL_WHITE"- Changes the SAM missile shooting range.\n");
			        strcat(string, ""COL_RED"/SAMID "COL_WHITE"- Shows the SAM id in your range.\n");
			        ShowPlayerDialog(playerid, 10458, DIALOG_STYLE_MSGBOX, ""LIGHTYELLOW_"GTADM - "WHITE_"Admin Level 6 Commands", string, "Back", "");
                 }
                 case 9:
				 {
                    new string[2000];
                    strcat(string, ""COL_RED"/offlinesetvippoints "COL_WHITE"- Sets the Vip points of a offline player.\n");
                    strcat(string, ""COL_RED"/Setvippoints "COL_WHITE"- Sets the Vip points of a  player.\n");
                    strcat(string, ""COL_RED"/offlineaddvip "COL_WHITE"- Sets the Vip of a offline player.\n");
                    strcat(string, ""COL_RED"/Addvip "COL_WHITE"- Sets the Vip of a player.\n");
                    strcat(string, ""COL_RED"/Removemap "COL_WHITE"- Remove a Map.\n");
                    strcat(string, ""COL_RED"/Reloadmap "COL_WHITE"- Reload a Map.\n");
                    strcat(string, ""COL_RED"/Loadmap "COL_WHITE"- Loads a Map.\n");
                    strcat(string, ""COL_RED"/offlinesetlevel "COL_WHITE"- Sets the admin level of a offline player.\n");
                    strcat(string, ""COL_RED"/Setlevel "COL_WHITE"- Sets the admin level of a player.\n");
                    strcat(string, ""COL_RED"/SetScore "COL_WHITE"- Sets the score of a player.\n");
			        strcat(string, ""COL_RED"/God "COL_WHITE"- Gives you the god mode.\n");
			        strcat(string, ""COL_RED"/JP "COL_WHITE"- Spawns a jetpack without being on duty.\n");
			        strcat(string, ""COL_RED"/SetCash "COL_WHITE"- Sets the cash of a player.\n");
	                strcat(string, ""COL_RED"/SetScore "COL_WHITE"- Sets the score of a player.\n");
			        strcat(string, ""COL_RED"/(Set/Delete)RaceAdmin "COL_WHITE"- Sets/deletes the player as a race admin.\n");
			        strcat(string, ""COL_RED"/(Set/Delete)CWAdmin "COL_WHITE"- Sets a player to the CW Admin.\n");
			        strcat(string, ""COL_RED"/(Set/Delete)ParkourAdmin "COL_WHITE"- Sets/deletes the player as a parkour admin.\n");
			        strcat(string, ""COL_RED"/ASetAdminPassword "COL_WHITE"- Change's the admin password of a player.\n");
			        strcat(string, ""COL_RED"/FreePP "COL_WHITE"- Gives Premium Points to all the players.\n");
		            strcat(string, ""COL_RED"/OfflineRename "COL_WHITE"- Renames a player that is offline.\n");
		            strcat(string, ""COL_RED"/FakeMSG "COL_WHITE"- Sends a fake message/command of a player.\n");
	                strcat(string, ""COL_RED"/S "COL_WHITE"- Synces your character/skin.\n");
                    strcat(string, ""COL_RED"/Minigun "COL_WHITE"- Gives you a minigun.\n");
                    strcat(string, ""COL_RED"/RPG "COL_WHITE"- Gives you a RPG.\n");
                    strcat(string, ""COL_RED"/HSR "COL_WHITE"- Gives you the another kind of RPG.\n");
                    strcat(string, ""COL_RED"/GivePP "COL_WHITE"- Gives Premium Points to a player.\n");
                    strcat(string, ""COL_RED"/Fuck "COL_WHITE"- Hides your account stats and sends messages using Jonny.\n");
                    ShowPlayerDialog(playerid, 10459, DIALOG_STYLE_MSGBOX, ""LIGHTYELLOW_"GTADM - "WHITE_"Admin Level 1337 Commands", string, "Back", "");
                 }
            }
   	      }
        }
        case 22778: if(!response)ShowPlayerDialog(playerid, 22774, DIALOG_STYLE_LIST, "Admin commands", "Race admin\nParkour admin\nClanwar admin\nLevel 1\nLevel 2\nLevel 3\nLevel 4\nLevel 5\nLevel 6\nLevel 1337 (Rcon)", "Go", "Exit");
	    case 2012:
	    {
		  if(response)
		  {
			new str[256];
			if(MyMedals[playerid][listitem] == 1) format(str, sizeof(str), "%s\n\nIMPORTANT: Achieving medals by farming will end up with a permanent ban!", Medals[listitem][Done]);
			else format(str, sizeof(str), "%s\n\nIMPORTANT: Achieving medals by farming will end up with a permanent ban!", Medals[listitem][HowTo]);
			new str2[128];

		    new medaltype[10];
		    if(Medals[listitem][mType] == 1) medaltype = "Bronze";
		    else if(Medals[listitem][mType] == 2)  medaltype = "Silver";
		    else if(Medals[listitem][mType] == 3)  medaltype = "Gold";
		    else if(Medals[listitem][mType] == 4)  medaltype = "Platinum";

			format(str2, sizeof(str2), ""GRAY_"%s - %s", Medals[listitem][mName], medaltype);
            ShowPlayerDialog(playerid, 2013, DIALOG_STYLE_MSGBOX, str2, str, "Back", "Close");
		  }
	    }

	    case 2013: if(response) ShowMedalsDialog(playerid);
        case 15445:
        {
          if(response)
          {
           new v = GetPlayerVehicleID(playerid);
           PlayerPlaySound(playerid, 1133, 0, 0, 0);
           switch(listitem)
           {
        	 case 0:AttachNeons( v, NEON_RED ), NEON[playerid] =NEON_RED;
        	 case 1:AttachNeons( v, NEON_BLUE ), NEON[playerid] =NEON_BLUE;
        	 case 2:AttachNeons( v, NEON_GREEN ), NEON[playerid] =NEON_GREEN;
        	 case 3:AttachNeons( v, NEON_YELLOW ), NEON[playerid] =NEON_YELLOW;
        	 case 4:AttachNeons( v, NEON_PINK ), NEON[playerid] =NEON_PINK;
        	 case 5:AttachNeons( v, NEON_WHITE ), NEON[playerid] =NEON_WHITE;
        	 case 6:
        	 {
        	 RemoveNeons(v);
        	 NEON[playerid]=-1;
        	 }
           }
           if((GetPVarInt(playerid, "LOGGED")) != 2)
           {
              new Query[256];
              format(Query, sizeof(Query), "UPDATE `users` SET `Neon` = %d WHERE `UserID` = '%d'", NEON[playerid], PlayerInfo[playerid][UserID]);
              mysql_query(GTADM, Query);

           }
          }
        }
        case 4126:
        {
		  if(response)
		  {
			cmd_vipsetting(playerid);
          }
        }
   	    case 8585:
	    {
		  if(response)
		  {
       	    if(IsPlayerAttachedObjectSlotUsed(AttachObjectTo[playerid], 2)) RemovePlayerAttachedObject(AttachObjectTo[playerid], 2);
       	    if(IsPlayerAttachedObjectSlotUsed(AttachObjectTo[playerid], 3)) RemovePlayerAttachedObject(AttachObjectTo[playerid], 3);
       	    if(IsPlayerAttachedObjectSlotUsed(AttachObjectTo[playerid], 4)) RemovePlayerAttachedObject(AttachObjectTo[playerid], 4);
       	    if(IsPlayerAttachedObjectSlotUsed(AttachObjectTo[playerid], 5)) RemovePlayerAttachedObject(AttachObjectTo[playerid], 5);
			switch(listitem)
			{
			    case 0: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 18963, 2, 0.10, -0.05, 0.00, -290.0, 78.0, -338.0, 3.79, 5.03, 4.72);
			    case 1: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 18729, 7, 0.20, -0.05, -1.54, 0.0, -4.0, -211.0, 1.00, 1.00, 1.00);
			    case 2: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 1343, 1, -0.14, -0.18, -0.00, -1.0, 89.0, 0.0, 1.45, 1.40, 1.36);
			    case 3: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 1343, 1, 0.33, 0.02, 0.01, -1.0, 89.0, 0.0, 0.43, 0.30, 0.29);
			    case 4: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 1346, 1, -0.06, -0.03, -0.03, 0.0, 87.0, 89.0, 1.00, 1.00, 1.00);
			    case 5: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 19339, 2, 0.07, -0.42, -0.04, 638.0, 542.0, -344.0, 1.00, 1.00, 1.00);
			    case 6: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 19344, 2, 0.03, -0.00, 0.00, 0.0, 76.0, 57.0, 1.40, 1.15, 1.21);
			    case 7: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 19320, 2, 0.18, 0.02, 0.05, 3.0, 73.0, -1.0, 1.00, 1.00, 1.00);
			    case 8: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 19079, 1, -0.70, 0.00, 0.00, 0.0, 0.0, 0.0, 8.90, 10.82, 9.07);
			    case 9: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 19078, 1, 0.320722, -0.067912, -0.165151, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
			    case 10: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 3092, 1, 0.00, -0.28, -0.03, 0.0, 80.0, -180.0, 1.00, 1.00, 1.00);
			    case 11: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 18701, 6, 0.01, 0.48, -1.57, 0.0, 0.0, 0.0, 1.00, 1.00, 1.00), SetPlayerAttachedObject(AttachObjectTo[playerid], 3, 18701, 6, 0.04, 0.02, -1.67, 0.0, 0.0, 0.0, 4.89, -2.20, 1.00);
			    case 12: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 18688, 1, -0.49, -0.45, -2.51, 0.0, 0.0, 0.0, 3.49, 1.28, 1.60);
			    case 13: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 19315, 2, -0.23, 0.02, -0.02, 264.0, 110.0, 192.0, 0.78, 1.20, 1.00);
			    case 14: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 19315, 2, -0.29, 0.24, 0.04, 14.0, 96.0, 73.0, 2.39, 5.72, 2.83);
			    case 15: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 18640, 2, 0.02, 0.32, -0.02, 347.0, -6.0, 0.0, 7.74, 7.14, 6.30), SetPlayerAttachedObject(AttachObjectTo[playerid], 3, 19008, 2, 0.00, 0.44, -0.09, 0.0, 79.0, 78.0, 3.91, 8.06, 7.98), SetPlayerAttachedObject(AttachObjectTo[playerid], 4, 19320, 2, -0.06, 0.00, 0.03, 44.0, 80.0, -320.0, 2.00, 3.09, 3.89);
		    	case 16: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 18640, 2, 0.02, 0.32, -0.02, 347.0, -6.0, 0.0, 7.74, 7.14, 6.30), SetPlayerAttachedObject(AttachObjectTo[playerid], 3, 359, 6, 0.00, 0.68, 0.00, 0.0, 0.0, 0.0, 1.00, 1.00, 1.00), SetPlayerAttachedObject(AttachObjectTo[playerid], 4, 19008, 2, 0.00, 0.44, -0.09, 0.0, 79.0, 78.0, 3.91, 8.06, 7.98), SetPlayerAttachedObject(AttachObjectTo[playerid], 5, 1343, 1, -0.20, 0.12, -0.09, 0.0, 90.0, 180.0, 1.21, 1.30, 1.14);
		    	case 17: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 1458, 1, -1.39, -0.65, -0.26, -6.0, 443.0, -169.0, 1.00, 1.00, 1.00);
		    	//case 18: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 3092, 2, 2.09, 0.09, 0.49, -353.0, 800.0, -367.0, 10.29, 5.50, 8.73);
		    	//case 19: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 3556, 1, 0.00, 0.00, 0.00, 0.0, 86.0, 0.0, -0.42, -0.29, 0.74);
		    	//case 20: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 2908, 2, 0.23, 0.16, 0.01, 531.0, 368.0, -254.0, 4.38, 3.29, 4.94);
		    	//case 21: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 1608, 1, 1.31, 0.00, 0.00, 0.0, 90.0, 2.0, 2.99, 3.00, 3.09);
		    	case 18: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 2589, 5, 0.13, 0.10, 0.46, -9.0, 5.0, -1.0, 1.00, 1.00, 1.00);
		    	//case 23: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 19308, 2, 0.02, 0.01, -0.00, 0.0, 81.0, 90.0, 2.16, 0.75, 1.00);
		    	case 19: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 3243, 1, -1.34, -0.40, 0.00, 0.0, 90.0, 0.0, 0.79, 0.81, 0.69);
		    	case 20: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 3461, 6, 0.07, 0.01, 0.44, 0.0, 0.0, 0.0, 1.00, 1.00, 1.00);
		    	case 21: SetPlayerAttachedObject(playerid, 2, 19065, 2, 0.120000, 0.040000, -0.003500, 0, 100, 100, 1.4, 1.4, 1.4);///santa hat |||
		    	case 22: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 1518, 2, 0.01, 0.03, -0.06, 115.0, 90.0, 63.0, 1.00, 1.20, 1.00);
		    //	case 28: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 1254, 2, 0.06, -0.09, 0.04, 0.0, 78.0, 0.0, 2.79, 3.15, 2.90);
				case 23: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 19086, 8, -0.049768, -0.014062, -0.108385, 87.458297, 263.478149, 184.123764, 0.622413, 1.041609, 1.012785 );
		    	case 24: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 18635, 6, -0.0669, -0.0419, -0.0060, 0.0000, 0.0000, 0.0000, 1.6649, 2.5780, 2.3729); // "shit" by Player (Skin:0)
		    	case 25: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 3012, 2, -0.9359, 0.4739, -0.6489, -16.1000, 45.1000, 47.8999, 1.9630, 1.5399, 1.8259);
				case 26: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 19137, 2, 0.1309, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 1.2610, 0.8239, 1.1559);
				//case 29: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 19065, 2, 0.120000, 0.040000, -0.003500, 0, 100, 100, 1.4, 1.4, 1.4);
			}
		  }
	    }
	    case 275:
	    {
		  if(response)
		  {
       	    if(IsPlayerAttachedObjectSlotUsed(AttachObjectTo[playerid], 2)) RemovePlayerAttachedObject(AttachObjectTo[playerid], 2);
       	    if(IsPlayerAttachedObjectSlotUsed(AttachObjectTo[playerid], 3)) RemovePlayerAttachedObject(AttachObjectTo[playerid], 3);
       	    if(IsPlayerAttachedObjectSlotUsed(AttachObjectTo[playerid], 4)) RemovePlayerAttachedObject(AttachObjectTo[playerid], 4);
       	    if(IsPlayerAttachedObjectSlotUsed(AttachObjectTo[playerid], 5)) RemovePlayerAttachedObject(AttachObjectTo[playerid], 5);
			switch(listitem)
			{
			    case 0: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 18963, 2, 0.10, -0.05, 0.00, -290.0, 78.0, -338.0, 3.79, 5.03, 4.72);
			    case 1: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 18729, 7, 0.20, -0.05, -1.54, 0.0, -4.0, -211.0, 1.00, 1.00, 1.00);
			    case 2: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 1343, 1, -0.14, -0.18, -0.00, -1.0, 89.0, 0.0, 1.45, 1.40, 1.36);
			    case 3: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 1343, 1, 0.33, 0.02, 0.01, -1.0, 89.0, 0.0, 0.43, 0.30, 0.29);
			    case 4: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 1346, 1, -0.06, -0.03, -0.03, 0.0, 87.0, 89.0, 1.00, 1.00, 1.00);
			    case 5: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 19339, 2, 0.07, -0.42, -0.04, 638.0, 542.0, -344.0, 1.00, 1.00, 1.00);
			    case 6: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 19344, 2, 0.03, -0.00, 0.00, 0.0, 76.0, 57.0, 1.40, 1.15, 1.21);
			    case 7: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 19320, 2, 0.18, 0.02, 0.05, 3.0, 73.0, -1.0, 1.00, 1.00, 1.00);
			    case 8: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 19079, 1, -0.70, 0.00, 0.00, 0.0, 0.0, 0.0, 8.90, 10.82, 9.07);
			    case 9: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 19078, 1, 0.320722, -0.067912, -0.165151, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
			    case 10: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 3092, 1, 0.00, -0.28, -0.03, 0.0, 80.0, -180.0, 1.00, 1.00, 1.00);
			    case 11: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 18701, 6, 0.01, 0.48, -1.57, 0.0, 0.0, 0.0, 1.00, 1.00, 1.00), SetPlayerAttachedObject(AttachObjectTo[playerid], 3, 18701, 6, 0.04, 0.02, -1.67, 0.0, 0.0, 0.0, 4.89, -2.20, 1.00);
			    case 12: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 18688, 1, -0.49, -0.45, -2.51, 0.0, 0.0, 0.0, 3.49, 1.28, 1.60);
			    case 13: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 19315, 2, -0.23, 0.02, -0.02, 264.0, 110.0, 192.0, 0.78, 1.20, 1.00);
			    case 14: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 19315, 2, -0.29, 0.24, 0.04, 14.0, 96.0, 73.0, 2.39, 5.72, 2.83);
			    case 15: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 18640, 2, 0.02, 0.32, -0.02, 347.0, -6.0, 0.0, 7.74, 7.14, 6.30), SetPlayerAttachedObject(AttachObjectTo[playerid], 3, 19008, 2, 0.00, 0.44, -0.09, 0.0, 79.0, 78.0, 3.91, 8.06, 7.98), SetPlayerAttachedObject(AttachObjectTo[playerid], 4, 19320, 2, -0.06, 0.00, 0.03, 44.0, 80.0, -320.0, 2.00, 3.09, 3.89);
		    	case 16: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 18640, 2, 0.02, 0.32, -0.02, 347.0, -6.0, 0.0, 7.74, 7.14, 6.30), SetPlayerAttachedObject(AttachObjectTo[playerid], 3, 359, 6, 0.00, 0.68, 0.00, 0.0, 0.0, 0.0, 1.00, 1.00, 1.00), SetPlayerAttachedObject(AttachObjectTo[playerid], 4, 19008, 2, 0.00, 0.44, -0.09, 0.0, 79.0, 78.0, 3.91, 8.06, 7.98), SetPlayerAttachedObject(AttachObjectTo[playerid], 5, 1343, 1, -0.20, 0.12, -0.09, 0.0, 90.0, 180.0, 1.21, 1.30, 1.14);
		    	case 17: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 1458, 1, -1.39, -0.65, -0.26, -6.0, 443.0, -169.0, 1.00, 1.00, 1.00);
		    	case 18: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 3092, 2, 2.09, 0.09, 0.49, -353.0, 800.0, -367.0, 10.29, 5.50, 8.73);
		    	case 19: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 3556, 1, 0.00, 0.00, 0.00, 0.0, 86.0, 0.0, -0.42, -0.29, 0.74);
		    	case 20: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 2908, 2, 0.23, 0.16, 0.01, 531.0, 368.0, -254.0, 4.38, 3.29, 4.94);
		    	case 21: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 1608, 1, 1.31, 0.00, 0.00, 0.0, 90.0, 2.0, 2.99, 3.00, 3.09);
		    	case 22: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 2589, 5, 0.13, 0.10, 0.46, -9.0, 5.0, -1.0, 1.00, 1.00, 1.00);
		    	case 23: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 19308, 2, 0.02, 0.01, -0.00, 0.0, 81.0, 90.0, 2.16, 0.75, 1.00);
		    	case 24: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 3243, 1, -1.34, -0.40, 0.00, 0.0, 90.0, 0.0, 0.79, 0.81, 0.69);
		    	case 25: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 3461, 6, 0.07, 0.01, 0.44, 0.0, 0.0, 0.0, 1.00, 1.00, 1.00);
		    	case 26: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 1609, 2, 0.00, 0.00, 0.02, 165.0, 101.0, -174.0, 3.59, 3.49, 3.59);
		    	case 27: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 1518, 2, 0.01, 0.03, -0.06, 115.0, 90.0, 63.0, 1.00, 1.20, 1.00);
		    	case 28: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 1254, 2, 0.06, -0.09, 0.04, 0.0, 78.0, 0.0, 2.79, 3.15, 2.90);
				case 29: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 19086, 8, -0.049768, -0.014062, -0.108385, 87.458297, 263.478149, 184.123764, 0.622413, 1.041609, 1.012785 );
		    	case 30: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 18635, 6, -0.0669, -0.0419, -0.0060, 0.0000, 0.0000, 0.0000, 1.6649, 2.5780, 2.3729); // "shit" by Player (Skin:0)
		    	case 31: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 3012, 2, -0.9359, 0.4739, -0.6489, -16.1000, 45.1000, 47.8999, 1.9630, 1.5399, 1.8259);
				case 32: SetPlayerAttachedObject(AttachObjectTo[playerid], 2, 19137, 2, 0.1309, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 1.2610, 0.8239, 1.1559);
			}
		  }
	    }
	    case 1111:
	    {
		 if(response)
		 {
		   switch(listitem)
		   {
			  case 0:ShowPlayerDialog(playerid, 1112, DIALOG_STYLE_INPUT, ""LIGHTYELLOW_"GTADM "WHITE_"- VIP Setting (Vip Skin)", "Enter The ID of your new vip skin", "Select", "Exit");
			  case 1:ShowPlayerDialog(playerid, 1113, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM "WHITE_"- VIP Setting (Vip Job)", "1. Civilian\n2. Medic\n3. Cop\n4. Hitman\n5. Mechanic\n6. Dealer\n7. Terrorist\n8. Whore\n9. Trucker", "Select", "Exit");//n9. Trucker
			  case 2:ShowPlayerDialog(playerid, 1114, DIALOG_STYLE_INPUT, ""LIGHTYELLOW_"GTADM "WHITE_"- VIP Setting (Weapon 1)", "Enter The ID of your new vip weapon 1", "Select", "Exit");
			  case 3:ShowPlayerDialog(playerid, 1115, DIALOG_STYLE_INPUT, ""LIGHTYELLOW_"GTADM "WHITE_"- VIP Setting (Weapon 2)", "Enter The ID of your new vip weapon 2", "Select", "Exit");
			  case 4:ShowPlayerDialog(playerid, 1116, DIALOG_STYLE_INPUT, ""LIGHTYELLOW_"GTADM "WHITE_"- VIP Setting (Weapon 3)", "Enter The ID of your new vip weapon 3", "Select", "Exit");
			  case 5:ShowPlayerDialog(playerid, 8414, DIALOG_STYLE_INPUT, ""LIGHTYELLOW_"GTADM "WHITE_"- VIP Setting (HeadText)", ""GRAY_"Enter Your New HeadText Below\n"GRAY_"Colors:\n{FFFFFF}~w~ WHITE\n{FF0000}~r~ RED \n{0000FF} ~b~BLUE\n{12DE00}~g~ GREEN\n{EA00FF}~p~ PINK\n{FFEE00}~y~ YELLOW\n{FF9100}~o~ ORANGE\n{00E5FF}~lb~ LIGHT BLUE\n"lime2"~lg~ LIME\n{FFBFFA}~lp~ LIGHT PINK\n{403E40}~l~ BLACK", "Set", "Exit");
			  case 6:cmd_vipcmds(playerid);
		   }
		 }
	    }
	    case 1112:
	    {
		 if(response)
		 {
            if(strval(inputtext) > 299 || strval(inputtext) < 0) return SendWarning(playerid, "{BABABA}Invalid skin id");
			PlayerInfo[playerid][pVipSkin] = strval(inputtext);
			SetPlayerSkin(playerid, strval(inputtext));
    		new Query[128];
    		format(Query, sizeof(Query), "UPDATE `users` SET `VipSkin` = %d WHERE `Name` = '%s'", PlayerInfo[playerid][pVipSkin], pEscName[playerid]);
    		mysql_query(GTADM, Query);

		 }
	    }
	    case 1113:
	    {
		 if(response)
		 {
			PlayerInfo[playerid][pVipJob] = listitem;
    		new Query[128];
    		format(Query, sizeof(Query), "UPDATE `users` SET `VipJob` = %d WHERE `Name` = '%s'", PlayerInfo[playerid][pVipJob], pEscName[playerid]);
    		mysql_query(GTADM, Query);
		 }
	    }
		case 1114:
		{
		 if(response)
		 {
		    if((IsvalidWeapon(strval(inputtext)) != 1) ) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}invalid weapon id");
			PlayerInfo[playerid][pVipWeapon1] = strval(inputtext);
			PlayerInfo[playerid][pVipAmmo1] = 9999;
			new Query[128];
			format(Query, sizeof(Query), "UPDATE `users` SET `VipWeap1` = %d, `VipAmmo1` = 9999 WHERE `Name` = '%s'", strval(inputtext), pEscName[playerid]);
			mysql_query(GTADM, Query);
		 }
		}
		case 1115:
		{
		 if(response)
		 {
		    if((IsvalidWeapon(strval(inputtext)) != 1) ) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}invalid weapon id");
			PlayerInfo[playerid][pVipWeapon2] = strval(inputtext);
			PlayerInfo[playerid][pVipAmmo2] = 9999;
		//			GivePlayerWeaponEX(playerid, strval(inputtext), 9999);

			new Query[128];
			format(Query, sizeof(Query), "UPDATE `users` SET `VipWeap2` = %d, `VipAmmo2` = 9999 WHERE `Name` = '%s'", strval(inputtext), pEscName[playerid]);
			mysql_query(GTADM, Query);
		 }
		}
		case 1116:
		{
		 if(response)
		 {
		    if((IsvalidWeapon(strval(inputtext)) != 1) ) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}invalid weapon id");
			PlayerInfo[playerid][pVipWeapon3] = strval(inputtext);
			PlayerInfo[playerid][pVipAmmo3] = 9999;
		//			GivePlayerWeaponEX(playerid, strval(inputtext), 9999);
			new Query[128];
			format(Query, sizeof(Query), "UPDATE `users` SET `VipWeap3` = %d, `VipAmmo3` = 9999 WHERE `Name` = '%s'", strval(inputtext), pEscName[playerid]);
			mysql_query(GTADM, Query);
		 }
		}

		case 1117:
		{
			if(response)
			{
				if(strlen(inputtext) < 3 || strlen(inputtext) > 32) return SendWarning(playerid, "3d text must be between 3 and 32 characters");
				format(PlayerInfo[playerid][HeadText], 50, "%s", inputtext);
//				Set3DText(playerid, 1);
				new Query[128];
				format(Query, sizeof(Query), "UPDATE `users` SET `HeadText` = '%s'  WHERE `Name` = '%s'", Escape_String(inputtext), pEscName[playerid]);
				mysql_query(GTADM, Query);
			}
		}
        case 8761:
        {
		   if(response)
		   {
				PlayerInfo[playerid][VipItems][0] = 1;
				SendClientMessage(playerid, 0xBBF582FF, "» VIP « {6AC213} You are now able to use the command (/Car2)");
				SendClientMessage(playerid, 0xBBF582FF, "» VIP « {6AC213} To set your second vehicle use the command (/SetSecondCar)");
				SendClientMessage(playerid, GRAY, "-NOTE- Only CarColor , Wheels and Nitro will save on your second car");
				PlayerInfo[playerid][pVip]=PlayerInfo[playerid][pVip]-5;
				new Query[168];
				format(Query, sizeof(Query), "UPDATE `users` SET `VIP` = %d, `VipFe1` = 1 WHERE `UserID` = '%d'", PlayerInfo[playerid][pVip], PlayerInfo[playerid][UserID]);
				mysql_query(GTADM, Query);
		   }
		   else ShowMenuForPlayer(VipMenu, playerid);
        }
        case 8762, 8414:
        {
		   if(response)
		   {
              if((strlen(inputtext) < 3) || strlen(inputtext) >= 30)
			  {
			    SendWarning(playerid, "3d text must be between 3 and 30 characters");
                ShowPlayerDialog(playerid, 8762, DIALOG_STYLE_INPUT, "VIP SHOP", ""GRAY_"Enter Your New HeadText Below\n"GRAY_"Colors:\n{FFFFFF}~w~ WHITE\n{FF0000}~r~ RED \n{0000FF} ~b~BLUE\n{12DE00}~g~ GREEN\n{EA00FF}~p~ PINK\n{FFEE00}~y~ YELLOW\n{FF9100}~o~ ORANGE\n{00E5FF}~lb~ LIGHT BLUE\n"lime2"~lg~ LIME\n{FFBFFA}~lp~ LIGHT PINK\n{403E40}~l~ BLACK", "Set", "Exit");
			  }
			  else
			  {
			  	new str[256];
				format(str, sizeof(str), "%s", inputtext);
				//if((strfind(str, "dod", true) != -1)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}An invalid character has been used");
      		//	if((strfind(str, "d0d", true) != -1)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}An invalid character has been used");
      		//	if((strfind(str, "danger of death", true) != -1)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}An invalid character has been used");
      			//if((strfind(str, "dangerofdeath", true) != -1)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}An invalid character has been used");

				str_replace("~w~", "{FFFFFF}", str);
				str_replace("~r~", "{FF0000}", str);
				str_replace("~b~", "{0000FF}", str);
				str_replace("~g~", "{12DE00}", str);
				str_replace("~p~", "{EA00FF}", str);
				str_replace("~y~", "{FFEE00}", str);
				str_replace("~o~", "{FF9100}", str);
				str_replace("~lb~", "{00E5FF}", str);
				str_replace("~lg~", "{AAFF00}", str);
				str_replace("~lp~", "{FFBFFA}", str);
				str_replace("~l~", "{403E40}", str);
				format(PlayerInfo[playerid][HeadText], 50, "%s", str);
//				Set3DText(playerid, 1);

				new Query[168];
				format(Query, sizeof(Query), "UPDATE `users` SET `HeadText` = '%s' WHERE `UserID` = '%d'", Escape_String(PlayerInfo[playerid][HeadText]), PlayerInfo[playerid][UserID]);
				mysql_query(GTADM, Query);
			    format(str, sizeof(str), "» HeadText «  Your HeadText has been set to %s", str);
		  	    SendClientMessage(playerid, AdminInfo, str);

			  }
		   }
		   //else
          //}//{ if(dialogid == 8762) cmd_headtext(playerid); }//ShowMarketVPMenu(playerid);//ShowMenuForPlayer(VipMenu, playerid); }
        }
        case 8763:
        {
		   if(response)
		   {
				PlayerInfo[playerid][VipItems][1] = 1;
				SendClientMessage(playerid, 0xBBF582FF, "» VIP « {6AC213} You have got a teleport discount of 1/3 "GRAY_"Using teleport command will now cost you 2000$ instead of 3000$");

				PlayerInfo[playerid][pVip]=PlayerInfo[playerid][pVip]-5;
				new Query[168];
				format(Query, sizeof(Query), "UPDATE `users` SET `VIP` = %d, `VipFe2` = 1 WHERE `UserID` = '%d'", PlayerInfo[playerid][pVip], PlayerInfo[playerid][UserID]);
				mysql_query(GTADM, Query);
		   }
		   else ShowMenuForPlayer(VipMenu, playerid);
        }
        case 8764:
        {
		   if(response)
		   {
				PlayerInfo[playerid][VipItems][2] = 1;
				SendClientMessage(playerid, 0xBBF582FF, "» VIP « {6AC213} You have got a discount of 1/4 for buying spawn weapons from any AMMU-Nation Store");
				PlayerInfo[playerid][pVip]=PlayerInfo[playerid][pVip]-3;
				new Query[168];
				format(Query, sizeof(Query), "UPDATE `users` SET `VIP` = %d, `VipFe3` = 1 WHERE `UserID` = '%d'", PlayerInfo[playerid][pVip], PlayerInfo[playerid][UserID]);
				mysql_query(GTADM, Query);
		   }
		   else ShowMenuForPlayer(VipMenu, playerid);
        }
        case 8765:
        {
		   if(response)
		   {
				PlayerInfo[playerid][VipItems][3] = 1;
				SendClientMessage(playerid, 0xBBF582FF, "» VIP « {6AC213} You have got a discount of 1/4 for buying cars from any car dealer");
				PlayerInfo[playerid][pVip]=PlayerInfo[playerid][pVip]-4;
				new Query[168];
				format(Query, sizeof(Query), "UPDATE `users` SET `VIP` = %d, `VipFe4` = 1 WHERE `UserID` = '%d'", PlayerInfo[playerid][pVip], PlayerInfo[playerid][UserID]);
				mysql_query(GTADM, Query);
		   }
		   else ShowMenuForPlayer(VipMenu, playerid);
        }

        case 8766:
        {
		   if(response)
		   {
				SendClientMessage(playerid, 0xBBF582FF, "» VIP « {6AC213} You have received 200 Score Points for selling 1 VIP Point");
				ScoreTDupdate(playerid, 200);
				PlayerInfo[playerid][pVip]=PlayerInfo[playerid][pVip]-1;
				new Query[168];
				format(Query, sizeof(Query), "UPDATE `users` SET `VIP` = %d WHERE `UserID` = '%d'", PlayerInfo[playerid][pVip], PlayerInfo[playerid][UserID]);
				mysql_query(GTADM, Query);
		   }
		   else ShowMenuForPlayer(VipMenu, playerid);
        }
        case 8767:
        {
		   if(response)
		   {
				SendClientMessage(playerid, 0xBBF582FF, "» VIP « {6AC213} You have received 30000000$ for selling 1 VIP Point");
				GivePlayerMoneyEX(playerid, 30000000);
				PlayerInfo[playerid][pVip]=PlayerInfo[playerid][pVip]-1;
				new Query[168];
				format(Query, sizeof(Query), "UPDATE `users` SET `VIP` = %d WHERE `UserID` = '%d'", PlayerInfo[playerid][pVip], PlayerInfo[playerid][UserID]);
				mysql_query(GTADM, Query);
		   }
		   else ShowMenuForPlayer(VipMenu, playerid);
        }
        case 8768:
        {
		   if(response)
		   {
				SendClientMessage(playerid, 0xBBF582FF, "» VIP « {6AC213} You have received 100 premium Points for selling 1 VIP Point");
				GivePP(playerid, 100);
				PlayerInfo[playerid][pVip]=PlayerInfo[playerid][pVip]-1;
				new Query[168];
				format(Query, sizeof(Query), "UPDATE `users` SET `VIP` = %d WHERE `UserID` = '%d'", PlayerInfo[playerid][pVip], PlayerInfo[playerid][UserID]);
				mysql_query(GTADM, Query);
		   }
		   else ShowMenuForPlayer(VipMenu, playerid);
        }



       /* case 8777:
        {
		   if(response)
		   {
              if((strlen(inputtext) < 3) || strlen(inputtext) >= 30)
			  {
			    SendWarning(playerid, "3d text must be between 3 and 30 characters");
                ShowPlayerDialog(playerid, 8777, DIALOG_STYLE_INPUT, "Premium SHOP", ""GRAY_"Enter Your New HeadText Below\n"GRAY_"Colors:\n{FFFFFF}~w~ WHITE\n{FF0000}~r~ RED \n{0000FF} ~b~BLUE\n{12DE00}~g~ GREEN\n{EA00FF}~p~ PINK\n{FFEE00}~y~ YELLOW\n{FF9100}~o~ ORANGE\n{00E5FF}~lb~ LIGHT BLUE\n"lime2"~lg~ LIME\n{FFBFFA}~lp~ LIGHT PINK\n{403E40}~l~ BLACK", "Set", "Exit");
			  }
			  else
			  {
				GivePP(playerid, -50);
				PlayerInfo[playerid][premiumItems][4]+=3;
				PlayerInfo[playerid][premiumItems][4]--;
				new str[256];
				format(str, sizeof(str), "%s", inputtext);
				str_replace("~w~", "{FFFFFF}", str);
				str_replace("~r~", "{FF0000}", str);
				str_replace("~b~", "{0000FF}", str);
				str_replace("~g~", "{12DE00}", str);
				str_replace("~p~", "{EA00FF}", str);
				str_replace("~y~", "{FFEE00}", str);
				str_replace("~o~", "{FF9100}", str);
				str_replace("~lb~", "{00E5FF}", str);
				str_replace("~lg~", "{AAFF00}", str);
				str_replace("~lp~", "{FFBFFA}", str);
				str_replace("~l~", "{403E40}", str);
				format(PlayerInfo[playerid][HeadText], 50, "%s", str);
//				Set3DText(playerid, 1);

				new Query[168];
				format(Query, sizeof(Query), "UPDATE `users` SET `HeadText` = '%s', `CookFe5` ='%d' WHERE `UserID` = '%d'", Escape_String(PlayerInfo[playerid][HeadText]), PlayerInfo[playerid][premiumItems][4], PlayerInfo[playerid][UserID]);
				mysql_query(GTADM, Query);
			    format(str, sizeof(str), "» HeadText «  Your HeadText has been set to %s", PlayerInfo[playerid][HeadText], PlayerInfo[playerid][premiumItems][4]);
		  	    SendClientMessage(playerid, AdminInfo, str);
			    format(str, sizeof(str), "» HeadText «  You can change your headtext with the command (/HeadText) Possible changes (%d)", PlayerInfo[playerid][premiumItems][4]);
		  	    SendClientMessage(playerid, AdminInfo, str);

			  }
		   }
		   else ShowMarketPPMenu(playerid);//ShowMenuForPlayer(CookMenu, playerid);
        }


        case 8771:
        {
		   if(response)
		   {
              if((strlen(inputtext) < 3) || strlen(inputtext) >= 30)
			  {
			       SendWarning(playerid, "3d text must be between 3 and 30 characters");
				   new str[512], textlolo[70];
				   if(strlen(PlayerInfo[playerid][HeadText]) < 3) format(textlolo, sizeof(textlolo), "-");
				   else format(textlolo, sizeof(textlolo), "%s", PlayerInfo[playerid][HeadText]);
				   format(str, sizeof(str), "Current Headtext: %s\nChanges Left: %d\n"GRAY_"Enter Your New HeadText Below\n"GRAY_"Colors:\n{FFFFFF}~w~ WHITE\n{FF0000}~r~ RED \n{0000FF} ~b~BLUE\n{12DE00}~g~ GREEN\n{EA00FF}~p~ PINK\n{FFEE00}~y~ YELLOW\n{FF9100}~o~ ORANGE\n{00E5FF}~lb~ LIGHT BLUE\n"lime2"~lg~ LIME\n{FFBFFA}~lp~ LIGHT PINK\n{403E40}~l~ BLACK", textlolo, PlayerInfo[playerid][premiumItems][4]);
				   ShowPlayerDialog(playerid, 8771, DIALOG_STYLE_INPUT, "HeadText", str, "Set", "Exit");
			  }
			  else
			  {
				PlayerInfo[playerid][premiumItems][4]--;
				new str[256];
				format(str, sizeof(str), "%s", inputtext);
				str_replace("~w~", "{FFFFFF}", str);
				str_replace("~r~", "{FF0000}", str);
				str_replace("~b~", "{0000FF}", str);
				str_replace("~g~", "{12DE00}", str);
				str_replace("~p~", "{EA00FF}", str);
				str_replace("~y~", "{FFEE00}", str);
				str_replace("~o~", "{FF9100}", str);
				str_replace("~lb~", "{00E5FF}", str);
				str_replace("~lg~", "{AAFF00}", str);
				str_replace("~lp~", "{FFBFFA}", str);
				str_replace("~l~", "{403E40}", str);
				format(PlayerInfo[playerid][HeadText], 50, "%s", str);
//				Set3DText(playerid, 1);

				new Query[168];
				format(Query, sizeof(Query), "UPDATE `users` SET `HeadText` = '%s', `CookFe5` ='%d' WHERE `UserID` = '%d'", Escape_String(PlayerInfo[playerid][HeadText]), PlayerInfo[playerid][premiumItems][4], PlayerInfo[playerid][UserID]);
				mysql_query(GTADM, Query);
			    format(str, sizeof(str), "» HeadText «  Your HeadText has been set to %s", str);
		  	    SendClientMessage(playerid, AdminInfo, str);
		  	    SendClientMessage(playerid, AdminInfo, "» HeadText «  You can change your headtext with the command (/HeadText)");

			  }
		   }
        }
        case 8778:
        {
		   if(response)
		   {
				 GivePP(playerid, -20);
				 PlayerInfo[playerid][premiumItems][0] = 1;
				 SendClientMessage(playerid, 0xBBF582FF, "» Premium « {6AC213} You are now able to use the command (/TOW)");

			     new Query[168];
				 format(Query, sizeof(Query), "UPDATE `users` SET `CookFe1` = 1 WHERE `UserID` = '%d'", PlayerInfo[playerid][UserID]);
				 mysql_query(GTADM, Query);
		   }
		   else ShowMenuForPlayer(CookMenu, playerid);
        }
        case 8779:
        {
		   if(response)
		   {
				 GivePP(playerid, -20);
				 PlayerInfo[playerid][premiumItems][1] = 1;
				 SendClientMessage(playerid, 0xBBF582FF, "» Premium « {6AC213} You are now able to use the command (/Mod)");
			     new Query[168];
				 format(Query, sizeof(Query), "UPDATE `users` SET `CookFe2` = 1 WHERE `UserID` = '%d'", PlayerInfo[playerid][UserID]);
				 mysql_query(GTADM, Query);
		   }
		   else ShowMenuForPlayer(CookMenu, playerid);
        }

        case 8780:
        {
		   if(response)
		   {
				 GivePP(playerid, -40);
				 PlayerInfo[playerid][premiumItems][2] = 1;
				 SendClientMessage(playerid, 0xBBF582FF, "» Premium « {6AC213} You are now able to use the command (/Neon)");
			     new Query[168];
				 format(Query, sizeof(Query), "UPDATE `users` SET `CookFe3` = 1 WHERE `UserID` = '%d'", PlayerInfo[playerid][UserID]);
				 mysql_query(GTADM, Query);
		   }
		   else ShowMenuForPlayer(CookMenu, playerid);
        }
        case 8781:
        {
		   if(response)
		   {
				 GivePP(playerid, -50);
				 PlayerInfo[playerid][premiumItems][3] = 1;
				 SendClientMessage(playerid, 0xBBF582FF, "» Premium « {6AC213} You are now able to teleport and buy vehicle from (/Cars9)");
			     new Query[168];
				 format(Query, sizeof(Query), "UPDATE `users` SET `CookFe4` = 1 WHERE `UserID` = '%d'", PlayerInfo[playerid][UserID]);
				 mysql_query(GTADM, Query);
		   }
		   else ShowMenuForPlayer(CookMenu, playerid);
        }
        case 8782:
        {
		   if(response)
		   {
				 GivePP(playerid, -1);
				 SendClientMessage(playerid, 0xBBF582FF, "» Premium « {6AC213} You have received 1000000$ for selling 1 Premium Points");
				 GivePlayerMoneyEX(playerid, 1000000);
		   }
		   else ShowMenuForPlayer(CookMenu, playerid);
        }
        case 8783:
        {
		   if(response)
		   {
				 GivePP(playerid, -1);
				 SendClientMessage(playerid, 0xBBF582FF, "» Premium « {6AC213} You have received 20 Score Points for selling 1 Premium Points");
				 ScoreTDupdate(playerid, 20);
		   }
		   else ShowMenuForPlayer(CookMenu, playerid);
        }
        case 8784:
        {
		   if(response)
		   {
				 if(GetPlayerMoneyEx(playerid) < 50000000) return SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You dont have enough money buy this item");
				 GivePP(playerid, 1);
				 GivePlayerMoneyEX(playerid, -50000000);
				 SendClientMessage(playerid, 0xBBF582FF, "» Premium « {6AC213} You have bought 1 Premium Point for $50000000");
		   }
		   else ShowMenuForPlayer(CookMenu, playerid);
        }*/
        case 9946:
        {
          if(!response) ShowMarketVPMenu(playerid), TogglePlayerControllable(playerid, 1);
		  if(response)
		  {
            SendClientMessage(playerid, 0xBBF582FF, "» VIP « {6AC213} You have received 200 Score Points for selling 1 VIP Point");
            ScoreTDupdate(playerid, 200);
            PlayerInfo[playerid][pVip]=PlayerInfo[playerid][pVip]-1;
            new Query[168];
            format(Query, sizeof(Query), "UPDATE `users` SET `VIP` = %d WHERE `UserID` = '%d'", PlayerInfo[playerid][pVip], PlayerInfo[playerid][UserID]);
            mysql_query(GTADM, Query);
            TogglePlayerControllable(playerid, 1);
            PlayerPlaySound(playerid, BuySound, 0.0, 0.0, 0.0);
          }
		}
        case 9980:
        {
          if(!response) ShowMarketVPMenu(playerid), TogglePlayerControllable(playerid, 1);
		  if(response)
		  {
            SendClientMessage(playerid, 0xBBF582FF, "» VIP « {6AC213} You have bought the /attachments command for selling 5 VIP Points!");
            PlayerInfo[playerid][pVip]=PlayerInfo[playerid][pVip]-5;
            PlayerInfo[playerid][VipItems][4] = 1;
            attach[playerid] = 1;
            new Query[168];
            format(Query, sizeof(Query), "UPDATE `users` SET `VIP` = %d, `attach` = 1 WHERE `UserID` = '%d'", PlayerInfo[playerid][pVip], PlayerInfo[playerid][UserID]);
            mysql_query(GTADM, Query);
            TogglePlayerControllable(playerid, 1);
            PlayerPlaySound(playerid, BuySound, 0.0, 0.0, 0.0);
          }
		}
        case 9981:
        {
          if(!response) ShowMarketVPMenu(playerid), TogglePlayerControllable(playerid, 1);
		  if(response)
		  {
            SendClientMessage(playerid, 0xBBF582FF, "» VIP « {6AC213} You have bought the special ramp (/ramp) for selling 10 VIP Points!");
            PlayerInfo[playerid][pVip]=PlayerInfo[playerid][pVip]-10;
            //PlayerInfo[playerid][VipItems][4] = 1;
            specramp[playerid] = 1;
            new Query[168];
            format(Query, sizeof(Query), "UPDATE `users` SET `VIP` = %d, `specramp` = 1 WHERE `UserID` = '%d'", PlayerInfo[playerid][pVip], PlayerInfo[playerid][UserID]);
            mysql_query(GTADM, Query);
            TogglePlayerControllable(playerid, 1);
            PlayerPlaySound(playerid, BuySound, 0.0, 0.0, 0.0);
          }
		}
        case 9982:
        {
          if(!response) ShowMarketVPMenu(playerid), TogglePlayerControllable(playerid, 1);
		  if(response)
		  {
            SendClientMessage(playerid, 0xBBF582FF, "» VIP « {6AC213} You have bought the Anti Fall from bike (/AF) for selling 10 VIP Points!");
            PlayerInfo[playerid][pVip]=PlayerInfo[playerid][pVip]-10;
            //PlayerInfo[playerid][VipItems][4] = 1;
            antifallvip[playerid] = 1;
            new Query[168];
            format(Query, sizeof(Query), "UPDATE `users` SET `VIP` = %d, `antifallvip` = 1 WHERE `UserID` = '%d'", PlayerInfo[playerid][pVip], PlayerInfo[playerid][UserID]);
            mysql_query(GTADM, Query);
            TogglePlayerControllable(playerid, 1);
            PlayerPlaySound(playerid, BuySound, 0.0, 0.0, 0.0);
          }
		}
        case 9983:
        {
          if(!response) ShowMarketVPMenu(playerid), TogglePlayerControllable(playerid, 1);
		  if(response)
		  {
            SendClientMessage(playerid, 0xBBF582FF, "» VIP « {6AC213} You have bought the Free Permit (/Permit) for selling 10 VIP Points!");
            PlayerInfo[playerid][pVip]=PlayerInfo[playerid][pVip]-5;
            //PlayerInfo[playerid][VipItems][4] = 1;
            freepermit[playerid] = 1;
            new Query[168];
            format(Query, sizeof(Query), "UPDATE `users` SET `VIP` = %d, `freepermit` = 1 WHERE `UserID` = '%d'", PlayerInfo[playerid][pVip], PlayerInfo[playerid][UserID]);
            mysql_query(GTADM, Query);
            TogglePlayerControllable(playerid, 1);
            PlayerPlaySound(playerid, BuySound, 0.0, 0.0, 0.0);
          }
		}
        case 9947:
        {
          if(!response) ShowMarketVPMenu(playerid), TogglePlayerControllable(playerid, 1);
		  if(response)
		  {
            SendClientMessage(playerid, 0xBBF582FF, "» VIP « {6AC213} You have received 30000000$ for selling 1 VIP Point");
  			GivePlayerMoneyEX(playerid, 30000000);
  			PlayerInfo[playerid][pVip]=PlayerInfo[playerid][pVip]-1;
  			new Query[168];
  			format(Query, sizeof(Query), "UPDATE `users` SET `VIP` = %d WHERE `UserID` = '%d'", PlayerInfo[playerid][pVip], PlayerInfo[playerid][UserID]);
  			mysql_query(GTADM, Query);
  			TogglePlayerControllable(playerid, 1);
  			PlayerPlaySound(playerid, BuySound, 0.0, 0.0, 0.0);
          }
		}
	    /*case 9979:
        {
          if(!response) ShowMarketVPMenu(playerid), TogglePlayerControllable(playerid, 1);
		  if(response)
		  {
            SendClientMessage(playerid, 0xBBF582FF, "» VIP « {6AC213} You have bought /attachments command for 5 VIP Points.");
  			PlayerInfo[playerid][pVip]=PlayerInfo[playerid][pVip]-5;
  			MarketVPI8[playerid] = 1;
            new Query[168];
            format(Query, sizeof(Query), "UPDATE `users` SET `VIP` = %d, `MarketVPI8` = 1 WHERE `UserID` = '%d'", PlayerInfo[playerid][pVip], PlayerInfo[playerid][UserID]);
  			mysql_query(GTADM, Query);
  			TogglePlayerControllable(playerid, 1);
          }
		}*/
        case 9948:
        {
          if(!response) ShowMarketVPMenu(playerid), TogglePlayerControllable(playerid, 1);
		  if(response)
		  {
            SendClientMessage(playerid, 0xBBF582FF, "» VIP « {6AC213} You have received 100 premium Points for selling 1 VIP Point");
			GivePP(playerid, 100);
			PlayerInfo[playerid][pVip]=PlayerInfo[playerid][pVip]-1;
			new Query[168];
			format(Query, sizeof(Query), "UPDATE `users` SET `VIP` = %d WHERE `UserID` = '%d'", PlayerInfo[playerid][pVip], PlayerInfo[playerid][UserID]);
			mysql_query(GTADM, Query);
			TogglePlayerControllable(playerid, 1);
			PlayerPlaySound(playerid, BuySound, 0.0, 0.0, 0.0);
          }
		}
        case 9971:
        {
		  if(!response) ShowMarketPPMenu(playerid), TogglePlayerControllable(playerid, 1);
		  if(response)
		  {
            GivePP(playerid, -1);
            SendClientMessage(playerid, 0xBBF582FF, "» Premium « {6AC213} You have received 1000000$ for selling 1 Premium Points");
            GivePlayerMoneyEX(playerid, 1000000);
            TogglePlayerControllable(playerid, 1);
            PlayerPlaySound(playerid, BuySound, 0.0, 0.0, 0.0);
          }
        }
		case 9972:
		{
          if(!response) ShowMarketPPMenu(playerid), TogglePlayerControllable(playerid, 1);
		  if(response)
		  {
            GivePP(playerid, -1);
            SendClientMessage(playerid, 0xBBF582FF, "» Premium « {6AC213} You have received 20 Score Points for selling 1 Premium Points");
            ScoreTDupdate(playerid, 20);
            TogglePlayerControllable(playerid, 1);
            PlayerPlaySound(playerid, BuySound, 0.0, 0.0, 0.0);
          }
        }
        /*case 9970:
        {
          if(!response) ShowMarketPPMenu(playerid), TogglePlayerControllable(playerid, 1);
		  if(response)
		  {
            GivePP(playerid, -50);
            PlayerInfo[playerid][premiumItems][4]+=3;
            PlayerInfo[playerid][premiumItems][4]--;
            new str[256];
            new Query[168];
            format(Query, sizeof(Query), "UPDATE `users` SET `CookFe5` ='%d' WHERE `UserID` = '%d'", PlayerInfo[playerid][premiumItems][4], PlayerInfo[playerid][UserID]);
            mysql_query(GTADM, Query);
            format(str, sizeof(str), "» HeadText «  You have bought a headtext! You can change your headtext with the command (/HeadText) Possible changes (%d)", PlayerInfo[playerid][premiumItems][4]);
            SendClientMessage(playerid, AdminInfo, str);
            TogglePlayerControllable(playerid, 1);
            PlayerPlaySound(playerid, BuySound, 0.0, 0.0, 0.0);
          }
        }*/
        case 9989:
        {
          if(!response) TogglePlayerControllable(playerid, 1);
          if(response)
          {
            if(!response) TogglePlayerControllable(playerid, 1);
            new wwaffee=strval(inputtext);
            if(!isNumeric(inputtext) || wwaffee < 1 || wwaffee > 12) ShowMarketVPMenu(playerid), SendWarning(playerid, "{BABABA}Invalid ID entered!");
            else
            {
              ShowMarketVPMenu(playerid);
              switch(wwaffee)
              {
				case 1: ShowMarketVPItem1(playerid);//, inputtext);
   	            case 2: ShowMarketVPItem2(playerid);
   	            case 3: ShowMarketVPItem3(playerid);
   	            case 4: ShowMarketVPItem4(playerid);
				case 5: ShowMarketVPItem5(playerid);
				case 6: ShowMarketVPItem6(playerid);
				case 7: ShowMarketVPItem7(playerid);
				//case 8: ShowMarketVPItem8(playerid);
				case 8: ShowMarketVPItem9(playerid);
				case 9: ShowMarketVPItem10(playerid);
				case 10: ShowMarketVPItem11(playerid);
				case 11: ShowMarketVPItem12(playerid);
				case 12: ShowMarketVPItem13(playerid);
              }
			}
          }
        }
        case 9969:
        {
          if(!response) TogglePlayerControllable(playerid, 1);
          if(response)
          {
            if(!response) TogglePlayerControllable(playerid, 1);
            new wwaffe=strval(inputtext);
            if(!isNumeric(inputtext) || wwaffe < 1 || wwaffe > 7) ShowMarketPPMenu(playerid), SendWarning(playerid, "{BABABA}Invalid ID entered!");
            else
            {
              ShowMarketPPMenu(playerid);
              switch(wwaffe)
              {
				//case 1: ShowMarketPPItem1(playerid);//, inputtext);
   	            case 1: ShowMarketPPItem2(playerid);
   	            case 2: ShowMarketPPItem3(playerid);
   	            case 3: ShowMarketPPItem4(playerid);
				case 4: ShowMarketPPItem5(playerid);
				case 5: ShowMarketPPItem6(playerid);
				case 6: ShowMarketPPItem7(playerid);
              }
			}
          }
        }
        case 8777:
        {
		   if(response)
		   {
              if((strlen(inputtext) < 3) || strlen(inputtext) >= 30)
			  {
			    SendWarning(playerid, "3d text must be between 3 and 30 characters");
                ShowPlayerDialog(playerid, 8777, DIALOG_STYLE_INPUT, "Premium SHOP", ""GRAY_"Enter Your New HeadText Below\n"GRAY_"Colors:\n{FFFFFF}~w~ WHITE\n{FF0000}~r~ RED \n{0000FF} ~b~BLUE\n{12DE00}~g~ GREEN\n{EA00FF}~p~ PINK\n{FFEE00}~y~ YELLOW\n{FF9100}~o~ ORANGE\n{00E5FF}~lb~ LIGHT BLUE\n"lime2"~lg~ LIME\n{FFBFFA}~lp~ LIGHT PINK\n{403E40}~l~ BLACK", "Set", "Exit");
			  }
			  else
			  {
				GivePP(playerid, -50);
				PlayerInfo[playerid][premiumItems][4]+=3;
				PlayerInfo[playerid][premiumItems][4]--;
				new str[256];
				format(str, sizeof(str), "%s", inputtext);
				str_replace("~w~", "{FFFFFF}", str);
				str_replace("~r~", "{FF0000}", str);
				str_replace("~b~", "{0000FF}", str);
				str_replace("~g~", "{12DE00}", str);
				str_replace("~p~", "{EA00FF}", str);
				str_replace("~y~", "{FFEE00}", str);
				str_replace("~o~", "{FF9100}", str);
				str_replace("~lb~", "{00E5FF}", str);
				str_replace("~lg~", "{AAFF00}", str);
				str_replace("~lp~", "{FFBFFA}", str);
				str_replace("~l~", "{403E40}", str);
				format(PlayerInfo[playerid][HeadText], 50, "%s", str);
//				Set3DText(playerid, 1);

				new Query[168];
				format(Query, sizeof(Query), "UPDATE `users` SET `HeadText` = '%s', `CookFe5` ='%d' WHERE `UserID` = '%d'", Escape_String(PlayerInfo[playerid][HeadText]), PlayerInfo[playerid][premiumItems][4], PlayerInfo[playerid][UserID]);
				mysql_query(GTADM, Query);
			    format(str, sizeof(str), "» HeadText «  Your HeadText has been set to %s", PlayerInfo[playerid][HeadText], PlayerInfo[playerid][premiumItems][4]);
		  	    SendClientMessage(playerid, AdminInfo, str);
			    format(str, sizeof(str), "» HeadText «  You can change your headtext with the command (/HeadText) Possible changes (%d)", PlayerInfo[playerid][premiumItems][4]);
		  	    SendClientMessage(playerid, AdminInfo, str);
		  	    PlayerPlaySound(playerid, BuySound, 0.0, 0.0, 0.0);

			  }
		   }
		   else ShowMarketPPMenu(playerid);//ShowMenuForPlayer(CookMenu, playerid);
        }


        case 8771:
        {
		   if(response)
		   {
              if((strlen(inputtext) < 3) || strlen(inputtext) >= 30)
			  {
			       SendWarning(playerid, "3d text must be between 3 and 30 characters");
				   new str[512], textlolo[70];
				   if(strlen(PlayerInfo[playerid][HeadText]) < 3) format(textlolo, sizeof(textlolo), "-");
				   else format(textlolo, sizeof(textlolo), "%s", PlayerInfo[playerid][HeadText]);
				   format(str, sizeof(str), "Current Headtext: %s\nChanges Left: %d\n"GRAY_"Enter Your New HeadText Below\n"GRAY_"Colors:\n{FFFFFF}~w~ WHITE\n{FF0000}~r~ RED \n{0000FF} ~b~BLUE\n{12DE00}~g~ GREEN\n{EA00FF}~p~ PINK\n{FFEE00}~y~ YELLOW\n{FF9100}~o~ ORANGE\n{00E5FF}~lb~ LIGHT BLUE\n"lime2"~lg~ LIME\n{FFBFFA}~lp~ LIGHT PINK\n{403E40}~l~ BLACK", textlolo, PlayerInfo[playerid][premiumItems][4]);
				   ShowPlayerDialog(playerid, 8771, DIALOG_STYLE_INPUT, "HeadText", str, "Set", "Exit");
			  }
			  else
			  {
				PlayerInfo[playerid][premiumItems][4]--;
				new str[256];
				format(str, sizeof(str), "%s", inputtext);
				str_replace("~w~", "{FFFFFF}", str);
				str_replace("~r~", "{FF0000}", str);
				str_replace("~b~", "{0000FF}", str);
				str_replace("~g~", "{12DE00}", str);
				str_replace("~p~", "{EA00FF}", str);
				str_replace("~y~", "{FFEE00}", str);
				str_replace("~o~", "{FF9100}", str);
				str_replace("~lb~", "{00E5FF}", str);
				str_replace("~lg~", "{AAFF00}", str);
				str_replace("~lp~", "{FFBFFA}", str);
				str_replace("~l~", "{403E40}", str);
				format(PlayerInfo[playerid][HeadText], 50, "%s", str);
//				Set3DText(playerid, 1);

				new Query[168];
				format(Query, sizeof(Query), "UPDATE `users` SET `HeadText` = '%s', `CookFe5` ='%d' WHERE `UserID` = '%d'", Escape_String(PlayerInfo[playerid][HeadText]), PlayerInfo[playerid][premiumItems][4], PlayerInfo[playerid][UserID]);
				mysql_query(GTADM, Query);
			    format(str, sizeof(str), "» HeadText «  Your HeadText has been set to %s", str);
		  	    SendClientMessage(playerid, AdminInfo, str);
		  	    SendClientMessage(playerid, AdminInfo, "» HeadText «  You can change your headtext with the command (/HeadText)");
                PlayerPlaySound(playerid, BuySound, 0.0, 0.0, 0.0);
			  }
		   }
        }
        case 8778:
        {
		   if(response)
		   {
				 GivePP(playerid, -20);
				 PlayerInfo[playerid][premiumItems][0] = 1;
				 SendClientMessage(playerid, 0xBBF582FF, "» Premium « {6AC213} You are now able to use the command (/TOW)");

			     new Query[168];
				 format(Query, sizeof(Query), "UPDATE `users` SET `CookFe1` = 1 WHERE `UserID` = '%d'", PlayerInfo[playerid][UserID]);
				 mysql_query(GTADM, Query);
				 PlayerPlaySound(playerid, BuySound, 0.0, 0.0, 0.0);
		   }
		   else ShowMarketPPMenu(playerid);//ShowMenuForPlayer(CookMenu, playerid);
        }
        case 8779:
        {
		   if(response)
		   {
				 GivePP(playerid, -20);
				 PlayerInfo[playerid][premiumItems][1] = 1;
				 SendClientMessage(playerid, 0xBBF582FF, "» Premium « {6AC213} You are now able to use the command (/Mod)");
			     new Query[168];
				 format(Query, sizeof(Query), "UPDATE `users` SET `CookFe2` = 1 WHERE `UserID` = '%d'", PlayerInfo[playerid][UserID]);
				 mysql_query(GTADM, Query);
				 PlayerPlaySound(playerid, BuySound, 0.0, 0.0, 0.0);
		   }
		   else ShowMarketPPMenu(playerid);//ShowMenuForPlayer(CookMenu, playerid);
        }

        case 8780:
        {
		   if(response)
		   {
				 GivePP(playerid, -50);
				 PlayerInfo[playerid][premiumItems][2] = 1;
				 SendClientMessage(playerid, 0xBBF582FF, "» Premium « {6AC213} You are now able to use the command (/Neon)");
			     new Query[168];
				 format(Query, sizeof(Query), "UPDATE `users` SET `CookFe3` = 1 WHERE `UserID` = '%d'", PlayerInfo[playerid][UserID]);
				 mysql_query(GTADM, Query);
				 PlayerPlaySound(playerid, BuySound, 0.0, 0.0, 0.0);
		   }
		   else ShowMarketPPMenu(playerid);//ShowMenuForPlayer(CookMenu, playerid);
        }
        case 8781:
        {
		   if(response)
		   {
				 GivePP(playerid, -50);
				 PlayerInfo[playerid][premiumItems][3] = 1;
				 SendClientMessage(playerid, 0xBBF582FF, "» Premium « {6AC213} You are now able to teleport and buy vehicle from (/Cars9)");
			     new Query[168];
				 format(Query, sizeof(Query), "UPDATE `users` SET `CookFe4` = 1 WHERE `UserID` = '%d'", PlayerInfo[playerid][UserID]);
				 mysql_query(GTADM, Query);
				 PlayerPlaySound(playerid, BuySound, 0.0, 0.0, 0.0);
		   }
		   else ShowMarketPPMenu(playerid);//ShowMenuForPlayer(CookMenu, playerid);
        }
        case 8782:
        {
		   if(response)
		   {
				 GivePP(playerid, -1);
				 SendClientMessage(playerid, 0xBBF582FF, "» Premium « {6AC213} You have received 1000000$ for selling 1 Premium Points");
				 GivePlayerMoneyEX(playerid, 1000000);
				 PlayerPlaySound(playerid, BuySound, 0.0, 0.0, 0.0);
		   }
		   else ShowMarketPPMenu(playerid);//ShowMenuForPlayer(CookMenu, playerid);
        }
        case 8783:
        {
		   if(response)
		   {
				 GivePP(playerid, -1);
				 SendClientMessage(playerid, 0xBBF582FF, "» Premium « {6AC213} You have received 20 Score Points for selling 1 Premium Points");
				 ScoreTDupdate(playerid, 20);
				 PlayerPlaySound(playerid, BuySound, 0.0, 0.0, 0.0);
		   }
		   else ShowMarketPPMenu(playerid);//ShowMenuForPlayer(CookMenu, playerid);
        }
        case 8784:
        {
		   if(response)
		   {
				 if(GetPlayerMoneyEx(playerid) < 50000000) return SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You dont have enough money buy this item");
				 GivePP(playerid, 1);
				 GivePlayerMoneyEX(playerid, -50000000);
				 SendClientMessage(playerid, 0xBBF582FF, "» Premium « {6AC213} You have bought 1 Premium Point for $50000000");
				 PlayerPlaySound(playerid, BuySound, 0.0, 0.0, 0.0);
		   }
		   else ShowMarketPPMenu(playerid);//ShowMenuForPlayer(CookMenu, playerid);
        }
        case 16551:
        {
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						SetPVarInt(playerid, "RaceID", GetFreeRaceID());
                        new str[1024];
  					    str=""ORANGE_"Welcome To Race Construction Center\n"RED_"Please read the following carefully before creating any race:-\n-"WHITE_" When entering race construction mode you will be putten in a different virtual world\n- Press N to create a race checkpoint\n- The first checkpoint is the Race Spawn point\n- The second checkpoint is the race start point\n-Type (/StopEditing) When you are finished";
					    ShowPlayerDialog(playerid, 16550, DIALOG_STYLE_MSGBOX, "Race Construction", str, "Create", "Exit");
					}
					case 1:
					{
                        new str[2500];
                        for(new x=0; x<MAX_RACES; x++)
                        {
						   if(RaceInfo[x][RaceCpCount] > 0)
						   {
								 format(str, sizeof(str), "%s\nRaceID %d", str, x);//x+1
						   }
                        }
					    ShowPlayerDialog(playerid, 16552, DIALOG_STYLE_LIST, "Race Construction", str, "Exit", "");
					}
					case 2:
					{
                        new str[2500];
                        for(new x=0; x<MAX_RACES; x++)
                        {
						   if(RaceInfo[x][RaceCpCount] > 0) format(str, sizeof(str), "%s\nRaceID %d", str, x);//x+1//
						   else format(str, sizeof(str), "%s\n-", str, x);//x+1//
                        }
					    ShowPlayerDialog(playerid, 16553, DIALOG_STYLE_LIST, "Race Construction", str, "Delete", "Exit");
					}
				}
			}
	 }
	 case 16553:
	 {
			if(response)
			{
				 if(RaceInfo[listitem][RaceCpCount] < 1)
				 {
						SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This Race hasnt been created yet");
                        new str[1024];
                        for(new x=0; x<MAX_RACES; x++)
                        {
						   if(RaceInfo[x][RaceCpCount] > 0) format(str, sizeof(str), "%s\n"GREEN_"RaceID %d", str, x);//
						   else format(str, sizeof(str), "%s\n"RED_"RaceID %d", str, x);//x
                        }
					    ShowPlayerDialog(playerid, 16553, DIALOG_STYLE_LIST, "Race Construction", str, "Delete", "Exit");
				 }
				 else
				 {
				  fremove(RacePath(listitem));
				  new str[128];
				  format(str, sizeof(str), "-RaceEditor- "WHITE_"Race ID %d has been removed", listitem);
				  SendClientMessage(playerid, RACE, str);
				  for(new x=0; x<50; x++)
				  {
						RaceCPs[listitem][x][0]=0;
						RaceCPs[listitem][x][1]=0;
						RaceCPs[listitem][x][2]=0;
				  }
				  RaceInfo[listitem][RaceCpCount]=0;
				 }
			}
	 }
	 case 455:
	 {
		  if(response)
		  {
			if(strlen(inputtext) < 2) ShowPlayerDialog(playerid, 455, DIALOG_STYLE_INPUT, "Parkour Construction", "Enter a name for the new parkour", "Save", "Exit");
			else
			{
			   new id=PourEditID;
			   format(ParkOurInfo[id][PourName], 50, "%s", inputtext);
			   ParkOurInfo[id][CPcount]=PourEditCount;
			   new INI:File = INI_Open(PourPath(id));
			   INI_SetTag(File, "POUR");
			   INI_WriteString(File, "Name", ParkOurInfo[id][PourName]);
			   for(new x=0; x<PourEditCount; x++)
			   {
				 new str[50];
				 format(str, sizeof(str), "CP%dX", x);
			     INI_WriteFloat(File, str, ParkOurCPS[id][x][CPposX]);
				 format(str, sizeof(str), "CP%dY", x);
			     INI_WriteFloat(File, str, ParkOurCPS[id][x][CPposY]);
				 format(str, sizeof(str), "CP%dZ", x);
			     INI_WriteFloat(File, str, ParkOurCPS[id][x][CPposZ]);
				 format(str, sizeof(str), "CP%dCar", x);
			     INI_WriteInt(File, str, ParkOurCPS[id][x][CPCar]);
			   }
			   for(new x=0; x<12; x++)
			   {
				   new str[50];
				   format(str, sizeof(str), "SP%dX", x);
			       INI_WriteFloat(File, str, ParkOurInfo[id][SpawnsX][x]);
				   format(str, sizeof(str), "SP%dY", x);
			       INI_WriteFloat(File, str, ParkOurInfo[id][SpawnsY][x]);
				   format(str, sizeof(str), "SP%dZ", x);
			       INI_WriteFloat(File, str, ParkOurInfo[id][SpawnsZ][x]);
				   format(str, sizeof(str), "SP%dA", x);
			       INI_WriteFloat(File, str, ParkOurInfo[id][SpawnsA][x]);
			   }
		   	   PourEditOn=0;
			   INI_WriteInt(File, "CPcount", PourEditCount);
			   INI_Close(File);
			   DeletePVar(playerid, "PourEditing");
			   SendClientMessage(playerid, WHITE, "Thank you , the parkour has been "GREEN_"Created"WHITE_"");
			   SetPlayerVirtualWorldEX(playerid, 0);
			   for(new x=0; x<50; x++) if(IsValidDynamicRaceCP(EDITORCPS[playerid][x])) DestroyDynamicRaceCP(EDITORCPS[playerid][x]);
			}
		  }
	 }
	 case 452:
	 {
		  if(response)
		  {
			 switch(listitem)
			 {
				 case 0:
				 {

   					if(GetPVarInt(playerid, "PourEditing"))
   					{
						   if(PourEditCount < 3) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant add a parkour with less than 3 checkpoints");
						   else
						   {
							   ShowPlayerDialog(playerid, 455, DIALOG_STYLE_INPUT, "Parkour Construction", "Enter a name for the new parkour", "Save", "Exit");
						   }
					  }
					  else if(GetPVarInt(playerid, "RaceEditing"))
					  {
						   if((GetPVarInt(playerid, "RaceCP") < 2))  SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant save races with less than two checkpoints"), ShowPlayerDialog(playerid, 452, DIALOG_STYLE_LIST, "Race Construction", "Exit & Save Race\nExit Without Saving\nSet Race Laps", "Select", "Exit");
						   else if((GetPVarInt(playerid, "RaceCP") > 35)) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant save races with more than 35 checkpoints"), ShowPlayerDialog(playerid, 452, DIALOG_STYLE_LIST, "Race Construction", "Exit & Save Race\nExit Without Saving\nSet Race Laps", "Select", "Exit");
						   else
						   {
							    SendClientMessage(playerid, WHITE, "Thank you , the race has been "GREEN_"Created"WHITE_"");
							    SetPlayerVirtualWorldEX(playerid, 0);
							    PlayerTextDrawHide(playerid, RaceCon[playerid][0]);
							    PlayerTextDrawHide(playerid, RaceCon[playerid][1]);
							    format(RaceInfo[GetPVarInt(playerid, "RaceID")][Creator], 30, "%s", pName[playerid]);

								new r=GetPVarInt(playerid, "RaceCP");
								new INI:File = INI_Open(RacePath(GetPVarInt(playerid, "RaceID")));
		                        INI_SetTag(File, "RaceInfo");
		                        INI_WriteInt(File, "CpCount", r-1);
		                        INI_WriteString(File, "Creator", pName[playerid]);
		                        INI_Close(File);
						        RaceInfo[GetPVarInt(playerid, "RaceID")][RaceCpCount]=(r-1);

						        DeletePVar(playerid, "RaceEditing");
						        DeletePVar(playerid, "RaceCP");
						        DeletePVar(playerid, "RaceID");
		                    	for(new x=0; x<50; x++) if(IsValidDynamicRaceCP(EDITORCPS[playerid][x])) DestroyDynamicRaceCP(EDITORCPS[playerid][x]);
						   }
					  }
				 }
				 case 1:
				 {
                     if(GetPVarInt(playerid, "RaceEditing"))
                     {
				 		SendClientMessage(playerid, WHITE, "Race construction "RED_"cancelled "WHITE_"without saving");
					    SetPlayerVirtualWorldEX(playerid, 0);
					    PlayerTextDrawHide(playerid, RaceCon[playerid][0]);
					    PlayerTextDrawHide(playerid, RaceCon[playerid][1]);
						new r=GetPVarInt(playerid, "RaceID");
						fremove(RacePath(r));
				        for(new x=0; x<50; x++)
				        {
					     	RaceCPs[r][x][0]=0;
					    	RaceCPs[r][x][1]=0;
					    	RaceCPs[r][x][2]=0;
				        }
				        RaceInfo[r][RaceCpCount]=0;

				        DeletePVar(playerid, "RaceEditing");
				        DeletePVar(playerid, "RaceCP");
				        DeletePVar(playerid, "RaceID");
                    	for(new x=0; x<50; x++) if(IsValidDynamicRaceCP(EDITORCPS[playerid][x])) DestroyDynamicRaceCP(EDITORCPS[playerid][x]);
                     }
   					 else if(GetPVarInt(playerid, "PourEditing"))
   					 {
				 		SendClientMessage(playerid, WHITE, "Parkour construction "RED_"cancelled "WHITE_"without saving");
					    SetPlayerVirtualWorldEX(playerid, 0);
						new r=PourEditID;
						fremove(PourPath(r));
				        for(new x=0; x<12; x++)
				        {
					     	ParkOurInfo[r][SpawnsX][x]=0;
					     	ParkOurInfo[r][SpawnsY][x]=0;
					     	ParkOurInfo[r][SpawnsZ][x]=0;
					     	ParkOurInfo[r][SpawnsA][x]=0;
				        }
				     	ParkOurInfo[r][CPcount]=0;
				     	PourEditOn=0;
				        for(new x=0; x<50; x++)
				        {
					     	ParkOurCPS[r][x][CPposX]=0;
					    	ParkOurCPS[r][x][CPposY]=0;
					    	ParkOurCPS[r][x][CPposZ]=0;
					    	ParkOurCPS[r][x][CPCar]=0;
				        }

				        DeletePVar(playerid, "PourEditing");
                    	for(new x=0; x<50; x++) if(IsValidDynamicRaceCP(EDITORCPS[playerid][x])) DestroyDynamicRaceCP(EDITORCPS[playerid][x]);

   					 }

				 }
			 }
		 }
	 }
	 case 16550:
	 {
			 if(response)
			 {
					SetPlayerVirtualWorldEX(playerid, 1010101);
					SetPVarInt(playerid, "StartP", true);
					SetPVarInt(playerid, "RaceCP", 0);
					SetPVarInt(playerid, "RaceEditing", true);
					PlayerTextDrawSetStringEX(playerid, RaceCon[playerid][0], "~n~~n~press 'N' to create race Spawn point");
					PlayerTextDrawSetStringEX(playerid, RaceCon[playerid][1], "~r~Race Construction");
					PlayerTextDrawShow(playerid, RaceCon[playerid][0]);
					PlayerTextDrawShow(playerid, RaceCon[playerid][1]);
   	    			new Float:pos[4];
	    			GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	    			GetPlayerFacingAngle(playerid, pos[3]);

  	    			new ah= CreateVehicle(541, pos[0], pos[1], pos[2], pos[2], 6, 0, 10);
			        ResetCarInfo(ah);

  	    			AdminCar[ah]=1;
            		VehicleInfo[ah][Player]=INVALID_PLAYER_ID;
        			PutPlayerInVehicle(playerid, ah, 0);
	    			SetVehicleVirtualWorld(ah, GetPlayerVirtualWorld(playerid));
			 }
     }

	 case 16749:
	 {
	   if(response)
	   {
		  switch(listitem)
		  {
			  case 0:
			  {
		        new str[1024];
			    str=""ORANGE_"Welcome To Parkour Construction Center\n"RED_"Please read the following carefully before creating any race:-\n-"WHITE_" When entering race construction mode you will be putten in a different virtual world\n- Type ( /AddCP <CarID> ) to create a checkpoint\n-Type (/StopEditing) When you are done!";
			    ShowPlayerDialog(playerid, 16750, DIALOG_STYLE_MSGBOX, "Parkour Construction", str, "Create", "Exit");
			  }
			  case 1:
			  {
		            new str[2024];
		            for(new x=0; x<MAX_POURS; x++)
		            {
					   if(ParkOurInfo[x][CPcount] > 0)
							 format(str, sizeof(str), "%s\n{FFFFFF}%d-"GRAY_" %s ", str, x, ParkOurInfo[x][PourName]);
		            }
				    ShowPlayerDialog(playerid, 2234, DIALOG_STYLE_LIST, "Parkour Construction", str, "Exit", "");
			  }
			  case 2:
			  {
		            new str[2024];
		            for(new x=0; x<MAX_POURS; x++)
		            {
					 if(ParkOurInfo[x][CPcount] > 0) format(str, sizeof(str), "%s\n{FFFFFF}%d){BEBEBE} %s ", str, x, ParkOurInfo[x][PourName]);
				     else format(str, sizeof(str), "%s\n{FFFFFF}%d){BEBEBE}   - ", str, x);
		            }
				    ShowPlayerDialog(playerid, 2235, DIALOG_STYLE_LIST, "Parkour Construction", str, "Delete", "Exit");
			  }
			  case 3:
			  {
		            new str[2024];
		            for(new x=0; x<MAX_POURS; x++)
		            {
					 if(ParkOurInfo[x][CPcount] > 0) format(str, sizeof(str), "%s\n{FFFFFF}%d){BEBEBE} %s ", str, x, ParkOurInfo[x][PourName]);
				     else format(str, sizeof(str), "%s\n{FFFFFF}%d){BEBEBE}   - ", str, x);
		            }
				    ShowPlayerDialog(playerid, 2236, DIALOG_STYLE_LIST, "Parkour Construction", str, "Rename", "Exit");
			  }
			  case 4:
			  {
		            new str[2024];
		            for(new x=0; x<MAX_POURS; x++)
		            {
					 if(ParkOurInfo[x][CPcount] > 0) format(str, sizeof(str), "%s\n{FFFFFF}%d){BEBEBE} %s ", str, x, ParkOurInfo[x][PourName]);
				     else format(str, sizeof(str), "%s\n{FFFFFF}%d){BEBEBE}   - ", str, x);
		            }
				    ShowPlayerDialog(playerid, 2238, DIALOG_STYLE_LIST, "Parkour Construction", str, "Reset", "Exit");
			  }

		  }
	   }
	 }
	 case 2238:
	 {
		if(response)
		{
            if(!IsAdmin(playerid, 6)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You are not allowed to reset parkour records.");
			new r=listitem;
			if(ParkOurInfo[r][CPcount] < 1) SendClientMessage(playerid, RED2, ""RED_"» Error « {BABABA}This parkour slot is empty");
			else
			{
			  format(pOurRecords[r][Top1Player], 24, "N/A");
			  format(pOurRecords[r][Top2Player], 24, "N/A");
			  format(pOurRecords[r][Top3Player], 24, "N/A");
			  format(pOurRecords[r][Top4Player], 24, "N/A");
			  format(pOurRecords[r][Top5Player], 24, "N/A");
              pOurRecords[r][toptime][0] = 0;
              pOurRecords[r][toptime][1] = 0;
              pOurRecords[r][toptime][2] = 0;
              pOurRecords[r][toptime][3] = 0;
              pOurRecords[r][toptime][4] = 0;
			  new Query[256];
			  format(Query, sizeof(Query), "UPDATE `pourrecords` SET `Top5Player` = 'N/A', `Top5Record` = 0, `Top4Player` = 'N/A', `Top4Record` = 0, `Top3Player` = 'N/A', `Top3Record` = 0, `Top2Player` = 'N/A', `Top2Record` = 0, `Top1Player` = 'N/A', `Top1Record` = 0 WHERE `ParkOurID` = %d", r);
			  mysql_query(GTADM, Query);

			  new str[128];
			  format(str, sizeof(str), "-Parkour Editor- "GREEN_"Parkour ID %d Records has been reseted", r);
			  SendClientMessage(playerid, -1, str);
			}
		}
		else ShowPlayerDialog(playerid, 16749, DIALOG_STYLE_LIST, "Parkour Construction", "Create a new Parkour\nView Created Parkours\nDelete a Parkour\nRename a Parkour\nReset Parkour Records", "Select", "Exit");
	 }
	 case 2236:
	 {
		if(response)
		{
			new r=listitem;
			if(ParkOurInfo[r][CPcount] < 1) SendClientMessage(playerid, RED2, ""RED_"» Error « {BABABA}This parkour slot is empty");
			else
			{
		    	ShowPlayerDialog(playerid, 2237, DIALOG_STYLE_INPUT, "Parkour Construction", "Enter a new name for this parkour", "Rename", "Exit");
				SetPVarInt(playerid, "PourOur", r);
			}
		}
		else ShowPlayerDialog(playerid, 16749, DIALOG_STYLE_LIST, "Parkour Construction", "Create a new Parkour\nView Created Parkours\nDelete a Parkour\nRename a Parkour\nReset Parkour Records", "Select", "Exit");
	 }
	 case 2237:
	 {
		  new r=GetPVarInt(playerid, "PourOur");
		  DeletePVar(playerid, "PourOur");
		  if(response)
		  {
			if(strlen(inputtext) > 1 && strlen(inputtext) < 49)
			{
			   new INI:File = INI_Open(PourPath(r));
			   INI_SetTag(File, "POUR");
			   INI_WriteString(File, "Name", inputtext);
			   INI_Close(File);
			   format(ParkOurInfo[r][PourName], 50, "%s", inputtext);

			   new str[128];
			   format(str, sizeof(str), "-Parkour Editor- "GREEN_"Parkour ID %d has been renamed to \"%s\"", r, inputtext);
			   SendClientMessage(playerid, -1, str);
			}
			else SendClientMessage(playerid, RED2, ""RED_"» Error « {BABABA}You have entered an invalid name!");
		  }
		  else ShowPlayerDialog(playerid, 16749, DIALOG_STYLE_LIST, "Parkour Construction", "Create a new Parkour\nView Created Parkours\nDelete a Parkour\nRename a Parkour\nReset Parkour Records", "Select", "Exit");
	 }
	 case 2235:
	 {
		if(response)
		{
			new r=listitem;
			if(ParkOurInfo[r][CPcount] < 1) SendClientMessage(playerid, RED2, ""RED_"» Error « {BABABA}This parkour slot is already empty");
			else
			{
				fremove(PourPath(r));
		        for(new x=0; x<12; x++)
		        {
			     	ParkOurInfo[r][SpawnsX][x]=0;
			     	ParkOurInfo[r][SpawnsY][x]=0;
			     	ParkOurInfo[r][SpawnsZ][x]=0;
			     	ParkOurInfo[r][SpawnsA][x]=0;
		        }
		     	ParkOurInfo[r][CPcount]=0;
		        for(new x=0; x<50; x++)
		        {
			     	ParkOurCPS[r][x][CPposX]=0;
			    	ParkOurCPS[r][x][CPposY]=0;
			    	ParkOurCPS[r][x][CPposZ]=0;
			    	ParkOurCPS[r][x][CPCar]=0;
		        }
			    new str[128];
			    format(str, sizeof(str), "-Parkour Editor- "GREEN_"Parkour ID %d has been removed", r);
			    SendClientMessage(playerid, -1, str);
			}
		}
	 }
	 case 16750:
	 {
		 if(response)
		 {
		    ShowPlayerDialog(playerid, 16751, DIALOG_STYLE_LIST, "Select Spawn Point type", "{FFFFFF}12x1 "GRAY_"(12 lines x 1 player in each line)\n{FFFFFF}2x6 "GRAY_"(2 lines  x 6 players in each line)\n{FFFFFF}3x4 "GRAY_"(3 lines x 4 players in each line)\n{FFFFFF}4x3 "GRAY_"(4 lines x 3 players in each line)\n{FFFFFF}6x2 "GRAY_"(6 lines x 2 players in each line)", "Next", "");
		    SetPVarInt(playerid, "PourEditing", true);
			PourEditOn=1;
			PourEditCount=0;
			PourEditID=GetFreepOurID();
		 }
		 else ShowPlayerDialog(playerid, 16749, DIALOG_STYLE_LIST, "Parkour Construction", "Create a new Parkour\nView Created Parkours\nDelete a Parkour\nRename a Parkour\nReset Parkour Records", "Select", "Exit");
	 }
	 case 16751:
	 {
		 if(response)
		 {
		    ShowPlayerDialog(playerid, 16752, DIALOG_STYLE_MSGBOX, "Parkour Construction", "Type /AddCP to add a new checkpoint", "ok", "");
			new id=PourEditID;
			GetPlayerPos(playerid, ParkOurInfo[id][SpawnsX][0], ParkOurInfo[id][SpawnsY][0], ParkOurInfo[id][SpawnsZ][0]);
			GetPlayerFacingAngle(playerid, ParkOurInfo[id][SpawnsA][0]);
			new Float:a=ParkOurInfo[id][SpawnsA][0];
			switch(listitem)
			{
			  case 0:
			  {
				   new g=2;
				   for(new x=1; x<12; x++)
				   {
	                  GetXYBehindPlayer(playerid, ParkOurInfo[id][SpawnsX][x], ParkOurInfo[id][SpawnsY][x], g);
	                  ParkOurInfo[id][SpawnsZ][x]=ParkOurInfo[id][SpawnsZ][0];
	                  ParkOurInfo[id][SpawnsA][x]=ParkOurInfo[id][SpawnsA][0];
	                  g+=2;
				   }
			  }
			  case 1:
			  {
                  for(new x=1; x<12; x++) ParkOurInfo[id][SpawnsZ][x]=ParkOurInfo[id][SpawnsZ][0], ParkOurInfo[id][SpawnsA][x]=a;
                  GetXYBehindPlayer(playerid, ParkOurInfo[id][SpawnsX][1], ParkOurInfo[id][SpawnsY][1], 2.0);

                  GetXYInLeftOfPoint(ParkOurInfo[id][SpawnsX][0], ParkOurInfo[id][SpawnsY][0], a, ParkOurInfo[id][SpawnsX][2], ParkOurInfo[id][SpawnsY][2], 2.0);
                  GetXYInLeftOfPoint(ParkOurInfo[id][SpawnsX][0], ParkOurInfo[id][SpawnsY][0], a, ParkOurInfo[id][SpawnsX][3], ParkOurInfo[id][SpawnsY][3], 4.0);
                  GetXYInLeftOfPoint(ParkOurInfo[id][SpawnsX][0], ParkOurInfo[id][SpawnsY][0], a, ParkOurInfo[id][SpawnsX][4], ParkOurInfo[id][SpawnsY][4], 6.0);
                  GetXYInLeftOfPoint(ParkOurInfo[id][SpawnsX][0], ParkOurInfo[id][SpawnsY][0], a, ParkOurInfo[id][SpawnsX][5], ParkOurInfo[id][SpawnsY][5], 8.0);
                  GetXYInLeftOfPoint(ParkOurInfo[id][SpawnsX][0], ParkOurInfo[id][SpawnsY][0], a, ParkOurInfo[id][SpawnsX][6], ParkOurInfo[id][SpawnsY][6], 10.0);

                  GetXYInLeftOfPoint(ParkOurInfo[id][SpawnsX][1], ParkOurInfo[id][SpawnsY][1], a, ParkOurInfo[id][SpawnsX][7], ParkOurInfo[id][SpawnsY][7], 2.0);
                  GetXYInLeftOfPoint(ParkOurInfo[id][SpawnsX][1], ParkOurInfo[id][SpawnsY][1], a, ParkOurInfo[id][SpawnsX][8], ParkOurInfo[id][SpawnsY][8], 4.0);
                  GetXYInLeftOfPoint(ParkOurInfo[id][SpawnsX][1], ParkOurInfo[id][SpawnsY][1], a, ParkOurInfo[id][SpawnsX][9], ParkOurInfo[id][SpawnsY][9], 6.0);
                  GetXYInLeftOfPoint(ParkOurInfo[id][SpawnsX][1], ParkOurInfo[id][SpawnsY][1], a, ParkOurInfo[id][SpawnsX][10], ParkOurInfo[id][SpawnsY][10], 8.0);
                  GetXYInLeftOfPoint(ParkOurInfo[id][SpawnsX][1], ParkOurInfo[id][SpawnsY][1], a, ParkOurInfo[id][SpawnsX][11], ParkOurInfo[id][SpawnsY][11], 10.0);
			  }
			  case 2:
			  {
                  for(new x=1; x<12; x++) ParkOurInfo[id][SpawnsZ][x]=ParkOurInfo[id][SpawnsZ][0], ParkOurInfo[id][SpawnsA][x]=a;
                  GetXYBehindPlayer(playerid, ParkOurInfo[id][SpawnsX][4], ParkOurInfo[id][SpawnsY][4], 2.0);
                  GetXYBehindPlayer(playerid, ParkOurInfo[id][SpawnsX][8], ParkOurInfo[id][SpawnsY][8], 4.0);

                  GetXYInLeftOfPoint(ParkOurInfo[id][SpawnsX][0], ParkOurInfo[id][SpawnsY][0], a, ParkOurInfo[id][SpawnsX][1], ParkOurInfo[id][SpawnsY][1], 2.0);
                  GetXYInLeftOfPoint(ParkOurInfo[id][SpawnsX][0], ParkOurInfo[id][SpawnsY][0], a, ParkOurInfo[id][SpawnsX][2], ParkOurInfo[id][SpawnsY][2], 4.0);
                  GetXYInLeftOfPoint(ParkOurInfo[id][SpawnsX][0], ParkOurInfo[id][SpawnsY][0], a, ParkOurInfo[id][SpawnsX][3], ParkOurInfo[id][SpawnsY][3], 6.0);
                  GetXYInLeftOfPoint(ParkOurInfo[id][SpawnsX][4], ParkOurInfo[id][SpawnsY][4], a, ParkOurInfo[id][SpawnsX][5], ParkOurInfo[id][SpawnsY][5], 2.0);
                  GetXYInLeftOfPoint(ParkOurInfo[id][SpawnsX][4], ParkOurInfo[id][SpawnsY][4], a, ParkOurInfo[id][SpawnsX][6], ParkOurInfo[id][SpawnsY][6], 4.0);
                  GetXYInLeftOfPoint(ParkOurInfo[id][SpawnsX][4], ParkOurInfo[id][SpawnsY][4], a, ParkOurInfo[id][SpawnsX][7], ParkOurInfo[id][SpawnsY][7], 6.0);
                  GetXYInLeftOfPoint(ParkOurInfo[id][SpawnsX][8], ParkOurInfo[id][SpawnsY][8], a, ParkOurInfo[id][SpawnsX][9], ParkOurInfo[id][SpawnsY][9], 2.0);
                  GetXYInLeftOfPoint(ParkOurInfo[id][SpawnsX][8], ParkOurInfo[id][SpawnsY][8], a, ParkOurInfo[id][SpawnsX][10], ParkOurInfo[id][SpawnsY][10], 4.0);
                  GetXYInLeftOfPoint(ParkOurInfo[id][SpawnsX][8], ParkOurInfo[id][SpawnsY][8], a, ParkOurInfo[id][SpawnsX][11], ParkOurInfo[id][SpawnsY][11], 6.0);
			  }
			  case 3:
			  {
                  for(new x=1; x<12; x++) ParkOurInfo[id][SpawnsZ][x]=ParkOurInfo[id][SpawnsZ][0], ParkOurInfo[id][SpawnsA][x]=a;
                  GetXYBehindPlayer(playerid, ParkOurInfo[id][SpawnsX][3], ParkOurInfo[id][SpawnsY][3], 2.0);
                  GetXYBehindPlayer(playerid, ParkOurInfo[id][SpawnsX][6], ParkOurInfo[id][SpawnsY][6], 4.0);
                  GetXYBehindPlayer(playerid, ParkOurInfo[id][SpawnsX][9], ParkOurInfo[id][SpawnsY][9], 6.0);

                  GetXYInLeftOfPoint(ParkOurInfo[id][SpawnsX][0], ParkOurInfo[id][SpawnsY][0], a, ParkOurInfo[id][SpawnsX][1], ParkOurInfo[id][SpawnsY][1], 2.0);
                  GetXYInLeftOfPoint(ParkOurInfo[id][SpawnsX][0], ParkOurInfo[id][SpawnsY][0], a, ParkOurInfo[id][SpawnsX][2], ParkOurInfo[id][SpawnsY][2], 4.0);
                  GetXYInLeftOfPoint(ParkOurInfo[id][SpawnsX][3], ParkOurInfo[id][SpawnsY][3], a, ParkOurInfo[id][SpawnsX][4], ParkOurInfo[id][SpawnsY][4], 2.0);
                  GetXYInLeftOfPoint(ParkOurInfo[id][SpawnsX][3], ParkOurInfo[id][SpawnsY][3], a, ParkOurInfo[id][SpawnsX][5], ParkOurInfo[id][SpawnsY][5], 4.0);
                  GetXYInLeftOfPoint(ParkOurInfo[id][SpawnsX][6], ParkOurInfo[id][SpawnsY][6], a, ParkOurInfo[id][SpawnsX][7], ParkOurInfo[id][SpawnsY][7], 2.0);
                  GetXYInLeftOfPoint(ParkOurInfo[id][SpawnsX][6], ParkOurInfo[id][SpawnsY][6], a, ParkOurInfo[id][SpawnsX][8], ParkOurInfo[id][SpawnsY][8], 4.0);
                  GetXYInLeftOfPoint(ParkOurInfo[id][SpawnsX][9], ParkOurInfo[id][SpawnsY][9], a, ParkOurInfo[id][SpawnsX][10], ParkOurInfo[id][SpawnsY][10], 2.0);
                  GetXYInLeftOfPoint(ParkOurInfo[id][SpawnsX][9], ParkOurInfo[id][SpawnsY][9], a, ParkOurInfo[id][SpawnsX][11], ParkOurInfo[id][SpawnsY][11], 4.0);
			  }
			  case 4:
			  {
                  for(new x=1; x<12; x++) ParkOurInfo[id][SpawnsZ][x]=ParkOurInfo[id][SpawnsZ][0], ParkOurInfo[id][SpawnsA][x]=a;
                  GetXYBehindPlayer(playerid, ParkOurInfo[id][SpawnsX][2], ParkOurInfo[id][SpawnsY][2], 2.0);
                  GetXYBehindPlayer(playerid, ParkOurInfo[id][SpawnsX][4], ParkOurInfo[id][SpawnsY][4], 4.0);
                  GetXYBehindPlayer(playerid, ParkOurInfo[id][SpawnsX][6], ParkOurInfo[id][SpawnsY][6], 6.0);
                  GetXYBehindPlayer(playerid, ParkOurInfo[id][SpawnsX][8], ParkOurInfo[id][SpawnsY][8], 8.0);
                  GetXYBehindPlayer(playerid, ParkOurInfo[id][SpawnsX][10], ParkOurInfo[id][SpawnsY][10], 10.0);

                  GetXYInLeftOfPoint(ParkOurInfo[id][SpawnsX][0], ParkOurInfo[id][SpawnsY][0], a, ParkOurInfo[id][SpawnsX][1], ParkOurInfo[id][SpawnsY][1], 2.0);
                  GetXYInLeftOfPoint(ParkOurInfo[id][SpawnsX][2], ParkOurInfo[id][SpawnsY][2], a, ParkOurInfo[id][SpawnsX][3], ParkOurInfo[id][SpawnsY][3], 2.0);
                  GetXYInLeftOfPoint(ParkOurInfo[id][SpawnsX][4], ParkOurInfo[id][SpawnsY][4], a, ParkOurInfo[id][SpawnsX][5], ParkOurInfo[id][SpawnsY][5], 2.0);
                  GetXYInLeftOfPoint(ParkOurInfo[id][SpawnsX][6], ParkOurInfo[id][SpawnsY][6], a, ParkOurInfo[id][SpawnsX][7], ParkOurInfo[id][SpawnsY][7], 2.0);
                  GetXYInLeftOfPoint(ParkOurInfo[id][SpawnsX][8], ParkOurInfo[id][SpawnsY][8], a, ParkOurInfo[id][SpawnsX][9], ParkOurInfo[id][SpawnsY][9], 2.0);
                  GetXYInLeftOfPoint(ParkOurInfo[id][SpawnsX][10], ParkOurInfo[id][SpawnsY][10], a, ParkOurInfo[id][SpawnsX][11], ParkOurInfo[id][SpawnsY][11], 2.0);

			  }
			}
		 }
	 }
	}

    return 0;
}
forward MoreFWorks();
public MoreFWorks()
{
       CreateFireWork(1312.0427, 2104.7026, 10.0000, 0, 17.0);
       CreateFireWork(1322.3083, 2104.4873, 10.0000, 1, 25.0);
       CreateFireWork(1330.8383, 2104.3083, 10.0000, 2, 18.0);
       CreateFireWork(1338.1215, 2104.1555, 10.0000, 3, 22.0);
       CreateFireWork(1354.2445, 2103.4639, 10.0000, 4, 24.0);
       CreateFireWork(1372.0115, 2103.5940, 10.0000, 5, 19.0);
       CreateFireWork(1391.8708, 2104.4524, 10.0000, 6, 22.0);

       CreateFireWork(1309.0511, 2183.9521, 11.0688, 0, 21.0);
       CreateFireWork(1322.1454, 2184.2363, 11.0688, 1, 22.0);
       CreateFireWork(1340.9464, 2185.2776, 11.0688, 2, 23.0);
       CreateFireWork(1360.1575, 2184.5615, 11.0688, 3, 20.0);
       CreateFireWork(1376.0549, 2183.9697, 11.0688, 4, 19.0);
       CreateFireWork(1386.9771, 2183.5642, 11.0688, 1, 18.0);
       CreateFireWork(1302.1725, 2173.9912, 11.0688, 2, 17.0);
       CreateFireWork(1302.9054, 2158.6941, 11.0688, 3, 16.0);
       CreateFireWork(1302.2330, 2139.9653, 11.0688, 5, 15.0);
       CreateFireWork(1301.7145, 2125.5408, 11.0688, 4, 20.0);
}


stock gOnlineMembersCount(gangid)
{
   new count = 0;
   foreach (new i : Player)
   {
	 if(PlayerInfo[i][pGang] == gangid) count ++;
   }
   return count;
}

forward CCDown4();
public CCDown4()
{
   foreach(new i : countdownin)
   {
	  SendInfoText(i, 1000, "~g~Go!");
      PlayerPlaySound(i, 1057, 0, 0, 0);
   }
   Iter_Clear(countdownin);
   ////CountDownRunning=0;
   return 1;
}
forward CCDown3();
public CCDown3()
{
   foreach(new i : countdownin)
   {
	  SendInfoText(i, 1000, "~b~1");
      PlayerPlaySound(i, 1056, 0, 0, 0);
   }
   return 1;
}
forward CCDown2();
public CCDown2()
{
   foreach(new i : countdownin)
   {
	  SendInfoText(i, 1000, "~b~~h~~h~2");
      PlayerPlaySound(i, 1056, 0, 0, 0);
   }
   return 1;
}
forward CCDown1();
public CCDown1()
{
   foreach(new i : countdownin)
   {
	  SendInfoText(i, 1000, "~b~~h~~h~~h~3");
      PlayerPlaySound(i, 1056, 0, 0, 0);
   }
   return 1;
}
stock CountDown(playerid, seconds, freeze)
{
   if(freeze == 1) TogglePlayerControllable2(playerid, false);

   pCount[playerid] = seconds;

   CountDownTimer[playerid] = SetTimerEx("CountDownForPlayer", 1000, true, "i", playerid);
}
forward CountDownForPlayer(playerid);
public CountDownForPlayer(playerid)
{
   new count = pCount[playerid] ;
   if(count == 0)
   {
        SendInfoText(playerid, 1000, "~g~Go!");
	    TogglePlayerControllable2(playerid, true);
        PlayerPlaySound(playerid, 1057, 0, 0, 0);
        KillTimer(CountDownTimer[playerid]);
        CountDownTimer[playerid]=-1;
   }
   else
   {
	   new str[25];
	   format(str, sizeof(str), "~b~%d", count);
       PlayerPlaySound(playerid, 1056, 0, 0, 0);
	   SendInfoText(playerid, 1000, str);
   }
   pCount[playerid]--;
   return 1;
}
stock SpawnPlayerClothes(playerid)
{
   for(new x=0; x<10; x++)
   {
		if(pSavedA[playerid][psmodel][x] > 0)
		{
			SetPlayerAttachedObject(playerid, x,
			pSavedA[playerid][psmodel][x],
			pSavedA[playerid][psbone][x],
			pSavedA[playerid][psx][x],
			pSavedA[playerid][psy][x],
			pSavedA[playerid][psz][x],
			pSavedA[playerid][psrx][x],
			pSavedA[playerid][psry][x],
			pSavedA[playerid][psrz][x],
			pSavedA[playerid][pssx][x],
			pSavedA[playerid][pssy][x],
			pSavedA[playerid][pssz][x]);

		}
   }
}
stock DespawnPlayerClothes(playerid)
{
   for(new x=0; x<10; x++)
   {
     if(IsPlayerAttachedObjectSlotUsed(playerid, x)) RemovePlayerAttachedObject(playerid, x);
	 else pSavedA[playerid][psmodel][x]=0;
   }
}

//==============================================================================
public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{

  if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && IsPlayerInAnyVehicle(playerid))
  {
	  new v=GetPlayerVehicleID(playerid);
	  if(CarNitro[v] > 0 && IsValidNosVehicle(v))
	  {
        new Float:Nitro = GetPVarFloat(playerid, "Nitro");
	    if ((((newkeys & (4)) == (4)) && ((oldkeys & (4)) != (4))))
	    {
	        if(Nitro > 0)
	        {
	                AddVehicleComponent(v, 1010);
	                Iter_Add(pNos, playerid);
	        }
	    }
	    else if ((((newkeys & (4)) != (4)) && ((oldkeys & (4)) == (4))))
	    {
	        RemoveVehicleComponent(v, 1010);
	        Iter_Remove(pNos, playerid);
	        SetPVarFloat(playerid, "Nitro", Nitro);
	    }
	  }
	  //Car-hopping
	  if(CarHopOn[playerid] == 1)
	  {
		  if((newkeys == 2 || newkeys == 10 || newkeys == 34) && !IsDeathMatcher(playerid) )
		  {
		    if(IsAdmin(playerid, 2))
			{
			  new Float:vX, Float:vY, Float:vZ;
			  GetVehicleVelocity(GetPlayerVehicleID(playerid), vX, vY, vZ);
			  if(floatcmp(vZ, 0.7) == -1)
			  {
			    SetVehicleVelocity(GetPlayerVehicleID(playerid), vX, vY, floatadd(vZ, 0.25));
			  }
			}
		  }
	  }
      new wa=GetPlayerVirtualWorld(playerid);
      if(wa == 66699 || wa == 66700 || wa == 66701 || wa == 66702 || wa == 66703 || wa == 66704 && GetVehicleModel(v) == 441)
	  {
        if((newkeys == 2 || newkeys == 10 || newkeys == 34))
	    {
	      new Float:vX, Float:vY, Float:vZ;
	      GetVehicleVelocity(GetPlayerVehicleID(playerid), vX, vY, vZ);
	      if(floatcmp(vZ, 0.7) == -1)
	      {
	        SetVehicleVelocity(GetPlayerVehicleID(playerid), vX, vY, floatadd(vZ, 0.15));
	      }
	    }
	  }
	  //Speed Boost
	  if(SpeedBoostOn[playerid] == 1)
	  {
		  if((newkeys == KEY_FIRE) && !IsDeathMatcher(playerid) && IsAdmin(playerid, 2))
		  {
		      new Float:vX, Float:vY, Float:vZ, Float:vA, VehID;
		      VehID = GetPlayerVehicleID(playerid);
		      GetVehicleVelocity(VehID, vX, vY, vZ);
		      if(floatcmp(floatsqroot(floatadd(floatpower(vX, 2), floatpower(vY, 2))), 1.2) == -1)
		      {
		        GetVehicleZAngle(VehID, vA);
		        vA = floatsub(vA, floatmul(vA, 2));
		        vX = floatadd(vX, floatdiv(floatsin(vA, degrees), 4));
		        vY = floatadd(vY, floatdiv(floatcos(vA, degrees), 4));
		        SetVehicleVelocity(VehID, vX, vY, vZ);
		      }
		  }
	  }
  }
  #if defined USE_NEWINFOMSG
  if(newkeys == KEY_FIRE || newkeys == 12  || newkeys == 36)
  {
    if(InfoTextCreatedmsg[playerid] == true) { DestroyInfoTextmsg(playerid); }
    if(InfoTextCreatedmsg2[playerid] == true) { DestroyInfoTextmsg2(playerid); }
  }
		//Click to close window && stop animation
  if(newkeys == KEY_FIRE || newkeys == 12  || newkeys == 36)
  {
    if(InfoTextmsgShown[playerid] == true) { DestroyInfoTextmsg(playerid); }
    if(InfoTextCreatedmsg2[playerid] == true) { DestroyInfoTextmsg2(playerid); }
  }
  #endif
  if(IsSpecing[playerid] == 1)
  {
	  if(newkeys & KEY_ANALOG_LEFT)
	  {
		  SpecBack(playerid);
	  }
	  if(newkeys & KEY_ANALOG_RIGHT)
	  {
		   SpecNext(playerid);
	  }
  }
#if defined USE_POOL
  if(GetPVarInt(playerid, "poolguy1") || GetPVarInt(playerid, "poolguy2"))
  {
   if(lockshooting > 0)
   {
      ApplyAnimation(playerid, "POOL", "POOL_ChalkCue", 4.1, 1, 1, 1, 0, 1500, 1);
      SetPlayerArmedWeapon(playerid, 0);
   }
   else
   {
		if(newkeys & 128)
		{
		    if(poPlayer[playerid][Sighting] == false && poolturn==playerid)
		    {
			        new Float:dist = GetVectorDistance_PL(playerid, PoolBall[0]);
			    	if(dist < 1.6)
			        {
			        	new Float:pos[7];
			        	GetObjectPos(PoolBall[0], pos[0], pos[1], pos[2]);
						GetPlayerPos(playerid, pos[3], pos[4], pos[5]);
						pos[6] = GetVectorAngle_XY(pos[3], pos[4], pos[0], pos[1]);
						poPlayer[playerid][Sighting] = true;
						poPlayer[playerid][AfterSighting] = true;
						poPlayer[playerid][SelectLR] = 0;
						poPlayer[playerid][SelectUD] = 3.0;

						if(0.9 <= dist <= 1.2)
						{
						    pos[3] += floatsin(-pos[6] + 180, degrees) * 0.3;
						    pos[4] += floatcos(-pos[6] + 180, degrees) * 0.3;
						}
						else if(dist < 0.9)
						{
						    pos[3] += floatsin(-pos[6] + 180, degrees) * 0.6;
						    pos[4] += floatcos(-pos[6] + 180, degrees) * 0.6;
						}
						SetPlayerPos(playerid, pos[3], pos[4], pos[5]);
						SetPlayerFacingAngle(playerid, pos[6] - 2.2);
						poPlayer[playerid][pooa] = pos[6] - 2.2;

		    			pos[3] += floatsin(-pos[6] - 10, degrees) * 0.2;
				  		pos[4] += floatcos(-pos[6] - 10, degrees) * 0.2;
				    	SetPlayerCameraPos(playerid, pos[3], pos[4], pos[2] + 0.5);
					    SetPlayerCameraLookAt(playerid, pos[0], pos[1], pos[2]);
					    ApplyAnimation(playerid, "POOL", "POOL_Med_Start", 1, 0, 0, 0, 1, 0, 1);
			    	}
		    }
		}
		else if(oldkeys & 128)
		{
		    if(poPlayer[playerid][AfterSighting] == true)
		    {
		    	SetCameraBehindPlayer(playerid);
		    	ApplyAnimation(playerid, "POOL", "POOL_Med_Shot_O", 4.1, 0, 1, 1, 1, 1, 1);

		   		poPlayer[playerid][AfterSighting] = false;

		   		if(poPlayer[playerid][Sighting] == true)
		   		    poPlayer[playerid][Sighting] = false;
		   	}
		}
		if(newkeys & KEY_SECONDARY_ATTACK || newkeys & KEY_JUMP)
		{
			ApplyAnimation(playerid, "POOL", "POOL_ChalkCue", 4.1, 1, 1, 1, 0, 1500, 1);
		}
		if(newkeys & KEY_FIRE)
		{
		 if(IsValidObject(PoolBall[0]))
		 {
		   	  if(PHY_IsObjectMoving(PoolBall[0]))
			  {
				 SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must wait for the white ball to stop moving");
		         ApplyAnimation(playerid, "POOL", "POOL_ChalkCue", 4.1, 1, 1, 1, 0, 500, 1);
			  }
			  else
			  {
			    if(poPlayer[playerid][Sighting] == true && poolturn==playerid)
			    {
		            poolin=0;
			        new Float:pos[7];
			    	GetObjectPos(PoolBall[0], pos[0], pos[1], pos[2]);


			        poPlayer[playerid][Sighting] = false;

			    	if(poPlayer[playerid][pooa] > 360)
						poPlayer[playerid][pooa] = poPlayer[playerid][pooa] - 360;

					else if(poPlayer[playerid][pooa] < 0)
					    poPlayer[playerid][pooa] = 360 + poPlayer[playerid][pooa];


					new Float:angle;
					new Float:speed=poPlayer[playerid][SelectUD] / 3.0;
					GetPlayerFacingAngle(playerid, angle);
					PHY_SetObjectVelocity(PoolBall[0], speed * floatsin(-angle, degrees), speed * floatcos(-angle, degrees));
	                lockshooting=1;
					new Float:pp[4];
					GetPlayerPos(playerid, pp[0], pp[1], pp[2]);
					GetPlayerFacingAngle(playerid, pp[3]);
					pp[0] += floatsin(-pp[3] - 90, degrees) * 0.3;
					pp[1] += floatcos(-pp[3] - 90, degrees) * 0.3;
					SetPlayerPos(playerid, pp[0], pp[1], pp[2]);

					new id;
					if(playerid == poolguy1) id = poolguy2;
					if(playerid == poolguy2) id = poolguy1;
					SetTimerEx("SetPoolCam", 4000, false, "ii", id, playerid);
					SetTimerEx("SetPoolCam2", 1000, false, "ii", id, playerid);

					ApplyAnimation(playerid, "POOL", "POOL_Med_Shot", 4.1, 0, 1, 1, 1, 1, 1);
					PlayerPlaySound(playerid, 31810, pos[0], pos[1], pos[2]);
					PlayerPlaySound(id, 31810, pos[0], pos[1], pos[2]);
					poolturn=-1;
					poollasthit=playerid;
			    }
			    else
			    {
					ApplyAnimation(playerid, "POOL", "POOL_ChalkCue", 4.1, 1, 1, 1, 0, 1500, 1);
			    }
			  }
		 }
		}
	   }
  }
 #endif
  if(GetPVarInt(playerid, "RaceStating"))
  {
     HideRaceInfo(playerid);
  }
  if(newkeys == KEY_JUMP)
  {
   if(GetPlayerState(playerid) == 1 && PowerUpPlayer[2] == playerid)
   {
    if (GetPlayerVirtualWorld(playerid) == 0 &&  ( GetTickCount() - JumpTK[playerid] ) > 3000 )
    {
	    new Float:v[3]; GetPlayerVelocity(playerid, v[0], v[1], v[2]);
	    SetPlayerVelocity(playerid, v[0], v[1], v[2]+2);
	    JumpTK[playerid]= GetTickCount();
    }
   }
  }
  if(HOLDING(128))
  {
    switch(GetPlayerCameraMode(playerid))
    {
        case 7, 8, 46, 51:
        {
            if(!GetPVarInt(playerid, "F_A_C_O"))
            {
                DespawnPlayerClothes(playerid);
                SetPVarInt(playerid, "F_A_C_O", 1);
            }
        }
    }
  }
  else
  {
        if(GetPVarInt(playerid, "F_A_C_O"))
        {
            SpawnPlayerClothes(playerid);
            DeletePVar(playerid, "F_A_C_O");
        }
  }

  Paused[playerid] = 0;
  new m=GetPVarInt(playerid, "MissionProgress");
  if(GetPVarInt(playerid, "EATING"))
  {
	new animlib[32];
    new animname[32];
    GetAnimationName(GetPlayerAnimationIndex(playerid), animlib, 32, animname, 32);
    if(strcmp(animlib, "FOOD", true))
	{
	 DeletePVar(playerid, "EATING"), RemovePlayerAttachedObject(playerid, 0);
	}
  }
  if(GetPVarInt(playerid, "usesanims"))
  {
	DeletePVar(playerid, "usesanims");
  }
  if((m == 2 || m == 4 || m == 6 || m == 8) && PlayerInfo[playerid][Mission] == 3) ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 1, 1, 1, 1, 1, 1);
  if(GetPlayerWeapon(playerid) == 41 && GetPlayerState(playerid) == 1)
  {
     if (HOLDING( KEY_FIRE ))
     {
		for(new tag=0;tag<100;tag++)
		{
	      if(IsPlayerInRangeOfPoint(playerid, 2.00, Spray[tag][0], Spray[tag][1], Spray[tag][2]))
	      {
			 new Float:o_O;
			 GetPlayerFacingAngle(playerid, o_O);
			 if(o_O < (Spray[tag][3]+80) && o_O > (Spray[tag][3]-80))
			 {
				if(MySprays[playerid][tag]==1 && GetTickCount() - TickCount[playerid][TagTK] > 5000)
				{
                    SendInfoText(playerid, 3000, "~r~You have already sprayed this tag");
//	                    ApplyAnimation(playerid, "GRAFFITI", "graffiti_Chkout", 1.0, 0, 1, 1, 0, 3000, 1);
				}
				else
				{
                  TickCount[playerid][TagTK]= GetTickCount();

                  ApplyAnimation(playerid, "GRAFFITI", "spraycan_fire", 1.0, 0, 1, 1, 0, 3000, 1);
                  MySprays[playerid][tag] =1;
			      new str[128];
			      format(str, sizeof(str), "~r~%d ~w~OF ~g~%d ~p~Tags ~w~Sprayed!", CountPlayerSprays(playerid), 100);
                  SendInfoText(playerid, 5000, str);
                  if((GetPVarInt(playerid, "LOGGED")) != 2)
                  {
                    new Query[168];
                    format(Query, sizeof(Query), "SELECT `Tag1`, `Tag2` FROM `spraytags` WHERE `UserID` = '%d'", PlayerInfo[playerid][UserID]);
	                mysql_tquery(GTADM, Query, "SprayTags_Update", "dd", playerid, tag+1);


		          }
		          if(CountPlayerSprays(playerid) == 100)
		          {
                      GivePP(playerid, 2);
		      	      format(str, sizeof(str), "» Spray tags « %s has sprayed all the spray tags", pName[playerid]);
				      SendClientMessageToAll(0xFAF0CEFF, str);

	  		          ShowPlayerDialog(playerid, 400, DIALOG_STYLE_MSGBOX, "Spray Tags", ""GREENBLUE_"Congratulations!\n"WHITE_"You have sprayed all the hidden tags\n\n"WHITE_"Reward : "GREEN_"6500000$ "WHITE_"and "YELLOW_"15 Score points + 2 Premium points", "Ok", "");
	   		          PlayerPlaySound(playerid, 5450 , 0.0, 0.0, 0.0);
				      ScoreTDupdate(playerid, 15);
				      GivePlayerMoneyEX(playerid, 6500000);
		          }

				}
			 }
	      }
		}
     }
  }
  if((GetPVarInt(playerid, "CS") == 3) && newkeys & KEY_FIRE)
  {
	 if(CS == 2)
	 {
		new p=-255, str[68], r=GetPVarInt(playerid, "CS_spec");
		foreach(new i : Player)
		{
		   if((GetPVarInt(i, "CS")) == 1 && r<i)
		   {
			  p=i;
			  break;
		   }
		}
		if(p != -255)
		{
          SetPVarInt(playerid, "CS_spec", p);
		  PlayerSpectatePlayer(playerid, p);
		  format(str, sizeof(str), "~y~Spectating:~g~~n~ %s", pName[p]);
		  SendInfoText(playerid, 5000, str);
		}
		else
		{
			foreach(new i : Player)
			{
			   if((GetPVarInt(i, "CS")) == 1 && r>i)
			   {
				  p=i;
				  break;
			   }
			}
			if(p != -255)
			{
       	  	  SetPVarInt(playerid, "CS_spec", p);
			  PlayerSpectatePlayer(playerid, p);
		 	  format(str, sizeof(str), "~y~Spectating:~g~~n~ %s", pName[p]);
		  	  SendInfoText(playerid, 5000, str);
			}
		}
	 }
  }
  else if((GetPVarInt(playerid, "CS") == 3) && newkeys & KEY_FIRE)
  {
	 if(CS == 2)
	 {
		new p=-255, str[68], r=GetPVarInt(playerid, "CS_spec");
		foreach(new i : Player)
		{
		   if((GetPVarInt(i, "CS")) == 2 && r<i)
		   {
			  p=i;
			  break;
		   }
		}
		if(p != -255)
		{
          SetPVarInt(playerid, "CS_spec", p);
		  PlayerSpectatePlayer(playerid, p);
		  format(str, sizeof(str), "~y~Spectating:~g~~n~ %s", pName[p]);
		  SendInfoText(playerid, 5000, str);
		}
		else
		{
			foreach(new i : Player)
			{
			   if((GetPVarInt(i, "CS")) == 2 && r>i)
			   {
				  p=i;
				  break;
			   }
			}
			if(p != -255)
			{
       	  	  SetPVarInt(playerid, "CS_spec", p);
			  PlayerSpectatePlayer(playerid, p);
		 	  format(str, sizeof(str), "~y~Spectating:~g~~n~ %s", pName[p]);
		  	  SendInfoText(playerid, 5000, str);
			}
		}
	 }
  }
  if(PlayerInfo[playerid][Mission] == 7 && newkeys & KEY_FIRE)
  {
	if(m== 3 && GetVehicleModel(GetPlayerVehicleID(playerid)) == 407)
	{
	  for(new x=0; x<28; x++)
	  {
			new Float:xx[3];
			GetPlayerObjectPos(playerid, MissionObjects[playerid][x], xx[0], xx[1], xx[2]);
			if(PlayerFaces(playerid, xx[0], xx[1], xx[2], 12.0) && IsPlayerInRangeOfPoint(playerid, 12.0, xx[0], xx[1], xx[2]))
			{
				DestroyPlayerObject(playerid, MissionObjects[playerid][x]);
				SetPVarInt(playerid, "FirePorgress", GetPVarInt(playerid, "FirePorgress")-2);
				if(GetPVarInt(playerid, "FirePorgress") <= 0)
				{
                  for(new ad=0; ad<28; ad++) DestroyPlayerObject(playerid, MissionObjects[playerid][ad]);
				  SetPVarInt(playerid, "MissionProgress", 4);

                  TogglePlayerDynamicCP(playerid, MissionCP[58], true);
                  Streamer_AppendArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[58], E_STREAMER_PLAYER_ID, playerid);
           	      PlayerTextDrawSetStringEX(playerid, pMissionTD[playerid], "- ~y~Great! ~w~now get back to the ~y~fire dept ~w~to get your payday");
				}
			}
	  }
	}
	else if(m== 6 && GetVehicleModel(GetPlayerVehicleID(playerid)) == 432)
	{
	  for(new x=0; x<28; x++)
	  {
			new Float:xx[3];
			GetPlayerObjectPos(playerid, MissionObjects[playerid][x], xx[0], xx[1], xx[2]);
			if(PlayerFaces(playerid, xx[0], xx[1], xx[2], 25.0) && IsPlayerInRangeOfPoint(playerid, 25.0, xx[0], xx[1], xx[2]))
			{
				DestroyPlayerObject(playerid, MissionObjects[playerid][x]);
				MissionObjects[playerid][x]=CreatePlayerObject(playerid, 18727, xx[0], xx[1], xx[2], 0, 0, 0);
				MissionObjects[playerid][x+14]=CreatePlayerObject(playerid, 18689, xx[0], xx[1], xx[2], 0, 0, 0);

				SetPVarInt(playerid, "FirePorgress", GetPVarInt(playerid, "FirePorgress")+2);
				if(GetPVarInt(playerid, "FirePorgress") >= 28)
				{
				  SetPVarInt(playerid, "MissionProgress", 7);
           	      PlayerTextDrawSetStringEX(playerid, pMissionTD[playerid], "- ~y~Nice! ~w~now get inside the ~r~cluckin' bell ~w~to get your ~g~money");
			      Streamer_AppendArrayData(STREAMER_TYPE_PICKUP , MissionPickup[2], E_STREAMER_PLAYER_ID, playerid);
 				}
			}
	  }
	}
  }
  if(Footballer[playerid] > 0 && AllowPlaying==1 && DisableAutoShoot == 1)
  {
       new Float:ppos[3], Float:ballpos[3], Float:Rot[3];
 	   GetDynamicObjectPos(football, ballpos[0], ballpos[1], ballpos[2]);
 	   GetDynamicObjectRot(football, Rot[0], Rot[1], Rot[2]);
       if(IsPlayerInRangeOfPoint(playerid, 1.00, ballpos[0], ballpos[1], ballpos[2]))
	   {
		 if(newkeys & KEY_SECONDARY_ATTACK)
		 {
			new MoveTime;
			ApplyAnimation(playerid, "FIGHT_D", "FightD_1", 4.1, 0, 1, 1, 0, 0);
 	    	GetPlayerPos(playerid, ppos[0], ppos[1], ppos[2]);
			GetXYInFrontOfPlayer(playerid, ppos[0], ppos[1], 6.0);
			MoveTime=MoveDynamicObject(football, ppos[0], ppos[1], 13.00, 10.0, Rot[0], Rot[1], Rot[2]+90);
			GetXYInFrontOfPlayer(playerid, ppos[0], ppos[1], 12.0);
			SetTimerEx("MoveBallDown", MoveTime-100, false, "fff", ppos[0], ppos[1], 10.0);
			PlayerPlaySound(playerid, 1130, 0.0, 0.0, 0.0);
			fLastPlayer=playerid;
	     }
		 else if(newkeys & KEY_FIRE)
		 {
			ApplyAnimation(playerid, "FIGHT_D", "FightD_1", 4.1, 0, 1, 1, 0, 0);
 	    	GetPlayerPos(playerid, ppos[0], ppos[1], ppos[2]);
			GetXYInFrontOfPlayer(playerid, ppos[0], ppos[1], 7.0);
			MoveDynamicObject(football, ppos[0], ppos[1], 10.300, 10.0, Rot[0], Rot[1], Rot[2]+90);
			PlayerPlaySound(playerid, 1130, 0.0, 0.0, 0.0);
			fLastPlayer=playerid;
	     }
		 else if(newkeys & KEY_WALK)
		 {
			new MoveTime;
			ApplyAnimation(playerid, "FIGHT_D", "FightD_1", 4.1, 0, 1, 1, 0, 0);
 	    	GetPlayerPos(playerid, ppos[0], ppos[1], ppos[2]);
			GetXYInFrontOfPlayer(playerid, ppos[0], ppos[1], 8.0);
			MoveTime=MoveDynamicObject(football, ppos[0], ppos[1], 11.2300, 15.0, Rot[0], Rot[1], Rot[2]+90);
			GetXYInFrontOfPlayer(playerid, ppos[0], ppos[1], 15.0);
			SetTimerEx("MoveBallDown", MoveTime-100, false, "fff", ppos[0], ppos[1], 15.0);
			PlayerPlaySound(playerid, 1130, 0.0, 0.0, 0.0);
			fLastPlayer=playerid;
	     }
	   }
  }
  if((newkeys & KEY_CROUCH) && GetPlayerState(playerid) == 2)
  {
		new engine, llights, alarm, doors, bonnet, boot, objective;
		new v=GetPlayerVehicleID(playerid);
		GetVehicleParamsEx(v, engine, llights, alarm, doors, bonnet, boot, objective);
		if(llights == 0) SetVehicleParamsEx(v, engine, 1, alarm, doors, bonnet, boot, objective);
        else if(llights == 1) SetVehicleParamsEx(v, engine, 0, alarm, doors, bonnet, boot, objective);

  }
  new w=GetPlayerVirtualWorld(playerid);
  if(w == 19888 || w == 19999 && InCanon[playerid]==0)
  {
	  if(GetPlayerState(playerid) == 2)
	  {
	   new v=GetPlayerVehicleID(playerid);
	   if(newkeys & KEY_CROUCH)
	   {
        new Float:vx, Float:vy, Float:vz;
        GetVehicleVelocity(v, vx, vy, vz);
        SetVehicleVelocity(v, vx * 1.5, vy *1.5, vz * 1.5);
	   }
	   if(newkeys & KEY_SPRINT || newkeys & KEY_FIRE)
	   {
        RepairVehicle(v);
	   }
	   else if(newkeys & KEY_SUBMISSION)
	   {
		new Float:zAngle;
		GetVehicleZAngle(v, zAngle);
		SetVehicleZAngle(v, zAngle);
	   }
      }
  }
  if(newkeys & KEY_JUMP && !(oldkeys & KEY_JUMP) && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED && !IsPlayerInAnyVehicle(playerid)) ApplyAnimation(playerid, "GYMNASIUM", "gym_jog_falloff", 4.1, 0, 1, 1, 0, 0);
  if ((newkeys & KEY_FIRE))
  {
	  if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	  {
		 if(GetPVarInt(playerid, "InHay") || GetPVarInt(playerid, "InMG") || GetPVarInt(playerid, "inFallout"))
		 {
			ApplyAnimation(playerid, "BMX", "Bmx_back", 1.0, 0 , 0, 0, 0, 1000);
			SendInfoText(playerid, 2000, "~r~NO DEATHMATCHING");
		 }
	    /* if(IsPlayerInMarketArea(playerid))
		 {
	       ApplyAnimation(playerid, "BMX", "Bmx_back", 1.0, 0 , 0, 0, 0, 1000);
		   SendInfoText(playerid, 2000, "~r~NO DEATHMATCHING in the market");
		 }*/
		 if(GetTickCount() - TickCount[playerid][DrugTK] > 2000 && PlayerInfo[playerid][pDrugs] > 0 && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_SMOKE_CIGGY)
		 {
              TickCount[playerid][DrugTK]=GetTickCount();
		      PlayerInfo[playerid][pDrugLevel]++;
		      if(PlayerInfo[playerid][pDrugLevel] > 3)
		      {
		            SetPlayerWeather(playerid, -66);
		            DrugsEffect[playerid]=1;
		      }
		 }
         else BoboBitch[playerid]=0;
	  }
	  new wea=GetPlayerWeapon(playerid);

      if(IsvalidWeapon(wea) == 2 && GetPlayerVirtualWorld(playerid) == 0 && Spawned[playerid] ==1)
      {
		if( GetPlayerState(playerid) == 1)
		{
		  if(AllowForbidWeap[playerid] == 0 && !IsAdmin(playerid, 10))
		  {
	        new str[128];
	        format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}Admin Jonny has banned %s (%d) (Reason: %s)", pName[playerid], playerid, aWeaponNames[wea]);
            SendClientMessageToAll(AdminInfo, str);
            new str2[128];
            format(str2, sizeof(str2), "-Ban- Admin Jonny has banned %s (%d) (Reason: %s)", pName[playerid], playerid, aWeaponNames[wea]);
           	printf("%s", str2);
            BanEX(playerid, aWeaponNames[wea], -255);
		  }
        }
 	  }
  }

  else if(( newkeys & KEY_NO))
  {

	      new KO=GetPVarInt(playerid, "GateEditing");
	      if(KO == 1)
	      {
				new Float:object_x, Float:object_y, Float:object_z;
	            GetPlayerPos(playerid, object_x, object_y, object_z);

				SetPVarInt(playerid, "GateEditing", 2);
	    		SetPVarInt(playerid, "Keypad1_ObjectID", CreateDynamicObject(19273, object_x, object_y, object_z, 0.0, 0.0, 0.0));
				SendClientMessage(playerid, GREENBLUE, "-GateEditor- Use /MoveGate OR /EditGate To Change The Keypad's Position");
				SendClientMessage(playerid, GREENBLUE, "-GateEditor- Press 'N' When you are Done");
				Streamer_Update(playerid);
	      }
	      else if(KO == 2)
	      {
				new Float:object_x, Float:object_y, Float:object_z;
	            GetPlayerPos(playerid, object_x, object_y, object_z);

				SetPVarInt(playerid, "GateEditing", 3);
	    		SetPVarInt(playerid, "Keypad2_ObjectID", CreateDynamicObject(19273, object_x, object_y, object_z, 0.0, 0.0, 0.0));
				SendClientMessage(playerid, GREENBLUE, "-GateEditor- Use /MoveGate OR /EditGate To Change The Keypad's Position");
				SendClientMessage(playerid, GREENBLUE, "-GateEditor- Press 'N' When you are Done");

				Streamer_Update(playerid);
	      }
	      else if(KO == 3)
	      {
				new Float:fVX, Float:fVY, Float:fVZ;
		    	new Float:object_x, Float:object_y, Float:object_z;
                GetPlayerPos(playerid, object_x, object_y, object_z);

				SetPVarInt(playerid, "GateEditing", 4);

				SendClientMessage(playerid, GREENBLUE, "-GateEditor- Use /MoveGate OR /EditGate To Change The Gate's (opened) Position");
				SendClientMessage(playerid, GREENBLUE, "-GateEditor- Press 'N' When you are Done");

	            GetDynamicObjectPos(GetPVarInt(playerid, "Gate_ObjectID"), object_x, object_y, object_z);
	            GetDynamicObjectRot(GetPVarInt(playerid, "Gate_ObjectID"), fVX, fVY, fVZ);
				SetPVarFloat(playerid, "GateX", object_x);
				SetPVarFloat(playerid, "GateY", object_y);
				SetPVarFloat(playerid, "GateZ", object_z);
				SetPVarFloat(playerid, "GateRX", fVX);
				SetPVarFloat(playerid, "GateRY", fVY);
				SetPVarFloat(playerid, "GateRZ", fVZ);
				Streamer_Update(playerid);

	      }

	      else if(KO == 4)
	      {
                new Model=GetPVarInt(playerid, "model");
				if(Model == 5837 || Model == 18755)
				{
					new Float:object_x, Float:object_y, Float:object_z;
		            GetPlayerPos(playerid, object_x, object_y, object_z);

					SetPVarInt(playerid, "GateEditing", 5);
		    		SetPVarInt(playerid, "Keypad3_ObjectID", CreateDynamicObject(19273, object_x, object_y, object_z, 0.0, 0.0, 0.0));
					SendClientMessage(playerid, GREENBLUE, "-GateEditor- Use /MoveGate OR /EditGate To Change The ATTACHED Keypad position {A67B89}(Should be made inside the lift / elevator)!");
					SendClientMessage(playerid, GREENBLUE, "-GateEditor- Press 'N' When you are Done");
					Streamer_Update(playerid);

				}
				else
				{
					SaveGate(playerid);
				}
	      }
	      else if(KO == 5)
	      {
                new Model=GetPVarInt(playerid, "model");
				if(Model == 5837 || Model == 18755)
				{
					SetPVarInt(playerid, "GateEditing", 6);

		            new Float:pos[3], Float:rot[3];
		            GetDynamicObjectPos(GetPVarInt(playerid, "Keypad3_ObjectID"), pos[0], pos[1], pos[2]);
		            GetDynamicObjectRot(GetPVarInt(playerid, "Keypad3_ObjectID"), rot[0], rot[1], rot[2]);

			        SetPVarFloat(playerid, "oKeyX", pos[0]);
			        SetPVarFloat(playerid, "oKeyY", pos[1]);
			        SetPVarFloat(playerid, "oKeyZ", pos[2]);
			        SetPVarFloat(playerid, "oKeyRX", rot[0]);
			        SetPVarFloat(playerid, "oKeyRY", rot[1]);
			        SetPVarFloat(playerid, "oKeyRZ", rot[2]);

					new Float:object_x, Float:object_y, Float:object_z;
		            GetPlayerPos(playerid, object_x, object_y, object_z);
					SetDynamicObjectPos(GetPVarInt(playerid, "Keypad3_ObjectID"), object_x, object_y, object_z);

					new Float:fVX, Float:fVY, Float:fVZ;

		            GetDynamicObjectPos(GetPVarInt(playerid, "Gate_ObjectID"), object_x, object_y, object_z);
		            GetDynamicObjectRot(GetPVarInt(playerid, "Gate_ObjectID"), fVX, fVY, fVZ);
					SetPVarFloat(playerid, "oGateX", object_x);
					SetPVarFloat(playerid, "oGateY", object_y);
					SetPVarFloat(playerid, "oGateZ", object_z);
					SetPVarFloat(playerid, "oGateRX", fVX);
					SetPVarFloat(playerid, "oGateRY", fVY);
					SetPVarFloat(playerid, "oGateRZ", fVZ);

		            SetDynamicObjectPos(GetPVarInt(playerid, "Gate_ObjectID"), GetPVarFloat(playerid, "GateX"), GetPVarFloat(playerid, "GateY"), GetPVarFloat(playerid, "GateZ"));
		            SetDynamicObjectRot(GetPVarInt(playerid, "Gate_ObjectID"), GetPVarFloat(playerid, "GateRX"), GetPVarFloat(playerid, "GateRY"), GetPVarFloat(playerid, "GateRZ"));
					Streamer_Update(playerid);
					SendClientMessage(playerid, GREENBLUE, "-GateEditor- Use /MoveGate OR /EditGate To Change The ATTACHED Keypad position {A67B89}(AGAIN .. Should be made inside the lift / elevator)!");
					SendClientMessage(playerid, GREENBLUE, "-GateEditor- Last Step.. Press 'N' When you are Done to save the lift/elevator!");

				}
				else
				{
					SaveGate(playerid);
				}
	      }
	      else if(KO == 6)
	      {
			SaveGate(playerid);
	      }
  		  if(GetPVarInt(playerid, "RaceEditing"))
		  {
	       new Float:pos[4], str[256];
		   new r=GetPVarInt(playerid, "RaceID");
		   new pr=GetPVarInt(playerid, "RaceCP");
	       if(IsPlayerInAnyVehicle(playerid))
		   {
			 new v=GetPlayerVehicleID(playerid);
		     GetVehiclePos(v, pos[0], pos[1], pos[2]);
	         GetVehicleZAngle(v, pos[3]);
		   }
		   else
		   {
		     GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	         GetPlayerFacingAngle(playerid, pos[3]);
		   }
		   if(GetPVarInt(playerid, "StartP"))
		   {
               new INI:File = INI_Open(RacePath(r));
               INI_SetTag(File, "RaceInfo");
               INI_WriteFloat(File, "SpawnpX", pos[0]);
               INI_WriteFloat(File, "SpawnpY", pos[1]);
               INI_WriteFloat(File, "SpawnpZ", pos[2]);
               INI_WriteFloat(File, "SpawnpA", pos[3]);
               INI_Close(File);
               RaceInfo[r][Spawnp][0]=pos[0];
               RaceInfo[r][Spawnp][1]=pos[1];
               RaceInfo[r][Spawnp][2]=pos[2];
               RaceInfo[r][Spawnp][3]=pos[3];
               DeletePVar(playerid, "StartP");
               format(str, sizeof(str), "~n~~n~press 'N' to create the race start point");
		   }
		   else
		   {
			if(pr == 0)
			{

               new INI:File = INI_Open(RacePath(r));
               INI_SetTag(File, "RaceInfo");
               INI_WriteFloat(File, "StartX", pos[0]);
               INI_WriteFloat(File, "StartY", pos[1]);
               INI_WriteFloat(File, "StartZ", pos[2]);
               INI_Close(File);
               RaceInfo[r][StartCP][0]=pos[0];
               RaceInfo[r][StartCP][1]=pos[1];
               RaceInfo[r][StartCP][2]=pos[2];
               format(str, sizeof(str), "~n~~n~press 'N' to create a race checkpoint");
			}
			else
			{
               new INI:File = INI_Open(RacePath(r));
	           new strvar[24];
               INI_SetTag(File, "RaceInfo");
               format(strvar, sizeof(strvar), "X_CheckPoint%d", pr-1);
               INI_WriteFloat(File, strvar, pos[0]);
               format(strvar, sizeof(strvar), "Y_CheckPoint%d", pr-1);
               INI_WriteFloat(File, strvar, pos[1]);
               format(strvar, sizeof(strvar), "Z_CheckPoint%d", pr-1);
               INI_WriteFloat(File, strvar, pos[2]);
               INI_Close(File);
               RaceCPs[r][pr-1][0]=pos[0];
               RaceCPs[r][pr-1][1]=pos[1];
               RaceCPs[r][pr-1][2]=pos[2];
               format(str, sizeof(str), "~n~~n~press 'N' to create a race checkpoint~n~type (/stopediting) to save & exit~y~~n~Created Checkpoints ~w~%d", GetPVarInt(playerid, "RaceCP"));
			}
            SetPVarInt(playerid, "RaceCP", pr+1);
		   }
           PlayerTextDrawSetStringEX(playerid, RaceCon[playerid][0], str);
           EDITORCPS[playerid][pr] = CreateDynamicRaceCP(2, pos[0], pos[1], pos[2], 0.0, 0.0, 0.0, 10, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), playerid);
		  }
  }
  if ((newkeys & KEY_YES))
  {

		  if(IsPlayerInAnyVehicle(playerid))
		  {
		  		  if(GetPVarInt(playerid, "used") == 0)
		  		  {
		  		      new p = GetPlayerVehicleID(playerid);
		  		      obj[playerid] = CreatePlayerObject(playerid, 19300, 0.0000, -1282.9984, 10.1493, 0.0000, -1, -1, 100);
		  		      AttachPlayerObjectToVehicle(playerid, obj[playerid], p, -0.314999, -0.195000, 0.510000, 0.000000, 0.000000, 0.000000);
		  		      AttachCameraToPlayerObject(playerid, obj[playerid]);
		  		      SetPVarInt(playerid, "used", 1);
		  		  }
		  		  else if(GetPVarInt(playerid, "used") == 1)
		  		  {
		  		      SetCameraBehindPlayer(playerid);
		  		      DestroyPlayerObject(playerid, obj[playerid]);
		  		      SetPVarInt(playerid, "used", 0);
		  		  }
		  }

  }
  if(newkeys & KEY_LOOK_BEHIND)
  {
    if(GetPlayerVirtualWorld(playerid) == 707)
    {
		 new i=InBase[playerid];
		 TeleportPlayer(playerid, GangBases[i][gSP][0], GangBases[i][gSP][1], GangBases[i][gSP][2], 180.0, 0),
		 SetPlayerVirtualWorldEX(playerid, 0),
		 InBase[playerid]=-1;
    }
	for(new i=0; i<MAX_HOUSES; i++)
	{
      if(GetPlayerVirtualWorld(playerid) == hInfo[i][VirtualWorld] && (InHouse[playerid] == i))
	  {
        ExitHouse(playerid, i);
		break;
      }
	}
  }
  if(newkeys & KEY_WALK)
  {
	if(OnPhone[playerid]==1)
	{
		SendInfoText(playerid, 4000, "~r~Hanged Up");
		SendInfoText(CallID[playerid], 4000, "~r~Hanged Up");
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
		RemovePlayerAttachedObject(playerid, 4);
	    SetPlayerSpecialAction(CallID[playerid], SPECIAL_ACTION_STOPUSECELLPHONE);
		RemovePlayerAttachedObject(CallID[playerid], 4);
		OnPhone[playerid]=0;
		OnPhone[CallID[playerid]] =0;
		CallID[CallID[playerid]]=-1;
		CallID[playerid]=-1;
	}
	if(OnPhone[playerid]==2)
	{
		StopAudioStreamForPlayer(CallID[playerid]);
		SendInfoText(playerid, 4000, "~r~Hanged Up");
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
		RemovePlayerAttachedObject(playerid, 4);
		OnPhone[playerid]=0;
		OnPhone[CallID[playerid]] =0;
		CallID[CallID[playerid]]=-1;
		CallID[playerid]=-1;
	}

	for(new i=0; i<MAX_HOUSES; i++)
	{
      if(GetPlayerVirtualWorld(playerid) == hInfo[i][VirtualWorld] && (InHouse[playerid] == i))
	  {
		if(PlayerInfo[playerid][pHouse] == i)
		{
          if(IsPlayerInRangeOfPoint(playerid, 20.0, hInfo[i][InteriorX], hInfo[i][InteriorY], hInfo[i][InteriorZ]))
          ShowHouseMenu(playerid);
	  	  break;
	  	}
      }
	}
	for(new i=0; i<bcount+1; i++)
	{
		 if(IsPlayerInRangeOfPoint(playerid, 3.00, Bar[i][bar_x], Bar[i][bar_y], Bar[i][bar_z]))
		 {
		   if( (GetPlayerInterior(playerid) == Bar[i][bar_int] || Bar[i][bar_int] == -1)  && (GetPlayerVirtualWorld(playerid) == Bar[i][bar_world] || Bar[i][bar_world] == -1))
		   {
			 if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DRINK_BEER)
			 {
				if(GetPlayerMoneyEx(playerid) >= 1000)
				{
				  GivePlayerMoneyEX(playerid, -1000, 1);
				  CanFps[playerid]=0;
	              SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
	              PlayerTextDrawHide(playerid, FPS[playerid]);

	              PlayerInfo[playerid][Drunk]++;
				  new str[256];
				  format(str, sizeof(str), "UPDATE `users` SET `Drunk` = %d WHERE `UserID` = '%d'", PlayerInfo[playerid][Drunk], PlayerInfo[playerid][UserID]);
				  mysql_query(GTADM, str);
				}
				else SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You dont have enough money to buy alcohol");
	            break;
             }
		   }
		 }
	}
  }
  else if ((newkeys == KEY_FIRE) && (GetPlayerState(playerid) == 2) && !IsDeathMatcher(playerid) && GetPlayerVirtualWorld(playerid) == 0)
  {
	if(PlayerInfo[playerid][Ramp] > 0)
	{
	  new v=GetPlayerVehicleID(playerid);
	  if(!IsAPlane(v))
	  {
           if ( !IsAdmin(playerid, 1) && ( GetTickCount() - TickCount[playerid][ramp] ) < 2000 ) return 0;
           if ( IsAdmin(playerid, 1) && ( GetTickCount() - TickCount[playerid][ramp]  ) < 2000 && PlayerInfo[playerid][Ramp] !=6) return 0;
           if ( IsAdmin(playerid, 1) && ( GetTickCount() - TickCount[playerid][ramp]  ) < 500 && PlayerInfo[playerid][Ramp] == 6) return 0;
           if ( !IsAdmin(playerid, 1) && PlayerInfo[playerid][Ramp] ==6 ) return 0;
           if(IsValidDynamicObject(rampobj[playerid]) && rampobj[playerid] >= 0)
		   {
		     DestroyDynamicObject(rampobj[playerid]);
		     rampobj[playerid]=INVALID_OBJECT_ID;
		   }
           TickCount[playerid][ramp] = GetTickCount();

           new Float:x, Float:y, Float:z, Float:vA;
		   GetVehiclePos(v, x, y, z);
		   GetVehicleZAngle(v, vA);
		   switch(PlayerInfo[playerid][Ramp])
		   {
			   case 1:rampobj[playerid] = CreateDynamicObject(1655, x + (20.0 * floatsin(-vA, degrees)), y + (20.0 * floatcos(-vA, degrees)), z, 0.0, 0.0, vA, -1, -1, playerid);
			   case 2:rampobj[playerid] = CreateDynamicObject(1632, x + (20.0 * floatsin(-vA, degrees)), y + (20.0 * floatcos(-vA, degrees)), z , 0.0, 0.0, vA, -1, -1, playerid);
			   case 3:rampobj[playerid] = CreateDynamicObject(1631, x + (20.0 * floatsin(-vA, degrees)), y + (20.0 * floatcos(-vA, degrees)), z , 0.0, 0.0, vA, -1, -1, playerid);
			   case 4:rampobj[playerid] = CreateDynamicObject(8302, x + (20.0 * floatsin(-vA, degrees)), y + (20.0 * floatcos(-vA, degrees)), z , 0.0, 0.0, vA+14, -1, -1, playerid);
			   case 5:rampobj[playerid] = CreateDynamicObject(1503, x + (20.0 * floatsin(-vA, degrees)), y + (20.0 * floatcos(-vA, degrees)), z-0.5 , 0.0, 0.0, vA, -1, -1, playerid);
			   case 6:
			   {
			   	if(IsAdmin(playerid, 1 )) rampobj[playerid] = CreateDynamicObject(1632, x + (10.0 * floatsin(-vA, degrees)), y + (10.0 * floatcos(-vA, degrees)), z , 0.0, 0.0, vA, -1, -1, playerid);
			   }
		   }
           if(PlayerInfo[playerid][Ramp] !=6) SetTimerEx("DestroyRamp", 3000, 0, "d", playerid);
	  }
	}
  }
  else if((newkeys & KEY_SECONDARY_ATTACK) && (GetPlayerState(playerid) == 1))
  {
      //if(GetPVarInt(playerid, "ronpiss")) RemovePlayerAttachedObject(playerid, 7);
      Gate_Lift(playerid);
	  new h = PlayerInfo[playerid][pHouse];
	  new Float:pos[3];
	  for(new k=0; k<MAX_SAMS; k++)
	  {
		   GetDynamicObjectPos(SAMS[k][kObj], pos[0], pos[1], pos[2]);
           if(!IsPlayerInRangeOfPoint(playerid, 1.50, pos[0], pos[1], pos[2])) continue;

           ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 1.0, 0, 1, 1, 0, 0);

		   if(IsAdmin(playerid, 6) || IsHouseInSamRange(h, k))
		   {
				 if(SAMS[k][Work] == 0)
				 {
                      SAMS[k][Work] = 1;
                      SendInfoText(playerid, 2000, "~y~Sams ~g~On!");
	                  KillTimer(SAMS[k][TimerCheck]);
	                  SAMS[k][TimerCheck]=-1;
		              if(IsValidDynamicObject(SAMS[k][SamMissle])) DestroyDynamicObject(SAMS[k][SamMissle]);
					  SAMS[k][SamMissle]=INVALID_OBJECT_ID;
		              SAMS[k][MissleFired] = 0;
                 }
				 else if(SAMS[k][Work] == 1)
				 {
                      SAMS[k][Work] = 0;
                      SendInfoText(playerid, 2000, "~y~Sams ~r~Off!");
	                  KillTimer(SAMS[k][TimerCheck]);
	                  SAMS[k][TimerCheck]=-1;
		              if(IsValidDynamicObject(SAMS[k][SamMissle])) DestroyDynamicObject(SAMS[k][SamMissle]);
		              SAMS[k][SamMissle]=INVALID_OBJECT_ID;
		              SAMS[k][MissleFired] = 0;
				 }
				 break;
		   }
	  }
  }
  if(GetPVarInt(playerid, "Stating"))
  {
    for(new i=0; i<StatsTDS; i++) PlayerTextDrawHide(playerid, pStatsTD[playerid][i]);
	DeletePVar(playerid, "Stating");
  }
  if(GetPVarInt(playerid, "gInfoStating"))
  {
    for(new i=0; i<30; i++) PlayerTextDrawDestroy(playerid, pGwTD2[playerid][i]);
    for(new i=0; i<7; i++) PlayerTextDrawDestroy(playerid, pGwTD1[playerid][i]);
	DeletePVar(playerid, "gInfoStating");
	CancelSelectTextDraw(playerid);
  }
  if(GetPVarInt(playerid, "Skilling"))
  {
	HideSkills(playerid);
	DeletePVar(playerid, "Skilling");

  }
  return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
  InCar[playerid] = 0;
#if defined USEDRIFT
  if((GetPVarInt(playerid, "Drifter")) == 2)
  {
	GameTextForPlayer(playerid, "~r~Failed", 5000, 5);
//	SendInfoText(playerid, "~r~Failed
	TogglePlayerControllable2(playerid, 0);
	Iter_Remove(Drifter, playerid);
	ShowMenuForPlayer(DriftMenu, playerid);
    if(AdminCar[vehicleid] ==1)
    {
        AdminCar[vehicleid] =0;
        DestroyVehicleEX(vehicleid);
    }
  }
#endif
  if(Iter_Contains(InSumo, playerid))
  {
    if(!GetPVarInt(playerid, "SumoShowIt"))
    {
	 if(FallDown[playerid] != true)
  {
	  FallDown[playerid]=true;
	  SumoKnock(playerid);
	 }
    }
  }
  if(InCanon[playerid] == 1)
  {
	InCanon[playerid]=2;
	SendInfoText(playerid, 5000, "~r~Failed");
	ShowMenuForPlayer(CanonMenu, playerid);
	TogglePlayerControllable2(playerid, 0);
    if(AdminCar[vehicleid] ==1)
    {
        AdminCar[vehicleid] =0;
        DestroyVehicleEX(vehicleid);
    }
  }
  if(STUNTING[playerid] == 1)
  {
   STUNTING[playerid] = 2;
   ShowMenuForPlayer(StuntMenu, playerid);
   PlayerTextDrawHide(playerid, pInfoTD[playerid]);
   if(AdminCar[vehicleid]==1) DestroyVehicleEX(vehicleid), AdminCar[vehicleid]=0;
   else SetVehicleToRespawn(vehicleid);
  }
  if(PlayerInfo[playerid][Mission] == 5 && GetPVarInt(playerid, "MissionProgress") == 1)
  {
	  if(GetVehicleModel(vehicleid) == 575)
	  {


		   PlayerTextDrawSetStringEX(playerid, pMissionTD[playerid], "- ~w~Find a ~y~broadway ~w~and steal it!");
	  }
  }
  if(GetPVarInt(playerid, "used") == 1)
  {
    SetPVarInt(playerid, "used", 0);
    SetCameraBehindPlayer(playerid);
    DestroyPlayerObject(playerid, obj[playerid]);
  }
  return 1;
}

forward DestroyRamp(playerid);
public DestroyRamp(playerid)
{
	if(IsValidDynamicObject(rampobj[playerid]) && rampobj[playerid] >= 0)
	{
	 DestroyDynamicObject(rampobj[playerid]);
	 rampobj[playerid]=INVALID_OBJECT_ID;
	}
 	return 1;
}


public OnPlayerStateChange(playerid, newstate, oldstate)
{
    if(IsBeingSpeced[playerid] == 1)
    {
	    if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
	    {
	        foreach (new i : Player)
	        {
	            if(spectatorid[i] == playerid)
	            {
	                PlayerSpectateVehicle(i, GetPlayerVehicleID(playerid));
	            }
	        }
	    }
	    if(newstate == PLAYER_STATE_ONFOOT)
	    {
	        foreach (new i : Player)
	        {
	            if(spectatorid[i] == playerid)
	            {
	                PlayerSpectatePlayer(i, playerid);
	            }
	        }
	    }
    }
    /*if(newstate == PLAYER_STATE_DRIVER) //Targetting system
	{
		new vehicleid = GetPlayerVehicleID(playerid);
     	new VehicleModel = GetVehicleModel(vehicleid);

   		if(VehicleModel == 520 || VehicleModel == 425 || VehicleModel == 447 || VehicleModel == 432) //hydra/hunter/sea sparrow
      	{
        	if(PlayerTargetID[playerid] != -1)
           	{
            	if(IsPlayerStreamedIn(PlayerTargetID[playerid], playerid))
              	{
                	if(PlayerTargetTextCreated[playerid] == true)
                  	{
                     	DeletePlayer3DTextLabel(playerid, PlayerText3D:PlayerTargetText[playerid]);
                   	}
                 	PlayerTargetText[playerid] = CreatePlayer3DTextLabel(playerid, "{FF0000}v\n>  o  <\n^", 0xFFFFFFFF, 0.0, 0.0, 0.0, 100000.0, PlayerTargetID[playerid], INVALID_VEHICLE_ID, 0);
            	}
               	else
           		{
                	if(PlayerTargetTextCreated[playerid] == true)
                 	{
                    	DeletePlayer3DTextLabel(playerid, PlayerText3D:PlayerTargetText[playerid]);
                  	}
               		new Float:px, Float:py, Float:pz;
                  	GetPlayerPos(PlayerTargetID[playerid], px, py, pz);
                  	PlayerTargetText[playerid] = CreatePlayer3DTextLabel(playerid, "{FF0000}v\n>  o  <\n^", 0xFFFFFFFF, px, py, pz, 100000.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0);

                  	if(PlayerTargetUpdatetRunning[playerid] == true)
                	{
                     	KillTimer(PlayerTargetUpdatet[playerid]);
                 	}

                  	PlayerTargetUpdatet[playerid] = SetTimerEx("PlayerTargetUpdate", 202, 1, "i", playerid);
               		PlayerTargetUpdatetRunning[playerid] = true;

              	}
              	PlayerTargetTextCreated[playerid] = true;
          	}
		}
	}

	if(oldstate == PLAYER_STATE_DRIVER) //Targetting system
	{
    	if(PlayerTargetUpdatetRunning[playerid] == true)
      	{
        	KillTimer(PlayerTargetUpdatet[playerid]);
        	PlayerTargetUpdatetRunning[playerid] = false;
     	}

     	if(PlayerTargetTextCreated[playerid] == true)
      	{
       		DeletePlayer3DTextLabel(playerid, PlayerText3D:PlayerTargetText[playerid]);
          	PlayerTargetTextCreated[playerid] = false;
       	}
 	}*/
    if(antifallon[playerid] == 1 || GetPlayerVirtualWorld(playerid) == 19888 || GetPlayerVirtualWorld(playerid) == 19999 && !IsDeathMatcher(playerid))
    {
      if(oldstate == PLAYER_STATE_DRIVER && newstate == PLAYER_STATE_ONFOOT)
      {
          if(InCar[playerid] == 1 && IsABike(WhatCar[playerid]))
          {
            PutPlayerInVehicle(playerid, WhatCar[playerid], Driver);
          }
      }
      if(oldstate == PLAYER_STATE_ONFOOT)
      {
        if(newstate == PLAYER_STATE_DRIVER)
        {
		  new v=GetPlayerVehicleID(playerid);
		  if(IsABike(v))
		  {
	          InCar[playerid] = 1;
	          WhatCar[playerid] = v;
          }
        }
      }
    }
  	if(oldstate == PLAYER_STATE_PASSENGER) SetSyncTime (playerid);
    if(GetPVarInt(playerid, "InDerby") && (oldstate == 2) && (DERBY==2)) SetPlayerHealth(playerid, 0);
    if(oldstate == 2 && GetPVarInt(playerid, "Trucker") == 2) SendInfoText(playerid, 3000, "~r~Mission failed"), EndTMission(playerid);//GameTextForPlayer(playerid, "~r~Mission Failed", 3000, 4), EndTMission(playerid);
	if(newstate == 2)
	{
        if(GetPVarInt(playerid, "Trucker2") == 1)
        {
			   new vehicleid=GetPlayerVehicleID(playerid);
			   for(new ss=0; ss<sizeof(Tanks2); ss++)
			   {
				  if(vehicleid==Tanks2[ss])
				  {
                       SetPVarInt(playerid, "Trucker2", 2);
				   	   for(new g=0; g<sizeof(Tanks2); g++)
					   {
						SetVehicleParamsForPlayer(Tanks2[g], playerid, 0, 0);
						if(!VehicleHasDriver(Tanks2[g])) SetVehicleToRespawn(Tanks2[g]);
					   }
		               SendClientMessage(playerid, 0x317000FF, "{00159E}» Trucking «"DARKBLUE_" Take a trailer from the nearby gas station!");
					   //GameTextForPlayer(playerid, "~g~Take a trailer", 5000, 4);
					   SendInfoText(playerid, 5000, "~g~take a trailer");
					   break;
				  }
			   }
		}
        else if(GetPVarInt(playerid, "Trucker") == 1)
        {

		   	   for(new g=0; g<sizeof(Tanks); g++)
			   {
				SetVehicleParamsForPlayer(Tanks[g], playerid, 0, 0);
				SetVehicleParamsForPlayer(Vans[g], playerid, 0, 0);
				SetVehicleParamsForPlayer(b_Vans[g], playerid, 0, 0);
				if(!VehicleHasDriver(b_Vans[g])) SetVehicleToRespawn(b_Vans[g]);
				if(!VehicleHasDriver(Vans[g])) SetVehicleToRespawn(Vans[g]);
				if(!VehicleHasDriver(Tanks[g])) SetVehicleToRespawn(Tanks[g]);
			   }
			   new za;
			   new vehicleid=GetPlayerVehicleID(playerid);
			   for(new ss=0; ss<sizeof(Tanks); ss++)
			   {
				  if(vehicleid==Tanks[ss]) za=1;
				  else if(vehicleid==Vans[ss]) za=2;
				  else if(vehicleid==b_Vans[ss]) za=3;
			   }
			   switch(PlayerInfo[playerid][DelevryType])
			   {
				   case 0:
				   {
					 if(za == 1)
					 {
						   new m=2+random(5);
		   				   TogglePlayerDynamicCP(playerid, v_Mission_cps[0], false);
		                   Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON , v_Mission_icons[0], E_STREAMER_PLAYER_ID, playerid);

		   				   TogglePlayerDynamicCP(playerid, v_Mission_cps[1], true);
		                   Streamer_AppendArrayData(STREAMER_TYPE_MAP_ICON , v_Mission_icons[1], E_STREAMER_PLAYER_ID, playerid);

		   				   TogglePlayerDynamicCP(playerid, v_Mission_cps[m], true);
		                   Streamer_AppendArrayData(STREAMER_TYPE_MAP_ICON , v_Mission_icons[m], E_STREAMER_PLAYER_ID, playerid);
		   				   SetPVarInt(playerid, "Trucker", 2);
		                   SendClientMessage(playerid, 0x317000FF, "{00159E}» Trucking «"DARKBLUE_" Take the trailer and Deliver it to the marked destination on your minimap!");

						   new Float:pos[3];
						   Streamer_GetFloatData(STREAMER_TYPE_CP , v_Mission_cps[m], E_STREAMER_X, pos[0]);
						   Streamer_GetFloatData(STREAMER_TYPE_CP , v_Mission_cps[m], E_STREAMER_Y, pos[1]);
						   Streamer_GetFloatData(STREAMER_TYPE_CP , v_Mission_cps[m], E_STREAMER_Z, pos[2]);
//						   printf("%f, %f, %f", pos[0], pos[1], pos[2]);
						   new Float:aoo=GetDistanceBetweenPoints(-2.5573, -269.5432, 6.5799, pos[0], pos[1], pos[2]);
                	       PlayerInfo[playerid][DelevryTime]=floatround(aoo/9);
					 }
				   }
				   case 1:
				   {
					 if(za == 2)
					 {
					   new m=8+random(5);

					   TogglePlayerDynamicCP(playerid, v_Mission_cps[m], true);
		               Streamer_AppendArrayData(STREAMER_TYPE_MAP_ICON , v_Mission_icons[m], E_STREAMER_PLAYER_ID, playerid);
					   SetPVarInt(playerid, "Trucker", 2);
		               SendClientMessage(playerid, 0x317000FF, "{00159E}» Trucking «"DARKBLUE_" Deliver the van to the marked destination on your minimap!");
		               SendClientMessage(playerid, 0x317000FF, "{00159E}» Trucking «"DARKBLUE_" Watch out! The load could blow up if it takes any damage!");

					   new Float:pos[3];
					   Streamer_GetFloatData(STREAMER_TYPE_CP , v_Mission_cps[m], E_STREAMER_X, pos[0]);
					   Streamer_GetFloatData(STREAMER_TYPE_CP , v_Mission_cps[m], E_STREAMER_Y, pos[1]);
					   Streamer_GetFloatData(STREAMER_TYPE_CP , v_Mission_cps[m], E_STREAMER_Z, pos[2]);
//					   printf("%f, %f, %f", pos[0], pos[1], pos[2]);
					   new Float:aoo=GetDistanceBetweenPoints(-16.6817, -364.4333, 10.3828, pos[0], pos[1], pos[2]);
            	       PlayerInfo[playerid][DelevryTime]=floatround(aoo/10);

					 }
				   }
				   case 2:
				   {
					 if(za == 3)
					 {
					   new m=14+random(5);

					   TogglePlayerDynamicCP(playerid, v_Mission_cps[m], true);
		               Streamer_AppendArrayData(STREAMER_TYPE_MAP_ICON , v_Mission_icons[m], E_STREAMER_PLAYER_ID, playerid);
					   SetPVarInt(playerid, "Trucker", 2);

		               SendClientMessage(playerid, 0x317000FF, "{00159E}» Trucking «"DARKBLUE_" Deliver the Truck to the marked Clothes shop on your minimap!");

					   new Float:pos[3];
					   Streamer_GetFloatData(STREAMER_TYPE_CP , v_Mission_cps[m], E_STREAMER_X, pos[0]);
					   Streamer_GetFloatData(STREAMER_TYPE_CP , v_Mission_cps[m], E_STREAMER_Y, pos[1]);
					   Streamer_GetFloatData(STREAMER_TYPE_CP , v_Mission_cps[m], E_STREAMER_Z, pos[2]);
//					   printf("%f, %f, %f", pos[0], pos[1], pos[2]);
					   new Float:aoo=GetDistanceBetweenPoints(-36.5231, -225.1329, 3.7153, pos[0], pos[1], pos[2]);
            	       PlayerInfo[playerid][DelevryTime]=floatround(aoo/10);
					 }
				   }
			   }

		}
        if(GetPVarInt(playerid, "GhostMode") && GetPlayerVirtualWorld(playerid) == 0)  LinkVehicleToInterior(GetPlayerVehicleID(playerid), GetPlayerInterior(playerid)+1);

	    new VehicleModel;
	    VehicleModel = GetVehicleModel(GetPlayerVehicleID(playerid));


		SetPlayerArmedWeapon(playerid, 0);
    	if(HideShit[playerid] == 0)
		{
		  PlayerTextDrawSetPreviewModel(playerid, SpeedO[playerid][1], VehicleModel);
    	  new string[50];
    	  format(string, sizeof(string), "%s", vInfo[VehicleModel-400][vName]);
    	  PlayerTextDrawSetString(playerid, SpeedO[playerid][0], string);
    	}
		if(HideShit[playerid] == 0)
		{
		  if(pSpeedo[playerid] != 255) for(new x=0; x<9; x++) PlayerTextDrawShow(playerid, SpeedO[playerid][x]);
		}
		if(VehicleModel  == 430 || VehicleModel == 464 || VehicleModel == 476)
		{
			RemovePlayerFromVehicle(playerid);
			SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Forbidden vehicle.");
		}
	}
	if(oldstate == 2)
	{
        if(GetPVarInt(playerid, "InOutRun")) SetPVarInt(playerid, "ORLoser", true);
	#if defined USEDRIFT
	    if(Iter_Contains(Drifter, playerid))
		{
          if(pDrift[playerid]>0) EndDrift(playerid, 2);
        }
        #endif
	    if(Iter_Contains(InSumo, playerid))
	    {
	     foreach(new i : InSumo)
	     {
		  if(SumoSpec[i] == 1 && SumoSpecID[i]==playerid)
		  {
		   sumoshow(i);
		  }
	     }
	    }
		if(!GetPVarInt(playerid, "RACER") && HideShit[playerid] == 0)
		{
		 ShowScreenTXD(playerid);
		}
		for(new x=0; x<9; x++) PlayerTextDrawHide(playerid, SpeedO[playerid][x]);
		Iter_Remove(pNos, playerid);

//		HideClockSpeedo(playerid);
		new m=GetPVarInt(playerid, "MissionProgress");
        if((PlayerInfo[playerid][Mission] == 1 && m > 2)
        || (PlayerInfo[playerid][Mission] == 5 && (m == 2 || m==4))
        || (PlayerInfo[playerid][Mission] == 6 && m > 1)
        || (PlayerInfo[playerid][Mission] == 7 && (m == 2 || m == 3 || m == 6))
        || (PlayerInfo[playerid][Mission] == 3 && m > 8))
        {
           SendInfoText(playerid, 4000, "~r~Mission Failed");
           DisablePlayerCheckpoint(playerid);
           DeletePVar(playerid, "MissionProgress");
           PlayerTextDrawHide(playerid, pMissionTD[playerid]);

           TogglePlayerAllDynamicRaceCPs(playerid, true);



  		   DeletePVar(playerid, "FirePorgress");
  		   for(new x=0; x<28; x++) DestroyPlayerObject(playerid, MissionObjects[playerid][x]);
  		   if(GetPlayerVirtualWorld(playerid) != 0) SetPlayerVirtualWorldEX(playerid, 0);
           for(new ad=0; ad<sizeof(MissionPickup); ad++) Streamer_RemoveArrayData(STREAMER_TYPE_PICKUP , MissionPickup[ad], E_STREAMER_PLAYER_ID, playerid);
           for(new ad=0; ad<sizeof(MissionCP); ad++) Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[ad], E_STREAMER_PLAYER_ID, playerid), TogglePlayerDynamicCP(playerid, MissionCP[ad], false);

        }

	}
    GetPlayerPos (playerid, AirbPos[playerid][0], AirbPos[playerid][1], AirbPos[playerid][2]);
	return 1;
}



public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
  if((VehicleInfo[vehicleid][Player] >= 0) && (VehicleInfo[vehicleid][Owned] > 0))
  {
    pMods[playerid][17] = paintjobid;
	pMods[playerid][18] = 1;
    pMods[playerid][19] = 1;
    new Query[256];
    format(Query, sizeof(Query), "UPDATE `users` SET `Mod18` = %d, `Mod19` = 1, `Mod20` = 1 WHERE `UserID` = '%d'", pMods[playerid][17], PlayerInfo[playerid][UserID]);
    mysql_query(GTADM, Query);
  }
  if(GetVehicleModel(vehicleid) == 558) GiveMedal(playerid, 55);
  return 1;
}
public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	if(SCar[vehicleid] == 1)
	{
		new query[256];
	    format(query, sizeof(query), "UPDATE `users` SET `Car2Color1`=%d, `Car2Color2`=%d WHERE `UserID` = '%d'", color1, color2, PlayerInfo[playerid][UserID]);
	    mysql_query(GTADM, query);
	    PlayerInfo[playerid][pSecVc1] = color1, PlayerInfo[playerid][pSecVc2] = color2;
	}
	if(VehicleInfo[vehicleid][Owned] == 1 && VehicleInfo[vehicleid][Player] == playerid)
    {
      pMods[playerid][18] = color1;
      pMods[playerid][19] = color2;
      new Query[256];
      format(Query, sizeof(Query), "UPDATE `users` SET `Mod19` = %d , `Mod20` = %d WHERE `UserID` = '%d'", pMods[playerid][18], pMods[playerid][19], PlayerInfo[playerid][UserID]);
      mysql_query(GTADM, Query);
    }
	return 1;
}
public OnVehicleMod(playerid, vehicleid, componentid)
{
	new vehicleide = GetVehicleModel(vehicleid);
	new modok = islegalcarmod(vehicleide, componentid);
	new name[24];
	GetPlayerName(playerid, name, 24);
	if (!modok)
	{
	    if(warned[playerid] == 0)
		{
	        printf("[invalid_mod - WARNING] %s %d %d %d %d %d", name, playerid, vehicleid, vehicleide, componentid);
	        DestroyVehicleEX(vehicleid);
			warned[playerid] = 1;
		}
		else
		{
			DestroyVehicleEX(vehicleid);
			CallLocalFunction( "OnPlayerCleoDetected", "dd", playerid, CLEO_CAR_INVALID_MOD );
		}
		return 0;
	}
	else
	{
  	  if(vehicleid >= 0)
	  {
		 switch(componentid)
		 {
		    case 1008..1010: if(!IsValidNosVehicle(vehicleid)) RemoveVehicleComponent(vehicleid, componentid);
		 }
		 if(componentid != 1010 && !IsComponentidCompatible(GetVehicleModel(vehicleid), componentid)) RemoveVehicleComponent(vehicleid, componentid);
		 if((VehicleInfo[vehicleid][Player] == playerid) && (VehicleInfo[vehicleid][Owned] > 0))
		 {
		   SaveComponent(playerid, vehicleid, componentid);
		   SaveComp(playerid);
		 }
		 if(SCar[vehicleid] == 1)
		 {
			if(iswheelmodel(componentid))
			{
				PlayerInfo[playerid][pSecWheel] =componentid;
				new query[128];
				format(query, sizeof(query), "UPDATE `users` SET `Car2Wheel`=%d WHERE `UserID` = '%d'", componentid, PlayerInfo[playerid][UserID]);
				mysql_query(GTADM, query);
			}
			if(componentid >= 1008 && componentid <= 1010)
			{
				PlayerInfo[playerid][pSecNitro] =1;
				new query[128];
				format(query, sizeof(query), "UPDATE `users` SET `Car2Nitro`=%d WHERE `UserID` = '%d'", componentid, PlayerInfo[playerid][UserID]);
				mysql_query(GTADM, query);

			}
		 }
	  }
	}
    return 1;
}
stock SaveComp(playerid)
{

   new Query[312];
   format(Query, sizeof(Query), "UPDATE `users` SET `Mod1` = %d, `Mod2` = %d, `Mod3` = %d, `Mod4` = %d, `Mod5` = %d, `Mod6` = %d, `Mod7` = %d, `Mod8` = %d, `Mod9` = %d, `Mod10` = %d, `Mod11` = %d, `Mod12` = %d, `Mod13` = %d, `Mod14` = %d, `Mod15` = %d, `Mod16` = %d, `Mod17` = %d, `Mod18` = %d, `Mod19` = %d, `Mod20` = %d WHERE `UserID` = '%d'", pMods[playerid][0]
   , pMods[playerid][1]
   , pMods[playerid][2]
   , pMods[playerid][3]
   , pMods[playerid][4]
   , pMods[playerid][5]
   , pMods[playerid][6]
   , pMods[playerid][7]
   , pMods[playerid][8]
   , pMods[playerid][9]
   , pMods[playerid][10]
   , pMods[playerid][11]
   , pMods[playerid][12]
   , pMods[playerid][13]
   , pMods[playerid][14]
   , pMods[playerid][15]
   , pMods[playerid][16]
   , pMods[playerid][17]
   , pMods[playerid][18]
   , pMods[playerid][19]
   , PlayerInfo[playerid][UserID]);
   mysql_query(GTADM, Query);

}

forward SaveComponent(playerid, vehicleid, componentid);
public SaveComponent(playerid, vehicleid, componentid)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
				for(new s=0; s<20; s++) {
     				if(componentid == spoiler[s][0]) {
       					pMods[playerid][0] = componentid;
   	        		}
				}
				for(new s=0; s<3; s++) {
     				if(componentid == nitro[s][0]) {
       					pMods[playerid][1] = componentid;
   	        		}
				}
				for(new s=0; s<23; s++) {
     				if(componentid == fbumper[s][0]) {
       					pMods[playerid][2] = componentid;
   	        		}
				}
				for(new s=0; s<22; s++) {
     				if(componentid == rbumper[s][0]) {
       					pMods[playerid][3] = componentid;
   	        		}
				}
				for(new s=0; s<28; s++) {
     				if(componentid == exhaust[s][0]) {
       					pMods[playerid][4] = componentid;
   	        		}
				}
				for(new s=0; s<2; s++) {
     				if(componentid == bventr[s][0]) {
       					pMods[playerid][5] = componentid;
   	        		}
				}
				for(new s=0; s<2; s++) {
     				if(componentid == bventl[s][0]) {
       					pMods[playerid][6] = componentid;
   	        		}
				}
				for(new s=0; s<4; s++) {
     				if(componentid == bscoop[s][0]) {
       					pMods[playerid][7] = componentid;
   	        		}
				}
				for(new s=0; s<17; s++) {
     				if(componentid == rscoop[s][0]) {
       					pMods[playerid][8] = componentid;
   	        		}
				}
				for(new s=0; s<21; s++) {
     				if(componentid == lskirt[s][0]) {
       					pMods[playerid][9] = componentid;
   	        		}
				}
				for(new s=0; s<21; s++) {
     				if(componentid == rskirt[s][0]) {
       					pMods[playerid][10] = componentid;
   	        		}
				}
				for(new s=0; s<1; s++) {
     				if(componentid == hydraulics[s][0]) {
       					pMods[playerid][11] = componentid;
   	        		}
				}
				for(new s=0; s<1; s++) {
     				if(componentid == rbase[s][0]) {
       					pMods[playerid][12] = componentid;
   	        		}
				}
				for(new s=0; s<4; s++) {
     				if(componentid == rbbars[s][0]) {
       					pMods[playerid][13] = componentid;
   	        		}
				}
				for(new s=0; s<2; s++) {
     				if(componentid == fbbars[s][0]) {
       					pMods[playerid][14] = componentid;
   	        		}
				}
				for(new s=0; s<17; s++) {
     				if(componentid == wheels[s][0]) {
       					pMods[playerid][15] = componentid;
   	        		}
				}
				for(new s=0; s<2; s++) {
     				if(componentid == lights[s][0]) {
       					pMods[playerid][16] = componentid;
				}
   	        		return 1;
			}
	}
	return 0;
}

CMD:neon(playerid)
{
   if(PlayerInfo[playerid][premiumItems][2] != 1) return SendMsg(playerid, 5);
   new v = GetPlayerVehicleID(playerid);
   if(v != PlayerCar(playerid)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}you must be inside your own vehicle to use this command");
   ShowPlayerDialog(playerid, 15445, DIALOG_STYLE_LIST, "Neon menu", "1. "RED_"Red neon\n2. "BLUE_"Blue neon\n3. "GREEN_"Green neon\n4. "YELLOW_"Yellow neon\n5. "PINK_"Pink neon\n6. "WHITE_"White neon\n"GRAY_"Remove neon", "Buy", "Cancel");
   return 1;
}

public OnVehicleDeath(vehicleid)
{
 if(GetVehicleVirtualWorld(vehicleid) == 65)
 {
   SetPlayerVirtualWorldEX(vehicleid, 0);
 }
 if(VehicleInfo[vehicleid][Owned] > 0 && VehicleInfo[vehicleid][Player] >= 0)
 {
   RemoveCustomMods(vehicleid);
 }
 else CarNitro[vehicleid]=0;
}


public OnVehicleSpawn(vehicleid)
{
  if(vehicleid >= 0)
  {
    if(VehicleInfo[vehicleid][Owned] > 0 && VehicleInfo[vehicleid][Player] >= 0)
    {
       ModVehicle(vehicleid, VehicleInfo[vehicleid][Player]);
       SetVehicleParamsEx(vehicleid, 1, 0, 0, 0, 0, 0, 0);
    }
    if(AdminCar[vehicleid] ==1)
    {
        AdminCar[vehicleid] =0;
        DestroyVehicleEX(vehicleid);
		if(vehicleid == RoNzCar)
		{
		    RoNzCar=-1;
			for(new x=0; x<sizeof(lolRoNz); x++) DestroyObject(lolRoNz[x]), lolRoNz[x]=-1;
		}
    }
    if(SCar[vehicleid] ==1)
    {
        SCar[vehicleid] =0;
        DestroyVehicleEX(vehicleid);
        SOwner[vehicleid] = INVALID_PLAYER_ID;
	}
  }
  return 1;
}
public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{

  new Float:x, Float:y, Float:z;
  GetPlayerPos(playerid, x, y, z);
//  if(IsInFight(playerid)) return SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You cant enter the vehicle during a fight.") && SetPlayerPos(playerid, x, y, z+1);
  if(PlayerInfo[playerid][Mission] == 5 && GetPVarInt(playerid, "MissionProgress") == 1)
  {
	  if(GetVehicleModel(vehicleid) == 575)
	  {
		   TogglePlayerDynamicCP(playerid, MissionCP[23], true);
           Streamer_AppendArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[23], E_STREAMER_PLAYER_ID, playerid);
		   PlayerTextDrawSetStringEX(playerid, pMissionTD[playerid], "- Head to ~r~8ball~w~ and ~y~plant~w~ a bomb in the vehicle");
	  }
  }
  if(SCar[vehicleid] ==1)
  {
	if(SOwner[vehicleid] != playerid)
	{
	  if((!ispassenger))
      {
	   	 new str[128];
         SetPlayerPos(playerid, x, y, z+1);
         format(str, sizeof(str), "~r~This is %s's Car", pName[SOwner[vehicleid]]);
	     SendInfoText(playerid, 2000, str);
         PlayerPlaySound(playerid, 1190, x, y, z);
      }
	}
  }
  if((VehicleInfo[vehicleid][Owned] > 0))
  {
   if(VehicleInfo[vehicleid][Player] != playerid)
   {
	    if(IsPlayerConnected(VehicleInfo[vehicleid][Player]))
	    {
	   	  new str[128];
		  if((!ispassenger))
	      {
	         SetPlayerPos(playerid, x, y, z+1);
	         format(str, sizeof(str), "~r~This is %s's Car", pName[VehicleInfo[vehicleid][Player]]);
		     SendInfoText(playerid, 2000, str);
	         PlayerPlaySound(playerid, 1190, x, y, z);
	      }
	    }
   }
  }
  else if(IsHouseCar[vehicleid] ==57)
  {
	if(HouseCar[vehicleid][Blockcar] && !ispassenger)
	{
	   new block;
	   if(PlayerInfo[playerid][pHouse] < 1) block =1;
	   if(PlayerInfo[playerid][pHouse] != HouseCar[vehicleid][hCarHouse][0]
	   && PlayerInfo[playerid][pHouse] != HouseCar[vehicleid][hCarHouse][1]
	   && PlayerInfo[playerid][pHouse] != HouseCar[vehicleid][hCarHouse][2]
	   && PlayerInfo[playerid][pHouse] != HouseCar[vehicleid][hCarHouse][3]) block =1;
	   if(block ==1 && !IsAdmin(playerid, 6))
	   {
         SetPlayerPos(playerid, x, y, z+1);
	     SendInfoText(playerid, 2000, "~r~This is a private vehicle");
         PlayerPlaySound(playerid, 1190, x, y, z);

	   }
	}
  }
  if(GetPVarInt(playerid, "INDM") != 19)
  {
   if(GetVehicleModel(vehicleid) == 425 )
   {
     if(permit[playerid] == 2 || PlayerInfo[playerid][IsVIP] == 1) return 0;
	 SetPlayerPos(playerid, x, y, z+2);
	 SendInfoText(playerid, 2000, "~r~You Dont Have A Permission, /permit");
	 PlayerPlaySound(playerid, 1190, x, y, z);
   }
   if(GetVehicleModel(vehicleid) == 432)
   {
     if(permit[playerid] == 3 || PlayerInfo[playerid][IsVIP] == 1) return 0;
	 SetPlayerPos(playerid, x, y, z+2);
	 SendInfoText(playerid, 2000, "~r~You Dont Have A Permission, /permit");
	 PlayerPlaySound(playerid, 1190, x, y, z);
   }
   if(GetVehicleModel(vehicleid) == 447)
   {
     if(permit[playerid] == 4 || PlayerInfo[playerid][IsVIP] == 1) return 0;
	 SetPlayerPos(playerid, x, y, z+2);
	 SendInfoText(playerid, 2000, "~r~You Dont Have A Permission, /permit");
	 PlayerPlaySound(playerid, 1190, x, y, z);
   }

   if(GetVehicleModel(vehicleid) == 520)// && !GetPVarInt(playerid, "instunt"))
   {
     if(permit[playerid] == 5 || PlayerInfo[playerid][IsVIP] == 1) return 0;
	 SetPlayerPos(playerid, x, y, z+2);
	 SendInfoText(playerid, 2000, "~r~You Dont Have A Permission, /permit");
	 PlayerPlaySound(playerid, 1190, x, y, z);
   }
  }
  return 1;
}

public OnPlayerText(playerid, text[])
{
    //new text2[1024];
    //format(text2, 1024, "%s", text);
    //text2 = HighlightNamesInString(text2);
   // new text3[1024];
   // format(text3, 1024, "%s", text);
    //text3 = HighlightNamesInString2(text3);
	if(!GetPVarInt(playerid, "cantusecmds"))
	{
	//    WriteLog(playerid, text);
		if(GetPVarInt(playerid, "PMChatting"))
		{
			new cmd[256];
			format(cmd, sizeof(cmd), "%d %s", PMChattingID[playerid], text);
			cmd_pm(playerid, cmd);
			return 0;
		}
		else if(text[0] == '7' && !isNumeric(text))
		{
			text[0]='/';
	        CallLocalFunction("OnPlayerCommandText", "is", playerid, text);
			return 0;
		}
		else
		{

			new O[300];
			format(O, sizeof(O), "%s", text);
		    str_replace(" ", "", O);
	 		if(GetPVarInt(playerid, "TROLLED")) format(text, strlen(text)+1, "%s", reverseString(text));
	 		str_replace("/q", "Imnoob", text, true, 0, -1, strlen(text)+1);
            str_replace("/ q", "Im noob", text, true, 0, -1, strlen(text)+1);
            if(strfind(text, "cheat", true) != -1)
            {
              SendWarning(playerid, "Please use /report to report rulebreakers!");
              return 0;
            }
            if(strfind(text, "aimbot", true) != -1)
            {
              SendWarning(playerid, "Please use /report to report rulebreakers!");
              return 0;
            }
            if(strfind(text, "mb0t", true) != -1)
            {
              SendWarning(playerid, "Please use /report to report rulebreakers!");
              return 0;
            }
            if(strfind(text, "mbot", true) != -1)
            {
              SendWarning(playerid, "Please use /report to report rulebreakers!");
              return 0;
            }
            if(strfind(text, "aim", true) != -1)
            {
              SendWarning(playerid, "Please use /report to report rulebreakers!");
              return 0;
            }
            if(strfind(text, "@im", true) != -1)
            {
              SendWarning(playerid, "Please use /report to report rulebreakers!");
              return 0;
            }
            if(strfind(text, "@1m", true) != -1)
            {
              SendWarning(playerid, "Please use /report to report rulebreakers!");
              return 0;
            }
            if(strfind(text, "a1m", true) != -1)
            {
              SendWarning(playerid, "Please use /report to report rulebreakers!");
              return 0;
            }
            if(strfind(text, "ack", true) != -1)
            {
              SendWarning(playerid, "Please use /report to report rulebreakers!");
              return 0;
            }
		    new string[1024];
		    if(PlayerInfo[playerid][Muted] < 1)
		    {
			  if(strlen(O) > 0)
			  {
				if(GetPVarString(playerid, "LastMsg", string, 128))//, string))
				{
				  if(!strcmp(string, O, false))
				  {
				    SetPVarInt(playerid, "Spam", GetPVarInt(playerid, "Spam")+1);
				    if  ((GetPVarInt(playerid, "Spam") == 1)
				       ||(GetPVarInt(playerid, "Spam") == 2)) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Dont repeat yourself.");
				    else if(GetPVarInt(playerid, "Spam") == 3)
				    {
			           MutePlayer(playerid, 120, -255, "spam");
			           DeletePVar(playerid, "Spam");
			  	    }
				  }
			    }
			  }
		    }
			else DeletePVar(playerid, "Spam");

		    if(GetPVarInt(playerid, "AFK"))
		    {
			   SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant chat in AFK Mode type (/back) then try again");
		    }
		    else if(ChatLocked == 1)
		    {
			   SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}The chat has been locked by an Administrator");
		    }
		    else if(PlayerInfo[playerid][Muted] > 0)
		    {
			   format(string, sizeof(string), ""RED_"» Error « {BABABA}You are on the STFU list, you have to wait more %d seconds to chat again", PlayerInfo[playerid][Muted]);
			   SendClientMessage(playerid, RED, string);
			   return 0;
		    }
			else
			{
				new adtest[180];
				format(adtest, sizeof(adtest), "%s", text);
				if(stringContainsIP(adtest))
				{
	              MutePlayer(playerid, 250, -255, "Advertising");
				}
				else
				{
			        Paused[playerid] = 0;
					SetPVarString(playerid, "LastMsg", O);
			    /*	if(rTest == 1)
			        {
			       	 if(!strcmp(rTestStr, text, false))
			       	 {
						 rTestWinner(playerid);
			         }
			        }*/
					if(CapsLockCheck(text) && strcmp(rTestStr, text)) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Turn off your caps lock!");

			    	else if((GetPVarInt(playerid, "GangChatting") || text[0] == '!') &&(PlayerInfo[playerid][pGang] >= 0))
			    	{
					  new string2[256];
					  new gang=PlayerInfo[playerid][pGang];
				      if(!GetPVarInt(playerid, "GangChatting")) strdel(text, 0, 1);
			     	  format(string, sizeof(string), "» Gang Chat « {%06x}%s {9C9C9C}[%d] "LIGHTBLUE_"%s", (GetPlayerColor(playerid) >>> 8), pName[playerid], playerid, text);
			     	  format(string2, sizeof(string2), "» Gang Chat « \"%s\" (%s) [%d] %s", GangInfo[gang][Name], pName[playerid], playerid, text);

			     	  foreach (new i : Player)
                      {
						new dontallow;
					    if(PlayerInfo[i][pGang] == PlayerInfo[playerid][pGang])
						{
						   for(new x=0; x<5; x++)
						   {
							 if(Blocked[i][x] == playerid)
							 {
							   dontallow=1;
							 }
						   }
						   if(dontallow == 0) SendClientMessageEX(i, LIGHTBLUE, string);
						}
					  }
			     	  foreach (new i : Player) if(IsAdmin(i, 4) && PlayerInfo[i][readgchat] == 1 && i!= playerid && a_Level(i) >= a_Level(playerid))  SendClientMessageEX(i, GRAY, string2);
                      new str2[256];
                      format(str2, sizeof(str2), "-GangChat- \"%s\" (%s) [%d] %s", GangInfo[gang][Name], pName[playerid], playerid, text);
           	          printf("%s", str2);
			        }
			        else if(text[0] == '?' && OnPhone[playerid] == 1)
			        {
				      strdel(text, 0, 1);
			     	  format(string, sizeof(string), "{814EED}« Phone Call » {C04EED}%s", text);
			     	  new msg[128];
			     	  format(msg, sizeof(msg), "http://translate.google.com/translate_tts?tl=en&q=%s", text);
                      PlayAudioStreamForPlayer(playerid, msg);
                      PlayAudioStreamForPlayer(CallID[playerid], msg);
			     	  SendClientMessageEX(CallID[playerid], -1, string);
			     	  SendClientMessageEX(playerid, -1, string);
    	   	          //SendPMessageToAll(i, string, -1);
			        }
			        else if((GetPVarInt(playerid, "AdminChatting") || text[0] == '#') &&(IsAdmin(playerid, 1)))
			        {
			     	  if(!GetPVarInt(playerid, "AdminChatting")) strdel(text, 0, 1);

			     	  format(string, sizeof(string), "» Admin Chat « {%06x}%s {9C9C9C}[%d] {1AFF00}%s", (GetPlayerColor(playerid) >>> 8), pName[playerid], playerid, text);
			     	  foreach (new i : Player) if(IsAdmin(i, 1)) SendClientMessageEX(i, 0x1AFF00FF, string);
                      new str22[256];
                      format(str22, sizeof(str22), "-AdminChat- %s: %s", pName[playerid], text);
           	          printf("%s", str22);
			     	  #if defined useirc
			     	  IRC_OnAdminText(playerid, text);//
			     	  ///SendPMessageToAll(i, string, -1);
			     	  #endif
			          return 0;
			        }
					else if((GetPVarInt(playerid, "Level5+Chatting") || text[0] == '$') &&(IsAdmin(playerid, 5) && PlayerInfo[playerid][UserID] != 153569))
			        {
			     	  if(!GetPVarInt(playerid, "Level5+Chatting")) strdel(text, 0, 1);

			     	  format(string, sizeof(string), "» Level 5+ chat « {%06x}%s {9C9C9C}[%d] "VIO_"%s", (GetPlayerColor(playerid) >>> 8), pName[playerid], playerid, text);
			     	  foreach (new i : Player) if(IsAdmin(i, 5) || PlayerInfo[i][UserID] == 153569) SendClientMessageEX(i, COLOR_DARKVIOLET, string);
                      new str12[256];
                      format(str12, sizeof(str12), "-Level5+Chat- %s [%d] %s", pName[playerid], playerid, text);
                      printf("%s", str12);
			     	 // SendPMessageToAll(i, string, -1);
			     	  #if defined useirc
			     	 // IRC_OnLvl5Text(playerid, text);///irc
			     	  #endif
			     	  return 0;
			        }
                    else if((GetPVarInt(playerid, "DoDChatting") || text[0] == '~') && (IsDoDMember(playerid)))
			        {
			     	  if(!GetPVarInt(playerid, "DoDChatting")) strdel(text, 0, 1);

			     	  format(string, sizeof(string), "» DoD Chat « {%06x}%s {9C9C9C}[%d] "DB_"%s", (GetPlayerColor(playerid) >>> 8), pName[playerid], playerid, text);
			     	  foreach (new i : Player) if(IsDoDMember(i)) SendClientMessageEX(i, BLUE, string);

			     	  printf("-DoDChat- %s [%d] %s", pName[playerid], playerid, text);
			          return 0;
			        }
			        else if((GetPVarInt(playerid, "RconChatting") || text[0] == '@') && IsAdmin(playerid, 10))
			        {
					  if(!GetPVarInt(playerid, "RconChatting")) strdel(text, 0, 1);
					  format(string, sizeof(string), "» RCON Chat « {%06x}%s {9C9C9C}[%d] "ORANGE_"%s", (GetPlayerColor(playerid) >>> 8), pName[playerid], playerid, text);
					  foreach (new i : Player) if(IsAdmin(i, 10)) SendClientMessageEX(i, ORANGE, string);
                      new str22[256];
                      format(str22, sizeof(str22), "-RCONChat- %s [%d] %s", pName[playerid], playerid, text);
                      printf("%s", str22);
					  #if defined useirc
					//  IRC_OnRconText(playerid, text);//irc
					  #endif
					  return 0;
			        }
 		            else if((GetPVarInt(playerid, "SecretChatting") || text[0] == '^') && (PlayerInfo[playerid][UserID] == 12879 || PlayerInfo[playerid][UserID] == 153569))
					{
  	                  if(!GetPVarInt(playerid, "SecretChatting")) strdel(text, 0, 1);
                      format(string, sizeof(string), "{F4BBFF}» Secret chat « {%06x}%s {9C9C9C}[%d] {D19FE8}%s", (GetPlayerColor(playerid) >>> 8), pName[playerid], playerid, text);
			     	  foreach (new i : Player) if(PlayerInfo[i][UserID] == 12879 || PlayerInfo[i][UserID] == 153569) SendClientMessageEX(i, COLOR_SECRET, string);
			     	  return 0;
			     	}
			        else if((GetPVarInt(playerid, "VehicleChatting") || text[0] == '+') && (IsPlayerInAnyVehicle(playerid)))
			        {

			     	  if(!GetPVarInt(playerid, "VehicleChatting")) strdel(text, 0, 1);
			     	  format(string, sizeof(string), "» Vehicle Chat « {%06x}%s {9C9C9C}[%d] {00C4A0}%s", (GetPlayerColor(playerid) >>> 8), pName[playerid], playerid, text);
			     	  new v = GetPlayerVehicleID(playerid);
			     	  foreach (new i : Player)
			          {
					     if(IsPlayerInVehicle(i, v)) SendClientMessageEX(i, GREENBLUE, string);
			     	     format(string, sizeof(string), "» Vehicle Chat « (%s) [%d] %s", pName[playerid], playerid, text);
                         if(!IsPlayerInVehicle(i, v) && IsAdmin(i, 4) && PlayerInfo[i][readvchat] == 1 && i!= playerid && a_Level(i) >= a_Level(playerid))  SendClientMessageEX(i, GRAY, string);
                         new str22[256];
                         format(str22, sizeof(str22), "-VehicleChat- %s [%d] %s", pName[playerid], playerid, text);
           	             printf("%s", str22);
					  }
			        }
			        else
			        {
					  if(strlen(O) < 1) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant send an empty message!");
					  else
					  {
	                      if((strfind(text, "jonny", true) != -1))
	                      {
	                         SendMessageToBot(playerid, text);
	                      }
						  if(rTest == 1)
			              {
			       	        if(!strcmp(rTestStr, text, false))
			       	        {
						      rTestWinner(playerid);
			                }
			              }

	                      #if defined useirc
			              IRC_OnPlayerText(playerid, text);//irc
	                      #endif
                          if(ClanTag[playerid] != 12 && strfind(pName[playerid], "[DoD]", false) != -1)
	                      {
							new newname[50], nstr[50];
							format(newname, sizeof(newname), "%s", pName[playerid]);
							switch(ClanTag[playerid])
							{
							   case 0:format(nstr, sizeof(nstr), "{FFDF5E}[DoD]{%06x}", (GetPlayerColor(playerid) >>> 8), (GetPlayerColor(playerid) >>> 8));
							   case 1:format(nstr, sizeof(nstr), "{%06x}[DoD]{%06x}", (ColorLighen(GetPlayerColor(playerid), 0.2) >>> 8), (GetPlayerColor(playerid) >>> 8));
							   case 2:format(nstr, sizeof(nstr), "{%06x}[DoD]{%06x}", (ColorDarken(GetPlayerColor(playerid), 0.2) >>> 8), (GetPlayerColor(playerid) >>> 8));
							   case 3:format(nstr, sizeof(nstr), "{FF9500}[DoD]{%06x}", (GetPlayerColor(playerid) >>> 8), (GetPlayerColor(playerid) >>> 8));
							   case 4:format(nstr, sizeof(nstr), "{FC4C4C}[DoD]{%06x}", (GetPlayerColor(playerid) >>> 8), (GetPlayerColor(playerid) >>> 8));
							   case 5:format(nstr, sizeof(nstr), "{4C8FFC}[DoD]{%06x}", (GetPlayerColor(playerid) >>> 8), (GetPlayerColor(playerid) >>> 8));
							   case 6:format(nstr, sizeof(nstr), "{FFFB00}[DoD]{%06x}", (GetPlayerColor(playerid) >>> 8), (GetPlayerColor(playerid) >>> 8));
							   case 7:format(nstr, sizeof(nstr), "{CCFF00}[DoD]{%06x}", (GetPlayerColor(playerid) >>> 8), (GetPlayerColor(playerid) >>> 8));
							   case 8:format(nstr, sizeof(nstr), "{00AB06}[DoD]{%06x}", (GetPlayerColor(playerid) >>> 8), (GetPlayerColor(playerid) >>> 8));
							   case 9:format(nstr, sizeof(nstr), "{8A8A8A}[DoD]{%06x}", (GetPlayerColor(playerid) >>> 8), (GetPlayerColor(playerid) >>> 8));
							   case 10:format(nstr, sizeof(nstr), "{B700FF}[DoD]{%06x}", (GetPlayerColor(playerid) >>> 8), (GetPlayerColor(playerid) >>> 8));
							   case 11:format(nstr, sizeof(nstr), "{FF00BF}[DoD]{%06x}", (GetPlayerColor(playerid) >>> 8), (GetPlayerColor(playerid) >>> 8));
							}
							str_replace("[DoD]", nstr, newname);
	 			            format(string, sizeof(string), "{9C9C9C}» {%06x}%s {9C9C9C}[%d] "WHITE_"%s", (GetPlayerColor(playerid) >>> 8), newname, playerid, text);
	                      }
	                      else if(ClanTag[playerid] != 12 && strfind(pName[playerid], "]DoD[", false) != -1)
	                      {
							new newname[50], nstr[50];
							format(newname, sizeof(newname), "%s", pName[playerid]);
							switch(ClanTag[playerid])
							{
							   case 0:format(nstr, sizeof(nstr), "{FFDF5E}]DoD[{%06x}", (GetPlayerColor(playerid) >>> 8), (GetPlayerColor(playerid) >>> 8));
							   case 1:format(nstr, sizeof(nstr), "{%06x}]DoD[{%06x}", (ColorLighen(GetPlayerColor(playerid), 0.2) >>> 8), (GetPlayerColor(playerid) >>> 8));
							   case 2:format(nstr, sizeof(nstr), "{%06x}]DoD[{%06x}", (ColorDarken(GetPlayerColor(playerid), 0.2) >>> 8), (GetPlayerColor(playerid) >>> 8));
							   case 3:format(nstr, sizeof(nstr), "{FF9500}]DoD[{%06x}", (GetPlayerColor(playerid) >>> 8), (GetPlayerColor(playerid) >>> 8));
							   case 4:format(nstr, sizeof(nstr), "{FC4C4C}]DoD[{%06x}", (GetPlayerColor(playerid) >>> 8), (GetPlayerColor(playerid) >>> 8));
							   case 5:format(nstr, sizeof(nstr), "{4C8FFC}]DoD[{%06x}", (GetPlayerColor(playerid) >>> 8), (GetPlayerColor(playerid) >>> 8));
							   case 6:format(nstr, sizeof(nstr), "{FFFB00}]DoD[{%06x}", (GetPlayerColor(playerid) >>> 8), (GetPlayerColor(playerid) >>> 8));
							   case 7:format(nstr, sizeof(nstr), "{CCFF00}]DoD[{%06x}", (GetPlayerColor(playerid) >>> 8), (GetPlayerColor(playerid) >>> 8));
							   case 8:format(nstr, sizeof(nstr), "{00AB06}]DoD[{%06x}", (GetPlayerColor(playerid) >>> 8), (GetPlayerColor(playerid) >>> 8));
							   case 9:format(nstr, sizeof(nstr), "{8A8A8A}]DoD[{%06x}", (GetPlayerColor(playerid) >>> 8), (GetPlayerColor(playerid) >>> 8));
							   case 10:format(nstr, sizeof(nstr), "{B700FF}]DoD[{%06x}", (GetPlayerColor(playerid) >>> 8), (GetPlayerColor(playerid) >>> 8));
							   case 11:format(nstr, sizeof(nstr), "{FF00BF}]DoD[{%06x}", (GetPlayerColor(playerid) >>> 8), (GetPlayerColor(playerid) >>> 8));
							}
							str_replace("]DoD[", nstr, newname);
							format(string, sizeof(string), "{9C9C9C}» {%06x}%s {9C9C9C}[%d] "WHITE_"%s", (GetPlayerColor(playerid) >>> 8), newname, playerid, text);
							new str33[256];
						    format(str33, sizeof(str33), "-MainChat- %s [%d] %s", pName[playerid], playerid, text);
						    printf("%s", str33);
	                      }
	                     /* if(IsAdmin(playerid, 1) && !GetPVarInt(playerid, "Hidden") && !GetPVarInt(playerid, "HideMeBitch"))
						  {
						    format(string, sizeof(string), "{9C9C9C}» {%06x}%s {9C9C9C}[%d] {A8DBFF} %s", (GetPlayerColor(playerid) >>> 8), pName[playerid], playerid, text);
					      }*/
						  else format(string, sizeof(string), "{9C9C9C}» {%06x}%s {9C9C9C}[%d] "WHITE_"%s", (GetPlayerColor(playerid) >>> 8), pName[playerid], playerid, text);
				          if(!GetPVarInt(playerid, "CS")) SetPlayerChatBubble(playerid, text, WHITE, 100.0, 5000);
				          SendPMessageToAll(playerid, string, -1);
						  new str3[256];
						  format(str3, sizeof(str3), "-MainChat- %s [%d] %s", pName[playerid], playerid, text);
						  printf("%s", str3);
				          if(EventStarted == 1 && EventType == 400)
						  {
						    if(strfind(text, EventAnswer, true) != -1) EventWinner(playerid);
						  }

			          }
			        }
				}
			}
		}
	}
	return 0;
}
stock SendNpcBubble(msg[])
{
   foreach(new i : NPC)
   {
	  if(!strcmp(pName[i], "Jonny"))
	  {
        SetPlayerChatBubble(i, msg, YELLOW, 100.0, 5000);
        SendBotMessage(msg);
      }
   }
}
stock SendBotMessage(msg[])
{
	new str[256];
   // format(str, sizeof(str), "{9C9C9C}» {FFDF5E}[DoD]{FF9EEC}Jonny {9C9C9C}[%d]: {FFFFFF}%s", NpcID(), msg);
    format(str, sizeof(str), "{9C9C9C}» {FF9EEC}Jonny {9C9C9C}[%d] {FFFFFF}%s", NpcID(), msg);
    SendClientMessageToAllEX(-1, str, 140);
	new str2[256];
	format(str2, sizeof(str2), "-MainChat- Jonny [%d] %s", NpcID(), msg);
    printf("%s", str2);
    //format(str, sizeof(str), "{FFDF5E}[DoD]{FF9EEC}Jonny {9C9C9C}[%d]: {FFFFFF}%s", NpcID(), msg);
    format(str, sizeof(str), "{FF9EEC}Jonny {9C9C9C}[%d] {FFFFFF}%s", NpcID(), msg);//{A8DBFF}
    #if defined useirc
    IRC_OnJonnyText(msg);//irc
    #endif
}

public OnPlayerEditAttachedObject( playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ )
{
	 SetPlayerAttachedObject(playerid, index, modelid, boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);
	 if(response == EDIT_RESPONSE_FINAL || EDIT_RESPONSE_CANCEL)
	 {
		  if(GetPVarInt(playerid, "Clothes_Selection"))
		  {
		    SetCameraBehindPlayer(playerid);
		    SetPlayerPos(playerid, 217.4618, -98.8051, 1006.2578);
		    SetPlayerVirtualWorldEX(playerid, 0);
		  }
		  DeletePVar(playerid, "Clothes_Selection");
		  DeletePVar(playerid, "Buying_Clothes");
		  TogglePlayerControllable2(playerid, true);
		  if(index == 1)
 		  {
    		  format(PlayerClothes[playerid][GlassString], 200, "%d, %f, %f, %f, %f, %f, %f, %f, %f, %f", modelid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);
  			  new str[512];
		      format(str, sizeof(str), "UPDATE `users` SET `GlassesString` = '%s' WHERE `UserID` = '%d'", PlayerClothes[playerid][GlassString], PlayerInfo[playerid][UserID]);
	    	  mysql_query(GTADM, str);
		  }
		  else if(index == 2)
		  {
    		  format(PlayerClothes[playerid][HatString], 200, "%d, %f, %f, %f, %f, %f, %f, %f, %f, %f", modelid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);
			  new str[512];
		      format(str, sizeof(str), "UPDATE `users` SET `CapsString` = '%s' WHERE `UserID` = '%d'", PlayerClothes[playerid][HatString], PlayerInfo[playerid][UserID]);
	    	  mysql_query(GTADM, str);
		  }
	 }
	 return 1;
}
public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	new Float:oldX, Float:oldY, Float:oldZ,
		Float:oldRotX, Float:oldRotY, Float:oldRotZ;
	GetDynamicObjectPos(objectid, oldX, oldY, oldZ);
	GetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
	MoveDynamicObject(objectid, x, y, z, 10.0, rx, ry, rz);

	if(response == EDIT_RESPONSE_FINAL)
	{
		SetDynamicObjectPos(objectid, x, y, z);
		SetDynamicObjectRot(objectid, rx, ry, rz);
		for(new xa=0; xa<MAX_SAMS; xa++)
		{
			 if(objectid == SAMS[xa][Obj])
			 {
			   SAMS[xa][SamPos][0]=x;
			   SAMS[xa][SamPos][1]=y;
			   SAMS[xa][SamPos][2]=z;
			   SAMS[xa][SamPos][3]=rz;

			   new INI:File2 = INI_Open(SamPath(xa));
			   INI_SetTag(File2, "samdata");
			   INI_WriteFloat(File2, "sX", x);
			   INI_WriteFloat(File2, "sY", y);
			   INI_WriteFloat(File2, "sZ", z);
			   INI_WriteFloat(File2, "sA", rz);
			   INI_Close(File2);

			   break;
			 }
			 else if(objectid == SAMS[xa][kObj])
			 {
			   SAMS[xa][SamkPos][0] = x;
			   SAMS[xa][SamkPos][1] = y;
			   SAMS[xa][SamkPos][2] = z;
			   SAMS[xa][SamkPos][3] = rz;

			   new INI:File2 = INI_Open(SamPath(xa));
			   INI_SetTag(File2, "samdata");
			   INI_WriteFloat(File2, "kX", x);
			   INI_WriteFloat(File2, "kY", y);
			   INI_WriteFloat(File2, "kZ", z);
			   INI_WriteFloat(File2, "kA", rz);
			   INI_Close(File2);
			   break;
			 }
		}
	}

	if(response == EDIT_RESPONSE_CANCEL)
	{
		SetDynamicObjectPos(objectid, oldX, oldY, oldZ);
		SetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
	}
	return 1;

}



public OnPlayerEditObject(playerid, playerobject, objectid, response, Float:fX, Float:fY, Float:fZ, Float:fRotX, Float:fRotY, Float:fRotZ)
{
	new Float:oldX, Float:oldY, Float:oldZ,
		Float:oldRotX, Float:oldRotY, Float:oldRotZ;
	GetObjectPos(objectid, oldX, oldY, oldZ);
	GetObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
	if(!playerobject) // If this is a global object, move it for other players
	{
	    if(!IsValidObject(objectid)) return 1;
	    MoveObject(objectid, fX, fY, fZ, 10.0, fRotX, fRotY, fRotZ);
	}

	if(response == EDIT_RESPONSE_FINAL)
	{
			SetObjectPos(objectid, fX, fY, fZ);
			SetObjectRot(objectid, fRotX, fRotY, fRotZ);
	}

	if(response == EDIT_RESPONSE_CANCEL)
	{
		//The player cancelled, so put the object back to it's old position
		if(!playerobject) //Object is not a playerobject
		{
			SetObjectPos(objectid, oldX, oldY, oldZ);
			SetObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
		}
		else
		{
			SetPlayerObjectPos(playerid, objectid, oldX, oldY, oldZ);
			SetPlayerObjectRot(playerid, objectid, oldRotX, oldRotY, oldRotZ);
		}
	}
	return 1;
}
stock LeaveTurf(playerid)
{
	new z=GetPlayerGangZone(playerid);
    new g=PlayerInfo[playerid][pGang], str[128];
	if(g >= 0 && IsPlayerConnected(playerid) && Spawned[playerid] == 1 && GetPlayerState(playerid) != 7 && IsSpecing[playerid] == 0 && !GetPVarInt(playerid, "RACER"))
	{
	  if(inGw[g] && z != GwTurf[g])
	  {
	     pInGW[playerid]=0;
	     format(str, sizeof(str), "{AA8202}» Gang action «{FFC307} %s has left the turf! Your gang has lost 1 point.", pName[playerid]);
		 if(GetPVarInt(playerid, "RACER")) for(new x=0; x<26; x++) PlayerTextDrawHide(playerid, GwTD[playerid][x]);
         GwKills[g]--;
		 foreach(new i : Player) if(PlayerInfo[i][pGang]==g) SendClientMessage(i, ORANGE, str);
	  }
	}
}
public OnPlayerLeaveDynamicArea(playerid, areaid)
{
/*	if(GetPVarInt(playerid, "In_Tile"))
	{
	  if(areaid == Tile_Area)
	  {
		 SendClientMessage(playerid, -1, "Game Over");
		 SetPlayerVirtualWorldEX(playerid, 0);
		 LoadPlayerCoords(playerid);
	  }
//	    Tile_Area=CreateDynamicCube(2377.3750, 790.7266, 139.5891 , 2637.6563, 1103.0000, 150.5891);
//    Tile_Win=CreateDynamicCube(2505.8208, 1039.0090, 141.6188, 2509.0313, 1042.2007, 141.6188);

	}
	if(areaid == ff_area)
	{
	  SendClientMessage(playerid, -1, "You left");
	}*/
  	if(FallOut > 1)
  	{
      if(areaid == falloutarea)
      {
	          if(Iter_Contains(FalloutPlayers, playerid) && GetPVarInt(playerid, "inFallout"))
	          {
					SendInfoText(playerid, 2500, pFellOffText[random( sizeof( pFellOffText ) )]);
		            RemoveFromFallout(playerid, 0);
			  }
			  if( Iter_Count(FalloutPlayers) < 2 )
			  {
		        FallOut=0;
				foreach(new player : FalloutPlayers)
				{
				  EndMinigame();
				  if(GetPVarInt(player, "inFallout"))
				  {
				    PlayerInfo[player][PfOutW]++;
					new str[256];
				   	format( str, sizeof( str ), ""fOUT2_"» Fallout « "fOUT_"%s has won the Fallout minigame", pName[player]);
					SendClientMessageToAll( fOUT, str );
				 	GivePlayerMoneyEX( player, 10000 );
				    DeletePVar(player, "inFallout");
				    DeletePVar(player, "falloutplace");
				    DeletePVar(player, "typedfallout");
				    SetPlayerCameraPos(player, 113.3811, 66.5014, 571.3477);
				    SetPlayerCameraLookAt(player, 113.3948, 67.4999, 570.6075);

					SendInfoText(player, 2500, "~g~Winner~n~~w~10000$");
					ScoreTDupdate(player, 3);
					SetTimerEx( "f_RespawnPlayer", 2000, 0, "i", player );

				    if(PlayerInfo[player][PfOutW] == 50) GiveMedal(player, 32);

				  	new Query[256];
				    format(Query, sizeof(Query), "UPDATE `users` SET `FalloutWins` = %d WHERE `Name` = '%s'", PlayerInfo[player][PfOutW], pName[player]);
				    mysql_query(GTADM, Query);
				    if(EventType == 4 && EventStarted ==1) EventWinner(player);

				  }
				  break;
				}
				Iter_Clear(FalloutPlayers);
			  }
      }
  	}

	if(InCanon[playerid] == 1 && !IsPlayerInRangeOfPoint(playerid, 10.0, -61.7874, 2503.0874, 16.2115))
	{
		if(areaid == lecanonarea[2])
		{
			 InCanon[playerid]=2;
			 SendInfoText(playerid, 5000, "~r~Failed");
			 ShowMenuForPlayer(CanonMenu, playerid);
			 TogglePlayerControllable2(playerid, 0);
		}
	}
    if(areaid == JailArea)
    {
    	for( new w=0; w < 13; w++ ) if((IsvalidWeapon(pWeapons[playerid][w]) == 1)) GivePlayerWeaponEX( playerid, pWeapons[playerid][w], pAmmo[playerid][w] );
    }

	for(new g=0; g< MAX_GATES; g++)
	{
		if(areaid == GateInfo[g][g_range])
		{
		   if(GateInfo[g][IsOpened] == 1)
		   {
	  	     new c=0;
		     foreach (new i : Player)
		     {
		       if(IsPlayerInDynamicArea(i, GateInfo[g][g_range]))
		       {
			  	if(i != playerid) c++;
		       }
		     }
		     if(c==0)
		     {
		        GateInfo[g][IsOpened] = 0;
		        MoveDynamicObject(GateInfo[g][ObjectID], GateInfo[g][gPos][0], GateInfo[g][gPos][1], GateInfo[g][gPos][2], GateInfo[g][gSpeed], GateInfo[g][gPos][3], GateInfo[g][gPos][4], GateInfo[g][gPos][5]);
			    if(IsValidDynamicObject(GateInfo[g][gKeypad3]))
			    {
				  if(GateInfo[g][HideObj] == 1) SetDynamicObjectPos(GateInfo[g][gKeypad3], -100.0, -100.0, -100.0);
				  else MoveDynamicObject(GateInfo[g][gKeypad3], GateInfo[g][ok3][0], GateInfo[g][ok3][1], GateInfo[g][ok3][2], GateInfo[g][gSpeed], GateInfo[g][ok3][3], GateInfo[g][ok3][4], GateInfo[g][ok3][5]);
                  Streamer_Update(playerid);
			    }
			 }
		   }
		   break;
		}

	}
	return 1;
}
forward HideInfo(playerid);
public HideInfo(playerid)
{
	for(new x=0; x<8; x++) PlayerTextDrawHide(playerid, PropTD[playerid][x]);
	return 1;
}

public OnPlayerEnterDynamicArea(playerid, areaid)
{
  if(!IsPlayerNPC(playerid))
  {
	if(pInGW[playerid])
	{
	  LeaveTurf(playerid);
	}
	for(new d=0; d<20; d++)
	{
		 if(areaid == SpeedRecordArea[d])
		 {
			if(GetPlayerState(playerid) == 2)
			{
			  new KMH = GetPlayerSpeed(playerid, 0);
			  if(KMH > 80 && KMH > SpeedRecords[d] && GetTickCount() - TickCount[playerid][SpeedTK] > 5000)
			  {
			   if(!GetPVarInt(playerid, "RACER"))
			   {
				  new str[256];
			  	  TickCount[playerid][SpeedTK]=GetTickCount();
				  format(str, sizeof(str), "{98E01B}» Speed record «{0DFF00} %s has set a new speed record of {98E01B}%d km/h {0DFF00}in \"%s\"!", pName[playerid], KMH, SpeedRecordNames[d]);
				  SendClientMessageToAll(-1, str);
				  SpeedRecords[d]=KMH;
				  new Float:x, Float:y, Float:z;
				  GetPlayerCameraPos(playerid, x, y, z), SetPlayerCameraPos(playerid, x, y, z+10);
				  GetPlayerPos(playerid, x, y, z), SetPlayerCameraLookAt(playerid, x, y, z);
				  SetTimerEx("SetBackToNormalCam", 3000, false, "i", playerid);
				  format(str, sizeof(str), "~y~Speed Record~n~~g~%d KM/H", KMH);
				  SendInfoText(playerid, 4000, str);
				  PlayerInfo[playerid][pSpeedR]++;
				  format(str, sizeof(str), "UPDATE `users` SET `pSpeedR` = %d WHERE UserID = '%d'", PlayerInfo[playerid][pSpeedR], PlayerInfo[playerid][UserID]);
				  mysql_query(GTADM, str);
				  if(PlayerInfo[playerid][pSpeedR] >= 15) GiveMedal(playerid, 77);
				  ScoreTDupdate(playerid, 2);
				  GivePlayerMoneyEX(playerid, 15000);
			   }
			  }
			}
		 }
	}
    if(InCanon[playerid] == 1)
	{
	  if(areaid == lecanonarea[0])
	  {
		new speed, v=GetPlayerVehicleID(playerid),
		Float:a, Float:b, Float:c;
		speed=GetPlayerSpeed(playerid, 0);
		GetVehicleVelocity(v, a, b, c);
		switch(speed)
		{
			 case 0..20: SetVehicleVelocity(v, 1.4, b, c);
			 case 21..30: SetVehicleVelocity(v, 1.5, b, c);
			 case 31..40: SetVehicleVelocity(v, 1.6, b, c);
			 case 41..50: SetVehicleVelocity(v, 1.7, b, c);
			 default:SetVehicleVelocity(v, 1.8, b, c);
		}
	  }
	  else if(areaid == lecanonarea[1])
	  {
         new str[64], Float: fDistance = GetPlayerDistanceFromPoint(playerid, -22.3058, 2502.3088, 15.9330);
		 format(str, 64, "~r~Distance:~y~ %f", fDistance);
		 SendInfoText(playerid, 5000, str);


		 PlayerTextDrawHide(playerid, pInfoTD[playerid]);
         if(fDistance >= 220) GiveMedal(playerid, 63);

		 new Float:x, Float:y, Float:z;
		 GetPlayerCameraPos(playerid, x, y, z);
		 InterpolateCameraPos(playerid, x, y, z, -22.3058, 2502.3088, 35.9330, 5000, CAMERA_MOVE);
         InCanon[playerid]=2;
		 ShowMenuForPlayer(CanonMenu, playerid);
		 TogglePlayerControllable2(playerid, 0);
		 new c;
		 for(new d=0; d<5; d++)
		 {
    		 if(fDistance >CanonRecordDistance[d])
    		 {
			   c++;
    		 }
		 }
		 if(c > 0)
		 {
			new p= 6-c;
			new str2[256];
			format(str2, sizeof(str2), "{4A9EC2}» Cannon «{294FC2} %s has set a new record in the Cannon Challenge {4A9EC2}#%d, Distance: %f", pName[playerid], p, fDistance);
			SendClientMessageToAll(0xF2EE05FF, str2);
			format(CanonRecordPlayers[p-1], 50, "%s", pName[playerid]);
			CanonRecordDistance[p-1]=fDistance;
	       // GivePP(playerid, 1);

		    format(str2, sizeof(str2), "UPDATE `lecanonrecords` SET `Player%d` = '%s', `Dis%d` = '%f' WHERE `Row` = 0", p, pEscName[playerid], p, fDistance);
		    mysql_query(GTADM, str2);
		 }
	  }
	}
	if(areaid == BankArea[0] || areaid == BankArea[1] || areaid == BankArea[2] || areaid == JailArea && Spawned[playerid] == 1)
	{
		PlayerTextDrawSetStringEX(playerid, PropTD[playerid][5], "_~n~_~n~_");
		PlayerTextDrawSetStringEX(playerid, PropTD[playerid][7], "~r~info");
    	PlayerTextDrawSetPreviewModel(playerid, PropTD[playerid][6], 1239);
		if(areaid == JailArea )
		{
		  for( new w=0; w < 13; w++ ) GetPlayerWeaponData( playerid, w, pWeapons[playerid][w], pAmmo[playerid][w] );
		  ResetPlayerWeaponsEX(playerid);
		  PlayerTextDrawSetStringEX(playerid, PropTD[playerid][0], "~r~You are not allowed to DM~n~ in the Jail!");
		}
		else PlayerTextDrawSetStringEX(playerid, PropTD[playerid][0], "~r~You are not allowed to DM~n~ in the Bank!");

		PlayerTextDrawShow(playerid, PropTD[playerid][0]);
		PlayerTextDrawShow(playerid, PropTD[playerid][7]);
		PlayerTextDrawShow(playerid, PropTD[playerid][5]);
		PlayerTextDrawShow(playerid, PropTD[playerid][6]);

		SetTimerEx("HideInfo", 8000, false, "i", playerid);
		new Float:h;
		GetPlayerHealth(playerid, h);
		SetPVarFloat(playerid, "bHealth", h);
		GetPlayerArmour(playerid, h);
		SetPVarFloat(playerid, "bArmour", h);
	}

	for(new g=0; g< MAX_GATES; g++)
	{
		if(areaid == GateInfo[g][g_range])
		{
		   if(GateInfo[g][IsOpened] == 0)
		   {
		      GateInfo[g][IsOpened] = 1;
		      MoveDynamicObject(GateInfo[g][ObjectID], GateInfo[g][gmovedPos][0], GateInfo[g][gmovedPos][1], GateInfo[g][gmovedPos][2], 2.00, GateInfo[g][gmovedPos][3], GateInfo[g][gmovedPos][4], GateInfo[g][gmovedPos][5]);
			  if(IsValidDynamicObject(GateInfo[g][gKeypad3]))
			  {
				  if(GateInfo[g][HideObj] == 1) SetDynamicObjectPos(GateInfo[g][gKeypad3], -100.0, -100.0, -100.0);
		          else MoveDynamicObject(GateInfo[g][gKeypad3], GateInfo[g][k3][0], GateInfo[g][k3][1], GateInfo[g][k3][2], GateInfo[g][gSpeed], GateInfo[g][k3][3], GateInfo[g][k3][4], GateInfo[g][k3][5]);
                  Streamer_Update(playerid);
			  }
		   }
		   break;
		}
	}
  }
  return 1;
}

forward SpamUpdate();
public SpamUpdate()
{
	 foreach(new i : Player)
	 {
  	   if (PlayerInfo [i][pCommands]) PlayerInfo [i][pCommands]--;
	 }
	 return 1;
}
stock SamsUpdate(playerid)
{
   if(IsPlayerConnected(playerid) && g_IsPaused[playerid] != true && !GetPVarInt(playerid, "AFK") && (Spawned[playerid] ==1) && GetPlayerState(playerid) != 7 )
   {
	for(new k=0; k<MAX_SAMS; k++)
	{
	 if(IsPlayerInRangeOfPoint(playerid, SAMS[k][SDist], SAMS[k][SamPos][0], SAMS[k][SamPos][1], SAMS[k][SamPos][2]))
	 {
       if(IsValidDynamicObject(SAMS[k][Obj]) && SAMS[k][Work] > 0 && SAMS[k][MissleFired] == 0)
	   {
		  if(SAMS[k][isKiller] == 0 && !IsAPlane(GetPlayerVehicleID(playerid))) continue;
		  else if(IsHouseInSamRange(PlayerInfo[playerid][pHouse], k)) continue;
		  FireSam(k, playerid);
		  break;
	   }
	 }
	}
   }
   return 1;
}

forward HideAreaTD(d);
public HideAreaTD(d)
{
  PlayerTextDrawHide(d, Location[d][0]);
  PlayerTextDrawHide(d, Location[d][1]);
  return 1;
}


stock FireSam(i, playerid)
{
  if(IsSpecing[playerid] == 0)
  {
	  SAMS[i][MissleFired] = 1;
	  new Float:x, Float:y, Float:z;
	  GetPlayerPos(playerid, x, y, z);
	  if(IsValidDynamicObject(SAMS[i][SamMissle])) DestroyDynamicObject(SAMS[i][SamMissle]);
	  SAMS[i][SamMissle] = CreateDynamicObject(345, SAMS[i][SamPos][0], SAMS[i][SamPos][1], SAMS[i][SamPos][2], 0, 0, SetObjectFacePlayer(Float:x, Float:y, SAMS[i][SamPos][0], SAMS[i][SamPos][1]));
	  MoveDynamicObject(SAMS[i][SamMissle], x, y, z, 80.0);
	  SendInfoText(playerid, 2000, "~r~Missile is coming!");
	  KillTimer(SAMS[i][TimerCheck]);
	  SAMS[i][TimerCheck] = SetTimerEx("MissleCheck", 500, true, "ii", playerid, i);
	  SetTimerEx("BugPrevent", 10000, false, "i", i);
  }
  return 1;
}
stock IsHouseInSamRange(houseid, sam)
{
	if(houseid < 0 || houseid > MAX_HOUSES) return 0;
	else if(IsPointInRangeOfPoint(hInfo[houseid][ExteriorX], hInfo[houseid][ExteriorY], hInfo[houseid][ExteriorZ], SAMS[sam][SamPos][0], SAMS[sam][SamPos][1], SAMS[sam][SamPos][2], SAMS[sam][SDist])) return 1;
	return 0;
}
stock IsPointInRangeOfPoint(Float:x, Float:y, Float:z, Float:x2, Float:y2, Float:z2, Float:range)
{
    x2 -= x;
    y2 -= y;
    z2 -= z;
    return ((x2 * x2) + (y2 * y2) + (z2 * z2)) < (range * range);
}
forward MissleCheck(playerid, sam);
public MissleCheck(playerid, sam)
{
  if((sam < MAX_SAMS) && playerid != INVALID_PLAYER_ID)
  {
	new Float:pos[3];
	GetDynamicObjectPos(SAMS[sam][SamMissle], pos[0], pos[1], pos[2]);
    SendInfoText(playerid, 2000, "~r~Missile is coming!");
    PlayerPlaySound(playerid, 1137, 0, 0, 0);
    if(!IsPlayerInRangeOfPoint(playerid, SAMS[sam][SDist], SAMS[sam][SamPos][0], SAMS[sam][SamPos][1], SAMS[sam][SamPos][2]))
	{
	    KillTimer(SAMS[sam][TimerCheck]), SAMS[sam][TimerCheck]=-1;
		if(IsValidDynamicObject(SAMS[sam][SamMissle])) DestroyDynamicObject(SAMS[sam][SamMissle]);
		SAMS[sam][SamMissle]=INVALID_OBJECT_ID;
		SAMS[sam][MissleFired] = 0;
	}
	else if(IsPlayerInRangeOfPoint(playerid, 5.00, pos[0], pos[1], pos[2]))
	{
        KillTimer(SAMS[sam][TimerCheck]), SAMS[sam][TimerCheck]=-1;
	    CreateExplosion(pos[0], pos[1], pos[2], 2, 5.00);
		if(IsValidDynamicObject(SAMS[sam][SamMissle])) DestroyDynamicObject(SAMS[sam][SamMissle]);
		SAMS[sam][SamMissle]=INVALID_OBJECT_ID;
		if(GetSamInRange(playerid) == sam && GetPlayerState(playerid) !=7)
		{
			 SetTimerEx("ReloadSam", 1000, false, "ii", sam, playerid);
		}

	}
	else
	{
	  new Float:ppos[3];
	  GetPlayerPos(playerid, ppos[0], ppos[1], ppos[2]);
	  MoveDynamicObject(SAMS[sam][SamMissle], ppos[0], ppos[1], ppos[2], 55.0);
	}
  }
  return 1;
}


forward BugPrevent(sam);
public BugPrevent(sam)
{
  if(sam < MAX_SAMS)
  {
	    KillTimer(SAMS[sam][TimerCheck]), SAMS[sam][TimerCheck]=-1;
		if(IsValidDynamicObject(SAMS[sam][SamMissle])) DestroyDynamicObject(SAMS[sam][SamMissle]);
		SAMS[sam][SamMissle]=INVALID_OBJECT_ID;
		SAMS[sam][MissleFired] = 0;
  }
}
forward ReloadSam(sam, playerid);
public ReloadSam(sam, playerid)
{
    SAMS[sam][MissleFired] = 0;
    return 1;
}

stock ShowGangZones(playerid)
{
    for(new i = 0; i != sizeof(gSAZones); i++ )
    {
       if(IsValidGangZone(i))
       {
            if((ZoneOwner[i] >= 0) && (GangInfo[ZoneOwner[i]][gMembers] > 0)) GangZoneShowForPlayer(playerid, GangZoneid[i], PlayerColors[GangInfo[ZoneOwner[i]][gColor]]);
	        else GangZoneShowForPlayer(playerid, GangZoneid[i], 0xFFFFFF30);
       }
    }
	return 1;
}

stock GetSamInRange(playerid)
{
	  for(new k=0; k<MAX_SAMS; k++)
	  {
	      if(IsPlayerInRangeOfPoint(playerid, SAMS[k][SDist], SAMS[k][SamPos][0], SAMS[k][SamPos][1], SAMS[k][SamPos][2]))
		  return k;
	  }
	  return -255;
}
stock RemoveCustomMods(vehicleid)
{
		  if(IsValidDynamicObject(v_TuneObject[vehicleid][Fbumps])) DestroyDynamicObject(v_TuneObject[vehicleid][Fbumps]);
		  if(IsValidDynamicObject(v_TuneObject[vehicleid][SS][0])) DestroyDynamicObject(v_TuneObject[vehicleid][SS][0]);
		  if(IsValidDynamicObject(v_TuneObject[vehicleid][SS][1])) DestroyDynamicObject(v_TuneObject[vehicleid][SS][1]);
		  if(IsValidDynamicObject(v_TuneObject[vehicleid][Rbumps])) DestroyDynamicObject(v_TuneObject[vehicleid][Rbumps]);
		  if(IsValidDynamicObject(v_TuneObject[vehicleid][Hood])) DestroyDynamicObject(v_TuneObject[vehicleid][Hood]);
		  if(IsValidDynamicObject(v_TuneObject[vehicleid][Spoiler])) DestroyDynamicObject(v_TuneObject[vehicleid][Spoiler]);
		  if(IsValidDynamicObject(v_TuneObject[vehicleid][Ex][0])) DestroyDynamicObject(v_TuneObject[vehicleid][Ex][0]);
		  if(IsValidDynamicObject(v_TuneObject[vehicleid][Ex][1])) DestroyDynamicObject(v_TuneObject[vehicleid][Ex][1]);
		  if(IsValidDynamicObject(v_TuneObject[vehicleid][Wheel][0])) DestroyDynamicObject(v_TuneObject[vehicleid][Wheel][0]);
		  if(IsValidDynamicObject(v_TuneObject[vehicleid][Wheel][1])) DestroyDynamicObject(v_TuneObject[vehicleid][Wheel][1]);
		  if(IsValidDynamicObject(v_TuneObject[vehicleid][Wheel][2])) DestroyDynamicObject(v_TuneObject[vehicleid][Wheel][2]);
		  if(IsValidDynamicObject(v_TuneObject[vehicleid][Wheel][3])) DestroyDynamicObject(v_TuneObject[vehicleid][Wheel][3]);
          RemoveNeons(vehicleid);
          v_HasTune[vehicleid][Fbumps]=-1;
          v_HasTune[vehicleid][Rbumps]=-1;
          v_HasTune[vehicleid][Hood]=-1;
          v_HasTune[vehicleid][SS]=-1;
          v_HasTune[vehicleid][Spoiler]=-1;
          v_HasTune[vehicleid][Ex]=-1;
          v_HasTune[vehicleid][Wheel]=-1;
          v_TuneObject[vehicleid][Fbumps]=INVALID_OBJECT_ID;
          v_TuneObject[vehicleid][SS][0]=INVALID_OBJECT_ID;
          v_TuneObject[vehicleid][SS][1]=INVALID_OBJECT_ID;
          v_TuneObject[vehicleid][Rbumps]=INVALID_OBJECT_ID;
          v_TuneObject[vehicleid][Hood]=INVALID_OBJECT_ID;
          v_TuneObject[vehicleid][Spoiler]=INVALID_OBJECT_ID;
          v_TuneObject[vehicleid][Ex][0]=INVALID_OBJECT_ID;
          v_TuneObject[vehicleid][Ex][1]=INVALID_OBJECT_ID;
          v_TuneObject[vehicleid][Wheel][0]=INVALID_OBJECT_ID;
          v_TuneObject[vehicleid][Wheel][1]=INVALID_OBJECT_ID;
          v_TuneObject[vehicleid][Wheel][2]=INVALID_OBJECT_ID;
          v_TuneObject[vehicleid][Wheel][3]=INVALID_OBJECT_ID;
}
stock DestroyVehicleEX(vehicleid)
{
  if(IsValidVehicle(vehicleid))
  {
	RemoveCustomMods(vehicleid);
	DestroyVehicle(vehicleid);
  }
}
stock AddCustomMods(v, i)
{
    Streamer_Update(i);
    SetVehicleNumberPlate(v, Player_Info[i][numplate]);
    RemoveCustomMods(v);
    if(NEON[i] > 0) AttachNeons( v, NEON[i] );
    if(GetVehicleModel(v) == 402)
    {
    	if(Player_Info[i][Wheel] > 0)
    	{
			v_TuneObject[v][Wheel][0] = CreateDynamicObject(1075, 0, 0, -1000, 0, 0, 0);
			AttachDynamicObjectToVehicle(v_TuneObject[v][Wheel][0], v, 1.109999, 1.505000, -0.449999, 0.000000, 0.000000, 0.000000);

			v_TuneObject[v][Wheel][1] = CreateDynamicObject(1075, 0, 0, -1000, 0, 0, 0);
			AttachDynamicObjectToVehicle(v_TuneObject[v][Wheel][1], v, 1.109999, -1.549999, -0.449999, 0.000000, 0.000000, 0.000000);

			v_TuneObject[v][Wheel][2] = CreateDynamicObject(1075, 0, 0, -1000, 0, 0, 0);
			AttachDynamicObjectToVehicle(v_TuneObject[v][Wheel][2], v, -1.114999, -1.549999, -0.449999, 0.000000, 0.000000, -179.999893);

			v_TuneObject[v][Wheel][3] = CreateDynamicObject(1075, 0, 0, -1000, 0, 0, 0);
			AttachDynamicObjectToVehicle(v_TuneObject[v][Wheel][3], v, -1.119999, 1.500001, -0.449999, 0.000000, 0.000000, -179.999893);
    	}
    	if(Player_Info[i][Ex] > 0)
    	{
			v_TuneObject[v][Ex][0] = CreateDynamicObject(1104, 0, 0, -1000, 0, 0, 0);
			AttachDynamicObjectToVehicle(v_TuneObject[v][Ex][0], v, -0.470000, -1.895000, -0.670000, 0.000000, 0.000000, 0.000000);

			v_TuneObject[v][Ex][1] = CreateDynamicObject(1104, 0, 0, -1000, 0, 0, 0);
			AttachDynamicObjectToVehicle(v_TuneObject[v][Ex][1], v, 0.449999, -1.895000, -0.670000, 0.000000, 0.000000, 0.000000);

    	}
    	if(Player_Info[i][Fbumps] > 0)
    	{
			v_TuneObject[v][Fbumps] = CreateDynamicObject(1166, 0, 0, -1000, 0, 0, 0);
			AttachDynamicObjectToVehicle(v_TuneObject[v][Fbumps], v, 1.049999, 1.949999, -0.245000, 0.000000, 0.000000, 0.000000);
            SetTuningMaterial(v, v_TuneObject[v][Fbumps], Player_Info[i][Fbumps]);
    	}
    	if(Player_Info[i][SS] > 0)
    	{
			v_TuneObject[v][SS][0] = CreateDynamicObject(1141, 0, 0, -1000, 0, 0, 0);
			AttachDynamicObjectToVehicle(v_TuneObject[v][SS][0], v, 0.305000, 1.039999, -0.984999, -9.719999, -179.639907, 89.820121);

			v_TuneObject[v][SS][1] = CreateDynamicObject(1141, 0, 0, -1000, 0, 0, 0);
			AttachDynamicObjectToVehicle(v_TuneObject[v][SS][1], v, -0.399999, -1.144999, -1.114999, -379.440917, -540.180786, -90.179885);

			SetTuningMaterial(v, v_TuneObject[v][SS][0], Player_Info[i][SS]);
			SetTuningMaterial(v, v_TuneObject[v][SS][1], Player_Info[i][SS]);
    	}
    	if(Player_Info[i][Rbumps] > 0)
    	{
			v_TuneObject[v][Rbumps] = CreateDynamicObject(1148, 0, 0, -1000, 0, 0, 0);
			AttachDynamicObjectToVehicle(v_TuneObject[v][Rbumps], v, 1.045000, -1.965001, -0.274999, 0.000000, 0.000000, 0.000000);
			SetTuningMaterial(v, v_TuneObject[v][Rbumps], Player_Info[i][Rbumps]);
    	}
    }
    else if(GetVehicleModel(v) == 411)
    {
    	if(Player_Info[i][Spoiler] > 0)
    	{
              v_TuneObject[v][Spoiler]= CreateDynamicObject(1163, 0, 0, -1000, 0, 0, 0);
              SetTuningMaterial(v, v_TuneObject[v][Spoiler], Player_Info[i][Spoiler]);
              AttachDynamicObjectToVehicle(v_TuneObject[v][Spoiler], v, -0.019998, -2.235001, 0.370000, 0.000000, 0.000000, 0.000000);
    	}
    	if(Player_Info[i][Ex] > 0)
    	{
    		  v_TuneObject[v][Ex][0]= CreateDynamicObject(1114, 0, 0, -1000, 0, 0, 0);
    		  AttachDynamicObjectToVehicle(v_TuneObject[v][Ex][0], v, -0.480000, -1.525000, -0.560000, 0.000000, 0.000000, 0.000000);

    		  v_TuneObject[v][Ex][1] = CreateDynamicObject(1114, 0, 0, -1000, 0, 0, 0);
    		  AttachDynamicObjectToVehicle(v_TuneObject[v][Ex][1], v, 0.534999, -1.525000, -0.560000, 0.000000, 0.000000, 0.000000);
    	}
    	if(Player_Info[i][Fbumps] > 0)
    	{
              v_TuneObject[v][Fbumps]=CreateDynamicObject(1166, 0, 0, -1000, 0, 0, 0);
              SetTuningMaterial(v, v_TuneObject[v][Fbumps], Player_Info[i][Fbumps]);
              AttachDynamicObjectToVehicle(v_TuneObject[v][Fbumps], v, 1.030001, 2.065000, -0.075000, 0.000000, 0.000000, 0.000000);
    	}
    	if(Player_Info[i][SS] > 0)
    	{
    	      v_TuneObject[v][SS][0]= CreateDynamicObject(1026, 0, 0, -1000, 0, 0, 0);
              v_TuneObject[v][SS][1]= CreateDynamicObject(1026, 0, 0, -1000, 0, 0, 0);
              SetTuningMaterial(v, v_TuneObject[v][SS][0], Player_Info[i][SS]);
              SetTuningMaterial(v, v_TuneObject[v][SS][1], Player_Info[i][SS]);
              AttachDynamicObjectToVehicle(v_TuneObject[v][SS][0], v, -1.049999, -0.824999, -0.524999, 0.000000, 0.000000, 0.000000);

              AttachDynamicObjectToVehicle(v_TuneObject[v][SS][1], v, 0.974999, -0.974999, -0.524999, -0.000001, 202.499862, -2.700000);

    	}
    	if(Player_Info[i][Rbumps] > 0)
    	{
              v_TuneObject[v][Rbumps]=CreateDynamicObject(1141, 0, 0, -1000, 0, 0, 0);
              SetTuningMaterial(v, v_TuneObject[v][Rbumps], Player_Info[i][Rbumps]);
              AttachDynamicObjectToVehicle(v_TuneObject[v][Rbumps], v, -1.034997, -1.810001, -0.154999, 0.000000, 0.000000, 0.000000);
    	}
    	if(Player_Info[i][Hood] > 0)
    	{
              v_TuneObject[v][Hood]=CreateDynamicObject(1111, 0, 0, -1000, 0, 0, 0);
              AttachDynamicObjectToVehicle(v_TuneObject[v][Hood], v, 0.004999, 2.455000, 0.019999, 0.000000, 0.000000, 0.000000);
    	}
    }
    Streamer_Update(i);
}

stock SetTuningMaterial(v, objectid, color)
{
  for(new o=0; o<6; o++)
  {
    if(IsValidDynamicObject(objectid))
    {
 	  switch(color)
	  {
		  case 1: SetObjectMaterialEx(objectid, o, 18646, "none", "none", CarColHex[0]), ChangeVehicleColor(v, 0, 0);//black
		  case 2: SetObjectMaterialEx(objectid, o, 18646, "none", "none", CarColHex[16]), ChangeVehicleColor(v, 16, 16);//green
		  case 3: SetObjectMaterialEx(objectid, o, 18646, "none", "none", CarColHex[6]), ChangeVehicleColor(v, 6, 6);//yellow
		  case 4: SetObjectMaterialEx(objectid, o, 18646, "none", "none", CarColHex[2]), ChangeVehicleColor(v, 2, 2);//lblue
		  case 5: SetObjectMaterialEx(objectid, o, 18646, "none", "none", CarColHex[3]), ChangeVehicleColor(v, 3, 3);//red
		  case 6: SetObjectMaterialEx(objectid, o, 18646, "none", "none", CarColHex[126]), ChangeVehicleColor(v, 126, 126);//pink
		  case 7: SetObjectMaterialEx(objectid, o, 18646 , "none", "none", CarColHex[1]), ChangeVehicleColor(v, 1, 1); //white
		  case 8: SetObjectMaterialEx(objectid, o, 18646, "none", "none", CarColHex[79]), ChangeVehicleColor(v, 79, 79);//blue
	  }
    }
  }
}

stock starttictac(pplayer1, pplayer2)
{
	CreateTikTD(pplayer1);
	CreateTikTD(pplayer2);

	for(new x=0; x<9; x++) ticbox[pplayer1][x]=0, ticbox[pplayer2][x]=0;
	TogglePlayerControllable2(pplayer1, 0);
	TogglePlayerControllable2(pplayer2, 0);
    TickOP[pplayer1]=pplayer2;
    TickOP[pplayer2]=pplayer1;
    TickType[pplayer1]=1;
    TickType[pplayer2]=2;
    for(new x=0; x<17; x++)
    {
		 PlayerTextDrawShow(pplayer1, TickTD[pplayer1][x]);
		 PlayerTextDrawShow(pplayer2, TickTD[pplayer2][x]);
		 if(x >=6 && x <= 14)
		 {
		     PlayerTextDrawSetString(pplayer1, TickTD[pplayer1][x], "_");
		     PlayerTextDrawSetString(pplayer2, TickTD[pplayer2][x], "_");
		 }
    }
    PlayerTextDrawSetString(pplayer1, TickTD[pplayer1][15], "~g~Your Turn");
    PlayerTextDrawSetString(pplayer2, TickTD[pplayer2][15], "~p~Opponent's Turn");
    PlayerTextDrawSetString(pplayer2, TickTD[pplayer2][16], "Round I~n~~n~0:0");
    PlayerTextDrawSetString(pplayer1, TickTD[pplayer1][16], "Round I~n~~n~0:0");

    TickTurn[pplayer2]=0;
    TickTurn[pplayer1]=1;
    SelectTextDraw(pplayer1, 0xFFFFFFFF);
    SelectTextDraw(pplayer2, 0xFFFFFFFF);

    TickRound[pplayer1]=0;
    TickRound[pplayer2]=0;
	TickWon[pplayer1]=0;
	TickWon[pplayer2]=0;

}
stock tickbox(playerid, boxid)
{
	  TickTurn[playerid]=0;
	  TickTurn[TickOP[playerid]]=1;
      PlayerTextDrawSetString(TickOP[playerid], TickTD[playerid][15], "~g~Your Turn");
      PlayerTextDrawSetString(playerid, TickTD[playerid][15], "~p~Opponent's Turn");
	  new m=TickType[playerid];
	  if(m == 1)
	  {
	      PlayerTextDrawSetString(playerid, TickTD[playerid][boxid+6], "~y~X"), PlayerTextDrawSetString(TickOP[playerid], TickTD[playerid][boxid+6], "~y~X");
	      ticbox[playerid][boxid]=1;
		  ticbox[TickOP[playerid]][boxid]=1;
          PlayerPlaySound(playerid, 1101, 0, 0, 0);
	      PlayerPlaySound(TickOP[playerid], 1101, 0, 0, 0);
	  }
	  else
	  {
	       PlayerTextDrawSetString(playerid, TickTD[playerid][boxid+6], "~y~O"), PlayerTextDrawSetString(TickOP[playerid], TickTD[playerid][boxid+6], "~y~O");
	       ticbox[playerid][boxid]=2;
		   ticbox[TickOP[playerid]][boxid]=2;
           PlayerPlaySound(playerid, 1101, 0, 0, 0);
	       PlayerPlaySound(TickOP[playerid], 1101, 0, 0, 0);
      }
      if( (ticbox[playerid][0] == m && ticbox[playerid][1] == m && ticbox[playerid][2] == m)
      ||  (ticbox[playerid][3] == m && ticbox[playerid][4] == m && ticbox[playerid][5] == m)
      ||  (ticbox[playerid][6] == m && ticbox[playerid][7] == m && ticbox[playerid][8] == m)
      ||  (ticbox[playerid][0] == m && ticbox[playerid][4] == m && ticbox[playerid][8] == m)
      ||  (ticbox[playerid][2] == m && ticbox[playerid][4] == m && ticbox[playerid][6] == m)
      ||  (ticbox[playerid][0] == m && ticbox[playerid][3] == m && ticbox[playerid][6] == m)
      ||  (ticbox[playerid][1] == m && ticbox[playerid][4] == m && ticbox[playerid][7] == m)
      ||  (ticbox[playerid][2] == m && ticbox[playerid][5] == m && ticbox[playerid][8] == m))
      {
        TickTurn[playerid]=0;
		TickTurn[TickOP[playerid]]=0;
		SendClientMessage(playerid, -1, "You Won");
		SendClientMessage(TickOP[playerid], -1, "You Lost");
		TickRound[playerid]++;
    	TickRound[TickOP[playerid]]++;
		TickWon[playerid]++;
        SetTimerEx("nexttic", 3000, false, "dd", playerid, TickOP[playerid]);
        PlayerPlaySound(playerid, 31205, 0, 0, 0);
        PlayerPlaySound(TickOP[playerid], 31202, 0, 0, 0);
      }
      else
	  {
		  new a;
		  for(new x=0; x<9; x++) if( ticbox[playerid][x] > 0) a++;
		  if(a >= 9)
		  {
	        TickTurn[playerid]=0;
			TickTurn[TickOP[playerid]]=0;
			TickRound[playerid]++;
	    	TickRound[TickOP[playerid]]++;
            SetTimerEx("nexttic", 3000, false, "dd", playerid, TickOP[playerid]);
			SendClientMessage(playerid, -1, "Draw");
			SendClientMessage(TickOP[playerid], -1, "Draw");
		  }
	  }
	  new str[50];
	  if(TickRound[playerid] == 1) format(str, sizeof(str), "Round I~n~~n~%d:%d", TickWon[playerid], TickWon[TickOP[playerid]]);
	  else if(TickRound[playerid] == 2) format(str, sizeof(str), "Round II~n~~n~%d:%d", TickWon[playerid], TickWon[TickOP[playerid]]);
	  else format(str, sizeof(str), "Round III~n~~n~%d:%d", TickWon[playerid], TickWon[TickOP[playerid]]);
	  PlayerTextDrawSetString(playerid, TickTD[playerid][16], str );
}
forward nexttic(pplayer1, pplayer2);
public nexttic(pplayer1, pplayer2)
{
	 if(TickRound[pplayer1] >= 3)
	 {
		 TogglePlayerControllable2(pplayer1, 1);
		 TogglePlayerControllable2(pplayer2, 1);
	 	 for(new x=0; x<17; x++)
		 {
			 PlayerTextDrawHide(pplayer1, TickTD[pplayer1][x]);
			 PlayerTextDrawHide(pplayer2, TickTD[pplayer2][x]);
		 }
		 TickTurn[pplayer1]=0;
		 TickTurn[pplayer2]=0;
		 DeletePVar(pplayer1, "InTic");
		 DeletePVar(pplayer2, "InTic");
		 CancelSelectTextDraw(pplayer1);
		 CancelSelectTextDraw(pplayer2);
		 if(TickWon[pplayer1] > TickWon[pplayer2])
		 {
		    new str[144];
			format(str, sizeof(str), "{A62CF2}» TTT «{492CF2} %s has beaten %s in the Tic-Tac-Toe game!", pName[pplayer1], pName[pplayer2]);
			SendClientMessageToAll(-1, str);
			GivePlayerMoneyEX(pplayer1, 10000);
			GivePlayerMoneyEX(pplayer2, -1*10000);
			ScoreTDupdate(pplayer1, 1);
            PlayerInfo[pplayer1][TTTWins]++;
            new Query[256];
            format(Query, sizeof(Query), "UPDATE `users` SET `TTTWins` = %d WHERE `UserID` = '%d'", PlayerInfo[pplayer1][TTTWins], PlayerInfo[pplayer1][UserID]);
            mysql_query(GTADM, Query);
            if(PlayerInfo[pplayer1][TTTWins] >= 20) GiveMedal(pplayer1, 90);

		 }
		 else if(TickWon[pplayer2] > TickWon[pplayer1])
		 {
		    new str[144];
			format(str, sizeof(str), "{A62CF2}» TTT «{492CF2} %s has beaten %s in the Tic-Tac-Toe game!", pName[pplayer2], pName[pplayer1]);
			SendClientMessageToAll(-1, str);
			GivePlayerMoneyEX(pplayer2, 10000);
			GivePlayerMoneyEX(pplayer1, -1*10000);
			ScoreTDupdate(pplayer2, 1);
			PlayerInfo[pplayer2][TTTWins]++;
            new Query[256];
            format(Query, sizeof(Query), "UPDATE `users` SET `TTTWins` = %d WHERE `UserID` = '%d'", PlayerInfo[pplayer2][TTTWins], PlayerInfo[pplayer2][UserID]);
            mysql_query(GTADM, Query);
            if(PlayerInfo[pplayer2][TTTWins] >= 20) GiveMedal(pplayer2, 90);

		 }
	 }
	 else
	 {
		for(new x=0; x<9; x++) ticbox[pplayer1][x]=0, ticbox[pplayer2][x]=0;
		TogglePlayerControllable2(pplayer1, 0);
		TogglePlayerControllable2(pplayer2, 0);
	    TickOP[pplayer1]=pplayer2;
	    TickOP[pplayer2]=pplayer1;
	    TickType[pplayer1]=1;
	    TickType[pplayer2]=2;
	    for(new x=0; x<17; x++)
	    {
			 PlayerTextDrawShow(pplayer1, TickTD[pplayer1][x]);
			 PlayerTextDrawShow(pplayer2, TickTD[pplayer2][x]);
			 if(x >=6 && x <= 14)
			 {
			     PlayerTextDrawSetString(pplayer1, TickTD[pplayer1][x], "_");
			     PlayerTextDrawSetString(pplayer2, TickTD[pplayer2][x], "_");
			 }
	    }
	    PlayerTextDrawSetString(pplayer1, TickTD[pplayer1][15], "~g~Your Turn");
	    PlayerTextDrawSetString(pplayer2, TickTD[pplayer2][15], "~p~Opponent's Turn");

	    TickTurn[pplayer2]=0;
	    TickTurn[pplayer1]=1;
	    SelectTextDraw(pplayer1, 0xFFFFFFFF);
	    SelectTextDraw(pplayer2, 0xFFFFFFFF);
	 }
}

public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
  if(_:playertextid != INVALID_TEXT_DRAW)
  {
	if(GetPVarInt(playerid, "gInfoStating"))
	{
     if(pganggo[playerid]==PlayerInfo[playerid][pGang] && pganggo[playerid]>0 && PlayerInfo[playerid][pGangRank] >= 3)
     {
		for(new x=0; x<30; x++)
		{
		  if(playertextid ==pGwTD2[playerid][x])
		  {
            ShowPlayerDialog(playerid, 10125, DIALOG_STYLE_LIST, PlayerGangShow[playerid][x], "Set Rank\nKick", "<< Go", "Back >>"), pganggo2[playerid]=x;
		    for(new i=0; i<30; i++) PlayerTextDrawDestroy(playerid, pGwTD2[playerid][i]);
		    for(new i=0; i<7; i++) PlayerTextDrawDestroy(playerid, pGwTD1[playerid][i]);
			DeletePVar(playerid, "gInfoStating");
            CancelSelectTextDraw(playerid);
			break;
		  }
		}
     }
	}

  //Garage TextDraw Click
	new c=GetPVarInt(playerid, "GragageColor");
	for(new x=13; x<21; x++)
	{
       if(playertextid ==GarageTD[playerid][x])
       {
           new v=GetPlayerVehicleID(playerid);
		   new nub=(x-12);
    	   SetPVarInt(playerid, "GragageColor", nub);
		   switch(nub)
		   {
		  		case 1: ChangeVehicleColor(v, 0, 0), pMods[playerid][18]=0, pMods[playerid][19]=0;
		 		case 2: ChangeVehicleColor(v, 16, 16), pMods[playerid][18]=16, pMods[playerid][19]=16;
		 		case 3: ChangeVehicleColor(v, 6, 6), pMods[playerid][18]=6, pMods[playerid][19]=6;
		 		case 4: ChangeVehicleColor(v, 147, 147), pMods[playerid][18]=147, pMods[playerid][19]=147;
		   		case 5: ChangeVehicleColor(v, 161, 161), pMods[playerid][18]=161, pMods[playerid][19]=161;
		  		case 6: ChangeVehicleColor(v, 126, 126), pMods[playerid][18]=126, pMods[playerid][19]=126;
		   		case 7: ChangeVehicleColor(v, 1, 1), pMods[playerid][18]=1, pMods[playerid][19]=1;
		   		case 8: ChangeVehicleColor(v, 158, 158), pMods[playerid][18]=158, pMods[playerid][19]=158;
		   }
           if(IsValidDynamicObject(v_TuneObject[v][Spoiler])) Player_Info[playerid][Spoiler]= nub;
           if(IsValidDynamicObject(v_TuneObject[v][SS][0])) Player_Info[playerid][SS]= nub;
           if(IsValidDynamicObject(v_TuneObject[v][Fbumps])) Player_Info[playerid][Fbumps]= nub;
           if(IsValidDynamicObject(v_TuneObject[v][Rbumps])) Player_Info[playerid][Rbumps]= nub;
           new Query[256];
           format(Query, sizeof(Query), "UPDATE `users` SET `Mod19` = %d , `Mod20` = %d WHERE `UserID` = '%d'", pMods[playerid][18], pMods[playerid][19], PlayerInfo[playerid][UserID]);
           mysql_query(GTADM, Query);
           AddCustomMods(v, playerid);
		   break;
	   }
	}

    if(playertextid == GarageTD[playerid][2])
    {
      new v=GetPlayerVehicleID(playerid);
      PlayerPlaySound(playerid, 1133, 0, 0, 0);
	  if(GetVehicleModel(v) == 402)
	  {
          v_HasTune[v][Wheel]=1;
		  if(Player_Info[playerid][Wheel] != c)
		  {
             new Query[256];
             format(Query, sizeof(Query), "UPDATE `users` SET `Wheel` = 1 WHERE `UserID` = '%d'", PlayerInfo[playerid][UserID]);
             mysql_query(GTADM, Query);
		     SelectTextDraw(playerid, 0xCCFF99FF);
		  }
          Player_Info[playerid][Wheel]=1;
          AddCustomMods(v, playerid);
	  }
	  else if(GetVehicleModel(v) == 411)
	  {
          v_HasTune[v][Spoiler]=c;
		  if(Player_Info[playerid][Spoiler] != c)
		  {
             new Query[256];
             format(Query, sizeof(Query), "UPDATE `users` SET `Spoiler` = 1 WHERE `UserID` = '%d'", PlayerInfo[playerid][UserID]);
             mysql_query(GTADM, Query);
		     SelectTextDraw(playerid, 0xCCFF99FF);
		  }
          Player_Info[playerid][Spoiler]=c;
          AddCustomMods(v, playerid);
	  }
    }
    else if(playertextid == GarageTD[playerid][12])
    {
          ShowPlayerDialog(playerid, 15445, DIALOG_STYLE_LIST, "Neon menu", "1. "RED_"Red neon\n2. "BLUE_"Blue neon\n3. "GREEN_"Green neon\n4. "YELLOW_"Yellow neon\n5. "PINK_"Pink neon\n6. "WHITE_"White neon\n"GRAY_"Remove neon", "Select", "Cancel");
		  SelectTextDraw(playerid, 0xCCFF99FF);
    }
    else if(playertextid == GarageTD[playerid][3])
    {
       	  new v=GetPlayerVehicleID(playerid);
          PlayerPlaySound(playerid, 1133, 0, 0, 0);
          v_HasTune[v][Ex]=1;

		  if(Player_Info[playerid][Ex] != c)
		  {
             new Query[256];
             format(Query, sizeof(Query), "UPDATE `users` SET `Ex` = 1 WHERE `UserID` = '%d'", PlayerInfo[playerid][UserID]);
             mysql_query(GTADM, Query);
		     SelectTextDraw(playerid, 0xCCFF99FF);
		  }
          Player_Info[playerid][Ex]=c;
          AddCustomMods(v, playerid);
    }

    else if(playertextid == GarageTD[playerid][5])
    {
       	  new v=GetPlayerVehicleID(playerid);
          PlayerPlaySound(playerid, 1133, 0, 0, 0);
          v_HasTune[v][SS]=1;

		  if(Player_Info[playerid][SS] != c)
		  {
             new Query[256];
             format(Query, sizeof(Query), "UPDATE `users` SET `SS` = %d WHERE `UserID` = '%d'", c, PlayerInfo[playerid][UserID]);
             mysql_query(GTADM, Query);
             SelectTextDraw(playerid, 0xCCFF99FF);
		  }
          Player_Info[playerid][SS]=c;
          AddCustomMods(v, playerid);
    }
    else if(playertextid == GarageTD[playerid][6])
    {
       	  new v=GetPlayerVehicleID(playerid);
          PlayerPlaySound(playerid, 1133, 0, 0, 0);
          v_HasTune[v][Fbumps]=1;

		  if(Player_Info[playerid][Fbumps] != c)
		  {
            new Query[256];
            format(Query, sizeof(Query), "UPDATE `users` SET `FrontB` = %d WHERE `UserID` = '%d'", c, PlayerInfo[playerid][UserID]);
            mysql_query(GTADM, Query);
		    SelectTextDraw(playerid, 0xCCFF99FF);
		  }
          Player_Info[playerid][Fbumps]=c;
          AddCustomMods(v, playerid);
    }
    else if(playertextid == GarageTD[playerid][7])
    {
       	  new v=GetPlayerVehicleID(playerid);
          PlayerPlaySound(playerid, 1133, 0, 0, 0);
          v_HasTune[v][Rbumps]=1;

		  if(Player_Info[playerid][Rbumps] != c)
		  {
             new Query[256];
             format(Query, sizeof(Query), "UPDATE `users` SET `RearB` = %d WHERE `UserID` = '%d'", c, PlayerInfo[playerid][UserID]);
             mysql_query(GTADM, Query);
		     SelectTextDraw(playerid, 0xCCFF99FF);
          }
          Player_Info[playerid][Rbumps]=c;
          AddCustomMods(v, playerid);
    }
    else if(playertextid == GarageTD[playerid][8])
    {
       	  new v=GetPlayerVehicleID(playerid);
          PlayerPlaySound(playerid, 1133, 0, 0, 0);
          v_HasTune[v][Hood]=1;
          v_TuneObject[v][Hood]=CreateDynamicObject(1111, 0, 0, -1000, 0, 0, 0);
          AttachDynamicObjectToVehicle(v_TuneObject[v][Hood], v, 0.004999, 2.455000, 0.019999, 0.000000, 0.000000, 0.000000);
 	      SelectTextDraw(playerid, 0xCCFF99FF);

		  if(Player_Info[playerid][Hood] == 0)
  		  {
             new Query[256];
             format(Query, sizeof(Query), "UPDATE `users` SET `Hood` = 1 WHERE `UserID` = '%d'", PlayerInfo[playerid][UserID]);
             mysql_query(GTADM, Query);
          }
          Player_Info[playerid][Hood]=1;
          AddCustomMods(v, playerid);
    }
    else if(playertextid == GarageTD[playerid][9])
    {
		 DeletePVar(playerid, "CAM");
		 DeletePVar(playerid, "GragageColor");
		 CancelSelectTextDraw(playerid);
		 SetCameraBehindPlayer(playerid);
		 StopAudioStreamForPlayer(playerid);
		 for(new x=0; x<21; x++)
		 {
             PlayerTextDrawHide(playerid, GarageTD[playerid][x]);
		 }
	}
    else if(playertextid == GarageTD[playerid][10])
    {
		 SelectTextDraw(playerid, 0xCCFF99FF);
		 new cam=GetPVarInt(playerid, "CAM");
		 if(cam ==1)
		 {
			  cam =2;
              InterpolateCameraPos(playerid, 1514.5947, -1478.9166, 12.8669, 1513.6711, -1468.9482, 12.0748, 2000, CAMERA_MOVE);
              InterpolateCameraLookAt(playerid, 1515.1462, -1478.0837, 12.2119, 1514.1956, -1469.7976, 11.6448, 2000, CAMERA_MOVE);
		 }
		 else if(cam ==2)
		 {
			  cam =3;
              InterpolateCameraPos(playerid, 1513.6711, -1468.9482, 12.0748, 1524.3193, -1470.5742, 12.0748, 2000, CAMERA_MOVE);
              InterpolateCameraLookAt(playerid, 1514.1956, -1469.7976, 11.6448, 1523.4790, -1471.1135, 11.7498, 2000, CAMERA_MOVE);
		 }
		 else if(cam == 3)
		 {
			  cam =4;
		      InterpolateCameraPos(playerid, 1524.3193, -1470.5742, 12.0748, 1523.4283, -1478.6991, 11.9474, 2000, CAMERA_MOVE);

		      InterpolateCameraLookAt(playerid, 1523.4790, -1471.1135, 11.7498, 1522.6504, -1478.0739, 11.5574, 2000, CAMERA_MOVE);

		 }
		 else if(cam == 4)
		 {
			  cam =1;
		      InterpolateCameraPos(playerid, 1523.4283, -1478.6991, 11.9474, 1514.5947, -1478.9166, 12.8669 , 2000, CAMERA_MOVE);

		      InterpolateCameraLookAt(playerid, 1522.6504, -1478.0739, 11.5574, 1515.1462, -1478.0837, 12.2119, 2000, CAMERA_MOVE);
		 }
		 SetPVarInt(playerid, "CAM", cam);
	}
    else if(playertextid == GarageTD[playerid][11])
    {
         RemoveCustomMods(GetPlayerVehicleID(playerid));
         ResetpTuning(playerid);
         PlayerPlaySound(playerid, 1134, 0, 0, 0);
	}

	else if(playertextid == gCol[playerid][12]) SetPVarInt(playerid, "g_Col_p", 5), SetGCOLSHOW(playerid);
	else if(playertextid == gCol[playerid][3]) SetPVarInt(playerid, "g_Col_p", 4), SetGCOLSHOW(playerid);
	else if(playertextid == gCol[playerid][25]) SetPVarInt(playerid, "g_Col_p", 3), SetGCOLSHOW(playerid);
	else if(playertextid == gCol[playerid][24]) SetPVarInt(playerid, "g_Col_p", 2), SetGCOLSHOW(playerid);
	else if(playertextid == gCol[playerid][9]) SetPVarInt(playerid, "g_Col_p", 1), SetGCOLSHOW(playerid);
	else
	{
	    for(new x=4; x<26; x++)
	    {
    	    new str[128], f;
	        if(x != 9 && x != 12 && x >=2 && x<23)
	        {
		       if(playertextid == gCol[playerid][x])
		       {
					format(str, sizeof(str), "%d", (20*(GetPVarInt(playerid, "g_Col_p")-1))+f);
	                cmd_gangcolor(playerid, str);
	                for(new y=0; y<26; y++) PlayerTextDrawHide(playerid, gCol[playerid][y]);
	                CancelSelectTextDraw(playerid);
	                DeletePVar(playerid, "g_Col_p");
	                DestroygColor(playerid);
	                break;
	           }
	           else f++;
	       }
	    }
	    for(new x=6; x<15; x++)
	    {
		   if(playertextid == TickTD[playerid][x])
		   {
	            if(TickTurn[playerid]==0) SendClientMessage(playerid, -1, "Its not your turn");
	            else if(ticbox[playerid][x-6] != 0) SendClientMessage(playerid, -1, "You cant draw in this box");
	            else tickbox(playerid, x-6);
				break;
		   }
	    }
		for(new k=0; k<MAX_PHONE_TD; k++)
		{
			if(playertextid == PhoneTD[playerid][k])
			{
			   new m=strlen(DialString[playerid]);
			   if(m < 9)
			   {
				   if(playertextid == PhoneTD[playerid][2]) strcat(DialString[playerid], "1"), PlayerPlaySound(playerid, 21000, 0, 0, 0);
				   else if(playertextid == PhoneTD[playerid][4]) strcat(DialString[playerid], "2"), PlayerPlaySound(playerid, 21000, 0, 0, 0);
				   else if(playertextid == PhoneTD[playerid][5]) strcat(DialString[playerid], "3"), PlayerPlaySound(playerid, 21000, 0, 0, 0);
				   else if(playertextid == PhoneTD[playerid][6]) strcat(DialString[playerid], "9"), PlayerPlaySound(playerid, 21000, 0, 0, 0);
				   else if(playertextid == PhoneTD[playerid][7]) strcat(DialString[playerid], "0"), PlayerPlaySound(playerid, 21000, 0, 0, 0);
				   else if(playertextid == PhoneTD[playerid][8]) strcat(DialString[playerid], "4"), PlayerPlaySound(playerid, 21000, 0, 0, 0);
				   else if(playertextid == PhoneTD[playerid][9]) strcat(DialString[playerid], "7"), PlayerPlaySound(playerid, 21000, 0, 0, 0);
				   else if(playertextid == PhoneTD[playerid][10]) strcat(DialString[playerid], "5"), PlayerPlaySound(playerid, 21000, 0, 0, 0);
				   else if(playertextid == PhoneTD[playerid][3]) strcat(DialString[playerid], "6"), PlayerPlaySound(playerid, 21000, 0, 0, 0);
				   else if(playertextid == PhoneTD[playerid][14]) strcat(DialString[playerid], "8"), PlayerPlaySound(playerid, 21000, 0, 0, 0);
			   }
			   if(playertextid == PhoneTD[playerid][25])  ShowMobileScreen(playerid, 3);
			   else if(playertextid == PhoneTD[playerid][11]) ShowMobileScreen(playerid, 0);
			   else if(playertextid == PhoneTD[playerid][12] && m>0) strdel(DialString[playerid], m-1, m);
			   else if(playertextid == PhoneTD[playerid][13])
			   {
				 if(strlen(DialString[playerid]) > 0)
				 {
                   if(HideShit[playerid] == 0)
                   {
                       ShowScreenTXD(playerid);
				   }
	               CancelSelectTextDraw(playerid);
				   for(new x=0; x<MAX_PHONE_TD;x++) PlayerTextDrawHide(playerid, PhoneTD[playerid][x]);
				   DestroyPhone(playerid);
				   new str[128];
				   format(str, sizeof(str), "{71A839}» Phone «{66CC00} Calling %s", DialString[playerid]);
				   SendClientMessage(playerid, -1, str);
				   PlayerPlaySound(playerid, 3600, 0, 0, 0);
				   new paID=-1;
				   foreach(new i : Player)
				   {
					 if(pPhone[i] > 0 && i != playerid)
					 {
					  if(strcmp(GetPhoneNumber(i), DialString[playerid]) == 0)
					  {
						   paID=i;
					  }
					 }
				   }
				   if(paID < 0) SendClientMessage(playerid, -1, "{71A839}» Phone «{66CC00} The number that you are trying to call is currently unavailable");
				   else if(PhoneOff[paID] == 1) SendClientMessage(playerid, -1, "{71A839}» Phone «{66CC00} This phone is currently turned off by the owner");
				   else
				   {
                          SendClientMessage(playerid, GRAY, "- Press ~k~~SNEAK_ABOUT~ to hangup!");
						  new strd[128];
						  format(strd, sizeof(strd), "~r~Call Received From~n~~b~ %s", GetPhoneNumber(playerid));
						  SendInfoText(paID, 5000, strd);
				          SendClientMessage(paID, -1, "{71A839}» Phone «{66CC00} Use (/Pickup) to answer the phone call or (/Reject) to reject it");
						  switch(pRingTone[paID])
						  {
								case 0: PlayAudioStreamForPlayer(paID, "https://dl.dropbox.com/u/52869044/ringtone1.mp3");
								case 1: PlayAudioStreamForPlayer(paID, "https://dl.dropbox.com/u/52869044/ringtone2.mp3");
								case 2: PlayAudioStreamForPlayer(paID, "https://dl.dropbox.com/u/52869044/ringtone3.mp3");
								case 3: PlayAudioStreamForPlayer(paID, "https://dl.dropbox.com/u/52869044/ringtone4.mp3");
								case 4: PlayAudioStreamForPlayer(paID, "https://dl.dropbox.com/u/52869044/ringtone5.mp3");
						  }
						  OnPhone[paID]=3;
						  OnPhone[playerid]=2;
						  CallID[paID]=playerid;
						  CallID[playerid]=paID;
						  HoldPhone(playerid);
				   }
				 }
			   }
			   else if(playertextid == PhoneTD[playerid][31] || playertextid == PhoneTD[playerid][21])
			   {
		           ShowMobileScreen(playerid, 1);
			   }
			   else if(playertextid == PhoneTD[playerid][22])
			   {
                   if(HideShit[playerid] == 0)
                   {
                       ShowScreenTXD(playerid);
				   }
				   SendClientMessage(playerid, -1, "{71A839}» Phone «{66CC00} You have turned your phone OFF!");
				   for(new x=0; x<MAX_PHONE_TD;x++) PlayerTextDrawHide(playerid, PhoneTD[playerid][x]);
				   DestroyPhone(playerid);
	               PhoneOff[playerid]=1;
	               CancelSelectTextDraw(playerid);
	 		   }
			   else if(playertextid == PhoneTD[playerid][24])
			   {
		           ShowMobileScreen(playerid, 2);
			   }
			   else if(playertextid == PhoneTD[playerid][27])
			   {
                  if(HideShit[playerid] == 0)
                  {
                      ShowScreenTXD(playerid);
				  }
			      for(new x=0; x<MAX_PHONE_TD;x++) PlayerTextDrawHide(playerid, PhoneTD[playerid][x]);
			      DestroyPhone(playerid);
			   }
			   else if(playertextid == PhoneTD[playerid][32])
			   {
			      pWallpaper[playerid]=1;
			      ShowMobileScreen(playerid, 0);
				  SendClientMessage(playerid, -1, "{71A839}» Phone «{66CC00} Your phone Wallpaper has been changed!");
				  new str[256];
			      format(str, sizeof(str), "UPDATE `users` SET  `PhoneWall` =  %d WHERE  `UserID` =%d", pWallpaper[playerid], PlayerInfo[playerid][UserID]);
			      mysql_query(GTADM, str);
			   }
			   else if(playertextid == PhoneTD[playerid][33])
			   {
			      pWallpaper[playerid]=2;
	 		      ShowMobileScreen(playerid, 0);
				  SendClientMessage(playerid, -1, "{71A839}» Phone «{66CC00} Your phone Wallpaper has been changed!");
				  new str[256];
			      format(str, sizeof(str), "UPDATE `users` SET  `PhoneWall` =  %d WHERE  `UserID` =%d", pWallpaper[playerid], PlayerInfo[playerid][UserID]);
			      mysql_query(GTADM, str);
			   }
			   else if(playertextid == PhoneTD[playerid][34])
			   {
			      pWallpaper[playerid]=3;
			      ShowMobileScreen(playerid, 0);
				  SendClientMessage(playerid, -1, "{71A839}» Phone «{66CC00} Your phone Wallpaper has been changed!");
				  new str[256];
			      format(str, sizeof(str), "UPDATE `users` SET  `PhoneWall` =  %d WHERE  `UserID` =%d", pWallpaper[playerid], PlayerInfo[playerid][UserID]);
			      mysql_query(GTADM, str);
			   }
			   else if(playertextid == PhoneTD[playerid][35])
			   {
			      pWallpaper[playerid]=4;
			      ShowMobileScreen(playerid, 0);
				  SendClientMessage(playerid, -1, "{71A839}» Phone «{66CC00} Your phone Wallpaper has been changed!");
				  new str[256];
			      format(str, sizeof(str), "UPDATE `users` SET  `PhoneWall` =  %d WHERE  `UserID` =%d", pWallpaper[playerid], PlayerInfo[playerid][UserID]);
			      mysql_query(GTADM, str);
			   }
			   else if(playertextid == PhoneTD[playerid][36])
			   {
			      pWallpaper[playerid]=5;
			      ShowMobileScreen(playerid, 0);
				  SendClientMessage(playerid, -1, "{71A839}» Phone «{66CC00} Your phone wallpaper has been changed!");
				  new str[256];
			      format(str, sizeof(str), "UPDATE `users` SET  `PhoneWall` =  %d WHERE  `UserID` =%d", pWallpaper[playerid], PlayerInfo[playerid][UserID]);
			      mysql_query(GTADM, str);
	           }
			   else if(playertextid == PhoneTD[playerid][37])
			   {
			      pWallpaper[playerid]=0;
			      ShowMobileScreen(playerid, 0);
				  SendClientMessage(playerid, -1, "{71A839}» Phone «{66CC00} Your phone wallpaper has been changed!");
				  new str[256];
			      format(str, sizeof(str), "UPDATE `users` SET  `PhoneWall` =  %d WHERE  `UserID` =%d", pWallpaper[playerid], PlayerInfo[playerid][UserID]);
			      mysql_query(GTADM, str);
	           }
			   else if(playertextid == PhoneTD[playerid][40])
			   {
					PlayAudioStreamForPlayer(playerid, "https://dl.dropbox.com/u/52869044/ringtone1.mp3");
	           }
			   else if(playertextid == PhoneTD[playerid][41])
			   {
					pRingTone[playerid]=0;
			        ShowMobileScreen(playerid, 0);
				    SendClientMessage(playerid, -1, "{71A839}» Phone «{66CC00} Your phone Ringtone has been changed!");
	                StopAudioStreamForPlayer(playerid);
				    new str[256];
			        format(str, sizeof(str), "UPDATE `users` SET  `PhoneRing` =  %d WHERE  `UserID` =%d", pRingTone[playerid], PlayerInfo[playerid][UserID]);
			        mysql_query(GTADM, str);
	           }
			   else if(playertextid == PhoneTD[playerid][42])
			   {
	                 PlayAudioStreamForPlayer(playerid, "https://dl.dropbox.com/u/52869044/ringtone2.mp3");
	           }
			   else if(playertextid == PhoneTD[playerid][43])
			   {
	                 PlayAudioStreamForPlayer(playerid, "https://dl.dropbox.com/u/52869044/ringtone3.mp3");
	           }
			   else if(playertextid == PhoneTD[playerid][44])
			   {
	                 PlayAudioStreamForPlayer(playerid, "https://dl.dropbox.com/u/52869044/ringtone4.mp3");
	           }
			   else if(playertextid == PhoneTD[playerid][45])
			   {
					pRingTone[playerid]=1;
			        ShowMobileScreen(playerid, 0);
				    SendClientMessage(playerid, -1, "{71A839}» Phone «{66CC00} Your phone Ringtone has been changed!");
	                StopAudioStreamForPlayer(playerid);
				    new str[256];
			        format(str, sizeof(str), "UPDATE `users` SET  `PhoneRing` =  %d WHERE  `UserID` =%d", pRingTone[playerid], PlayerInfo[playerid][UserID]);
			        mysql_query(GTADM, str);
	           }
			   else if(playertextid == PhoneTD[playerid][47])
			   {
	                 PlayAudioStreamForPlayer(playerid, "https://dl.dropbox.com/u/52869044/ringtone5.mp3");
	           }
			   else if(playertextid == PhoneTD[playerid][48])
			   {
					pRingTone[playerid]=2;
			        ShowMobileScreen(playerid, 0);
				    SendClientMessage(playerid, -1, "{71A839}» Phone «{66CC00} Your phone Ringtone has been changed!");
	                StopAudioStreamForPlayer(playerid);
				    new str[256];
			        format(str, sizeof(str), "UPDATE `users` SET  `PhoneRing` =  %d WHERE  `UserID` =%d", pRingTone[playerid], PlayerInfo[playerid][UserID]);
			        mysql_query(GTADM, str);
	           }
			   else if(playertextid == PhoneTD[playerid][49])
			   {
					pRingTone[playerid]=3;
			        ShowMobileScreen(playerid, 0);
				    SendClientMessage(playerid, -1, "{71A839}» Phone «{66CC00} Your phone Ringtone has been changed!");
	                StopAudioStreamForPlayer(playerid);
				    new str[256];
			        format(str, sizeof(str), "UPDATE `users` SET  `PhoneRing` =  %d WHERE  `UserID` =%d", pRingTone[playerid], PlayerInfo[playerid][UserID]);
			        mysql_query(GTADM, str);
	           }
			   else if(playertextid == PhoneTD[playerid][50])
			   {
					pRingTone[playerid]=4;
				    SendClientMessage(playerid, -1, "{71A839}» Phone «{66CC00} Your phone Ringtone has been changed!");
			        ShowMobileScreen(playerid, 0);
	                StopAudioStreamForPlayer(playerid);
				    new str[256];
			        format(str, sizeof(str), "UPDATE `users` SET  `PhoneRing` =  %d WHERE  `UserID` =%d", pRingTone[playerid], PlayerInfo[playerid][UserID]);
			        mysql_query(GTADM, str);
	           }
			   else if(playertextid == PhoneTD[playerid][23])
			   {
	                ShowMobileScreen(playerid, 4);
			   }
			   else if(playertextid == PhoneTD[playerid][20])
			   {
				    ShowPlayerDialog(playerid, 2145, DIALOG_STYLE_LIST, "SMS", "Inbox\nSend SMS", "Select", "Exit");
			   }


			   else if(playertextid == PhoneTD[playerid][51])
			   {
				 if(strlen(ContactID[playerid][0]) > 0)
				 {
                   if(HideShit[playerid] == 0)
                   {
                      ShowScreenTXD(playerid);
				   }
	               CancelSelectTextDraw(playerid);
				   for(new x=0; x<MAX_PHONE_TD;x++) PlayerTextDrawHide(playerid, PhoneTD[playerid][x]);
				   DestroyPhone(playerid);
				   new str[128];
				   format(str, sizeof(str), "{71A839}» Phone «{66CC00} Calling %s", ContactID[playerid][0]);
				   SendClientMessage(playerid, -1, str);
				   PlayerPlaySound(playerid, 3600, 0, 0, 0);
				   new paID=-1;
				   foreach(new i : Player)
				   {
					 if(pPhone[i] > 0 && i != playerid)
					 {
					  if(strcmp(GetPhoneNumber(i), ContactID[playerid][0]) == 0)
					  {
						   paID=i;
					  }
					 }
				   }
				   if(paID < 0) SendClientMessage(playerid, -1, "{71A839}» Phone «{66CC00} The number that you are trying to call is currently unavailable");
				   else if(PhoneOff[paID] == 1) SendClientMessage(playerid, -1, "{71A839}» Phone «{66CC00} This phone is currently turned off by the owner");
				   else
				   {
                          SendClientMessage(playerid, GRAY, "- Press ~k~~SNEAK_ABOUT~ to hangup!");
						  new strd[128];
						  format(strd, sizeof(strd), "~r~Call Received From~n~~b~ %s", GetPhoneNumber(playerid));
						  SendInfoText(paID, 5000, strd);
				          SendClientMessage(paID, -1, "{71A839}» Phone «{66CC00} Use (/Pickup) to answer the phone call or (/Reject) to reject it");
						  switch(pRingTone[paID])
						  {
								case 0: PlayAudioStreamForPlayer(paID, "https://dl.dropbox.com/u/52869044/ringtone1.mp3");
								case 1: PlayAudioStreamForPlayer(paID, "https://dl.dropbox.com/u/52869044/ringtone2.mp3");
								case 2: PlayAudioStreamForPlayer(paID, "https://dl.dropbox.com/u/52869044/ringtone3.mp3");
								case 3: PlayAudioStreamForPlayer(paID, "https://dl.dropbox.com/u/52869044/ringtone4.mp3");
								case 4: PlayAudioStreamForPlayer(paID, "https://dl.dropbox.com/u/52869044/ringtone5.mp3");
						  }
						  OnPhone[paID]=3;
						  OnPhone[playerid]=2;
						  CallID[paID]=playerid;
						  CallID[playerid]=paID;
						  HoldPhone(playerid);
				   }
				 }
			   }
			   else if(playertextid == PhoneTD[playerid][53])
			   {
				 if(strlen(ContactID[playerid][1]) > 0)
				 {
                   if(HideShit[playerid] == 0)
                   {
                      ShowScreenTXD(playerid);
				   }
	               CancelSelectTextDraw(playerid);
				   for(new x=0; x<MAX_PHONE_TD;x++) PlayerTextDrawHide(playerid, PhoneTD[playerid][x]);
				   DestroyPhone(playerid);
				   new str[128];
				   format(str, sizeof(str), "{71A839}» Phone «{66CC00} Calling %s", ContactID[playerid][1]);
				   SendClientMessage(playerid, -1, str);
				   PlayerPlaySound(playerid, 3600, 0, 0, 0);
				   new paID=-1;
				   foreach(new i : Player)
				   {
	                 if(pPhone[i] > 0 && i != playerid)
					 {
					  if(strcmp(GetPhoneNumber(i), ContactID[playerid][1]) == 0)
					  {
						   paID=i;
					  }
					 }
				   }
				   if(paID < 0) SendClientMessage(playerid, -1, "{71A839}» Phone «{66CC00} The number that you are trying to call is currently unavailable");
				   else if(PhoneOff[paID] == 1) SendClientMessage(playerid, -1, "{71A839}» Phone «{66CC00} This phone is currently turned off by the owner");
				   else
				   {
                          SendClientMessage(playerid, GRAY, "- Press ~k~~SNEAK_ABOUT~ to hangup!");
						  new strd[128];
						  format(strd, sizeof(strd), "~r~Call Received From~n~~b~ %s", GetPhoneNumber(playerid));
						  SendInfoText(paID, 5000, strd);
				          SendClientMessage(paID, -1, "{71A839}» Phone «{66CC00} Use (/Pickup) to answer the phone call or (/Reject) to reject it");
						  switch(pRingTone[paID])
						  {
								case 0: PlayAudioStreamForPlayer(paID, "https://dl.dropbox.com/u/52869044/ringtone1.mp3");
								case 1: PlayAudioStreamForPlayer(paID, "https://dl.dropbox.com/u/52869044/ringtone2.mp3");
								case 2: PlayAudioStreamForPlayer(paID, "https://dl.dropbox.com/u/52869044/ringtone3.mp3");
								case 3: PlayAudioStreamForPlayer(paID, "https://dl.dropbox.com/u/52869044/ringtone4.mp3");
								case 4: PlayAudioStreamForPlayer(paID, "https://dl.dropbox.com/u/52869044/ringtone5.mp3");
						  }
						  OnPhone[paID]=3;
						  OnPhone[playerid]=2;
						  CallID[paID]=playerid;
						  CallID[playerid]=paID;
						  HoldPhone(playerid);
				   }
				 }
			   }
			   else if(playertextid == PhoneTD[playerid][54])
			   {
				 if(strlen(ContactID[playerid][2]) > 0)
				 {
                   if(HideShit[playerid] == 0)
                   {
                      ShowScreenTXD(playerid);
				   }
	               CancelSelectTextDraw(playerid);
				   for(new x=0; x<MAX_PHONE_TD;x++) PlayerTextDrawHide(playerid, PhoneTD[playerid][x]);
				   DestroyPhone(playerid);
				   new str[128];
				   format(str, sizeof(str), "{71A839}» Phone «{66CC00} Calling %s", ContactID[playerid][2]);
				   SendClientMessage(playerid, -1, str);
				   PlayerPlaySound(playerid, 3600, 0, 0, 0);
				   new paID=-1;
				   foreach(new i : Player)
				   {
	                 if(pPhone[i] > 0 && i != playerid)
					 {
					  if(strcmp(GetPhoneNumber(i), ContactID[playerid][2]) == 0)
					  {
						   paID=i;
					  }
					 }
				   }
				   if(paID < 0) SendClientMessage(playerid, -1, "{71A839}» Phone «{66CC00} The number that you are trying to call is currently unavailable");
				   else if(PhoneOff[paID] == 1) SendClientMessage(playerid, -1, "{71A839}» Phone «{66CC00} This phone is currently turned off by the owner");
				   else
				   {
                          SendClientMessage(playerid, GRAY, "- Press ~k~~SNEAK_ABOUT~ to hangup!");
						  new strd[128];
						  format(strd, sizeof(strd), "~r~Call Received From~n~~b~ %s", GetPhoneNumber(playerid));
						  SendInfoText(paID, 5000, strd);
				          SendClientMessage(paID, -1, "{71A839}» Phone «{66CC00} Use (/Pickup) to answer the phone call or (/Reject) to reject it");
						  switch(pRingTone[paID])
						  {
								case 0: PlayAudioStreamForPlayer(paID, "https://dl.dropbox.com/u/52869044/ringtone1.mp3");
								case 1: PlayAudioStreamForPlayer(paID, "https://dl.dropbox.com/u/52869044/ringtone2.mp3");
								case 2: PlayAudioStreamForPlayer(paID, "https://dl.dropbox.com/u/52869044/ringtone3.mp3");
								case 3: PlayAudioStreamForPlayer(paID, "https://dl.dropbox.com/u/52869044/ringtone4.mp3");
								case 4: PlayAudioStreamForPlayer(paID, "https://dl.dropbox.com/u/52869044/ringtone5.mp3");
						  }
						  OnPhone[paID]=3;
						  OnPhone[playerid]=2;
						  CallID[paID]=playerid;
						  CallID[playerid]=paID;
						  HoldPhone(playerid);
				   }
				 }
			   }
			   else if(playertextid == PhoneTD[playerid][55])
			   {
				 if(strlen(ContactID[playerid][3]) > 0)
				 {
                   if(HideShit[playerid] == 0)
                   {
                      ShowScreenTXD(playerid);
				   }
	               CancelSelectTextDraw(playerid);
				   for(new x=0; x<MAX_PHONE_TD;x++) PlayerTextDrawHide(playerid, PhoneTD[playerid][x]);
				   DestroyPhone(playerid);
				   new str[128];
				   format(str, sizeof(str), "{71A839}» Phone «{66CC00} Calling %s", ContactID[playerid][3]);
				   SendClientMessage(playerid, -1, str);
				   PlayerPlaySound(playerid, 3600, 0, 0, 0);
				   new paID=-1;
				   foreach(new i : Player)
				   {
	                 if(pPhone[i] > 0 && i != playerid)
					 {
					  if(strcmp(GetPhoneNumber(i), ContactID[playerid][3]) == 0)
					  {
						   paID=i;
					  }
					 }
				   }
				   if(paID < 0) SendClientMessage(playerid, -1, "{71A839}» Phone «{66CC00} The number that you are trying to call is currently unavailable");
				   else if(PhoneOff[paID] == 1) SendClientMessage(playerid, -1, "{71A839}» Phone «{66CC00} This phone is currently turned off by the owner");
				   else
				   {
                          SendClientMessage(playerid, GRAY, "- Press ~k~~SNEAK_ABOUT~ to hangup!");
						  new strd[128];
						  format(strd, sizeof(strd), "~r~Call Received From~n~~b~ %s", GetPhoneNumber(playerid));
						  SendInfoText(paID, 5000, strd);
				          SendClientMessage(paID, -1, "{71A839}» Phone «{66CC00} Use (/Pickup) to answer the phone call or (/Reject) to reject it");
						  switch(pRingTone[paID])
						  {
								case 0: PlayAudioStreamForPlayer(paID, "https://dl.dropbox.com/u/52869044/ringtone1.mp3");
								case 1: PlayAudioStreamForPlayer(paID, "https://dl.dropbox.com/u/52869044/ringtone2.mp3");
								case 2: PlayAudioStreamForPlayer(paID, "https://dl.dropbox.com/u/52869044/ringtone3.mp3");
								case 3: PlayAudioStreamForPlayer(paID, "https://dl.dropbox.com/u/52869044/ringtone4.mp3");
								case 4: PlayAudioStreamForPlayer(paID, "https://dl.dropbox.com/u/52869044/ringtone5.mp3");
						  }
						  OnPhone[paID]=3;
						  OnPhone[playerid]=2;
						  CallID[paID]=playerid;
						  CallID[playerid]=paID;
						  HoldPhone(playerid);
				   }
				 }
			   }
			   else if(playertextid == PhoneTD[playerid][56])
			   {
				 if(strlen(ContactID[playerid][4]) > 0)
				 {
                   if(HideShit[playerid] == 0)
                   {
                      ShowScreenTXD(playerid);
				   }
	               CancelSelectTextDraw(playerid);
				   for(new x=0; x<MAX_PHONE_TD;x++) PlayerTextDrawHide(playerid, PhoneTD[playerid][x]);
				   DestroyPhone(playerid);
				   new str[128];
				   format(str, sizeof(str), "{71A839}» Phone «{66CC00} Calling %s", ContactID[playerid][4]);
				   SendClientMessage(playerid, -1, str);
				   PlayerPlaySound(playerid, 3600, 0, 0, 0);
				   new paID=-1;
				   foreach(new i : Player)
				   {
	                 if(pPhone[i] > 0 && i != playerid)
					 {
					  if(strcmp(GetPhoneNumber(i), ContactID[playerid][4]) == 0)
					  {
						   paID=i;
					  }
					 }
				   }
				   if(paID < 0) SendClientMessage(playerid, -1, "{71A839}» Phone «{66CC00} The number that you are trying to call is currently unavailable");
				   else if(PhoneOff[paID] == 1) SendClientMessage(playerid, -1, "{71A839}» Phone «{66CC00} This phone is currently turned off by the owner");
				   else
				   {
                          SendClientMessage(playerid, GRAY, "- Press ~k~~SNEAK_ABOUT~ to hangup!");
						  new strd[128];
						  format(strd, sizeof(strd), "~r~Call Received From~n~~b~ %s", GetPhoneNumber(playerid));
						  SendInfoText(paID, 5000, strd);
				          SendClientMessage(paID, -1, "{71A839}» Phone «{66CC00} Use (/Pickup) to answer the phone call or (/Reject) to reject it");
						  switch(pRingTone[paID])
						  {
								case 0: PlayAudioStreamForPlayer(paID, "https://dl.dropbox.com/u/52869044/ringtone1.mp3");
								case 1: PlayAudioStreamForPlayer(paID, "https://dl.dropbox.com/u/52869044/ringtone2.mp3");
								case 2: PlayAudioStreamForPlayer(paID, "https://dl.dropbox.com/u/52869044/ringtone3.mp3");
								case 3: PlayAudioStreamForPlayer(paID, "https://dl.dropbox.com/u/52869044/ringtone4.mp3");
								case 4: PlayAudioStreamForPlayer(paID, "https://dl.dropbox.com/u/52869044/ringtone5.mp3");
						  }
						  OnPhone[paID]=3;
						  OnPhone[playerid]=2;
						  CallID[paID]=playerid;
						  CallID[playerid]=paID;
						  HoldPhone(playerid);
				   }
				 }
			   }
			   else if(playertextid == PhoneTD[playerid][58])
			   {
				 if(strlen(ContactID[playerid][5]) > 0)
				 {
                   if(HideShit[playerid] == 0)
                   {

                      ShowScreenTXD(playerid);
				   }
	               CancelSelectTextDraw(playerid);
				   for(new x=0; x<MAX_PHONE_TD;x++) PlayerTextDrawHide(playerid, PhoneTD[playerid][x]);
				   DestroyPhone(playerid);
				   new str[128];
				   format(str, sizeof(str), "{71A839}» Phone «{66CC00} Calling %s", ContactID[playerid][5]);
				   SendClientMessage(playerid, -1, str);
				   PlayerPlaySound(playerid, 3600, 0, 0, 0);
				   new paID=-1;
				   foreach(new i : Player)
				   {
	                 if(pPhone[i] > 0 && i != playerid)
					 {
					  if(strcmp(GetPhoneNumber(i), ContactID[playerid][5]) == 0)
					  {
						   paID=i;
					  }
					 }
				   }
				   if(paID < 0) SendClientMessage(playerid, -1, "{71A839}» Phone «{66CC00} The number that you are trying to call is currently unavailable");
				   else if(PhoneOff[paID] == 1) SendClientMessage(playerid, -1, "{71A839}» Phone «{66CC00} This phone is currently turned off by the owner");
				   else
				   {
                          SendClientMessage(playerid, GRAY, "- Press ~k~~SNEAK_ABOUT~ to hangup!");
						  new strd[128];
						  format(strd, sizeof(strd), "~r~Call Received From~n~~b~ %s", GetPhoneNumber(playerid));
						  SendInfoText(paID, 5000, strd);
				          SendClientMessage(paID, -1, "{71A839}» Phone «{66CC00} Use (/Pickup) to answer the phone call or (/Reject) to reject it");
						  switch(pRingTone[paID])
						  {
								case 0: PlayAudioStreamForPlayer(paID, "https://dl.dropbox.com/u/52869044/ringtone1.mp3");
								case 1: PlayAudioStreamForPlayer(paID, "https://dl.dropbox.com/u/52869044/ringtone2.mp3");
								case 2: PlayAudioStreamForPlayer(paID, "https://dl.dropbox.com/u/52869044/ringtone3.mp3");
								case 3: PlayAudioStreamForPlayer(paID, "https://dl.dropbox.com/u/52869044/ringtone4.mp3");
								case 4: PlayAudioStreamForPlayer(paID, "https://dl.dropbox.com/u/52869044/ringtone5.mp3");
						  }
						  OnPhone[paID]=3;
						  OnPhone[playerid]=2;
						  CallID[paID]=playerid;
						  CallID[playerid]=paID;
						  HoldPhone(playerid);
				   }
				 }
			   }
			   else if(playertextid == PhoneTD[playerid][59])
			   {
				 if(strlen(ContactID[playerid][6]) > 0)
				 {
                   if(HideShit[playerid] == 0)
                   {
                      ShowScreenTXD(playerid);
				   }
	               CancelSelectTextDraw(playerid);
				   for(new x=0; x<MAX_PHONE_TD;x++) PlayerTextDrawHide(playerid, PhoneTD[playerid][x]);
				   DestroyPhone(playerid);
				   new str[128];
				   format(str, sizeof(str), "{71A839}» Phone «{66CC00} Calling %s", ContactID[playerid][6]);
				   SendClientMessage(playerid, -1, str);
				   PlayerPlaySound(playerid, 3600, 0, 0, 0);
				   new paID=-1;
				   foreach(new i : Player)
				   {
	                 if(pPhone[i] > 0 && i != playerid)
					 {
					  if(strcmp(GetPhoneNumber(i), ContactID[playerid][6]) == 0)
					  {
						   paID=i;
					  }
					 }
				   }
				   if(paID < 0) SendClientMessage(playerid, -1, "{71A839}» Phone «{66CC00} The number that you are trying to call is currently unavailable");
				   else if(PhoneOff[paID] == 1) SendClientMessage(playerid, -1, "{71A839}» Phone «{66CC00} This phone is currently turned off by the owner");
				   else
				   {
                          SendClientMessage(playerid, GRAY, "- Press ~k~~SNEAK_ABOUT~ to hangup!");
						  new strd[128];
						  format(strd, sizeof(strd), "~r~Call Received From~n~~b~ %s", GetPhoneNumber(playerid));
						  SendInfoText(paID, 5000, strd);
				          SendClientMessage(paID, -1, "{71A839}» Phone «{66CC00} Use (/Pickup) to answer the phone call or (/Reject) to reject it");
						  switch(pRingTone[paID])
						  {
								case 0: PlayAudioStreamForPlayer(paID, "https://dl.dropbox.com/u/52869044/ringtone1.mp3");
								case 1: PlayAudioStreamForPlayer(paID, "https://dl.dropbox.com/u/52869044/ringtone2.mp3");
								case 2: PlayAudioStreamForPlayer(paID, "https://dl.dropbox.com/u/52869044/ringtone3.mp3");
								case 3: PlayAudioStreamForPlayer(paID, "https://dl.dropbox.com/u/52869044/ringtone4.mp3");
								case 4: PlayAudioStreamForPlayer(paID, "https://dl.dropbox.com/u/52869044/ringtone5.mp3");
						  }
						  OnPhone[paID]=3;
						  OnPhone[playerid]=2;
						  CallID[paID]=playerid;
						  CallID[playerid]=paID;
						  HoldPhone(playerid);
				   }
				 }
			   }
			   PlayerTextDrawSetString(playerid, PhoneTD[playerid][16], DialString[playerid]);
			}
		}
 }
	if(playertextid == VDP[playerid][4])
	{
        SetVehicleShowCam(playerid, GetPVarInt(playerid, "v_Dealer"), GetPVarInt(playerid, "v_Cam")-1);
//		PlayerPlaySound(playerid, 5201, 0, 0, 0);
	}
	else if(playertextid == VDP[playerid][5])
	{
        SetVehicleShowCam(playerid, GetPVarInt(playerid, "v_Dealer"), GetPVarInt(playerid, "v_Cam")+1);
//		PlayerPlaySound(playerid, 5202, 0, 0, 0);
	}
	else if(playertextid == VDP[playerid][9])
	{
         ExitVehicleShow(playerid);
		 PlayerPlaySound(playerid, 5203, 0, 0, 0);
	}
	else if(playertextid == VDP[playerid][8])
	{
	  new v=return_vID(playerid);
	  BuyCar(playerid, v);
	}
  }
  return 1;
}

public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
  if(_:clickedid == INVALID_TEXT_DRAW)
  {
	if(GetPVarInt(playerid, "gInfoStating"))
	{
		    for(new i=0; i<30; i++) PlayerTextDrawDestroy(playerid, pGwTD2[playerid][i]);
		    for(new i=0; i<7; i++) PlayerTextDrawDestroy(playerid, pGwTD1[playerid][i]);
			DeletePVar(playerid, "gInfoStating");
			CancelSelectTextDraw(playerid);
	}
    if(GetPVarInt(playerid, "InTic")) TogglePlayerControllable2(playerid, 0), SelectTextDraw(playerid, 0xFFFFFFFF);

	if(GetPVarInt(playerid, "Stating"))
	{
	    for(new i=0; i<StatsTDS; i++) PlayerTextDrawHide(playerid, pStatsTD[playerid][i]);
		DeletePVar(playerid, "Stating");
	}
	if(GetPVarInt(playerid, "v_Dealer") || GetPVarInt(playerid, "v_Cam"))
	{
		ExitVehicleShow(playerid);
	}
	if(GetPVarInt(playerid, "g_Col_p"))
	{
		for(new x=0; x<26; x++)
		{
		        PlayerTextDrawHide(playerid, gCol[playerid][x]);
		}
		DeletePVar(playerid, "g_Col_p");
		DestroygColor(playerid);
	}
	if(GetPVarInt(playerid, "CAM"))
	{
		 DeletePVar(playerid, "CAM");
		 DeletePVar(playerid, "GragageColor");
		 CancelSelectTextDraw(playerid);
		 SetCameraBehindPlayer(playerid);
		 StopAudioStreamForPlayer(playerid);
		 for(new x=0; x<21; x++)
		 {
		     PlayerTextDrawHide(playerid, GarageTD[playerid][x]);
		 }
		 TogglePlayerControllable2(playerid, 1);
	}
	else
	{
        if(HideShit[playerid] == 0)
        {
          ShowScreenTXD(playerid);
	    }
        for(new x=0; x<MAX_PHONE_TD;x++) PlayerTextDrawHide(playerid, PhoneTD[playerid][x]);
	    DestroyPhone(playerid);
	}
  }
  else
  {

  	if(clickedid == ShopTD[1])
	{
	   new kk;
       if(GetPVarInt(playerid, "Buying_Clothes") == 2)
       {
		new k=GetPVarInt(playerid, "Clothes_Selection")+1;
		if(k > (sizeof(Hats)-1)) SetPVarInt(playerid, "Clothes_Selection", 1);
		else SetPVarInt(playerid, "Clothes_Selection", k);
		DestroyPlayerObject(playerid, GetPVarInt(playerid, "Gobj"));
		kk=GetPVarInt(playerid, "Clothes_Selection");
		SetPVarInt(playerid, "Gobj", CreatePlayerObject(playerid, Hats[kk], 207.54, -99.61, 1005.38, HatsRot[kk][0], HatsRot[kk][1], HatsRot[kk][2], 100.0));
	   }
	   else
	   {
		new k=GetPVarInt(playerid, "Clothes_Selection")+1;
		if(k > (sizeof(Glasses)-1)) SetPVarInt(playerid, "Clothes_Selection", 1);
		else SetPVarInt(playerid, "Clothes_Selection", k);
		DestroyPlayerObject(playerid, GetPVarInt(playerid, "Gobj"));
		kk=GetPVarInt(playerid, "Clothes_Selection");
    	SetPVarInt(playerid, "Gobj", CreatePlayerObject(playerid, Glasses[kk], 207.54, -99.61, 1005.36, 0.00, 0.00, -76.00, 100.0));
	   }
	}
	else if(clickedid == ShopTD[3])
	{
       if(GetPVarInt(playerid, "Buying_Clothes") == 2)
       {
		new k=GetPVarInt(playerid, "Clothes_Selection")-1;
		if(k < 0) SetPVarInt(playerid, "Clothes_Selection", (sizeof(Hats)-1));
		else SetPVarInt(playerid, "Clothes_Selection", k);
		DestroyPlayerObject(playerid, GetPVarInt(playerid, "Gobj"));
		new kk=GetPVarInt(playerid, "Clothes_Selection");
		SetPVarInt(playerid, "Gobj", CreatePlayerObject(playerid, Hats[kk], 207.54, -99.61, 1005.38, HatsRot[kk][0], HatsRot[kk][1], HatsRot[kk][2], 100.0));
	   }
	   else
	   {
		new k=GetPVarInt(playerid, "Clothes_Selection")-1;
		if(k < 0) SetPVarInt(playerid, "Clothes_Selection", (sizeof(Glasses)-1));
		else SetPVarInt(playerid, "Clothes_Selection", k);
		DestroyPlayerObject(playerid, GetPVarInt(playerid, "Gobj"));
		new kk=GetPVarInt(playerid, "Clothes_Selection");
 	    SetPVarInt(playerid, "Gobj", CreatePlayerObject(playerid, Glasses[kk], 207.54, -99.61, 1005.36, 0.00, 0.00, -76.00, 100.0));
	   }
	}
	else if(clickedid == ShopTD[5])
	{
        if(GetPVarInt(playerid, "Buying_Clothes") == 2) ShowPlayerDialog(playerid, 7556, DIALOG_STYLE_MSGBOX, "Binco", "Are you sure you want to buy this item for "GREEN_"120, 000$ ?", "Buy", "Exit");
	   	else ShowPlayerDialog(playerid, 7555, DIALOG_STYLE_MSGBOX, "Binco", "Are you sure you want to buy this item for "GREEN_"100, 000$ ?", "Buy", "Exit");

	}
	else if(clickedid == ShopTD[6])
	{

		TogglePlayerControllable2(playerid, 1);
		if(GetPVarInt(playerid, "Gobj")) DestroyPlayerObject(playerid, GetPVarInt(playerid, "Gobj"));
		DeletePVar(playerid, "Gobj");
		DeletePVar(playerid, "Clothes_Selection");
		DeletePVar(playerid, "Buying_Clothes");
		for(new x=0; x<sizeof(ShopTD); x++) TextDrawHideForPlayer(playerid, ShopTD[x]);
		SetCameraBehindPlayer(playerid);
	    SetPlayerVirtualWorldEX(playerid, 0);
	    CancelSelectTextDraw(playerid);
	}
  }
  return 1;
}

public OnPlayerEnterDynamicRaceCP(playerid, checkpointid)
{
#if defined USEDRIFT

	if(checkpointid == pDCP[playerid])
	{
	 if(GetPVarInt(playerid, "Drifter"))
	 {
		new score=GetPVarInt(playerid, "DriftScore")+(GetPVarInt(playerid, "CurrDrift") * GetPVarInt(playerid, "Combo")),
		v=GetVehicleModel(GetPlayerVehicleID(playerid));
		Iter_Remove(Drifter, playerid);
		ShowMenuForPlayer(DriftMenu, playerid);
		new str[64];
		format(str, 64, "~r~Drift:~y~ %d", score);
		//SendInfoText(playerid, 5000, str);
		GameTextForPlayer(playerid, str, 5000, 4);
		new Float:x, Float:y, Float:z;
		new Float:x2, Float:y2, Float:z2;
		new Float:x3, Float:y3, Float:z3;
		GetPlayerPos(playerid, x, y, z);
		GetXYInFrontOfPlayer(playerid, x, y, 5.0);

		GetPlayerCameraPos(playerid, x2, y2, z2);

		GetPlayerPos(playerid, x3, y3, z3);
		InterpolateCameraPos(playerid, x2, y2, z2, x2+20, y2+20, z2+20, 5000, CAMERA_MOVE);
		InterpolateCameraLookAt(playerid, x, y, z, x3, y3, z3, 5000, CAMERA_MOVE);
		TogglePlayerControllable2(playerid, 0);

		new Map=GetPVarInt(playerid, "DriftMap");
		new c;
		for(new d=0; d<5; d++)
		{
			 if(score >DriftRecords[Map-1][driftTOP][d])
			   c++;
		}
		if(c > 0)
		{
			new p= 6-c;
			new str2[256];
			format(str2, sizeof(str2), ""CTC1_"» Drift « "CTC2_"%s has set a new Drift%d record "CTC1_"#%d", pName[playerid], Map, p);
			SendClientMessageToAll(0x51FF00FF, str2);

			PlayerInfo[playerid][pDrecord]++;
			new Query[256];
			format(Query, sizeof(Query), "UPDATE `users` SET `driftrecords` = %d WHERE `Name` = '%s'", PlayerInfo[playerid][pDrecord], pName[playerid]);
			mysql_query(GTADM, Query);
			DriftRecords[Map-1][driftTOP][p-1]=score;

			switch(p)
			{
			  case 1: GiveMedal(playerid, 18), GivePlayerMoneyEX(playerid, 25000), ScoreTDupdate(playerid, 10), format(DriftRecords[Map-1][driftTOP1], 24, "%s", pName[playerid]), format(DriftRecords[Map-1][D_Top1Car], 24, "%s", vInfo[v-400][vName]), GivePP(playerid, 1);
			  case 2: GiveMedal(playerid, 18), GivePlayerMoneyEX(playerid, 18000), ScoreTDupdate(playerid, 7), format(DriftRecords[Map-1][driftTOP2], 24, "%s", pName[playerid]), format(DriftRecords[Map-1][D_Top2Car], 24, "%s", vInfo[v-400][vName]), GivePP(playerid, 1);
			  case 3: GiveMedal(playerid, 18), GivePlayerMoneyEX(playerid, 12000), ScoreTDupdate(playerid, 5), format(DriftRecords[Map-1][driftTOP3], 24, "%s", pName[playerid]), format(DriftRecords[Map-1][D_Top3Car], 24, "%s", vInfo[v-400][vName]);
			  case 4: GivePlayerMoneyEX(playerid, 10000), ScoreTDupdate(playerid, 3), format(DriftRecords[Map-1][driftTOP4], 24, "%s", pName[playerid]), format(DriftRecords[Map-1][D_Top4Car], 24, "%s", vInfo[v-400][vName]);
			  case 5: GivePlayerMoneyEX(playerid, 7000), ScoreTDupdate(playerid, 1), format(DriftRecords[Map-1][driftTOP5], 24, "%s", pName[playerid]), format(DriftRecords[Map-1][D_Top5Car], 24, "%s", vInfo[v-400][vName]);
			}
			format(str2, sizeof(str2), "UPDATE `driftrecords` SET `Top%dPlayer` = '%s', `Top%dCar` = '%s', `Top%dRecord` = '%d' WHERE `DriftID` = %d", p, pEscName[playerid], p, vInfo[v-400][vName], p, score, (Map-1));
			mysql_query(GTADM, str2);
		}
        DeletePVar(playerid, "CurrDrift");
	 }
	}
#endif
    return 1;
}
stock ShowBaseTD(playerid, i)
{
	  PlayerTextDrawSetStringEX(playerid, PropTD[playerid][7], "~p~Gang base");
	  PlayerTextDrawSetStringEX(playerid, PropTD[playerid][5], "_~n~_~n~_~n~_");

      new str[128];
      new gang=GangBases[i][gbGang];
      format(str, sizeof(str), "~l~Name: ~w~%s", GangBases[i][BaseName]);
	  PlayerTextDrawSetStringEX(playerid, PropTD[playerid][0], str);

	  PlayerTextDrawShow(playerid, PropTD[playerid][0]);
	  PlayerTextDrawShow(playerid, PropTD[playerid][5]);

      if(gang > 0) format(str, sizeof(str), "~l~Gang: ~l~%s", GangInfo[gang][Name]), PlayerTextDrawSetPreviewModel(playerid, PropTD[playerid][6], 1272);
	  else str="~l~Gang: ~l~No gang", PlayerTextDrawSetPreviewModel(playerid, PropTD[playerid][6], 1273);
	  PlayerTextDrawSetStringEX(playerid, PropTD[playerid][1], str);
	  PlayerTextDrawShow(playerid, PropTD[playerid][1]);


      format(str, sizeof(str), "~l~Cost: $%d", GangBases[i][Price]);
	  PlayerTextDrawSetStringEX(playerid, PropTD[playerid][2], str);

	  PlayerTextDrawShow(playerid, PropTD[playerid][0]);
	  PlayerTextDrawShow(playerid, PropTD[playerid][1]);
	  PlayerTextDrawShow(playerid, PropTD[playerid][2]);
	  PlayerTextDrawShow(playerid, PropTD[playerid][5]);
	  PlayerTextDrawShow(playerid, PropTD[playerid][6]);
	  PlayerTextDrawShow(playerid, PropTD[playerid][7]);
	  SetPVarInt(playerid, "ShowPropTD", true);
      SetTimerEx("HideMenusForPlayer", 5500, false, "i", playerid);
}

public OnPlayerEnterDynamicCP(playerid, checkpointid)
{
  if(checkpointid == Trucking_Start)
  {
	   if(Job[playerid] != Trucker) SendWarning(playerid, "You must be a Trucker to start trucking mission!");
	   else
	   {
			ShowPlayerDialog(playerid, 5456, DIALOG_STYLE_MSGBOX, "Trucking Mission", "Would you like to start a Trucking Mission?", "Yes", "Later");
	   }

  }
  else if(checkpointid == Trucking_Start2)
  {
	   if(Job[playerid] != Trucker) SendWarning(playerid, "You must be a Trucker to start trucking mission!");
	   else
	   {
	        if(PlayerInfo[playerid][pTrucking] < 15) SendWarning(playerid, "You must be on Level 2 Trucking to start RSHaul Trucking Mission!");
			else ShowPlayerDialog(playerid, 5457, DIALOG_STYLE_MSGBOX, "Trucking Mission", "Would you like to start a Trucking Mission?", "Yes", "Later");
	   }

  }
  for(new t=0; t<sizeof(v_Mission_cps); t++)
  {
	   if(checkpointid == v_Mission_cps[t])
	   {
		 switch(t)
		 {
		   case 0:
		   {
                SendClientMessage(playerid, 0x317000FF, "{00159E}» Trucking «"DARKBLUE_" Take one of the Trucks to start the trucking mission!");
				for(new g=0; g<sizeof(Tanks); g++)
				{
					SetVehicleParamsForPlayer(Tanks[g], playerid, 1, 0);
				}
				TogglePlayerDynamicCP(playerid, v_Mission_cps[0], false);
		   }
		   case 7:
		   {
                SendClientMessage(playerid, 0x317000FF, "{00159E}» Trucking «"DARKBLUE_" Take one of the Trucks to start the trucking mission!");
				for(new g=0; g<sizeof(Vans); g++)
				{
					SetVehicleParamsForPlayer(Vans[g], playerid, 1, 0);
				}
				TogglePlayerDynamicCP(playerid, v_Mission_cps[7], false);
		   }
		   case 13:
		   {
                SendClientMessage(playerid, 0x317000FF, "{00159E}» Trucking «"DARKBLUE_" Take one of the Trucks to start the trucking mission!");
				for(new g=0; g<sizeof(b_Vans); g++)
				{
					SetVehicleParamsForPlayer(b_Vans[g], playerid, 1, 0);
				}
				TogglePlayerDynamicCP(playerid, v_Mission_cps[13], false);
		   }

		   case 1:
		   {
               SendClientMessage(playerid, 0x317000FF, "{00159E}» Trucking «"DARKBLUE_" Attach one the trailers to your truck!");
		   }
		   case 2..6:
		   {
                  if(GetVehicleTrailer(GetPlayerVehicleID(playerid)))
                  {
				    PlayerInfo[playerid][pTrucking]++;
					new str[128];
				    format(str, sizeof(str), "UPDATE `users` SET `Trucking` = %d WHERE `UserID` = '%d'", PlayerInfo[playerid][pTrucking], PlayerInfo[playerid][UserID]);
				    mysql_query(GTADM, str);

				    SendInfoText(playerid, 3000, "~g~job done");
                    EndTMission(playerid);
                    GivePlayerMoneyEX(playerid, PlayerInfo[playerid][DelevryTime]*100);
                    ScoreTDupdate(playerid, 3);
					if(PlayerInfo[playerid][pTrucking] >= 15) GiveMedal(playerid, 86);
					if(PlayerInfo[playerid][pTrucking] == 15) SendClientMessage(playerid, 0x317000FF, "{00159E}» Trucking «"DARKBLUE_" Congratulations! You can now work in RSHaul Trucking station!");
                  }

		   }
		   case 8..12, 14..18:
		   {
				   PlayerInfo[playerid][pTrucking]++;
				   new str[128];
				   format(str, sizeof(str), "UPDATE `users` SET `Trucking` = %d WHERE `UserID` = '%d'", PlayerInfo[playerid][pTrucking], PlayerInfo[playerid][UserID]);
				   mysql_query(GTADM, str);

                   SendInfoText(playerid, 3000, "~g~job done");
                   EndTMission(playerid);
                   GivePlayerMoneyEX(playerid, PlayerInfo[playerid][DelevryTime]*70);
                   ScoreTDupdate(playerid, 3);
				   if(PlayerInfo[playerid][pTrucking] >= 15) GiveMedal(playerid, 86);
				   if(PlayerInfo[playerid][pTrucking] == 15) SendClientMessage(playerid, 0x317000FF, "{00159E}» Trucking «"DARKBLUE_" Congratulations! You can now work in RSHaul Trucking station!");

		   }
		 }
	   }
  }
  for(new t=0; t<sizeof(v_Mission2_cps); t++)
  {
	   if(checkpointid == v_Mission2_cps[t])
	   {
	     if(t<8)
	     {
	          if(GetVehicleTrailer(GetPlayerVehicleID(playerid)))
	          {
					new v=GetPlayerVehicleID(playerid);
					if(GetVehicleTrailer(v)) SetVehicleToRespawn(GetVehicleTrailer(v));

	                SetPVarInt(playerid, "Trucker2", 4);
	                GameTextForPlayer(playerid, "~y~Get Back to RS Haul", 3000, 4);
	                SendClientMessage(playerid, 0x317000FF, "{00159E}» Trucking «"DARKBLUE_" Deliver the truck back to RS Haul!");

					for(new f=0; f<sizeof(v_Mission2_cps); f++)
					{
						TogglePlayerDynamicCP(playerid, v_Mission2_cps[f], false);
						Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON , v_Mission2_icons[f], E_STREAMER_PLAYER_ID, playerid);
					}
					TogglePlayerDynamicCP(playerid, v_Mission2_cps[8], true);
					Streamer_AppendArrayData(STREAMER_TYPE_MAP_ICON , v_Mission2_icons[8], E_STREAMER_PLAYER_ID, playerid);
	          }
	     }
	     if(t==8)
	     {
				   PlayerInfo[playerid][pTrucking]++;
				   new str[128];
				   format(str, sizeof(str), "UPDATE `users` SET `Trucking` = %d WHERE `UserID` = '%d'", PlayerInfo[playerid][pTrucking], PlayerInfo[playerid][UserID]);
				   mysql_query(GTADM, str);

                   SendInfoText(playerid, 3000, "~g~job done");
                   EndTMission2(playerid);
                   GivePlayerMoneyEX(playerid, PlayerInfo[playerid][DelevryTime]*120);
                   ScoreTDupdate(playerid, 5);
	     }
	   }
  }
  new str3[144];
  if((GetPVarInt(playerid, "MissionProgress")) > 0) MissionCheckpoint(playerid, checkpointid);
  else
  {
	if(checkpointid == ctfcp[0] || checkpointid == ctfcp[1] || checkpointid == ctfcp[2])
	{
		 new k=GetPVarInt(playerid, "inCTF");
		 if(k == 1)
		 {
			 if(Flag1Player == playerid && k == 1)
			 {
			   if(FlagCaptured[1] == 1)
			   {
					 new str22[128];
				     format(str22, sizeof(str22), "{00A15E}» CTF « {13D6B2}Blue Team have brought both flags to their base!");
    		         foreach(new i : Player)
					 {
					   if(GetPVarInt(i, "inCTF")) SendClientMessage(i, -1, str22);
					 }
			         CTF1Score++;
					 if(IsValidDynamicPickup(ctfflag[0])) DestroyDynamicPickup(ctfflag[0]), ctfflag[0]=-1;
					 if(IsValidDynamicPickup(ctfflag[1])) DestroyDynamicPickup(ctfflag[1]), ctfflag[1]=-1;
					 if(IsValidDynamicMapIcon(ctfmapicon[2])) DestroyDynamicMapIcon(ctfmapicon[2]), ctfmapicon[2]=-1;
					 if(IsValidDynamicMapIcon(ctfmapicon[3])) DestroyDynamicMapIcon(ctfmapicon[3]), ctfmapicon[3]=-1;
					 ctfflag[0] = CreateDynamicPickup(2993, 23, CTF_Flag1_Spawn[ctftype][0], CTF_Flag1_Spawn[ctftype][1], CTF_Flag1_Spawn[ctftype][2], 1777);
					 ctfflag[1] = CreateDynamicPickup(2993, 23, CTF_Flag2_Spawn[ctftype][0], CTF_Flag2_Spawn[ctftype][1], CTF_Flag2_Spawn[ctftype][2], 1777);
			  	     Flag1Player=INVALID_PLAYER_ID;
			  	     Flag2Player=INVALID_PLAYER_ID;
			  	     foreach(new i : Player) if(GetPVarInt(i, "inCTF")) CTFSETCOLOR(i), RemovePlayerAttachedObject(i, 4);
			         inFG1=1;
			         inFG2=1;
			         FlagCaptured[0]=0, FlagCaptured[1]=0;

			   }
			   else
			   {
				   new str23[128];
			       format(str23, sizeof(str23), "{00A15E}» CTF « {13D6B2}Blue Team have brought the blue flag back to their base!");
     		       foreach(new i : Player)
                   {
				     if(GetPVarInt(i, "inCTF")) SendClientMessage(i, -1, str23);
				   }
				   Flag1Player=INVALID_PLAYER_ID;

				   if(IsValidDynamicMapIcon(ctfmapicon[2])) DestroyDynamicMapIcon(ctfmapicon[2]), ctfmapicon[2]=-1;

			       ctfflag[0] = CreateDynamicPickup(2993, 23, CTF_Flag1_Spawn[ctftype][0], CTF_Flag1_Spawn[ctftype][1], CTF_Flag1_Spawn[ctftype][2], 1777);
			       CTFSETCOLOR(playerid);
			       inFG1=1;
			       RemovePlayerAttachedObject(playerid, 4);
		       }

			 }
			 else if(Flag2Player == playerid && k==1)
			 {
				   if(inFG1 == 1)
				   {
					 new str24[128];
				     format(str24, sizeof(str24), "{00A15E}» CTF « {13D6B2}Blue Team have brought both flags to their base!");
    		         foreach(new i : Player)
					 {
					   if(GetPVarInt(i, "inCTF")) SendClientMessage(i, -1, str24);
					 }
			         CTF1Score++;
					 if(IsValidDynamicPickup(ctfflag[0])) DestroyDynamicPickup(ctfflag[0]), ctfflag[0]=-1;
					 if(IsValidDynamicPickup(ctfflag[1])) DestroyDynamicPickup(ctfflag[1]), ctfflag[1]=-1;
					 if(IsValidDynamicMapIcon(ctfmapicon[2])) DestroyDynamicMapIcon(ctfmapicon[2]), ctfmapicon[2]=-1;
					 if(IsValidDynamicMapIcon(ctfmapicon[3])) DestroyDynamicMapIcon(ctfmapicon[3]), ctfmapicon[3]=-1;
					 ctfflag[0] = CreateDynamicPickup(2993, 23, CTF_Flag1_Spawn[ctftype][0], CTF_Flag1_Spawn[ctftype][1], CTF_Flag1_Spawn[ctftype][2], 1777);
					 ctfflag[1] = CreateDynamicPickup(2993, 23, CTF_Flag2_Spawn[ctftype][0], CTF_Flag2_Spawn[ctftype][1], CTF_Flag2_Spawn[ctftype][2], 1777);
			  	     Flag1Player=INVALID_PLAYER_ID;
			  	     Flag2Player=INVALID_PLAYER_ID;
			  	     foreach(new i : Player) if(GetPVarInt(i, "inCTF")) CTFSETCOLOR(i), RemovePlayerAttachedObject(i, 4);
			         inFG1=1;
			         inFG2=1;
			         FlagCaptured[0]=0, FlagCaptured[1]=0;
				   }
				   else
				   {
					   new str125[128];
					   format(str125, sizeof(str125), "{00A15E}» CTF « {13D6B2}Blue Team have captured the green flag!");
   		               foreach(new i : Player)
					   {
					     if(GetPVarInt(i, "inCTF")) SendClientMessage(i, -1, str125);
					   }

					   Flag2Player=INVALID_PLAYER_ID;

					   if(IsValidDynamicMapIcon(ctfmapicon[3])) DestroyDynamicMapIcon(ctfmapicon[3]), ctfmapicon[3]=-1;

				       ctfflag[1] = CreateDynamicPickup(2993, 23, CTF_Flag1_Spawn[ctftype][0], CTF_Flag1_Spawn[ctftype][1], CTF_Flag1_Spawn[ctftype][2], 1777);
				       CTFSETCOLOR(playerid);
			           inFG2=0;
			           FlagCaptured[1]=1;
        		       RemovePlayerAttachedObject(playerid, 4);
				   }
		 	 }
		 	 else
		 	 {
		   	 	 if(GetPVarInt(playerid, "inCTF") == 1)
		   	 	 SendClientMessage(playerid, -1, "{00A15E}» CTF « {13D6B2}Capture the enemy's flag and bring it here!");
		 	 }
		 }

	}
	else if(checkpointid == ctfcp[3] || checkpointid == ctfcp[4] || checkpointid == ctfcp[5])
	{
		 new k=GetPVarInt(playerid, "inCTF");
		 if(k == 2)
		 {
			 if(Flag2Player == playerid && k == 2)
			 {
			   if(FlagCaptured[0] == 1)
			   {
				 new str126[128];
			     format(str126, sizeof(str126), "{00A15E}» CTF « {13D6B2}Green Team have brought both flags to their base!");
   		         foreach(new i : Player)
				 {
				   if(GetPVarInt(i, "inCTF")) SendClientMessage(i, -1, str126);
				 }
		         CTF2Score++;
				 if(IsValidDynamicPickup(ctfflag[0])) DestroyDynamicPickup(ctfflag[0]), ctfflag[0]=-1;
				 if(IsValidDynamicPickup(ctfflag[1])) DestroyDynamicPickup(ctfflag[1]), ctfflag[1]=-1;
				 if(IsValidDynamicMapIcon(ctfmapicon[2])) DestroyDynamicMapIcon(ctfmapicon[2]), ctfmapicon[2]=-1;
				 if(IsValidDynamicMapIcon(ctfmapicon[3])) DestroyDynamicMapIcon(ctfmapicon[3]), ctfmapicon[3]=-1;
				 ctfflag[0] = CreateDynamicPickup(2993, 23, CTF_Flag1_Spawn[ctftype][0], CTF_Flag1_Spawn[ctftype][1], CTF_Flag1_Spawn[ctftype][2], 1777);
				 ctfflag[1] = CreateDynamicPickup(2993, 23, CTF_Flag2_Spawn[ctftype][0], CTF_Flag2_Spawn[ctftype][1], CTF_Flag2_Spawn[ctftype][2], 1777);
		  	     Flag1Player=INVALID_PLAYER_ID;
		  	     Flag2Player=INVALID_PLAYER_ID;
		  	     foreach(new i : Player) if(GetPVarInt(i, "inCTF")) CTFSETCOLOR(i), RemovePlayerAttachedObject(i, 4);

		         inFG1=1;
		         inFG2=1;
		         FlagCaptured[0]=0, FlagCaptured[1]=0;
			   }
			   else
			   {
				   new str100[128];
				   format(str100, sizeof(str100), "{00A15E}» CTF « {13D6B2}Green Team have brought the green flag back to their base!");
                   foreach(new i : Player)
				   {
				     if(GetPVarInt(i, "inCTF")) SendClientMessage(i, -1, str100);
				   }
				   Flag2Player=INVALID_PLAYER_ID;

				   if(IsValidDynamicMapIcon(ctfmapicon[3])) DestroyDynamicMapIcon(ctfmapicon[3]), ctfmapicon[3]=-1;

			       ctfflag[1] = CreateDynamicPickup(2993, 23, CTF_Flag2_Spawn[ctftype][0], CTF_Flag2_Spawn[ctftype][1], CTF_Flag2_Spawn[ctftype][2], 1777);
			       CTFSETCOLOR(playerid);
			       inFG2=1;
			       RemovePlayerAttachedObject(playerid, 4);
			   }


			 }
			 else if(Flag1Player == playerid && k==2)
			 {
			   if(inFG2 == 1)
			   {
				 new str99[128];
			     format(str99, sizeof(str99), "{00A15E}» CTF « {13D6B2}Green Team have brought both flags to their base!");
			     foreach(new i : Player)
				 {
				   if(GetPVarInt(i, "inCTF")) SendClientMessage(i, -1, str99);
				 }
		         CTF2Score++;
				 if(IsValidDynamicPickup(ctfflag[0])) DestroyDynamicPickup(ctfflag[0]), ctfflag[0]=-1;
				 if(IsValidDynamicPickup(ctfflag[1])) DestroyDynamicPickup(ctfflag[1]), ctfflag[1]=-1;
				 if(IsValidDynamicMapIcon(ctfmapicon[2])) DestroyDynamicMapIcon(ctfmapicon[2]), ctfmapicon[2]=-1;
				 if(IsValidDynamicMapIcon(ctfmapicon[3])) DestroyDynamicMapIcon(ctfmapicon[3]), ctfmapicon[3]=-1;
				 ctfflag[0] = CreateDynamicPickup(2993, 23, CTF_Flag1_Spawn[ctftype][0], CTF_Flag1_Spawn[ctftype][1], CTF_Flag1_Spawn[ctftype][2], 1777);
				 ctfflag[1] = CreateDynamicPickup(2993, 23, CTF_Flag2_Spawn[ctftype][0], CTF_Flag2_Spawn[ctftype][1], CTF_Flag2_Spawn[ctftype][2], 1777);
		  	     Flag1Player=INVALID_PLAYER_ID;
		  	     Flag2Player=INVALID_PLAYER_ID;
		  	     foreach(new i : Player) if(GetPVarInt(i, "inCTF")) CTFSETCOLOR(i), RemovePlayerAttachedObject(i, 4);

		         inFG1=1;
		         inFG2=1;
		         FlagCaptured[0]=0, FlagCaptured[1]=0;
			   }
			   else
			   {
				   new str11[128];
				   format(str11, sizeof(str11), "{00A15E}» CTF « {13D6B2}Green Team have captured the blue flag!");
  		           foreach(new i : Player)
				   {
				     if(GetPVarInt(i, "inCTF")) SendClientMessage(i, -1, str11);
				   }

				   Flag1Player=INVALID_PLAYER_ID;

				   if(IsValidDynamicMapIcon(ctfmapicon[2])) DestroyDynamicMapIcon(ctfmapicon[2]), ctfmapicon[2]=-1;

			       ctfflag[0] = CreateDynamicPickup(2993, 23, CTF_Flag2_Spawn[ctftype][0], CTF_Flag2_Spawn[ctftype][1], CTF_Flag2_Spawn[ctftype][2], 1777);
			       CTFSETCOLOR(playerid);
	               inFG1=0;
		           FlagCaptured[0]=1;
		           RemovePlayerAttachedObject(playerid, 4);
			   }

			 }
			 else
			 {
			   if(GetPVarInt(playerid, "inCTF") == 2)
			   SendClientMessage(playerid, -1, "{00A15E}» CTF « {13D6B2}Capture the enemy's flag and bring it here!");
			 }
		 }
    }
/*
	else if(checkpointid == FlappyCarCP)//flappycarshit
	{
      SetPlayerVirtualWorldEX(playerid, 0);
      ResetPlayerWeaponsEX(playerid);
	  LoadPlayerCoords(playerid);
      new str[128];
      format(str, sizeof(str), "{F4BBFF}» Flappy Car « {D19FE8}%s has won the Flappy Car Challenge", pName[playerid]);
      SendClientMessageToAll(0xF2EE05FF, str);
      GivePlayerMoneyEX(playerid, 50000);
      PlayerInfo[playerid][FCWins]++;
      new qqr[128];
      format(qqr, sizeof(qqr), "UPDATE `users` SET `FCWins` = %d WHERE `UserID` = '%d'", PlayerInfo[playerid][FCWins], PlayerInfo[playerid][UserID]);
      mysql_query(GTADM, qqr);
      if(PlayerInfo[playerid][FCWins] >= 10) GiveMedal(playerid, 97);
      ScoreTDupdate(playerid, 5);
      DeletePVar(playerid, "inflappy");
      DestroyVehicle(GetPlayerVehicleID(playerid));
      if(IsPlayerInAnyVehicle(playerid)) RemovePlayerFromVehicle(playerid);
      TogglePlayerControllable(playerid, 1);
      new countzz=CountFC();
      if(countzz == 0)
      {
        for(new v = 1; v != MAX_VEHICLES; v++)
        {
          new wa=GetVehicleVirtualWorld(v);
          if(wa == 66699 || wa == 66700 || wa == 66701 || wa == 66702 || wa == 66703 || wa == 66704 && GetVehicleModel(v) == 441)
          {
            DestroyVehicle(v);
          }
        }
      }
    }*/
    if(checkpointid == VipGarCP)
    {
		new v=GetPlayerVehicleID(playerid);
        if(v == PlayerCar(playerid))
        {
		  //if(pLevel[playerid][driving] >= 40 || PlayerInfo[playerid][IsVIP] > 0 || IsAdmin(playerid, 1))
		  if(PlayerInfo[playerid][IsVIP] > 0 || IsAdmin(playerid, 1))
		  {
			  new k=GetVehicleModel(v);
			  if( k == 402 || k == 411)
			  {
                 SetVehiclePos(v, 1519.0002, -1472.9554, 10.2528);
                 SetVehicleZAngle(v, 90.4949);
				 SetPlayerCameraPos(playerid, 1514.5947, -1478.9166, 12.8669);
                 SetPlayerCameraLookAt(playerid, 1515.1462, -1478.0837, 12.2119, CAMERA_MOVE);
                 PlayAudioStreamForPlayer(playerid, "http://dl.dropbox.com/u/52869044/Drift_GetLow.mp3");
				 SetPVarInt(playerid, "CAM", 1);
				 SetPVarInt(playerid, "GragageColor", 1);
				 if(k==411)
				 {
                    PlayerTextDrawSetString(playerid, GarageTD[playerid][2], "~l~Spoilers");
                    PlayerTextDrawSetString(playerid, GarageTD[playerid][3], "~l~Exhaust");
                    PlayerTextDrawSetString(playerid, GarageTD[playerid][5], "~l~Side Skirts");
                    PlayerTextDrawSetString(playerid, GarageTD[playerid][6], "~l~Front Bumpers");
                    PlayerTextDrawSetString(playerid, GarageTD[playerid][7], "~l~Rear Bumpers");
                    PlayerTextDrawSetString(playerid, GarageTD[playerid][8], "~l~Hood Mark");
				 }
				 else if(k==402)
				 {
                    PlayerTextDrawSetString(playerid, GarageTD[playerid][2], "~l~Wheels");
                    PlayerTextDrawSetString(playerid, GarageTD[playerid][3], "~l~Exhaust");
                    PlayerTextDrawSetString(playerid, GarageTD[playerid][5], "~l~Side Skirts");
                    PlayerTextDrawSetString(playerid, GarageTD[playerid][6], "~l~Front Bumpers");
                    PlayerTextDrawSetString(playerid, GarageTD[playerid][7], "~l~Rear Bumpers");
                    PlayerTextDrawSetString(playerid, GarageTD[playerid][8], "_");

				 }
				 for(new x=0; x<21; x++)
				 {
       				 PlayerTextDrawShow(playerid, GarageTD[playerid][x]);
				 }
				 SelectTextDraw(playerid, 0xCCFF99FF);
			  }
			  else SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Vip Tuning Garage supports only infernus and buffalo!");
		  }
		  else SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be a VIP Member tune your vehicle");
        }
        else SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be inside your own vehicle enter the tuning menu");
    }
	else if(checkpointid == PhoneCP)
	{
		  TogglePlayerControllable2(playerid, 0);
          ShowMenuForPlayer(PhoneMenu, playerid);
	}
	else if(checkpointid == CookCP) /*ShowMenuForPlayer(CookMenu, playerid), */ShowMarketPPMenu(playerid), TogglePlayerControllable2(playerid, 0);
	else if(checkpointid == VIPCP) /*ShowMenuForPlayer(VipMenu, playerid), */ShowMarketVPMenu(playerid), TogglePlayerControllable2(playerid, 0);
	//else if(checkpointid == VIPCP && PlayerInfo[playerid][IsVIP] == 0) return SendClientMessage(playerid, RED, "» Error « {BABABA}Only VIP's can access this market.");
	else if(checkpointid == DivingCP || checkpointid == DivingCP2)
	{
            InDive[playerid]=0;
            SetPlayerVirtualWorldEX(playerid, 0);
            ResetPlayerWeaponsEX(playerid);
			LoadPlayerCoords(playerid);
  	        new str[128];
  	        format(str, sizeof(str), "{4A9EC2}» Diving «{294FC2} %s has won the Sky Diving Challenge", pName[playerid]);
 	        SendClientMessageToAll(0xF2EE05FF, str);
  	        PlayerInfo[playerid][diveswon]++;
		    new qqr[128];
	        format(qqr, sizeof(qqr), "UPDATE `users` SET `diveswon` = %d WHERE `UserID` = '%d'", PlayerInfo[playerid][diveswon], PlayerInfo[playerid][UserID]);
	        mysql_query(GTADM, qqr);
			GivePlayerMoneyEX(playerid, 50000);
			ScoreTDupdate(playerid, 5);
			GiveMedal(playerid, 65);
			if(checkpointid == DivingCP && EventType==1000 && EventStarted == 1) EventWinner(playerid);
			if(checkpointid == DivingCP2 && EventType==1001 && EventStarted == 1) EventWinner(playerid);

	}
	else if(checkpointid == StuntCP[playerid])
	{
	   if(STUNTING[playerid] == 1)
	   {
            DestroyDynamicCP(StuntCP[playerid]);
			new rTime=GetTickCount() - STUNTTk[playerid];
			new count=0;
			new rc=StuntMap[playerid]-1;
			for(new d=0;d<5;d++)
			{
			 if((rTime < sRaceRecords[rc][toptime][d]) || (sRaceRecords[rc][toptime][d] == 0))
			   count++;
			}
			new p=6-count;

			STUNTING[playerid] = 2;
			ShowMenuForPlayer(StuntMenu, playerid);
			PlayerTextDrawHide(playerid, pInfoTD[playerid]);
			new str2[256];
			switch(StuntMap[playerid])
			{
			   case 1:
			   {
				format(str2, sizeof(str2), "{A6856A}» Stunt «{96A66A} %s has finished the STF Stunt Map", pName[playerid]);
				format(str3, sizeof(str3), "{A6856A}» Stunt «{96A66A} %s has set a new STF Stunt Map Record #%d", pName[playerid], p);
				GiveMedal(playerid, 62);
			   }
			   case 2:
			   {
				format(str2, sizeof(str2), "{A6856A}» Stunt «{96A66A} %s has finished the 'WD' Stunt Map", pName[playerid]);
				format(str3, sizeof(str3), "{A6856A}» Stunt «{96A66A} %s has set a new 'WD' Stunt Map Record #%d", pName[playerid], p);
			   }
			   case 3:
			   {
				format(str2, sizeof(str2), "{A6856A}» Stunt «{96A66A} %s has finished the 'WTF' Stunt Map", pName[playerid]);
				format(str3, sizeof(str3), "{A6856A}» Stunt «{96A66A} %s has set a new 'WTF' Stunt Map Record #%d", pName[playerid], p);
			   }
			   case 4:
			   {
				format(str2, sizeof(str2), "{A6856A}» Stunt «{96A66A} %s has finished the 'MR' Stunt Map", pName[playerid]);
				format(str3, sizeof(str3), "{A6856A}» Stunt «{96A66A} %s has set a new 'MR' Stunt Map Record #%d", pName[playerid], p);
			   }
			   case 5:
			   {
				format(str2, sizeof(str2), "{A6856A}» Stunt «{96A66A} %s has finished the 'HR' Stunt Map", pName[playerid]);
				format(str3, sizeof(str3), "{A6856A}» Stunt «{96A66A} %s has set a new 'HR' Stunt Map Record #%d", pName[playerid], p);
			   }
			}
			SendClientMessageToAll(0xA6856AFF, str2);
			new str[64];
			format(str, 64, "~g~%s", ConvertTime(GetTickCount() - STUNTTk[playerid]));
			SendInfoText(playerid, 5000, str);

			new Float:x, Float:y, Float:z;
			new Float:x2, Float:y2, Float:z2;
			new Float:x3, Float:y3, Float:z3;
			GetPlayerPos(playerid, x, y, z);
			GetXYInFrontOfPlayer(playerid, x, y, 5.0);

			GetPlayerCameraPos(playerid, x2, y2, z2);

			GetPlayerPos(playerid, x3, y3, z3);
			InterpolateCameraPos(playerid, x2, y2, z2, x2+20, y2+20, z2+20, 5000, CAMERA_MOVE);
			InterpolateCameraLookAt(playerid, x, y, z, x3, y3, z3, 5000, CAMERA_MOVE);

			if((GetPVarInt(playerid, "LOGGED")) != 2)
			{
				if(count > 0)
				{
					SendClientMessageToAll(0xA6856AFF, str3);
					new Query[256];
					format(Query, sizeof(Query), "UPDATE `sracerecords` SET `Top%dPlayer` = '%s', `Top%dRecord` = %d WHERE `RaceID` = %d", p, pEscName[playerid], p, rTime, rc);
					mysql_query(GTADM, Query);
					sRaceRecords[rc][toptime][p-1] =rTime;
                    //GivePP(playerid, 1);

					switch(count)
					{
					  case 5:
					  {
					      SendInfoText(playerid, 3000, "~y~new record~n~~h~reward~h~ 25000$");
					      ScoreTDupdate(playerid, 2);
					  	  GivePlayerMoneyEX(playerid, 25000);
					  	  format(sRaceRecords[rc][Top1Player], 24, "%s", pName[playerid]);
					  	  GivePP(playerid, 1);
					  }
					  case 4:
					  {
					      SendInfoText(playerid, 3000, "~y~new record~n~~h~reward~h~ 12500$");
					      ScoreTDupdate(playerid, 2);
					  	  GivePlayerMoneyEX(playerid, 25000);
					  	  format(sRaceRecords[rc][Top2Player], 24, "%s", pName[playerid]);
					  }
					  case 3:
					  {
					      SendInfoText(playerid, 3000, "~y~new record~n~~h~reward~h~ 10000$");
					      ScoreTDupdate(playerid, 2);
					  	  GivePlayerMoneyEX(playerid, 25000);
					  	  format(sRaceRecords[rc][Top3Player], 24, "%s", pName[playerid]);
					  }
					  case 2:
					  {
					      SendInfoText(playerid, 3000, "~y~new record~n~~h~reward~h~ 5000$");
					      ScoreTDupdate(playerid, 2);
					  	  GivePlayerMoneyEX(playerid, 25000);
					  	  format(sRaceRecords[rc][Top4Player], 24, "%s", pName[playerid]);
					  }
					  case 1:
					  {
					      SendInfoText(playerid, 3000, "~y~new record~n~~h~reward~h~ 2000$");
					      ScoreTDupdate(playerid, 2);
					  	  GivePlayerMoneyEX(playerid, 25000);
					  	  format(sRaceRecords[rc][Top5Player], 24, "%s", pName[playerid]);
					  }
					}

				}

			}
	   }
	   else SendClientMessage(playerid, GRAY, "- Type (/sStart) to start the stunt race");
	}
    else if(checkpointid == WeaponsCP || checkpointid == WeaponsCP2 || checkpointid == WeaponsCP3 || checkpointid == WeaponsCP4 || checkpointid == WeaponsCP5)
    {
	   ShowWeaponDialog(playerid);
    }
    else if(checkpointid == Clothes[0])
    {
		ShowPlayerDialog(playerid, 7512, DIALOG_STYLE_LIST, "Binco", "{1BA8E0}Buy Glasses\n{1BA8E0}Sell Glasses", "Select", "Exit");
    }
    else if(checkpointid == Clothes[1])
    {
		ShowPlayerDialog(playerid, 7513, DIALOG_STYLE_LIST, "Binco", "{1BA8E0}Buy Cap\n{1BA8E0}Sell Cap", "Select", "Exit");
    }
    else if(checkpointid == ExportCp[0] || checkpointid == ExportCp[1] || checkpointid == ExportCp[2])
    {
 	  new str[256];
      new v = GetPlayerVehicleID(playerid);
	  if((GetVehicleModel(v) == ExportCarid) && (GetPlayerState(playerid) == 2))
      {
       if(SCar[v] ==1 || VehicleInfo[v][Owned] != 0 || AdminCar[v] ==1) SendClientMessage( playerid, RED, ""RED_"» Error « {BABABA}You cant export this vehicle" );
       else if (!NoExportWaiting() && pLevel[playerid][driving] < 20 && ( GetTickCount() - TickCount[playerid][export] ) < 120000 ) SendClientMessage( playerid, RED, ""RED_"» Error « {BABABA}You can't export that often." );
       else if (!NoExportWaiting() && pLevel[playerid][driving] >= 20 && ( GetTickCount() - TickCount[playerid][export] ) < 80000 ) SendClientMessage( playerid, RED, ""RED_"» Error « {BABABA}You can't export that often." );
       else if(playerid == PowerUpPlayer[1] && ( GetTickCount() - TickCount[playerid][export] ) < 120000 ) SendClientMessage( playerid, RED, ""RED_"» Error « {BABABA}You can't export that often." );
	   else
	   {
           InCar[playerid] = 0;
		   if(EventType==444 && EventStarted == 1)
		   {
		     EventExports[playerid]++;
		     if(EventExports[playerid] >= 5) EventWinner(playerid);
	       }
		   if(ExportCarid==601) GiveMedal(playerid, 56);
	       TickCount[playerid][export] = GetTickCount();
	       UpdateSkills(playerid, driving, 500);

		   new Float:health;
	   	   GetVehicleHealth(v, health);
	  	   new ExportMoney=GetCarPriceFromID(GetVehicleModel(v))/1000*floatround(health);


		   if(PowerUpPlayer[1]==playerid) GivePlayerMoneyEX(playerid, ExportMoney+floatround(ExportMoney*0.25), 1);
	  	   else GivePlayerMoneyEX(playerid, ExportMoney, 1);
		   SetVehicleToRespawn(v);

		   if(EventType==444 && EventStarted == 1) format(str, sizeof(str), "{E8AF02} » Event « {E8D902}%s has exported a %s {E8AF02}[%d/5]", pName[playerid], ExportCar, EventExports[playerid]);//new col
		   else format(str, sizeof(str), "{337D65}» Export « {4A9EC2}%s has exported a %s", pName[playerid], ExportCar);//new col
		   SendClientMessageToAll(PURPLE, str);

	       ScoreTDupdate(playerid, 2);

	       KillTimer(ExportTimer);
		   ExportTimer=-1;
		   Export(1);
	       PlayerInfo[playerid][pExported] ++;
	       PlayerInfo[playerid][inExport]++;
		   if(PlayerInfo[playerid][inExport] == 20) GiveMedal(playerid, 75);
		   new Query[128];
	       format(Query, sizeof(Query), "UPDATE `users` SET `Exported` = %d WHERE `Name` = '%s'", PlayerInfo[playerid][pExported], pEscName[playerid]);
	       mysql_query(GTADM, Query);
       }
      }
  	  else for(new x=0; x<sizeof(ExportTD); x++) TextDrawShowForPlayer(playerid, ExportTD[x]);
    }
    for(new pr = 0; pr <CS_MAPS; pr++)
    {
	  if(checkpointid == CSCPs[pr])
	  {
   	   if(GetPVarInt(playerid, "CS") == 2 && csplanted == 0 && canhold == -255)
	   {
			 SendClientMessage(playerid, GRAY, "Hold ~k~~VEHICLE_ENTER_EXIT~ to plant the bomb!");
	   }
	   else if(GetPVarInt(playerid, "CS") == 1 && csplanted == 1)
	   {
			 SendClientMessage(playerid, GRAY, "Hold ~k~~VEHICLE_ENTER_EXIT~ to defuse the bomb!");
	   }
	  }
    }
    if(IsInDuelCP(playerid) != -255)
    {
	  new str[128];
	  new p=IsInDuelCP(playerid);

	  PlayerTextDrawSetStringEX(playerid, PropTD[playerid][5], "_~n~_~n~_");
      format(str, sizeof(str), "~l~Map:~w~ %s", DuelCoords[p][xName]);
	  PlayerTextDrawSetStringEX(playerid, PropTD[playerid][0], str);
	  PlayerTextDrawSetStringEX(playerid, PropTD[playerid][1], "~l~Type ~r~/Duel~l~ to start a duel");
      PlayerTextDrawSetStringEX(playerid, PropTD[playerid][7], "~g~duel");

	  PlayerTextDrawShow(playerid, PropTD[playerid][0]);
	  PlayerTextDrawShow(playerid, PropTD[playerid][1]);
	  PlayerTextDrawShow(playerid, PropTD[playerid][7]);
	  PlayerTextDrawShow(playerid, PropTD[playerid][5]);
	  SetPVarInt(playerid, "InDuelCP", true);
    }

    for(new i=0; i<5; i++)
    {
       if(checkpointid == BankCP[i])
  	   {
//          TogglePlayerControllable2(playerid, 0);
	      ShowBank1(playerid);
	   }
    }
//
    for(new i=0; i<9; i++)
    {
     if(checkpointid == CarDealerCP[i])
     {
		/*if(i == 0 && PlayerInfo[playerid][pScore] > 400) ShowCarDealerMenu(playerid), TogglePlayerControllable2(playerid, 0);
		else if(i == 1 && PlayerInfo[playerid][pScore] > 750) ShowCarDealerMenu(playerid), TogglePlayerControllable2(playerid, 0);
		else if(i == 2 && PlayerInfo[playerid][pScore] > 1200) ShowCarDealerMenu(playerid), TogglePlayerControllable2(playerid, 0);
		else if(i == 3 && PlayerInfo[playerid][pScore] > 2000) ShowCarDealerMenu(playerid), TogglePlayerControllable2(playerid, 0);
		else if(i == 4 && PlayerInfo[playerid][pScore] > 3000) ShowCarDealerMenu(playerid), TogglePlayerControllable2(playerid, 0);
		else if(i == 5 && PlayerInfo[playerid][pScore] > 4000) ShowCarDealerMenu(playerid), TogglePlayerControllable2(playerid, 0);
		else if(i == 6 && PlayerInfo[playerid][pScore] > 6500) ShowCarDealerMenu(playerid), TogglePlayerControllable2(playerid, 0);
	    else if(i == 7 && PlayerInfo[playerid][pScore] > 8000) ShowCarDealerMenu(playerid), TogglePlayerControllable2(playerid, 0);
		else if(i == 8 && PlayerInfo[playerid][IsVIP] > 0 && PlayerInfo[playerid][premiumItems][3] > 0) ShowCarDealerMenu(playerid);//ShowMenuForPlayer(Cars[9], playerid), TogglePlayerControllable2(playerid, 0);
		else if(i == 8 && PlayerInfo[playerid][IsVIP] < 1 && PlayerInfo[playerid][premiumItems][3] < 1) return SendWarning(playerid, "{BABABA}You must buy cars 9 teleport from market.");
		//if score less...
		if(i == 0 && PlayerInfo[playerid][pScore] < 400) SendWarning(playerid, "{BABABA}You need atleast 400 score to buy cars from this dealer.");
		else if(i == 1 && PlayerInfo[playerid][pScore] < 750) SendWarning(playerid, "{BABABA}You need atleast 750 score to buy cars from this dealer.");
		else if(i == 2 && PlayerInfo[playerid][pScore] < 1200) SendWarning(playerid, "{BABABA}You need atleast 1200 score to buy cars from this dealer.");
		else if(i == 3 && PlayerInfo[playerid][pScore] < 2000) SendWarning(playerid, "{BABABA}You need atleast 2000 score to buy cars from this dealer.");
		else if(i == 4 && PlayerInfo[playerid][pScore] < 3000) SendWarning(playerid, "{BABABA}You need atleast 3000 score to buy cars from this dealer.");
		else if(i == 5 && PlayerInfo[playerid][pScore] < 4000) SendWarning(playerid, "{BABABA}You need atleast 4000 score to buy cars from this dealer.");
		else if(i == 6 && PlayerInfo[playerid][pScore] < 6500) SendWarning(playerid, "{BABABA}You need atleast 6500 score to buy cars from this dealer.");
	    else if(i == 7 && PlayerInfo[playerid][pScore] < 8000) return SendWarning(playerid, "{BABABA}You need atleast 8000 score to buy cars from this dealer.");
		else if(i == 8 && PlayerInfo[playerid][IsVIP] < 1 && PlayerInfo[playerid][premiumItems][3] < 1) SendWarning(playerid, "{BABABA}You need to buy this cars dealer permission at the market.");//ShowMenuForPlayer(Cars[9], playerid), TogglePlayerControllable2(playerid, 0);
		//
		else
		{
          ShowCarDealerMenu(playerid), TogglePlayerControllable2(playerid, 0);
         // ShowMenuForPlayer(Cars[0], playerid), TogglePlayerControllable2(playerid, 0);*/
        if(i == 0 && PlayerInfo[playerid][pScore] < 400) ShowMenuForPlayer(Cars[10], playerid), TogglePlayerControllable2(playerid, 0);
		else if(i == 1 && PlayerInfo[playerid][pScore] < 750) ShowMenuForPlayer(Cars[10], playerid), TogglePlayerControllable2(playerid, 0);
		else if(i == 2 && PlayerInfo[playerid][pScore] < 1200) ShowMenuForPlayer(Cars[10], playerid), TogglePlayerControllable2(playerid, 0);
		else if(i == 3 && PlayerInfo[playerid][pScore] < 2000) ShowMenuForPlayer(Cars[10], playerid), TogglePlayerControllable2(playerid, 0);
		else if(i == 4 && PlayerInfo[playerid][pScore] < 3000) ShowMenuForPlayer(Cars[10], playerid), TogglePlayerControllable2(playerid, 0);
		else if(i == 5 && PlayerInfo[playerid][pScore] < 4000) ShowMenuForPlayer(Cars[10], playerid), TogglePlayerControllable2(playerid, 0);
		else if(i == 6 && PlayerInfo[playerid][pScore] < 6500) ShowMenuForPlayer(Cars[10], playerid), TogglePlayerControllable2(playerid, 0);
	    else if(i == 7 && PlayerInfo[playerid][pScore] < 8000) ShowMenuForPlayer(Cars[10], playerid), TogglePlayerControllable2(playerid, 0);
		else if(i == 8 && PlayerInfo[playerid][IsVIP] < 1 && PlayerInfo[playerid][premiumItems][3] < 1) ShowMenuForPlayer(Cars[10], playerid), TogglePlayerControllable2(playerid, 0);
		else
		{
          ShowMenuForPlayer(Cars[0], playerid), TogglePlayerControllable2(playerid, 0);
        }
     }
    }
  }
  return 1;
}

public OnPlayerLeaveDynamicCP(playerid, checkpointid)
{
 if(checkpointid == ExportCp[0] || checkpointid == ExportCp[1] || checkpointid == ExportCp[2])
 {
   for(new x=0; x<sizeof(ExportTD); x++) TextDrawHideForPlayer(playerid, ExportTD[x]);
 }
 if(GetPVarInt(playerid, "InDuelCP"))
 {
	DeletePVar(playerid, "InDuelCP");
    for(new x=0; x<8; x++) PlayerTextDrawHide(playerid, PropTD[playerid][x]);
 }
 return 1;
}
public OnPlayerSelectedMenuRow(playerid, row)
{
    TogglePlayerControllable2(playerid, 1);
	new Menu:current;
    current = GetPlayerMenu(playerid);
    if(current == PhoneMenu)
    {
		if(PlayerInfo[playerid][pCook] < 3) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}you dont have enough PP Points!");
		else
		{
			new bought, money=GetPlayerMoneyEx(playerid);
			switch(row)
			{
				case 0, 1:
				{
	            	if(money < 2450000) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You dont have enough money!");
        			else pPhone[playerid]=row+1, bought=1, GivePlayerMoneyEX(playerid, -2450000);
				}
				default:
				{
	            	if(money < 3000000) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You dont have enough money!");
        			else pPhone[playerid]=row+1, bought=1, GivePlayerMoneyEX(playerid, -3000000);
				}
			}
			if(bought == 1)
			{
                GivePP(playerid, -3);
				new str2[300], str[800];
				format(str2, sizeof(str2), ""GREENBLUE_"Congratulations , You have bought a new Cellphone\nYour Phone Number is {FFFFFF}%s\n\n"LIGHTYELLOW_"Available Commands:\n"LIGHTYELLOW_"/Phone -{FFFFFF} to withdraw your phone\n"LIGHTYELLOW_"/AddPhoneContact - {FFFFFF}To save a contact in your phone", GetPhoneNumber(playerid));
				format(str, sizeof(str), "%s\n"LIGHTYELLOW_"/DeletePhoneContact - {FFFFFF}To remove your saved contacts\n"LIGHTYELLOW_"/MyPhoneNumber - {FFFFFF}To show your phone number\n"LIGHTYELLOW_"/Pickup - {FFFFFF}To answer a phone call\n"LIGHTYELLOW_"/Reject - {FFFFFF}To reject a phone call\n"LIGHTYELLOW_"Press ALT (Walk Key) During a phone call to hang up", str2);
				ShowPlayerDialog(playerid, 5421, DIALOG_STYLE_MSGBOX, "Phone bought", str, "Ok", "");
				format(str, sizeof(str), "UPDATE `users` SET  `Mobile` =  '%d' WHERE  `UserID` =%d", pPhone[playerid], PlayerInfo[playerid][UserID]);
				mysql_query(GTADM, str);
			}
		}
    }
	else if(current == CookMenu)
	{
		if(PlayerInfo[playerid][pCook] <= 0) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}you dont have any PP Points!");
		else
		{
			switch(row)
			{
				case 0:
				{
					if(PlayerInfo[playerid][pCook] < 50) return SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You dont have enough Premium Points to buy this item");
					ShowPlayerDialog(playerid, 8777, DIALOG_STYLE_INPUT, "Premium SHOP", ""GRAY_"Enter Your New HeadText Below\n"GRAY_"Colors:\n{FFFFFF}~w~ WHITE\n{FF0000}~r~ RED \n{0000FF} ~b~BLUE\n{12DE00}~g~ GREEN\n{EA00FF}~p~ PINK\n{FFEE00}~y~ YELLOW\n{FF9100}~o~ ORANGE\n{00E5FF}~lb~ LIGHT BLUE\n"lime2"~lg~ LIME\n{FFBFFA}~lp~ LIGHT PINK\n{403E40}~l~ BLACK", "Set", "Exit");
				}
				case 1:
				{
					if(PlayerInfo[playerid][pCook] < 20) return SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You dont have enough Premium Points to buy this item");
					if(PlayerInfo[playerid][premiumItems][0] == 1) return SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You have already bought this item");
		            ShowPlayerDialog(playerid, 8778, DIALOG_STYLE_MSGBOX, "Premium SHOP", "Are you sure you want to buy this item for "RED_"20 Premium Points ?", "Yup", "Nop");

				}
				case 2:
				{
					if(PlayerInfo[playerid][pCook] < 20) return SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You dont have enough Premium Points to buy this item");
					if(PlayerInfo[playerid][premiumItems][1] == 1) return SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You have already bought this item");
		            ShowPlayerDialog(playerid, 8779, DIALOG_STYLE_MSGBOX, "Premium SHOP", "Are you sure you want to buy this item for "RED_"20 Premium Points ?", "Yup", "Nop");

				}
				case 3:
				{
					if(PlayerInfo[playerid][pCook] < 40) return SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You dont have enough Premium Points to buy this item");
					if(PlayerInfo[playerid][premiumItems][2] == 1) return SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You have already bought this item");
		            ShowPlayerDialog(playerid, 8780, DIALOG_STYLE_MSGBOX, "Premium SHOP", "Are you sure you want to buy this item for "RED_"40 Premium Points ?", "Yup", "Nop");
				}
				case 4:
				{
					if(PlayerInfo[playerid][pCook] < 50) return SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You dont have enough Premium Points to buy this item");
					if(PlayerInfo[playerid][premiumItems][3] == 1) return SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You have already bought this item");
		            ShowPlayerDialog(playerid, 8781, DIALOG_STYLE_MSGBOX, "Premium SHOP", "Are you sure you want to buy this item for "RED_"50 Premium Points ?", "Yup", "Nop");
				}
				case 5: ShowPlayerDialog(playerid, 8782, DIALOG_STYLE_MSGBOX, "Premium SHOP", ""GRAY_"Are you sure you want to sell "RED_"1 Premium Point for"GREEN_" 1000000$ "GRAY_"(1mil)?", "Yup", "Nop");
				case 6: ShowPlayerDialog(playerid, 8783, DIALOG_STYLE_MSGBOX, "Premium SHOP", "Are you sure you want to sell "RED_"1 Premium Point for "GREEN_"20 Score Points"GRAY_" ?", "Yup", "Nop");
			}
		}
	}
	else if(current == VipMenu)
	{
		if(PlayerInfo[playerid][IsVIP] == 0) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}you are not a VIP member use (/VIP) for more info");
		else
		{
			switch(row)
			{
				case 0:
				{
					if(PlayerInfo[playerid][pVip] < 5) return SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You dont have enough VIP Points to buy this item");
					if(PlayerInfo[playerid][VipItems][0] == 1) return SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You have already bought tis item");
                    ShowPlayerDialog(playerid, 8761, DIALOG_STYLE_MSGBOX, "VIP SHOP", "Are you sure you want to buy this item for "RED_"5 VIP POINTS ?", "Yup", "Nop");
				}
				case 1:
				{
                    ShowPlayerDialog(playerid, 8762, DIALOG_STYLE_INPUT, "VIP SHOP", ""GRAY_"Enter Your New HeadText Below\n"GRAY_"Colors:\n{FFFFFF}~w~ WHITE\n{FF0000}~r~ RED \n{0000FF} ~b~BLUE\n{12DE00}~g~ GREEN\n{EA00FF}~p~ PINK\n{FFEE00}~y~ YELLOW\n{FF9100}~o~ ORANGE\n{00E5FF}~lb~ LIGHT BLUE\n"lime2"~lg~ LIME\n{FFBFFA}~lp~ LIGHT PINK\n{403E40}~l~ BLACK", "Set", "Exit");
				}
				case 2:
				{
					if(PlayerInfo[playerid][pVip] < 5) return SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You dont have enough VIP Points to buy this item");
					if(PlayerInfo[playerid][VipItems][1] == 1) return SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You have already bought tis item");
                    ShowPlayerDialog(playerid, 8763, DIALOG_STYLE_MSGBOX, "VIP SHOP", "Are you sure you want to buy this item for "RED_"5 VIP POINTS ?", "Yup", "Nop");

				}
				case 3:
				{
					if(PlayerInfo[playerid][pVip] < 3) return SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You dont have enough VIP Points to buy this item");
					if(PlayerInfo[playerid][VipItems][2] == 1) return SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You have already bought this item");
                    ShowPlayerDialog(playerid, 8764, DIALOG_STYLE_MSGBOX, "VIP SHOP", ""GRAY_"Are you sure you want to buy this item for "RED_"5 VIP POINTS "GRAY_"?", "Yup", "Nop");

				}
				case 4:
				{
					if(PlayerInfo[playerid][pVip] < 4) return SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You dont have enough VIP Points to buy this item");
					if(PlayerInfo[playerid][VipItems][3] == 1) return SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You have already bought tis item");
                    ShowPlayerDialog(playerid, 8765, DIALOG_STYLE_MSGBOX, "VIP SHOP", ""GRAY_"Are you sure you want to buy this item for "RED_"5 VIP POINTS "GRAY_"?", "Yup", "Nop");

				}
				case 5:
				{
					if(PlayerInfo[playerid][pVip] <= 0) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}you dont have any VIP-Points");
					else ShowPlayerDialog(playerid, 8766, DIALOG_STYLE_MSGBOX, "VIP SHOP", ""GRAY_"Are you sure you want to sell "RED_"1 VIP POINTS for"GREEN_" 200 Score Points "GRAY_"?", "Yup", "Nop");
				}
                case 6:
				{
					if(PlayerInfo[playerid][pVip] <= 0) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}you dont have any VIP-Points");
				 	else ShowPlayerDialog(playerid, 8767, DIALOG_STYLE_MSGBOX, "VIP SHOP", ""GRAY_"Are you sure you want to sell "RED_"1 VIP POINTS for"GREEN_" 30000000$ "GRAY_"(30mil)?", "Yup", "Nop");
				}
				case 7:
				{
					if(PlayerInfo[playerid][pVip] <= 0) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}you dont have any VIP-Points");
				  	else ShowPlayerDialog(playerid, 8768, DIALOG_STYLE_MSGBOX, "VIP SHOP", "Are you sure you want to sell "RED_"1 VIP POINT for "GREEN_"100 Premium Points"GRAY_" ?", "Yup", "Nop");
				}
			}
		}
	}
    else if(current == StuntMenu)
    {
       PlayerTextDrawHide(playerid, pInfoTD[playerid]);
	   if(STUNTING[playerid] > 0)
	   {
		new ah;
		if(row == 0)
		{
			switch(StuntMap[playerid])
			{
			   case 1:
			   {
					ah=CreateVehicle(411, 5448.4287, -2215.0029, 3.3001, 0.0000, -1, -1, 1);
                    ResetCarInfo(ah);
					AdminCar[ah]=1;
					VehicleInfo[ah][Player]=INVALID_PLAYER_ID;
					SetVehicleVirtualWorld(ah, 19888);
					switch(random(7))
					{
						case 0: SetPlayerPosEx(playerid, 5448.4287, -2215.0029, 3.3001, 0.0000, 0), SetVehiclePos(ah, 5448.4287, -2215.0029, 3.3001);
						case 1: SetPlayerPosEx(playerid, 5422.2339, -2214.7332, 3.3001, 0.0000, 0), SetVehiclePos(ah, 5422.2339, -2214.7332, 3.3001);
						case 2: SetPlayerPosEx(playerid, 5425.9829, -2214.6785, 3.3001, 0.0000, 0), SetVehiclePos(ah, 5425.9829, -2214.6785, 3.3001);
						case 3: SetPlayerPosEx(playerid, 5430.5776, -2214.6116, 3.3001, 0.0000, 0), SetVehiclePos(ah, 5430.5776, -2214.6116, 3.3001);
						case 4: SetPlayerPosEx(playerid, 5434.9102, -2214.6047, 3.3001, 0.0000, 0), SetVehiclePos(ah, 5434.9102, -2214.6047, 3.3001);
						case 5: SetPlayerPosEx(playerid, 5439.5029, -2214.7349, 3.3001, 0.0000, 0), SetVehiclePos(ah, 5439.5029, -2214.7349, 3.3001);
						case 6: SetPlayerPosEx(playerid, 5443.8145, -2214.7937, 3.3001, 0.0000, 0), SetVehiclePos(ah, 5443.8145, -2214.7937, 3.3001);
					}
					SetVehicleZAngle(ah, 0.0);
					PutPlayerInVehicle(playerid, ah, 0);
					TogglePlayerControllable2(playerid, 0);
					DestroyDynamicCP(StuntCP[playerid]);
					StuntCP[playerid]=CreateDynamicCP(6001.7715, -2214.0212, 187.5978, 10.0, 19888, -1, playerid, 5000.0);
			   }
			   case 2:
			   {
					ah=CreateVehicle(411, -3806.1609, -239.5034, 107.7737, 180.0000, -1, -1, 1);
                    ResetCarInfo(ah);
					AdminCar[ah]=1;
					VehicleInfo[ah][Player]=INVALID_PLAYER_ID;
					SetVehicleVirtualWorld(ah, 19999);
                    SetPlayerPosEx(playerid, -3806.1609, -239.5034, 107.7737, 0.0000, 0);
					SetVehiclePos(ah, -3806.1609, -239.5034, 107.7737);

					SetVehicleZAngle(ah, 15.00);
					PutPlayerInVehicle(playerid, ah, 0);
					TogglePlayerControllable2(playerid, 0);

					DestroyDynamicCP(StuntCP[playerid]);
					StuntCP[playerid]=CreateDynamicCP(-4930.0000, -3133.3628, 3.5000, 10.0, 19999, -1, playerid, 5000.0);
			   }
			   case 3:
			   {
					ah=CreateVehicle(411, -4197.2993, 2749.3262, 35.5189, 180.0000, -1, -1, 1);
                    ResetCarInfo(ah);
					AdminCar[ah]=1;
					VehicleInfo[ah][Player]=INVALID_PLAYER_ID;
					SetVehicleVirtualWorld(ah, 19999);
                    SetPlayerPosEx(playerid, -4197.2993, 2749.3262, 35.5189, 0.0000, 0);
					SetVehiclePos(ah, -4197.2993, 2749.3262, 38.1189);

					SetVehicleZAngle(ah, 180.00);
					PutPlayerInVehicle(playerid, ah, 0);
					TogglePlayerControllable2(playerid, 0);

					DestroyDynamicCP(StuntCP[playerid]);
					StuntCP[playerid]=CreateDynamicCP(-4504.7827, 4064.8601, 90.6140, 10.0, 19999, -1, playerid, 5000.0);
			   }
			   case 4:
			   {
					ah=CreateVehicle(411, 4164.2524, 2784.9731, 11.2668, -180.0000, -1, -1, 1);
                    ResetCarInfo(ah);
					AdminCar[ah]=1;
					VehicleInfo[ah][Player]=INVALID_PLAYER_ID;
					SetVehicleVirtualWorld(ah, 19888);
                    SetPlayerPosEx(playerid, 4164.2524, 2784.9731, 11.2668, 0.0000, 0);
					SetVehiclePos(ah, 4164.2524, 2784.9731, 11.2668);

					SetVehicleZAngle(ah, -180.00);
					PutPlayerInVehicle(playerid, ah, 0);
					TogglePlayerControllable2(playerid, 0);

					DestroyDynamicCP(StuntCP[playerid]);
					StuntCP[playerid]=CreateDynamicCP(4177.9414, -2975.7737, 8.2792, 10.0, 19888, -1, playerid, 5000.0);
			   }
			   case 5:
			   {
					ah=CreateVehicle(411, 3095.8750, -1559.6678, 1039.0687, 359.6335, -1, -1, 1);
                    ResetCarInfo(ah);
					AdminCar[ah]=1;
					VehicleInfo[ah][Player]=INVALID_PLAYER_ID;
					SetVehicleVirtualWorld(ah, 19999);
                    SetPlayerPosEx(playerid, 3095.8750, -1559.6678, 1039.0687, 359.6335, 0);
					SetVehiclePos(ah, 3095.8750, -1559.6678, 1039.0687);

					SetVehicleZAngle(ah, 360.0);
					PutPlayerInVehicle(playerid, ah, 0);
					TogglePlayerControllable2(playerid, 0);

					DestroyDynamicCP(StuntCP[playerid]);
					StuntCP[playerid]=CreateDynamicCP(3930.3438, -1339.9893, 9.2432, 10.0, 19999, -1, playerid, 5000.0);
			   }
			}
			SetTimerEx("Stunt3", 1000, false, "i", playerid);
			SetTimerEx("Stunt2", 2000, false, "i", playerid);
			SetTimerEx("Stunt1", 3000, false, "i", playerid);
			SetTimerEx("StartStunt", 4000, false, "i", playerid);
		}
		else if(row == 1)
		{
			switch(StuntMap[playerid])
			{
			   case 1:
			   {
				TeleportPlayer(playerid, 5381.6826, -2233.4302, 2.5285, 250.8071, 0);
				SetPlayerVirtualWorldEX(playerid, 19888);
				STUNTING[playerid]=0;
				DestroyDynamicCP(StuntCP[playerid]);
				StuntCP[playerid]=CreateDynamicCP(5433.7681, -2217.0601, 1.5038, 10.00, 19888, -1, playerid, 200.0);
                StuntMap[playerid]=1;
			  }
			  case 2:
			  {
				TeleportPlayer(playerid, -3805.6208, -200.0186, 109.7737, 180.0, 0);
				SetPlayerVirtualWorldEX(playerid, 19999);
				STUNTING[playerid]=0;
				DestroyDynamicCP(StuntCP[playerid]);
				StuntCP[playerid]=CreateDynamicCP(-3806.1609, -239.5034, 105.7737, 10.00, 19999, -1, playerid, 200.0);
			    StuntMap[playerid]=2;
			  }
			  case 3:
			  {
				TeleportPlayer(playerid, -4195.0708, 2681.6228, 30.7979, 0.0, 0);
				SetPlayerVirtualWorldEX(playerid, 19999);
				STUNTING[playerid]=0;
				DestroyDynamicCP(StuntCP[playerid]);
				StuntCP[playerid]=CreateDynamicCP(-4197.2993, 2749.3262, 35.5189, 10.00, 19999, -1, playerid, 200.0);
			    StuntMap[playerid]=3;
			  }
			  case 4:
			  {
				TeleportPlayer(playerid, 4165.8457, 2822.1362, 12.2298, -180.0, 0);
				SetPlayerVirtualWorldEX(playerid, 19888);
				STUNTING[playerid]=0;
				DestroyDynamicCP(StuntCP[playerid]);
				StuntCP[playerid]=CreateDynamicCP(4164.2524, 2784.9731, 11.2668, 10.00, 19888, -1, playerid, 200.0);
			    StuntMap[playerid]=4;
			  }
			  case 5:
			  {
				TeleportPlayer(playerid, 3055.7170, -1488.3647, 1042.0687, 181.0318, 0);
				SetPlayerVirtualWorldEX(playerid, 19999);
				STUNTING[playerid]=0;
				DestroyDynamicCP(StuntCP[playerid]);
				StuntCP[playerid]=CreateDynamicCP(3095.8750, -1559.6678, 1041.0687, 10.00, 19999, -1, playerid, 200.0);
			    StuntMap[playerid]=5;
			  }
			}
		}
	   }
    }

#if defined USEDRIFT

    else if(current == DriftMenu)
    {
		if(IsPlayerInAnyVehicle(playerid)) DestroyVehicleEX(GetPlayerVehicleID(playerid));
		DestroyDynamicRaceCP(pDCP[playerid]);
		pDCP[playerid]=-1;
        TextDrawSetStringEX(pDriftTD[playerid][3], "~r~Score: ~g~0");
		if(row == 0)
		{
            Iter_Remove(Drifter, playerid);
  	    	ShowPlayerDialog(playerid, 4523, DIALOG_STYLE_LIST, "Select Your Vehicle", "Alpha\nBanshee\nBlista Compact\nBuffalo\nBullet\nCheetah\nClub\nEuros\nFlash\nHotring Racer\nHotring Racer A\nHotring Racer B\nInfernus\nJester\nPhoenix\nSabre\nSuper GT\nTurismo\nUranus\nZR-350\nElegy\nSultan", "Select", "Cancel" );
			switch(GetPVarInt(playerid, "DriftMap"))
			{
				case 1: SetPlayerPosEx(playerid, -300.4979, 1516.8981, 75.3594, 179.3745, 0);
				case 2: SetPlayerPosEx(playerid, -2425.3379, -607.1253, 132.5625, 33.3634, 0);
				case 3: SetPlayerPosEx(playerid, 1294.8658, -712.7390, 93.0439, 288.0684, 0);
				case 4: SetPlayerPosEx(playerid, 1477.0559, 1822.6667, 10.5393, 181.4275, 0);
				case 5: SetPlayerPosEx(playerid, -1084.7936, 407.9283, 14.1484, 134.5673, 0);
				case 6: SetPlayerPosEx(playerid, 269.1199, 2945.2686, 10.5606, 348.3203, 0);
				case 7: SetPlayerPosEx(playerid, 1252.6611, -2055.8806, 59.3632, 267.1501, 0);
			}
			SetCameraBehindPlayer(playerid);

		}
		else if(row == 1)
		{
            Iter_Remove(Drifter, playerid);
			Remove_From_Drift(playerid);
			DestroyDynamicRaceCP(pDCP[playerid]);
			pDCP[playerid]=-1;
			SetCameraBehindPlayer(playerid);
		}
    }
    #endif

	else if(current == CanonMenu)
	{
          if(IsPlayerInAnyVehicle(playerid)) DestroyVehicleEX(GetPlayerVehicleID(playerid));

          PlayerTextDrawHide(playerid, pInfoTD[playerid]);
		  if(row == 0)
		  {
			SetCameraBehindPlayer(playerid);
			SetPlayerPos(playerid, -61.7874, 2503.0874, 16.2115);
			SetPlayerFacingAngle(playerid, 271.2715);
			new ah= CreateVehicle(411, -61.7874, 2503.0874, 16.2115, 271.2715, -1, -1, 10);
            ResetCarInfo(ah);
			AdminCar[ah]=1;
	    	VehicleInfo[ah][Player]=INVALID_PLAYER_ID;
			SetVehicleVirtualWorld(ah, GetPlayerVirtualWorld(playerid));
			SetPlayerVirtualWorldEX(playerid, GetPlayerVirtualWorld(playerid));
			PutPlayerInVehicle(playerid, ah, 0);
			InCanon[playerid]=1;
			AddVehicleComponent(ah, 1087);
			AddVehicleComponent(ah, 1080);
         	CarNitro[ah]=1;


          }
          if(row == 1)
          {
  			  SetCameraBehindPlayer(playerid);
	          InCanon[playerid]=0;
			  SetPlayerVirtualWorldEX(playerid, 0);
			  LoadPlayerCoords(playerid);
			  if(IsPlayerInAnyVehicle(playerid)) DestroyVehicleEX(GetPlayerVehicleID(playerid));
          }
	}
    else if(current == BaseMenu_NoSell)
    {
		  if(row == 0)
		  {
            for(new i=0; i<MAX_BASES; i++)
            {
               if (GetBaseID(playerid) == i)
               {
                if(ZoneOwner[GangBases[i][zID]] == PlayerInfo[playerid][pGang])
                {
				 if(PlayerInfo[playerid][pGangRank] >=2)
				 {
				   new gang=PlayerInfo[playerid][pGang];
				   if(GangInfo[gang][gBank] >= GangBases[i][Price])
				   {
         	         GangBases[i][gbGang]=gang;
				     DestroyDynamicMapIcon(GangBases[i][gbIcon]);
				     GangBases[i][gbIcon] = CreateDynamicMapIcon(GangBases[i][gbPos][0], GangBases[i][gbPos][1], GangBases[i][gbPos][2], 43, 0, 0, 0, -1, 500.0);
					 new str[128];
					 format(str, sizeof(str), "{AA8202}» Gang action «{FFC307} The gang \"%s\" has bought \"%s's\" gang base for $%d.", GangInfo[gang][Name], GangBases[i][BaseName], GangBases[i][Price]);
					 SendClientMessageToAll(JOBINFO, str);
					 GangInfo[gang][gBank]=(GangInfo[gang][gBank] - GangBases[i][Price]);
    				 format(str, sizeof(str), "UPDATE `gangbases` SET `gbGang` = %d WHERE `BaseID` = '%d'", gang, i);
    				 mysql_query(GTADM, str);
                     format(str, sizeof(str),  "UPDATE `gangs` SET `GangBank` = %d WHERE `GangID` = %d", GangInfo[gang][gBank], gang);
                     mysql_query(GTADM, str);

					 DestroyDynamicPickup(GangBases[i][gbPickup]);
					 GangBases[i][gbPickup]=CreateDynamicPickup(1272, 1, GangBases[i][gbPos][0], GangBases[i][gbPos][1], GangBases[i][gbPos][2], 0, 0);

				   }
				   else SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}There is not enough money in gang account to purchase this base");
				 }
                }
               }
            }
		  }
	}
	else if(current == BaseMenu2_ || current == BaseMenu2)
	{
		switch(row)
		{
			case 0:
			{
              for(new i=0; i<MAX_BASES; i++)
              {
               if (GetBaseID(playerid) == i)
               {
                if(ZoneOwner[GangBases[i][zID]] == PlayerInfo[playerid][pGang])
					  TeleportPlayer(playerid, GangBases[i][intpos][0], GangBases[i][intpos][1], GangBases[i][intpos][2], GangBases[i][intpos][3], GangBases[i][Interior]),
					  SetPlayerVirtualWorldEX(playerid, 707),
					  InBase[playerid]=i,
					  SendClientMessage(playerid, GRAY, "Press ~k~~PED_LOOKBEHIND~ to leave the gang base!");
               }
              }
			}
			case 1:
			{
              for(new i=0; i<MAX_BASES; i++)
              {
                if((GetBaseID(playerid) == i) && (ZoneOwner[GangBases[i][zID]] == PlayerInfo[playerid][pGang]))
                {
				 if(PlayerInfo[playerid][pGangRank] >=2)
				 {
                   if(inGw[PlayerInfo[playerid][pGang]] == 0)
                   {
				     new gang=PlayerInfo[playerid][pGang];
         	         GangBases[i][gbGang]=-1;
				     DestroyDynamicMapIcon(GangBases[i][gbIcon]);
				     GangBases[i][gbIcon] = CreateDynamicMapIcon(GangBases[i][gbPos][0], GangBases[i][gbPos][1], GangBases[i][gbPos][2], 44, 0, 0, 0, -1, 500.0);
					 new str[128];
					 new a=floatround(GangBases[i][Price]*0.55);
					 format(str, sizeof(str), "{AA8202}» Gang action «{FFC307} The gang \"%s\" has sold \"%s's\" gang base for $%d.", GangInfo[gang][Name], GangBases[i][BaseName], a);
					 SendClientMessageToAll(JOBINFO, str);
					 GangInfo[gang][gBank]=(GangInfo[gang][gBank] + a);
    				 format(str, sizeof(str), "UPDATE `gangbases` SET `gbGang` = -255 WHERE `BaseID` = '%d'", i);
    				 mysql_query(GTADM, str);
                     format(str, sizeof(str),  "UPDATE `gangs` SET `GangBank` = %d WHERE `GangID` = %d", GangInfo[gang][gBank], gang);
                     mysql_query(GTADM, str);

					 DestroyDynamicPickup(GangBases[i][gbPickup]);
					 GangBases[i][gbPickup]=CreateDynamicPickup(1273, 1, GangBases[i][gbPos][0], GangBases[i][gbPos][1], GangBases[i][gbPos][2], 0, 0);

				   }
				   else SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant sell gang base during a war");
				 }
                }
              }
			}
		}
	}
    else if(current == InsideHouseMenu)
    {
    	switch(row)
    	{
		  case 0: SetPlayerHealth(playerid, 100), ShowHouseMenu(playerid);
		  case 1: SetPlayerArmour(playerid, 100), ShowHouseMenu(playerid);
		  case 2: ShowPlayerDialog(playerid, 2001, DIALOG_STYLE_LIST, "My Wardrobe", "{1B87E0}Glasses\n{1B87E0}Caps", "Select", "Cancel");
		  case 3:
		  {
		      new count = 0;
		      for(new x=0;x<16;x++)
		      {
                 if(hweapons[playerid][holding][x] > 0)
				 {
            	  count++;
            	  hweapons[playerid][holding][x]=0;
				 }
		      }
		      if(count ==0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You are not holding any spawn weapons to store");
		      SavePlayerWeapons(playerid);
			  ResetPlayerWeaponsEX(playerid);
		      SendInfoText(playerid, 3000, "~g~Weapons Stored");
		  }
		  case 4:
		  {
		      new wcount=0;
		      for(new x=0;x<16;x++)
		      {
		          if(( hweapons[playerid][storein][x] > 0) && hweapons[playerid][holding][x] == 0)
		          {
		             wcount++;
		             GivePlayerWeaponEX(playerid, GetWeaponIDfromSlot(x), hweapons[playerid][storein][x]);
                     hweapons[playerid][holding][x] =1;
		          }
		      }
		      if(wcount ==0)
		      SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You dont have any stored weapons"), SendInfoText(playerid, 3000, "~r~No Stored Weapons");
		  }
		  case 5: GivePlayerWeaponEX(playerid, 4, 9999), ShowHouseMenu(playerid);
		  case 6: GivePlayerWeaponEX(playerid, 5, 9999), ShowHouseMenu(playerid);
		  case 7: ExitHouse(playerid, InHouse[playerid]);
    	}

    }
#if defined USE_OLDBANK
	else if((current == BankMainMenu) || (current == BankMainMenu2))
	{
	  if(row == 0) ShowMenuForPlayer(BankMenu, playerid), TogglePlayerControllable2(playerid, 0);
	  else if(row == 1) ShowMenuForPlayer(BankMenu_, playerid), TogglePlayerControllable2(playerid, 0);
	}

	else if(current == BankMenu_)
	{

	  new g=PlayerInfo[playerid][pGang];
	  if(row == 0) ShowMenuForPlayer(BankMenu2_, playerid), TogglePlayerControllable2(playerid, 0), ShowBankTD(playerid);
	  else if(row == 1)
	  {
	    if(PlayerInfo[playerid][pGangRank] >= 3) ShowMenuForPlayer(BankMenu3_, playerid), TogglePlayerControllable2(playerid, 0), ShowBankTD(playerid);
		else ShowMenuForPlayer(BankMenu_, playerid), TogglePlayerControllable2(playerid, 0), SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You need to be at least rank 3 to withdraw money from gang bank");
	  }
      new str[30];
	  format(str, sizeof(str), "Gang Bank: $%d", GangInfo[g][gBank]);
	  PlayerTextDrawSetStringEX(playerid, BankTD[playerid], str);
	}

    else if(current == BankMenu2_)
	{
		   if(row == 9)
		   {
				 ShowPlayerDialog(playerid, 8485, DIALOG_STYLE_INPUT, "Bank", "Enter the amount of money to despsit", "Deposit", "Back >>");
		   }
		   else
		   {
		       new g=PlayerInfo[playerid][pGang];
	           ShowMenuForPlayer(BankMenu2_, playerid), TogglePlayerControllable2(playerid, 0), ShowBankTD(playerid);
		       new amount;
		       switch(row)
		       {
				   case 0:amount=1;
				   case 1:amount=10;
				   case 2:amount=100;
				   case 3:amount=1000;
				   case 4:amount=10000;
				   case 5:amount=100000;
				   case 6:amount=1000000;
				   case 7:amount=10000000;
				   case 8:amount=100000000;
		       }
		       new oldcash = GangInfo[g][gBank];

	           if(amount > GetPlayerMoneyEx(playerid))   PlayerPlaySound(playerid, 1085, 0, 0, 0);
	           else if(oldcash >= 2000000000) PlayerPlaySound(playerid, 1085, 0, 0, 0);
	           else if(oldcash + amount > 2000000000)
	           {
	              GangInfo[g][gBank]=2000000000;
	              new y=2000000000-oldcash;
	              GivePlayerMoneyEX(playerid, -y);
		          new Query[128];
	              format(Query, sizeof(Query),  "UPDATE `gangs` SET `GangBank` = %d WHERE `GangID` = %d", GangInfo[g][gBank], g);
	              mysql_query(GTADM, Query);
	           }
	           else
	           {
		            GivePlayerMoneyEX(playerid, -amount);
		            GangInfo[g][gBank] = (oldcash + amount);
		            PlayerPlaySound(playerid, 1083, 0, 0, 0);
		            if(amount >= 100000000) GiveMedal(playerid, 29);
		            new Query[128];
	                format(Query, sizeof(Query), "UPDATE `gangs` SET `GangBank` = %d WHERE `GangID` = %d", GangInfo[g][gBank], g);
	                mysql_query(GTADM, Query);

			   }
		       new str[30];
		       format(str, sizeof(str), "Gang Bank: $%d", GangInfo[g][gBank]);
		       PlayerTextDrawSetStringEX(playerid, BankTD[playerid], str);
		   }
	}
	else if(current == BankMenu3_)
	{
		   if(row == 9)
		   {
				 ShowPlayerDialog(playerid, 8484, DIALOG_STYLE_INPUT, "Bank", "Enter the amount of money to withdraw", "Withdraw", "Back >>");
		   }
		   else
		   {
		       new g=PlayerInfo[playerid][pGang];
	           ShowMenuForPlayer(BankMenu3_, playerid), TogglePlayerControllable2(playerid, 0), ShowBankTD(playerid);
			   new amount;
		       switch(row)
		       {
				   case 0:amount=1;
				   case 1:amount=10;
				   case 2:amount=100;
				   case 3:amount=1000;
				   case 4:amount=10000;
				   case 5:amount=100000;
				   case 6:amount=1000000;
				   case 7:amount=10000000;
				   case 8:amount=100000000;
		       }
		       new oldcash = GangInfo[g][gBank];

	           if(amount > oldcash)
			   {
			     PlayerPlaySound(playerid, 1085, 0, 0, 0);
			   }
			   else if(amount + GetPlayerMoneyEx(playerid) > 100000000)
			   {
					 new y=100000000-GetPlayerMoneyEx(playerid);
					 GivePlayerMoneyEX(playerid, y);
	                 GangInfo[g][gBank] = oldcash-y;

		             new Query[128];
	                 format(Query, sizeof(Query), "UPDATE `gangs` SET `GangBank` = %d WHERE `GangID` = %d", GangInfo[g][gBank], g);
	                 mysql_query(GTADM, Query);

		             PlayerPlaySound(playerid, 1084, 0, 0, 0);
			   }
			   else
			   {
	             GivePlayerMoneyEX(playerid, amount);
		         GangInfo[g][gBank] = (oldcash - amount);
	             PlayerPlaySound(playerid, 1084, 0, 0, 0);
		         new Query[128];
	             format(Query, sizeof(Query), "UPDATE `gangs` SET `GangBank` = %d WHERE `GangID` = %d", GangInfo[g][gBank], g);
	             mysql_query(GTADM, Query);

			   }
		       new str[30];
		       format(str, sizeof(str), "Gang Bank: $%d", GangInfo[g][gBank]);
		       PlayerTextDrawSetStringEX(playerid, BankTD[playerid], str);
		   }
	}


    else if(current == BankMenu)
	{
	  if(row == 0) ShowMenuForPlayer(BankMenu2, playerid), TogglePlayerControllable2(playerid, 0), ShowBankTD(playerid);
	  else if(row == 1) ShowMenuForPlayer(BankMenu3, playerid), TogglePlayerControllable2(playerid, 0), ShowBankTD(playerid);
	  new str[30];
	  format(str, sizeof(str), "Bank: $%d", PlayerInfo[playerid][pBank]);
	  PlayerTextDrawSetStringEX(playerid, BankTD[playerid], str);
	}
    else if(current == BankMenu2)
	{
		   if(row == 9)
		   {
				 ShowPlayerDialog(playerid, 8487, DIALOG_STYLE_INPUT, "Bank", "Enter the amount of money to Deposit", "Deposit", "Back >>");
		   }
		   else
		   {
	           ShowMenuForPlayer(BankMenu2, playerid), TogglePlayerControllable2(playerid, 0), ShowBankTD(playerid);
		       new amount;
		       switch(row)
		       {
				   case 0:amount=1;
				   case 1:amount=10;
				   case 2:amount=100;
				   case 3:amount=1000;
				   case 4:amount=10000;
				   case 5:amount=100000;
				   case 6:amount=1000000;
				   case 7:amount=10000000;
				   case 8:amount=100000000;
		       }
		       new oldcash = PlayerInfo[playerid][pBank];

	           if(amount > GetPlayerMoneyEx(playerid))   PlayerPlaySound(playerid, 1085, 0, 0, 0);
	           else if(oldcash >= 2000000000) PlayerPlaySound(playerid, 1085, 0, 0, 0);
	           else if(oldcash + amount > 2000000000)
	           {
	              PlayerInfo[playerid][pBank]=2000000000;
	              new y=2000000000-oldcash;
	              GivePlayerMoneyEX(playerid, -y);
		          new Query[128];
	              format(Query, sizeof(Query), "UPDATE `users` SET `pBank` = %d WHERE `Name` = '%s'", PlayerInfo[playerid][pBank], pEscName[playerid]);
	              mysql_query(GTADM, Query);
	           }
	           else
	           {
		            GivePlayerMoneyEX(playerid, -amount);
		            PlayerInfo[playerid][pBank] = (oldcash + amount);
		            PlayerPlaySound(playerid, 1083, 0, 0, 0);
		            if(amount >= 100000000) GiveMedal(playerid, 29);

		            new Query[128];
	                format(Query, sizeof(Query), "UPDATE `users` SET `pBank` = %d WHERE `Name` = '%s'", PlayerInfo[playerid][pBank], pEscName[playerid]);
	                mysql_query(GTADM, Query);
			   }
		       new str[30];
		       format(str, sizeof(str), "Bank: $%d", PlayerInfo[playerid][pBank]);
		       PlayerTextDrawSetStringEX(playerid, BankTD[playerid], str);
		   }
	}
	else if(current == BankMenu3)
	{
		   if(row == 9)
		   {
				 ShowPlayerDialog(playerid, 8486, DIALOG_STYLE_INPUT, "Bank", "Enter the amount of money to withdraw", "Withdraw", "Back >>");
		   }
		   else
		   {
	           ShowMenuForPlayer(BankMenu3, playerid), TogglePlayerControllable2(playerid, 0), ShowBankTD(playerid);
			   new amount;
		       switch(row)
		       {
				   case 0:amount=1;
				   case 1:amount=10;
				   case 2:amount=100;
				   case 3:amount=1000;
				   case 4:amount=10000;
				   case 5:amount=100000;
				   case 6:amount=1000000;
				   case 7:amount=10000000;
				   case 8:amount=100000000;
		       }
		       new oldcash = PlayerInfo[playerid][pBank];

	           if(amount > oldcash)
			   {
			     PlayerPlaySound(playerid, 1085, 0, 0, 0);
			   }
			   else if(amount + GetPlayerMoneyEx(playerid) > 100000000)
			   {
					 new y=100000000-GetPlayerMoneyEx(playerid);
					 GivePlayerMoneyEX(playerid, y);
	                 PlayerInfo[playerid][pBank] = oldcash-y;

		             new Query[128];
	                 format(Query, sizeof(Query), "UPDATE `users` SET `pBank` = %d WHERE `Name` = '%s'", PlayerInfo[playerid][pBank], pEscName[playerid]);
	                 mysql_query(GTADM, Query);
		             PlayerPlaySound(playerid, 1084, 0, 0, 0);
			   }
			   else
			   {
	             GivePlayerMoneyEX(playerid, amount);
		         PlayerInfo[playerid][pBank] = (oldcash - amount);
	             PlayerPlaySound(playerid, 1084, 0, 0, 0);

		         new Query[128];
	             format(Query, sizeof(Query), "UPDATE `users` SET `pBank` = %d WHERE `Name` = '%s'", PlayerInfo[playerid][pBank], pEscName[playerid]);
	             mysql_query(GTADM, Query);
			   }
		       new str[30];
		       format(str, sizeof(str), "Bank: $%d", PlayerInfo[playerid][pBank]);
		       PlayerTextDrawSetStringEX(playerid, BankTD[playerid], str);
		   }
	}
#endif
    else if((current == Cars[0]) || (current == Cars[10]))
    {
	  switch(row)
	  {
		case 0:
		{
				  if(PlayerInfo[playerid][pHouse] < 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must have a house in order to buy a car");
                  for(new i=0; i<9; i++)
                  {
				     if(IsPlayerInDynamicCP(playerid, CarDealerCP[i]))
					 {
                       VehicleShow(playerid, i+1);
				     }
                  }
		}
		case 1:
		{
				  if(PlayerInfo[playerid][pHouse] < 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must have a house in order to buy a car");
                  for(new i=0; i<9; i++)
                  {
				     if(IsPlayerInDynamicCP(playerid, CarDealerCP[i]))
					 {
					   if(PlayerInfo[playerid][IsVIP] == 1) ShowMenuForPlayer(Cars_Discount[i], playerid);
					   else ShowMenuForPlayer(Cars[i+1], playerid);
				       TogglePlayerControllable2(playerid, 0);
				     }
                  }

		}
		case 2:
		{
		   new v=PlayerCar(playerid);
		   if(v == -255) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You dont own a car");
	   	   if(PlayerInfo[playerid][pHouse] < 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}First you need to have a house in order to buy/sell a car!");
	   	   if(GetPlayerState(playerid) != 2 || GetPlayerVehicleID(playerid) != v) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be inside your own car to sell it");
		   SellCar(playerid);
		}
	  }
	}
    if(current == Cars[1] || current == Cars_Discount[0])
    {
	  switch(row)
	  {
		case 0: BuyCar(playerid, 404);
		case 1: BuyCar(playerid, 405);
		case 2: BuyCar(playerid, 410);
		case 3: BuyCar(playerid, 419);
		case 4: BuyCar(playerid, 436);
		case 5: BuyCar(playerid, 491);
		case 6: BuyCar(playerid, 421);
		case 7: BuyCar(playerid, 401);
		case 8: BuyCar(playerid, 440);
		case 9: BuyCar(playerid, 545);
		case 10: BuyCar(playerid, 580);
		case 11: BuyCar(playerid, 400);

	  }
	}
    if(current == Cars[2] || current == Cars_Discount[1])
    {
	  switch(row)
	  {
		case 0: BuyCar(playerid, 496);
		case 1: BuyCar(playerid, 500);
		case 2: BuyCar(playerid, 507);
		case 3: BuyCar(playerid, 533);
		case 4: BuyCar(playerid, 475);
		case 5: BuyCar(playerid, 492);
		case 6: BuyCar(playerid, 498);
		case 7: BuyCar(playerid, 499);
		case 8: BuyCar(playerid, 508);
		case 9: BuyCar(playerid, 533);
		case 10: BuyCar(playerid, 543);
		case 11: BuyCar(playerid, 605);

	  }
	}

    if(current == Cars[3] || current == Cars_Discount[2])
    {
	  switch(row)
	  {
		case 0: BuyCar(playerid, 482);
		case 1: BuyCar(playerid, 489);
		case 2: BuyCar(playerid, 483);
		case 3: BuyCar(playerid, 554);
		case 4: BuyCar(playerid, 555);
		case 5: BuyCar(playerid, 566);
		case 6: BuyCar(playerid, 567);
		case 7: BuyCar(playerid, 542);
		case 8: BuyCar(playerid, 549);
		case 9: BuyCar(playerid, 585);
		case 10: BuyCar(playerid, 551);
		case 11: BuyCar(playerid, 550);

	  }
	}

    if(current == Cars[4] || current == Cars_Discount[3])
    {
	  switch(row)
	  {
		case 0: BuyCar(playerid, 581);
		case 1: BuyCar(playerid, 522);
		case 2: BuyCar(playerid, 461);
		case 3: BuyCar(playerid, 521);
		case 4: BuyCar(playerid, 471);
		case 5: BuyCar(playerid, 586);
		case 6: BuyCar(playerid, 463);
		case 7: BuyCar(playerid, 462);
		case 8: BuyCar(playerid, 468);
		case 9: BuyCar(playerid, 481);
		case 10: BuyCar(playerid, 509);
		case 11: BuyCar(playerid, 510);

	  }
	}

    if(current == Cars[5] || current == Cars_Discount[4])
    {
	  switch(row)
	  {
		case 0: BuyCar(playerid, 536);
		case 1: BuyCar(playerid, 575);
		case 2: BuyCar(playerid, 534);
		case 3: BuyCar(playerid, 535);
		case 4: BuyCar(playerid, 576);
		case 5: BuyCar(playerid, 560);
		case 6: BuyCar(playerid, 559);
		case 7: BuyCar(playerid, 558);
		case 8: BuyCar(playerid, 561);
		case 9: BuyCar(playerid, 562);
		case 10: BuyCar(playerid, 601);
		case 11: BuyCar(playerid, 466);

	  }
	}

    if(current == Cars[6] || current == Cars_Discount[5])
    {
	  switch(row)
	  {
		case 0: BuyCar(playerid, 411);
		case 1: BuyCar(playerid, 506);
		case 2: BuyCar(playerid, 477);
		case 3: BuyCar(playerid, 451);
		case 4: BuyCar(playerid, 429);
		case 5: BuyCar(playerid, 494);
		case 6: BuyCar(playerid, 415);
		case 7: BuyCar(playerid, 541);
		case 8: BuyCar(playerid, 402);
		case 9: BuyCar(playerid, 602);
		case 10: BuyCar(playerid, 587);
		case 11: BuyCar(playerid, 429);

	  }
	}

    if(current == Cars[7] || current == Cars_Discount[6])
    {
	  switch(row)
	  {
		case 0: BuyCar(playerid, 424);
		case 1: BuyCar(playerid, 573);
		case 2: BuyCar(playerid, 444);
		case 3: BuyCar(playerid, 556);
		case 4: BuyCar(playerid, 557);
		case 5: BuyCar(playerid, 495);
		case 6: BuyCar(playerid, 524);
		case 7: BuyCar(playerid, 406);
		case 8: BuyCar(playerid, 530);
		case 9: BuyCar(playerid, 572);
		case 10: BuyCar(playerid, 483);
		case 11: BuyCar(playerid, 486);

	  }
	}
    if(current == Cars[8] || current == Cars_Discount[7])
    {
	  switch(row)
	  {
		case 0: BuyCar(playerid, 487);
		case 1: BuyCar(playerid, 548);
		case 2: BuyCar(playerid, 497);
		case 3: BuyCar(playerid, 513);
		case 4: BuyCar(playerid, 511);
		case 5: BuyCar(playerid, 469);
		case 6: BuyCar(playerid, 447);
		case 7: BuyCar(playerid, 460);
		case 8: BuyCar(playerid, 417);
		case 9: BuyCar(playerid, 593);
		case 10: BuyCar(playerid, 577);
		case 11: BuyCar(playerid, 563);

	  }
	}

    if(current == Cars[9] || current == Cars_Discount[8])
    {
	  switch(row)
	  {
		case 0: BuyCar(playerid, 441);
		case 1: BuyCar(playerid, 465);
		case 2: BuyCar(playerid, 501);//
		case 3: BuyCar(playerid, 564);//
		case 4: BuyCar(playerid, 474);
		case 5: BuyCar(playerid, 594);
		case 6: BuyCar(playerid, 490);
		case 7: BuyCar(playerid, 528);
		case 8: BuyCar(playerid, 532);
		case 9: BuyCar(playerid, 544);
		case 10: BuyCar(playerid, 523);
		case 11: BuyCar(playerid, 599);
	  }
	}/*
    if(current == OwnedMenu)
    {
        switch(row)
        {
		     case 0:
		     {
  	             EnterHouse(playerid, GetHouseID(playerid));
		     }
		     case 1:
		     {
				 if(GetHouseID(playerid) > 0)
				 {
                   new string[101];
                   new price = floatround(hInfo[GetHouseID(playerid)][Cost]*0.5, floatround_ceil);
                   format(string, sizeof(string), "Do you really want to sell your house for $%d?", price);
                   ShowPlayerDialog(playerid, DIALOG_SELL_HOUSE, DIALOG_STYLE_MSGBOX, "{33AA33}COMMAND", string, "Yes", "No");
				 }
		     }
        }
    }

    if(current == OwnedMenu2)
    {
        switch(row)
        {
		     case 0:
		     {
                   EnterHouse(playerid, GetHouseID(playerid));
		     }
		     case 1:
		     {
				 if(GetHouseID(playerid) > 0)
				 {

                   if (( GetTickCount() - TickCount[playerid][Knock] ) < 10000 ) return SendClientMessage(playerid, RED, "You have to wait 10 seconds to knock the door again");
		           TickCount[playerid][Knock] = GetTickCount();
				   SetPlayerFacingAngle(playerid, hInfo[GetHouseID(playerid)][SpawnA]-180);
				   new str[128];
                   foreach (new i : Player)
                   {
				     if(PlayerInfo[i][pHouse] == GetHouseID(playerid))
					 {
					   format(str, sizeof(str), "%s is knocking your house's door", pName[playerid]);
					   SendClientMessage(i, PINK, str);
					   PlayerPlaySound(i, 6401 , 0.0, 0.0, 0.0);
					   break;
					 }
                   }
                   PreloadAnimLib(playerid, "POLICE");
				   SetTimerEx("KnockTheDoor", 1000, false, "i", playerid);
				 }
		     }
        }
    }

    if((current == NotOwnedMenu) || (current == NotOwnedMenu2))
    {
        switch(row)
        {
           case 0:
	       {
	           if(GetPlayerMoneyEx(playerid) < hInfo[GetHouseID(playerid)][Cost]) return  ShowPlayerDialog(playerid, 1499, DIALOG_STYLE_MSGBOX, ""RED_"House Menu", "You don't have enough money!", "OK", "");
	           if(PlayerInfo[playerid][pScore] < hInfo[GetHouseID(playerid)][Score]) return SendClientMessage(playerid, 0xFFAFFFAA, "You dont have enough score to buy this house");
	           if(PlayerInfo[playerid][pCook] < hInfo[GetHouseID(playerid)][PP] && PlayerInfo[playerid][IsVIP] == 0) return SendClientMessage(playerid, 0xFFAFFFAA, "You dont have enough Premium Points to buy this house");
	           BuyHouse(playerid, GetHouseID(playerid));

	       }
           case 1:
           {
  	           EnterHouse(playerid, GetHouseID(playerid));

           }
        }
    }*/
    if(current == OwnedMenu)
    {
        switch(row)
        {
		     case 0:
		     {
  	             EnterHouse(playerid, GetHouseID(playerid));
		     }
		     case 1:
		     {
				 if(GetHouseID(playerid) > 0)
				 {
                   new string[101];
                   new price = floatround(hInfo[GetHouseID(playerid)][Cost]*0.5, floatround_ceil);
                   format(string, sizeof(string), "Do you really want to sell your house for $%d?", price);
                   ShowPlayerDialog(playerid, DIALOG_SELL_HOUSE, DIALOG_STYLE_MSGBOX, "{33AA33}COMMAND", string, "Yes", "No");
				 }
		     }
        }
    }

    if(current == OwnedMenu2)
    {
        switch(row)
        {
		     case 0:
		     {
                   EnterHouse(playerid, GetHouseID(playerid));
		     }
		     case 1:
		     {
				 if(GetHouseID(playerid) > 0)
				 {

                   if (( GetTickCount() - TickCount[playerid][Knock] ) < 10000 ) return SendClientMessage(playerid, RED, "You have to wait 10 seconds to knock the door again");
		           TickCount[playerid][Knock] = GetTickCount();
				   SetPlayerFacingAngle(playerid, hInfo[GetHouseID(playerid)][SpawnA]-180);
				   new str[128];
                   foreach (new i : Player)
                   {
				     if(PlayerInfo[i][pHouse] == GetHouseID(playerid))
					 {
					   format(str, sizeof(str), "%s is knocking your house's door", pName[playerid]);
					   SendClientMessage(i, PINK, str);
					   PlayerPlaySound(i, 6401 , 0.0, 0.0, 0.0);
					   break;
					 }
                   }
                   PreloadAnimLib(playerid, "POLICE");
				   SetTimerEx("KnockTheDoor", 1000, false, "i", playerid);
				 }
		     }
        }
    }

    if((current == NotOwnedMenu) || (current == NotOwnedMenu2))
    {
        switch(row)
        {
           case 0:
	       {
	           if(GetPlayerMoneyEx(playerid) < hInfo[GetHouseID(playerid)][Cost]) return  ShowPlayerDialog(playerid, 1499, DIALOG_STYLE_MSGBOX, ""RED_"House Menu", "You don't have enough money!", "OK", "");
	           if(PlayerInfo[playerid][pScore] < hInfo[GetHouseID(playerid)][Score]) return SendClientMessage(playerid, 0xFFAFFFAA, "You dont have enough score to buy this house");
	           if(PlayerInfo[playerid][pCook] < hInfo[GetHouseID(playerid)][PP] && PlayerInfo[playerid][IsVIP] == 0) return SendClientMessage(playerid, 0xFFAFFFAA, "You dont have enough Premium Points to buy this house");
	           BuyHouse(playerid, GetHouseID(playerid));

	       }
           case 1:
           {
  	           EnterHouse(playerid, GetHouseID(playerid));

           }
        }
    }
    if((current == PropMenu1) || (current == PropMenu2))
    {
	  new p = GetPropID(playerid);
	  switch(row)
	  {
		case 0:
		{
        	if((GetPropCount(playerid) < 7) && GetPlayerMoneyEx(playerid) >= (pInfo[p][Earnings]*25))
			{
				GivePlayerMoneyEX(playerid, -(pInfo[p][Earnings]*25), 1);
				new str[128];
	 			if(strlen(pInfo[p][Name]) > 0)
				{
					format(str, sizeof(str), "{71A5B0}» Property «"JOBINFO_" %s has bought the property \"%s\"", pName[playerid], pInfo[p][Name]);
					SendClientMessageToAll(JOBINFO, str);
				}
 				format(pInfo[p][Owner], 24, "%s", pName[playerid]);
                if((GetPVarInt(playerid, "LOGGED")) != 2)
                {

                  new INI:File2 = INI_Open(PropPath(p));
                  INI_SetTag(File2, "propdata");
                  INI_WriteString(File2, "Owner", pName[playerid]);
                  INI_Close(File2);
                }

			}
			else SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant buy this property! Use \"/help\" to see the requirements");
		}
		case 1:
		{
			new Float:propsell = pInfo[p][Earnings]*25;

            if(strcmp(pName[playerid], pInfo[p][Owner])) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You are not the owner of this property");
            GivePlayerMoneyEX(playerid, floatround(floatdiv(propsell, 2.2)), 1);
 			new str[128];
 			if(strlen(pInfo[p][Name]) > 0)
			{
  			  format(str, sizeof(str), "{71A5B0}» Property «"JOBINFO_" %s has sold the property \"%s\"", pName[playerid], pInfo[p][Name]);
			  SendClientMessageToAll(JOBINFO, str);
			}
			format(pInfo[p][Owner], 24, "No owner");

            if((GetPVarInt(playerid, "LOGGED")) != 2)
            {
            new INI:File2 = INI_Open(PropPath(p));
            INI_SetTag(File2, "propdata");
            INI_WriteString(File2, "Owner", "No owner");
            INI_Close(File2);
            }
		}
	  }
    }
    return 1;
}


forward KnockTheDoor(playerid);
public KnockTheDoor(playerid)
{
	ApplyAnimation(playerid, "POLICE", "Door_Kick", 1.0, 0, 1, 1, 0, 0, 1);
	return 1;
}

public OnPlayerExitedMenu(playerid)
{
        if(!IsDeathMatcher(playerid)) TogglePlayerControllable2(playerid, 1);
        if(HideShit[playerid] == 0) ShowScreenTXD(playerid);
		new Menu:current;
		current = GetPlayerMenu(playerid);
  #if defined USE_OLDBANK
		if((current == BankMenu2) || (current == BankMenu3))
		{
		     ShowMenuForPlayer(BankMenu, playerid), TogglePlayerControllable2(playerid, 0);
		}
		else if((current == BankMenu2_) || (current == BankMenu3_))
		{
		     ShowMenuForPlayer(BankMenu_, playerid), TogglePlayerControllable2(playerid, 0);
		}
		else if((current == BankMenu_) || (current == BankMenu))
		{
	      if(PlayerInfo[playerid][pGang] >= 0) ShowMenuForPlayer(BankMainMenu, playerid);
	      else ShowMenuForPlayer(BankMainMenu2, playerid);
	      TogglePlayerControllable2(playerid, 0);
		}
		#endif
		if(current == CanonMenu && InCanon[playerid] > 0)
		{
           ShowMenuForPlayer(CanonMenu, playerid);
           TogglePlayerControllable2(playerid, 0);
		}
#if defined USEDRIFT

		else if(current == DriftMenu && GetPVarInt(playerid, "Drifter"))
		{
           ShowMenuForPlayer(DriftMenu, playerid);
           TogglePlayerControllable2(playerid, 0);
        }
#endif
		else if(current == StuntMenu && STUNTING[playerid] > 0)
		{
           ShowMenuForPlayer(StuntMenu, playerid);
           TogglePlayerControllable2(playerid, 0);
           PlayerTextDrawHide(playerid, pInfoTD[playerid]);
        }
        return 1;
}
forward Export_();
public Export_()
{
    Export(1);
    return 1;
}

stock Export(tybe)
{
	new str[128];
	RandomCar();
	if(tybe == 1)
	{
 	   format(str, sizeof(str), "{337D65}» Export « {4A9EC2}%s is wanted ", ExportCar);
 	   SendClientMessageToAll(PURPLE, str);
	   SendClientMessageToAll(PURPLE, "{4A9EC2}Bring the car to the Cargo Ship in San Fierro, Los Santos, or Docks in Las Venturas and you will get rewarded.");
	}
	ExportTimer = SetTimer("Export_", 5*60000, false); // 5minutes
	UpdateExportTd();
	return 1;
}


stock RandomCar()
{
	new ExportCars[]= {400
	, 401
	, 402
	, 403
	, 404
	, 405
	, 406
	, 407
	, 408
	, 410
	, 412
	, 413
	, 414
	, 415
	, 416
	, 418
	, 419
	, 420
	, 421
	, 422
	, 423
	, 424
	, 426
	, 427
	, 428
	, 431
	, 433
	, 434
	, 436
	, 437
	, 438
	, 439
	, 440
	, 442
	, 443
	, 444
	, 445
	, 448
	, 455
	, 456
	, 457
	, 458
	, 459
	, 461
	, 462
	, 463
	, 466
	, 467
	, 468
	, 470
	, 471
	, 474
	, 475
	, 477
	, 478
	, 479
	, 480
	, 481
	, 482
	, 483
	, 485
	, 486
	, 489
	, 490
	, 491
	, 492
	, 494
	, 495
	, 496
	, 498
	, 499
	, 500
	, 502
	, 503
	, 504
	, 505
	, 506
	, 507
	, 508
	, 509
	, 510
	, 514
	, 515
	, 516
	, 517
	, 518
	, 521
	, 522
	, 523
	, 524
	, 525
	, 526
	, 527
	, 528
	, 529
	, 530
	, 531
	, 533
	, 534
	, 535
	, 536
	, 539
	, 540
	, 541
	, 542
	, 543
	, 544
	, 545
	, 546
	, 547
	, 549
	, 550
	, 551
	, 552
	, 554
	, 555
	, 556
	, 557
	, 558
	, 559
	, 560
	, 561
	, 562
	, 565
	, 566
	, 567
	, 568
	, 571
	, 572
	, 574
	, 575
	, 576
	, 578
	, 579
	, 580
	, 581
	, 582
	, 583
	, 585
	, 586
	, 587
	, 588
	, 589
	, 596
	, 597
	, 598
	, 599
	, 600
	, 602
	, 609};
	new ExportCars2[]= {601, 411, 409, 451, 541, 429, 573, 522};
	switch(random(3))
	{
	  case 0:
	  {
        ExportCarid=ExportCars[random(sizeof(ExportCars))];
	  }
	  case 1:
	  {
        ExportCarid=ExportCars[random(sizeof(ExportCars))];
	  }
	  case 2:
	  {
        ExportCarid=ExportCars2[random(sizeof(ExportCars2))];
	  }
	}
	format(ExportCar, sizeof(ExportCar), "%s", vInfo[ExportCarid-400][vName]);
    return 1;

}


stock GetClosestPlayer(playerid, Float:limit)
{
    new Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2;
    GetPlayerPos(playerid, x1, y1, z1);
    new Float:Range = 999.9;
    new id = -1;
    foreach (new i : Player)
    {
        if(playerid != i)
        {
            GetPlayerPos(i, x2, y2, z2);
            new Float:Dist = GetDistanceBetweenPoints(x1, y1, z1, x2, y2, z2);
            if(floatcmp(Range, Dist) == 1 && floatcmp(limit, Range) == 1)
            {
                Range = Dist;
                id = i;
            }
        }
    }
    return id;
}


stock UpdateExportTd()
{
 new CarPrice = GetCarPriceFromID(ExportCarid);

 new str[128];
 format(str, sizeof(str), "%s Is Wanted", ExportCar);
 TextDrawSetString(ExportTD[3], str);

 format(str, sizeof(str), "Price: ~y~$%d", CarPrice);
 TextDrawSetString(ExportTD[4], str);

 TextDrawSetPreviewModel(ExportTD[2], ExportCarid);
 TextDrawSetPreviewRot(ExportTD[2], -20, 0, -50, 1.0);
}

stock CreateMenuTD(playerid)
{
	pAchTD[playerid] = CreatePlayerTextDraw(playerid, 302.000000, 146.000000, "Congratulations! ~r~Your combat level has advanced.");
	PlayerTextDrawAlignment(playerid, pAchTD[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid, pAchTD[playerid], -352387055);
	PlayerTextDrawFont(playerid, pAchTD[playerid], 1);
	PlayerTextDrawLetterSize(playerid, pAchTD[playerid], 0.270000, 1.900000);
	PlayerTextDrawColor(playerid, pAchTD[playerid], 255);
	PlayerTextDrawSetOutline(playerid, pAchTD[playerid], 1);
	PlayerTextDrawSetProportional(playerid, pAchTD[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, pAchTD[playerid], 0);

	ShiText[playerid][0] = CreatePlayerTextDraw(playerid, 229.000000, 120.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, ShiText[playerid][0], 255);
	PlayerTextDrawFont(playerid, ShiText[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid, ShiText[playerid][0], 0.389999, 24.000000);
	PlayerTextDrawColor(playerid, ShiText[playerid][0], -1);
	PlayerTextDrawSetOutline(playerid, ShiText[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid, ShiText[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, ShiText[playerid][0], 1);
	PlayerTextDrawUseBox(playerid, ShiText[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, ShiText[playerid][0], 200);
	PlayerTextDrawTextSize(playerid, ShiText[playerid][0], 400.000000, 51.000000);
	PlayerTextDrawSetSelectable(playerid, ShiText[playerid][0], 0);

	ShiText[playerid][1] = CreatePlayerTextDraw(playerid, 297.000000, 112.000000, "~y~Skills");
	PlayerTextDrawBackgroundColor(playerid, ShiText[playerid][1], 255);
	PlayerTextDrawFont(playerid, ShiText[playerid][1], 0);
	PlayerTextDrawLetterSize(playerid, ShiText[playerid][1], 0.490000, 1.899999);
	PlayerTextDrawColor(playerid, ShiText[playerid][1], -1);
	PlayerTextDrawSetOutline(playerid, ShiText[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, ShiText[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, ShiText[playerid][1], 0);

	ShiText[playerid][2] = CreatePlayerTextDraw(playerid, 298.000000, 279.000000, "Driving");
	PlayerTextDrawBackgroundColor(playerid, ShiText[playerid][2], 255);
	PlayerTextDrawFont(playerid, ShiText[playerid][2], 2);
	PlayerTextDrawLetterSize(playerid, ShiText[playerid][2], 0.170000, 1.099998);
	PlayerTextDrawColor(playerid, ShiText[playerid][2], -1);
	PlayerTextDrawSetOutline(playerid, ShiText[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, ShiText[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, ShiText[playerid][2], 0);

	//justice
	ShiText[playerid][3] = CreatePlayerTextDraw(playerid, 254.000000, 229.000000, "9999 Exp Left");
	PlayerTextDrawAlignment(playerid, ShiText[playerid][3], 2);
	PlayerTextDrawBackgroundColor(playerid, ShiText[playerid][3], 255);
	PlayerTextDrawFont(playerid, ShiText[playerid][3], 2);
	PlayerTextDrawLetterSize(playerid, ShiText[playerid][3], 0.1400, 0.9499);
	PlayerTextDrawColor(playerid, ShiText[playerid][3], -1);
	PlayerTextDrawSetOutline(playerid, ShiText[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, ShiText[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, ShiText[playerid][3], 0);

	ShiText[playerid][4] = CreatePlayerTextDraw(playerid, 271.000000, 320.000000, "Total Level - 3");
	PlayerTextDrawBackgroundColor(playerid, ShiText[playerid][4], 255);
	PlayerTextDrawFont(playerid, ShiText[playerid][4], 1);
	PlayerTextDrawLetterSize(playerid, ShiText[playerid][4], 0.330000, 1.000000);
	PlayerTextDrawColor(playerid, ShiText[playerid][4], -1);
	PlayerTextDrawSetOutline(playerid, ShiText[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, ShiText[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, ShiText[playerid][4], 0);

	//
	ShiText[playerid][5] = CreatePlayerTextDraw(playerid, 272.000000, 217.000000, "Justice");
	PlayerTextDrawBackgroundColor(playerid, ShiText[playerid][5], 0);
	PlayerTextDrawFont(playerid, ShiText[playerid][5], 5);
	PlayerTextDrawLetterSize(playerid, ShiText[playerid][5], 0.170000, 1.099998);
	PlayerTextDrawColor(playerid, ShiText[playerid][5], -1);
	PlayerTextDrawSetOutline(playerid, ShiText[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, ShiText[playerid][5], 1);
	PlayerTextDrawUseBox(playerid, ShiText[playerid][5], 1);
	PlayerTextDrawBoxColor(playerid, ShiText[playerid][5], 0);
	PlayerTextDrawTextSize(playerid, ShiText[playerid][5], 80.000000, 100.000000);
	PlayerTextDrawSetPreviewModel(playerid, ShiText[playerid][5], 424);
	PlayerTextDrawSetPreviewRot(playerid, ShiText[playerid][5], 0.000000, 0.000000, 40.000000, 1.500000);
	PlayerTextDrawSetSelectable(playerid, ShiText[playerid][5], 0);

	//Race
	ShiText[playerid][6] = CreatePlayerTextDraw(playerid, 309.000000, 270.000000, "~y~1");
	PlayerTextDrawBackgroundColor(playerid, ShiText[playerid][6], 255);
	PlayerTextDrawFont(playerid, ShiText[playerid][6], 1);
	PlayerTextDrawLetterSize(playerid, ShiText[playerid][6], 0.170000, 1.199998);
	PlayerTextDrawColor(playerid, ShiText[playerid][6], -1);
	PlayerTextDrawSetOutline(playerid, ShiText[playerid][6], 1);
	PlayerTextDrawSetProportional(playerid, ShiText[playerid][6], 1);
	PlayerTextDrawSetSelectable(playerid, ShiText[playerid][6], 0);

	ShiText[playerid][7] = CreatePlayerTextDraw(playerid, 308.000000, 166.000000, "Fist");
	PlayerTextDrawBackgroundColor(playerid, ShiText[playerid][7], 255);
	PlayerTextDrawFont(playerid, ShiText[playerid][7], 2);
	PlayerTextDrawLetterSize(playerid, ShiText[playerid][7], 0.170000, 1.099998);
	PlayerTextDrawColor(playerid, ShiText[playerid][7], -1);
	PlayerTextDrawSetOutline(playerid, ShiText[playerid][7], 1);
	PlayerTextDrawSetProportional(playerid, ShiText[playerid][7], 1);
	PlayerTextDrawSetSelectable(playerid, ShiText[playerid][7], 0);

	//Combat
	ShiText[playerid][8] = CreatePlayerTextDraw(playerid, 254.000000, 174.000000, "9999 Exp Left");
	PlayerTextDrawAlignment(playerid, ShiText[playerid][8], 2);
	PlayerTextDrawBackgroundColor(playerid, ShiText[playerid][8], 255);
	PlayerTextDrawFont(playerid, ShiText[playerid][8], 2);
	PlayerTextDrawLetterSize(playerid, ShiText[playerid][8], 0.1400, 0.9499);
	PlayerTextDrawColor(playerid, ShiText[playerid][8], -1);
	PlayerTextDrawSetOutline(playerid, ShiText[playerid][8], 1);
	PlayerTextDrawSetProportional(playerid, ShiText[playerid][8], 1);
	PlayerTextDrawSetSelectable(playerid, ShiText[playerid][8], 0);

	ShiText[playerid][9] = CreatePlayerTextDraw(playerid, 306.000000, 133.000000, "hud:fist");
	PlayerTextDrawBackgroundColor(playerid, ShiText[playerid][9], 0);
	PlayerTextDrawFont(playerid, ShiText[playerid][9], 4);
	PlayerTextDrawLetterSize(playerid, ShiText[playerid][9], 0.170000, 1.099998);
	PlayerTextDrawColor(playerid, ShiText[playerid][9], -1);
	PlayerTextDrawSetOutline(playerid, ShiText[playerid][9], 1);
	PlayerTextDrawSetProportional(playerid, ShiText[playerid][9], 1);
	PlayerTextDrawUseBox(playerid, ShiText[playerid][9], 1);
	PlayerTextDrawBoxColor(playerid, ShiText[playerid][9], 255);
	PlayerTextDrawTextSize(playerid, ShiText[playerid][9], 20.000000, 27.000000);
	PlayerTextDrawSetPreviewModel(playerid, ShiText[playerid][9], 350);
	PlayerTextDrawSetPreviewRot(playerid, ShiText[playerid][9], 20.000000, -50.000000, 0.000000, 1.500000);
	PlayerTextDrawSetSelectable(playerid, ShiText[playerid][9], 0);

	//Fist
	ShiText[playerid][10] = CreatePlayerTextDraw(playerid, 311.000000, 154.000000, "~y~1");
	PlayerTextDrawBackgroundColor(playerid, ShiText[playerid][10], 255);
	PlayerTextDrawFont(playerid, ShiText[playerid][10], 1);
	PlayerTextDrawLetterSize(playerid, ShiText[playerid][10], 0.170000, 1.199998);
	PlayerTextDrawColor(playerid, ShiText[playerid][10], -1);
	PlayerTextDrawSetOutline(playerid, ShiText[playerid][10], 1);
	PlayerTextDrawSetProportional(playerid, ShiText[playerid][10], 1);
	PlayerTextDrawSetSelectable(playerid, ShiText[playerid][10], 0);
	//fist
	ShiText[playerid][11] = CreatePlayerTextDraw(playerid, 316.000000, 174.000000, "9999 Exp Left");
	PlayerTextDrawAlignment(playerid, ShiText[playerid][11], 2);
	PlayerTextDrawBackgroundColor(playerid, ShiText[playerid][11], 255);
	PlayerTextDrawFont(playerid, ShiText[playerid][11], 2);
	PlayerTextDrawLetterSize(playerid, ShiText[playerid][11], 0.1400, 0.9499);
	PlayerTextDrawColor(playerid, ShiText[playerid][11], -1);
	PlayerTextDrawSetOutline(playerid, ShiText[playerid][11], 1);
	PlayerTextDrawSetProportional(playerid, ShiText[playerid][11], 1);
	PlayerTextDrawSetSelectable(playerid, ShiText[playerid][11], 0);
	//Hitpoint
	ShiText[playerid][12] = CreatePlayerTextDraw(playerid, 372.000000, 174.000000, "9999 Exp Left");
	PlayerTextDrawAlignment(playerid, ShiText[playerid][12], 2);
	PlayerTextDrawBackgroundColor(playerid, ShiText[playerid][12], 255);
	PlayerTextDrawFont(playerid, ShiText[playerid][12], 2);
	PlayerTextDrawLetterSize(playerid, ShiText[playerid][12], 0.1400, 0.9499);
	PlayerTextDrawColor(playerid, ShiText[playerid][12], -1);
	PlayerTextDrawSetOutline(playerid, ShiText[playerid][12], 1);
	PlayerTextDrawSetProportional(playerid, ShiText[playerid][12], 1);
	PlayerTextDrawSetSelectable(playerid, ShiText[playerid][12], 0);

	ShiText[playerid][13] = CreatePlayerTextDraw(playerid, 352.000000, 127.000000, "hud:fist");
	PlayerTextDrawBackgroundColor(playerid, ShiText[playerid][13], 0);
	PlayerTextDrawFont(playerid, ShiText[playerid][13], 5);
	PlayerTextDrawLetterSize(playerid, ShiText[playerid][13], 0.170000, 1.099997);
	PlayerTextDrawColor(playerid, ShiText[playerid][13], -1);
	PlayerTextDrawSetOutline(playerid, ShiText[playerid][13], 1);
	PlayerTextDrawSetProportional(playerid, ShiText[playerid][13], 1);
	PlayerTextDrawUseBox(playerid, ShiText[playerid][13], 1);
	PlayerTextDrawBoxColor(playerid, ShiText[playerid][13], 0);
	PlayerTextDrawTextSize(playerid, ShiText[playerid][13], 40.000000, 47.000000);
	PlayerTextDrawSetPreviewModel(playerid, ShiText[playerid][13], 1240);
	PlayerTextDrawSetPreviewRot(playerid, ShiText[playerid][13], 0.000000, 0.000000, 0.000000, 1.500000);
	PlayerTextDrawSetSelectable(playerid, ShiText[playerid][13], 0);
	//HitPoint
	ShiText[playerid][14] = CreatePlayerTextDraw(playerid, 369.000000, 156.000000, "~y~1");
	PlayerTextDrawBackgroundColor(playerid, ShiText[playerid][14], 255);
	PlayerTextDrawFont(playerid, ShiText[playerid][14], 1);
	PlayerTextDrawLetterSize(playerid, ShiText[playerid][14], 0.170000, 1.199998);
	PlayerTextDrawColor(playerid, ShiText[playerid][14], -1);
	PlayerTextDrawSetOutline(playerid, ShiText[playerid][14], 1);
	PlayerTextDrawSetProportional(playerid, ShiText[playerid][14], 1);
	PlayerTextDrawSetSelectable(playerid, ShiText[playerid][14], 0);

	ShiText[playerid][15] = CreatePlayerTextDraw(playerid, 346.000000, 220.000000, "Dealing");
	PlayerTextDrawBackgroundColor(playerid, ShiText[playerid][15], 255);
	PlayerTextDrawFont(playerid, ShiText[playerid][15], 2);
	PlayerTextDrawLetterSize(playerid, ShiText[playerid][15], 0.170000, 1.099997);
	PlayerTextDrawColor(playerid, ShiText[playerid][15], -1);
	PlayerTextDrawSetOutline(playerid, ShiText[playerid][15], 1);
	PlayerTextDrawSetProportional(playerid, ShiText[playerid][15], 1);
	PlayerTextDrawSetSelectable(playerid, ShiText[playerid][15], 0);

	ShiText[playerid][16] = CreatePlayerTextDraw(playerid, 239.000000, 220.000000, "Justice");
	PlayerTextDrawBackgroundColor(playerid, ShiText[playerid][16], 255);
	PlayerTextDrawFont(playerid, ShiText[playerid][16], 2);
	PlayerTextDrawLetterSize(playerid, ShiText[playerid][16], 0.170000, 1.099997);
	PlayerTextDrawColor(playerid, ShiText[playerid][16], -1);
	PlayerTextDrawSetOutline(playerid, ShiText[playerid][16], 1);
	PlayerTextDrawSetProportional(playerid, ShiText[playerid][16], 1);
	PlayerTextDrawSetSelectable(playerid, ShiText[playerid][16], 0);

	//Combat
	ShiText[playerid][18] = CreatePlayerTextDraw(playerid, 251.000000, 154.000000, "~y~1");
	PlayerTextDrawBackgroundColor(playerid, ShiText[playerid][18], 255);
	PlayerTextDrawFont(playerid, ShiText[playerid][18], 1);
	PlayerTextDrawLetterSize(playerid, ShiText[playerid][18], 0.170000, 1.199998);
	PlayerTextDrawColor(playerid, ShiText[playerid][18], -1);
	PlayerTextDrawSetOutline(playerid, ShiText[playerid][18], 1);
	PlayerTextDrawSetProportional(playerid, ShiText[playerid][18], 1);
	PlayerTextDrawSetSelectable(playerid, ShiText[playerid][18], 0);

	ShiText[playerid][19] = CreatePlayerTextDraw(playerid, 228.000000, 131.000000, "Combat");
	PlayerTextDrawBackgroundColor(playerid, ShiText[playerid][19], 0);
	PlayerTextDrawFont(playerid, ShiText[playerid][19], 5);
	PlayerTextDrawLetterSize(playerid, ShiText[playerid][19], 0.170000, 1.099997);
	PlayerTextDrawColor(playerid, ShiText[playerid][19], -1);
	PlayerTextDrawSetOutline(playerid, ShiText[playerid][19], 1);
	PlayerTextDrawSetProportional(playerid, ShiText[playerid][19], 1);
	PlayerTextDrawUseBox(playerid, ShiText[playerid][19], 1);
	PlayerTextDrawBoxColor(playerid, ShiText[playerid][19], 0);
	PlayerTextDrawTextSize(playerid, ShiText[playerid][19], 72.000000, 59.000000);
	PlayerTextDrawSetPreviewModel(playerid, ShiText[playerid][19], 350);
	PlayerTextDrawSetPreviewRot(playerid, ShiText[playerid][19], 20.000000, -50.000000, 0.000000, 1.500000);
	PlayerTextDrawSetSelectable(playerid, ShiText[playerid][19], 0);

	ShiText[playerid][20] = CreatePlayerTextDraw(playerid, 283.000000, 180.000000, "Justice");
	PlayerTextDrawBackgroundColor(playerid, ShiText[playerid][20], 0);
	PlayerTextDrawFont(playerid, ShiText[playerid][20], 5);
	PlayerTextDrawLetterSize(playerid, ShiText[playerid][20], 0.170000, 1.099997);
	PlayerTextDrawColor(playerid, ShiText[playerid][20], -1);
	PlayerTextDrawSetOutline(playerid, ShiText[playerid][20], 1);
	PlayerTextDrawSetProportional(playerid, ShiText[playerid][20], 1);
	PlayerTextDrawUseBox(playerid, ShiText[playerid][20], 1);
	PlayerTextDrawBoxColor(playerid, ShiText[playerid][20], 0);
	PlayerTextDrawTextSize(playerid, ShiText[playerid][20], 50.000000, 50.000000);
	PlayerTextDrawSetPreviewModel(playerid, ShiText[playerid][20], 1241);
	PlayerTextDrawSetPreviewRot(playerid, ShiText[playerid][20], 0.000000, 0.000000, 0.000000, 1.500000);
	PlayerTextDrawSetSelectable(playerid, ShiText[playerid][20], 0);

	ShiText[playerid][21] = CreatePlayerTextDraw(playerid, 229.000000, 180.000000, "Justice");
	PlayerTextDrawBackgroundColor(playerid, ShiText[playerid][21], 0);
	PlayerTextDrawFont(playerid, ShiText[playerid][21], 5);
	PlayerTextDrawLetterSize(playerid, ShiText[playerid][21], 0.170000, 1.099997);
	PlayerTextDrawColor(playerid, ShiText[playerid][21], -1);
	PlayerTextDrawSetOutline(playerid, ShiText[playerid][21], 1);
	PlayerTextDrawSetProportional(playerid, ShiText[playerid][21], 1);
	PlayerTextDrawUseBox(playerid, ShiText[playerid][21], 1);
	PlayerTextDrawBoxColor(playerid, ShiText[playerid][21], 0);
	PlayerTextDrawTextSize(playerid, ShiText[playerid][21], 50.000000, 50.000000);
	PlayerTextDrawSetPreviewModel(playerid, ShiText[playerid][21], 1247);
	PlayerTextDrawSetPreviewRot(playerid, ShiText[playerid][21], 0.000000, 0.000000, 0.000000, 1.500000);
	PlayerTextDrawSetSelectable(playerid, ShiText[playerid][21], 0);

	ShiText[playerid][22] = CreatePlayerTextDraw(playerid, 353.000000, 166.000000, "Hit Points");
	PlayerTextDrawBackgroundColor(playerid, ShiText[playerid][22], 255);
	PlayerTextDrawFont(playerid, ShiText[playerid][22], 2);
	PlayerTextDrawLetterSize(playerid, ShiText[playerid][22], 0.170000, 1.099997);
	PlayerTextDrawColor(playerid, ShiText[playerid][22], -1);
	PlayerTextDrawSetOutline(playerid, ShiText[playerid][22], 1);
	PlayerTextDrawSetProportional(playerid, ShiText[playerid][22], 1);
	PlayerTextDrawSetSelectable(playerid, ShiText[playerid][22], 0);
	//Medicine
	ShiText[playerid][23] = CreatePlayerTextDraw(playerid, 311.000000, 230.000000, "9999 Exp Left");
	PlayerTextDrawAlignment(playerid, ShiText[playerid][23], 2);
	PlayerTextDrawBackgroundColor(playerid, ShiText[playerid][23], 255);
	PlayerTextDrawFont(playerid, ShiText[playerid][23], 2);
	PlayerTextDrawLetterSize(playerid, ShiText[playerid][23], 0.1400, 0.9499);
	PlayerTextDrawColor(playerid, ShiText[playerid][23], -1);
	PlayerTextDrawSetOutline(playerid, ShiText[playerid][23], 1);
	PlayerTextDrawSetProportional(playerid, ShiText[playerid][23], 1);
	PlayerTextDrawSetSelectable(playerid, ShiText[playerid][23], 0);
	//Drug
	ShiText[playerid][24] = CreatePlayerTextDraw(playerid, 372.000000, 230.000000, "9999 Exp Left");
	PlayerTextDrawAlignment(playerid, ShiText[playerid][24], 2);
	PlayerTextDrawBackgroundColor(playerid, ShiText[playerid][24], 255);
	PlayerTextDrawFont(playerid, ShiText[playerid][24], 2);
	PlayerTextDrawLetterSize(playerid, ShiText[playerid][24], 0.1400, 0.9499);
	PlayerTextDrawColor(playerid, ShiText[playerid][24], -1);
	PlayerTextDrawSetOutline(playerid, ShiText[playerid][24], 1);
	PlayerTextDrawSetProportional(playerid, ShiText[playerid][24], 1);
	PlayerTextDrawSetSelectable(playerid, ShiText[playerid][24], 0);

	ShiText[playerid][25] = CreatePlayerTextDraw(playerid, 294.000000, 220.000000, "Medicine");
	PlayerTextDrawBackgroundColor(playerid, ShiText[playerid][25], 255);
	PlayerTextDrawFont(playerid, ShiText[playerid][25], 2);
	PlayerTextDrawLetterSize(playerid, ShiText[playerid][25], 0.170000, 1.099997);
	PlayerTextDrawColor(playerid, ShiText[playerid][25], -1);
	PlayerTextDrawSetOutline(playerid, ShiText[playerid][25], 1);
	PlayerTextDrawSetProportional(playerid, ShiText[playerid][25], 1);
	PlayerTextDrawSetSelectable(playerid, ShiText[playerid][25], 0);
	//Justice
	ShiText[playerid][26] = CreatePlayerTextDraw(playerid, 250.000000, 210.000000, "~y~1");
	PlayerTextDrawBackgroundColor(playerid, ShiText[playerid][26], 255);
	PlayerTextDrawFont(playerid, ShiText[playerid][26], 1);
	PlayerTextDrawLetterSize(playerid, ShiText[playerid][26], 0.170000, 1.199998);
	PlayerTextDrawColor(playerid, ShiText[playerid][26], -1);
	PlayerTextDrawSetOutline(playerid, ShiText[playerid][26], 1);
	PlayerTextDrawSetProportional(playerid, ShiText[playerid][26], 1);
	PlayerTextDrawSetSelectable(playerid, ShiText[playerid][26], 0);
	//Drugdealing
	ShiText[playerid][27] = CreatePlayerTextDraw(playerid, 371.000000, 210.000000, "~y~1");
	PlayerTextDrawBackgroundColor(playerid, ShiText[playerid][27], 255);
	PlayerTextDrawFont(playerid, ShiText[playerid][27], 1);
	PlayerTextDrawLetterSize(playerid, ShiText[playerid][27], 0.170000, 1.199998);
	PlayerTextDrawColor(playerid, ShiText[playerid][27], -1);
	PlayerTextDrawSetOutline(playerid, ShiText[playerid][27], 1);
	PlayerTextDrawSetProportional(playerid, ShiText[playerid][27], 1);
	PlayerTextDrawSetSelectable(playerid, ShiText[playerid][27], 0);

	ShiText[playerid][28] = CreatePlayerTextDraw(playerid, 239.000000, 166.000000, "Combat");
	PlayerTextDrawBackgroundColor(playerid, ShiText[playerid][28], 255);
	PlayerTextDrawFont(playerid, ShiText[playerid][28], 2);
	PlayerTextDrawLetterSize(playerid, ShiText[playerid][28], 0.170000, 1.099997);
	PlayerTextDrawColor(playerid, ShiText[playerid][28], -1);
	PlayerTextDrawSetOutline(playerid, ShiText[playerid][28], 1);
	PlayerTextDrawSetProportional(playerid, ShiText[playerid][28], 1);
	PlayerTextDrawSetSelectable(playerid, ShiText[playerid][28], 0);

	ShiText[playerid][29] = CreatePlayerTextDraw(playerid, 229.000000, 240.000000, "hud:triads");
	PlayerTextDrawBackgroundColor(playerid, ShiText[playerid][29], 0);
	PlayerTextDrawFont(playerid, ShiText[playerid][29], 5);
	PlayerTextDrawLetterSize(playerid, ShiText[playerid][29], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, ShiText[playerid][29], -1);
	PlayerTextDrawSetOutline(playerid, ShiText[playerid][29], 1);
	PlayerTextDrawSetProportional(playerid, ShiText[playerid][29], 1);
	PlayerTextDrawUseBox(playerid, ShiText[playerid][29], 1);
	PlayerTextDrawBoxColor(playerid, ShiText[playerid][29], 0);
	PlayerTextDrawTextSize(playerid, ShiText[playerid][29], 48.000000, 51.000000);
	PlayerTextDrawSetPreviewModel(playerid, ShiText[playerid][29], 18664);
	PlayerTextDrawSetPreviewRot(playerid, ShiText[playerid][29], 0.000000, 0.000000, 90.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid, ShiText[playerid][29], 0);
	//Medicine
	ShiText[playerid][30] = CreatePlayerTextDraw(playerid, 310.000000, 210.000000, "~y~1");
	PlayerTextDrawBackgroundColor(playerid, ShiText[playerid][30], 255);
	PlayerTextDrawFont(playerid, ShiText[playerid][30], 1);
	PlayerTextDrawLetterSize(playerid, ShiText[playerid][30], 0.170000, 1.199998);
	PlayerTextDrawColor(playerid, ShiText[playerid][30], -1);
	PlayerTextDrawSetOutline(playerid, ShiText[playerid][30], 1);
	PlayerTextDrawSetProportional(playerid, ShiText[playerid][30], 1);
	PlayerTextDrawSetSelectable(playerid, ShiText[playerid][30], 0);
	//Gangster
	ShiText[playerid][31] = CreatePlayerTextDraw(playerid, 255.000000, 288.000000, "9999 Exp Left");
	PlayerTextDrawAlignment(playerid, ShiText[playerid][31], 2);
	PlayerTextDrawBackgroundColor(playerid, ShiText[playerid][31], 255);
	PlayerTextDrawFont(playerid, ShiText[playerid][31], 2);
	PlayerTextDrawLetterSize(playerid, ShiText[playerid][31], 0.1400, 0.9499);
	PlayerTextDrawColor(playerid, ShiText[playerid][31], -1);
	PlayerTextDrawSetOutline(playerid, ShiText[playerid][31], 1);
	PlayerTextDrawSetProportional(playerid, ShiText[playerid][31], 1);
	PlayerTextDrawSetSelectable(playerid, ShiText[playerid][31], 0);
	//Driving
	ShiText[playerid][32] = CreatePlayerTextDraw(playerid, 312.000000, 288.000000, "9999 Exp Left");
	PlayerTextDrawAlignment(playerid, ShiText[playerid][32], 2);
	PlayerTextDrawBackgroundColor(playerid, ShiText[playerid][32], 255);
	PlayerTextDrawFont(playerid, ShiText[playerid][32], 2);
	PlayerTextDrawLetterSize(playerid, ShiText[playerid][32], 0.1400, 0.9499);
	PlayerTextDrawColor(playerid, ShiText[playerid][32], -1);
	PlayerTextDrawSetOutline(playerid, ShiText[playerid][32], 1);
	PlayerTextDrawSetProportional(playerid, ShiText[playerid][32], 1);
	PlayerTextDrawSetSelectable(playerid, ShiText[playerid][32], 0);

	ShiText[playerid][33] = CreatePlayerTextDraw(playerid, 236.000000, 279.000000, "Gangster");
	PlayerTextDrawBackgroundColor(playerid, ShiText[playerid][33], 255);
	PlayerTextDrawFont(playerid, ShiText[playerid][33], 2);
	PlayerTextDrawLetterSize(playerid, ShiText[playerid][33], 0.170000, 1.099998);
	PlayerTextDrawColor(playerid, ShiText[playerid][33], -1);
	PlayerTextDrawSetOutline(playerid, ShiText[playerid][33], 1);
	PlayerTextDrawSetProportional(playerid, ShiText[playerid][33], 1);
	PlayerTextDrawSetSelectable(playerid, ShiText[playerid][33], 0);
	//Gangster
	ShiText[playerid][34] = CreatePlayerTextDraw(playerid, 250.000000, 270.000000, "~y~1");
	PlayerTextDrawBackgroundColor(playerid, ShiText[playerid][34], 255);
	PlayerTextDrawFont(playerid, ShiText[playerid][34], 1);
	PlayerTextDrawLetterSize(playerid, ShiText[playerid][34], 0.170000, 1.199998);
	PlayerTextDrawColor(playerid, ShiText[playerid][34], -1);
	PlayerTextDrawSetOutline(playerid, ShiText[playerid][34], 1);
	PlayerTextDrawSetProportional(playerid, ShiText[playerid][34], 1);
	PlayerTextDrawSetSelectable(playerid, ShiText[playerid][34], 0);

	ShiText[playerid][17] = CreatePlayerTextDraw(playerid, 347.000000, 182.000000, "Justice");
	PlayerTextDrawBackgroundColor(playerid, ShiText[playerid][17], 0);
	PlayerTextDrawFont(playerid, ShiText[playerid][17], 5);
	PlayerTextDrawLetterSize(playerid, ShiText[playerid][17], 0.170000, 1.099998);
	PlayerTextDrawColor(playerid, ShiText[playerid][17], -1);
	PlayerTextDrawSetOutline(playerid, ShiText[playerid][17], 1);
	PlayerTextDrawSetProportional(playerid, ShiText[playerid][17], 1);
	PlayerTextDrawUseBox(playerid, ShiText[playerid][17], 1);
	PlayerTextDrawBoxColor(playerid, ShiText[playerid][17], 0);
	PlayerTextDrawTextSize(playerid, ShiText[playerid][17], 50.000000, 50.000000);
	PlayerTextDrawSetPreviewModel(playerid, ShiText[playerid][17], 1279);
	PlayerTextDrawSetPreviewRot(playerid, ShiText[playerid][17], 20.000000, 0.000000, 0.000000, 1.500000);
	PlayerTextDrawSetSelectable(playerid, ShiText[playerid][17], 0);


	pStatsTD[playerid][0] = CreatePlayerTextDraw(playerid, 642.000000, 121.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, pStatsTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, pStatsTD[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid, pStatsTD[playerid][0], 0.500000, 24.000000);
	PlayerTextDrawColor(playerid, pStatsTD[playerid][0], -1);
	PlayerTextDrawSetOutline(playerid, pStatsTD[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid, pStatsTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, pStatsTD[playerid][0], 1);
	PlayerTextDrawUseBox(playerid, pStatsTD[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, pStatsTD[playerid][0], 150);
	PlayerTextDrawTextSize(playerid, pStatsTD[playerid][0], -10.000000, 20.000000);
	PlayerTextDrawSetSelectable(playerid, pStatsTD[playerid][0], 0);

	pStatsTD[playerid][1] = CreatePlayerTextDraw(playerid, -60.000000, 147.000000, "skin pic");
	PlayerTextDrawBackgroundColor(playerid, pStatsTD[playerid][1], 0);
	PlayerTextDrawFont(playerid, pStatsTD[playerid][1], 5);
	PlayerTextDrawLetterSize(playerid, pStatsTD[playerid][1], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, pStatsTD[playerid][1], -1);
	PlayerTextDrawSetOutline(playerid, pStatsTD[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid, pStatsTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, pStatsTD[playerid][1], 1);
	PlayerTextDrawUseBox(playerid, pStatsTD[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, pStatsTD[playerid][1], 0);
	PlayerTextDrawTextSize(playerid, pStatsTD[playerid][1], 180.000000, 171.000000);
	PlayerTextDrawSetPreviewModel(playerid, pStatsTD[playerid][1], 88);
	PlayerTextDrawSetPreviewRot(playerid, pStatsTD[playerid][1], -16.000000, 0.000000, 30.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid, pStatsTD[playerid][1], 0);

	pStatsTD[playerid][2] = CreatePlayerTextDraw(playerid, 11.000000, 140.000000, "~g~Admin Level ~r~5");
	PlayerTextDrawBackgroundColor(playerid, pStatsTD[playerid][2], 100);
	PlayerTextDrawFont(playerid, pStatsTD[playerid][2], 1);
	PlayerTextDrawLetterSize(playerid, pStatsTD[playerid][2], 0.219999, 0.899999);
	PlayerTextDrawColor(playerid, pStatsTD[playerid][2], -1);
	PlayerTextDrawSetOutline(playerid, pStatsTD[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, pStatsTD[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, pStatsTD[playerid][2], 0);

	pStatsTD[playerid][3] = CreatePlayerTextDraw(playerid, 661.000000, 121.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, pStatsTD[playerid][3], 255);
	PlayerTextDrawFont(playerid, pStatsTD[playerid][3], 1);
	PlayerTextDrawLetterSize(playerid, pStatsTD[playerid][3], 0.899999, 1.000000);
	PlayerTextDrawColor(playerid, pStatsTD[playerid][3], -1);
	PlayerTextDrawSetOutline(playerid, pStatsTD[playerid][3], 0);
	PlayerTextDrawSetProportional(playerid, pStatsTD[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, pStatsTD[playerid][3], 1);
	PlayerTextDrawUseBox(playerid, pStatsTD[playerid][3], 1);
	PlayerTextDrawBoxColor(playerid, pStatsTD[playerid][3], 255);
	PlayerTextDrawTextSize(playerid, pStatsTD[playerid][3], -20.000000, -10.000000);
	PlayerTextDrawSetSelectable(playerid, pStatsTD[playerid][3], 0);

	pStatsTD[playerid][4] = CreatePlayerTextDraw(playerid, 108.000000, 189.000000, "car pic");
	PlayerTextDrawBackgroundColor(playerid, pStatsTD[playerid][4], 0);
	PlayerTextDrawFont(playerid, pStatsTD[playerid][4], 5);
	PlayerTextDrawLetterSize(playerid, pStatsTD[playerid][4], 0.430000, 1.000000);
	PlayerTextDrawColor(playerid, pStatsTD[playerid][4], -1);
	PlayerTextDrawSetOutline(playerid, pStatsTD[playerid][4], 0);
	PlayerTextDrawSetProportional(playerid, pStatsTD[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, pStatsTD[playerid][4], 1);
	PlayerTextDrawUseBox(playerid, pStatsTD[playerid][4], 1);
	PlayerTextDrawBoxColor(playerid, pStatsTD[playerid][4], 0);
	PlayerTextDrawTextSize(playerid, pStatsTD[playerid][4], 48.000000, 45.000000);
	PlayerTextDrawSetPreviewModel(playerid, pStatsTD[playerid][4], 515);
	PlayerTextDrawSetPreviewRot(playerid, pStatsTD[playerid][4], -16.000000, 0.000000, 30.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid, pStatsTD[playerid][4], 0);

	pStatsTD[playerid][5] = CreatePlayerTextDraw(playerid, 8.000000, 325.000000, "~l~Driving Level:~w~ 01  ~l~Dealing Level:~w~ 01  ~l~Hitpoint Level:~w~ 01  ~l~Gangster Level:~w~ 01  ~l~Trucks Delivered:~w~ 0");
	PlayerTextDrawBackgroundColor(playerid, pStatsTD[playerid][5], -236);
	PlayerTextDrawFont(playerid, pStatsTD[playerid][5], 1);
	PlayerTextDrawLetterSize(playerid, pStatsTD[playerid][5], 0.219999, 0.899999);
	PlayerTextDrawColor(playerid, pStatsTD[playerid][5], -1);
	PlayerTextDrawSetOutline(playerid, pStatsTD[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, pStatsTD[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid, pStatsTD[playerid][5], 0);

	pStatsTD[playerid][6] = CreatePlayerTextDraw(playerid, 390.000000, 293.000000, "~l~LMS won:~w~ 0 ~n~~n~~l~Bounty: ~w~0 ~n~~n~~l~Drugs Spliffs:~w~ 0");
	PlayerTextDrawBackgroundColor(playerid, pStatsTD[playerid][6], -236);
	PlayerTextDrawFont(playerid, pStatsTD[playerid][6], 1);
	PlayerTextDrawLetterSize(playerid, pStatsTD[playerid][6], 0.219999, 0.899999);
	PlayerTextDrawColor(playerid, pStatsTD[playerid][6], -1);
	PlayerTextDrawSetOutline(playerid, pStatsTD[playerid][6], 1);
	PlayerTextDrawSetProportional(playerid, pStatsTD[playerid][6], 1);
	PlayerTextDrawSetSelectable(playerid, pStatsTD[playerid][6], 0);

	pStatsTD[playerid][7] = CreatePlayerTextDraw(playerid, 167.000000, 161.000000, "~l~Kills: ~w~ 0~n~~n~~l~Deaths: ~w~ 0~n~~n~~l~Killing Spree Highscore: ~w~ 0~n~~n~~l~Current Killing Spree: ~w~ 0");
	PlayerTextDrawBackgroundColor(playerid, pStatsTD[playerid][7], -236);
	PlayerTextDrawFont(playerid, pStatsTD[playerid][7], 1);
	PlayerTextDrawLetterSize(playerid, pStatsTD[playerid][7], 0.219999, 0.899999);
	PlayerTextDrawColor(playerid, pStatsTD[playerid][7], -1);
	PlayerTextDrawSetOutline(playerid, pStatsTD[playerid][7], 1);
	PlayerTextDrawSetProportional(playerid, pStatsTD[playerid][7], 1);
	PlayerTextDrawSetSelectable(playerid, pStatsTD[playerid][7], 0);

	pStatsTD[playerid][8] = CreatePlayerTextDraw(playerid, 390.000000, 229.000000, "~l~Easter Eggs found: ~w~100/100~n~~n~~l~Horseshoes found: ~w~50/50~n~~n~~l~Oysters found: ~w~50/50~n~~n~~l~Graffitis: ~w~100/100");
	PlayerTextDrawBackgroundColor(playerid, pStatsTD[playerid][8], -236);
	PlayerTextDrawFont(playerid, pStatsTD[playerid][8], 1);
	PlayerTextDrawLetterSize(playerid, pStatsTD[playerid][8], 0.219999, 0.899999);
	PlayerTextDrawColor(playerid, pStatsTD[playerid][8], -1);
	PlayerTextDrawSetOutline(playerid, pStatsTD[playerid][8], 1);
	PlayerTextDrawSetProportional(playerid, pStatsTD[playerid][8], 1);
	PlayerTextDrawSetSelectable(playerid, pStatsTD[playerid][8], 0);

	pStatsTD[playerid][9] = CreatePlayerTextDraw(playerid, 532.2199, 324.5000, "No gang");
	PlayerTextDrawBackgroundColor(playerid, pStatsTD[playerid][9], 0);
	PlayerTextDrawFont(playerid, pStatsTD[playerid][9], 1);
	PlayerTextDrawLetterSize(playerid, pStatsTD[playerid][9], 0.219999, 0.899999);
	PlayerTextDrawColor(playerid, pStatsTD[playerid][9], -1);
	PlayerTextDrawSetOutline(playerid, pStatsTD[playerid][9], 1);
	PlayerTextDrawSetProportional(playerid, pStatsTD[playerid][9], 1);
	PlayerTextDrawSetSelectable(playerid, pStatsTD[playerid][9], 0);

	pStatsTD[playerid][10] = CreatePlayerTextDraw(playerid, 54.000000, 160.000000, "~l~Name: ~w~RoNz ~l~(5)~n~~l~~n~Level: ~w~1~n~~n~~l~House: ~w~No house~n~~n~~l~Vehicle: ~w~Infernus");
	PlayerTextDrawBackgroundColor(playerid, pStatsTD[playerid][10], -236);
	PlayerTextDrawFont(playerid, pStatsTD[playerid][10], 1);
	PlayerTextDrawLetterSize(playerid, pStatsTD[playerid][10], 0.219999, 0.899999);
	PlayerTextDrawColor(playerid, pStatsTD[playerid][10], -1);
	PlayerTextDrawSetOutline(playerid, pStatsTD[playerid][10], 1);
	PlayerTextDrawSetProportional(playerid, pStatsTD[playerid][10], 1);
	PlayerTextDrawSetSelectable(playerid, pStatsTD[playerid][10], 0);

	pStatsTD[playerid][11] = CreatePlayerTextDraw(playerid, 292.000000, 160.000000, "~l~Ratio: ~w~0~n~~n~~l~Vehicles Exported:~w~ 0~n~~n~~l~Speed Records: ~w~0~n~~n~~l~Drift Records:~w~ 0");
	PlayerTextDrawBackgroundColor(playerid, pStatsTD[playerid][11], -236);
	PlayerTextDrawFont(playerid, pStatsTD[playerid][11], 1);
	PlayerTextDrawLetterSize(playerid, pStatsTD[playerid][11], 0.219999, 0.899999);
	PlayerTextDrawColor(playerid, pStatsTD[playerid][11], -1);
	PlayerTextDrawSetOutline(playerid, pStatsTD[playerid][11], 1);
	PlayerTextDrawSetProportional(playerid, pStatsTD[playerid][11], 1);
	PlayerTextDrawSetSelectable(playerid, pStatsTD[playerid][11], 0);

	pStatsTD[playerid][12] = CreatePlayerTextDraw(playerid, 8.000000, 313.000000, "~l~Combat Level:~w~ 01   ~l~Fist Level:~w~ 01   ~l~Medicine Level:~w~ 01  ~l~Justice Level:~w~ 01");
	PlayerTextDrawBackgroundColor(playerid, pStatsTD[playerid][12], -236);
	PlayerTextDrawFont(playerid, pStatsTD[playerid][12], 1);
	PlayerTextDrawLetterSize(playerid, pStatsTD[playerid][12], 0.219999, 0.899999);
	PlayerTextDrawColor(playerid, pStatsTD[playerid][12], -1);
	PlayerTextDrawSetOutline(playerid, pStatsTD[playerid][12], 1);
	PlayerTextDrawSetProportional(playerid, pStatsTD[playerid][12], 1);
	PlayerTextDrawSetSelectable(playerid, pStatsTD[playerid][12], 0);

	pStatsTD[playerid][13] = CreatePlayerTextDraw(playerid, 390.000000, 160.000000, "~l~Races won: ~w~ 0~n~~n~~l~Parkour won: ~w~ 0~n~~n~~l~Derby won: ~w~ 0~n~~n~~l~Fallout won: ~w~ 0");
	PlayerTextDrawBackgroundColor(playerid, pStatsTD[playerid][13], -236);
	PlayerTextDrawFont(playerid, pStatsTD[playerid][13], 1);
	PlayerTextDrawLetterSize(playerid, pStatsTD[playerid][13], 0.219999, 0.899999);
	PlayerTextDrawColor(playerid, pStatsTD[playerid][13], -1);
	PlayerTextDrawSetOutline(playerid, pStatsTD[playerid][13], 1);
	PlayerTextDrawSetProportional(playerid, pStatsTD[playerid][13], 1);
	PlayerTextDrawSetSelectable(playerid, pStatsTD[playerid][13], 0);

	pStatsTD[playerid][14] = CreatePlayerTextDraw(playerid, 293.000000, 229.000000, "~l~Race Records: ~w~0~n~~n~~l~Accidents: ~w~0~n~~n~~l~Gangs:~w~ No Gang~n~~n~~l~Reactiontests:~w~ 0");
	PlayerTextDrawBackgroundColor(playerid, pStatsTD[playerid][14], -236);
	PlayerTextDrawFont(playerid, pStatsTD[playerid][14], 1);
	PlayerTextDrawLetterSize(playerid, pStatsTD[playerid][14], 0.219999, 0.899999);
	PlayerTextDrawColor(playerid, pStatsTD[playerid][14], -1);
	PlayerTextDrawSetOutline(playerid, pStatsTD[playerid][14], 1);
	PlayerTextDrawSetProportional(playerid, pStatsTD[playerid][14], 1);
	PlayerTextDrawSetSelectable(playerid, pStatsTD[playerid][14], 0);

	pStatsTD[playerid][15] = CreatePlayerTextDraw(playerid, 54.000000, 227.000000, "~l~Score: ~w~0~n~~n~~l~Money: ~w~0~n~~n~~l~Donated: ~w~0~n~~n~~l~VIP Points: ~w~0");
	//pStatsTD[playerid][15] = CreatePlayerTextDraw(playerid, 54.000000, 227.000000, "~l~Score: ~w~0~n~~n~~l~Money: ~w~0~n~~n~~l~VIP: ~w~No~n~~n~~l~VIP Expires in: ~w~0");
	PlayerTextDrawBackgroundColor(playerid, pStatsTD[playerid][15], -236);
	PlayerTextDrawFont(playerid, pStatsTD[playerid][15], 1);
	PlayerTextDrawLetterSize(playerid, pStatsTD[playerid][15], 0.219999, 0.899999);
	PlayerTextDrawColor(playerid, pStatsTD[playerid][15], -1);
	PlayerTextDrawSetOutline(playerid, pStatsTD[playerid][15], 1);
	PlayerTextDrawSetProportional(playerid, pStatsTD[playerid][15], 1);
	PlayerTextDrawSetSelectable(playerid, pStatsTD[playerid][15], 0);

	pStatsTD[playerid][16] = CreatePlayerTextDraw(playerid, 167.000000, 229.000000, "~l~Players beaten up: ~w~0~n~~n~~l~Duels won: ~w~0~n~~n~~l~Premium Points:~w~ 0~n~~n~~l~HeadShots:~w~ 0");
	PlayerTextDrawBackgroundColor(playerid, pStatsTD[playerid][16], -236);
	PlayerTextDrawFont(playerid, pStatsTD[playerid][16], 1);
	PlayerTextDrawLetterSize(playerid, pStatsTD[playerid][16], 0.219999, 0.899999);
	PlayerTextDrawColor(playerid, pStatsTD[playerid][16], -1);
	PlayerTextDrawSetOutline(playerid, pStatsTD[playerid][16], 1);
	PlayerTextDrawSetProportional(playerid, pStatsTD[playerid][16], 1);
	PlayerTextDrawSetSelectable(playerid, pStatsTD[playerid][16], 0);

	pStatsTD[playerid][17] = CreatePlayerTextDraw(playerid, 503.000000, 160.000000, "~l~Derbys won:~w~ 39~n~~n~~l~Gangwar won:~w~ 1078~n~~n~~l~Gangwars lost:~w~ 318~n~~n~~l~Counter Strikes won:~w~ 91");
	PlayerTextDrawBackgroundColor(playerid, pStatsTD[playerid][17], -236);
	PlayerTextDrawFont(playerid, pStatsTD[playerid][17], 1);
	PlayerTextDrawLetterSize(playerid, pStatsTD[playerid][17], 0.219999, 0.899999);
	PlayerTextDrawColor(playerid, pStatsTD[playerid][17], -1);
	PlayerTextDrawSetOutline(playerid, pStatsTD[playerid][17], 1);
	PlayerTextDrawSetProportional(playerid, pStatsTD[playerid][17], 1);
	PlayerTextDrawSetSelectable(playerid, pStatsTD[playerid][17], 0);

	pStatsTD[playerid][18] = CreatePlayerTextDraw(playerid, 503.000000, 229.000000, "~l~Arrests:~w~ 0~n~~n~~l~Heals: ~w~0~n~~n~~l~Players Bombed: ~w~0~n~~n~~l~Online Time: ~w~ 10h & 36mins");
	PlayerTextDrawBackgroundColor(playerid, pStatsTD[playerid][18], -236);
	PlayerTextDrawFont(playerid, pStatsTD[playerid][18], 1);
	PlayerTextDrawLetterSize(playerid, pStatsTD[playerid][18], 0.219999, 0.899999);
	PlayerTextDrawColor(playerid, pStatsTD[playerid][18], -1);
	PlayerTextDrawSetOutline(playerid, pStatsTD[playerid][18], 1);
	PlayerTextDrawSetProportional(playerid, pStatsTD[playerid][18], 1);
	PlayerTextDrawSetSelectable(playerid, pStatsTD[playerid][18], 0);

	pStatsTD[playerid][19] = CreatePlayerTextDraw(playerid, 503.000000, 293.000000, "~l~Score / Hour:~w~ 1~n~~n~~l~Events won: ~w~14~n~~n~~l~Drinks: ~w~0");
	PlayerTextDrawBackgroundColor(playerid, pStatsTD[playerid][19], -236);
	PlayerTextDrawFont(playerid, pStatsTD[playerid][19], 1);
	PlayerTextDrawLetterSize(playerid, pStatsTD[playerid][19], 0.219999, 0.899999);
	PlayerTextDrawColor(playerid, pStatsTD[playerid][19], -1);
	PlayerTextDrawSetOutline(playerid, pStatsTD[playerid][19], 1);
	PlayerTextDrawSetProportional(playerid, pStatsTD[playerid][19], 1);
	PlayerTextDrawSetSelectable(playerid, pStatsTD[playerid][19], 0);

	GwTD[playerid][0] = CreatePlayerTextDraw(playerid, 677.000000, 451.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, GwTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, GwTD[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid, GwTD[playerid][0], 0.500000, -2.549998);
	PlayerTextDrawColor(playerid, GwTD[playerid][0], -1);
	PlayerTextDrawSetOutline(playerid, GwTD[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid, GwTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, GwTD[playerid][0], 1);
	PlayerTextDrawUseBox(playerid, GwTD[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, GwTD[playerid][0], 84215295);
	PlayerTextDrawTextSize(playerid, GwTD[playerid][0], -23.000000, 0.000000);

	GwTD[playerid][1] = CreatePlayerTextDraw(playerid, 677.000000, 435.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, GwTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, GwTD[playerid][1], 1);
	PlayerTextDrawLetterSize(playerid, GwTD[playerid][1], 0.500000, 0.299998);
	PlayerTextDrawColor(playerid, GwTD[playerid][1], -1);
	PlayerTextDrawSetOutline(playerid, GwTD[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid, GwTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, GwTD[playerid][1], 1);
	PlayerTextDrawUseBox(playerid, GwTD[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, GwTD[playerid][1], 505290495);
	PlayerTextDrawTextSize(playerid, GwTD[playerid][1], -23.000000, 0.000000);

	GwTD[playerid][2] = CreatePlayerTextDraw(playerid, 677.000000, 434.500000, "_");
	PlayerTextDrawBackgroundColor(playerid, GwTD[playerid][2], 255);
	PlayerTextDrawFont(playerid, GwTD[playerid][2], 1);
	PlayerTextDrawLetterSize(playerid, GwTD[playerid][2], 0.500000, -0.649999);
	PlayerTextDrawColor(playerid, GwTD[playerid][2], -1);
	PlayerTextDrawSetOutline(playerid, GwTD[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid, GwTD[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, GwTD[playerid][2], 1);
	PlayerTextDrawUseBox(playerid, GwTD[playerid][2], 1);
	PlayerTextDrawBoxColor(playerid, GwTD[playerid][2], 1179010810);
	PlayerTextDrawTextSize(playerid, GwTD[playerid][2], -23.000000, 0.000000);

	GwTD[playerid][3] = CreatePlayerTextDraw(playerid, 5.000000, 405.000000, "Kills: ~w~0");
	PlayerTextDrawBackgroundColor(playerid, GwTD[playerid][3], 255);
	PlayerTextDrawFont(playerid, GwTD[playerid][3], 1);
	PlayerTextDrawLetterSize(playerid, GwTD[playerid][3], 0.250000, 0.899900);
	PlayerTextDrawColor(playerid, GwTD[playerid][3], 1958212351);
	PlayerTextDrawSetOutline(playerid, GwTD[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, GwTD[playerid][3], 1);

	GwTD[playerid][4] = CreatePlayerTextDraw(playerid, 296.000000, 438.000000, "GANGWAR");
	PlayerTextDrawBackgroundColor(playerid, GwTD[playerid][4], 255);
	PlayerTextDrawFont(playerid, GwTD[playerid][4], 1);
	PlayerTextDrawLetterSize(playerid, GwTD[playerid][4], 0.289999, 0.699998);
	PlayerTextDrawColor(playerid, GwTD[playerid][4], -1);
	PlayerTextDrawSetOutline(playerid, GwTD[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, GwTD[playerid][4], 1);

	GwTD[playerid][5] = CreatePlayerTextDraw(playerid, 5.000000, 415.000000, "Deaths:~w~ 0");
	PlayerTextDrawBackgroundColor(playerid, GwTD[playerid][5], 255);
	PlayerTextDrawFont(playerid, GwTD[playerid][5], 1);
	PlayerTextDrawLetterSize(playerid, GwTD[playerid][5], 0.250000, 0.899900);
	PlayerTextDrawColor(playerid, GwTD[playerid][5], 1958212351);
	PlayerTextDrawSetOutline(playerid, GwTD[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, GwTD[playerid][5], 1);

	GwTD[playerid][6] = CreatePlayerTextDraw(playerid, 313.000000, 418.000000, "04:48");
	PlayerTextDrawBackgroundColor(playerid, GwTD[playerid][6], 255);
	PlayerTextDrawFont(playerid, GwTD[playerid][6], 1);
	PlayerTextDrawLetterSize(playerid, GwTD[playerid][6], 0.330000, 0.799998);
	PlayerTextDrawColor(playerid, GwTD[playerid][6], -1);
	PlayerTextDrawSetOutline(playerid, GwTD[playerid][6], 1);
	PlayerTextDrawSetProportional(playerid, GwTD[playerid][6], 1);

	GwTD[playerid][7] = CreatePlayerTextDraw(playerid, 177.000000, 426.000000, "l                                      l");
	PlayerTextDrawBackgroundColor(playerid, GwTD[playerid][7], 842150500);
	PlayerTextDrawFont(playerid, GwTD[playerid][7], 1);
	PlayerTextDrawLetterSize(playerid, GwTD[playerid][7], 0.500000, 2.799998);
	PlayerTextDrawColor(playerid, GwTD[playerid][7], 1684300820);
	PlayerTextDrawSetOutline(playerid, GwTD[playerid][7], 0);
	PlayerTextDrawSetProportional(playerid, GwTD[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid, GwTD[playerid][7], 1);

	GwTD[playerid][8] = CreatePlayerTextDraw(playerid, 292.000000, 413.000000, "LD_POKE:cd10d");
	PlayerTextDrawBackgroundColor(playerid, GwTD[playerid][8], 255);
	PlayerTextDrawFont(playerid, GwTD[playerid][8], 4);
	PlayerTextDrawLetterSize(playerid, GwTD[playerid][8], 0.500000, -1.549998);
	PlayerTextDrawColor(playerid, GwTD[playerid][8], 50);
	PlayerTextDrawSetOutline(playerid, GwTD[playerid][8], 0);
	PlayerTextDrawSetProportional(playerid, GwTD[playerid][8], 1);
	PlayerTextDrawSetShadow(playerid, GwTD[playerid][8], 1);
	PlayerTextDrawUseBox(playerid, GwTD[playerid][8], 1);
	PlayerTextDrawBoxColor(playerid, GwTD[playerid][8], 84215295);
	PlayerTextDrawTextSize(playerid, GwTD[playerid][8], 57.000000, 18.000000);


	GwTD[playerid][10] = CreatePlayerTextDraw(playerid, 131.000000, 413.000000, "LD_POKE:cd10d");
	PlayerTextDrawBackgroundColor(playerid, GwTD[playerid][10], 255);
	PlayerTextDrawFont(playerid, GwTD[playerid][10], 4);
	PlayerTextDrawLetterSize(playerid, GwTD[playerid][10], 0.500000, -1.549998);
	PlayerTextDrawColor(playerid, GwTD[playerid][10], 50);
	PlayerTextDrawSetOutline(playerid, GwTD[playerid][10], 0);
	PlayerTextDrawSetProportional(playerid, GwTD[playerid][10], 1);
	PlayerTextDrawSetShadow(playerid, GwTD[playerid][10], 1);
	PlayerTextDrawUseBox(playerid, GwTD[playerid][10], 1);
	PlayerTextDrawBoxColor(playerid, GwTD[playerid][10], 84215295);
	PlayerTextDrawTextSize(playerid, GwTD[playerid][10], 57.000000, 18.000000);

	GwTD[playerid][11] = CreatePlayerTextDraw(playerid, 296.000000, 416.000000, "ld_grav:timer");
	PlayerTextDrawBackgroundColor(playerid, GwTD[playerid][11], 255);
	PlayerTextDrawFont(playerid, GwTD[playerid][11], 4);
	PlayerTextDrawLetterSize(playerid, GwTD[playerid][11], 0.500000, -1.549998);
	PlayerTextDrawColor(playerid, GwTD[playerid][11], -1);
	PlayerTextDrawSetOutline(playerid, GwTD[playerid][11], 0);
	PlayerTextDrawSetProportional(playerid, GwTD[playerid][11], 1);
	PlayerTextDrawSetShadow(playerid, GwTD[playerid][11], 1);
	PlayerTextDrawUseBox(playerid, GwTD[playerid][11], 1);
	PlayerTextDrawBoxColor(playerid, GwTD[playerid][11], 84215295);
	PlayerTextDrawTextSize(playerid, GwTD[playerid][11], 14.000000, 12.000000);

	GwTD[playerid][12] = CreatePlayerTextDraw(playerid, 136.000000, 417.000000, "0 / 26");
	PlayerTextDrawBackgroundColor(playerid, GwTD[playerid][12], 255);
	PlayerTextDrawFont(playerid, GwTD[playerid][12], 1);
	PlayerTextDrawLetterSize(playerid, GwTD[playerid][12], 0.269999, 1.100000);
	PlayerTextDrawColor(playerid, GwTD[playerid][12], -1);
	PlayerTextDrawSetOutline(playerid, GwTD[playerid][12], 1);
	PlayerTextDrawSetProportional(playerid, GwTD[playerid][12], 1);

	GwTD[playerid][13] = CreatePlayerTextDraw(playerid, 468.000000, 416.000000, "hud:radar_gangg");
	PlayerTextDrawBackgroundColor(playerid, GwTD[playerid][13], 255);
	PlayerTextDrawFont(playerid, GwTD[playerid][13], 4);
	PlayerTextDrawLetterSize(playerid, GwTD[playerid][13], 0.509998, -1.549998);
	PlayerTextDrawColor(playerid, GwTD[playerid][13], -1);
	PlayerTextDrawSetOutline(playerid, GwTD[playerid][13], 0);
	PlayerTextDrawSetProportional(playerid, GwTD[playerid][13], 1);
	PlayerTextDrawSetShadow(playerid, GwTD[playerid][13], 1);
	PlayerTextDrawUseBox(playerid, GwTD[playerid][13], 1);
	PlayerTextDrawBoxColor(playerid, GwTD[playerid][13], 84215295);
	PlayerTextDrawTextSize(playerid, GwTD[playerid][13], 11.000000, 12.000000);

	GwTD[playerid][14] = CreatePlayerTextDraw(playerid, 170.000000, 416.000000, "hud:radar_gangn");
	PlayerTextDrawBackgroundColor(playerid, GwTD[playerid][14], 255);
	PlayerTextDrawFont(playerid, GwTD[playerid][14], 4);
	PlayerTextDrawLetterSize(playerid, GwTD[playerid][14], 0.479999, -2.449997);
	PlayerTextDrawColor(playerid, GwTD[playerid][14], -1);
	PlayerTextDrawSetOutline(playerid, GwTD[playerid][14], 0);
	PlayerTextDrawSetProportional(playerid, GwTD[playerid][14], 1);
	PlayerTextDrawSetShadow(playerid, GwTD[playerid][14], 1);
	PlayerTextDrawUseBox(playerid, GwTD[playerid][14], 1);
	PlayerTextDrawBoxColor(playerid, GwTD[playerid][14], 84215295);
	PlayerTextDrawTextSize(playerid, GwTD[playerid][14], 12.000000, 12.000000);

	GwTD[playerid][15] = CreatePlayerTextDraw(playerid, 188.000000, 435.000000, "hud:radar_girlfriend");
	PlayerTextDrawBackgroundColor(playerid, GwTD[playerid][15], 255);
	PlayerTextDrawFont(playerid, GwTD[playerid][15], 4);
	PlayerTextDrawLetterSize(playerid, GwTD[playerid][15], 0.479999, -1.849997);
	PlayerTextDrawColor(playerid, GwTD[playerid][15], -1);
	PlayerTextDrawSetOutline(playerid, GwTD[playerid][15], 0);
	PlayerTextDrawSetProportional(playerid, GwTD[playerid][15], 1);
	PlayerTextDrawSetShadow(playerid, GwTD[playerid][15], 1);
	PlayerTextDrawUseBox(playerid, GwTD[playerid][15], 1);
	PlayerTextDrawBoxColor(playerid, GwTD[playerid][15], 84215295);
	PlayerTextDrawTextSize(playerid, GwTD[playerid][15], 10.000000, 10.000000);

	GwTD[playerid][16] = CreatePlayerTextDraw(playerid, 451.000000, 435.000000, "hud:radar_girlfriend");
	PlayerTextDrawBackgroundColor(playerid, GwTD[playerid][16], 255);
	PlayerTextDrawFont(playerid, GwTD[playerid][16], 4);
	PlayerTextDrawLetterSize(playerid, GwTD[playerid][16], 0.479999, -1.849997);
	PlayerTextDrawColor(playerid, GwTD[playerid][16], -1);
	PlayerTextDrawSetOutline(playerid, GwTD[playerid][16], 0);
	PlayerTextDrawSetProportional(playerid, GwTD[playerid][16], 1);
	PlayerTextDrawSetShadow(playerid, GwTD[playerid][16], 1);
	PlayerTextDrawUseBox(playerid, GwTD[playerid][16], 1);
	PlayerTextDrawBoxColor(playerid, GwTD[playerid][16], 84215295);
	PlayerTextDrawTextSize(playerid, GwTD[playerid][16], 10.000000, 10.000000);

	GwTD[playerid][18] = CreatePlayerTextDraw(playerid, 419.000000, 435.000000, "600");
	PlayerTextDrawBackgroundColor(playerid, GwTD[playerid][18], 255);
	PlayerTextDrawFont(playerid, GwTD[playerid][18], 1);
	PlayerTextDrawLetterSize(playerid, GwTD[playerid][18], 0.340000, 1.000000);
	PlayerTextDrawColor(playerid, GwTD[playerid][18], -1);
	PlayerTextDrawSetOutline(playerid, GwTD[playerid][18], 1);
	PlayerTextDrawSetProportional(playerid, GwTD[playerid][18], 1);

	GwTD[playerid][19] = CreatePlayerTextDraw(playerid, 208.000000, 435.000000, "354");
	PlayerTextDrawBackgroundColor(playerid, GwTD[playerid][19], 255);
	PlayerTextDrawFont(playerid, GwTD[playerid][19], 1);
	PlayerTextDrawLetterSize(playerid, GwTD[playerid][19], 0.340000, 1.000000);
	PlayerTextDrawColor(playerid, GwTD[playerid][19], -1);
	PlayerTextDrawSetOutline(playerid, GwTD[playerid][19], 1);
	PlayerTextDrawSetProportional(playerid, GwTD[playerid][19], 1);

	GwTD[playerid][21] = CreatePlayerTextDraw(playerid, 6.000000, 435.000000, "THE GANG NAM STYLE GANG OMG OMG");
	PlayerTextDrawBackgroundColor(playerid, GwTD[playerid][21], 255);
	PlayerTextDrawFont(playerid, GwTD[playerid][21], 1);
	PlayerTextDrawLetterSize(playerid, GwTD[playerid][21], 0.159999, 1.000000);
	PlayerTextDrawColor(playerid, GwTD[playerid][21], -1);
	PlayerTextDrawSetOutline(playerid, GwTD[playerid][21], 1);
	PlayerTextDrawSetProportional(playerid, GwTD[playerid][21], 1);

	GwTD[playerid][22] = CreatePlayerTextDraw(playerid, 262.000000, 410.000000, "~b~8");
	PlayerTextDrawBackgroundColor(playerid, GwTD[playerid][22], 255);
	PlayerTextDrawFont(playerid, GwTD[playerid][22], 2);
	PlayerTextDrawLetterSize(playerid, GwTD[playerid][22], 0.539999, 1.600000);
	PlayerTextDrawColor(playerid, GwTD[playerid][22], -1);
	PlayerTextDrawSetOutline(playerid, GwTD[playerid][22], 1);
	PlayerTextDrawSetProportional(playerid, GwTD[playerid][22], 1);

	GwTD[playerid][24] = CreatePlayerTextDraw(playerid, 252.000000, 423.000000, "Points                       Points");
	PlayerTextDrawBackgroundColor(playerid, GwTD[playerid][24], 150);
	PlayerTextDrawFont(playerid, GwTD[playerid][24], 2);
	PlayerTextDrawLetterSize(playerid, GwTD[playerid][24], 0.240000, 0.699999);
	PlayerTextDrawColor(playerid, GwTD[playerid][24], 50);
	PlayerTextDrawSetOutline(playerid, GwTD[playerid][24], 0);
	PlayerTextDrawSetProportional(playerid, GwTD[playerid][24], 1);
	PlayerTextDrawSetShadow(playerid, GwTD[playerid][24], 1);

	GwTD[playerid][25] = CreatePlayerTextDraw(playerid, 463.000000, 413.000000, "LD_POKE:cd10d");
	PlayerTextDrawBackgroundColor(playerid, GwTD[playerid][25], 255);
	PlayerTextDrawFont(playerid, GwTD[playerid][25], 4);
	PlayerTextDrawLetterSize(playerid, GwTD[playerid][25], 0.500000, -1.549998);
	PlayerTextDrawColor(playerid, GwTD[playerid][25], 50);
	PlayerTextDrawSetOutline(playerid, GwTD[playerid][25], 0);
	PlayerTextDrawSetProportional(playerid, GwTD[playerid][25], 1);
	PlayerTextDrawSetShadow(playerid, GwTD[playerid][25], 1);
	PlayerTextDrawUseBox(playerid, GwTD[playerid][25], 1);
	PlayerTextDrawBoxColor(playerid, GwTD[playerid][25], 84215295);
	PlayerTextDrawTextSize(playerid, GwTD[playerid][25], 57.000000, 18.000000);

	GwTD[playerid][9] = CreatePlayerTextDraw(playerid, 267.000000, 426.000000, "l             l");
	PlayerTextDrawBackgroundColor(playerid, GwTD[playerid][9], 842150500);
	PlayerTextDrawFont(playerid, GwTD[playerid][9], 1);
	PlayerTextDrawLetterSize(playerid, GwTD[playerid][9], 0.500000, 2.799998);
	PlayerTextDrawColor(playerid, GwTD[playerid][9], 1684300820);
	PlayerTextDrawSetOutline(playerid, GwTD[playerid][9], 0);
	PlayerTextDrawSetProportional(playerid, GwTD[playerid][9], 1);
	PlayerTextDrawSetShadow(playerid, GwTD[playerid][9], 1);

	GwTD[playerid][20] = CreatePlayerTextDraw(playerid, 363.000000, 410.000000, "~g~8");
	PlayerTextDrawBackgroundColor(playerid, GwTD[playerid][20], 255);
	PlayerTextDrawFont(playerid, GwTD[playerid][20], 2);
	PlayerTextDrawLetterSize(playerid, GwTD[playerid][20], 0.539999, 1.600000);
	PlayerTextDrawColor(playerid, GwTD[playerid][20], -1);
	PlayerTextDrawSetOutline(playerid, GwTD[playerid][20], 1);
	PlayerTextDrawSetProportional(playerid, GwTD[playerid][20], 1);

	GwTD[playerid][17] = CreatePlayerTextDraw(playerid, 520.000000, 435.000000, "THE GANG NAM STYLE GANG OMG OMG");
	PlayerTextDrawBackgroundColor(playerid, GwTD[playerid][17], 255);
	PlayerTextDrawFont(playerid, GwTD[playerid][17], 1);
	PlayerTextDrawLetterSize(playerid, GwTD[playerid][17], 0.159999, 1.000000);
	PlayerTextDrawColor(playerid, GwTD[playerid][17], -1);
	PlayerTextDrawSetOutline(playerid, GwTD[playerid][17], 1);
	PlayerTextDrawSetProportional(playerid, GwTD[playerid][17], 1);

	GwTD[playerid][23] = CreatePlayerTextDraw(playerid, 482.000000, 417.000000, "0 / 26");
	PlayerTextDrawBackgroundColor(playerid, GwTD[playerid][23], 255);
	PlayerTextDrawFont(playerid, GwTD[playerid][23], 1);
	PlayerTextDrawLetterSize(playerid, GwTD[playerid][23], 0.259999, 1.100000);
	PlayerTextDrawColor(playerid, GwTD[playerid][23], -1);
	PlayerTextDrawSetOutline(playerid, GwTD[playerid][23], 1);
	PlayerTextDrawSetProportional(playerid, GwTD[playerid][23], 1);


//wanted td
	wantedTD[playerid][0] = CreatePlayerTextDraw(playerid, 617.000000, 115.000000, "]]]]]]");
	PlayerTextDrawAlignment(playerid, wantedTD[playerid][0], 3);
	PlayerTextDrawBackgroundColor(playerid, wantedTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, wantedTD[playerid][0], 2);
	PlayerTextDrawLetterSize(playerid, wantedTD[playerid][0], 0.580000, 2.000000);
	PlayerTextDrawColor(playerid, wantedTD[playerid][0], -1872621313);
	PlayerTextDrawSetOutline(playerid, wantedTD[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, wantedTD[playerid][0], 1);

	wantedTD[playerid][1] = CreatePlayerTextDraw(playerid, 617.000000, 115.000000, "]]]]]]");
	PlayerTextDrawAlignment(playerid, wantedTD[playerid][1], 3);
	PlayerTextDrawBackgroundColor(playerid, wantedTD[playerid][1], 0);
	PlayerTextDrawFont(playerid, wantedTD[playerid][1], 2);
	PlayerTextDrawLetterSize(playerid, wantedTD[playerid][1], 0.580000, 2.000000);
	PlayerTextDrawColor(playerid, wantedTD[playerid][1], 80);
	PlayerTextDrawSetOutline(playerid, wantedTD[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, wantedTD[playerid][1], 1);


	damagetd[playerid][0] = CreatePlayerTextDraw(playerid, 413.000000, 371.000000, "LD_POOL:ball");
	PlayerTextDrawBackgroundColor(playerid, damagetd[playerid][0], 255);
	PlayerTextDrawFont(playerid, damagetd[playerid][0], 4);
	PlayerTextDrawLetterSize(playerid, damagetd[playerid][0], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, damagetd[playerid][0], -16777116);
	PlayerTextDrawSetOutline(playerid, damagetd[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid, damagetd[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, damagetd[playerid][0], 1);
	PlayerTextDrawUseBox(playerid, damagetd[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, damagetd[playerid][0], -16777116);
	PlayerTextDrawTextSize(playerid, damagetd[playerid][0], -34.000000, -21.000000);

	hittd[playerid][0] = CreatePlayerTextDraw(playerid, 202.000000, 371.000000, "LD_POOL:ball");
	PlayerTextDrawBackgroundColor(playerid, hittd[playerid][0], 255);
	PlayerTextDrawFont(playerid, hittd[playerid][0], 4);
	PlayerTextDrawLetterSize(playerid, hittd[playerid][0], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, hittd[playerid][0], 22290824);
	PlayerTextDrawSetOutline(playerid, hittd[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid, hittd[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, hittd[playerid][0], 1);
	PlayerTextDrawUseBox(playerid, hittd[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, hittd[playerid][0], -16777116);
	PlayerTextDrawTextSize(playerid, hittd[playerid][0], -39.000000, -20.000000);

	hittd[playerid][1] = CreatePlayerTextDraw(playerid, 182.0, 358.0, "200");
	PlayerTextDrawAlignment(playerid, hittd[playerid][1], 2);
	PlayerTextDrawBackgroundColor(playerid, hittd[playerid][1], 255);
	PlayerTextDrawFont(playerid, hittd[playerid][1], 3);
	PlayerTextDrawLetterSize(playerid, hittd[playerid][1], 0.410000, 0.699999);
	PlayerTextDrawColor(playerid, hittd[playerid][1], 22290943);
	PlayerTextDrawSetOutline(playerid, hittd[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, hittd[playerid][1], 1);

	damagetd[playerid][1] = CreatePlayerTextDraw(playerid, 397.0, 358.000000, "~r~200");
	PlayerTextDrawAlignment(playerid, damagetd[playerid][1], 2);
	PlayerTextDrawBackgroundColor(playerid, damagetd[playerid][1], 255);
	PlayerTextDrawFont(playerid, damagetd[playerid][1], 3);
	PlayerTextDrawLetterSize(playerid, damagetd[playerid][1], 0.410000, 0.699999);
	PlayerTextDrawColor(playerid, damagetd[playerid][1], 22290943);
	PlayerTextDrawSetOutline(playerid, damagetd[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, damagetd[playerid][1], 1);

	Textdraw022[playerid] = CreatePlayerTextDraw(playerid, 150.000000, 350.000000, "~b~Butterfly ~l~/ -46 ~b~Deagle ~l~(183)");
	PlayerTextDrawBackgroundColor(playerid, Textdraw022[playerid], -236);
	PlayerTextDrawFont(playerid, Textdraw022[playerid], 1);
	PlayerTextDrawLetterSize(playerid, Textdraw022[playerid], 0.180000, 0.899999);
	PlayerTextDrawColor(playerid, Textdraw022[playerid], 255);
	PlayerTextDrawSetOutline(playerid, Textdraw022[playerid], 1);
	PlayerTextDrawSetProportional(playerid, Textdraw022[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, Textdraw022[playerid], 0);

	Textdraw023[playerid] = CreatePlayerTextDraw(playerid, 150.000000, 365.000000, "~r~Butterfly ~l~/ -46 ~r~Deagle ~l~(183)");
	PlayerTextDrawBackgroundColor(playerid, Textdraw023[playerid], -236);
	PlayerTextDrawFont(playerid, Textdraw023[playerid], 1);
	PlayerTextDrawLetterSize(playerid, Textdraw023[playerid], 0.180000, 0.899999);
	PlayerTextDrawColor(playerid, Textdraw023[playerid], 255);
	PlayerTextDrawSetOutline(playerid, Textdraw023[playerid], 1);
	PlayerTextDrawSetProportional(playerid, Textdraw023[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, Textdraw023[playerid], 0);

	Textdraw024[playerid] = CreatePlayerTextDraw(playerid, 150.000000, 380.000000, "~r~Butterfly ~l~/ -46 ~r~Deagle ~l~(183)");
	PlayerTextDrawBackgroundColor(playerid, Textdraw024[playerid], -236);
	PlayerTextDrawFont(playerid, Textdraw024[playerid], 1);
	PlayerTextDrawLetterSize(playerid, Textdraw024[playerid], 0.180000, 0.899999);
	PlayerTextDrawColor(playerid, Textdraw024[playerid], 255);
	PlayerTextDrawSetOutline(playerid, Textdraw024[playerid], 1);
	PlayerTextDrawSetProportional(playerid, Textdraw024[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, Textdraw024[playerid], 0);

	VDP[playerid][7] = CreatePlayerTextDraw(playerid, 197.000000, 364.000000, "-");
	PlayerTextDrawBackgroundColor(playerid, VDP[playerid][7], 255);
	PlayerTextDrawFont(playerid, VDP[playerid][7], 1);
	PlayerTextDrawLetterSize(playerid, VDP[playerid][7], 16.950029, 8.100000);
	PlayerTextDrawColor(playerid, VDP[playerid][7], -255);
	PlayerTextDrawSetOutline(playerid, VDP[playerid][7], 0);
	PlayerTextDrawSetProportional(playerid, VDP[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid, VDP[playerid][7], 1);

	VDP[playerid][0]= CreatePlayerTextDraw(playerid, 644.000000, 424.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, VDP[playerid][0], 255);
	PlayerTextDrawFont(playerid, VDP[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid, VDP[playerid][0], 0.519999, 3.300000);
	PlayerTextDrawColor(playerid, VDP[playerid][0], -1);
	PlayerTextDrawSetOutline(playerid, VDP[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid, VDP[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, VDP[playerid][0], 1);
	PlayerTextDrawUseBox(playerid, VDP[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, VDP[playerid][0], 255);
	PlayerTextDrawTextSize(playerid, VDP[playerid][0], -4.000000, 3.000000);

	VDP[playerid][1] = CreatePlayerTextDraw(playerid, 5.000000, 430.000000, "-");
	PlayerTextDrawBackgroundColor(playerid, VDP[playerid][1], 255);
	PlayerTextDrawFont(playerid, VDP[playerid][1], 1);
	PlayerTextDrawLetterSize(playerid, VDP[playerid][1], 16.950029, -1.500000);
	PlayerTextDrawColor(playerid, VDP[playerid][1], -1);
	PlayerTextDrawSetOutline(playerid, VDP[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid, VDP[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, VDP[playerid][1], 1);

	VDP[playerid][2] = CreatePlayerTextDraw(playerid, 202.000000, 430.000000, "-");
	PlayerTextDrawBackgroundColor(playerid, VDP[playerid][2], 255);
	PlayerTextDrawFont(playerid, VDP[playerid][2], 1);
	PlayerTextDrawLetterSize(playerid, VDP[playerid][2], 16.950029, -1.500000);
	PlayerTextDrawColor(playerid, VDP[playerid][2], -1);
	PlayerTextDrawSetOutline(playerid, VDP[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid, VDP[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, VDP[playerid][2], 1);

	VDP[playerid][3] = CreatePlayerTextDraw(playerid, 400.000000, 430.000000, "-");
	PlayerTextDrawBackgroundColor(playerid, VDP[playerid][3], 255);
	PlayerTextDrawFont(playerid, VDP[playerid][3], 1);
	PlayerTextDrawLetterSize(playerid, VDP[playerid][3], 16.950029, -1.500000);
	PlayerTextDrawColor(playerid, VDP[playerid][3], -1);
	PlayerTextDrawSetOutline(playerid, VDP[playerid][3], 0);
	PlayerTextDrawSetProportional(playerid, VDP[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, VDP[playerid][3], 1);

	VDP[playerid][4] = CreatePlayerTextDraw(playerid, 441.000000, 427.000000, "~y~Previous~>~~>~");
	PlayerTextDrawBackgroundColor(playerid, VDP[playerid][4], 255);
	PlayerTextDrawFont(playerid, VDP[playerid][4], 3);
	PlayerTextDrawLetterSize(playerid, VDP[playerid][4], 0.560000, 1.799998);
	PlayerTextDrawColor(playerid, VDP[playerid][4], -1);
	PlayerTextDrawSetOutline(playerid, VDP[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, VDP[playerid][4], 1);
	PlayerTextDrawUseBox(playerid, VDP[playerid][4], 1);
	PlayerTextDrawBoxColor(playerid, VDP[playerid][4], 255);
	PlayerTextDrawTextSize(playerid, VDP[playerid][4], 556.000000, 40.000000);
	PlayerTextDrawSetSelectable(playerid, VDP[playerid][4], 1);

	VDP[playerid][5] = CreatePlayerTextDraw(playerid, 124.000000, 427.000000, "~<~~<~~y~Next");
	PlayerTextDrawBackgroundColor(playerid, VDP[playerid][5], 255);
	PlayerTextDrawFont(playerid, VDP[playerid][5], 3);
	PlayerTextDrawLetterSize(playerid, VDP[playerid][5], 0.560000, 1.799998);
	PlayerTextDrawColor(playerid, VDP[playerid][5], -1);
	PlayerTextDrawSetOutline(playerid, VDP[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, VDP[playerid][5], 1);
	PlayerTextDrawUseBox(playerid, VDP[playerid][5], 1);
	PlayerTextDrawBoxColor(playerid, VDP[playerid][5], 255);
	PlayerTextDrawTextSize(playerid, VDP[playerid][5], 211.000000, 40.000000);
	PlayerTextDrawSetSelectable(playerid, VDP[playerid][5], 1);

	VDP[playerid][8] = CreatePlayerTextDraw(playerid, 315.000000, 407.000000, "purchase");
	PlayerTextDrawAlignment(playerid, VDP[playerid][8], 2);
	PlayerTextDrawBackgroundColor(playerid, VDP[playerid][8], 255);
	PlayerTextDrawFont(playerid, VDP[playerid][8], 3);
	PlayerTextDrawLetterSize(playerid, VDP[playerid][8], 0.389999, 0.999998);
	PlayerTextDrawColor(playerid, VDP[playerid][8], -1);
	PlayerTextDrawSetOutline(playerid, VDP[playerid][8], 1);
	PlayerTextDrawSetProportional(playerid, VDP[playerid][8], 1);
	PlayerTextDrawUseBox(playerid, VDP[playerid][8], 1);
	PlayerTextDrawBoxColor(playerid, VDP[playerid][8], 0);
	PlayerTextDrawTextSize(playerid, VDP[playerid][8], 40.000000, 63.000000);
	PlayerTextDrawSetSelectable(playerid, VDP[playerid][8], 1);

	VDP[playerid][9] = CreatePlayerTextDraw(playerid, 609.000000, 432.000000, "Exit");
	PlayerTextDrawAlignment(playerid, VDP[playerid][9], 2);
	PlayerTextDrawBackgroundColor(playerid, VDP[playerid][9], -16777166);
	PlayerTextDrawFont(playerid, VDP[playerid][9], 2);
	PlayerTextDrawLetterSize(playerid, VDP[playerid][9], 0.260000, 1.399999);
	PlayerTextDrawColor(playerid, VDP[playerid][9], -1);
	PlayerTextDrawSetOutline(playerid, VDP[playerid][9], 1);
	PlayerTextDrawSetProportional(playerid, VDP[playerid][9], 1);
	PlayerTextDrawUseBox(playerid, VDP[playerid][9], 1);
	PlayerTextDrawBoxColor(playerid, VDP[playerid][9], 1);
	PlayerTextDrawTextSize(playerid, VDP[playerid][9], 40.000000, 40.000000);
	PlayerTextDrawSetSelectable(playerid, VDP[playerid][9], 1);

	VDP[playerid][6] = CreatePlayerTextDraw(playerid, 359.000000, 431.000000, "~g~100000000$");
	PlayerTextDrawAlignment(playerid, VDP[playerid][6], 3);
	PlayerTextDrawBackgroundColor(playerid, VDP[playerid][6], 255);
	PlayerTextDrawFont(playerid, VDP[playerid][6], 3);
	PlayerTextDrawLetterSize(playerid, VDP[playerid][6], 0.420000, 1.299999);
	PlayerTextDrawColor(playerid, VDP[playerid][6], -1);
	PlayerTextDrawSetOutline(playerid, VDP[playerid][6], 1);
	PlayerTextDrawSetProportional(playerid, VDP[playerid][6], 1);


	PropTD[playerid][0] = CreatePlayerTextDraw(playerid, 303.000000, 274.000000, "~l~Owner: ~w~NeoNz");
	PlayerTextDrawAlignment(playerid, PropTD[playerid][0], 2);
	PlayerTextDrawBackgroundColor(playerid, PropTD[playerid][0], -39916);
	PlayerTextDrawFont(playerid, PropTD[playerid][0], 3);
	PlayerTextDrawLetterSize(playerid, PropTD[playerid][0], 0.319999, 1.099997);
	PlayerTextDrawColor(playerid, PropTD[playerid][0], 1462632703);
	PlayerTextDrawSetOutline(playerid, PropTD[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, PropTD[playerid][0], 1);
	PlayerTextDrawUseBox(playerid, PropTD[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, PropTD[playerid][0], 0);
	PlayerTextDrawTextSize(playerid, PropTD[playerid][0], 0.000000, 200.000000);
	PlayerTextDrawSetSelectable(playerid, PropTD[playerid][0], 0);

	PropTD[playerid][1] = CreatePlayerTextDraw(playerid, 302.000000, 287.000000, "~l~Price: ~l~$5000000");
	PlayerTextDrawAlignment(playerid, PropTD[playerid][1], 2);
	PlayerTextDrawBackgroundColor(playerid, PropTD[playerid][1], 65300);
	PlayerTextDrawFont(playerid, PropTD[playerid][1], 3);
	PlayerTextDrawLetterSize(playerid, PropTD[playerid][1], 0.319999, 1.099997);
	PlayerTextDrawColor(playerid, PropTD[playerid][1], 1462632703);
	PlayerTextDrawSetOutline(playerid, PropTD[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, PropTD[playerid][1], 1);
	PlayerTextDrawUseBox(playerid, PropTD[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, PropTD[playerid][1], 0);
	PlayerTextDrawTextSize(playerid, PropTD[playerid][1], 0.000000, 200.000000);
	PlayerTextDrawSetSelectable(playerid, PropTD[playerid][1], 0);

	PropTD[playerid][2] = CreatePlayerTextDraw(playerid, 301.000000, 301.000000, "~l~Score: 5000");
	PlayerTextDrawAlignment(playerid, PropTD[playerid][2], 2);
	PlayerTextDrawBackgroundColor(playerid, PropTD[playerid][2], -16777196);
	PlayerTextDrawFont(playerid, PropTD[playerid][2], 3);
	PlayerTextDrawLetterSize(playerid, PropTD[playerid][2], 0.319999, 1.099998);
	PlayerTextDrawColor(playerid, PropTD[playerid][2], 1462632703);
	PlayerTextDrawSetOutline(playerid, PropTD[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, PropTD[playerid][2], 1);
	PlayerTextDrawUseBox(playerid, PropTD[playerid][2], 1);
	PlayerTextDrawBoxColor(playerid, PropTD[playerid][2], 0);
	PlayerTextDrawTextSize(playerid, PropTD[playerid][2], 0.000000, 199.000000);
	PlayerTextDrawSetSelectable(playerid, PropTD[playerid][2], 0);

	PropTD[playerid][3] = CreatePlayerTextDraw(playerid, 304.000000, 314.000000, "~l~Premium Points: 20");
	PlayerTextDrawAlignment(playerid, PropTD[playerid][3], 2);
	PlayerTextDrawBackgroundColor(playerid, PropTD[playerid][3], -1303092194);
	PlayerTextDrawFont(playerid, PropTD[playerid][3], 3);
	PlayerTextDrawLetterSize(playerid, PropTD[playerid][3], 0.319999, 1.099997);
	PlayerTextDrawColor(playerid, PropTD[playerid][3], 1462632703);
	PlayerTextDrawSetOutline(playerid, PropTD[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, PropTD[playerid][3], 1);
	PlayerTextDrawUseBox(playerid, PropTD[playerid][3], 1);
	PlayerTextDrawBoxColor(playerid, PropTD[playerid][3], 0);
	PlayerTextDrawTextSize(playerid, PropTD[playerid][3], 0.000000, 192.000000);
	PlayerTextDrawSetSelectable(playerid, PropTD[playerid][3], 0);

	PropTD[playerid][4] = CreatePlayerTextDraw(playerid, 313.000000, 331.000000, "~r~Note - VIP Players can buy this house without Premium Points!");
	PlayerTextDrawAlignment(playerid, PropTD[playerid][4], 2);
	PlayerTextDrawBackgroundColor(playerid, PropTD[playerid][4], 50);
	PlayerTextDrawFont(playerid, PropTD[playerid][4], 2);
	PlayerTextDrawLetterSize(playerid, PropTD[playerid][4], 0.109999, 0.699998);
	PlayerTextDrawColor(playerid, PropTD[playerid][4], -1);
	PlayerTextDrawSetOutline(playerid, PropTD[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, PropTD[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, PropTD[playerid][4], 0);

	PropTD[playerid][5] = CreatePlayerTextDraw(playerid, 307.000000, 265.000000, "_~n~_~n~_~n~_~n~_");
	PlayerTextDrawAlignment(playerid, PropTD[playerid][5], 2);
	PlayerTextDrawBackgroundColor(playerid, PropTD[playerid][5], 255);
	PlayerTextDrawFont(playerid, PropTD[playerid][5], 1);
	PlayerTextDrawLetterSize(playerid, PropTD[playerid][5], 0.400000, 1.899996);
	PlayerTextDrawColor(playerid, PropTD[playerid][5], -1);
	PlayerTextDrawSetOutline(playerid, PropTD[playerid][5], 0);
	PlayerTextDrawSetProportional(playerid, PropTD[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, PropTD[playerid][5], 1);
	PlayerTextDrawUseBox(playerid, PropTD[playerid][5], 1);
	PlayerTextDrawBoxColor(playerid, PropTD[playerid][5], 51);
	PlayerTextDrawTextSize(playerid, PropTD[playerid][5], 222.000000, 195.000000);
	PlayerTextDrawSetSelectable(playerid, PropTD[playerid][5], 0);

	PropTD[playerid][6] = CreatePlayerTextDraw(playerid, 210.000000, 282.000000, "House Icon");
	PlayerTextDrawBackgroundColor(playerid, PropTD[playerid][6], 0);
	PlayerTextDrawFont(playerid, PropTD[playerid][6], 5);
	PlayerTextDrawLetterSize(playerid, PropTD[playerid][6], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, PropTD[playerid][6], -1);
	PlayerTextDrawSetOutline(playerid, PropTD[playerid][6], 0);
	PlayerTextDrawSetProportional(playerid, PropTD[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, PropTD[playerid][6], 1);
	PlayerTextDrawUseBox(playerid, PropTD[playerid][6], 1);
	PlayerTextDrawBoxColor(playerid, PropTD[playerid][6], 0);
	PlayerTextDrawTextSize(playerid, PropTD[playerid][6], 34.000000, 34.000000);
	PlayerTextDrawSetPreviewModel(playerid, PropTD[playerid][6], 1272);
	PlayerTextDrawSetPreviewRot(playerid, PropTD[playerid][6], 0.000000, 0.000000, 180.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid, PropTD[playerid][6], 0);

	PropTD[playerid][7] = CreatePlayerTextDraw(playerid, 307.000000, 255.000000, "~y~Nigga's Villa ( 15 )");
	PlayerTextDrawAlignment(playerid, PropTD[playerid][7], 2);
	PlayerTextDrawBackgroundColor(playerid, PropTD[playerid][7], 255);
	PlayerTextDrawFont(playerid, PropTD[playerid][7], 2);
	PlayerTextDrawLetterSize(playerid, PropTD[playerid][7], 0.329998, 1.399999);
	PlayerTextDrawColor(playerid, PropTD[playerid][7], -1);
	PlayerTextDrawSetOutline(playerid, PropTD[playerid][7], 1);
	PlayerTextDrawSetProportional(playerid, PropTD[playerid][7], 1);
	PlayerTextDrawUseBox(playerid, PropTD[playerid][7], 1);
	PlayerTextDrawBoxColor(playerid, PropTD[playerid][7], 0);
	PlayerTextDrawTextSize(playerid, PropTD[playerid][7], 0.000000, 220.000000);
	PlayerTextDrawSetSelectable(playerid, PropTD[playerid][7], 0);
/*
	PropTD[playerid][0] = CreatePlayerTextDraw(playerid, 303.000000, 315.000000, "~l~Owner: ~w~NeoNz");
	PlayerTextDrawAlignment(playerid, PropTD[playerid][0], 2);
	PlayerTextDrawBackgroundColor(playerid, PropTD[playerid][0], -39916);
	PlayerTextDrawFont(playerid, PropTD[playerid][0], 3);
	PlayerTextDrawLetterSize(playerid, PropTD[playerid][0], 0.319999, 1.099997);
	PlayerTextDrawColor(playerid, PropTD[playerid][0], 1462632703);
	PlayerTextDrawSetOutline(playerid, PropTD[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, PropTD[playerid][0], 1);
	PlayerTextDrawUseBox(playerid, PropTD[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, PropTD[playerid][0], 0);
	PlayerTextDrawTextSize(playerid, PropTD[playerid][0], 0.000000, 200.000000);
	PlayerTextDrawSetSelectable(playerid, PropTD[playerid][0], 0);

	PropTD[playerid][1] = CreatePlayerTextDraw(playerid, 302.000000, 330.000000, "~l~Price: ~l~$5000000");
	PlayerTextDrawAlignment(playerid, PropTD[playerid][1], 2);
	PlayerTextDrawBackgroundColor(playerid, PropTD[playerid][1], 65300);
	PlayerTextDrawFont(playerid, PropTD[playerid][1], 3);
	PlayerTextDrawLetterSize(playerid, PropTD[playerid][1], 0.319999, 1.099997);
	PlayerTextDrawColor(playerid, PropTD[playerid][1], 1462632703);
	PlayerTextDrawSetOutline(playerid, PropTD[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, PropTD[playerid][1], 1);
	PlayerTextDrawUseBox(playerid, PropTD[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, PropTD[playerid][1], 0);
	PlayerTextDrawTextSize(playerid, PropTD[playerid][1], 0.000000, 200.000000);
	PlayerTextDrawSetSelectable(playerid, PropTD[playerid][1], 0);

	PropTD[playerid][2] = CreatePlayerTextDraw(playerid, 301.000000, 345.000000, "~l~Score: 5000");
	PlayerTextDrawAlignment(playerid, PropTD[playerid][2], 2);
	PlayerTextDrawBackgroundColor(playerid, PropTD[playerid][2], -16777196);
	PlayerTextDrawFont(playerid, PropTD[playerid][2], 3);
	PlayerTextDrawLetterSize(playerid, PropTD[playerid][2], 0.319999, 1.099998);
	PlayerTextDrawColor(playerid, PropTD[playerid][2], 1462632703);
	PlayerTextDrawSetOutline(playerid, PropTD[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, PropTD[playerid][2], 1);
	PlayerTextDrawUseBox(playerid, PropTD[playerid][2], 1);
	PlayerTextDrawBoxColor(playerid, PropTD[playerid][2], 0);
	PlayerTextDrawTextSize(playerid, PropTD[playerid][2], 0.000000, 199.000000);
	PlayerTextDrawSetSelectable(playerid, PropTD[playerid][2], 0);

	PropTD[playerid][3] = CreatePlayerTextDraw(playerid, 304.000000, 360.000000, "~l~Premium Points: 20");
	PlayerTextDrawAlignment(playerid, PropTD[playerid][3], 2);
	PlayerTextDrawBackgroundColor(playerid, PropTD[playerid][3], -1303092194);
	PlayerTextDrawFont(playerid, PropTD[playerid][3], 3);
	PlayerTextDrawLetterSize(playerid, PropTD[playerid][3], 0.319999, 1.099997);
	PlayerTextDrawColor(playerid, PropTD[playerid][3], 1462632703);
	PlayerTextDrawSetOutline(playerid, PropTD[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, PropTD[playerid][3], 1);
	PlayerTextDrawUseBox(playerid, PropTD[playerid][3], 1);
	PlayerTextDrawBoxColor(playerid, PropTD[playerid][3], 0);
	PlayerTextDrawTextSize(playerid, PropTD[playerid][3], 0.000000, 192.000000);
	PlayerTextDrawSetSelectable(playerid, PropTD[playerid][3], 0);

	PropTD[playerid][4] = CreatePlayerTextDraw(playerid, 313.000000, 375.000000, "~r~Note - VIP Level 3+ Players can buy this house without Premium Points!");
	PlayerTextDrawAlignment(playerid, PropTD[playerid][4], 2);
	PlayerTextDrawBackgroundColor(playerid, PropTD[playerid][4], 50);
	PlayerTextDrawFont(playerid, PropTD[playerid][4], 2);
	PlayerTextDrawLetterSize(playerid, PropTD[playerid][4], 0.109999, 0.699998);
	PlayerTextDrawColor(playerid, PropTD[playerid][4], -1);
	PlayerTextDrawSetOutline(playerid, PropTD[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, PropTD[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, PropTD[playerid][4], 0);

	PropTD[playerid][5] = CreatePlayerTextDraw(playerid, 307.000000, 305.000000, "_~n~_~n~_~n~_~n~_");
	PlayerTextDrawAlignment(playerid, PropTD[playerid][5], 2);
	PlayerTextDrawBackgroundColor(playerid, PropTD[playerid][5], 255);
	PlayerTextDrawFont(playerid, PropTD[playerid][5], 1);
	PlayerTextDrawLetterSize(playerid, PropTD[playerid][5], 0.400000, 1.899996);
	PlayerTextDrawColor(playerid, PropTD[playerid][5], -1);
	PlayerTextDrawSetOutline(playerid, PropTD[playerid][5], 0);
	PlayerTextDrawSetProportional(playerid, PropTD[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, PropTD[playerid][5], 1);
	PlayerTextDrawUseBox(playerid, PropTD[playerid][5], 1);
	PlayerTextDrawBoxColor(playerid, PropTD[playerid][5], 51);
	PlayerTextDrawTextSize(playerid, PropTD[playerid][5], 222.000000, 195.000000);
	PlayerTextDrawSetSelectable(playerid, PropTD[playerid][5], 0);

	PropTD[playerid][6] = CreatePlayerTextDraw(playerid, 210.000000, 325.000000, "House Icon");//328
	PlayerTextDrawBackgroundColor(playerid, PropTD[playerid][6], 0);
	PlayerTextDrawFont(playerid, PropTD[playerid][6], 5);
	PlayerTextDrawLetterSize(playerid, PropTD[playerid][6], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, PropTD[playerid][6], -1);
	PlayerTextDrawSetOutline(playerid, PropTD[playerid][6], 0);
	PlayerTextDrawSetProportional(playerid, PropTD[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, PropTD[playerid][6], 1);
	PlayerTextDrawUseBox(playerid, PropTD[playerid][6], 1);
	PlayerTextDrawBoxColor(playerid, PropTD[playerid][6], 0);
	PlayerTextDrawTextSize(playerid, PropTD[playerid][6], 34.000000, 34.000000);
	PlayerTextDrawSetPreviewModel(playerid, PropTD[playerid][6], 1272);
	PlayerTextDrawSetPreviewRot(playerid, PropTD[playerid][6], 0.000000, 0.000000, 180.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid, PropTD[playerid][6], 0);

	PropTD[playerid][7] = CreatePlayerTextDraw(playerid, 307.000000, 295.000000, "~y~Nigga's Villa ( 15 )");
	PlayerTextDrawAlignment(playerid, PropTD[playerid][7], 2);
	PlayerTextDrawBackgroundColor(playerid, PropTD[playerid][7], 255);
	PlayerTextDrawFont(playerid, PropTD[playerid][7], 2);
	PlayerTextDrawLetterSize(playerid, PropTD[playerid][7], 0.329998, 1.399999);
	PlayerTextDrawColor(playerid, PropTD[playerid][7], -1);
	PlayerTextDrawSetOutline(playerid, PropTD[playerid][7], 1);
	PlayerTextDrawSetProportional(playerid, PropTD[playerid][7], 1);
	PlayerTextDrawUseBox(playerid, PropTD[playerid][7], 1);
	PlayerTextDrawBoxColor(playerid, PropTD[playerid][7], 0);
	PlayerTextDrawTextSize(playerid, PropTD[playerid][7], 0.000000, 220.000000);
	PlayerTextDrawSetSelectable(playerid, PropTD[playerid][7], 0);
*/
}
stock GatePath(gateid)
{
  new gatefile[64];
  format(gatefile, sizeof(gatefile), "Gates/GateID%d.ini", gateid);
  return gatefile;
}

stock pGPCI(playerid)
{
    new Playergpci[128];
    gpci(playerid, Playergpci, 128);
    return Playergpci;

}
stock pIP(playerid)
{
    new PlayerIP[16];
    GetPlayerIp(playerid, PlayerIP, 16);
    return PlayerIP;
}

forward JennyMSG();
public JennyMSG()
{
	 new str[128];
	 switch(random(27))
	 {
		case 0: SendBotMessage("/Fallout people /Fallout");
		case 1: SendBotMessage("OMG WTF LULZ LMAO");
		case 2: SendBotMessage("The End Is Near");
		case 3: SendBotMessage("numnum");
		case 4..5: if(Iter_Count(Player) > 0) format(str, sizeof(str), "%s <3", pName[Iter_Random(Player)]), SendBotMessage(str);
		case 6: SendBotMessage("lol");
		case 7: SendBotMessage("Boooooooooom!");
		case 8: SendBotMessage("~.~!");
		case 9: SendBotMessage("Jenny got a baby !! @!@$#!!");
	    case 10..12:
    	foreach(new i : Player) if(PlayerInfo[i][pHours] < 24)
        SendClientMessage(i, 0x7E62A1FF, "{168BFF}---------- » VIP: « ----------"),
        SendClientMessage(i, 0x7E62A1FF, "{F4F4F4}You can donate to support the server and also get unique features!"),
        SendClientMessage(i, 0x7E62A1FF, "{F4F4F4}Use {51FF00}/vip{F4F4F4} to check the information about donating.");
		case 13:
		foreach(new i : Player) if(PlayerInfo[i][pHours] < 24)
		SendClientMessage(i, 0x7E62A1FF, "{168BFF}---------- » Forums: « ----------"),
		SendClientMessage(i, 0x7E62A1FF, "{F4F4F4}Do you have a suggestion, or do you want to report a bug?"),
		SendClientMessage(i, 0x7E62A1FF, "{F4F4F4}Don't forget to visit us, and register at our forums!"),
		SendClientMessage(i, 0x7E62A1FF, "{F4F4F4}The forum address is {51FF00}www.gtadm.com{F4F4F4}.");
		case 14:
		foreach(new i : Player) if(PlayerInfo[i][pHours] < 24)
		SendClientMessage(i, 0x7E62A1FF, "{168BFF}---------- » Rules: « ----------"),
		SendClientMessage(i, 0x7E62A1FF, "{F4F4F4}Please follow the {51FF00}/rules{F4F4F4}, or you will be punished."),
		SendClientMessage(i, 0x7E62A1FF, "{F4F4F4}If you seen someone breaking the rules, use {51FF00}/report."),
		SendClientMessage(i, 0x7E62A1FF, "{F4F4F4}You can also report rule breakers at {51FF00}www.gtadm.com{F4F4F4}.");
		case 15:
		foreach(new i : Player) if(PlayerInfo[i][pHours] < 24)
		SendClientMessage(i, 0x7E62A1FF, "{168BFF}---------- » Server: « ----------"),
		SendClientMessage(i, 0x7E62A1FF, "{F4F4F4}Do you like this server? Then add it to your favourites!"),
		SendClientMessage(i, 0x7E62A1FF, "{F4F4F4}The server IP is {51FF00}94.23.162.196:7777{F4F4F4}.");
		case 16:
		foreach(new i : Player) if(PlayerInfo[i][pHours] < 24)
		SendClientMessage(i, 0x7E62A1FF, "{168BFF}---------- » Help & Info: « ----------"),
		SendClientMessage(i, 0x7E62A1FF, "{F4F4F4}Do you need any help? Then make sure to check out our commands, and {51FF00}/info{F4F4F4}."),
		SendClientMessage(i, 0x7E62A1FF, "{F4F4F4}Important commands: {51FF00}/help{F4F4F4}, {51FF00}/cmds{F4F4F4}, {51FF00}/teles{F4F4F4}, {51FF00}/minigames{F4F4F4}.");
        case 17..18:
        foreach(new i : Player) if(PlayerInfo[i][pHours] < 24)
		SendClientMessage(i, 0x7E62A1FF, "{168BFF}---------- » Animations: « ----------"),
		SendClientMessage(i, 0x7E62A1FF, "{F4F4F4}We have got a lot of animations in the server."),
		SendClientMessage(i, 0x7E62A1FF, "{F4F4F4}You can simply find them by using {51FF00}/anims{F4F4F4}.");
        case 19:
        foreach(new i : Player) if(PlayerInfo[i][pHours] < 24)
		SendClientMessage(i, 0x7E62A1FF, "{168BFF}---------- » Minigames: « ----------"),
		SendClientMessage(i, 0x7E62A1FF, "{F4F4F4}There are a lot of minigames in the server."),
		SendClientMessage(i, 0x7E62A1FF, "{F4F4F4}Use {51FF00}/minigames{F4F4F4} to try one of them.");
        case 20:
        foreach(new i : Player) if(PlayerInfo[i][pHours] < 24)
		SendClientMessage(i, 0x7E62A1FF, "{168BFF}---------- » Gangs: « ----------"),
		SendClientMessage(i, 0x7E62A1FF, "{F4F4F4}You can create a gang, invite members, capture turfs and much more!"),
		SendClientMessage(i, 0x7E62A1FF, "{F4F4F4}Use {51FF00}/cmds{F4F4F4} to check the gang commands."),
		SendClientMessage(i, 0x7E62A1FF, "{F4F4F4}There is a list of Top 10 gangs in the server! Use {51FF00}/topgangs{F4F4F4}.");
	    case 21:
	    foreach(new i : Player) if(PlayerInfo[i][pHours] < 24)
		SendClientMessage(i, 0x7E62A1FF, "{168BFF}---------- » Money & Bank: « ----------"),
		SendClientMessage(i, 0x7E62A1FF, "{F4F4F4}To save your money, you need to store it in the {51FF00}/bank{F4F4F4}."),
		SendClientMessage(i, 0x7E62A1FF, "{F4F4F4}Also, if you want to know how to earn money, check {51FF00}/help{F4F4F4}.");
	    case 22:
	    foreach(new i : Player) if(PlayerInfo[i][pHours] < 24)
		SendClientMessage(i, 0x7E62A1FF, "{168BFF}---------- » Houses & Vehicles: « ----------"),
		SendClientMessage(i, 0x7E62A1FF, "{F4F4F4}To buy a house, you need to have enough money and score."),
		SendClientMessage(i, 0x7E62A1FF, "{F4F4F4}With higher score and money, you can buy better houses and vehicles."),
		SendClientMessage(i, 0x7E62A1FF, "{F4F4F4}For more information, use {51FF00}/help{F4F4F4}.");
		case 23:
		foreach(new i : Player) if(PlayerInfo[i][pHours] < 24)
		SendClientMessage(i, 0x7E62A1FF, "{168BFF}---------- » Ammunation: « ----------"),
		SendClientMessage(i, 0x7E62A1FF, "{F4F4F4}Do you need any weapons? You can buy them from our ammunation stores!"),
		SendClientMessage(i, 0x7E62A1FF, "{F4F4F4}To teleport to the ammunation, use {51FF00}/ammulv{F4F4F4}, {51FF00}/ammusf{F4F4F4}, or {51FF00}/ammuls{F4F4F4}.");
		case 24:
		foreach(new i : Player) if(PlayerInfo[i][pHours] < 24)
		SendClientMessage(i, 0x7E62A1FF, "{168BFF}---------- » Properties: « ----------"),
		SendClientMessage(i, 0x7E62A1FF, "{F4F4F4}Do you need money? Properties are the best way to earn it!"),
		SendClientMessage(i, 0x7E62A1FF, "{F4F4F4}You can use {51FF00}/properties {F4F4F4}to see the list of properties."),
		SendClientMessage(i, 0x7E62A1FF, "{F4F4F4}If you want to know more about the properties, check {51FF00}/help{F4F4F4}.");
		case 25:
		foreach(new i : Player) if(PlayerInfo[i][pHours] < 24)
		SendClientMessage(i, 0x7E62A1FF, "{168BFF}---------- » Ignoring: « ----------"),
		SendClientMessage(i, 0x7E62A1FF, "{F4F4F4}You can ignore other player messages by using {51FF00}/block{F4F4F4}."),
		SendClientMessage(i, 0x7E62A1FF, "{F4F4F4}You can block your Private Messages by using {51FF00}/blockpm{F4F4F4}.");
		case 26:
		foreach(new i : Player) if(PlayerInfo[i][pHours] < 24)
		SendClientMessage(i, 0x7E62A1FF, "{168BFF}---------- » Top Lists: « ----------"),
		SendClientMessage(i, 0x7E62A1FF, "{F4F4F4}We have got a lot of Top 10 List's in different categories."),
		SendClientMessage(i, 0x7E62A1FF, "{F4F4F4}You can see full Top List's by using {51FF00}/toplist{F4F4F4}.");
	 }
	 return 1;
}
forward TimeUpdate();
public TimeUpdate()
{
     updatetime();
     if((Iter_Count(Player) > 0)) UpdateNews();
     switch(random(46))
     {
	   case 0: TextDrawSetString(ScreenTXDS[8], "~r~Exporting ~w~cars is a well paid job, try it out! ~b~(/Export)");
	   case 1: TextDrawSetString(ScreenTXDS[8], "~r~Kill ~w~other players to earn Score & Money ~y~(/DM)");
	   case 2: TextDrawSetString(ScreenTXDS[8], "Report ~r~Rule-Breakers ~w~and help us to get rid of ~r~cheaters~w~! ~p~(/Report)");
	   case 3: TextDrawSetString(ScreenTXDS[8], "~w~Seen a ~r~bug~w~? Got a ~g~suggestion~w~? Keep in touch with us at ~y~www.gtadm.com");
	   case 4: TextDrawSetString(ScreenTXDS[8], "You can always change your ~g~Fighting Style~w~ using ~b~(/FS)~w~!");
	   case 5: TextDrawSetString(ScreenTXDS[8], "Use ~r~(/Cmds)~w~ to see the list of the available ~y~Commands!");
	   case 6: TextDrawSetString(ScreenTXDS[8], "Use ~b~(/Teleports)~w~ to see the list of the available ~y~Teleports~w~!");
	   case 7: TextDrawSetString(ScreenTXDS[8], "Join a ~y~gang~w~.. ~r~Capture~w~ turfs.. and be the master of San Andreas! ~p~(/Gangs)");
	   case 8: TextDrawSetString(ScreenTXDS[8], "Dont forget to buy your own ~b~cellphone~w~! ~p~(/PhoneShop)");
	   case 9: TextDrawSetString(ScreenTXDS[8], "Stay away from the ~b~cops~w~! They are looking for you!");
	   case 10: TextDrawSetString(ScreenTXDS[8], "Can you break the ~b~Cannon~w~ record? Type ~p~(/Cannon)~w~ and try your luck!");
	   case 11: TextDrawSetString(ScreenTXDS[8], "Use ~y~(/Stunts)~w~ to see the list of the available ~b~Stunt Maps!");
	   case 12: TextDrawSetString(ScreenTXDS[8], "~p~Become a VIP~w~ and get the ~b~most unique~w~ donator features! ~g~(/VIP)");
	   case 13: TextDrawSetString(ScreenTXDS[8], "Are you bored?~g~ Try out ~w~our awesome minigames! ~y~(/Minigames)");
	   case 14: TextDrawSetString(ScreenTXDS[8], "~w~Tired of typing ~p~with symbols or commands? ~w~Try out ~g~(/Chat)");
   	   case 15: TextDrawSetString(ScreenTXDS[8], "Want to hear ~y~some songs? ~w~Check out ~b~(/Music) ~w~or ~r~(/YouTube)");
       case 16: TextDrawSetString(ScreenTXDS[8], "Add our server ~w~to your ~r~favourites~w~, IP: ~g~94.23.162.196:7777~w~!");
       case 17: TextDrawSetString(ScreenTXDS[8], "Want to know the ~g~best gangs ~w~in the server? ~p~(/Topgangs)");
       case 18: TextDrawSetString(ScreenTXDS[8], "~w~Spend your ~p~Premium Points ~w~and buy extras! ~g~(/Market)");
       case 19: TextDrawSetString(ScreenTXDS[8], "~w~Do you have any ~r~question~w~, or you need any ~b~help~w~? ~y~(/Ask)");
       case 20: TextDrawSetString(ScreenTXDS[8], "~w~Get in touch with our ~y~community~w~, register at ~p~www.gtadm.com");
       case 21: TextDrawSetString(ScreenTXDS[8], "~w~Earn ~g~money & score ~w~to buy your own ~b~house ~w~and ~p~car~w~!");
       case 22: TextDrawSetString(ScreenTXDS[8], "~w~You can always buy some ~b~properties ~w~to earn ~g~money!");
       case 23: TextDrawSetString(ScreenTXDS[8], "~w~Are you a good ~g~racer~w~? Show us what you got! ~b~(/Race)");
       case 24: TextDrawSetString(ScreenTXDS[8], "~w~Want to have some ~g~fun~w~? Are you a good runner? ~p~(/Parkour)");
       case 25: TextDrawSetString(ScreenTXDS[8], "~w~Join the ~g~football ~w~stadium and play a match! ~y~(/Football)");
       case 26: TextDrawSetString(ScreenTXDS[8], "~w~Do you know ~r~Counter Strike~w~? You should try it! ~g~(/CS)");
       case 27: TextDrawSetString(ScreenTXDS[8], "~w~Are you a good ~y~team player~w~? Join Capture The Flag! ~b~(/CTF)");
       case 28: TextDrawSetString(ScreenTXDS[8], "~w~Want to do some ~b~sky diving ~w~challanges? ~y~(/Dive)");
       case 29: TextDrawSetString(ScreenTXDS[8], "~w~Want to ~p~crash ~w~some ~b~vehicles ~w~and win? ~r~(/Derby)");
       case 30: TextDrawSetString(ScreenTXDS[8], "~w~Stay ~y~alive ~w~and try to ~g~win ~w~a sumo match! ~r~(/Sumo)");
       case 31: TextDrawSetString(ScreenTXDS[8], "~w~Do you ~y~think ~w~that you can ~r~beat ~w~everyone? ~g~(/LMS)");
       case 32: TextDrawSetString(ScreenTXDS[8], "~w~Try to ~y~survive ~w~in the ultimate ~p~Fallout ~w~challenge! ~b~(/Fallout)");
       case 33: TextDrawSetString(ScreenTXDS[8], "~w~Want to hear ~y~sounds ~w~when you ~r~damage ~w~someone? ~p~(/Hitsound)");
       case 34: TextDrawSetString(ScreenTXDS[8], "~w~You should take your ~p~phone ~w~and have some fun! ~b~(/Phonecmds)");
       case 35: TextDrawSetString(ScreenTXDS[8], "~w~Use ~r~(/TicTac) ~w~to challange someone for a ~g~Tic Tac Toe~w~!");
       case 36: TextDrawSetString(ScreenTXDS[8], "~w~Do you like ~g~missions~w~? Try to complete one of them! ~p~(/Mission)");
       case 37: TextDrawSetString(ScreenTXDS[8], "~w~Join the ~g~Money game ~w~and try to grab the ~b~money bag ~w~first! ~r~(/MG)");
       case 38: TextDrawSetString(ScreenTXDS[8], "~w~Join the ~p~Hay game ~w~and try to ~b~complete ~w~it first! ~g~(/Hay)");
       case 39: TextDrawSetString(ScreenTXDS[8], "~w~Join the ~y~Battlefield ~w~to participate in the ~b~real ~w~war! ~r~(/BF)");
       case 40: TextDrawSetString(ScreenTXDS[8], "~w~Are you looking for ~b~Team ~w~Deathmatches? ~y~(/TDM)");
       case 41: TextDrawSetString(ScreenTXDS[8], "~w~Use ~r~(/Gungame) ~w~to join the ultimate ~b~Gun Game ~w~challenge!");
       case 42: TextDrawSetString(ScreenTXDS[8], "~w~Use ~g~(/PowerUp) ~w~and try to take the ~b~ultimate ~w~power!");
       case 43: TextDrawSetString(ScreenTXDS[8], "~w~Use ~p~(/ShowDmg) ~w~to see ~r~damage ~w~textdraws when you ~g~hit ~w~someone.");
       case 44: TextDrawSetString(ScreenTXDS[8], "~w~Use ~g~(/Outrun) ~w~to try and ~b~win ~w~the awesome ~p~Outrun ~w~minigame!");
       case 45: TextDrawSetString(ScreenTXDS[8], "~w~Use ~g~(/TopList) ~w~to see the most ~b~awesome ~w~list of ~p~Top 10 ~w~Players!");
      //case 46: TextDrawSetString(ScreenTXDS[8], "~w~Use ~g~(/DD) ~w~to to join the ~b~Disco Dodgebomb ~w~minigame!");
      // case 47: TextDrawSetString(ScreenTXDS[8], "~w~Use ~p~(/CO) ~w~to join the ~r~Colosseum ~w~minigame!");
	 }
	 return 1;
}
stock updatetime()
{
   	 new hours, mins, sec, timestr[512];
	 gettimeEx(hours, mins, sec);

	 if(EventStartTime > 0 && EventStarted != 1)
	 {
		  if(EventStarted != 5 && gettime() >= EventStartTime -310 && gettime() < (EventStartTime-180))
		  {
		      switch(EventType)
			  {
			   case 1:SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Hidden Gift Box' {E8D902}Event will start in 5 minutes.");
			   case 2:SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Race' {E8D902}Event will start in 5 minutes.");
			   case 3:SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Derby' {E8D902}Event will start in 5 minutes.");
			   case 4:SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Fallout' {E8D902}Event will start in 5 minutes.");
               case 200: SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'HayGame' {E8D902}Event will start in 5 minutes.");
               case 700: SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Sumo' {E8D902}Event will start in 5 minutes.");
               case 800: SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'LMS' {E8D902}Event will start in 5 minutes.");
               case 900: SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Parkour' {E8D902}Event will start in 5 minutes.");
               case 1000: SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Dive' {E8D902}Event will start in 5 minutes.");
               case 1001: SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Dive2' {E8D902}Event will start in` 5 minutes.");
               case 444: SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Export' {E8D902}Event will start in 5 minutes.");
               case 2429: SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'MoneyGame' {E8D902}Event will start in 5 minutes.");
               case 24: SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'GunGame' {E8D902}Event will start in 5 minutes.");
               case 69: SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'DM2' {E8D902}Event will start in 5 minutes.");
               case 70: SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'DM3' {E8D902}Event will start in 5 minutes.");
               case 71: SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'DM5' {E8D902}Event will start in 5 minutes.");
               case 72: SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'DM8' {E8D902}Event will start in 5 minutes.");
               case 6969: SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Football' {E8D902}Event will start in 5 minutes.");
               case 6970: SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Capture The Flag' {E8D902}Event will start in 5 minutes.");
               case 6971: SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Counter Strike' {E8D902}Event will start in 5 minutes.");
              // case 6972: SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Disco Dodgebomb' {E8D902}Event will start in 5 minutes.");
              /// case 6973: SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Colosseum' {E8D902}Event will start in 5 minutes.");
              /// case 6974: SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Kill the player' {E8D902}Event will start in 5 minutes.");
			   case 73: SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'DM4' {E8D902}Event will start in 5 minutes.");
			   //default:SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'DM' {E8D902}Event will start in 5 minutes.");
			  }
			  EventStarted=5;
		  }
		  else if(EventStarted != 3 && gettime() >= EventStartTime -180 && gettime() < (EventStartTime-60))
		  {
		      switch(EventType)
			  {
			   case 1:SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Hidden Gift Box' {E8D902}Event will start in 2 minutes.");
			   case 2:SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Race' {E8D902}Event will start in 2 minutes.");
			   case 3:SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Derby' {E8D902}Event will start in 2 minutes.");
			   case 4:SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Fallout' {E8D902}Event will start in 2 minutes.");
               case 200: SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'HayGame' {E8D902}Event will start in 2 minutes.");
               case 400: SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Riddle' {E8D902}Event will start in 2 minutes.");
               case 700: SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Sumo' {E8D902}Event will start in 2 minutes.");
               case 800: SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'LMS' {E8D902}Event will start in 2 minutes.");
               case 900: SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Parkour' {E8D902}Event will start in 2 minutes.");
               case 1000: SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Dive' {E8D902}Event will start in 2 minutes.");
               case 1001: SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Dive2' {E8D902}Event will start in 2 minutes.");
               case 444: SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Export' {E8D902}Event will start in 2 minutes.");
               case 2429: SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'MoneyGame' {E8D902}Event will start in 2 minutes.");
               case 24: SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'GunGame' {E8D902}Event will start in 2 minutes.");
               case 69: SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'DM2' {E8D902}Event will start in 2 minutes.");
               case 70: SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'DM3' {E8D902}Event will start in 2 minutes.");
               case 71: SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'DM5' {E8D902}Event will start in 2 minutes.");
               case 72: SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'DM8' {E8D902}Event will start in 2 minutes.");
               case 6969: SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Football' {E8D902}Event will start in 2 minutes.");
               case 6970: SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Capture The Flag' {E8D902}Event will start in 2 minutes.");
               case 6971: SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Counter Strike' {E8D902}Event will start in 2 minutes.");
             ///  case 6972: SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Disco Dodgebomb' {E8D902}Event will start in 2 minutes.");
               case 73: SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'DM4' {E8D902}Event will start in 2 minutes.");
             ///  case 6973: SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Colosseum' {E8D902}Event will start in 2 minutes.");
              /// case 6974: SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Kill the player' {E8D902}Event will start in 2 minutes.");
			  // default:SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'DM' {E8D902}Event will start in 2 minutes.");
			  }
			  EventStarted=3;
		  }
		  else if(EventStarted != 2 && gettime() >= EventStartTime -60 && gettime() < EventStartTime)
		  {
              EventStarted = 2;
		      switch(EventType)
			  {
			   case 1:SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Hidden Gift Box' {E8D902}Event will start in 1 minute.");
			   case 2:
               {
                 SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Race' {E8D902}Event will start in 1 minute.");
                 foreach(new i : Player) if(GetPVarInt(i, "RACER")) RemoveFromRace(i);

			   }
			   case 3:
               {
					if(DERBY > 0)
					{
						KillTimer(DerbyStartTimer);
						DERBY=0;
						KillTimer(DerbyTimer);
						DerbyTimer=-1;
						DerbyStartTimer=-1;
						SendClientMessageToAll(DERBYCOLOR, "» Derby «"DERBYCOLOR_" The demolition derby has been cancelled.");
						foreach(new playerid : NPC) if(GetPVarInt(playerid, "InDerby")) Remove_From_Derby(playerid, 0), LoadPlayerCoords(playerid);
						if(IsValidObject(MovingLand)) DestroyObject(MovingLand);
						MovingLand=INVALID_OBJECT_ID;
					}
					SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Derby' {E8D902}Event will start in 1 minute.");
			   }
               case 4:
			   {
				 if(FallOut > 0)
				 {
					foreach(new playerid : FalloutPlayers)
					{
						  Streamer_ToggleIdleUpdate(playerid, false);
						  if(GetPVarInt(playerid, "inFallout"))
						  {
						    new str[256];
						    if( FallOut > 1 )
						    {
						         SendClientMessageToAll( fOUT2, str );
						         DeletePVar(playerid, "inFallout");
						         DeletePVar(playerid, "falloutplace");
								 DeletePVar(playerid, "typedfallout");

						         SetPlayerCameraPos(playerid, 113.3811, 66.5014, 571.3477);
						         SetPlayerCameraLookAt(playerid, 113.3948, 67.4999, 570.6075);
							     if(IsPlayerConnected(playerid)) SetTimerEx( "f_RespawnPlayer", 2000, 0, "i", playerid );

						    }
						    else
						    {
						        DeletePVar(playerid, "inFallout");
						        DeletePVar(playerid, "falloutplace");
						    }
						  }
					}
					Iter_Clear(FalloutPlayers);
				    EndMinigame( );
				 }
			     SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Fallout' {E8D902}Event will start in 1 minute.");
			   }
               case 200: SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'HayGame' {E8D902}Event will start soon.");
               case 400: SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Riddle' {E8D902}Event will start soon.");
               case 700: SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Sumo' {E8D902}Event will start soon.");
               case 800: SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'LMS' {E8D902}Event will start soon.");
               case 444: SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Export' {E8D902}Event will start soon.");
               case 24: SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'GunGame' {E8D902}Event will start soon.");
               case 69: SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'DM2' {E8D902}Event will start soon.");
               case 70: SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'DM3' {E8D902}Event will start soon.");
               case 71: SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'DM5' {E8D902}Event will start soon.");
               case 72: SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'DM8' {E8D902}Event will start soon.");
               case 73: SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'DM4' {E8D902}Event will start soon.");
			   case 6969:
			   {
                 foreach(new i : Player) if(Footballer[i] > 0)
                 {
			       LoadPlayerCoords(i);
		           for(new f=0; f<8; f++) PlayerTextDrawHide(i, DMpTD[i][f]);

       	           SetPlayerVirtualWorldEX(i, 0);
       	           Footballer[i]=0;
       	           SetPlayerSkin(i, SavedSKIN[i]);
       	           SetCameraBehindPlayer(i);
                   KillTimer(FootballStartTimer);
			       KillTimer(FootballStartTimer2);
		           FootballStartTimer=-1;
	               FootballStartTimer2=-1;
			       EndFootBall();
			       new gang = PlayerInfo[i][pGang];
	               if(gang > 0) SetPlayerColor(i, PlayerColors[GangInfo[gang][gColor]]);
	               else SetPlayerColor(i, PlayerColors[random(200)] );
                   SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Football' {E8D902}Event will start soon.");
                 }
		       }
		       case 6970:
			   {
                 foreach(new i : Player) if(GetPVarInt(i, "inCTF")) Remove_From_CTF(i);
                 KillTimer(CTFStartTimer);
      			 KillTimer(CTFStartTimer2);
      			 CTFStartTimer=-1;
      			 CTFStartTimer2=-1;
      			 foreach (new i : Player)
      			 {
                   inctf[i]=0;
                   ctfteam1[i]=0;
	               ctfteam2[i]=0;
	               SetPlayerTeam(i, NO_TEAM);
	             }
                 SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Capture The Flag' {E8D902}Event will start soon.");
		       }
		       case 6971:
			   {
                 foreach(new i : Player) if(GetPVarInt(i, "CS")) Remove_From_CS(i);
                 EndCS();
                 SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Counter Strike' {E8D902}Event will start soon.");
		       }/*
               case 6972:
			   {
                 foreach(new i : Player) if(GetPVarInt(i, "DD")) Remove_From_DD(i);
                 EndDD();
                 SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Disco Dodgebomb' {E8D902}Event will start soon.");
		       }
		       case 6973:
			   {
                 foreach(new i : Player) if(GetPVarInt(i, "CO")) Remove_From_CO(i);
                 EndCO();
                 SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Colosseum' {E8D902}Event will start soon.");
		       }*/
               case 900:
			   {
                 foreach(new i : Player) if(GetPVarInt(i, "pOur")) RemoveFrompOur(i, 1);
                 SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Parkour' {E8D902}Event will start soon.");
		       }
			   case 2429:
			   {
                    foreach(new i: Player)
					{
					  if(GetPVarInt(i, "InMG"))
					  {
						 EndMG();
					     SetPlayerVirtualWorldEX(i, 0);
					  }
					}
					SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'MoneyGame' {E8D902}Event will start soon.");
			   }
               case 1000:
			   {
					foreach(new i: Player)
					{
					  if(InDive[i] == 1)
					  {
			            InDive[i]=0;
			            SetPlayerVirtualWorldEX(i, 0);
			            ResetPlayerWeaponsEX(i);
						LoadPlayerCoords(i);
					  }
					}
					SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Dive' {E8D902}Event will start soon.");
			   }
               case 1001:
			   {
					foreach(new i: Player)
					{
					  if(InDive[i] == 2)
					  {
			            InDive[i]=0;
			            SetPlayerVirtualWorldEX(i, 0);
			            ResetPlayerWeaponsEX(i);
						LoadPlayerCoords(i);
					  }
					}
					SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'Dive2' {E8D902}Event will start soon.");
			    }
			   //default: SendClientMessageToAll(0xE8AF02FF, "» Event « {E8D902}The {CDF590}'DM' {E8D902}Event will start soon.");
			  }
			  EventStarted=2;
		  }
		  else if(gettime() >= EventStartTime) StartEvent();
	 }

	 else
	 {
	 //Random event
		   if((mins == 0 || mins == 1 || mins == 30 || mins == 31 || mins == 45 || mins == 46) && EventStartTime ==0 && EventStarted ==0 && Iter_Count(Player) > 20)
		   {
				switch(random(17))
				{
					case 0:
					{
		               EventType=700; // sumo
		               EventCooks=5;
		               EventScore=10;
		               EventMoney=2000000;
				       new d=gettime();
		               EventStartTime=d+180;
		               EventStarted=10;
					}
					case 1:
					{
                       EventType=200; //hay
		               EventCooks=3;
		               EventScore=10;
		               EventMoney=2000000;
				       new d=gettime();
		               EventStartTime=d+180;
		               EventStarted=10;
					}
					case 2:
					{
		               EventType=800; /// lms
		               EventCooks=5;
		               EventScore=10;
		               EventMoney=2000000;
		               EventKS=40;
				       new d=gettime();
		               EventStartTime=d+180;
		               EventStarted=10;
					}
					case 3:
					{
		               EventType=900; //parkour
		               EventRaceType=5+random(10);
		               EventCooks=3;
		               EventScore=10;
		               EventMoney=2000000;
		               EventKS=30;
				       new d=gettime();
		               EventStartTime=d+180;
		               EventStarted=10;
					}
					case 4:
					{
		               EventType=1000; // dive
		               EventRaceType=5+random(10);
		               EventCooks=5;
		               EventScore=10;
		               EventMoney=2000000;
		               EventKS=40;
				       new d=gettime();
		               EventStartTime=d+180;
		               EventStarted=10;

					}
					case 5:
					{
		               EventType=1001; // dive2
		               EventRaceType=5+random(10);
		               EventCooks=5;
		               EventScore=10;
		               EventMoney=2000000;
		               EventKS=40;
				       new d=gettime();
		               EventStartTime=d+180;
		               EventStarted=10;

					}
					case 6:
					{
		               EventType=24; //gungame
		               EventCooks=5;
		               EventScore=20;
		               EventMoney=5000000;
				       new d=gettime();
		               EventStartTime=d+180;
		               EventStarted=10;

					}
					case 7:
					{
		               EventType=69; //dm2
		               EventCooks=5;
		               EventScore=20;
		               EventKS=40;
		               EventMoney=5000000;
				       new d=gettime();
		               EventStartTime=d+180;
		               EventStarted=10;

					}
					case 8:
					{
		               EventType=70; //dm3
		               EventCooks=5;
		               EventScore=20;
		               EventKS=40;
		               EventMoney=5000000;
				       new d=gettime();
		               EventStartTime=d+180;
		               EventStarted=10;

					}
					case 9:
					{
		               EventType=71; //dm5
		               EventCooks=5;
		               EventScore=20;
		               EventKS=50;
		               EventMoney=5000000;
				       new d=gettime();
		               EventStartTime=d+180;
		               EventStarted=10;

					}
					case 10:
					{
		               EventType=72; //dm8
		               EventCooks=5;
		               EventScore=20;
		               EventKS=30;
		               EventMoney=5000000;
				       new d=gettime();
		               EventStartTime=d+180;
		               EventStarted=10;

					}
					case 11:
					{
		               EventType=6969; //football
		               EventCooks=5;
		               EventScore=20;
		               EventMoney=5000000;
				       new d=gettime();
		               EventStartTime=d+180;
		               EventStarted=10;

					}
					case 12:
					{
		               EventType=6970; //ctf
		               EventCooks=5;
		               EventScore=20;
		               EventMoney=5000000;
				       new d=gettime();
		               EventStartTime=d+180;
		               EventStarted=10;

					}
					case 13:
					{
		               EventType=6971; //cs
		               EventCooks=3;
		               EventScore=20;
		               EventMoney=5000000;
				       new d=gettime();
		               EventStartTime=d+180;
		               EventStarted=10;

					}
					case 14:
					{
		               EventType=444; //export
		               EventCooks=5;
		               EventScore=20;
		               EventMoney=5000000;
				       new d=gettime();
		               EventStartTime=d+180;
		               EventStarted=10;

					}
					case 15:
					{
		               EventType=2429; //mg
		               EventCooks=5;
		               EventScore=20;
		               EventMoney=5000000;
				       new d=gettime();
		               EventStartTime=d+180;
		               EventStarted=10;

					}
					case 16:
					{
		               EventType=73; //dm4
		               EventCooks=5;
		               EventScore=20;
		               EventKS=30;
		               EventMoney=5000000;
				       new d=gettime();
		               EventStartTime=d+180;
		               EventStarted=10;

					}/*
					case 17:
					{
		               EventType=6972; //disco dodgebomb
		               EventCooks=5;
		               EventScore=20;
		               EventMoney=5000000;
				       new d=gettime();
		               EventStartTime=d+180;
		               EventStarted=10;

					}
					case 18:
					{
		               EventType=6973; //colosseum
		               EventCooks=5;
		               EventScore=20;
		               EventMoney=5000000;
				       new d=gettime();
		               EventStartTime=d+180;
		               EventStarted=10;

					}*/

				}
		   }
	 }
     format(timestr, sizeof(timestr), "%s%d:%s%d", (hours < 10) ? ("0") : (""), hours, (mins < 10) ? ("0") : (""), mins);
     TextDrawSetStringEX(clock, timestr);

     if(mins == 0 || mins == 15 || mins == 30 || mins == 45)
     {
       GangPayday();
     }
     if(PourStat == 0 && mins == 10 || mins == 20 || mins == 30 || mins == 40 || mins == 50 || mins == 51 || mins == 52 || mins == 53)
     {
       for(new x=0; x<12; x++) PourPlaces[x]=0;
       PourStat=2;
       if(ParkOurInfo[Pour][CPcount] < 1)
       {
         GeneratePOurID3();
       }
     }
     foreach (new i : Player)
	 {
       PlayerInfo[i][pMins]++;
       if(PlayerInfo[i][pMins] >= 60)
	   {
          PlayerInfo[i][inHours]++;
		  PlayerInfo[i][pHours]++;
		  PlayerInfo[i][pMins] = 0;
		  if(PlayerInfo[i][inHours] >= 5) GiveMedal(i, 68);
		  if(PlayerInfo[i][pHours] >= 24) GiveMedal(i, 2);
       }
       if(mins == 0 || mins == 15 || mins == 30 || mins == 45)
       {
         new cash = GetPlayerTotalPayday(i);
         if(cash > 0)
		 {
            new str[70];
			GivePlayerMoneyEX(i, cash);
			format(str, sizeof(str), "~g~+%d", cash);
			PlayerTextDrawSetString(i, pMoneyTD[i][0], str);

			format(str, sizeof(str), "~g~~h~~h~~h~Payday", cash);
			PlayerTextDrawSetString(i, pMoneyTD[i][2], str);

			PlayerTextDrawShow(i, pMoneyTD[i][0]);
			PlayerTextDrawShow(i, pMoneyTD[i][1]);
			PlayerTextDrawShow(i, pMoneyTD[i][2]);
			SetTimerEx("HideMoneyTD", 2000, false, "i", i);
 		 }
       }
     }
     //TextDrawSetStringEX(dayTD, GetWeekDay());
	 new tt=gettime();
	 for(new i=0; i<MAX_HOUSES; i++)
	 {
	    if(hExist[i] == 1 && hInfo[i][hOwnerID] > 0 && strcmp("No owner", hInfo[i][Owner]) && strcmp("No owner", hInfo[i][Owner]) )
	    {
		   if(hInfo[i][PP] < 1)
		   {
			   if(hInfo[i][LastVisit] > 0 && tt - hInfo[i][LastVisit] >= 1814400)
			   {
				  printf("-Approve- House ID %d owned by %s (%d) has been approved by Jonny", i, hInfo[i][Owner], hInfo[i][hOwnerID]);
				  printf("-Approve- Time: %d | Last Visit: %d | a : %d", tt, hInfo[i][LastVisit], tt - hInfo[i][LastVisit] );
				  new Query[128], string[144];
				  format(Query, sizeof(Query), "UPDATE `users` SET `Car` = -255, `House` = -255 WHERE `Name` = '%s'", Escape_Name(hInfo[i][Owner]));
				  mysql_query(GTADM, Query);

				  DestroyPickup(HousePickup[i]);
				  DestroyDynamicMapIcon(HouseIcon[i]);
				  HousePickup[i] = CreatePickup(1273, 23, hInfo[i][ExteriorX], hInfo[i][ExteriorY], hInfo[i][ExteriorZ]);
				  HouseIcon[i] = CreateDynamicMapIcon(hInfo[i][ExteriorX], hInfo[i][ExteriorY], hInfo[i][ExteriorZ], 31, 0, 0, -1, -1, 500.0);
				  new loc[50], k=GetPosZone(hInfo[i][ExteriorX], hInfo[i][ExteriorY]);
				  if(k < 0) loc="Unknown Location";
				  else format(loc, sizeof(loc), "%s", gSAZones[k][SAZONE_NAME]);
				  format(string, sizeof(string), "{3BB023}» Admin action « {ABFF85}Admin Jonny has approved %s's house in (%s)", hInfo[i][Owner], loc);
				  SendClientMessageToAll(AdminInfo, string);
				  format(hInfo[i][Owner], 24, "No owner");
				  hInfo[i][hOwnerID]=-1;
				  UpdatehInfo(i);
			   }
		    }
		    else
		    {
			   if(hInfo[i][LastVisit] > 0 &&  tt - hInfo[i][LastVisit] >= 1814400)
			   {
				  printf("-Approve- House ID %d owned by %s (%d) has been approved by Jonny", i, hInfo[i][Owner], hInfo[i][hOwnerID]);
				  printf("Time: %d | Last Visit: %d | a : %d", tt, hInfo[i][LastVisit], tt - hInfo[i][LastVisit] );
				  new Query[128], string[144];
				  format(Query, sizeof(Query), "UPDATE `users` SET `Car` = -255, `House` = -255 WHERE `Name` = '%s'", Escape_Name(hInfo[i][Owner]));
				  mysql_query(GTADM, Query);

				  DestroyPickup(HousePickup[i]);
				  DestroyDynamicMapIcon(HouseIcon[i]);
				  HousePickup[i] = CreatePickup(1273, 23, hInfo[i][ExteriorX], hInfo[i][ExteriorY], hInfo[i][ExteriorZ]);
				  HouseIcon[i] = CreateDynamicMapIcon(hInfo[i][ExteriorX], hInfo[i][ExteriorY], hInfo[i][ExteriorZ], 31, 0, 0, -1, -1, 500.0);
				  new loc[50], k=GetPosZone(hInfo[i][ExteriorX], hInfo[i][ExteriorY]);
				  if(k < 0) loc="Unknown Location";
				  else format(loc, sizeof(loc), "%s", gSAZones[k][SAZONE_NAME]);
				  format(string, sizeof(string), "{3BB023}» Admin action « {ABFF85}Admin Jonny has approved %s's house in (%s)", hInfo[i][Owner], loc);
				  SendClientMessageToAll(AdminInfo, string);
				  format(hInfo[i][Owner], 24, "No owner");
				  hInfo[i][hOwnerID]=-1;
				  UpdatehInfo(i);
			   }

			}
	    }
	 }
	 new Year, Month, Day;
     getdate(Year, Month, Day);
     //format(timestr, sizeof(timestr), "%d.%d.%d", Day, Month, Year);
     format(timestr, sizeof(timestr), "%d/%d/%d", Year, Month, Day);
     TextDrawSetStringEX(DateTD, timestr);
}

stock GetWeekDay(day=0, month=0, year=0)
{
  if (!day) getdate(year, month, day);
  new weekday_str[10], j, e;
  if (month <= 2)
    {
    month += 12;
    --year;
    }
  j = year % 100;
  e = year / 100;
  switch ((day + (month+1)*26/10 + j + j/4 + e/4 - 2*e) % 7)
    {
    case 0: weekday_str = "Saturday";
    case 1: weekday_str = "Sunday";
    case 2: weekday_str = "Monday";
    case 3: weekday_str = "Tuesday";
    case 4: weekday_str = "Wednesday";
    case 5: weekday_str = "Thursday";
    case 6: weekday_str = "Friday";
    }
  return weekday_str;
}

stock GangPayday()
{
	for(new x=0; x<MAX_GANGS; x++)
	{
		if(gOnlineMembersCount(x) > 0)
		{
			  new turfs=CountGangZones(x);
              if(turfs > 0)
              {
		          new str[70], payday=(turfs*750);
		          new ab=GangInfo[x][gBank]+payday;

			      foreach (new i : Player)
			      {
			    	 if(PlayerInfo[i][pGang] == x)
			    	 {
						format(str, sizeof(str), "~g~+%d", payday);
						PlayerTextDrawSetString(i, pMoneyTD[i][0], str);
						PlayerTextDrawSetString(i, pMoneyTD[i][2], "~g~~h~~h~~h~Gang Earnings");
						PlayerTextDrawShow(i, pMoneyTD[i][0]);
						PlayerTextDrawShow(i, pMoneyTD[i][1]);
						PlayerTextDrawShow(i, pMoneyTD[i][2]);
						SetTimerEx("HideMoneyTD", 2000, false, "i", i);
						if(pLevel[i][gangster] >= 40 && pLevel[i][gangster] < 50) GivePlayerMoneyEX(i, floatround(payday/4), 1);
						else if(pLevel[i][gangster] >= 50) GivePlayerMoneyEX(i, floatround(payday/2), 1);
			    	 }
			      }
		          if(ab >= 2000000000)
				  {
                         GangInfo[x][gBank] = 2000000000;
				  }
				  else
				  {
				   GangInfo[x][gBank]=ab;
				  }
	         	  new Query[128];
            	  format(Query, sizeof(Query),  "UPDATE `gangs` SET `GangBank` = %d WHERE `GangID` = %d", GangInfo[x][gBank], x);
            	  mysql_query(GTADM, Query);

			  }
		}
	}
}
stock UpdateNews()
{
       new highestid = INVALID_PLAYER_ID, highest = -1;
       new newsStr[180];

       switch(random(47))
	   {
	     case 0:
	     {
           foreach (new i : Player)
           {
			 if(!GetPVarInt(i, "Hidden"))
			 {
               if(PlayerInfo[i][pHours] > highest)
               {
                   highestid = i;
                   highest = PlayerInfo[i][pHours];
               }
			 }
           }
           if(highestid != INVALID_PLAYER_ID)
           {
	         format(newsStr, sizeof(newsStr), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s:~y~ %s (%d) ~w~is the ~r~most addicted~w~! (~p~%d hours online~w~)", pName[highestid], highestid, PlayerInfo[highestid][pHours]);
	         TextDrawSetStringEX(ScreenTXDS[7], newsStr);

           }
	     }
	     case 1:
	     {
           foreach (new i : Player)
           {
			 if(!GetPVarInt(i, "Hidden"))
			 {
               if(PlayerInfo[i][pWDuel] > highest)
               {
                   highestid = i;
                   highest = PlayerInfo[i][pWDuel];
               }
			 }
           }
           if(highestid != INVALID_PLAYER_ID)
           {
	         format(newsStr, sizeof(newsStr), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s:~y~ %s (%d) ~w~is the ~g~strongest~w~! (~p~%d duels won~w~)", pName[highestid], highestid, PlayerInfo[highestid][pWDuel]);
	         TextDrawSetStringEX(ScreenTXDS[7], newsStr);

           }
	     }
	     case 2:
	     {
           foreach (new i : Player)
           {
			 if(!GetPVarInt(i, "Hidden"))
			 {
               if(GetPlayerPing(i) > highest)
               {
                   highestid = i;
                   highest = GetPlayerPing(i);
               }
			 }
           }
           if(highestid != INVALID_PLAYER_ID)
           {
	         format(newsStr, sizeof(newsStr), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s:~y~ %s (%d) ~w~is the ~p~most terrible lagger~w~! (~g~%d ping~w~)", pName[highestid], highestid, GetPlayerPing(highestid));
	         TextDrawSetStringEX(ScreenTXDS[7], newsStr);

           }
	     }
	     case 3:
	     {
           foreach (new i : Player)
           {
			 if(!GetPVarInt(i, "Hidden"))
			 {
               if(PlayerInfo[i][pWRace] > highest)
               {
                   highestid = i;
                   highest = PlayerInfo[i][pWRace];
               }
			 }
           }
           if(highestid != INVALID_PLAYER_ID)
           {
	         format(newsStr, sizeof(newsStr), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s:~y~ %s (%d) ~w~is the ~g~best driver~w~! (~b~%d races won~w~)", pName[highestid], highestid, PlayerInfo[highestid][pWRace]);
	         TextDrawSetStringEX(ScreenTXDS[7], newsStr);

           }
	     }
	     case 4:
	     {
           foreach (new i : Player)
           {
			 if(!GetPVarInt(i, "Hidden"))
			 {
               if(PlayerInfo[i][pKills] > highest)
               {
                   highestid = i;
                   highest = PlayerInfo[i][pKills];
               }
			 }
           }
           if(highestid != INVALID_PLAYER_ID)
           {
	         format(newsStr, sizeof(newsStr), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s:~y~ %s (%d) ~w~is the ~r~most dangerous~w~! (~g~%d kills~w~)", pName[highestid], highestid, PlayerInfo[highestid][pKills]);
	         TextDrawSetStringEX(ScreenTXDS[7], newsStr);

           }
	     }
	     case 5:
	     {
           foreach (new i : Player)
           {
			 if(!GetPVarInt(i, "Hidden"))
			 {
               if(PlayerInfo[i][pKills] < highest)
               {
                   highestid = i;
                   highest = PlayerInfo[i][pKills];
               }
			 }
           }
           if(highestid != INVALID_PLAYER_ID)
           {
	         format(newsStr, sizeof(newsStr), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s:~y~ %s (%d) ~w~is the ~g~most peacefull~w~! (~g~%d kills~w~)", pName[highestid], highestid, PlayerInfo[highestid][pKills]);
	         TextDrawSetStringEX(ScreenTXDS[7], newsStr);

           }
	     }
	     case 6:
	     {
           foreach (new i : Player)
           {
			 if(!GetPVarInt(i, "Hidden"))
			 {
               if(PlayerInfo[i][pDeaths] > highest)
               {
                   highestid = i;
                   highest = PlayerInfo[i][pDeaths];
               }
			 }
           }
           if(highestid != INVALID_PLAYER_ID)
           {
	         format(newsStr, sizeof(newsStr), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s:~y~ %s (%d) ~w~is the ~p~weakest~w~! (~r~%d deaths~w~)", pName[highestid], highestid, PlayerInfo[highestid][pDeaths]);
	         TextDrawSetStringEX(ScreenTXDS[7], newsStr);

           }
	     }
	     case 7:
	     {
           foreach (new i : Player)
           {
			 if(!GetPVarInt(i, "Hidden"))
			 {
               if(PlayerInfo[i][vDamage] > highest)
               {
                   highestid = i;
                   highest = PlayerInfo[i][vDamage];
               }
			 }
           }
           if(highestid != INVALID_PLAYER_ID)
           {
	         format(newsStr, sizeof(newsStr), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s:~y~ %s (%d) ~w~is the ~p~worst driver~w~! (~r~%d accidents~w~)", pName[highestid], highestid, PlayerInfo[highestid][vDamage]);
	         TextDrawSetStringEX(ScreenTXDS[7], newsStr);

           }
	     }
	     case 8:
	     {
           foreach (new i : Player)
           {
			 if(!GetPVarInt(i, "Hidden"))
			 {
	           new Money = PlayerInfo[i][pBank]+GetPlayerMoneyEx(i);
               if(Money > highest)
               {
                   highestid = i;
                   highest = Money;
               }
			 }
           }
           if(highestid != INVALID_PLAYER_ID)
           {
             new Money = PlayerInfo[highestid][pBank]+GetPlayerMoneyEx(highestid);
	         format(newsStr, sizeof(newsStr), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s:~y~ %s (%d) ~w~is the ~p~richest player~w~! (~g~$%d~w~)", pName[highestid], highestid, Money);
	         TextDrawSetStringEX(ScreenTXDS[7], newsStr);

           }
	     }
	     case 9:
	     {
           foreach (new i : Player)
           {
			 if(!GetPVarInt(i, "Hidden"))
			 {
			   new a=GetPlayerMedalsCount(i);
               if(a > highest)
               {
                   highestid = i;
                   highest = a;
               }
			 }
           }
           if(highestid != INVALID_PLAYER_ID)
           {
			 new a=GetPlayerMedalsCount(highestid);
	         format(newsStr, sizeof(newsStr), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s:~y~ %s (%d) ~w~is the ~g~most successful~w~! (~p~%d medals~w~)", pName[highestid], highestid, a);
	         TextDrawSetStringEX(ScreenTXDS[7], newsStr);

           }
	     }

	     case 10:
	     {
           foreach (new i : Player)
           {
			 if(!GetPVarInt(i, "Hidden"))
			 {
               if(PlayerInfo[i][pScore] > highest)
               {
                   highestid = i;
                   highest = PlayerInfo[i][pScore];
               }
			 }
		   }
           if(highestid != INVALID_PLAYER_ID)
           {
	         format(newsStr, sizeof(newsStr), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s:~y~ %s (%d) ~w~is the ~p~best player~w~! (~g~%d score~w~)", pName[highestid], highestid, highest);
	         TextDrawSetStringEX(ScreenTXDS[7], newsStr);
           }
	     }
	     case 11:
	     {
           foreach (new i : Player)
           {
			 if(!GetPVarInt(i, "Hidden"))
			 {
               if(PlayerInfo[i][pWpOurs] > highest)
               {
                   highestid = i;
                   highest = PlayerInfo[i][pWpOurs];
               }
			 }
           }
           if(highestid != INVALID_PLAYER_ID)
           {
	         format(newsStr, sizeof(newsStr), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s:~y~ %s (%d) ~w~is the ~g~fastest runner~w~! (~p~%d Parkours won~w~)", pName[highestid], highestid, PlayerInfo[highestid][pWpOurs]);
	         TextDrawSetStringEX(ScreenTXDS[7], newsStr);

           }
	     }
	     case 12:
	     {
           foreach (new i : Player)
           {
			 if(!GetPVarInt(i, "Hidden"))
			 {
               if(PlayerInfo[i][pExported] > highest)
               {
                   highestid = i;
                   highest = PlayerInfo[i][pExported];
               }
			 }
           }
           if(highestid != INVALID_PLAYER_ID)
           {
	         format(newsStr, sizeof(newsStr), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s:~y~ %s (%d) ~w~is the best ~r~exporter~w~! (~p~%d exports~w~)", pName[highestid], highestid, PlayerInfo[highestid][pExported]);
	         TextDrawSetStringEX(ScreenTXDS[7], newsStr);

           }
	     }
	     case 13:
	     {
           foreach (new i : Player)
           {
			 if(!GetPVarInt(i, "Hidden"))
			 {
               if(PlayerInfo[i][Drunk] > highest)
               {
                   highestid = i;
                   highest = PlayerInfo[i][Drunk];
               }
			 }
           }
           if(highestid != INVALID_PLAYER_ID)
           {
	         format(newsStr, sizeof(newsStr), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s:~y~ %s (%d) ~w~is the ~r~craziest alcoholic~w~! (~p~%d Drinks~w~)", pName[highestid], highestid, PlayerInfo[highestid][Drunk]);
	         TextDrawSetStringEX(ScreenTXDS[7], newsStr);

           }
	     }
         case 14:
	     {
           foreach (new i : Player)
           {
			 if(!GetPVarInt(i, "Hidden"))
			 {
               if(PlayerInfo[i][SumoWinz] > highest)
               {
                   highestid = i;
                   highest = PlayerInfo[i][SumoWinz];
               }
			 }
           }
           if(highestid != INVALID_PLAYER_ID)
           {
	         format(newsStr, sizeof(newsStr), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s:~y~ %s (%d) ~w~is the ~p~strongest in sumo~w~! (~r~%d sumos won~w~)", pName[highestid], highestid, PlayerInfo[highestid][SumoWinz]);
	         TextDrawSetStringEX(ScreenTXDS[7], newsStr);

           }
	     }
      	 case 15:
	     {
           foreach (new i : Player)
           {
			 if(!GetPVarInt(i, "Hidden"))
			 {
               if(PlayerInfo[i][pWDerby] > highest)
               {
                   highestid = i;
                   highest = PlayerInfo[i][pWDerby];
               }
			 }
           }
           if(highestid != INVALID_PLAYER_ID)
           {
	         format(newsStr, sizeof(newsStr), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s:~y~ %s (%d) ~w~is the ~p~best crasher!~w~ (~r~%d derbies won~w~)", pName[highestid], highestid, PlayerInfo[highestid][pWDerby]);
	         TextDrawSetStringEX(ScreenTXDS[7], newsStr);

           }
	     }
      #if defined USE_POOL

         case 16:
	     {
           foreach (new i : Player)
           {
			 if(!GetPVarInt(i, "Hidden"))
			 {
               if(PlayerInfo[i][PoolWon] > highest)
               {
                   highestid = i;
                   highest = PlayerInfo[i][PoolWon];
               }
			 }
           }
           if(highestid != INVALID_PLAYER_ID)
           {
	         format(newsStr, sizeof(newsStr), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s:~y~ %s (%d) ~w~is the ~g~best in billiard~w~! (~b~%d pools won~w~)", pName[highestid], highestid, PlayerInfo[highestid][PoolWon]);
	         TextDrawSetStringEX(ScreenTXDS[7], newsStr);

           }
	     }
	  #endif
         case 17:
	     {
           foreach (new i : Player)
           {
			 if(!GetPVarInt(i, "Hidden"))
			 {
               if(PlayerInfo[i][CSWins] > highest)
               {
                   highestid = i;
                   highest = PlayerInfo[i][CSWins];
               }
			 }
           }
           if(highestid != INVALID_PLAYER_ID)
           {
	         format(newsStr, sizeof(newsStr), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s:~y~ %s (%d) ~w~is the ~r~most tactical~w~! (~g~%d CS's won~w~)", pName[highestid], highestid, PlayerInfo[highestid][CSWins]);
	         TextDrawSetStringEX(ScreenTXDS[7], newsStr);

           }
	     }
         case 18:
	     {
           foreach (new i : Player)
           {
			 if(!GetPVarInt(i, "Hidden"))
			 {
               if(PlayerInfo[i][Arrests] > highest)
               {
                   highestid = i;
                   highest = PlayerInfo[i][Arrests];
               }
			 }
           }
           if(highestid != INVALID_PLAYER_ID)
           {
	         format(newsStr, sizeof(newsStr), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s:~y~ %s (%d) ~w~is the ~b~best officer~w~! (~r~%d times arrested~w~)", pName[highestid], highestid, PlayerInfo[highestid][Arrests]);
	         TextDrawSetStringEX(ScreenTXDS[7], newsStr);

           }
	     }
	     case 19:
	     {
           foreach (new i : Player)
           {
			 if(!GetPVarInt(i, "Hidden"))
			 {
               if(PlayerInfo[i][pWCTF] > highest)
               {
                   highestid = i;
                   highest = PlayerInfo[i][pWCTF];
               }
			 }
           }
           if(highestid != INVALID_PLAYER_ID)
           {
	         format(newsStr, sizeof(newsStr), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s:~y~ %s (%d) ~w~is the ~p~best CTF player~w~! (~g~%d CTF's won~w~)", pName[highestid], highestid, PlayerInfo[highestid][pWCTF]);
	         TextDrawSetStringEX(ScreenTXDS[7], newsStr);

           }
	     }
	     case 20:
	     {
           foreach (new i : Player)
           {
			 if(!GetPVarInt(i, "Hidden"))
			 {
               if(PlayerInfo[i][pGWinz] > highest)
               {
                   highestid = i;
                   highest = PlayerInfo[i][pGWinz];
               }
			 }
           }
           if(highestid != INVALID_PLAYER_ID)
           {
	         format(newsStr, sizeof(newsStr), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s:~y~ %s (%d) ~w~is the ~b~best gangster~w~! (~g~%d gangwars won~w~)", pName[highestid], highestid, PlayerInfo[highestid][pGWinz]);
	         TextDrawSetStringEX(ScreenTXDS[7], newsStr);

           }
	     }
	     case 21:
	     {
           foreach (new i : Player)
           {
			 if(!GetPVarInt(i, "Hidden"))
			 {
               if(PlayerInfo[i][pGWlost] > highest)
               {
                   highestid = i;
                   highest = PlayerInfo[i][pGWlost];
               }
			 }
           }
           if(highestid != INVALID_PLAYER_ID)
           {
	         format(newsStr, sizeof(newsStr), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s:~y~ %s (%d) ~w~is the ~b~worst gangster~w~! (~r~%d gangwars lost~w~)", pName[highestid], highestid, PlayerInfo[highestid][pGWlost]);
	         TextDrawSetStringEX(ScreenTXDS[7], newsStr);

           }
	     }
	     case 22:
	     {
           foreach (new i : Player)
           {
			 if(!GetPVarInt(i, "Hidden"))
			 {
               if(PlayerInfo[i][pBombed] > highest)
               {
                   highestid = i;
                   highest = PlayerInfo[i][pBombed];
               }
			 }
           }
           if(highestid != INVALID_PLAYER_ID)
           {
	         format(newsStr, sizeof(newsStr), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s:~y~ %s (%d) ~w~is the ~r~best terrorist~w~! (~g~%d players bombed~w~)", pName[highestid], highestid, PlayerInfo[highestid][pBombed]);
	         TextDrawSetStringEX(ScreenTXDS[7], newsStr);

           }
	     }
	     case 23:
	     {
           foreach (new i : Player)
           {
			 if(!GetPVarInt(i, "Hidden"))
			 {
               if(PlayerInfo[i][Heals] > highest)
               {
                   highestid = i;
                   highest = PlayerInfo[i][Heals];
               }
			 }
           }
           if(highestid != INVALID_PLAYER_ID)
           {
	         format(newsStr, sizeof(newsStr), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s:~y~ %s (%d) ~w~is the ~g~best medic~w~! (~b~%d times healed~w~)", pName[highestid], highestid, PlayerInfo[highestid][Heals]);
	         TextDrawSetStringEX(ScreenTXDS[7], newsStr);

           }
	     }
	     case 24:
	     {
           foreach (new i : Player)
           {
			 if(!GetPVarInt(i, "Hidden"))
			 {
               if(PlayerInfo[i][rTestWon] > highest)
               {
                   highestid = i;
                   highest = PlayerInfo[i][rTestWon];
               }
			 }
           }
           if(highestid != INVALID_PLAYER_ID)
           {
	         format(newsStr, sizeof(newsStr), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s:~y~ %s (%d) ~w~has the ~b~best reaction~w~! (~g~%d tests won~w~)", pName[highestid], highestid, PlayerInfo[highestid][rTestWon]);
	         TextDrawSetStringEX(ScreenTXDS[7], newsStr);

           }
	     }
         case 25:
	     {
           foreach (new i : Player)
           {
			 if(!GetPVarInt(i, "Hidden"))
			 {
               if(PlayerInfo[i][pWLms] > highest)
               {
                   highestid = i;
                   highest = PlayerInfo[i][pWLms];
               }
			 }
           }
           if(highestid != INVALID_PLAYER_ID)
           {
	         format(newsStr, sizeof(newsStr), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s:~y~ %s (%d) ~w~is the ~g~strongest in LMS~w~! (~r~%d LMS's won~w~)", pName[highestid], highestid, PlayerInfo[highestid][pWLms]);
	         TextDrawSetStringEX(ScreenTXDS[7], newsStr);

           }
	     }
         case 26:
	     {
           foreach (new i : Player)
           {
			 if(!GetPVarInt(i, "Hidden"))
			 {
               if(PlayerInfo[i][pEventWon] > highest)
               {
                   highestid = i;
                   highest = PlayerInfo[i][pEventWon];
               }
			 }
           }
           if(highestid != INVALID_PLAYER_ID)
           {
	         format(newsStr, sizeof(newsStr), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s:~y~ %s (%d) ~w~is the ~p~biggest star~w~! (~g~%d events won~w~)", pName[highestid], highestid, PlayerInfo[highestid][pEventWon]);
	         TextDrawSetStringEX(ScreenTXDS[7], newsStr);

           }
	     }
         case 27:
	     {
           foreach (new i : Player)
           {
			 if(!GetPVarInt(i, "Hidden"))
			 {
               if(PlayerInfo[i][HS] > highest)
               {
                   highestid = i;
                   highest = PlayerInfo[i][HS];
               }
			 }
           }
           if(highestid != INVALID_PLAYER_ID)
           {
	         format(newsStr, sizeof(newsStr), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s:~y~ %s (%d) ~w~is the ~r~most well-aimed~w~! (~p~%d headshots~w~)", pName[highestid], highestid, PlayerInfo[highestid][HS]);
	         TextDrawSetStringEX(ScreenTXDS[7], newsStr);

           }
	     }
	     case 28:
	     {
           foreach (new i : Player)
           {
			 if(!GetPVarInt(i, "Hidden"))
			 {
               if(PlayerInfo[i][pDrecord] > highest)
               {
                   highestid = i;
                   highest = PlayerInfo[i][pDrecord];
               }
			 }
           }
           if(highestid != INVALID_PLAYER_ID)
           {
	         format(newsStr, sizeof(newsStr), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s:~y~ %s (%d) ~w~is the ~g~best drifter~w~! (~p~%d drift records~w~)", pName[highestid], highestid, PlayerInfo[highestid][pDrecord]);
	         TextDrawSetStringEX(ScreenTXDS[7], newsStr);

           }
	     }
         case 29:
	     {
           foreach (new i : Player)
           {
			 if(!GetPVarInt(i, "Hidden"))
			 {
               if(PlayerInfo[i][pSpeedR] > highest)
               {
                   highestid = i;
                   highest = PlayerInfo[i][pSpeedR];
               }
			 }
           }
           if(highestid != INVALID_PLAYER_ID)
           {
	         format(newsStr, sizeof(newsStr), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s:~y~ %s (%d) ~w~is the ~p~fastest driver~w~! (~g~%d speed records~w~)", pName[highestid], highestid, PlayerInfo[highestid][pSpeedR]);
	         TextDrawSetStringEX(ScreenTXDS[7], newsStr);

           }
	     }
	     case 30:
	     {
           foreach (new i : Player)
           {
			 if(!GetPVarInt(i, "Hidden"))
			 {
               if(PlayerInfo[i][pRrecord] > highest)
               {
                   highestid = i;
                   highest = PlayerInfo[i][pRrecord];
               }
			 }
           }
           if(highestid != INVALID_PLAYER_ID)
           {
	         format(newsStr, sizeof(newsStr), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s:~y~ %s (%d) ~w~is the ~b~fastest in race~w~! (~r~%d race records~w~)", pName[highestid], highestid, PlayerInfo[highestid][pRrecord]);
	         TextDrawSetStringEX(ScreenTXDS[7], newsStr);

           }
	     }
	     case 31:
	     {
           foreach (new i : Player)
           {
			 if(!GetPVarInt(i, "Hidden"))
			 {
               if(PlayerInfo[i][pDrugs] > highest)
               {
                   highestid = i;
                   highest = PlayerInfo[i][pDrugs];
               }
			 }
           }
           if(highestid != INVALID_PLAYER_ID)
           {
	         format(newsStr, sizeof(newsStr), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s:~y~ %s (%d) ~w~has the ~r~most drugs~w~! (~p~%d drug spliffs~w~)", pName[highestid], highestid, PlayerInfo[highestid][pDrugs]);
	         TextDrawSetStringEX(ScreenTXDS[7], newsStr);

           }
	     }
	     case 32:
	     {
           foreach (new i : Player)
           {
			 if(!GetPVarInt(i, "Hidden"))
			 {
               if(PlayerInfo[i][pBounty] > highest)
               {
                   highestid = i;
                   highest = PlayerInfo[i][pBounty];
               }
			 }
           }
           if(highestid != INVALID_PLAYER_ID)
           {
	         format(newsStr, sizeof(newsStr), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s:~y~ %s (%d) ~w~is the ~p~most wanted~w~! (~g~$%d bounty~w~)", pName[highestid], highestid, PlayerInfo[highestid][pBounty]);
	         TextDrawSetStringEX(ScreenTXDS[7], newsStr);

           }
	     }
	     case 33:
	     {
           foreach (new i : Player)
           {
			 if(!GetPVarInt(i, "Hidden"))
			 {
               if(PlayerInfo[i][pCook] > highest)
               {
                   highestid = i;
                   highest = PlayerInfo[i][pCook];
               }
			 }
           }
           if(highestid != INVALID_PLAYER_ID)
           {
	         format(newsStr, sizeof(newsStr), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s:~y~ %s (%d) ~w~is the most ~g~popular~w~! (~p~%d premium points~w~)", pName[highestid], highestid, PlayerInfo[highestid][pCook]);
	         TextDrawSetStringEX(ScreenTXDS[7], newsStr);

           }
	     }
	     case 34:
	     {
           foreach (new i : Player)
           {
			 if(!GetPVarInt(i, "Hidden"))
			 {
               if(PlayerInfo[i][PfOutW] > highest)
               {
                   highestid = i;
                   highest = PlayerInfo[i][PfOutW];
               }
			 }
           }
           if(highestid != INVALID_PLAYER_ID)
           {
	         format(newsStr, sizeof(newsStr), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s:~y~ %s (%d) ~w~is the ~b~best in fallout~w~! (~g~%d fallouts won~w~)", pName[highestid], highestid, PlayerInfo[highestid][PfOutW]);
	         TextDrawSetStringEX(ScreenTXDS[7], newsStr);

           }
	     }
	     case 35:
	     {
           foreach (new i : Player)
           {
			 if(!GetPVarInt(i, "Hidden"))
			 {
               if(PlayerInfo[i][HayWins] > highest)
               {
                   highestid = i;
                   highest = PlayerInfo[i][HayWins];
               }
			 }
           }
           if(highestid != INVALID_PLAYER_ID)
           {
	         format(newsStr, sizeof(newsStr), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s:~y~ %s (%d) ~w~is the ~p~best farmer~w~! (~b~%d hays won~w~)", pName[highestid], highestid, PlayerInfo[highestid][HayWins]);
	         TextDrawSetStringEX(ScreenTXDS[7], newsStr);

           }
	     }
         case 36:
	     {
           foreach (new i : Player)
           {
			 if(!GetPVarInt(i, "Hidden"))
			 {
               if(PlayerInfo[i][FBWins] > highest)
               {
                   highestid = i;
                   highest = PlayerInfo[i][FBWins];
               }
			 }
           }
           if(highestid != INVALID_PLAYER_ID)
           {
	         format(newsStr, sizeof(newsStr), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s:~y~ %s (%d) ~w~is the ~b~most athletic~w~! (~r~%d footballs won~w~)", pName[highestid], highestid, PlayerInfo[highestid][FBWins]);
	         TextDrawSetStringEX(ScreenTXDS[7], newsStr);

           }
	     }
         case 37:
	     {
           foreach (new i : Player)
           {
			 if(!GetPVarInt(i, "Hidden"))
			 {
               if(PlayerInfo[i][MGWins] > highest)
               {
                   highestid = i;
                   highest = PlayerInfo[i][MGWins];
               }
			 }
           }
           if(highestid != INVALID_PLAYER_ID)
           {
	         format(newsStr, sizeof(newsStr), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s:~y~ %s (%d) ~w~is the ~r~most money hungry~w~! (~g~%d MG's won~w~)", pName[highestid], highestid, PlayerInfo[highestid][MGWins]);
	         TextDrawSetStringEX(ScreenTXDS[7], newsStr);

           }
	     }
	     case 38:
	     {
           foreach (new i : Player)
           {
			 if(!GetPVarInt(i, "Hidden"))
			 {
               if(PlayerInfo[i][GGWins] > highest)
               {
                   highestid = i;
                   highest = PlayerInfo[i][GGWins];
               }
			 }
           }
           if(highestid != INVALID_PLAYER_ID)
           {
	         format(newsStr, sizeof(newsStr), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s:~y~ %s (%d) ~w~is the ~g~best wielder~w~! (~r~%d gungames won~w~)", pName[highestid], highestid, PlayerInfo[highestid][GGWins]);
	         TextDrawSetStringEX(ScreenTXDS[7], newsStr);

           }
	     }
	     case 39:
	     {
           foreach (new i : Player)
           {
			 if(!GetPVarInt(i, "Hidden"))
			 {
               if(PlayerInfo[i][TTTWins] > highest)
               {
                   highestid = i;
                   highest = PlayerInfo[i][TTTWins];
               }
			 }
           }
           if(highestid != INVALID_PLAYER_ID)
           {
	         format(newsStr, sizeof(newsStr), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s:~y~ %s (%d) ~w~has the ~p~best strategies~w~! (~b~%d TTT's won~w~)", pName[highestid], highestid, PlayerInfo[highestid][TTTWins]);
	         TextDrawSetStringEX(ScreenTXDS[7], newsStr);

           }
	     }
	     case 40:
	     {
           foreach (new i : Player)
           {
			 if(!GetPVarInt(i, "Hidden"))
			 {
               if(PlayerInfo[i][pTrucking] > highest)
               {
                   highestid = i;
                   highest = PlayerInfo[i][pTrucking];
               }
			 }
           }
           if(highestid != INVALID_PLAYER_ID)
           {
	         format(newsStr, sizeof(newsStr), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s:~y~ %s (%d) ~w~is the ~g~best trucker~w~! (~p~%d trucks delivered~w~)", pName[highestid], highestid, PlayerInfo[highestid][pTrucking]);
	         TextDrawSetStringEX(ScreenTXDS[7], newsStr);

           }
	     }
	     case 41:
	     {
           foreach (new i : Player)
           {
			 if(!GetPVarInt(i, "Hidden"))
			 {
               if(PlayerInfo[i][pOutRunz] > highest)
               {
                   highestid = i;
                   highest = PlayerInfo[i][pOutRunz];
               }
			 }
           }
           if(highestid != INVALID_PLAYER_ID)
           {
	         format(newsStr, sizeof(newsStr), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s:~y~ %s (%d) ~w~is the ~r~most furious~w~! (~p~%d outruns won~w~)", pName[highestid], highestid, PlayerInfo[highestid][pOutRunz]);
	         TextDrawSetStringEX(ScreenTXDS[7], newsStr);

           }
	     }
         case 42:
	     {
           foreach (new i : Player)
           {
			 if(!GetPVarInt(i, "Hidden"))
			 {
               if(PlayerInfo[i][blowjobs])
               {
                   highestid = i;
                   highest = PlayerInfo[i][blowjobs];
               }
			 }
           }
           if(highestid != INVALID_PLAYER_ID)
           {
	         format(newsStr, sizeof(newsStr), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s:~y~ %s (%d) ~w~is the ~r~best whore~w~! (~p~%d blowjobs~w~)", pName[highestid], highestid, PlayerInfo[highestid][blowjobs]);
	         TextDrawSetStringEX(ScreenTXDS[7], newsStr);

           }
	     }
         case 43:
	     {
           foreach (new i : Player)
           {
			 if(!GetPVarInt(i, "Hidden"))
			 {
               if(PlayerInfo[i][carsrepaired] > highest)
               {
                   highestid = i;
                   highest = PlayerInfo[i][carsrepaired];
               }
			 }
           }
           if(highestid != INVALID_PLAYER_ID)
           {
	         format(newsStr, sizeof(newsStr), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s:~y~ %s (%d) ~w~is the ~b~best mechanic~w~! (~p~%d cars repaired~w~)", pName[highestid], highestid, PlayerInfo[highestid][carsrepaired]);
	         TextDrawSetStringEX(ScreenTXDS[7], newsStr);

           }
	     }
         case 44:
	     {
           foreach (new i : Player)
           {
			 if(!GetPVarInt(i, "Hidden"))
			 {
               if(PlayerInfo[i][diveswon] > highest)
               {
                   highestid = i;
                   highest = PlayerInfo[i][diveswon];
               }
			 }
           }
           if(highestid != INVALID_PLAYER_ID)
           {
	         format(newsStr, sizeof(newsStr), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s:~y~ %s (%d) ~w~is the ~b~craziest player~w~! (~p~%d dives won~w~)", pName[highestid], highestid, PlayerInfo[highestid][diveswon]);
	         TextDrawSetStringEX(ScreenTXDS[7], newsStr);

           }
	     }
	     case 45:
	     {
           foreach (new i : Player)
           {
			 if(!GetPVarInt(i, "Hidden"))
			 {
               if(PlayerInfo[i][bountiesearned] > highest)
               {
                   highestid = i;
                   highest = PlayerInfo[i][bountiesearned];
               }
			 }
           }
           if(highestid != INVALID_PLAYER_ID)
           {
	         format(newsStr, sizeof(newsStr), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s:~y~ %s (%d) ~w~is the ~g~best hitman~w~! (~p~$%d earned~w~)", pName[highestid], highestid, PlayerInfo[highestid][bountiesearned]);
	         TextDrawSetStringEX(ScreenTXDS[7], newsStr);

           }
	     }
	     case 46:
	     {
           foreach (new i : Player)
           {
			 if(!GetPVarInt(i, "Hidden"))
			 {
               if(PlayerInfo[i][Mission] > highest)
               {
                   highestid = i;
                   highest = PlayerInfo[i][Mission];
               }
			 }
           }
           if(highestid != INVALID_PLAYER_ID)
           {
	         format(newsStr, sizeof(newsStr), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s:~y~ %s (%d) ~w~is the ~g~best agent~w~! (~p~%d missions completed~w~)", pName[highestid], highestid, PlayerInfo[highestid][Mission]);
	         TextDrawSetStringEX(ScreenTXDS[7], newsStr);

           }
	     }/*
         case 47:
	     {
           foreach (new i : Player)
           {
			 if(!GetPVarInt(i, "Hidden"))
			 {
               if(PlayerInfo[i][DDWins] > highest)
               {
                   highestid = i;
                   highest = PlayerInfo[i][DDWins];
               }
			 }
           }
           if(highestid != INVALID_PLAYER_ID)
           {
	         format(newsStr, sizeof(newsStr), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s:~y~ %s (%d) ~w~is the ~r~best bomber~w~! (~p~%d DD's won~w~)", pName[highestid], highestid, PlayerInfo[highestid][DDWins]);
	         TextDrawSetStringEX(ScreenTXDS[7], newsStr);

           }
         }
         case 48:
	     {
           foreach (new i : Player)
           {
			 if(!GetPVarInt(i, "Hidden"))
			 {
               if(PlayerInfo[i][COWins] > highest)
               {
                   highestid = i;
                   highest = PlayerInfo[i][COWins];
               }
			 }
           }
           if(highestid != INVALID_PLAYER_ID)
           {
	         format(newsStr, sizeof(newsStr), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s:~y~ %s (%d) ~w~is the ~r~best gladiator~w~! (~p~%d CO's won~w~)", pName[highestid], highestid, PlayerInfo[highestid][COWins]);
	         TextDrawSetStringEX(ScreenTXDS[7], newsStr);

           }
         }*/



	   }


	   if(highestid == INVALID_PLAYER_ID)
       {

             switch(random(4))
	         {
				case 0:
				{
				   new score=0;
				   foreach (new i : Player)
				   {
					  score+=PlayerInfo[i][pScore];
				   }
				   new h= floatround(score/Iter_Count(Player));
	               format(newsStr, sizeof(newsStr), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s: ~y~Every player~w~ has an average ~p~%d score~w~!", h);
	               TextDrawSetStringEX(ScreenTXDS[7], newsStr);
				}
				case 1:
				{
                   TextDrawSetStringEX(ScreenTXDS[7], "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s:~w~ There are ~y~319 ~w~gang zones~w~ to ~r~capture~w~!");
				}
				case 2:
				{
					new count;
				 	for(new i=0; i<MAX_HOUSES; i++)
					{
				      if(hExist[i] == 1)
					  {
						 count++;
				      }
					}
	        		format(newsStr, sizeof(newsStr), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s:~w~ There are ~y~%d ~w~available houses~w~!", count);
	         		TextDrawSetStringEX(ScreenTXDS[7], newsStr);
				}
				case 3:
				{
					new count;
   				    for (new x = 0; x != MAX_GANGS; ++x)
   				    {
   				       if(GangInfo[x][ID] > 0)
   				       {
   				           count++;
   				       }
   				    }
	        		format(newsStr, sizeof(newsStr), "~g~~h~~h~~h~N~g~~h~~h~ew~g~~h~s:~w~ There are ~y~%d ~w~created ~r~gangs~w~!", count);
	         		TextDrawSetStringEX(ScreenTXDS[7], newsStr);
				}

	         }
       }

	   return 1;
}

forward LoadCreatedHouses();
public LoadCreatedHouses()
{
	new rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);
	for(new i = 0; i != rows; i++)
	{
		new houseid;
		cache_get_value_index_int(i, 0, houseid);
		if(houseid >= 0 && houseid <MAX_HOUSES)
		{
			hExist[houseid]=1;
			cache_get_value_index(i, 1, hInfo[houseid][Name]);
			cache_get_value_index(i, 2, hInfo[houseid][Owner]);
			cache_get_value_index_int(i, 3,  hInfo[houseid][Score]);
			cache_get_value_index_int(i, 4, hInfo[houseid][Cost]);
			cache_get_value_index_float(i, 5, hInfo[houseid][ExteriorX]);
			cache_get_value_index_float(i, 6, hInfo[houseid][ExteriorY]);
			cache_get_value_index_float(i, 7, hInfo[houseid][ExteriorZ]);
			cache_get_value_index_float(i, 8, hInfo[houseid][CarX]);
			cache_get_value_index_float(i, 9, hInfo[houseid][CarY]);
			cache_get_value_index_float(i, 10, hInfo[houseid][CarZ]);
			cache_get_value_index_float(i, 11, hInfo[houseid][CarA]);
			cache_get_value_index_float(i, 12, hInfo[houseid][sX]);
			cache_get_value_index_float(i, 13, hInfo[houseid][sY]);
			cache_get_value_index_float(i, 14, hInfo[houseid][sZ]);
			cache_get_value_index_float(i, 15, hInfo[houseid][SpawnA]);
			cache_get_value_index_float(i, 16, hInfo[houseid][InteriorX]);
			cache_get_value_index_float(i, 17, hInfo[houseid][InteriorY]);
			cache_get_value_index_float(i, 18, hInfo[houseid][InteriorZ]);
			cache_get_value_index_float(i, 19, hInfo[houseid][InteriorA]);
			cache_get_value_index_int(i, 20, hInfo[houseid][Interior]);
			cache_get_value_index_int(i, 21, hInfo[houseid][HInt]);
			cache_get_value_index_int(i, 22, hInfo[houseid][PP]);
			cache_get_value_index_int(i, 23, hInfo[houseid][LastVisit]);
			cache_get_value_index_int(i, 24, hInfo[houseid][hOwnerID]);


			new Float:eX=hInfo[houseid][ExteriorX];
			new Float:eY=hInfo[houseid][ExteriorY];
			new Float:eZ=hInfo[houseid][ExteriorZ];
			if(hInfo[houseid][hOwnerID] <= 0)
			{
				HousePickup[houseid] = CreatePickup(1273, 23, eX, eY, eZ);
				HouseIcon[houseid] = CreateDynamicMapIcon(eX, eY, eZ, 31, 0, 0, -1, -1, 500.0);
			}
			else
			{
				HousePickup[houseid] = CreatePickup(1272, 23, eX, eY, eZ);
				HouseIcon[houseid] = CreateDynamicMapIcon(eX, eY, eZ, 32, 0, 0, -1, -1, 500.0);
			}
			new a = hInfo[houseid][HInt];
			if(a >= 0)
			{
				hInfo[houseid][Interior] = floatround(Interiors[a][0], floatround_round);
				hInfo[houseid][InteriorX] = Interiors[a][1];
				hInfo[houseid][InteriorY] = Interiors[a][2];
				hInfo[houseid][InteriorZ] = Interiors[a][3];
				hInfo[houseid][InteriorA] = Interiors[a][4];
				hInfo[houseid][VirtualWorld] = Hvw;
				hInfo[houseid][Locked] =1;
			}
			Hvw++;
		}
	}
	return 1;
}
stock AddInsertHouse(houseid)
{
	 new str[200];
     format(str, 200, "SELECT * FROM  `houses` WHERE  `ID` =%d", houseid);
     mysql_tquery(GTADM, str, "HHHHH", "d", houseid);
}
forward HHHHH(houseid);
public HHHHH(houseid)
{
	new rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);
	if(rows > 0) UpdatehInfo(houseid);
	else AddhInfo(houseid);
}
stock AddhInfo(houseid)
{
	 new HouseSTR[1024];
     format(HouseSTR, 1024, "INSERT INTO `houses` (`ID` , `Name` , `Owner` , `Score` , `Cost` , `pickUpX` , `pickUpY` , `pickUpZ` , `CarX` , `CarY` , `CarZ` , `CarA` , `SpawnX` , `SpawnY` , `SpawnZ` , `SpawnA` , `InteriorX` , `InteriorY` , `InteriorZ` , `InteriorA` , `Interior` , `Int` , `PP`, `OwnerID`) VALUES ('%d',  \"%s\",  \"%s\",  '%d',  '%d',  '%f',  '%f',  '%f',  '%f',  '%f',  '%f',  '%f',  '%f',  '%f',  '%f',  '%f',  '%f',  '%f',  '%f',  '%f',  '%d',  '%d',  '%d', '%d');",
     houseid,
	 hInfo[houseid][Name],
	 hInfo[houseid][Owner],
	 hInfo[houseid][Score],
	 hInfo[houseid][Cost],
	 hInfo[houseid][ExteriorX],
	 hInfo[houseid][ExteriorY],
	 hInfo[houseid][ExteriorZ],
	 hInfo[houseid][CarX],
	 hInfo[houseid][CarY],
     hInfo[houseid][CarZ],
     hInfo[houseid][CarA],
     hInfo[houseid][sX],
     hInfo[houseid][sY],
     hInfo[houseid][sZ],
     hInfo[houseid][SpawnA],
     hInfo[houseid][InteriorX],
     hInfo[houseid][InteriorY],
     hInfo[houseid][InteriorZ],
     hInfo[houseid][InteriorA],
     hInfo[houseid][Interior],
     hInfo[houseid][HInt],
     hInfo[houseid][PP],
	 hInfo[houseid][hOwnerID]);
     mysql_query(GTADM, HouseSTR);
}
stock ResetHouseTimeStamp(houseid)
{
	 new HouseSTR[200];
	 new t=gettime();
	 format(HouseSTR, 1024, "UPDATE `houses` SET `LastVisit` = %d WHERE `ID` = %d", t, houseid);
     mysql_query(GTADM, HouseSTR);
	 hInfo[houseid][LastVisit]=t;
}
stock UpdatehInfo(houseid)
{
	 new HouseSTR[1024];
	 format(HouseSTR, 1024, "UPDATE `houses` SET `Name`=\"%s\", `Owner`=\"%s\", `Score`=%d, `Cost`=%d, `pickUpX`=%f, `pickUpY`=%f, `pickUpZ`=%f, `CarX`=%f, `CarY`=%f, `CarZ`=%f, `CarA`=%f, `SpawnX`=%f, `SpawnY`=%f, `SpawnZ`=%f, `SpawnA`=%f, `InteriorX`=%f, `InteriorY`=%f, `InteriorZ`=%f, `InteriorA`=%f, `Interior`=%d, `Int`=%d, `PP`=%d, `OwnerID`=%d WHERE `ID` = %d",
	 hInfo[houseid][Name],
     hInfo[houseid][Owner],
	 hInfo[houseid][Score],
	 hInfo[houseid][Cost],
	 hInfo[houseid][ExteriorX],
	 hInfo[houseid][ExteriorY],
	 hInfo[houseid][ExteriorZ],
	 hInfo[houseid][CarX],
	 hInfo[houseid][CarY],
     hInfo[houseid][CarZ],
     hInfo[houseid][CarA],
     hInfo[houseid][sX],
     hInfo[houseid][sY],
     hInfo[houseid][sZ],
     hInfo[houseid][SpawnA],
     hInfo[houseid][InteriorX],
     hInfo[houseid][InteriorY],
     hInfo[houseid][InteriorZ],
     hInfo[houseid][InteriorA],
     hInfo[houseid][Interior],
     hInfo[houseid][HInt],
     hInfo[houseid][PP],
     hInfo[houseid][hOwnerID],
	 houseid);
     mysql_query(GTADM, HouseSTR);
}


stock LoadProps()
{
  for(new propid=0;propid<MAX_PROPS;propid++)
  {
    if(fexist(PropPath(propid)))
    {
      format(pInfo[propid][Owner], 24, "No owner");
	  INI_ParseFile(PropPath(propid), "LoadPropData", .bExtra = true, .extra = propid);
	  pInfo[propid][Pickup] = CreatePickup(1274, 23, pInfo[propid][Pos][0], pInfo[propid][Pos][1], pInfo[propid][Pos][2]);
    }
  }
}
forward LoadPropData(propid, name[], value[]);
public LoadPropData(propid, name[], value[])
{
    INI_String("Name", pInfo[propid][Name], 64);
    INI_String("Owner", pInfo[propid][Owner], 24);
    INI_Float("pickUpX", pInfo[propid][Pos][0]);
    INI_Float("pickUpY", pInfo[propid][Pos][1]);
    INI_Float("pickUpZ", pInfo[propid][Pos][2]);
	INI_Int("Earnings",  pInfo[propid][Earnings]);
    return 0;
}

//====SAMS
stock LoadSams()
{
  for(new samid=0;samid<MAX_SAMS;samid++)
  {
    if(fexist(SamPath(samid)))
    {
	  INI_ParseFile(SamPath(samid), "LoadSamData", .bExtra = true, .extra = samid);
      SAMS[samid][Obj] = CreateDynamicObject(18848, SAMS[samid][SamPos][0], SAMS[samid][SamPos][1], SAMS[samid][SamPos][2], 0, 0, SAMS[samid][SamPos][3]);
      SAMS[samid][kObj] = CreateDynamicObject(19273, SAMS[samid][SamkPos][0], SAMS[samid][SamkPos][1], SAMS[samid][SamkPos][2], 0, 0, SAMS[samid][SamkPos][3]);
      SAMS[samid][MissleFired] = 0;
      SAMS[samid][Work] = 1;
    }
  }
}

forward LoadSamData(samid, name[], value[]);
public LoadSamData(samid, name[], value[])
{
    INI_Float("sX", SAMS[samid][SamPos][0]);
    INI_Float("sY", SAMS[samid][SamPos][1]);
    INI_Float("sZ", SAMS[samid][SamPos][2]);
    INI_Float("sA", SAMS[samid][SamPos][3]);

    INI_Float("kX", SAMS[samid][SamkPos][0]);
    INI_Float("kY", SAMS[samid][SamkPos][1]);
    INI_Float("kZ", SAMS[samid][SamkPos][2]);
    INI_Float("kA", SAMS[samid][SamkPos][3]);

    INI_Int("Killer", SAMS[samid][isKiller]);
    INI_Float("range", SAMS[samid][SDist]);

    return 0;
}

stock GetSamID(playerid)
{
  for(new iD=0; iD<MAX_SAMS; iD++)
  {
    if(IsPlayerInRangeOfPoint(playerid, 5.0, SAMS[iD][SamPos][0], SAMS[iD][SamPos][1], SAMS[iD][SamPos][2]))
	{
	  return iD;
	}
  }
  return -255;
}

stock SamPath(samid)
{
  new samfile[64];
  format(samfile, sizeof(samfile), "Sams/SAMID%d.ini", samid);
  return samfile;
}
stock ShowMarketVPMenu(playerid)
{
	 TogglePlayerControllable2(playerid, 0);
     ShowPlayerDialog(playerid, 9989, DIALOG_STYLE_INPUT, ""LIGHTYELLOW_"GTADM - "WHITE_"VIP Market", ""BLUE_"ID\tItem\t\t\tCost\n\n1\t/Car2 command\t15 VP\n2\tHeadText\t\tFree\n3\tTeleport 1/3\t\t5 VP\n4\tAmmunation 1/4\t3 VP\n5\tCars discount\t\t4 VP\n6\t200 score\t\t1 VP\n7\t30 mil $\t\t1 VP\n8\t100 PP\t\t\t1 VP\n9\t/attachments\t\t5 VP\n10\tSpecial Ramp\t\t10 VP\n11\tAnti bike fall\t\t10 VP\n12\tFree Permit\t\t5 VP", "Enter", "Exit");
	 ///ShowMenuForPlayer(InsideHouseMenu, playerid);
//     ShowPlayerDialog(playerid, 7724, DIALOG_STYLE_LIST, "House Menu", ""GREEN_"Eat\n"GREEN_"Get Armour\n"GREEN_"Money Storage\n"GREEN_"Weapons Storage\n"GREEN_"My Wardrobe", "Select", "Cancel");
	 return 1;
}
stock ShowMarketVPItem1(playerid)
{
  if(PlayerInfo[playerid][pVip] < 15) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You dont have enough VIP Points to buy this item.");
  if(PlayerInfo[playerid][VipItems][0] == 1) return SendClientMessage(playerid, RED, "» Error « {BABABA}You have already bought the /car2 command.");
  PlayerInfo[playerid][VipItems][0] = 1;
  SendClientMessage(playerid, 0xBBF582FF, "» VIP « {6AC213} You are now able to use the command (/Car2)");
  SendClientMessage(playerid, 0xBBF582FF, "» VIP « {6AC213} To set your second vehicle use the command (/SetSecondCar)");
  SendClientMessage(playerid, GRAY, "-NOTE- Only CarColor, Wheels and Nitro will save on your second car");
  PlayerInfo[playerid][pVip]=PlayerInfo[playerid][pVip]-15;
  new Query[168];
  format(Query, sizeof(Query), "UPDATE `users` SET `VIP` = %d, `VipFe1` = 1 WHERE `UserID` = '%d'", PlayerInfo[playerid][pVip], PlayerInfo[playerid][UserID]);
  mysql_query(GTADM, Query);
  PlayerPlaySound(playerid, BuySound, 0.0, 0.0, 0.0);
  return 1;
}
stock ShowMarketVPItem2(playerid)
{
  if(PlayerInfo[playerid][IsVIP] < 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You dont have enough VIP Points to buy this item.");
  if(PlayerInfo[playerid][premiumItems][4] == 1)  return SendClientMessage(playerid, RED, "» Error « {BABABA}You have already bought the /headtext command. Use /headtext to change it.");
  PlayerInfo[playerid][premiumItems][4] = 1;
  new str[256];
  new Query[168];
  format(Query, sizeof(Query), "UPDATE `users` SET `CookFe5` ='%d' WHERE `UserID` = '%d'", PlayerInfo[playerid][premiumItems][4], PlayerInfo[playerid][UserID]);
  mysql_query(GTADM, Query);
	  //format(str, sizeof(str), "» HeadText «  Your HeadText has been set to %s", PlayerInfo[playerid][HeadText], PlayerInfo[playerid][premiumItems][4]);
	  //SendClientMessage(playerid, AdminInfo, str);
  format(str, sizeof(str), "» HeadText «  You have bought a headtext! You can change your headtext with the command (/HeadText) Possible changes (%d)", PlayerInfo[playerid][premiumItems][4]);
  SendClientMessage(playerid, AdminInfo, str);
  TogglePlayerControllable(playerid, 1);
  PlayerPlaySound(playerid, BuySound, 0.0, 0.0, 0.0);
  return 1;
}
stock ShowMarketVPItem3(playerid)
{
  if(PlayerInfo[playerid][pVip] < 5) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You dont have enough VIP Points to buy this item.");
  if(PlayerInfo[playerid][premiumItems][1] == 1)  return SendClientMessage(playerid, RED, "» Error « {BABABA}You have already bought the teleport 1/3 discount.");
  PlayerInfo[playerid][VipItems][1] = 1;
  SendClientMessage(playerid, 0xBBF582FF, "» VIP « {6AC213} You have got a teleport discount of 1/3 "GRAY_"Using teleport command will now cost you 2000$ instead of 3000$");

  PlayerInfo[playerid][pVip]=PlayerInfo[playerid][pVip]-5;
  new Query[168];
  format(Query, sizeof(Query), "UPDATE `users` SET `VIP` = %d, `VipFe2` = 1 WHERE `UserID` = '%d'", PlayerInfo[playerid][pVip], PlayerInfo[playerid][UserID]);
  mysql_query(GTADM, Query);
  PlayerPlaySound(playerid, BuySound, 0.0, 0.0, 0.0);
  return 1;
}
stock ShowMarketVPItem4(playerid)
{
  if(PlayerInfo[playerid][pVip] < 3) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You dont have enough VIP Points to buy this item.");
  if(PlayerInfo[playerid][premiumItems][2] == 1)  return SendClientMessage(playerid, RED, "» Error « {BABABA}You have already bought the ammunation 1/4 discount.");
  PlayerInfo[playerid][VipItems][2] = 1;
  SendClientMessage(playerid, 0xBBF582FF, "» VIP « {6AC213} You have got a discount of 1/4 for buying spawn weapons from any ammunation store");
  PlayerInfo[playerid][pVip]=PlayerInfo[playerid][pVip]-3;
  new Query[168];
  format(Query, sizeof(Query), "UPDATE `users` SET `VIP` = %d, `VipFe3` = 1 WHERE `UserID` = '%d'", PlayerInfo[playerid][pVip], PlayerInfo[playerid][UserID]);
  mysql_query(GTADM, Query);
  PlayerPlaySound(playerid, BuySound, 0.0, 0.0, 0.0);
  return 1;
}
stock ShowMarketVPItem5(playerid)
{
  if(PlayerInfo[playerid][pVip] < 4) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You dont have enough VIP Points to buy this item.");
  if(PlayerInfo[playerid][premiumItems][3] == 1)  return SendClientMessage(playerid, RED, "» Error « {BABABA}You have already bought the car dealer 1/4 discount.");
  PlayerInfo[playerid][VipItems][3] = 1;
  SendClientMessage(playerid, 0xBBF582FF, "» VIP « {6AC213} You have got a discount of 1/4 for buying cars from any car dealer");
  PlayerInfo[playerid][pVip]=PlayerInfo[playerid][pVip]-4;
  new Query[168];
  format(Query, sizeof(Query), "UPDATE `users` SET `VIP` = %d, `VipFe4` = 1 WHERE `UserID` = '%d'", PlayerInfo[playerid][pVip], PlayerInfo[playerid][UserID]);
  mysql_query(GTADM, Query);
  PlayerPlaySound(playerid, BuySound, 0.0, 0.0, 0.0);
  return 1;
}
stock ShowMarketVPItem6(playerid)
{
  if(PlayerInfo[playerid][pVip] < 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You dont have enough VIP Points to buy this item.");
  ShowPlayerDialog(playerid, 9946, DIALOG_STYLE_MSGBOX, ""LIGHTYELLOW_"GTADM - "WHITE_"VIP Market", ""GREEN_"Do you really want to sell 1 VIP Point for 200 score?", "Yes", "Exit");
  return 1;
}
stock ShowMarketVPItem7(playerid)
{
  if(PlayerInfo[playerid][pVip] < 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You dont have enough VIP Points to buy this item.");
  ShowPlayerDialog(playerid, 9947, DIALOG_STYLE_MSGBOX, ""LIGHTYELLOW_"GTADM - "WHITE_"VIP Market", ""GREEN_"Do you really want to sell 1 VIP Point for 30000000$?", "Yes", "Exit");
  return 1;
}
stock ShowMarketVPItem10(playerid)
{
  if(PlayerInfo[playerid][pVip] < 5) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You dont have enough VIP Points to buy this item.");
  if(attach[playerid] == 1) return SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You have already bought this item.");
  /*new str[1024];
  strcat(str, ""cornsilk2"BigHead\n"YELLOW_"Fart\n"ORANGE_"Big Trashcan\n"lime2"Small Trashcan\n"LIGHTBLUE_"Phone Station\n"BLUE_"Coffin\n"PINK_"Egg\n"RED_"Pumpkin\n"cornsilk2"Big Parrot\n"lime2"Small Parrot\n"GREEN_"Tied Cop\n");
  strcat(str, ""BLUE_"Fire Hands\n"LIGHTBLUE_"Fire\n"LIGHTYELLOW_"Deer 1\n"PINK_"Deer 2\n"YELLOW_"Pumpkin Clown\n"ORANGE_"Trash Clown\n"cornsilk2"Donkey cart\n"LIGHTYELLOW_"Meathead\n"LIGHTBLUE_"Meat hand\n"ORANGE_"Taxi\n"GRAY_"Tent\n"lime2"Tourch\n"GREEN_"Turtle\n"WHITE_"TV\n"YELLOW_"Skull head\n"ORANGE_"Dildo\n");
  strcat(str, ""cornsilk2"Hammer\n"YELLOW_"Cop Head\n"ORANGE_"Chicken Head");
  ShowPlayerDialog(playerid, 8585, DIALOG_STYLE_LIST, "Attach Objects", str, "Select", "Exit");*/
  ShowPlayerDialog(playerid, 9980, DIALOG_STYLE_MSGBOX, ""LIGHTYELLOW_"GTADM - "WHITE_"VIP Market", ""GREEN_"Do you really want to buy /attachments command for 5 VIP Points?", "Yes", "Exit");
  return 1;
}
stock ShowMarketVPItem11(playerid)
{
  if(PlayerInfo[playerid][pVip] < 10) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You dont have enough VIP Points to buy this item.");
  if(specramp[playerid] == 1) return SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You have already bought this item.");
  /*new str[1024];
  strcat(str, ""cornsilk2"BigHead\n"YELLOW_"Fart\n"ORANGE_"Big Trashcan\n"lime2"Small Trashcan\n"LIGHTBLUE_"Phone Station\n"BLUE_"Coffin\n"PINK_"Egg\n"RED_"Pumpkin\n"cornsilk2"Big Parrot\n"lime2"Small Parrot\n"GREEN_"Tied Cop\n");
  strcat(str, ""BLUE_"Fire Hands\n"LIGHTBLUE_"Fire\n"LIGHTYELLOW_"Deer 1\n"PINK_"Deer 2\n"YELLOW_"Pumpkin Clown\n"ORANGE_"Trash Clown\n"cornsilk2"Donkey cart\n"LIGHTYELLOW_"Meathead\n"LIGHTBLUE_"Meat hand\n"ORANGE_"Taxi\n"GRAY_"Tent\n"lime2"Tourch\n"GREEN_"Turtle\n"WHITE_"TV\n"YELLOW_"Skull head\n"ORANGE_"Dildo\n");
  strcat(str, ""cornsilk2"Hammer\n"YELLOW_"Cop Head\n"ORANGE_"Chicken Head");
  ShowPlayerDialog(playerid, 8585, DIALOG_STYLE_LIST, "Attach Objects", str, "Select", "Exit");*/
  ShowPlayerDialog(playerid, 9981, DIALOG_STYLE_MSGBOX, ""LIGHTYELLOW_"GTADM - "WHITE_"VIP Market", ""GREEN_"Do you really want to buy special ramp (/ramp) for 10 VIP Points?", "Yes", "Exit");
  return 1;
}
stock ShowMarketVPItem12(playerid)
{
  if(PlayerInfo[playerid][pVip] < 10) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You dont have enough VIP Points to buy this item.");
  if(antifallvip[playerid] == 1) return SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You have already bought this item.");
  /*new str[1024];
  strcat(str, ""cornsilk2"BigHead\n"YELLOW_"Fart\n"ORANGE_"Big Trashcan\n"lime2"Small Trashcan\n"LIGHTBLUE_"Phone Station\n"BLUE_"Coffin\n"PINK_"Egg\n"RED_"Pumpkin\n"cornsilk2"Big Parrot\n"lime2"Small Parrot\n"GREEN_"Tied Cop\n");
  strcat(str, ""BLUE_"Fire Hands\n"LIGHTBLUE_"Fire\n"LIGHTYELLOW_"Deer 1\n"PINK_"Deer 2\n"YELLOW_"Pumpkin Clown\n"ORANGE_"Trash Clown\n"cornsilk2"Donkey cart\n"LIGHTYELLOW_"Meathead\n"LIGHTBLUE_"Meat hand\n"ORANGE_"Taxi\n"GRAY_"Tent\n"lime2"Tourch\n"GREEN_"Turtle\n"WHITE_"TV\n"YELLOW_"Skull head\n"ORANGE_"Dildo\n");
  strcat(str, ""cornsilk2"Hammer\n"YELLOW_"Cop Head\n"ORANGE_"Chicken Head");
  ShowPlayerDialog(playerid, 8585, DIALOG_STYLE_LIST, "Attach Objects", str, "Select", "Exit");*/
  ShowPlayerDialog(playerid, 9982, DIALOG_STYLE_MSGBOX, ""LIGHTYELLOW_"GTADM - "WHITE_"VIP Market", ""GREEN_"Do you really want to buy Anti Fall from bike (/AF) for 10 VIP Points?", "Yes", "Exit");
  return 1;
}
stock ShowMarketVPItem13(playerid)
{
  if(PlayerInfo[playerid][pVip] < 5) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You dont have enough VIP Points to buy this item.");
  if(freepermit[playerid] == 1) return SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You have already bought this item.");
  /*new str[1024];
  strcat(str, ""cornsilk2"BigHead\n"YELLOW_"Fart\n"ORANGE_"Big Trashcan\n"lime2"Small Trashcan\n"LIGHTBLUE_"Phone Station\n"BLUE_"Coffin\n"PINK_"Egg\n"RED_"Pumpkin\n"cornsilk2"Big Parrot\n"lime2"Small Parrot\n"GREEN_"Tied Cop\n");
  strcat(str, ""BLUE_"Fire Hands\n"LIGHTBLUE_"Fire\n"LIGHTYELLOW_"Deer 1\n"PINK_"Deer 2\n"YELLOW_"Pumpkin Clown\n"ORANGE_"Trash Clown\n"cornsilk2"Donkey cart\n"LIGHTYELLOW_"Meathead\n"LIGHTBLUE_"Meat hand\n"ORANGE_"Taxi\n"GRAY_"Tent\n"lime2"Tourch\n"GREEN_"Turtle\n"WHITE_"TV\n"YELLOW_"Skull head\n"ORANGE_"Dildo\n");
  strcat(str, ""cornsilk2"Hammer\n"YELLOW_"Cop Head\n"ORANGE_"Chicken Head");
  ShowPlayerDialog(playerid, 8585, DIALOG_STYLE_LIST, "Attach Objects", str, "Select", "Exit");*/
  ShowPlayerDialog(playerid, 9983, DIALOG_STYLE_MSGBOX, ""LIGHTYELLOW_"GTADM - "WHITE_"VIP Market", ""GREEN_"Do you really want to buy the Free /Permit for 10 VIP Points?", "Yes", "Exit");
  return 1;
}
/*stock ShowMarketVPItem8(playerid)
{
  if(PlayerInfo[playerid][pVip] < 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You dont have enough VIP Points to buy this item.");
  ShowPlayerDialog(playerid, 9972, DIALOG_STYLE_MSGBOX, ""LIGHTYELLOW_"GTADM - "WHITE_"VIP Market", ""GREEN_"Do you really want to sell 1 VIP Point for 200 score?", "Yes", "Exit");
  return 1;
}*/
stock ShowMarketVPItem9(playerid)
{
  if(PlayerInfo[playerid][pVip] < 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You dont have enough VIP Points to buy this item.");
  ShowPlayerDialog(playerid, 9948, DIALOG_STYLE_MSGBOX, ""LIGHTYELLOW_"GTADM - "WHITE_"VIP Market", ""GREEN_"Do you really want to sell 1 VIP Point for 100 Premium Points?", "Yes", "Exit");
  return 1;
}
stock ShowMarketPPMenu(playerid)
{
	 TogglePlayerControllable2(playerid, 0);
     ShowPlayerDialog(playerid, 9969, DIALOG_STYLE_INPUT, ""LIGHTYELLOW_"GTADM - "WHITE_"PP Market", ""BLUE_"ID\tItem\t\t\tCost\n\n1\t/Tow command\t20 PP\n2\t/Mod command\t20 PP\n3\t/Neon command\t60 PP\n4\t/Cars9 teleport\t50 PP\n5\t1000000$\t\t1 PP\n6\t20 score\t\t1 PP", "Enter", "Exit");
	 ///ShowMenuForPlayer(InsideHouseMenu, playerid);
//     ShowPlayerDialog(playerid, 7724, DIALOG_STYLE_LIST, "House Menu", ""GREEN_"Eat\n"GREEN_"Get Armour\n"GREEN_"Money Storage\n"GREEN_"Weapons Storage\n"GREEN_"My Wardrobe", "Select", "Cancel");
	 return 1;
}
/*
stock ShowMarketPPItem1(playerid)
{
  if(PlayerInfo[playerid][pCook] < 50) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You dont have enough Premium Points Points to buy this item.");
  ShowPlayerDialog(playerid, 9970, DIALOG_STYLE_MSGBOX, ""LIGHTYELLOW_"GTADM - "WHITE_"HeadText", ""GREEN_"If you buy a headtext you will be able to change it only 2 times.", "Buy", "Exit");
  return 1;
}*/
stock ShowMarketPPItem2(playerid)
{
  if(PlayerInfo[playerid][pCook] < 20) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You dont have enough Premium Points Points to buy this item.");
  if(PlayerInfo[playerid][premiumItems][0] == 1) return SendClientMessage(playerid, RED, "» Error « {BABABA}You have already bought the /tow command.");
  GivePP(playerid, -20);
  PlayerInfo[playerid][premiumItems][0] = 1;
  SendClientMessage(playerid, 0xBBF582FF, "» Premium « {6AC213} You are now able to use the command (/TOW)");
  new Query[168];
  format(Query, sizeof(Query), "UPDATE `users` SET `CookFe1` = 1 WHERE `UserID` = '%d'", PlayerInfo[playerid][UserID]);
  mysql_query(GTADM, Query);
  PlayerPlaySound(playerid, BuySound, 0.0, 0.0, 0.0);
  return 1;
}
stock ShowMarketPPItem3(playerid)
{
  if(PlayerInfo[playerid][pCook] < 20) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You dont have enough Premium Points Points to buy this item.");
  if(PlayerInfo[playerid][premiumItems][1] == 1) return SendClientMessage(playerid, RED, "» Error « {BABABA}You have already bought the /mod command.");
  GivePP(playerid, -20);
  PlayerInfo[playerid][premiumItems][1] = 1;
  SendClientMessage(playerid, 0xBBF582FF, "» Premium « {6AC213} You are now able to use the command (/Mod)");
  new Query[168];
  format(Query, sizeof(Query), "UPDATE `users` SET `CookFe2` = 1 WHERE `UserID` = '%d'", PlayerInfo[playerid][UserID]);
  mysql_query(GTADM, Query);
  PlayerPlaySound(playerid, BuySound, 0.0, 0.0, 0.0);
  return 1;
}
stock ShowMarketPPItem4(playerid)
{
  if(PlayerInfo[playerid][pCook] < 60) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You dont have enough Premium Points Points to buy this item.");
  if(PlayerInfo[playerid][premiumItems][2] == 1) return SendClientMessage(playerid, RED, "» Error « {BABABA}You have already bought the /neon command.");
  GivePP(playerid, -60);
  PlayerInfo[playerid][premiumItems][2] = 1;
  SendClientMessage(playerid, 0xBBF582FF, "» Premium « {6AC213} You are now able to use the command (/Neon)");
  new Query[168];
  format(Query, sizeof(Query), "UPDATE `users` SET `CookFe3` = 1 WHERE `UserID` = '%d'", PlayerInfo[playerid][UserID]);
  mysql_query(GTADM, Query);
  PlayerPlaySound(playerid, BuySound, 0.0, 0.0, 0.0);
  return 1;
}
stock ShowMarketPPItem5(playerid)
{
  if(PlayerInfo[playerid][pCook] < 50) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You dont have enough Premium Points Points to buy this item.");
  if(PlayerInfo[playerid][premiumItems][3] == 1) return SendClientMessage(playerid, RED, "» Error « {BABABA}You have already bought the /cars9 command.");
  GivePP(playerid, -50);
  PlayerInfo[playerid][premiumItems][3] = 1;
  SendClientMessage(playerid, 0xBBF582FF, "» Premium « {6AC213} You are now able to teleport and buy vehicle from (/Cars9)");
  new Query[168];
  format(Query, sizeof(Query), "UPDATE `users` SET `CookFe4` = 1 WHERE `UserID` = '%d'", PlayerInfo[playerid][UserID]);
  mysql_query(GTADM, Query);
  PlayerPlaySound(playerid, BuySound, 0.0, 0.0, 0.0);
  return 1;
}
stock ShowMarketPPItem6(playerid)
{
  if(PlayerInfo[playerid][pCook] < 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You dont have enough Premium Points Points to buy this item.");
  ShowPlayerDialog(playerid, 9971, DIALOG_STYLE_MSGBOX, ""LIGHTYELLOW_"GTADM - "WHITE_"PP Market", ""GREEN_"Do you really want to sell 1 Premium Point for 1000000$?", "Yes", "Exit");
  return 1;
}
stock ShowMarketPPItem7(playerid)
{
  if(PlayerInfo[playerid][pCook] < 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You dont have enough Premium Points Points to buy this item.");
  ShowPlayerDialog(playerid, 9972, DIALOG_STYLE_MSGBOX, ""LIGHTYELLOW_"GTADM - "WHITE_"PP Market", ""GREEN_"Do you really want to sell 1 Premium Point for 20 score?", "Yes", "Exit");
  return 1;
}
stock OpenHouseDialog(playerid, houseid)
{
  if(IsInFight(playerid)) return SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}You cant enter the house during a fight.");
  if((GetPVarInt(playerid, "LOGGED")) == 2) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be registered to access house menu");
  else
  {
	  if(hInfo[houseid][hOwnerID] <= 0)
	  {
		if(PlayerInfo[playerid][pHouse] > 0)
		{
	    	TogglePlayerControllable2(playerid, false);
	    	ShowMenuForPlayer(NotOwnedMenu2, playerid);
		}
		else
		{
	    	TogglePlayerControllable2(playerid, false);
			if((PlayerInfo[playerid][pScore] < hInfo[houseid][Score]) || (GetPlayerMoneyEx(playerid) < hInfo[houseid][Cost])) ShowMenuForPlayer(NotOwnedMenu2, playerid);
	        else if(PlayerInfo[playerid][pCook] < hInfo[houseid][PP] && PlayerInfo[playerid][IsVIP] == 0) ShowMenuForPlayer(NotOwnedMenu2, playerid);
			else ShowMenuForPlayer(NotOwnedMenu, playerid);
		}
	  }
	  else
	  {
		if(hInfo[houseid][hOwnerID] == PlayerInfo[playerid][UserID])
		{
	      ShowMenuForPlayer(OwnedMenu, playerid);
	      TogglePlayerControllable2(playerid, false);
		}
		else
		{
		  if(IsOwnerOnline(houseid))
		  {
	       TogglePlayerControllable2(playerid, false);
	       ShowMenuForPlayer(OwnedMenu2, playerid);
	      }
		}
	  }
  }
  return 1;
}
stock IsOwnerOnline(houseid)
{
   foreach (new i : Player)
   {
	  if(PlayerInfo[i][pHouse] == houseid)
	  return 1;
   }
   return 0;
}
stock ShowMenus(playerid, houseid)
{
      new str[128];
	  if(hInfo[houseid][hOwnerID] > 0) PlayerTextDrawSetPreviewModel(playerid, PropTD[playerid][6], 1272);
	  else PlayerTextDrawSetPreviewModel(playerid, PropTD[playerid][6], 1273);

      format(str, sizeof(str), "~l~Price: ~l~$%d", hInfo[houseid][Cost]);
	  PlayerTextDrawSetStringEX(playerid, PropTD[playerid][1], str);

      format(str, sizeof(str), "~l~Score: %d", hInfo[houseid][Score]);
	  PlayerTextDrawSetStringEX(playerid, PropTD[playerid][2], str);

      format(str, sizeof(str), "~l~Owner: ~w~%s", hInfo[houseid][Owner]);
	  PlayerTextDrawSetStringEX(playerid, PropTD[playerid][0], str);

      format(str, sizeof(str), "~y~%s (%d)", hInfo[houseid][Name], houseid);
      PlayerTextDrawSetStringEX(playerid, PropTD[playerid][7], str);
      PlayerTextDrawSetStringEX(playerid, PropTD[playerid][5], "_~n~_~n~_~n~_~n~_");

      if(hInfo[houseid][PP] > 0)
      {
        format(str, sizeof(str), "~l~Premium Points: %d", hInfo[houseid][PP]);
	    PlayerTextDrawSetStringEX(playerid, PropTD[playerid][3], str);
  	    PlayerTextDrawShow(playerid, PropTD[playerid][4]);
  	    PlayerTextDrawShow(playerid, PropTD[playerid][3]);
        PlayerTextDrawSetStringEX(playerid, PropTD[playerid][5], "_~n~_~n~_~n~_~n~_");
      }
      else PlayerTextDrawSetStringEX(playerid, PropTD[playerid][5], "_~n~_~n~_~n~");

	  PlayerTextDrawShow(playerid, PropTD[playerid][0]);
	  PlayerTextDrawShow(playerid, PropTD[playerid][1]);
	  PlayerTextDrawShow(playerid, PropTD[playerid][2]);
	  PlayerTextDrawShow(playerid, PropTD[playerid][7]);
	  PlayerTextDrawShow(playerid, PropTD[playerid][5]);
	  PlayerTextDrawShow(playerid, PropTD[playerid][6]);
	  SetPVarInt(playerid, "ShowPropTD", true);
}
forward HideMenusForPlayer(playerid);
public HideMenusForPlayer(playerid)
{
    TogglePlayerControllable(playerid, 1);
    CanOpenMenu[playerid] = 1;
    for(new x=0; x<8; x++) PlayerTextDrawHide(playerid, PropTD[playerid][x]);
    DeletePVar(playerid, "ShowPropTD");
    return 1;
}
forward CanOpenMenu_(playerid);
public CanOpenMenu_(playerid)
{
	CanOpenMenu[playerid]=1;
	return 1;
}
stock GetHouseID(playerid)
{
  for(new i=1; i<MAX_HOUSES; i++)
  {
    if(IsPlayerInRangeOfPoint(playerid, 2.0, hInfo[i][ExteriorX], hInfo[i][ExteriorY], hInfo[i][ExteriorZ]))
	{
	  return i;
	}
  }
  return -255;
}
stock GetBaseID(playerid)
{
  for(new i=0; i<MAX_BASES; i++)
  {
    if(IsPlayerInRangeOfPoint(playerid, 2.0, GangBases[i][gbPos][0], GangBases[i][gbPos][1], GangBases[i][gbPos][2]))
	{
	  return i;
	}
  }
  return -255;

}

stock GetPropID(playerid)
{
  for(new i=0; i<MAX_PROPS; i++)
  {
    if(IsPlayerInRangeOfPoint(playerid, 2.0, pInfo[i][Pos][0], pInfo[i][Pos][1], pInfo[i][Pos][2]))
	{
	  return i;
	}
  }
  return -255;
}

stock PropPath(propid)
{
  new propfile[64];
  format(propfile, sizeof(propfile), "Properties/PropID%d.ini", propid);
  return propfile;
}

stock BuyHouse(playerid, houseid)
{
  if(PlayerInfo[playerid][IsVIP] == 0) GivePP(playerid, -1*hInfo[houseid][PP]);
  GiveMedal(playerid, 14);
  printf("-Buy- %s Bought House ID %d", pName[playerid], houseid);
  GivePlayerMoneyEX(playerid, -hInfo[houseid][Cost], 1);

  PlayerInfo[playerid][pHouse] = houseid;
  format(hInfo[houseid][Owner], 24, "%s", pName[playerid]);
  hInfo[houseid][hOwnerID]=PlayerInfo[playerid][UserID];
  DestroyPickup(HousePickup[houseid]);
  DestroyDynamicMapIcon(HouseIcon[houseid]);
  HousePickup[houseid] = CreatePickup(1272, 23, hInfo[houseid][ExteriorX], hInfo[houseid][ExteriorY], hInfo[houseid][ExteriorZ]);
  HouseIcon[houseid] = CreateDynamicMapIcon(hInfo[houseid][ExteriorX], hInfo[houseid][ExteriorY], hInfo[houseid][ExteriorZ], 32, 0, 0, -1, -1, 500.0);
  PlayerPlaySound(playerid, 5450 , 0.0, 0.0, 0.0);
  new str[51];
  format(str, sizeof(str), "House bought for $%d!", hInfo[GetHouseID(playerid)][Cost]);
  ShowPlayerDialog(playerid, 1499, DIALOG_STYLE_MSGBOX, ""GREEN_"House Menu", str, "OK", "");
  TogglePlayerControllable(playerid, 1);
  if((GetPVarInt(playerid, "LOGGED")) != 2)
  {
	  new Query[128];
 	  format(Query, sizeof(Query), "UPDATE `users` SET `Car` = %d, `House` = %d WHERE `Name` = '%s'", PlayerInfo[playerid][pCar], PlayerInfo[playerid][pHouse], pEscName[playerid]);
	  mysql_query(GTADM, Query);
  }
  ResetpTuning(playerid);
  new v=PlayerCar(playerid);
  if(v >= 0)
  {
     VehicleInfo[v][ID]=-1;
     VehicleInfo[v][Player]=-1;
     VehicleInfo[v][Owned]=0;

     RemoveCustomMods(v);
     DestroyVehicleEX(v);
     PlayerInfo[playerid][pCar] = -255;
  }
  UpdatehInfo(houseid);
  ResetHouseTimeStamp(houseid);
  return 1;
}

stock GetOwnedHouseID(playerid)
{
  new str[20];
  if(PlayerInfo[playerid][pHouse] > 0) format(str, 20, "(%d)", PlayerInfo[playerid][pHouse]);
  else format(str, 20, "");
  return str;
}


stock SellHouse(playerid, houseid)
{
  format(hInfo[houseid][Owner], 24, "No owner");
  hInfo[houseid][hOwnerID]=-1;
  UpdatehInfo(houseid);
  #if defined PRINT_HOUSES
  printf("-Sell- %s Sold House ID %d", pName[playerid], houseid);
  #endif
  new sell = floatround(floatdiv(hInfo[houseid][Cost], 100));
  GivePlayerMoneyEX(playerid, sell*40, 1);
  DestroyPickup(HousePickup[houseid]);
  DestroyDynamicMapIcon(HouseIcon[houseid]);
  HousePickup[houseid] = CreatePickup(1273, 23, hInfo[houseid][ExteriorX], hInfo[houseid][ExteriorY], hInfo[houseid][ExteriorZ]);
  HouseIcon[houseid] = CreateDynamicMapIcon(hInfo[houseid][ExteriorX], hInfo[houseid][ExteriorY], hInfo[houseid][ExteriorZ], 31, 0, 0, -1, -1, 500.0);
  PlayerInfo[playerid][pHouse] = -255;
  new v=PlayerCar(playerid);
  ResetpTuning(playerid);
  if(v >= 0)
  {
    VehicleInfo[v][ID]=-1;
    VehicleInfo[v][Player]=-1;
    VehicleInfo[v][Owned]=0;

    RemoveCustomMods(v);
    DestroyVehicleEX(v);
  }
  PlayerInfo[playerid][pCar] = -255;
  new str[51];
  new price = floatround(hInfo[GetHouseID(playerid)][Cost]*0.5, floatround_ceil);
  format(str, sizeof(str), "House sold for $%d!", price);
  GivePlayerMoneyEX(playerid, price, 1);
  ShowPlayerDialog(playerid, 1499, DIALOG_STYLE_MSGBOX, ""GREENBLUE_"House Selling", str, "OK", "");
  TogglePlayerControllable(playerid, 1);

  if((GetPVarInt(playerid, "LOGGED")) != 2)
  {
	  new Query[128];
 	  format(Query, sizeof(Query), "UPDATE `users` SET `Car` = -255, `House` = -255 WHERE `Name` = '%s'", pEscName[playerid]);
	  mysql_query(GTADM, Query);
  }
  ResetHouseTimeStamp(houseid);

  return 1;
}
stock EnterHouse(playerid, houseid)
{
 if(houseid >=0)
 {
  SetPlayerPos(playerid, hInfo[houseid][InteriorX], hInfo[houseid][InteriorY], hInfo[houseid][InteriorZ]);
  SetPlayerInterior(playerid, hInfo[houseid][Interior]);
  TogglePlayerControllable(playerid, 1);
  SetPlayerVirtualWorldEX(playerid, hInfo[houseid][VirtualWorld]);
  if(PlayerInfo[playerid][pHouse] == houseid)
  {
	 ShowHouseMenu(playerid);
	 SendClientMessage(playerid, GRAY, "- Use W, S, or arrows to browse, and space to select. Press Enter to close the menu. Press ALT to open the menu again!");
  }
  InHouse[playerid] = houseid;
  for(new x=0; x<8; x++) PlayerTextDrawHide(playerid, PropTD[playerid][x]);
  SetCameraBehindPlayer(playerid);
  if(PlayerInfo[playerid][pHouse] != houseid) SendClientMessage(playerid, GRAY, "- Press MMB (Middle Mouse Button) to exit the house!");
 }
 return 1;
}
stock ShowPreviewVeh(playerid)
{
  if(PlayerInfo[playerid][pHouse] < 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must have a house in order to buy a car");
  for(new i=0; i<9; i++)
  {
    if(IsPlayerInDynamicCP(playerid, CarDealerCP[i]))
    {
      VehicleShow(playerid, i+1);
      ShowPlayerDialog(playerid, -1, DIALOG_STYLE_INPUT, "", "", "", "");
    }
  }
  return 1;
}
/*stock ShowBuyVeh(playerid)
{
  if(PlayerInfo[playerid][pHouse] < 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must have a house in order to buy a car");
  for(new i=0; i<9; i++)
  {
    if(IsPlayerInDynamicCP(playerid, CarDealerCP[i]))
    {
      ShowPlayerDialog(playerid, -1, DIALOG_STYLE_INPUT, "", "", "", "");
      if(PlayerInfo[playerid][VipItems][3] == 1) ShowMenuForPlayer(Cars_Discount[i], playerid);
      else ShowMenuForPlayer(Cars[i+1], playerid);
      ShowPlayerDialog(playerid, -1, DIALOG_STYLE_INPUT, "", "", "", "");
      TogglePlayerControllable2(playerid, 0);
    }
  }
  return 1;
}
stock ShowSellVeh(playerid)
{
  	new v=PlayerCar(playerid);
  	if(v == -255) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You dont own a car");
    if(GetPlayerState(playerid) != 2 || GetPlayerVehicleID(playerid) != v) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}you must be inside your own car to sell it");
  	SellCar(playerid);
    ShowPlayerDialog(playerid, -1, DIALOG_STYLE_INPUT, "", "", "", "");
  	return 1;
}*/
stock ShowBuyHouse(playerid)
{
    if(GetPlayerMoneyEx(playerid) < hInfo[GetHouseID(playerid)][Cost]) return  ShowPlayerDialog(playerid, 1499, DIALOG_STYLE_MSGBOX, ""RED_"House Menu", "You don't have enough money!", "OK", "");
    if(PlayerInfo[playerid][pScore] < hInfo[GetHouseID(playerid)][Score]) return SendClientMessage(playerid, 0xFFAFFFAA, "You dont have enough score to buy this house");
    if(PlayerInfo[playerid][pCook] < hInfo[GetHouseID(playerid)][PP] && PlayerInfo[playerid][IsVIP] == 0) return SendClientMessage(playerid, 0xFFAFFFAA, "You dont have enough Premium Points to buy this house");
    BuyHouse(playerid, GetHouseID(playerid));
    return 1;
}
stock ShowGangBaseBuyMenu(playerid)
{
  for(new i=0; i<MAX_BASES; i++)
  {
    if (GetBaseID(playerid) == i)
    {
      if(ZoneOwner[GangBases[i][zID]] == PlayerInfo[playerid][pGang])
      {
        if(PlayerInfo[playerid][pGangRank] < 2) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must be rank 2 to buy the gang base.");
	    if(PlayerInfo[playerid][pGangRank] >=2)
	    {
	      new gang=PlayerInfo[playerid][pGang];
	      if(GangInfo[gang][gBank] >= GangBases[i][Price])
	      {
            GangBases[i][gbGang]=gang;
	        DestroyDynamicMapIcon(GangBases[i][gbIcon]);
	        GangBases[i][gbIcon] = CreateDynamicMapIcon(GangBases[i][gbPos][0], GangBases[i][gbPos][1], GangBases[i][gbPos][2], 43, 0, 0, 0, -1, 500.0);
            new str[128];
            format(str, sizeof(str), "{AA8202}» Gang action «{FFC307} The gang \"%s\" has bought \"%s's\" gang base for $%d.", GangInfo[gang][Name], GangBases[i][BaseName], GangBases[i][Price]);
	        SendClientMessageToAll(JOBINFO, str);
	        GangInfo[gang][gBank]=(GangInfo[gang][gBank] - GangBases[i][Price]);
	        format(str, sizeof(str), "UPDATE `gangbases` SET `gbGang` = %d WHERE `BaseID` = '%d'", gang, i);
	        mysql_query(GTADM, str);
            format(str, sizeof(str),  "UPDATE `gangs` SET `GangBank` = %d WHERE `GangID` = %d", GangInfo[gang][gBank], gang);
            mysql_query(GTADM, str);

            DestroyDynamicPickup(GangBases[i][gbPickup]);
            GangBases[i][gbPickup]=CreateDynamicPickup(1272, 1, GangBases[i][gbPos][0], GangBases[i][gbPos][1], GangBases[i][gbPos][2], 0, 0);
          }
          else SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}There is not enough money in gang account to purchase this base");
        }
      }
    }
  }
  return 1;
}
stock ShowHouseMenu(playerid)
{
	 TogglePlayerControllable2(playerid, 0);
	 ShowMenuForPlayer(InsideHouseMenu, playerid);
	 return 1;
}
/*
stock ShowHouseMenu(playerid)
{
	 TogglePlayerControllable2(playerid, 0);
     ShowPlayerDialog(playerid, 1009, DIALOG_STYLE_INPUT, ""LIGHTYELLOW_"GTADM - "WHITE_"House menu", "" LIGHTRED_"ID\t\t{ABFF85}Item\n\n"LIGHTRED_"1\t\t{ABFF85}Eat\n"LIGHTRED_"2\t\t{ABFF85}Get armour\n"LIGHTRED_"3\t\t{ABFF85}My wardrobe\n"LIGHTRED_"4\t\t{ABFF85}Store weapons\n"LIGHTRED_"5\t\t{ABFF85}Get weapons\n"LIGHTRED_"6\t\t{ABFF85}Take knife\n"LIGHTRED_"7\t\t{ABFF85}Take baseball bat\n"LIGHTRED_"8\t\t{ABFF85}Exit house", "Enter", "Exit");
	 return 1;
}*/
stock ExitHouse(playerid, houseid)
{
 if(houseid >=0)
 {
    ShowPlayerDialog(playerid, -1, DIALOG_STYLE_INPUT, "", "", "", "");
	SetPlayerPosEx(playerid, hInfo[houseid][sX], hInfo[houseid][sY], hInfo[houseid][sZ], hInfo[houseid][SpawnA], 0);
	SetPlayerVirtualWorldEX(playerid, 0);
	TogglePlayerControllable(playerid, 1);
	InHouse[playerid] = -255;
	if(PlayerInfo[playerid][HouseFix] > 0)
	{
	   TogglePlayerControllable2(playerid, 0);
	   SetTimerEx("WarningUnfreeze", 4000, false, "id", playerid, GetPlayerVirtualWorld(playerid));
	   Streamer_Update(playerid);
	   SendpInfo(playerid, "- ~y~Loading....", 2500);
	}
 }
 return 1;
}


stock BuyCar(playerid, Model)
{
   new str[80];
   new v=PlayerCar(playerid);
   if(v >= 0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You must sell your own car to buy a new one"), TogglePlayerControllable2(playerid, 1);
   new k=GetCarPriceFromID(Model)*2;
   if(PlayerInfo[playerid][VipItems][3] == 1) k=floatround(k*0.75);
   if(GetPlayerMoneyEx(playerid) < k) return SendClientMessage(playerid, RED, "You dont have enough money"), TogglePlayerControllable2(playerid, 1);
   GiveMedal(playerid, 13);
   format(str, sizeof(str), "Congratulations! "BLUE_"You have bought a new car "GREENBLUE_"(%s)", vInfo[Model-400][vName]);
   PlayerPlaySound(playerid, 5450 , 0.0, 0.0, 0.0);
   GivePlayerMoneyEX(playerid, -1*k, 1);
   SendClientMessage(playerid, GRAY, str);
   TogglePlayerControllable(playerid, 1);

   ResetpTuning(playerid);
   PlayerInfo[playerid][pCar] = Model;
   TogglePlayerControllable2(playerid, 1);
   ShowPlayerDialog(playerid, 3000, DIALOG_STYLE_LIST, "Pick Your Car Color 1", ""WHITE_"White\n"BLUE_"Blue\n"YELLOW_"Yellow\n"PINK_"Pink\n"RED_"Red\n"BLACK_"Black\n"WOOD_"Brown\n"GREEN_"Green\n"GRAY_"Gray\n"LIGHTBLUE_"Sky Blue\n"LIME_"Light Green", "Choose", "Cancel");

   if((GetPVarInt(playerid, "LOGGED")) != 2)
   {
	  new Query[128];
 	  format(Query, sizeof(Query), "UPDATE `users` SET `Car` = %d WHERE `Name` = '%s'", PlayerInfo[playerid][pCar], pEscName[playerid]);
	  mysql_query(GTADM, Query);
   }

   return 1;

}
stock SellCar(playerid)
{
    ResetpTuning(playerid);

	new vehicleid = PlayerCar(playerid);
	new str[128], car = PlayerInfo[playerid][pCar];
	new k=GetCarPriceFromID(car);
	if(PlayerInfo[playerid][IsVIP] == 1) k=floatround(k*0.75);

	new price = floatround(k*0.5, floatround_ceil);
	if(vehicleid >= 0)
	{
	    RemoveCustomMods(vehicleid);
		DestroyVehicleEX(vehicleid);
	    VehicleInfo[vehicleid][ID]=-1;
	    VehicleInfo[vehicleid][Player]=-1;
	    VehicleInfo[vehicleid][Owned]=0;
		PlayerInfo[playerid][pCar] = -255;
	}
	GivePlayerMoneyEX(playerid, price, 1);
	format(str, sizeof(str), "You have sold your car for $%d", price);
	SendClientMessage(playerid, GRAY, str);
	TogglePlayerControllable(playerid, 1);
    if((GetPVarInt(playerid, "LOGGED")) != 2)
    {
	  new Query[128];
 	  format(Query, sizeof(Query), "UPDATE `users` SET `Car` = %d WHERE `Name` = '%s'", PlayerInfo[playerid][pCar], pEscName[playerid]);
	  mysql_query(GTADM, Query);

    }
	return 1;
}

stock PlayerCar(playerid)
{
	 new veh=-1;
	 for(new v=0; v<MAX_VEHICLES; v++)
	 {
		 if( (VehicleInfo[v][Owned] > 0) && (VehicleInfo[v][Player] == playerid) && GetVehicleModel(v) == PlayerInfo[playerid][pCar])
				 veh=v;
	 }
	 return veh;
}


stock DestroyPlayerTD(playerid)
{
       for(new x=0; x<6; x++) PlayerTextDrawDestroy(playerid, pOutRunTD[playerid][x]);

       PlayerTextDrawDestroy(playerid, pInfoText[playerid]);
	   for(new d=0; d<60; d++) PlayerTextDrawDestroy(playerid, pRRTD[playerid][d]);
       for(new x=0; x<21; x++) PlayerTextDrawDestroy(playerid, GarageTD[playerid][x]);
       PlayerTextDrawDestroy(playerid, pAchTD[playerid]);
       PlayerTextDrawDestroy(playerid, pPMTD[playerid][0]);
       PlayerTextDrawDestroy(playerid, pPMTD[playerid][1]);
       PlayerTextDrawDestroy(playerid, pMoneyTD[playerid][0]);
       PlayerTextDrawDestroy(playerid, pMoneyTD[playerid][1]);
       PlayerTextDrawDestroy(playerid, pMoneyTD[playerid][2]);
//#if defined USEDRIFT
	//   for(new x=0; x<5; x++) TextDrawDestroy(playerid, pDriftTD[playerid][x]);
//#endif
 	   for(new x=0; x<26; x++) PlayerTextDrawDestroy(playerid, gCol[playerid][x]);
  	   for(new x=0; x<17; x++) PlayerTextDrawDestroy(playerid, TickTD[playerid][x]);
	   for(new x=0; x<26; x++) PlayerTextDrawDestroy(playerid, GwTD[playerid][x]);
   	   for(new x=0; x<MAX_PHONE_TD; x++) PlayerTextDrawDestroy(playerid, PhoneTD[playerid][x]);
       for(new x=0; x<35; x++) PlayerTextDrawDestroy(playerid, ShiText[playerid][x]);

       PlayerTextDrawDestroy(playerid, wantedTD[playerid][0]);
       PlayerTextDrawDestroy(playerid, wantedTD[playerid][1]);

       PlayerTextDrawDestroy(playerid, damagetd[playerid][0]);
       PlayerTextDrawDestroy(playerid, damagetd[playerid][1]);

       PlayerTextDrawDestroy(playerid, hittd[playerid][0]);
       PlayerTextDrawDestroy(playerid, hittd[playerid][1]);

       PlayerTextDrawDestroy(playerid, pInfoTD[playerid]);
       #if defined USE_OLDBANK
       PlayerTextDrawDestroy(playerid, BankTD[playerid]);
       #endif
	   PlayerTextDrawDestroy(playerid, pmTD[playerid][0]);
	   PlayerTextDrawDestroy(playerid, pmTD[playerid][1]);

	   for( new w=0; w < 11; w++ ) PlayerTextDrawDestroy(playerid, pRaceTD[playerid][w]);

	   //PlayerTextDrawDestroy(playerid, SpecInfo[playerid][0]);
	   PlayerTextDrawDestroy(playerid, SpecInfo[playerid][1]);
	   PlayerTextDrawDestroy(playerid, SpecInfo[playerid][2]);

	   PlayerTextDrawDestroy(playerid, RaceCon[playerid][0]);
	   PlayerTextDrawDestroy(playerid, RaceCon[playerid][1]);
	   for(new x=0; x<8; x++) PlayerTextDrawDestroy(playerid, PropTD[playerid][x]);

	   PlayerTextDrawDestroy(playerid, ScoreTD[playerid]);
	   PlayerTextDrawDestroy(playerid, FPS[playerid]);
	   TextDrawHideForPlayer(playerid, TdTimeLeftClock);

	   for(new i=0; i<StatsTDS; i++) PlayerTextDrawDestroy(playerid, pStatsTD[playerid][i]);
	   for(new i=0; i<9; i++) PlayerTextDrawDestroy(playerid, SpeedO[playerid][i]);
	   for(new i=0; i<10; i++) PlayerTextDrawDestroy(playerid, VDP[playerid][i]);

	   PlayerTextDrawDestroy(playerid, Location[playerid][0]);
	   PlayerTextDrawDestroy(playerid, Location[playerid][1]);
	   PlayerTextDrawDestroy(playerid, pMissionTD[playerid]);

	   PlayerTextDrawDestroy(playerid, pGunBattle[playerid]);
	   PlayerTextDrawDestroy(playerid, HealthBar[playerid]);
	   PlayerTextDrawDestroy(playerid, ArmourBar[playerid]);
       for(new x=0; x<8; x++) PlayerTextDrawDestroy(playerid, DMpTD[playerid][x]);
}

stock CreatePlayerTD(playerid)
{
	pOutRunTD[playerid][0] = CreatePlayerTextDraw(playerid, 193.000000, 330.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, pOutRunTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, pOutRunTD[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid, pOutRunTD[playerid][0], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, pOutRunTD[playerid][0], -1);
	PlayerTextDrawSetOutline(playerid, pOutRunTD[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid, pOutRunTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, pOutRunTD[playerid][0], 1);
	PlayerTextDrawUseBox(playerid, pOutRunTD[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, pOutRunTD[playerid][0], 255);
	PlayerTextDrawTextSize(playerid, pOutRunTD[playerid][0], 428.000000, -30.000000);
	PlayerTextDrawSetSelectable(playerid, pOutRunTD[playerid][0], 0);

	pOutRunTD[playerid][1] = CreatePlayerTextDraw(playerid, 431.000000, 333.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, pOutRunTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, pOutRunTD[playerid][1], 1);
	PlayerTextDrawLetterSize(playerid, pOutRunTD[playerid][1], 0.500000, 0.399999);
	PlayerTextDrawColor(playerid, pOutRunTD[playerid][1], -1);
	PlayerTextDrawSetOutline(playerid, pOutRunTD[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid, pOutRunTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, pOutRunTD[playerid][1], 1);
	PlayerTextDrawUseBox(playerid, pOutRunTD[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, pOutRunTD[playerid][1], -570490863);
	PlayerTextDrawTextSize(playerid, pOutRunTD[playerid][1], 193.000000, -30.000000);
	PlayerTextDrawSetSelectable(playerid, pOutRunTD[playerid][1], 0);

	pOutRunTD[playerid][2] = CreatePlayerTextDraw(playerid, 319.000000, 334.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, pOutRunTD[playerid][2], 255);
	PlayerTextDrawFont(playerid, pOutRunTD[playerid][2], 1);
	PlayerTextDrawLetterSize(playerid, pOutRunTD[playerid][2], 0.500000, 0.099999);
	PlayerTextDrawColor(playerid, pOutRunTD[playerid][2], -1);
	PlayerTextDrawSetOutline(playerid, pOutRunTD[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid, pOutRunTD[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, pOutRunTD[playerid][2], 1);
	PlayerTextDrawUseBox(playerid, pOutRunTD[playerid][2], 1);
	PlayerTextDrawBoxColor(playerid, pOutRunTD[playerid][2], 10683750);
	PlayerTextDrawTextSize(playerid, pOutRunTD[playerid][2], 425.000000, -30.000000);
	PlayerTextDrawSetSelectable(playerid, pOutRunTD[playerid][2], 0);
	//425, 308, 191
//	(distance * 2.5641025641...

	pOutRunTD[playerid][3] = CreatePlayerTextDraw(playerid, 428.000000, 327.000000, "hud:radar_flag");
	PlayerTextDrawBackgroundColor(playerid, pOutRunTD[playerid][3], 0);
	PlayerTextDrawFont(playerid, pOutRunTD[playerid][3], 4);
	PlayerTextDrawLetterSize(playerid, pOutRunTD[playerid][3], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, pOutRunTD[playerid][3], -1);
	PlayerTextDrawSetOutline(playerid, pOutRunTD[playerid][3], 0);
	PlayerTextDrawSetProportional(playerid, pOutRunTD[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, pOutRunTD[playerid][3], 1);
	PlayerTextDrawUseBox(playerid, pOutRunTD[playerid][3], 1);
	PlayerTextDrawBoxColor(playerid, pOutRunTD[playerid][3], 255);
	PlayerTextDrawTextSize(playerid, pOutRunTD[playerid][3], 12.000000, 15.000000);
	PlayerTextDrawSetSelectable(playerid, pOutRunTD[playerid][3], 0);

	pOutRunTD[playerid][4] = CreatePlayerTextDraw(playerid, 183.000000, 325.000000, "X");
	PlayerTextDrawBackgroundColor(playerid, pOutRunTD[playerid][4], 0);
	PlayerTextDrawFont(playerid, pOutRunTD[playerid][4], 5);
	PlayerTextDrawLetterSize(playerid, pOutRunTD[playerid][4], 0.560000, 1.799999);
	PlayerTextDrawColor(playerid, pOutRunTD[playerid][4], -1);
	PlayerTextDrawSetOutline(playerid, pOutRunTD[playerid][4], 0);
	PlayerTextDrawSetProportional(playerid, pOutRunTD[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, pOutRunTD[playerid][4], 1);
	PlayerTextDrawUseBox(playerid, pOutRunTD[playerid][4], 1);
	PlayerTextDrawBoxColor(playerid, pOutRunTD[playerid][4], 0);
	PlayerTextDrawTextSize(playerid, pOutRunTD[playerid][4], 22.000000, 21.000000);
	PlayerTextDrawSetPreviewModel(playerid, pOutRunTD[playerid][4], 1254);
	PlayerTextDrawSetPreviewRot(playerid, pOutRunTD[playerid][4], 0.000000, 0.000000, 0.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid, pOutRunTD[playerid][4], 0);

	pOutRunTD[playerid][5] = CreatePlayerTextDraw(playerid, 303.000000, 325.000000, "LD_POOL:BALL");
	PlayerTextDrawBackgroundColor(playerid, pOutRunTD[playerid][5], 0);
	PlayerTextDrawFont(playerid, pOutRunTD[playerid][5], 4);
	PlayerTextDrawLetterSize(playerid, pOutRunTD[playerid][5], 0.560000, 1.799999);
	PlayerTextDrawColor(playerid, pOutRunTD[playerid][5], 255);
	PlayerTextDrawSetOutline(playerid, pOutRunTD[playerid][5], 0);
	PlayerTextDrawSetProportional(playerid, pOutRunTD[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, pOutRunTD[playerid][5], 1);
	PlayerTextDrawUseBox(playerid, pOutRunTD[playerid][5], 1);
	PlayerTextDrawBoxColor(playerid, pOutRunTD[playerid][5], 0);
	PlayerTextDrawTextSize(playerid, pOutRunTD[playerid][5], 18.000000, 18.000000);
	PlayerTextDrawSetPreviewModel(playerid, pOutRunTD[playerid][5], 1254);
	PlayerTextDrawSetPreviewRot(playerid, pOutRunTD[playerid][5], 0.000000, 0.000000, 0.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid, pOutRunTD[playerid][5], 0);

	pInfoText[playerid] = CreatePlayerTextDraw(playerid, 320.000000, 150.000000, "_");
	PlayerTextDrawAlignment(playerid, pInfoText[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid, pInfoText[playerid], 0x00000033);
	PlayerTextDrawFont(playerid, pInfoText[playerid], 3);
	PlayerTextDrawLetterSize(playerid, pInfoText[playerid], 0.450000, 1.500000);//0.299999, 1.000000
	PlayerTextDrawColor(playerid, pInfoText[playerid], 0xffffffff);
	PlayerTextDrawSetOutline(playerid, pInfoText[playerid], 1);
	PlayerTextDrawSetProportional(playerid, pInfoText[playerid], 1);
	PlayerTextDrawSetShadow(playerid, pInfoText[playerid], 1);


	pIntroTD[playerid][0] = CreatePlayerTextDraw(playerid, 64.000000, 182.000000, "_");
	PlayerTextDrawAlignment(playerid, pIntroTD[playerid][0], 2);
	PlayerTextDrawBackgroundColor(playerid, pIntroTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, pIntroTD[playerid][0], 0);//3
	PlayerTextDrawLetterSize(playerid, pIntroTD[playerid][0], 0.479999, 1.100000);
	PlayerTextDrawColor(playerid, pIntroTD[playerid][0], -1);
	PlayerTextDrawSetOutline(playerid, pIntroTD[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, pIntroTD[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, pIntroTD[playerid][0], 0);

	pIntroTD[playerid][1] = CreatePlayerTextDraw(playerid, 5.000000, 221.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, pIntroTD[playerid][1], -140418786);
	PlayerTextDrawFont(playerid, pIntroTD[playerid][1], 2);
	PlayerTextDrawLetterSize(playerid, pIntroTD[playerid][1], 0.209999, 1.000000);
	PlayerTextDrawColor(playerid, pIntroTD[playerid][1], 255);
	PlayerTextDrawSetOutline(playerid, pIntroTD[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, pIntroTD[playerid][1], 1);
	PlayerTextDrawUseBox(playerid, pIntroTD[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, pIntroTD[playerid][1], 0);
	PlayerTextDrawTextSize(playerid, pIntroTD[playerid][1], 137.000000, 71.000000);
	PlayerTextDrawSetSelectable(playerid, pIntroTD[playerid][1], 0);
/*

	pIntroTD[playerid][2] = CreatePlayerTextDraw(playerid, 530.000000, 416.000000, "G~h~TA~h~DM");
	PlayerTextDrawBackgroundColor(playerid, pIntroTD[playerid][2], 150);
	PlayerTextDrawFont(playerid, pIntroTD[playerid][2], 2);
	PlayerTextDrawLetterSize(playerid, pIntroTD[playerid][2], 0.700000, 3.099999);
	PlayerTextDrawColor(playerid, pIntroTD[playerid][2], 4371967);
	PlayerTextDrawSetOutline(playerid, pIntroTD[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, pIntroTD[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, pIntroTD[playerid][2], 0);

	pIntroTD[playerid][3] = CreatePlayerTextDraw(playerid, 610.000000, 394.000000, "]");
	PlayerTextDrawBackgroundColor(playerid, pIntroTD[playerid][3], 255);
	PlayerTextDrawFont(playerid, pIntroTD[playerid][3], 2);
	PlayerTextDrawLetterSize(playerid, pIntroTD[playerid][3], 0.700000, 3.099999);
	PlayerTextDrawColor(playerid, pIntroTD[playerid][3], 3378431);
	PlayerTextDrawSetOutline(playerid, pIntroTD[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, pIntroTD[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, pIntroTD[playerid][3], 0);

	pIntroTD[playerid][4] = CreatePlayerTextDraw(playerid, 584.000000, 382.000000, "~h~]");
	PlayerTextDrawBackgroundColor(playerid, pIntroTD[playerid][4], 255);
	PlayerTextDrawFont(playerid, pIntroTD[playerid][4], 2);
	PlayerTextDrawLetterSize(playerid, pIntroTD[playerid][4], 0.810000, 3.700000);
	PlayerTextDrawColor(playerid, pIntroTD[playerid][4], 3378431);
	PlayerTextDrawSetOutline(playerid, pIntroTD[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, pIntroTD[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, pIntroTD[playerid][4], 0);

	pIntroTD[playerid][5] = CreatePlayerTextDraw(playerid, 559.000000, 389.000000, "~h~~h~]");
	PlayerTextDrawBackgroundColor(playerid, pIntroTD[playerid][5], 255);
	PlayerTextDrawFont(playerid, pIntroTD[playerid][5], 2);
	PlayerTextDrawLetterSize(playerid, pIntroTD[playerid][5], 0.810000, 3.700000);
	PlayerTextDrawColor(playerid, pIntroTD[playerid][5], 3378431);
	PlayerTextDrawSetOutline(playerid, pIntroTD[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, pIntroTD[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid, pIntroTD[playerid][5], 0);
*/
	pRRTD[playerid][0] = CreatePlayerTextDraw(playerid, 172.000000, 144.000000, "~r~Race ~w~001");
	PlayerTextDrawBackgroundColor(playerid, pRRTD[playerid][0], -236);
	PlayerTextDrawFont(playerid, pRRTD[playerid][0], 2);
	PlayerTextDrawLetterSize(playerid, pRRTD[playerid][0], 0.340000, 1.500000);
	PlayerTextDrawColor(playerid, pRRTD[playerid][0], -1);
	PlayerTextDrawSetOutline(playerid, pRRTD[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, pRRTD[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, pRRTD[playerid][0], 0);

	pRRTD[playerid][1] = CreatePlayerTextDraw(playerid, 147.000000, 134.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, pRRTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, pRRTD[playerid][1], 1);
	PlayerTextDrawLetterSize(playerid, pRRTD[playerid][1], 0.500000, 28.000000);
	PlayerTextDrawColor(playerid, pRRTD[playerid][1], -1);
	PlayerTextDrawSetOutline(playerid, pRRTD[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid, pRRTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, pRRTD[playerid][1], 1);
	PlayerTextDrawUseBox(playerid, pRRTD[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, pRRTD[playerid][1], 200);
	PlayerTextDrawTextSize(playerid, pRRTD[playerid][1], 521.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid, pRRTD[playerid][1], 0);

	pRRTD[playerid][2] = CreatePlayerTextDraw(playerid, 270.0, 135.0, "samaps:map");
	PlayerTextDrawFont(playerid, pRRTD[playerid][2], 4);
	PlayerTextDrawTextSize(playerid, pRRTD[playerid][2], 250.0, 250.0);

	pRRTD[playerid][3] = CreatePlayerTextDraw(playerid, 146.000000, 379.000000, "-");
	PlayerTextDrawBackgroundColor(playerid, pRRTD[playerid][3], -236);
	PlayerTextDrawFont(playerid, pRRTD[playerid][3], 2);
	PlayerTextDrawLetterSize(playerid, pRRTD[playerid][3], 10.000000, 0.700000);
	PlayerTextDrawColor(playerid, pRRTD[playerid][3], -1);
	PlayerTextDrawSetOutline(playerid, pRRTD[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, pRRTD[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, pRRTD[playerid][3], 0);

	pRRTD[playerid][4] = CreatePlayerTextDraw(playerid, 157.000000, 176.000000, "~l~Checkpoints:  ~w~15~n~~n~~l~Distance:  ~w~150KM~n~~n~~l~Created by:  ~w~RoNz");
	PlayerTextDrawBackgroundColor(playerid, pRRTD[playerid][4], -236);
	PlayerTextDrawFont(playerid, pRRTD[playerid][4], 2);
	PlayerTextDrawLetterSize(playerid, pRRTD[playerid][4], 0.160000, 0.900000);//0.200000, 1.100000);
	PlayerTextDrawColor(playerid, pRRTD[playerid][4], -1);
	PlayerTextDrawSetOutline(playerid, pRRTD[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, pRRTD[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, pRRTD[playerid][4], 0);

	pRRTD[playerid][5] = CreatePlayerTextDraw(playerid, 146.000000, 158.000000, "-");
	PlayerTextDrawBackgroundColor(playerid, pRRTD[playerid][5], -236);
	PlayerTextDrawFont(playerid, pRRTD[playerid][5], 2);
	PlayerTextDrawLetterSize(playerid, pRRTD[playerid][5], 10.000000, 0.700000);
	PlayerTextDrawColor(playerid, pRRTD[playerid][5], -1);
	PlayerTextDrawSetOutline(playerid, pRRTD[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, pRRTD[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid, pRRTD[playerid][5], 0);

	GarageTD[playerid][0] = CreatePlayerTextDraw(playerid, 625.000000, 227.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, GarageTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, GarageTD[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid, GarageTD[playerid][0], 0.800000, 15.000000);
	PlayerTextDrawColor(playerid, GarageTD[playerid][0], -1);
	PlayerTextDrawSetOutline(playerid, GarageTD[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid, GarageTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, GarageTD[playerid][0], 1);
	PlayerTextDrawUseBox(playerid, GarageTD[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, GarageTD[playerid][0], 150);
	PlayerTextDrawTextSize(playerid, GarageTD[playerid][0], 471.000000, 0.000000);

	GarageTD[playerid][1] = CreatePlayerTextDraw(playerid, 477.000000, 239.000000, "-");
	PlayerTextDrawBackgroundColor(playerid, GarageTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, GarageTD[playerid][1], 1);
	PlayerTextDrawLetterSize(playerid, GarageTD[playerid][1], 10.310003, 1.000000);
	PlayerTextDrawColor(playerid, GarageTD[playerid][1], -1);
	PlayerTextDrawSetOutline(playerid, GarageTD[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid, GarageTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, GarageTD[playerid][1], 1);

	GarageTD[playerid][2] = CreatePlayerTextDraw(playerid, 546.000000, 256.000000, "~l~Spoilers");
	PlayerTextDrawAlignment(playerid, GarageTD[playerid][2], 2);
	PlayerTextDrawBackgroundColor(playerid, GarageTD[playerid][2], -206);
	PlayerTextDrawFont(playerid, GarageTD[playerid][2], 0);
	PlayerTextDrawLetterSize(playerid, GarageTD[playerid][2], 0.480000, 1.000000);
	PlayerTextDrawColor(playerid, GarageTD[playerid][2], -1);
	PlayerTextDrawSetOutline(playerid, GarageTD[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, GarageTD[playerid][2], 1);
	PlayerTextDrawUseBox(playerid, GarageTD[playerid][2], 1);
	PlayerTextDrawBoxColor(playerid, GarageTD[playerid][2], 0);
	PlayerTextDrawTextSize(playerid, GarageTD[playerid][2], 20.000000, 50.000000);
    PlayerTextDrawSetSelectable(playerid, GarageTD[playerid][2], 1);

	GarageTD[playerid][4] = CreatePlayerTextDraw(playerid, 487.000000, 232.000000, "~b~Tuning Garage");
	PlayerTextDrawBackgroundColor(playerid, GarageTD[playerid][4], -206);
	PlayerTextDrawFont(playerid, GarageTD[playerid][4], 3);
	PlayerTextDrawLetterSize(playerid, GarageTD[playerid][4], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, GarageTD[playerid][4], -1);
	PlayerTextDrawSetOutline(playerid, GarageTD[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, GarageTD[playerid][4], 1);

	GarageTD[playerid][3] = CreatePlayerTextDraw(playerid, 548.000000, 347.000000, "~l~Exhaust");
	PlayerTextDrawAlignment(playerid, GarageTD[playerid][3], 2);
	PlayerTextDrawBackgroundColor(playerid, GarageTD[playerid][3], -206);
	PlayerTextDrawFont(playerid, GarageTD[playerid][3], 0);
	PlayerTextDrawLetterSize(playerid, GarageTD[playerid][3], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, GarageTD[playerid][3], -1);
	PlayerTextDrawSetOutline(playerid, GarageTD[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, GarageTD[playerid][3], 1);
	PlayerTextDrawUseBox(playerid, GarageTD[playerid][3], 1);
	PlayerTextDrawBoxColor(playerid, GarageTD[playerid][3], 0);
	PlayerTextDrawTextSize(playerid, GarageTD[playerid][3], 10.000000, 50.000000);
    PlayerTextDrawSetSelectable(playerid, GarageTD[playerid][3], 1);

	GarageTD[playerid][5] = CreatePlayerTextDraw(playerid, 544.000000, 273.000000, "~l~Side Skirts");
	PlayerTextDrawAlignment(playerid, GarageTD[playerid][5], 2);
	PlayerTextDrawBackgroundColor(playerid, GarageTD[playerid][5], -206);
	PlayerTextDrawFont(playerid, GarageTD[playerid][5], 0);
	PlayerTextDrawLetterSize(playerid, GarageTD[playerid][5], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, GarageTD[playerid][5], -1);
	PlayerTextDrawSetOutline(playerid, GarageTD[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, GarageTD[playerid][5], 1);
	PlayerTextDrawUseBox(playerid, GarageTD[playerid][5], 1);
	PlayerTextDrawBoxColor(playerid, GarageTD[playerid][5], 0);
	PlayerTextDrawTextSize(playerid, GarageTD[playerid][5], 20.000000, 100.000000);
    PlayerTextDrawSetSelectable(playerid, GarageTD[playerid][5], 1);


	GarageTD[playerid][6] = CreatePlayerTextDraw(playerid, 546.000000, 291.000000, "~l~Front Bumpers");
	PlayerTextDrawAlignment(playerid, GarageTD[playerid][6], 2);
	PlayerTextDrawBackgroundColor(playerid, GarageTD[playerid][6], -206);
	PlayerTextDrawFont(playerid, GarageTD[playerid][6], 0);
	PlayerTextDrawLetterSize(playerid, GarageTD[playerid][6], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, GarageTD[playerid][6], -1);
	PlayerTextDrawSetOutline(playerid, GarageTD[playerid][6], 1);
	PlayerTextDrawSetProportional(playerid, GarageTD[playerid][6], 1);
	PlayerTextDrawUseBox(playerid, GarageTD[playerid][6], 1);
	PlayerTextDrawBoxColor(playerid, GarageTD[playerid][6], 0);
	PlayerTextDrawTextSize(playerid, GarageTD[playerid][6], 20.000000, 100.000000);
    PlayerTextDrawSetSelectable(playerid, GarageTD[playerid][6], 1);


	GarageTD[playerid][7] = CreatePlayerTextDraw(playerid, 545.000000, 310.000000, "~l~Rear Bumpers");
	PlayerTextDrawAlignment(playerid, GarageTD[playerid][7], 2);
	PlayerTextDrawBackgroundColor(playerid, GarageTD[playerid][7], -206);
	PlayerTextDrawFont(playerid, GarageTD[playerid][7], 0);
	PlayerTextDrawLetterSize(playerid, GarageTD[playerid][7], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, GarageTD[playerid][7], -1);
	PlayerTextDrawSetOutline(playerid, GarageTD[playerid][7], 1);
	PlayerTextDrawSetProportional(playerid, GarageTD[playerid][7], 1);
	PlayerTextDrawUseBox(playerid, GarageTD[playerid][7], 1);
	PlayerTextDrawBoxColor(playerid, GarageTD[playerid][7], 0);
	PlayerTextDrawTextSize(playerid, GarageTD[playerid][7], 20.000000, 100.000000);
    PlayerTextDrawSetSelectable(playerid, GarageTD[playerid][7], 1);

	GarageTD[playerid][8] = CreatePlayerTextDraw(playerid, 545.000000, 328.000000, "~l~Hood Mark");
	PlayerTextDrawAlignment(playerid, GarageTD[playerid][8], 2);
	PlayerTextDrawBackgroundColor(playerid, GarageTD[playerid][8], -206);
	PlayerTextDrawFont(playerid, GarageTD[playerid][8], 0);
	PlayerTextDrawLetterSize(playerid, GarageTD[playerid][8], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, GarageTD[playerid][8], -1);
	PlayerTextDrawSetOutline(playerid, GarageTD[playerid][8], 1);
	PlayerTextDrawSetProportional(playerid, GarageTD[playerid][8], 1);
	PlayerTextDrawUseBox(playerid, GarageTD[playerid][8], 1);
	PlayerTextDrawBoxColor(playerid, GarageTD[playerid][8], 0);
	PlayerTextDrawTextSize(playerid, GarageTD[playerid][8], 20.000000, 100.000000);
    PlayerTextDrawSetSelectable(playerid, GarageTD[playerid][8], 1);

	GarageTD[playerid][9] = CreatePlayerTextDraw(playerid, 606.000000, 216.000000, "X");
	PlayerTextDrawAlignment(playerid, GarageTD[playerid][9], 2);
	PlayerTextDrawBackgroundColor(playerid, GarageTD[playerid][9], -16776961);
	PlayerTextDrawFont(playerid, GarageTD[playerid][9], 2);
	PlayerTextDrawLetterSize(playerid, GarageTD[playerid][9], 0.180000, 0.699999);
	PlayerTextDrawColor(playerid, GarageTD[playerid][9], -1);
	PlayerTextDrawSetOutline(playerid, GarageTD[playerid][9], 0);
	PlayerTextDrawSetProportional(playerid, GarageTD[playerid][9], 1);
	PlayerTextDrawSetShadow(playerid, GarageTD[playerid][9], 0);
	PlayerTextDrawUseBox(playerid, GarageTD[playerid][9], 1);
	PlayerTextDrawBoxColor(playerid, GarageTD[playerid][9], 150);
	PlayerTextDrawTextSize(playerid, GarageTD[playerid][9], 10.000000, 28.000000);
    PlayerTextDrawSetSelectable(playerid, GarageTD[playerid][9], 1);

	GarageTD[playerid][10] = CreatePlayerTextDraw(playerid, 573.000000, 216.000000, "cam");
	PlayerTextDrawAlignment(playerid, GarageTD[playerid][10], 2);
	PlayerTextDrawBackgroundColor(playerid, GarageTD[playerid][10], -16776961);
	PlayerTextDrawFont(playerid, GarageTD[playerid][10], 2);
	PlayerTextDrawLetterSize(playerid, GarageTD[playerid][10], 0.180000, 0.699999);
	PlayerTextDrawColor(playerid, GarageTD[playerid][10], -1);
	PlayerTextDrawSetOutline(playerid, GarageTD[playerid][10], 0);
	PlayerTextDrawSetProportional(playerid, GarageTD[playerid][10], 1);
	PlayerTextDrawSetShadow(playerid, GarageTD[playerid][10], 0);
	PlayerTextDrawUseBox(playerid, GarageTD[playerid][10], 1);
	PlayerTextDrawBoxColor(playerid, GarageTD[playerid][10], 150);
	PlayerTextDrawTextSize(playerid, GarageTD[playerid][10], 10.000000, 28.000000);
    PlayerTextDrawSetSelectable(playerid, GarageTD[playerid][10], 1);

	GarageTD[playerid][11] = CreatePlayerTextDraw(playerid, 540.000000, 216.000000, "reset");
	PlayerTextDrawAlignment(playerid, GarageTD[playerid][11], 2);
	PlayerTextDrawBackgroundColor(playerid, GarageTD[playerid][11], -16776961);
	PlayerTextDrawFont(playerid, GarageTD[playerid][11], 2);
	PlayerTextDrawLetterSize(playerid, GarageTD[playerid][11], 0.180000, 0.699999);
	PlayerTextDrawColor(playerid, GarageTD[playerid][11], -1);
	PlayerTextDrawSetOutline(playerid, GarageTD[playerid][11], 0);
	PlayerTextDrawSetProportional(playerid, GarageTD[playerid][11], 1);
	PlayerTextDrawSetShadow(playerid, GarageTD[playerid][11], 0);
	PlayerTextDrawUseBox(playerid, GarageTD[playerid][11], 1);
	PlayerTextDrawBoxColor(playerid, GarageTD[playerid][11], 150);
	PlayerTextDrawTextSize(playerid, GarageTD[playerid][11], 10.000000, 28.000000);
    PlayerTextDrawSetSelectable(playerid, GarageTD[playerid][11], 1);

	GarageTD[playerid][12] = CreatePlayerTextDraw(playerid, 499.00, 216.00, "~r~Neon");
	PlayerTextDrawAlignment(playerid, GarageTD[playerid][12], 2);
	PlayerTextDrawBackgroundColor(playerid, GarageTD[playerid][12], -16776961);
	PlayerTextDrawFont(playerid, GarageTD[playerid][12], 2);
	PlayerTextDrawLetterSize(playerid, GarageTD[playerid][12], 0.180000, 0.699998);
	PlayerTextDrawColor(playerid, GarageTD[playerid][12], -1);
	PlayerTextDrawSetOutline(playerid, GarageTD[playerid][12], 0);
	PlayerTextDrawSetProportional(playerid, GarageTD[playerid][12], 1);
	PlayerTextDrawSetShadow(playerid, GarageTD[playerid][12], 0);
	PlayerTextDrawUseBox(playerid, GarageTD[playerid][12], 1);
	PlayerTextDrawBoxColor(playerid, GarageTD[playerid][12], 150);
	PlayerTextDrawTextSize(playerid, GarageTD[playerid][12], 10.000000, 44.000000);
    PlayerTextDrawSetSelectable(playerid, GarageTD[playerid][12], 1);

	GarageTD[playerid][17] = CreatePlayerTextDraw(playerid, 483.000000, 212.000000, "red");
	PlayerTextDrawAlignment(playerid, GarageTD[playerid][17], 2);
	PlayerTextDrawBackgroundColor(playerid, GarageTD[playerid][17], 255);
	PlayerTextDrawFont(playerid, GarageTD[playerid][17], 1);
	PlayerTextDrawLetterSize(playerid, GarageTD[playerid][17], 0.469999, 0.000000);
	PlayerTextDrawColor(playerid, GarageTD[playerid][17], -1);
	PlayerTextDrawSetOutline(playerid, GarageTD[playerid][17], 0);
	PlayerTextDrawSetProportional(playerid, GarageTD[playerid][17], 1);
	PlayerTextDrawSetShadow(playerid, GarageTD[playerid][17], 1);
	PlayerTextDrawUseBox(playerid, GarageTD[playerid][17], 1);
	PlayerTextDrawBoxColor(playerid, GarageTD[playerid][17], -16776961);
	PlayerTextDrawTextSize(playerid, GarageTD[playerid][17], 6.000000, 12.000000);
    PlayerTextDrawSetSelectable(playerid, GarageTD[playerid][17], 1);

	GarageTD[playerid][14] = CreatePlayerTextDraw(playerid, 500.000000, 212.000000, "green");
	PlayerTextDrawAlignment(playerid, GarageTD[playerid][14], 2);
	PlayerTextDrawBackgroundColor(playerid, GarageTD[playerid][14], 255);
	PlayerTextDrawFont(playerid, GarageTD[playerid][14], 1);
	PlayerTextDrawLetterSize(playerid, GarageTD[playerid][14], 0.469999, 0.000000);
	PlayerTextDrawColor(playerid, GarageTD[playerid][14], -1);
	PlayerTextDrawSetOutline(playerid, GarageTD[playerid][14], 0);
	PlayerTextDrawSetProportional(playerid, GarageTD[playerid][14], 1);
	PlayerTextDrawSetShadow(playerid, GarageTD[playerid][14], 1);
	PlayerTextDrawUseBox(playerid, GarageTD[playerid][14], 1);
	PlayerTextDrawBoxColor(playerid, GarageTD[playerid][14], 16711935);
	PlayerTextDrawTextSize(playerid, GarageTD[playerid][14], 6.000000, 12.000000);
    PlayerTextDrawSetSelectable(playerid, GarageTD[playerid][14], 1);

	GarageTD[playerid][15] = CreatePlayerTextDraw(playerid, 517.000000, 212.000000, "yellow");
	PlayerTextDrawAlignment(playerid, GarageTD[playerid][15], 2);
	PlayerTextDrawBackgroundColor(playerid, GarageTD[playerid][15], 255);
	PlayerTextDrawFont(playerid, GarageTD[playerid][15], 1);
	PlayerTextDrawLetterSize(playerid, GarageTD[playerid][15], 0.469999, 0.000000);
	PlayerTextDrawColor(playerid, GarageTD[playerid][15], -1);
	PlayerTextDrawSetOutline(playerid, GarageTD[playerid][15], 0);
	PlayerTextDrawSetProportional(playerid, GarageTD[playerid][15], 1);
	PlayerTextDrawSetShadow(playerid, GarageTD[playerid][15], 1);
	PlayerTextDrawUseBox(playerid, GarageTD[playerid][15], 1);
	PlayerTextDrawBoxColor(playerid, GarageTD[playerid][15], -65281);
	PlayerTextDrawTextSize(playerid, GarageTD[playerid][15], 6.000000, 12.000000);
    PlayerTextDrawSetSelectable(playerid, GarageTD[playerid][15], 1);

	GarageTD[playerid][16] = CreatePlayerTextDraw(playerid, 534.000000, 212.000000, "lightblue");
	PlayerTextDrawAlignment(playerid, GarageTD[playerid][16], 2);
	PlayerTextDrawBackgroundColor(playerid, GarageTD[playerid][16], 255);
	PlayerTextDrawFont(playerid, GarageTD[playerid][16], 1);
	PlayerTextDrawLetterSize(playerid, GarageTD[playerid][16], 0.469999, 0.000000);
	PlayerTextDrawColor(playerid, GarageTD[playerid][16], -1);
	PlayerTextDrawSetOutline(playerid, GarageTD[playerid][16], 0);
	PlayerTextDrawSetProportional(playerid, GarageTD[playerid][16], 1);
	PlayerTextDrawSetShadow(playerid, GarageTD[playerid][16], 1);
	PlayerTextDrawUseBox(playerid, GarageTD[playerid][16], 1);
	PlayerTextDrawBoxColor(playerid, GarageTD[playerid][16], 16777215);
	PlayerTextDrawTextSize(playerid, GarageTD[playerid][16], 6.000000, 12.000000);
    PlayerTextDrawSetSelectable(playerid, GarageTD[playerid][16], 1);

	GarageTD[playerid][13] = CreatePlayerTextDraw(playerid, 552.000000, 212.000000, "black");
	PlayerTextDrawAlignment(playerid, GarageTD[playerid][13], 2);
	PlayerTextDrawBackgroundColor(playerid, GarageTD[playerid][13], 255);
	PlayerTextDrawFont(playerid, GarageTD[playerid][13], 1);
	PlayerTextDrawLetterSize(playerid, GarageTD[playerid][13], 0.469999, 0.000000);
	PlayerTextDrawColor(playerid, GarageTD[playerid][13], -1);
	PlayerTextDrawSetOutline(playerid, GarageTD[playerid][13], 0);
	PlayerTextDrawSetProportional(playerid, GarageTD[playerid][13], 1);
	PlayerTextDrawSetShadow(playerid, GarageTD[playerid][13], 1);
	PlayerTextDrawUseBox(playerid, GarageTD[playerid][13], 1);
	PlayerTextDrawBoxColor(playerid, GarageTD[playerid][13], 255);
	PlayerTextDrawTextSize(playerid, GarageTD[playerid][13], 6.000000, 15.000000);
    PlayerTextDrawSetSelectable(playerid, GarageTD[playerid][13], 1);

	GarageTD[playerid][18] = CreatePlayerTextDraw(playerid, 572.000000, 212.000000, "pink");
	PlayerTextDrawAlignment(playerid, GarageTD[playerid][18], 2);
	PlayerTextDrawBackgroundColor(playerid, GarageTD[playerid][18], 255);
	PlayerTextDrawFont(playerid, GarageTD[playerid][18], 1);
	PlayerTextDrawLetterSize(playerid, GarageTD[playerid][18], 0.469999, 0.000000);
	PlayerTextDrawColor(playerid, GarageTD[playerid][18], -1);
	PlayerTextDrawSetOutline(playerid, GarageTD[playerid][18], 0);
	PlayerTextDrawSetProportional(playerid, GarageTD[playerid][18], 1);
	PlayerTextDrawSetShadow(playerid, GarageTD[playerid][18], 1);
	PlayerTextDrawUseBox(playerid, GarageTD[playerid][18], 1);
	PlayerTextDrawBoxColor(playerid, GarageTD[playerid][18], -16711681);
	PlayerTextDrawTextSize(playerid, GarageTD[playerid][18], 6.000000, 15.000000);
    PlayerTextDrawSetSelectable(playerid, GarageTD[playerid][18], 1);

	GarageTD[playerid][19] = CreatePlayerTextDraw(playerid, 592.000000, 212.000000, "white");
	PlayerTextDrawAlignment(playerid, GarageTD[playerid][19], 2);
	PlayerTextDrawBackgroundColor(playerid, GarageTD[playerid][19], 255);
	PlayerTextDrawFont(playerid, GarageTD[playerid][19], 1);
	PlayerTextDrawLetterSize(playerid, GarageTD[playerid][19], 0.469999, 0.000000);
	PlayerTextDrawColor(playerid, GarageTD[playerid][19], -1);
	PlayerTextDrawSetOutline(playerid, GarageTD[playerid][19], 0);
	PlayerTextDrawSetProportional(playerid, GarageTD[playerid][19], 1);
	PlayerTextDrawSetShadow(playerid, GarageTD[playerid][19], 1);
	PlayerTextDrawUseBox(playerid, GarageTD[playerid][19], 1);
	PlayerTextDrawBoxColor(playerid, GarageTD[playerid][19], -1);
	PlayerTextDrawTextSize(playerid, GarageTD[playerid][19], 6.000000, 15.000000);
    PlayerTextDrawSetSelectable(playerid, GarageTD[playerid][19], 1);

	GarageTD[playerid][20] = CreatePlayerTextDraw(playerid, 612.000000, 212.000000, "dblue");
	PlayerTextDrawAlignment(playerid, GarageTD[playerid][20], 2);
	PlayerTextDrawBackgroundColor(playerid, GarageTD[playerid][20], 255);
	PlayerTextDrawFont(playerid, GarageTD[playerid][20], 1);
	PlayerTextDrawLetterSize(playerid, GarageTD[playerid][20], 0.490000, 0.000000);
	PlayerTextDrawColor(playerid, GarageTD[playerid][20], -1);
	PlayerTextDrawSetOutline(playerid, GarageTD[playerid][20], 0);
	PlayerTextDrawSetProportional(playerid, GarageTD[playerid][20], 1);
	PlayerTextDrawSetShadow(playerid, GarageTD[playerid][20], 1);
	PlayerTextDrawUseBox(playerid, GarageTD[playerid][20], 1);
	PlayerTextDrawBoxColor(playerid, GarageTD[playerid][20], 378273791);
	PlayerTextDrawTextSize(playerid, GarageTD[playerid][20], 6.000000, 14.000000);
    PlayerTextDrawSetSelectable(playerid, GarageTD[playerid][20], 1);

	pPMTD[playerid][0] = CreatePlayerTextDraw(playerid, 14.000000, 329.000000, "PM - ~w~[DoD]RonZ sent you a ~r~~h~~h~Private Message~w~!");
	PlayerTextDrawBackgroundColor(playerid, pPMTD[playerid][0], 50);
	PlayerTextDrawFont(playerid, pPMTD[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid, pPMTD[playerid][0], 0.180000, 1.000000);//0.209999, 1.100000);
	PlayerTextDrawColor(playerid, pPMTD[playerid][0], 463397119);
	PlayerTextDrawSetOutline(playerid, pPMTD[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, pPMTD[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, pPMTD[playerid][0], 0);

	pPMTD[playerid][1] = CreatePlayerTextDraw(playerid, 13.000000, 324.000000, "LD_CHAT:Goodcha");
	PlayerTextDrawBackgroundColor(playerid, pPMTD[playerid][1], 50);
	PlayerTextDrawFont(playerid, pPMTD[playerid][1], 4);
	PlayerTextDrawLetterSize(playerid, pPMTD[playerid][1], -0.490000, 0.699998);
	PlayerTextDrawColor(playerid, pPMTD[playerid][1], -1);
	PlayerTextDrawSetOutline(playerid, pPMTD[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, pPMTD[playerid][1], 1);
	PlayerTextDrawUseBox(playerid, pPMTD[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, pPMTD[playerid][1], 255);
	PlayerTextDrawTextSize(playerid, pPMTD[playerid][1], -11.000000, 11.000000);
	PlayerTextDrawSetSelectable(playerid, pPMTD[playerid][1], 0);

	pMoneyTD[playerid][0] = CreatePlayerTextDraw(playerid, 606.000000, 311.000000, "~g~+2000000000");
	PlayerTextDrawAlignment(playerid, pMoneyTD[playerid][0], 3);
	PlayerTextDrawBackgroundColor(playerid, pMoneyTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, pMoneyTD[playerid][0], 3);
	PlayerTextDrawLetterSize(playerid, pMoneyTD[playerid][0], 0.519999, 2.300002);
	PlayerTextDrawColor(playerid, pMoneyTD[playerid][0], -1);
	PlayerTextDrawSetOutline(playerid, pMoneyTD[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, pMoneyTD[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, pMoneyTD[playerid][0], 0);

	pMoneyTD[playerid][1] = CreatePlayerTextDraw(playerid, 600.000000, 309.000000, "dollar");
	PlayerTextDrawFont(playerid, pMoneyTD[playerid][1], 5);
	PlayerTextDrawLetterSize(playerid, pMoneyTD[playerid][1], 0.489998, 3.200000);
	PlayerTextDrawColor(playerid, pMoneyTD[playerid][1], -1);
	PlayerTextDrawSetOutline(playerid, pMoneyTD[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, pMoneyTD[playerid][1], 1);
	PlayerTextDrawUseBox(playerid, pMoneyTD[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, pMoneyTD[playerid][1], 0);
	PlayerTextDrawTextSize(playerid, pMoneyTD[playerid][1], 30.000000, 28.000000);
	PlayerTextDrawSetPreviewModel(playerid, pMoneyTD[playerid][1], 1274);
	PlayerTextDrawSetPreviewRot(playerid, pMoneyTD[playerid][1], 0.000000, 0.000000, 180.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid, pMoneyTD[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, pMoneyTD[playerid][1], 0);

	pMoneyTD[playerid][2] = CreatePlayerTextDraw(playerid, 546.000000, 298.000000, "~g~~h~~h~~h~Gang Earnings");
	PlayerTextDrawAlignment(playerid, pMoneyTD[playerid][2], 2);
	PlayerTextDrawBackgroundColor(playerid, pMoneyTD[playerid][2], 255);
	PlayerTextDrawFont(playerid, pMoneyTD[playerid][2], 0);
	PlayerTextDrawLetterSize(playerid, pMoneyTD[playerid][2], 0.299999, 1.400002);
	PlayerTextDrawColor(playerid, pMoneyTD[playerid][2], -1);
	PlayerTextDrawSetOutline(playerid, pMoneyTD[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, pMoneyTD[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, pMoneyTD[playerid][2], 0);

	pInfoTD[playerid] = CreatePlayerTextDraw(playerid, 143.000000, 383.000000, "- ~y~Your gang is ~r~taking over~y~ a turf in San Fierro!");
	PlayerTextDrawBackgroundColor(playerid, pInfoTD[playerid], 255);
	PlayerTextDrawFont(playerid, pInfoTD[playerid], 1);
	PlayerTextDrawLetterSize(playerid, pInfoTD[playerid], 0.1899, 0.9499);
	PlayerTextDrawColor(playerid, pInfoTD[playerid], -1);
	PlayerTextDrawSetOutline(playerid, pInfoTD[playerid], 1);
	PlayerTextDrawSetProportional(playerid, pInfoTD[playerid], 1);
	PlayerTextDrawUseBox(playerid, pInfoTD[playerid], 1);
	PlayerTextDrawBoxColor(playerid, pInfoTD[playerid], 0);
	PlayerTextDrawTextSize(playerid, pInfoTD[playerid], 401.000000, 20.000000);

	pMissionTD[playerid] = CreatePlayerTextDraw(playerid, 2.000000, 151.000000, "_");
	PlayerTextDrawUseBox(playerid, pMissionTD[playerid], 1);
	PlayerTextDrawAlignment(playerid, pMissionTD[playerid], 1);
	PlayerTextDrawTextSize(playerid, pMissionTD[playerid], 159.000000, 0.000000);
	PlayerTextDrawColor(playerid, pMissionTD[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, pMissionTD[playerid], 255);
	PlayerTextDrawBoxColor(playerid, pMissionTD[playerid], 150);
	PlayerTextDrawLetterSize(playerid, pMissionTD[playerid], 0.290000, 1.200000);


	pRaceTD[playerid][0] = CreatePlayerTextDraw(playerid, 0.000000, 432.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, pRaceTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, pRaceTD[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid, pRaceTD[playerid][0], 0.500000, 1.500000);
	PlayerTextDrawColor(playerid, pRaceTD[playerid][0], -1);
	PlayerTextDrawSetOutline(playerid, pRaceTD[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid, pRaceTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, pRaceTD[playerid][0], 1);
	PlayerTextDrawUseBox(playerid, pRaceTD[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, pRaceTD[playerid][0], 150);
	PlayerTextDrawTextSize(playerid, pRaceTD[playerid][0], 645.000000, 64.000000);
	PlayerTextDrawSetSelectable(playerid, pRaceTD[playerid][0], 0);

	pRaceTD[playerid][1] = CreatePlayerTextDraw(playerid, 17.000000, 437.000000, "Race~h~~h~~h~ 001");
	PlayerTextDrawBackgroundColor(playerid, pRaceTD[playerid][1], 150);
	PlayerTextDrawFont(playerid, pRaceTD[playerid][1], 2);
	PlayerTextDrawLetterSize(playerid, pRaceTD[playerid][1], 0.290000, 1.000000);
	PlayerTextDrawColor(playerid, pRaceTD[playerid][1], 1436943359);
	PlayerTextDrawSetOutline(playerid, pRaceTD[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, pRaceTD[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, pRaceTD[playerid][1], 0);


	pRaceTD[playerid][2] = CreatePlayerTextDraw(playerid, 0.000000, 432.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, pRaceTD[playerid][2], 255);
	PlayerTextDrawFont(playerid, pRaceTD[playerid][2], 1);
	PlayerTextDrawLetterSize(playerid, pRaceTD[playerid][2], 0.500000, -0.100000);
	PlayerTextDrawColor(playerid, pRaceTD[playerid][2], -1);
	PlayerTextDrawSetOutline(playerid, pRaceTD[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid, pRaceTD[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, pRaceTD[playerid][2], 1);
	PlayerTextDrawUseBox(playerid, pRaceTD[playerid][2], 1);
	PlayerTextDrawBoxColor(playerid, pRaceTD[playerid][2], 150);
	PlayerTextDrawTextSize(playerid, pRaceTD[playerid][2], 645.000000, -70.000000);
	PlayerTextDrawSetSelectable(playerid, pRaceTD[playerid][2], 0);

	pRaceTD[playerid][3] = CreatePlayerTextDraw(playerid, 4.000000, 434.000000, "hud:radar_flag");
	PlayerTextDrawBackgroundColor(playerid, pRaceTD[playerid][3], 0);
	PlayerTextDrawFont(playerid, pRaceTD[playerid][3], 4);
	PlayerTextDrawLetterSize(playerid, pRaceTD[playerid][3], 0.059999, 1.000000);
	PlayerTextDrawColor(playerid, pRaceTD[playerid][3], -1);
	PlayerTextDrawSetOutline(playerid, pRaceTD[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, pRaceTD[playerid][3], 1);
	PlayerTextDrawUseBox(playerid, pRaceTD[playerid][3], 1);
	PlayerTextDrawBoxColor(playerid, pRaceTD[playerid][3], 255);
	PlayerTextDrawTextSize(playerid, pRaceTD[playerid][3], 11.000000, 13.000000);
	PlayerTextDrawSetSelectable(playerid, pRaceTD[playerid][3], 0);

	pRaceTD[playerid][4] = CreatePlayerTextDraw(playerid, 78.000000, 434.000000, "hud:radar_flag");
	PlayerTextDrawBackgroundColor(playerid, pRaceTD[playerid][4], 0);
	PlayerTextDrawFont(playerid, pRaceTD[playerid][4], 4);
	PlayerTextDrawLetterSize(playerid, pRaceTD[playerid][4], 0.059999, 1.000000);
	PlayerTextDrawColor(playerid, pRaceTD[playerid][4], -1);
	PlayerTextDrawSetOutline(playerid, pRaceTD[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, pRaceTD[playerid][4], 1);
	PlayerTextDrawUseBox(playerid, pRaceTD[playerid][4], 1);
	PlayerTextDrawBoxColor(playerid, pRaceTD[playerid][4], 255);
	PlayerTextDrawTextSize(playerid, pRaceTD[playerid][4], 11.000000, 13.000000);
	PlayerTextDrawSetSelectable(playerid, pRaceTD[playerid][4], 0);

	pRaceTD[playerid][5] = CreatePlayerTextDraw(playerid, 281.000000, 437.000000, "Checkpoints: ~h~1/15");
	PlayerTextDrawBackgroundColor(playerid, pRaceTD[playerid][5], 150);
	PlayerTextDrawFont(playerid, pRaceTD[playerid][5], 3);
	PlayerTextDrawLetterSize(playerid, pRaceTD[playerid][5], 0.310000, 1.000000);
	PlayerTextDrawColor(playerid, pRaceTD[playerid][5], 10092543);
	PlayerTextDrawSetOutline(playerid, pRaceTD[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, pRaceTD[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid, pRaceTD[playerid][5], 0);

	pRaceTD[playerid][6] = CreatePlayerTextDraw(playerid, 542.000000, 436.000000, "Time: ~h~~h~00:00");
	PlayerTextDrawBackgroundColor(playerid, pRaceTD[playerid][6], 150);
	PlayerTextDrawFont(playerid, pRaceTD[playerid][6], 2);
	PlayerTextDrawLetterSize(playerid, pRaceTD[playerid][6], 0.310000, 1.000000);
	PlayerTextDrawColor(playerid, pRaceTD[playerid][6], -10944257);
	PlayerTextDrawSetOutline(playerid, pRaceTD[playerid][6], 1);
	PlayerTextDrawSetProportional(playerid, pRaceTD[playerid][6], 1);
	PlayerTextDrawSetSelectable(playerid, pRaceTD[playerid][6], 0);

	pRaceTD[playerid][7] = CreatePlayerTextDraw(playerid, 620.000000, 431.000000, "ld_grav:timer");
	PlayerTextDrawBackgroundColor(playerid, pRaceTD[playerid][7], 0);
	PlayerTextDrawFont(playerid, pRaceTD[playerid][7], 4);
	PlayerTextDrawLetterSize(playerid, pRaceTD[playerid][7], -0.009998, 0.000000);
	PlayerTextDrawColor(playerid, pRaceTD[playerid][7], -1);
	PlayerTextDrawSetOutline(playerid, pRaceTD[playerid][7], 1);
	PlayerTextDrawSetProportional(playerid, pRaceTD[playerid][7], 1);
	PlayerTextDrawUseBox(playerid, pRaceTD[playerid][7], 1);
	PlayerTextDrawBoxColor(playerid, pRaceTD[playerid][7], 255);
	PlayerTextDrawTextSize(playerid, pRaceTD[playerid][7], 14.000000, 15.000000);
	PlayerTextDrawSetSelectable(playerid, pRaceTD[playerid][7], 0);

	pRaceTD[playerid][8] = CreatePlayerTextDraw(playerid, 427.000000, 437.000000, "Position: ~h~~h~~h~~h~1/15");
	PlayerTextDrawBackgroundColor(playerid, pRaceTD[playerid][8], 150);
	PlayerTextDrawFont(playerid, pRaceTD[playerid][8], 3);
	PlayerTextDrawLetterSize(playerid, pRaceTD[playerid][8], 0.310000, 1.000000);
	PlayerTextDrawColor(playerid, pRaceTD[playerid][8], 515178751);
	PlayerTextDrawSetOutline(playerid, pRaceTD[playerid][8], 1);
	PlayerTextDrawSetProportional(playerid, pRaceTD[playerid][8], 1);
	PlayerTextDrawSetSelectable(playerid, pRaceTD[playerid][8], 0);

	pRaceTD[playerid][9] = CreatePlayerTextDraw(playerid, 397.000000, 434.000000, "hud:radar_flag");
	PlayerTextDrawBackgroundColor(playerid, pRaceTD[playerid][9] , 0);
	PlayerTextDrawFont(playerid, pRaceTD[playerid][9] , 4);
	PlayerTextDrawLetterSize(playerid, pRaceTD[playerid][9] , 0.059999, 1.000000);
	PlayerTextDrawColor(playerid, pRaceTD[playerid][9] , -1);
	PlayerTextDrawSetOutline(playerid, pRaceTD[playerid][9] , 1);
	PlayerTextDrawSetProportional(playerid, pRaceTD[playerid][9] , 1);
	PlayerTextDrawUseBox(playerid, pRaceTD[playerid][9] , 1);
	PlayerTextDrawBoxColor(playerid, pRaceTD[playerid][9] , 255);
	PlayerTextDrawTextSize(playerid, pRaceTD[playerid][9] , 11.000000, 13.000000);
	PlayerTextDrawSetSelectable(playerid, pRaceTD[playerid][9] , 0);


	pRaceTD[playerid][10]  = CreatePlayerTextDraw(playerid, 522.000000, 434.000000, "hud:radar_flag");
	PlayerTextDrawBackgroundColor(playerid, pRaceTD[playerid][10], 0);
	PlayerTextDrawFont(playerid, pRaceTD[playerid][10], 4);
	PlayerTextDrawLetterSize(playerid, pRaceTD[playerid][10], 0.059999, 1.000000);
	PlayerTextDrawColor(playerid, pRaceTD[playerid][10], -1);
	PlayerTextDrawSetOutline(playerid, pRaceTD[playerid][10], 1);
	PlayerTextDrawSetProportional(playerid, pRaceTD[playerid][10], 1);
	PlayerTextDrawUseBox(playerid, pRaceTD[playerid][10], 1);
	PlayerTextDrawBoxColor(playerid, pRaceTD[playerid][10], 255);
	PlayerTextDrawTextSize(playerid, pRaceTD[playerid][10], 11.000000, 13.000000);
	PlayerTextDrawSetSelectable(playerid, pRaceTD[playerid][10], 0);



	ArmourBar[playerid] = CreatePlayerTextDraw(playerid, 576.000000, 46.200000, "100");
	PlayerTextDrawAlignment(playerid, ArmourBar[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid, ArmourBar[playerid], -156);
	PlayerTextDrawFont(playerid, ArmourBar[playerid], 2);
	PlayerTextDrawLetterSize(playerid, ArmourBar[playerid], 0.200000, 0.599999);
	PlayerTextDrawColor(playerid, ArmourBar[playerid], 255);
	PlayerTextDrawSetOutline(playerid, ArmourBar[playerid], 0);
	PlayerTextDrawSetProportional(playerid, ArmourBar[playerid], 1);
	PlayerTextDrawSetOutline(playerid, ArmourBar[playerid], 1);
	PlayerTextDrawUseBox(playerid, ArmourBar[playerid], 1);
	PlayerTextDrawBoxColor(playerid, ArmourBar[playerid], 0);
	PlayerTextDrawTextSize(playerid, ArmourBar[playerid], 0.000000, 58.000000);
	PlayerTextDrawSetSelectable(playerid, ArmourBar[playerid], 0);

	HealthBar[playerid] = CreatePlayerTextDraw(playerid, 576.000000, 67.099998, "100");
	PlayerTextDrawAlignment(playerid, HealthBar[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid, HealthBar[playerid], -1358954446);
	PlayerTextDrawFont(playerid, HealthBar[playerid], 2);
	PlayerTextDrawLetterSize(playerid, HealthBar[playerid], 0.209999, 0.699998);
	PlayerTextDrawColor(playerid, HealthBar[playerid], 255);
	PlayerTextDrawSetOutline(playerid, HealthBar[playerid], 0);
	PlayerTextDrawSetProportional(playerid, HealthBar[playerid], 1);
	PlayerTextDrawSetOutline(playerid, HealthBar[playerid], 1);
	PlayerTextDrawUseBox(playerid, HealthBar[playerid], 1);
	PlayerTextDrawBoxColor(playerid, HealthBar[playerid], 0);
	PlayerTextDrawTextSize(playerid, HealthBar[playerid], 0.000000, 58.000000);
	PlayerTextDrawSetSelectable(playerid, HealthBar[playerid], 0);


	pGunBattle[playerid]= CreatePlayerTextDraw(playerid, 261.000000, 364.000000, "~r~- - - - -");
	PlayerTextDrawBackgroundColor(playerid, pGunBattle[playerid], 255);
	PlayerTextDrawFont(playerid, pGunBattle[playerid], 2);
	PlayerTextDrawLetterSize(playerid, pGunBattle[playerid], 0.839999, 3.699999);
	PlayerTextDrawColor(playerid, pGunBattle[playerid], -1);
	PlayerTextDrawSetOutline(playerid, pGunBattle[playerid], 1);
	PlayerTextDrawSetProportional(playerid, pGunBattle[playerid], 1);
//
#if defined USE_OLDBANK
    BankTD[playerid] = CreatePlayerTextDraw(playerid, 415.000000, 385.000000, "Bank: $0");
	PlayerTextDrawBackgroundColor(playerid, BankTD[playerid], 255);
	PlayerTextDrawFont(playerid, BankTD[playerid], 1);
	PlayerTextDrawLetterSize(playerid, BankTD[playerid], 0.490000, 1.300000);
	PlayerTextDrawColor(playerid, BankTD[playerid], -1);
	PlayerTextDrawSetOutline(playerid, BankTD[playerid], 0);
	PlayerTextDrawSetProportional(playerid, BankTD[playerid], 1);
	PlayerTextDrawSetShadow(playerid, BankTD[playerid], 2);
	#endif
    CreateMenuTD(playerid);
#if defined USEDRIFT
    CreatepDriftTD(playerid);
#endif
	pmTD[playerid][0] = CreatePlayerTextDraw(playerid, 544.000000, 345.000000, "unlock all the Achievments");
	PlayerTextDrawAlignment(playerid, pmTD[playerid][0], 2);
	PlayerTextDrawBackgroundColor(playerid, pmTD[playerid][0], 50);
	PlayerTextDrawFont(playerid, pmTD[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid, pmTD[playerid][0], 0.150000, 1.000000);
	PlayerTextDrawColor(playerid, pmTD[playerid][0], -1);
	PlayerTextDrawSetOutline(playerid, pmTD[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, pmTD[playerid][0], 1);
	PlayerTextDrawUseBox(playerid, pmTD[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, pmTD[playerid][0], 0);
	PlayerTextDrawTextSize(playerid, pmTD[playerid][0], 0.000000, 160.000000);
	PlayerTextDrawSetSelectable(playerid, pmTD[playerid][0], 0);


	pmTD[playerid][1] = CreatePlayerTextDraw(playerid, 544.000000, 328.000000, "\"Master of GTADM\"");
	PlayerTextDrawAlignment(playerid, pmTD[playerid][1], 2);
	PlayerTextDrawBackgroundColor(playerid, pmTD[playerid][1], -236);
	PlayerTextDrawFont(playerid, pmTD[playerid][1], 1);
	PlayerTextDrawLetterSize(playerid, pmTD[playerid][1], 0.239999, 1.100000);
	PlayerTextDrawColor(playerid, pmTD[playerid][1], 200);
	PlayerTextDrawSetOutline(playerid, pmTD[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, pmTD[playerid][1], 1);
	PlayerTextDrawUseBox(playerid, pmTD[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, pmTD[playerid][1], 0);
	PlayerTextDrawTextSize(playerid, pmTD[playerid][1], 0.000000, 161.000000);
	PlayerTextDrawSetSelectable(playerid, pmTD[playerid][1], 0);



    RaceCon[playerid][0] = CreatePlayerTextDraw(playerid, 3.000000, 267.000000, "~n~~n~press 'N' to create a car spawning point~n~~y~~n~Created Spawns~w~:0/12");
	PlayerTextDrawBackgroundColor(playerid, RaceCon[playerid][0], 255);
    PlayerTextDrawFont(playerid, RaceCon[playerid][0], 1);
    PlayerTextDrawLetterSize(playerid, RaceCon[playerid][0], 0.380000, 1.200000);
    PlayerTextDrawColor(playerid, RaceCon[playerid][0], -1);
    PlayerTextDrawSetOutline(playerid, RaceCon[playerid][0], 0);
    PlayerTextDrawSetProportional(playerid, RaceCon[playerid][0], 1);
    PlayerTextDrawSetShadow(playerid, RaceCon[playerid][0], 1);
    PlayerTextDrawUseBox(playerid, RaceCon[playerid][0], 1);
    PlayerTextDrawBoxColor(playerid, RaceCon[playerid][0], 255);
    PlayerTextDrawTextSize(playerid, RaceCon[playerid][0], 170.000000, 30.000000);

    RaceCon[playerid][1] = CreatePlayerTextDraw(playerid, 22.000000, 270.000000, "~r~Race Construction");
    PlayerTextDrawBackgroundColor(playerid, RaceCon[playerid][1], -1);
    PlayerTextDrawFont(playerid, RaceCon[playerid][1], 0);
    PlayerTextDrawLetterSize(playerid, RaceCon[playerid][1], 0.500000, 1.000000);
    PlayerTextDrawColor(playerid, RaceCon[playerid][1], -1);
    PlayerTextDrawSetOutline(playerid, RaceCon[playerid][1], 1);
    PlayerTextDrawSetProportional(playerid, RaceCon[playerid][1], 1);

/*
    SpecInfo[playerid][0] = CreatePlayerTextDraw(playerid, 163.000000, 218.000000, "_");//222.000000, 217.000000
    PlayerTextDrawBackgroundColor(playerid, SpecInfo[playerid][0], 255);
    PlayerTextDrawFont(playerid, SpecInfo[playerid][0], 1);
    PlayerTextDrawLetterSize(playerid, SpecInfo[playerid][0], 0.500000, 11.199999);//0.500000, 11.200000
    PlayerTextDrawColor(playerid, SpecInfo[playerid][0], -1);
    PlayerTextDrawUseBox(playerid, SpecInfo[playerid][0], 1);
    PlayerTextDrawBoxColor(playerid, SpecInfo[playerid][0], 100);
    PlayerTextDrawTextSize(playerid, SpecInfo[playerid][0], 0.000000, 0.000000);//1.000000, -6.000000*/

    SpecInfo[playerid][1] = CreatePlayerTextDraw(playerid, 8.000000, 218.000000, "Player:~p~~n~~w~ID:~b~~n~~w~Money:~r~~n~~w~Score:~b~");
    PlayerTextDrawBackgroundColor(playerid, SpecInfo[playerid][1], 255);
    PlayerTextDrawFont(playerid, SpecInfo[playerid][1], 1);
    PlayerTextDrawLetterSize(playerid, SpecInfo[playerid][1], 0.260000, 1.000000);//0.549999, 1.300000);
    PlayerTextDrawColor(playerid, SpecInfo[playerid][1], -1);
    PlayerTextDrawSetOutline(playerid, SpecInfo[playerid][1], 1);
    PlayerTextDrawSetProportional(playerid, SpecInfo[playerid][1], 1);

    SpecInfo[playerid][2] = CreatePlayerTextDraw(playerid, 7.000000, 254.000000, "~w~Fps:~y~~n~~w~Ping:~b~~n~~w~Health:~r~~n~~w~Armour:~g~~n~~w~Speed:~r~~n~VHealth:~p~~h~~n~~b~~h~~h~~h~Packet loss:");//9.000000, 265.000000
    PlayerTextDrawBackgroundColor(playerid, SpecInfo[playerid][2], 255);
    PlayerTextDrawFont(playerid, SpecInfo[playerid][2], 1);
    PlayerTextDrawLetterSize(playerid, SpecInfo[playerid][2], 0.260000, 1.000000);//0.549999, 1.300000);
    PlayerTextDrawColor(playerid, SpecInfo[playerid][2], -1);
    PlayerTextDrawSetOutline(playerid, SpecInfo[playerid][2], 1);
    PlayerTextDrawSetProportional(playerid, SpecInfo[playerid][2], 1);

	ScoreTD[playerid] = CreatePlayerTextDraw(playerid, 499.0, 98.5, "S00000000");//499.000000, 97.000000
	PlayerTextDrawBackgroundColor(playerid, ScoreTD[playerid], 0x000000FF);//255);
	PlayerTextDrawFont(playerid, ScoreTD[playerid], 3);
	PlayerTextDrawLetterSize(playerid, ScoreTD[playerid], 0.55, 2.15);//0.5600, 2.0999
	PlayerTextDrawColor(playerid, ScoreTD[playerid], -1394363393);//-1394363393);
	PlayerTextDrawSetOutline(playerid, ScoreTD[playerid], 2);
	PlayerTextDrawSetProportional(playerid, ScoreTD[playerid], 0);

	FPS[playerid] = CreatePlayerTextDraw(playerid, 602.000000, 3.000000, "~r~FPS: ~w~101");
	PlayerTextDrawBackgroundColor(playerid, FPS[playerid], 255);//255
	PlayerTextDrawFont(playerid, FPS[playerid], 2);
	PlayerTextDrawLetterSize(playerid, FPS[playerid], 0.200000, 1.200000);
	PlayerTextDrawColor(playerid, FPS[playerid], -1);//-1
	PlayerTextDrawSetOutline(playerid, FPS[playerid], 1);
	PlayerTextDrawSetProportional(playerid, FPS[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, FPS[playerid], 0);

/*
    SpeedO[playerid][0] = CreatePlayerTextDraw(playerid, 314.000000, 376.000000, "~w~100 ~p~KM/H");
	PlayerTextDrawAlignment(playerid, SpeedO[playerid][0], 2);
	PlayerTextDrawBackgroundColor(playerid, SpeedO[playerid][0], 100);
	PlayerTextDrawFont(playerid, SpeedO[playerid][0], 2);
	PlayerTextDrawLetterSize(playerid, SpeedO[playerid][0], 0.370000, 1.000000);
	PlayerTextDrawColor(playerid, SpeedO[playerid][0], -1);
	PlayerTextDrawSetOutline(playerid, SpeedO[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, SpeedO[playerid][0], 1);

	SpeedO[playerid][1] = CreatePlayerTextDraw(playerid, 281.000000, 396.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, SpeedO[playerid][1], 100);
	PlayerTextDrawFont(playerid, SpeedO[playerid][1], 2);
	PlayerTextDrawLetterSize(playerid, SpeedO[playerid][1], 0.300000, -0.100000);
	PlayerTextDrawColor(playerid, SpeedO[playerid][1], -1);
	PlayerTextDrawSetOutline(playerid, SpeedO[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid, SpeedO[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, SpeedO[playerid][1], 1);
	PlayerTextDrawUseBox(playerid, SpeedO[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, SpeedO[playerid][1], 16711760);
	PlayerTextDrawTextSize(playerid, SpeedO[playerid][1], 346.000000, 60.000000);

	SpeedO[playerid][2] = CreatePlayerTextDraw(playerid, 314.000000, 374.000000, "_");
	PlayerTextDrawAlignment(playerid, SpeedO[playerid][2], 2);
	PlayerTextDrawBackgroundColor(playerid, SpeedO[playerid][2], 100);
	PlayerTextDrawFont(playerid, SpeedO[playerid][2], 2);
	PlayerTextDrawLetterSize(playerid, SpeedO[playerid][2], 0.370000, 2.899998);
	PlayerTextDrawColor(playerid, SpeedO[playerid][2], -1);
	PlayerTextDrawSetOutline(playerid, SpeedO[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, SpeedO[playerid][2], 1);
	PlayerTextDrawUseBox(playerid, SpeedO[playerid][2], 1);
	PlayerTextDrawBoxColor(playerid, SpeedO[playerid][2], 50);
	PlayerTextDrawTextSize(playerid, SpeedO[playerid][2], -15.000000, 88.000000);

	SpeedO[playerid][3] = CreatePlayerTextDraw(playerid, 279.000000, 394.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, SpeedO[playerid][3], 100);
	PlayerTextDrawFont(playerid, SpeedO[playerid][3], 2);
	PlayerTextDrawLetterSize(playerid, SpeedO[playerid][3], 0.300000, 0.299998);
	PlayerTextDrawColor(playerid, SpeedO[playerid][3], -1);
	PlayerTextDrawSetOutline(playerid, SpeedO[playerid][3], 0);
	PlayerTextDrawSetProportional(playerid, SpeedO[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, SpeedO[playerid][3], 1);
	PlayerTextDrawUseBox(playerid, SpeedO[playerid][3], 1);
	PlayerTextDrawBoxColor(playerid, SpeedO[playerid][3], 150);
	PlayerTextDrawTextSize(playerid, SpeedO[playerid][3], 349.000000, 61.000000);

	SpeedO[playerid][4] = CreatePlayerTextDraw(playerid, 281.000000, 396.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, SpeedO[playerid][4], 100);
	PlayerTextDrawFont(playerid, SpeedO[playerid][4], 2);
	PlayerTextDrawLetterSize(playerid, SpeedO[playerid][4], 0.300000, -0.100000);
	PlayerTextDrawColor(playerid, SpeedO[playerid][4], -1);
	PlayerTextDrawSetOutline(playerid, SpeedO[playerid][4], 0);
	PlayerTextDrawSetProportional(playerid, SpeedO[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, SpeedO[playerid][4], 1);
	PlayerTextDrawUseBox(playerid, SpeedO[playerid][4], 1);
	PlayerTextDrawBoxColor(playerid, SpeedO[playerid][4], 16711760);
	PlayerTextDrawTextSize(playerid, SpeedO[playerid][4], 281.000000, 60.000000);
*/
	SpeedO[playerid][0] = CreatePlayerTextDraw(playerid, 305.000000, 355.000000, "DUMPER");
	PlayerTextDrawAlignment(playerid, SpeedO[playerid][0], 2);
	PlayerTextDrawBackgroundColor(playerid, SpeedO[playerid][0], 255);
	PlayerTextDrawFont(playerid, SpeedO[playerid][0], 3);
	PlayerTextDrawLetterSize(playerid, SpeedO[playerid][0], 0.370000, 0.699998);
	PlayerTextDrawColor(playerid, SpeedO[playerid][0], -1);
	PlayerTextDrawSetOutline(playerid, SpeedO[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, SpeedO[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, SpeedO[playerid][0], 0);

	SpeedO[playerid][1] = CreatePlayerTextDraw(playerid, 221.000000, 350.000000, "PIC FUCK YOU");
	PlayerTextDrawAlignment(playerid, SpeedO[playerid][1], 2);
	PlayerTextDrawBackgroundColor(playerid, SpeedO[playerid][1], 0);
	PlayerTextDrawFont(playerid, SpeedO[playerid][1], 5);
	PlayerTextDrawLetterSize(playerid, SpeedO[playerid][1], 0.379999, 1.099998);
	PlayerTextDrawColor(playerid, SpeedO[playerid][1], -1);
	PlayerTextDrawSetOutline(playerid, SpeedO[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, SpeedO[playerid][1], 1);
	PlayerTextDrawUseBox(playerid, SpeedO[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, SpeedO[playerid][1], 0);
	PlayerTextDrawTextSize(playerid, SpeedO[playerid][1], 42.000000, 46.000000);
	PlayerTextDrawSetPreviewModel(playerid, SpeedO[playerid][1], 406);
	PlayerTextDrawSetPreviewRot(playerid, SpeedO[playerid][1], -16.000000, 0.000000, -55.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid, SpeedO[playerid][1], 0);

	SpeedO[playerid][2] = CreatePlayerTextDraw(playerid, 307.500000, 363.000000, "_");
	PlayerTextDrawAlignment(playerid, SpeedO[playerid][2], 2);
	PlayerTextDrawBackgroundColor(playerid, SpeedO[playerid][2], 0);
	PlayerTextDrawFont(playerid, SpeedO[playerid][2], 0);
	PlayerTextDrawLetterSize(playerid, SpeedO[playerid][2], 0.490000, 2.099999);
	PlayerTextDrawColor(playerid, SpeedO[playerid][2], -1);
	PlayerTextDrawSetOutline(playerid, SpeedO[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, SpeedO[playerid][2], 1);
	PlayerTextDrawUseBox(playerid, SpeedO[playerid][2], 1);
	PlayerTextDrawBoxColor(playerid, SpeedO[playerid][2], 255);
	PlayerTextDrawTextSize(playerid, SpeedO[playerid][2], 23.000000, -97.000000);
	PlayerTextDrawSetPreviewModel(playerid, SpeedO[playerid][2], 411);
	PlayerTextDrawSetPreviewRot(playerid, SpeedO[playerid][2], -16.000000, 0.000000, -55.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid, SpeedO[playerid][2], 0);

	SpeedO[playerid][3] = CreatePlayerTextDraw(playerid, 266.000000, 376.000000, "__");
	PlayerTextDrawBackgroundColor(playerid, SpeedO[playerid][3], 0);
	PlayerTextDrawFont(playerid, SpeedO[playerid][3], 0);
	PlayerTextDrawLetterSize(playerid, SpeedO[playerid][3], 0.490000, 0.199999);
	PlayerTextDrawColor(playerid, SpeedO[playerid][3], -1);
	PlayerTextDrawSetOutline(playerid, SpeedO[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, SpeedO[playerid][3], 1);
	PlayerTextDrawUseBox(playerid, SpeedO[playerid][3], 1);
	PlayerTextDrawBoxColor(playerid, SpeedO[playerid][3], 10935842);
	PlayerTextDrawTextSize(playerid, SpeedO[playerid][3], 349.000000, 23.000000);
	PlayerTextDrawSetPreviewModel(playerid, SpeedO[playerid][3], 411);
	PlayerTextDrawSetPreviewRot(playerid, SpeedO[playerid][3], -16.000000, 0.000000, -55.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid, SpeedO[playerid][3], 0);

	SpeedO[playerid][4] = CreatePlayerTextDraw(playerid, 266.000000, 366.000000, "__");
	PlayerTextDrawBackgroundColor(playerid, SpeedO[playerid][4], 0);
	PlayerTextDrawFont(playerid, SpeedO[playerid][4], 0);
	PlayerTextDrawLetterSize(playerid, SpeedO[playerid][4], 0.490000, 0.199999);
	PlayerTextDrawColor(playerid, SpeedO[playerid][4], -1);
	PlayerTextDrawSetOutline(playerid, SpeedO[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, SpeedO[playerid][4], 1);
	PlayerTextDrawUseBox(playerid, SpeedO[playerid][4], 1);
	PlayerTextDrawBoxColor(playerid, SpeedO[playerid][4], 11865890);
	PlayerTextDrawTextSize(playerid, SpeedO[playerid][4], 349.000000, 23.000000);
	PlayerTextDrawSetPreviewModel(playerid, SpeedO[playerid][4], 411);
	PlayerTextDrawSetPreviewRot(playerid, SpeedO[playerid][4], -16.000000, 0.000000, -55.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid, SpeedO[playerid][4], 0);

	SpeedO[playerid][5] = CreatePlayerTextDraw(playerid, 266.000000, 366.000000, "___"); //spedo
	PlayerTextDrawBackgroundColor(playerid, SpeedO[playerid][5], 0);
	PlayerTextDrawFont(playerid, SpeedO[playerid][5], 0);
	PlayerTextDrawLetterSize(playerid, SpeedO[playerid][5], 0.490000, 0.199999);
	PlayerTextDrawColor(playerid, SpeedO[playerid][5], -1);
	PlayerTextDrawSetOutline(playerid, SpeedO[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, SpeedO[playerid][5], 1);
	PlayerTextDrawUseBox(playerid, SpeedO[playerid][5], 1);
	PlayerTextDrawBoxColor(playerid, SpeedO[playerid][5], 11865992);
	PlayerTextDrawTextSize(playerid, SpeedO[playerid][5], 262.000000, 23.000000);
	PlayerTextDrawSetPreviewModel(playerid, SpeedO[playerid][5], 411);
	PlayerTextDrawSetPreviewRot(playerid, SpeedO[playerid][5], -16.000000, 0.000000, -55.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid, SpeedO[playerid][5], 0);

	SpeedO[playerid][6] = CreatePlayerTextDraw(playerid, 289.000000, 365.000000, "0 KM/H");
	PlayerTextDrawBackgroundColor(playerid, SpeedO[playerid][6], 50);
	PlayerTextDrawFont(playerid, SpeedO[playerid][6], 3);
	PlayerTextDrawLetterSize(playerid, SpeedO[playerid][6], 0.289999, 0.499998);
	PlayerTextDrawColor(playerid, SpeedO[playerid][6], -1);
	PlayerTextDrawSetOutline(playerid, SpeedO[playerid][6], 1);
	PlayerTextDrawSetProportional(playerid, SpeedO[playerid][6], 1);
	PlayerTextDrawSetSelectable(playerid, SpeedO[playerid][6], 0);

	SpeedO[playerid][7] = CreatePlayerTextDraw(playerid, 298.000000, 374.000000, "N2O");
	PlayerTextDrawBackgroundColor(playerid, SpeedO[playerid][7], 50);
	PlayerTextDrawFont(playerid, SpeedO[playerid][7], 3);
	PlayerTextDrawLetterSize(playerid, SpeedO[playerid][7], 0.239999, 0.599997);
	PlayerTextDrawColor(playerid, SpeedO[playerid][7], -1);
	PlayerTextDrawSetOutline(playerid, SpeedO[playerid][7], 1);
	PlayerTextDrawSetProportional(playerid, SpeedO[playerid][7], 1);
	PlayerTextDrawSetSelectable(playerid, SpeedO[playerid][7], 0);

	SpeedO[playerid][8] = CreatePlayerTextDraw(playerid, 266.000000, 376.000000, "___"); //nitro
	PlayerTextDrawBackgroundColor(playerid, SpeedO[playerid][8], 0);
	PlayerTextDrawFont(playerid, SpeedO[playerid][8], 0);
	PlayerTextDrawLetterSize(playerid, SpeedO[playerid][8], 0.490000, 0.199999);
	PlayerTextDrawColor(playerid, SpeedO[playerid][8], -1);
	PlayerTextDrawSetOutline(playerid, SpeedO[playerid][8], 1);
	PlayerTextDrawSetProportional(playerid, SpeedO[playerid][8], 1);
	PlayerTextDrawUseBox(playerid, SpeedO[playerid][8], 1);
	PlayerTextDrawBoxColor(playerid, SpeedO[playerid][8], 461889791);
	PlayerTextDrawTextSize(playerid, SpeedO[playerid][8], 262.000000, 23.000000);
	PlayerTextDrawSetPreviewModel(playerid, SpeedO[playerid][8], 411);
	PlayerTextDrawSetPreviewRot(playerid, SpeedO[playerid][8], -16.000000, 0.000000, -55.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid, SpeedO[playerid][8], 0);

//================
	Location[playerid][0] = CreatePlayerTextDraw(playerid, 136.000000, 394.000000, "~r~ Location~w~: Doherty~n~~r~     Turf~w~: Masters");
	PlayerTextDrawBackgroundColor(playerid, Location[playerid][0], 100);
	PlayerTextDrawFont(playerid, Location[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid, Location[playerid][0], 0.1899, 0.9499);
	PlayerTextDrawColor(playerid, Location[playerid][0], -1);
	PlayerTextDrawSetOutline(playerid, Location[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid, Location[playerid][0], 1);
	PlayerTextDrawSetOutline(playerid, Location[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, Location[playerid][0], 0);

	Location[playerid][1] = CreatePlayerTextDraw(playerid, 169.000000, 403.000000, "No gang");
	PlayerTextDrawBackgroundColor(playerid, Location[playerid][1], 100);
	PlayerTextDrawFont(playerid, Location[playerid][1], 1);
	PlayerTextDrawLetterSize(playerid, Location[playerid][1], 0.189998, 0.949998);
	PlayerTextDrawColor(playerid, Location[playerid][1], -1);
	PlayerTextDrawSetOutline(playerid, Location[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid, Location[playerid][1], 1);
	PlayerTextDrawSetOutline(playerid, Location[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, Location[playerid][1], 0);

	VDP[playerid][4] = CreatePlayerTextDraw(playerid, 441.000000, 427.000000, "~y~Previous~>~~>~");
	PlayerTextDrawBackgroundColor(playerid, VDP[playerid][4], 255);
	PlayerTextDrawFont(playerid, VDP[playerid][4], 3);
	PlayerTextDrawLetterSize(playerid, VDP[playerid][4], 0.560000, 1.799998);
	PlayerTextDrawColor(playerid, VDP[playerid][4], -1);
	PlayerTextDrawSetOutline(playerid, VDP[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, VDP[playerid][4], 1);
	PlayerTextDrawUseBox(playerid, VDP[playerid][4], 1);
	PlayerTextDrawBoxColor(playerid, VDP[playerid][4], 255);
	PlayerTextDrawTextSize(playerid, VDP[playerid][4], 556.000000, 40.000000);
	PlayerTextDrawSetSelectable(playerid, VDP[playerid][4], 1);

	DMpTD[playerid][0] = CreatePlayerTextDraw(playerid, 463.000000, 10+247.000000, "-");
	PlayerTextDrawBackgroundColor(playerid, DMpTD[playerid][0], -236);
 	PlayerTextDrawFont(playerid, DMpTD[playerid][0], 1);
 	PlayerTextDrawLetterSize(playerid, DMpTD[playerid][0], 9.810001, 0.400000);
 	PlayerTextDrawColor(playerid, DMpTD[playerid][0], 255);//-1
 	PlayerTextDrawSetOutline(playerid, DMpTD[playerid][0], 1);
 	PlayerTextDrawSetProportional(playerid, DMpTD[playerid][0], 1);
 	PlayerTextDrawSetShadow(playerid, DMpTD[playerid][0], 1);

	DMpTD[playerid][1] = CreatePlayerTextDraw(playerid, 498.000000, 10+277.000000, "~b~Serial Kills:~b~~h~ 0");
 	PlayerTextDrawBackgroundColor(playerid, DMpTD[playerid][1], 20);//255
 	PlayerTextDrawFont(playerid, DMpTD[playerid][1], 2);
 	PlayerTextDrawLetterSize(playerid, DMpTD[playerid][1], 0.290000, 1.000000);
 	PlayerTextDrawColor(playerid, DMpTD[playerid][1], -7864065);//-1
 	PlayerTextDrawSetOutline(playerid, DMpTD[playerid][1], 1);
 	PlayerTextDrawSetProportional(playerid, DMpTD[playerid][1], 1);

	DMpTD[playerid][2] = CreatePlayerTextDraw(playerid, 464.000000, 10+299.000000, "-");
	PlayerTextDrawBackgroundColor(playerid, DMpTD[playerid][2], -236);// 255);
 	PlayerTextDrawFont(playerid, DMpTD[playerid][2], 3);
 	PlayerTextDrawLetterSize(playerid, DMpTD[playerid][2], 9.810001, 0.400000);
 	PlayerTextDrawColor(playerid, DMpTD[playerid][2], 255);//-1
 	PlayerTextDrawSetOutline(playerid, DMpTD[playerid][2], 1);
 	PlayerTextDrawSetProportional(playerid, DMpTD[playerid][2], 1);
 	PlayerTextDrawSetShadow(playerid, DMpTD[playerid][2], 1);

	DMpTD[playerid][3] = CreatePlayerTextDraw(playerid, 498.000000, 10+254.000000, "~g~Kills:~g~~h~ 0");
 	PlayerTextDrawBackgroundColor(playerid, DMpTD[playerid][3], 20);//255
 	PlayerTextDrawFont(playerid, DMpTD[playerid][3], 2);
 	PlayerTextDrawLetterSize(playerid, DMpTD[playerid][3], 0.290000, 1.000000);
 	PlayerTextDrawColor(playerid, DMpTD[playerid][3], -7864065);//-1
 	PlayerTextDrawSetOutline(playerid, DMpTD[playerid][3], 1);
 	PlayerTextDrawSetProportional(playerid, DMpTD[playerid][3], 1);

	DMpTD[playerid][4] = CreatePlayerTextDraw(playerid, 498.000000, 10+266.000000, "~r~Deaths:~r~~h~ 0");
 	PlayerTextDrawBackgroundColor(playerid, DMpTD[playerid][4], 20);//255
 	PlayerTextDrawFont(playerid, DMpTD[playerid][4], 2);
 	PlayerTextDrawLetterSize(playerid, DMpTD[playerid][4], 0.290000, 1.000000);
 	PlayerTextDrawColor(playerid, DMpTD[playerid][4], -7864065);//-1
 	PlayerTextDrawSetOutline(playerid, DMpTD[playerid][4], 1);
 	PlayerTextDrawSetProportional(playerid, DMpTD[playerid][4], 1);

	DMpTD[playerid][5] = CreatePlayerTextDraw(playerid, 498.000000, 10+289.000000, "~p~Ratio:~p~~h~ 0.00");
 	PlayerTextDrawBackgroundColor(playerid, DMpTD[playerid][5], 20);//255
 	PlayerTextDrawFont(playerid, DMpTD[playerid][5], 2);
 	PlayerTextDrawLetterSize(playerid, DMpTD[playerid][5], 0.290000, 1.000000);
 	PlayerTextDrawColor(playerid, DMpTD[playerid][5], -7864065);//-1
 	PlayerTextDrawSetOutline(playerid, DMpTD[playerid][5], 1);
 	PlayerTextDrawSetProportional(playerid, DMpTD[playerid][5], 1);

	DMpTD[playerid][6] = CreatePlayerTextDraw(playerid, 463.000000, 10+230.000000, "-");
 	PlayerTextDrawBackgroundColor(playerid, DMpTD[playerid][6], -236);
 	PlayerTextDrawFont(playerid, DMpTD[playerid][6], 1);
 	PlayerTextDrawLetterSize(playerid, DMpTD[playerid][6], 9.810001, 0.400000);
 	PlayerTextDrawColor(playerid, DMpTD[playerid][6], 255);//-1
 	PlayerTextDrawSetOutline(playerid, DMpTD[playerid][6], 1);
 	PlayerTextDrawSetProportional(playerid, DMpTD[playerid][6], 1);
 	PlayerTextDrawSetShadow(playerid, DMpTD[playerid][6], 1);

	DMpTD[playerid][7] = CreatePlayerTextDraw(playerid, 535.000000, 10+236.000000, "~b~~h~~h~~h~-");
 	PlayerTextDrawAlignment(playerid, DMpTD[playerid][7], 2);
 	PlayerTextDrawBackgroundColor(playerid, DMpTD[playerid][7], 20);
 	PlayerTextDrawFont(playerid, DMpTD[playerid][7], 1);
 	PlayerTextDrawLetterSize(playerid, DMpTD[playerid][7], 0.290000, 0.800000);
 	PlayerTextDrawColor(playerid, DMpTD[playerid][7], -7864065);
 	PlayerTextDrawSetOutline(playerid, DMpTD[playerid][7], 1);
 	PlayerTextDrawSetProportional(playerid, DMpTD[playerid][7], 1);

}

GetVehicleID(vehName[])
{
    for(new x; x != 211; x++) if(strfind(vInfo[x][vName], vehName, true) != -1) return x + 400;
    return INVALID_VEHICLE_ID;
}




stock ModVehicle(vehicleid, i)
{
	if(pMods[i][17] != -255) ChangeVehiclePaintjob(vehicleid, pMods[i][17]);
    ChangeVehicleColor(vehicleid, pMods[i][18], pMods[i][19]);
    AddCustomMods(vehicleid, i);
    new tuned2 = 0;
	if(pMods[i][0] != 0) {
		AddVehicleComponentEX(vehicleid, pMods[i][0]);
		tuned2 = 1;
	}
    if(pMods[i][1] != 0) {
		AddVehicleComponentEX(vehicleid, pMods[i][1]), CarNitro[vehicleid]=1;
		tuned2 = 1;
	}
	if(pMods[i][2] != 0) {
		AddVehicleComponentEX(vehicleid, pMods[i][2]);
		tuned2 = 1;
	}
    if(pMods[i][3] != 0) {
		AddVehicleComponentEX(vehicleid, pMods[i][3]);
		tuned2 = 1;
	}
	if(pMods[i][4] != 0) {
		AddVehicleComponentEX(vehicleid, pMods[i][4]);
		tuned2 = 1;
	}
    if(pMods[i][5] != 0) {
		AddVehicleComponentEX(vehicleid, pMods[i][5]);
		tuned2 = 1;
	}
    if(pMods[i][6] != 0) {
		AddVehicleComponentEX(vehicleid, pMods[i][6]);
		tuned2 = 1;
	}
	if(pMods[i][7] != 0) {
		AddVehicleComponentEX(vehicleid, pMods[i][7]);
		tuned2 = 1;
 	}
	if(pMods[i][8] != 0) {
		AddVehicleComponentEX(vehicleid, pMods[i][8]);
		tuned2 = 1;
	}
	if(pMods[i][9] != 0) {
		AddVehicleComponentEX(vehicleid, pMods[i][9]);
		tuned2 = 1;
	}
	if(pMods[i][10] != 0) {
		AddVehicleComponentEX(vehicleid, pMods[i][10]);
		tuned2 = 1;
	}
	if(pMods[i][11] != 0) {
		AddVehicleComponentEX(vehicleid, pMods[i][11]);
		tuned2 = 1;
	}
	if(pMods[i][12] != 0) {
		AddVehicleComponentEX(vehicleid, pMods[i][12]);
		tuned2 = 1;
	}
	if(pMods[i][13] != 0) {
		AddVehicleComponentEX(vehicleid, pMods[i][13]);
		tuned2 = 1;
	}
	if(pMods[i][14] != 0) {
		AddVehicleComponentEX(vehicleid, pMods[i][14]);
		tuned2 = 1;
	}
	if(pMods[i][15] != 0) {
		AddVehicleComponentEX(vehicleid, pMods[i][15]);
		tuned2 = 1;
	}
	if(pMods[i][16] != 0) {
		AddVehicleComponentEX(vehicleid, pMods[i][16]);
		tuned2 = 1;
	}
	if(tuned2 == 1) {
	    tuned++;
	}
	return 1;
}

stock AddVehicleComponentEX(vehicleid, mod)
{
	 if(mod == 1010)  CarNitro[vehicleid]=1;
	 else
	 {
		if(IsComponentidCompatible(GetVehicleModel(vehicleid), mod))
		{
			AddVehicleComponent(vehicleid, mod);
		}
     }
}
stock SetPlayerPosEx(playerid, Float:x, Float:y, Float:z, Float:a, INT=0)
{
    HidePlayerMenu(playerid);
    SetPlayerPos(playerid, x, y, z), SetPlayerFacingAngle(playerid, a);
    SetPlayerInterior(playerid, INT);
    if(GetPlayerVirtualWorld(playerid) == 1111)
     SetPlayerVirtualWorldEX(playerid, 0);
	return 1;
}
stock TeleportPlayer(playerid, Float:x, Float:y, Float:z, Float:a, INT=-255, bool:telecar=true)
{
  if((InHouse[playerid] >= 0) || (GetPlayerVirtualWorld(playerid) == 7) || (GetPlayerVirtualWorld(playerid) == 1337) || (GetPlayerVirtualWorld(playerid) == 1338) || (GetPlayerVirtualWorld(playerid) == 1340))
  {
	 SetPVarInt(playerid, "Dont_Exit_b", true);
	 SetPlayerVirtualWorldEX(playerid, 0);
	 SetPlayerInterior(playerid, 0);
	 InHouse[playerid] = -255;
  }
  HidePlayerMenu(playerid);
  HidePlayerDialog(playerid);
  new v=GetPlayerVehicleID(playerid);
  new w=GetPlayerVirtualWorld(playerid);
  if(telecar == true && GetPlayerState(playerid) == 2 && !IsAPlane(v) && GetVehicleModel(v) != 432 && !IsABoat(v) && (w !=19888 && w != 19999))
  {
	SetVehiclePos(v, x, y, z), SetVehicleZAngle(v, a);
	if(INT >= 0) SetPlayerInterior(playerid, INT), LinkVehicleToInterior(v, INT);
  }
  else
  {
    SetPlayerPos(playerid, x, y, z), SetPlayerFacingAngle(playerid, a);
    if(INT >= 0) SetPlayerInterior(playerid, INT);
  }
  SetCameraBehindPlayer(playerid);
  if(w == 1111 || w == 81745)
   SetPlayerVirtualWorldEX(playerid, 0);
  if(w == 19888)
  {
   SetPlayerVirtualWorldEX(playerid, 0);
   for( new www=0; www < 13; www++ ) GivePlayerWeaponEX( playerid, pWeapons[playerid][www], pAmmo[playerid][www] );
   KillTimer(ssTimer[playerid]);
   ssTimer[playerid]=-1;
  }
  if(w == 19999)
  {
   SetPlayerVirtualWorldEX(playerid, 0);
   for( new www=0; www < 13; www++ ) GivePlayerWeaponEX( playerid, pWeapons[playerid][www], pAmmo[playerid][www] );
   KillTimer(ssTimer[playerid]);
   ssTimer[playerid]=-1;
  }
  if(GetPVarInt(playerid, "GhostMode"))
  {
	SetPlayerColor(playerid, 0xFFFFFF00);
	foreach (new i : Player) ShowPlayerNameTagForPlayer(i, playerid, false);
  }

  return 1;
}


stock ShowPlayerStates(id1, id2)
{
   if(GetPVarInt(id1, "Hidden"))
   {
	new str[128];
    PlayerTextDrawSetPreviewModel(id2, pStatsTD[id1][1], 281);
	PlayerTextDrawSetString(id2, pStatsTD[id2][2], "_");
    PlayerTextDrawSetPreviewModel(id2, pStatsTD[id2][4], 19300);
	PlayerTextDrawSetString(id2, pStatsTD[id2][5], "~l~Driving Level:~w~ 0  ~l~Dealing Level:~w~ 0  ~l~Hitpoint Level:~w~ 0  ~l~Gangster Level:~w~ 0  ~l~Trucks Delivered:~w~ 0");
	PlayerTextDrawSetString(id2, pStatsTD[id2][6], "~l~LMS won:~w~ 0 ~n~~n~~l~Pools won: ~w~0 ~n~~n~~l~Drug Spliffs:~w~ 0");
	PlayerTextDrawSetString(id2, pStatsTD[id2][7], "~l~Kills: ~w~0~n~~n~~l~Deaths: ~w~0~n~~n~~l~Killing Spree Highscore: ~w~0~n~~n~~l~Current Killing Spree: ~w~0");
	PlayerTextDrawSetString(id2, pStatsTD[id2][8], "~l~Easter Eggs found: ~w~0/100~n~~n~~l~Horseshoes found: ~w~0/50~n~~n~~l~Oysters found: ~w~0/50~n~~n~~l~Graffitis: ~w~0/100");
	PlayerTextDrawSetString(id2, pStatsTD[id2][9], "~w~No gang");
	format(str, sizeof(str), "~l~Name: ~w~%s~n~~l~~n~Level: ~w~0~n~~n~~l~House: ~w~No house~n~~n~~l~Vehicle: ~w~No car", pName[id1]);
    //format(str, sizeof(str), "~l~Name: ~w~%s~n~~l~~n~Level: ~w~0~n~~n~~l~House: ~w~No house~n~~n~~l~Vehicle: ~w~No car", pName[id1], id1);
	PlayerTextDrawSetString(id2, pStatsTD[id2][10], str);
	PlayerTextDrawSetString(id2, pStatsTD[id2][11], "~l~Outrun races won: ~w~0.00~n~~n~~l~Vehicles Exported:~w~ 0~n~~n~~l~Speed Records: ~w~0~n~~n~~l~Drift Records:~w~ 0");
	PlayerTextDrawSetString(id2, pStatsTD[id2][12], "~l~Combat Level:~w~ 0   ~l~Fist Level:~w~ 0   ~l~Medicine Level:~w~ 0  ~l~Justice Level:~w~ 0  ~l~Trucking Level:~w~ 0");
	PlayerTextDrawSetString(id2, pStatsTD[id2][13], "~l~Sumos won:~w~ 0~n~~n~~l~Races won: ~w~ 0~n~~n~~l~Parkours won: ~w~ 0~n~~n~~l~Fallouts won: ~w~ 0");
	PlayerTextDrawSetString(id2, pStatsTD[id2][14], "~l~Race Records: ~w~0~n~~n~~l~Accidents: ~w~0~n~~n~~l~Derbies won: ~w~ 0~n~~n~~l~Reactiontests won:~w~ 0~n~~n~~l~CTF won:~w~ 0");
	PlayerTextDrawSetStringEX(id2, pStatsTD[id2][15], "~l~Score: ~w~3~n~~n~~l~Money: ~w~$135000~n~~n~~l~Donated: ~w~0~n~~n~~l~VIP Points: ~w~0~n~~n~~l~Ratio: ~w~0.00");
	PlayerTextDrawSetString(id2, pStatsTD[id2][16], "~l~Players beaten up: ~w~0~n~~n~~l~Duels won: ~w~0~n~~n~~l~Premium Points:~w~ 0~n~~n~~l~HeadShots:~w~ 0~n~~n~~l~Medals:~w~ 2");
	PlayerTextDrawSetString(id2, pStatsTD[id2][17], "~l~Drinks:~w~ 0~n~~n~~l~Gangwars won:~w~ 0~n~~n~~l~Gangwars lost:~w~ 0~n~~n~~l~Counter Strikes won:~w~ 0");
	PlayerTextDrawSetString(id2, pStatsTD[id2][18], "~l~Arrests:~w~ 0~n~~n~~l~Heals: ~w~0~n~~n~~l~Players Bombed: ~w~0~n~~n~~l~Online Time: ~w~ 0h & 3mins");
	PlayerTextDrawSetString(id2, pStatsTD[id2][19], "~l~Score per Hour:~w~ 0~n~~n~~l~Events won: ~w~0~n~~n~~l~Gang:");
 	for(new x=0; x<StatsTDS;x++) PlayerTextDrawShow(id2, pStatsTD[id2][x]);
	SetPVarInt(id2, "Stating", true);
   }
   else
   {
   	new str[256];
    PlayerTextDrawSetPreviewModel(id2, pStatsTD[id1][1], GetPlayerSkin(id1));
    if(!IsAdmin(id1, 1) || secondrconoff[id1] == 1 || HFA[id1] == 1) format(str, sizeof(str), "_");
	else if(IsAdmin(id1, 10)) format(str, sizeof(str), "~g~Admin Level ~r~%d", 1337);
	else format(str, sizeof(str), "~g~Admin Level ~r~%d", PlayerInfo[id1][pAdmin]);
	PlayerTextDrawSetString(id2, pStatsTD[id2][2], str);

	if(PlayerInfo[id1][pCar] > 0) PlayerTextDrawSetPreviewModel(id2, pStatsTD[id2][4], PlayerInfo[id1][pCar]);
	else PlayerTextDrawSetPreviewModel(id2, pStatsTD[id2][4], 19300);


	format(str, sizeof(str), "~l~Driving Level:~w~ %d  ~l~Dealing Level:~w~ %d  ~l~Hitpoint Level:~w~ %d  ~l~Gangster Level:~w~ %d  ~l~Trucks Delivered:~w~ %d", pLevel[id1][driving], pLevel[id1][drugdealing], pLevel[id1][hitpoint], pLevel[id1][gangster], PlayerInfo[id1][pTrucking]);
	PlayerTextDrawSetString(id2, pStatsTD[id2][5], str);

	format(str, sizeof(str), "~l~LMS won:~w~ %d ~n~~n~~l~Hays Won: ~w~%d ~n~~n~~l~Drug Spliffs:~w~ %d", PlayerInfo[id1][pWLms], PlayerInfo[id1][HayWins], PlayerInfo[id1][pDrugs]);
	PlayerTextDrawSetString(id2, pStatsTD[id2][6], str);

	format(str, sizeof(str), "~l~Kills: ~w~%d~n~~n~~l~Deaths: ~w~%d~n~~n~~l~Killing Spree Highscore: ~w~%d~n~~n~~l~Current Killing Spree: ~w~%d", PlayerInfo[id1][pKills], PlayerInfo[id1][pDeaths], PlayerInfo[id1][ksHighScore], PlayerInfo[id1][currentks]);
	PlayerTextDrawSetString(id2, pStatsTD[id2][7], str);


	format(str, sizeof(str), "~l~Easter Eggs found: ~w~%d/100~n~~n~~l~Horseshoes found: ~w~%d/50~n~~n~~l~Oysters found: ~w~%d/50~n~~n~~l~Graffitis: ~w~%d/100", CountPlayerEggs(id1), CountPlayerShoeses(id1), CountOysters(id1), CountPlayerSprays(id1));
	PlayerTextDrawSetString(id2, pStatsTD[id2][8], str);

	if(PlayerInfo[id1][pGang] > 0)	PlayerTextDrawColor(id2, pStatsTD[id2][9], PlayerColors[GangInfo[PlayerInfo[id1][pGang]][gColor]]), format(str, sizeof(str), "%s", GangInfo[PlayerInfo[id1][pGang]][Name]);
	else format(str, sizeof(str), "~w~No gang");
	PlayerTextDrawSetString(id2, pStatsTD[id2][9], str);

	new o_O[50];

    if(PlayerInfo[id1][pHouse] > 0) format(o_O, sizeof(o_O), "%s (%d)", GetOwnedHouseName(id1), PlayerInfo[id1][pHouse]);
    else format(o_O, sizeof(o_O), "No house");
	format(str, sizeof(str), "~l~Name: ~w~%s~n~~l~~n~Level: ~w~%d~n~~n~~l~House: ~w~%s~n~~n~~l~Vehicle: ~w~%s", pName[id1], calcucatetotallevel(id1), o_O, GetPlayerCarName(id1));
	//format(str, sizeof(str), "~l~Name: ~w~%s~n~~l~~n~Level: ~w~%d~n~~n~~l~House: ~w~%s~n~~n~~l~Vehicle: ~w~%s", pName[id1], id1, calcucatetotallevel(id1), o_O, GetPlayerCarName(id1));
	PlayerTextDrawSetString(id2, pStatsTD[id2][10], str);


	new Float:ratio;
	if(PlayerInfo[id1][pDeaths] != 0) ratio = floatdiv(PlayerInfo[id1][pKills], PlayerInfo[id1][pDeaths]);
	else ratio = 0;

	format(str, sizeof(str), "~l~Outrun races won: ~w~%d~n~~n~~l~Vehicles Exported:~w~ %d~n~~n~~l~Speed Records: ~w~%d~n~~n~~l~Drift Records:~w~ %d", PlayerInfo[id1][pOutRunz], PlayerInfo[id1][pExported], PlayerInfo[id1][pSpeedR], PlayerInfo[id1][pDrecord]);
	PlayerTextDrawSetString(id2, pStatsTD[id2][11], str);

	format(str, sizeof(str), "~l~Combat Level:~w~ %d   ~l~Fist Level:~w~ %d   ~l~Medicine Level:~w~ %d  ~l~Justice Level:~w~ %d  ~l~Trucking Level:~w~ %d", pLevel[id1][combat], pLevel[id1][fist], pLevel[id1][medicine], pLevel[id1][justice], GetPlayerTruckingLevel(id1));
	PlayerTextDrawSetString(id2, pStatsTD[id2][12], str);

	format(str, sizeof(str), "~l~Sumos won:~w~ %d~n~~n~~l~Races won: ~w~ %d~n~~n~~l~Parkours won: ~w~ %d~n~~n~~l~Fallouts won: ~w~ %d", PlayerInfo[id1][SumoWinz], PlayerInfo[id1][pWRace], PlayerInfo[id1][pWpOurs], PlayerInfo[id1][PfOutW]);
	PlayerTextDrawSetString(id2, pStatsTD[id2][13], str);


	format(str, sizeof(str), "~l~Race Records: ~w~%d~n~~n~~l~Accidents: ~w~%d~n~~n~~l~Derbies won: ~w~ %d~n~~n~~l~Reactiontests won:~w~ %d~n~~n~~l~CTF won:~w~ %d", PlayerInfo[id1][pRrecord], PlayerInfo[id1][vDamage], PlayerInfo[id1][pWDerby], PlayerInfo[id1][rTestWon], PlayerInfo[id1][pWCTF]);
	PlayerTextDrawSetString(id2, pStatsTD[id2][14], str);

	new Money = PlayerInfo[id1][pBank]+GetPlayerMoneyEx(id1);
	new vip[32] = "N/A";
	if(PlayerInfo[id1][IsVIP] == 1) {
		new days, hours, mins;
		new expires = PlayerInfo[id1][vipexpiresin] - gettime();
		days = expires/86400;
		expires -= days*86400;
		hours = expires/3600;
		expires -= hours*3600;
		mins = expires/60;
		format(vip, sizeof(vip), "%id, %ih, %im", days, hours, mins);
	}
	new str22[128];
	if(PlayerInfo[id1][IsVIP] == 1) format(str22, sizeof(str22), "Yes");
	else if(PlayerInfo[id1][IsVIP] == 0) format(str22, sizeof(str22), "No");
	format(str, sizeof(str), "~l~Score: ~w~%d~n~~n~~l~Money: ~w~$%d~n~~n~~l~VIP: ~w~%s~n~~n~~l~VIP Expires: ~w~%s~n~~n~~l~Ratio: ~w~%.2f", PlayerInfo[id1][pScore], Money, str22, vip, ratio);
	PlayerTextDrawSetStringEX(id2, pStatsTD[id2][15], str);

	//new Money = PlayerInfo[id1][pBank]+GetPlayerMoneyEx(id1);
//	format(str, sizeof(str), "~l~Score: ~w~%d~n~~n~~l~Money: ~w~$%d~n~~n~~l~Donated: ~w~%d~n~~n~~l~VIP Points: ~w~%d~n~~n~~l~Ratio: ~w~%.2f", PlayerInfo[id1][pScore], Money, PlayerInfo[id1][IsVIP], PlayerInfo[id1][pVip], ratio);
//	PlayerTextDrawSetStringEX(id2, pStatsTD[id2][15], str);

	format(str, sizeof(str), "~l~Players beaten up: ~w~%d~n~~n~~l~Duels won: ~w~%d~n~~n~~l~Premium Points:~w~ %d~n~~n~~l~HeadShots:~w~ %d~n~~n~~l~Medals:~w~ %d", PlayerInfo[id1][pBeatUp], PlayerInfo[id1][pWDuel], PlayerInfo[id1][pCook], PlayerInfo[id1][HS], GetPlayerMedalsCount(id1));
	PlayerTextDrawSetString(id2, pStatsTD[id2][16], str);

	format(str, sizeof(str), "~l~Drinks:~w~ %d~n~~n~~l~Gangwars won:~w~ %d~n~~n~~l~Gangwars lost:~w~ %d~n~~n~~l~Counter Strikes won:~w~ %d", PlayerInfo[id1][Drunk], PlayerInfo[id1][pGWinz], PlayerInfo[id1][pGWlost], PlayerInfo[id1][CSWins]);
	PlayerTextDrawSetString(id2, pStatsTD[id2][17], str);

	format(str, sizeof(str), "~l~Arrests:~w~ %d~n~~n~~l~Heals: ~w~%d~n~~n~~l~Players Bombed: ~w~%d~n~~n~~l~Online Time: ~w~ %dh & %dmins", PlayerInfo[id1][Arrests], PlayerInfo[id1][Heals], PlayerInfo[id1][pBombed], PlayerInfo[id1][pHours], PlayerInfo[id1][pMins]);
	PlayerTextDrawSetString(id2, pStatsTD[id2][18], str);

	new sINh;
	if(PlayerInfo[id1][pHours] < 1) sINh = 0;
	else sINh=floatround(PlayerInfo[id1][pScore]/PlayerInfo[id1][pHours]);

	format(str, sizeof(str), "~l~Score per Hour:~w~ %d~n~~n~~l~Events won: ~w~%d~n~~n~~l~Gang: ~w~%d", sINh, PlayerInfo[id1][pEventWon]);
	PlayerTextDrawSetString(id2, pStatsTD[id2][19], str);

 	for(new x=0; x<StatsTDS;x++) PlayerTextDrawShow(id2, pStatsTD[id2][x]);
	SetPVarInt(id2, "Stating", true);
   }
   return 1;

}
forward ClearHitId(playerid);
public ClearHitId(playerid)
{
   SetPVarInt(playerid, "lasthit", -255);
   if(SumoLastHitTimer[playerid] > 0) KillTimer(SumoLastHitTimer[playerid]);
   return 1;
}


public OnVehicleDamageStatusUpdate(vehicleid, playerid)
{
    if(Iter_Contains(InSumo, playerid))
    {
	  foreach(new i : Player)
	  {

		   if(IsPlayerInRangeOfPlayer(playerid, i, 12.0))
		   {
			if(playerid != i)
			{
             SetPVarInt(playerid, "lasthit", i);
             SumoLastHitTimer[playerid]=SetTimerEx("ClearHitId", 5000, false, "i", playerid);
			 break;
			}
		   }
	  }
    }
    #if defined USEDRIFT
    if(Iter_Contains(Drifter, playerid))
    {
      if(pDrift[playerid]>0) EndDrift(playerid, 1);
    }
    #endif

	new Float:v;
	GetVehicleHealth(vehicleid, v);

	if(floatround(v) < 950)
	{
      if(GetPVarInt(playerid, "Trucker") == 2 && GetVehicleModel(vehicleid) == 455)
      {
           BombPlayer(playerid, 0, 10.0);
      }
      if ( ( GetTickCount() - TickCount[playerid][vDamage] < 15000 )) return 0;
      TickCount[playerid][vDamage] = GetTickCount();
      PlayerInfo[playerid][vDamage]++;
      if(PlayerInfo[playerid][vDamage] == 1000) GiveMedal(playerid, 33);
      if((PlayerInfo[playerid][Mission] == 3 && GetPVarInt(playerid, "MissionProgress") > 8)
      || (PlayerInfo[playerid][Mission] == 5 && GetPVarInt(playerid, "MissionProgress") == 2) )
      {
           SendInfoText(playerid, 4000, "~r~Mission Failed");
           DisablePlayerCheckpoint(playerid);
           DeletePVar(playerid, "MissionProgress");
           PlayerTextDrawHide(playerid, pMissionTD[playerid]);

           TogglePlayerAllDynamicRaceCPs(playerid, true);

           if(PlayerInfo[playerid][Mission] == 3) BombPlayer(playerid, 0, 10.0);
	       for(new ad=0; ad<28; ad++) DestroyPlayerObject(playerid, MissionObjects[playerid][ad]);
           for(new ad=0; ad<sizeof(MissionPickup); ad++) Streamer_RemoveArrayData(STREAMER_TYPE_PICKUP , MissionPickup[ad], E_STREAMER_PLAYER_ID, playerid);
           for(new ad=0; ad<sizeof(MissionCP); ad++) Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[ad], E_STREAMER_PLAYER_ID, playerid), TogglePlayerDynamicCP(playerid, MissionCP[ad], false);
       }
	}
    return 1;
}
public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
    ShowPlayerStates(clickedplayerid, playerid);
	return 1;
}
stock GetOwnedHouseName(playerid)
{
 new hname[56];
 if(PlayerInfo[playerid][pHouse] > 0)
 {
  format(hname, sizeof(hname), "%s", hInfo[PlayerInfo[playerid][pHouse]][Name]);
 }
 else format(hname, sizeof(hname), "No house");
 return hname;
}


stock GetPlayerCarName(playerid)
{
 new str[24];
 if(PlayerInfo[playerid][pCar] <= 0) format(str, sizeof(str), "No car");
 else format(str, sizeof(str), "%s", vInfo[PlayerInfo[playerid][pCar]-400][vName]);
 return str;
}

stock GetPlayerJob(playerid)
{
	new str[24];
	switch(Job[playerid])
	{
		case 0: format(str, 24, "Civilian");
		case 1: format(str, 24, "Medic");
		case 2: format(str, 24, "Cop");
		case 3: format(str, 24, "Hitman");
		case 4: format(str, 24, "Mechanic");
		case 5: format(str, 24, "Dealer");
		case 6: format(str, 24, "Terrorist");
		case 7: format(str, 24, "Whore");
		case 8: format(str, 24, "Trucker");
	}
	return str;
}
stock GetPlayerVIPJob(playerid)
{
	new str[24];
	switch(PlayerInfo[playerid][pVipJob])
	{
		case 0: format(str, 24, "Civilian");
		case 1: format(str, 24, "Medic");
		case 2: format(str, 24, "Cop");
		case 3: format(str, 24, "Hitman");
		case 4: format(str, 24, "Mechanic");
		case 5: format(str, 24, "Dealer");
		case 6: format(str, 24, "Terrorist");
		case 7: format(str, 24, "Whore");
		case 8: format(str, 24, "Trucker");
	}
	return str;
}


stock IsInBank(playerid)
{
	if(IsPlayerInDynamicArea(playerid, BankArea[0])
	|| IsPlayerInDynamicArea(playerid, BankArea[1])
	|| IsPlayerInDynamicArea(playerid, BankArea[2]))
	return 1;
    else return 0;
}
stock IsvalidWeapon(s_weapon)
{
   new s_Type=0;
   switch(s_weapon)
   {
	  case 18, 35, 36, 37, 38: s_Type = 2;
	  case 1..17: s_Type =1;
	  case 22..34:s_Type=1;
	  case 39..46:s_Type=1;
	  default: s_Type = 0;
   }
   //2 --> not allowed weapon
   //1 --> valid
   //0 --> invalid
   return s_Type;
}
stock IsPlayerInAmmunation(playerid)
{
    new Float: Ammunation_Coordinates[][3] =
	{
    { 286.148986, -40.644397, 1001.515625 },
    { 286.800994, -82.547599, 1001.515625 },
    { 296.919982, -108.071998, 1001.515625 },
    { 314.820983, -141.431991, 999.601562 },
    { 316.524993, -167.706985, 999.593750 }};
    for(new i = 0; i < sizeof(Ammunation_Coordinates); i++)
	{
      if(GetPlayerVirtualWorld(playerid) == 0 && IsPlayerInRangeOfPoint(playerid, 70.0, Ammunation_Coordinates[i][0], Ammunation_Coordinates[i][1], Ammunation_Coordinates[i][2])) return 1;
    }
    return 0;
}

public OnPlayerPause(playerid)
{
#if defined USEDRIFT

    if((GetPVarInt(playerid, "Drifter")) == 2)
    {
		new vehicleid = GetPlayerVehicleID(playerid);
		GameTextForPlayer(playerid, "~r~Failed", 5000, 5);
		TogglePlayerControllable2(playerid, 0);
        Iter_Remove(Drifter, playerid);
		ShowMenuForPlayer(DriftMenu, playerid);
		if(AdminCar[vehicleid] ==1)
		{
		  AdminCar[vehicleid] =0;
		  DestroyVehicleEX(vehicleid);
		}
    }
#endif
    return 1;
}
public OnPlayerUnPause(playerid)
{
  if(GetPVarInt(playerid, "SumoPause"))
  {
	  DeletePVar(playerid, "SumoPause");
  }
  return 1;
}/*
forward OnPlayerCleoDetected(playerid, cleoid);
public OnPlayerCleoDetected( playerid, cleoid )
{
  if(!IsPlayerNPC(playerid) && !posSYNC [playerid][sSyncTime])
  {
    switch( cleoid )
    {
        case CLEO_FAKEKILL:
        {
	       new string[128];
		   format(string, sizeof(string), "{3BB023}» Admin action « {ABFF85}Admin Jonny has banned %s (%d) (Reason: Fake Kill)", pName[playerid], playerid);
	       SendClientMessageToAll(AdminInfo, string);
           BanEX(playerid, "Fake Kill", -255);
        }
        case CLEO_CAR_INVALID_MOD:
        {
              KickEX(playerid, "Invalid mods", -255);
        }
    }
  }
  return 1;
}
*/
forward OnPlayerCleoDetected(playerid, cleoid);
public OnPlayerCleoDetected( playerid, cleoid )
{
  if(!IsPlayerNPC(playerid) && !posSYNC [playerid][sSyncTime])
  {
    switch( cleoid )
    {
        case CLEO_FAKEKILL:
        {
	       new string[128];
		   format(string, sizeof(string), "{3BB023}» Admin action « {ABFF85}Admin Jonny has banned %s (%d) (Reason: Fake Kill)", pName[playerid], playerid);
	       SendClientMessageToAll(AdminInfo, string);
	       new str2[128];
           format(str2, sizeof(str2), "-Ban- Admin Jonny has banned %s (%d) (Reason: Fake Kill)", pName[playerid], playerid);
           printf("%s", str2);
           BanEX(playerid, "Fake Kill", -255);
        }
        case CLEO_CARWARP:
        {
              if(GetPlayerVirtualWorld(playerid) == 0 && Spawned[playerid] == 1) KickEX(playerid, "Car Warp", -255);
        }
        case CLEO_CARSWING:
        {
              if(GetPlayerVirtualWorld(playerid) == 0 && Spawned[playerid] == 1 && PlayerInfo[playerid][pScore] < 50 && !IsAdmin(playerid, 2)) KickEX(playerid, "Car Swing", -255);
        }
        case CLEO_CAR_PARTICLE_SPAM:
        {
              if(GetPlayerVirtualWorld(playerid) == 0 && Spawned[playerid] == 1) KickEX(playerid, "Car Particle Spam", -255);
        }
        case CLEO_CAR_INVALID_MOD:
        {
              KickEX(playerid, "Invalid mods", -255);
        }
    }
  }
  return 1;
}
forward OnPlayerAirbreak(playerid);
public OnPlayerAirbreak(playerid)
{
  if(IsPlayerConnected(playerid))
  {
    if(!IsAdmin(playerid, 1))
    {
        pAirBreakWarned[playerid]++;
	    new string[128];
        format(string, sizeof(string), "{FF9EEC}Jonny:{12B7A5} %s (%d) has been suspected for Airbreak (Warning %d/2)", pName[playerid], playerid, pAirBreakWarned[playerid]);
        foreach (new i : Player) if(IsAdmin(i, 1)) SendClientMessage(i, 0x1AFF00FF, string), PlayerPlaySound(i, 3201, 0.0, 0.0, 0.0), PlayCrimeReportForPlayer(i, i, 15);
		new str3[128];
        format(str3, sizeof(str3), "-Suspected- Jonny: %s (%d) has been suspected for Airbreak (Warning %d/2)", pName[playerid], playerid, pAirBreakWarned[playerid]);
        printf("%s", str3);
		/*if(pAirBreakWarned[playerid] >= 2)
		{
          BanEX(playerid, "Airbreak", -255);
		  format(string, sizeof(string), "{3BB023}» Admin action « {ABFF85}Admin Jonny has banned %s (%d) (Reason: Airbreak)", pName[playerid], playerid);
	      SendClientMessageToAll(AdminInfo, string);
      	  new str2[128];
          format(str2, sizeof(str2), "-Ban- Admin Jonny has banned %s (%d) (Reason: Airbreak)", pName[playerid], playerid);
          printf("%s", str2);
		}*/
	}
  }
  return 1;
}
/*forward OnPlayerFloodControl(playerid, iCount, iTimeSpan);
public OnPlayerFloodControl(playerid, iCount, iTimeSpan)
{
  if(iCount > 2 && iTimeSpan < 8000 && !IsPlayerNPC(playerid))
  {
       BanEX(playerid, "Flood bots", -255);
       new string[128];
  	   new name[MAX_PLAYER_NAME];
	   GetPlayerName(playerid, name, MAX_PLAYER_NAME);

	   format(string, sizeof(string), "{3BB023}» Admin action « {ABFF85}Admin Jonny has banned %s (%d) (Reason: Flood bots)", name, playerid);
       SendClientMessageToAll(AdminInfo, string);
  }
  return 1;
}*/
forward OnPlayerSpeedHack(playerid, vehicleid, speed);
public OnPlayerSpeedHack(playerid, vehicleid, speed)
{
  if(IsPlayerConnected(playerid) && !IsAdmin(playerid, 2))
  {
   if(!IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
   {
    if(!posSYNC [playerid][sSyncTime] && !IsAPlane(vehicleid) && GetPlayerState(playerid) == 2 && GetPlayerVirtualWorld(playerid) != 19888 && GetPlayerVirtualWorld(playerid) != 19999 && !GetPVarInt(playerid, "instunt") && InCanon[playerid] == 0)//&& GetPlayerVirtualWorld(playerid) == 0)
    {
	    new string[128];
	    pSpeedWarned[playerid]++;
        format(string, sizeof(string), "{FF9EEC}Jonny:{12B7A5} %s (%d) has been suspected for Speed Hack (%s - %d KM/H)", pName[playerid], playerid, vInfo[GetVehicleModel(vehicleid)-400][vName], speed);
        foreach (new i : Player) if(IsAdmin(i, 1)) SendClientMessage(i, 0x1AFF00FF, string), PlayerPlaySound(i, 3201, 0.0, 0.0, 0.0), PlayCrimeReportForPlayer(i, i, 15);
		TogglePlayerControllable2(playerid, 0);
		SetTimerEx("WarningUnfreeze", 2000, false, "dd", playerid, GetPlayerVirtualWorld(playerid));
		new str22[128];
        format(str22, sizeof(str22), "-Suspected- Jonny: %s (%d) has been suspected for Speed Hack (%s - %d KM/)", pName[playerid], playerid, vInfo[GetVehicleModel(vehicleid)-400][vName], speed);
        printf("%s", str22);
	}
	if(pSpeedWarned[playerid] >= 3)
	{
       BanEX(playerid, "Speed Hack", -255);
       new string[128];
	   format(string, sizeof(string), "{3BB023}» Admin action « {ABFF85}Admin Jonny has banned %s (%d) (Reason: Speed Hack)", pName[playerid], playerid);
       SendClientMessageToAll(AdminInfo, string);
   	   new str2[128];
       format(str2, sizeof(str2), "-Ban- Admin Jonny has banned %s (%d) (Reason: Speed Hack)", pName[playerid], playerid);
       printf("%s", str2);
	}
   }
  }
  return 1;
}

forward OnPlayerTeleportHack(playerid);
public OnPlayerTeleportHack(playerid)
{
  if(IsPlayerConnected(playerid))
  {
    if(GetPlayerVirtualWorld(playerid) < 100)
    {
     if (GetPlayerSurfingVehicleID (playerid) == INVALID_VEHICLE_ID)
     {
	   new wstate=GetPlayerState(playerid);
	   if(wstate != 9 && wstate != PLAYER_STATE_PASSENGER )
	   {
		new locstr[64];
		new x = GetPlayerGangZone(playerid);
		if(x != -255) format(locstr, sizeof(locstr), "%s", gSAZones[x][SAZONE_NAME]);
		else format(locstr, sizeof(locstr), "Unknown");

	    new string[128];
	    format(string, sizeof(string), "{FF9EEC}Jonny:{12B7A5} %s (%d) has been suspected for Teleport Hack (%s)", pName[playerid], playerid, locstr);
	    foreach (new i : Player) if(IsAdmin(i, 1)) SendClientMessage(i, 0x1AFF00FF, string), PlayerPlaySound(i, 3201, 0.0, 0.0, 0.0), PlayCrimeReportForPlayer(i, i, 15);
    	new str22[128];
        format(str22, sizeof(str22), "-Suspected- Jonny: %s (%d) has been suspected for Teleport Hack (%s)", pName[playerid], playerid, locstr);
        printf("%s", str22);
   	    pTeleportWarned[playerid]++;
   	   }
       if(pTeleportWarned[playerid] >= 3 && PlayerInfo[playerid][pScore] < 100)
       {
         BanEX(playerid, "Teleport Hack", -255);
         new string[128];
         format(string, sizeof(string), "{3BB023}» Admin action « {ABFF85}Admin Jonny has banned %s (%d) (Reason: Teleport Hack)", pName[playerid], playerid);
         SendClientMessageToAll(AdminInfo, string);
         new str2[128];
         format(str2, sizeof(str2), "-Ban- Admin Jonny has banned %s (%d) (Reason: Teleport Hack)", pName[playerid], playerid);
         printf("%s", str2);
	   }
     }
    }
  }
  return 1;
}

/*stock IsPlayerInMarketArea(playerid)
{
 if(IsPlayerInDynamicArea(playerid, MarketArea)) return 1;
 return 0;
}

stock IsPlayerInMarketArea2(playerid)
{
 if(IsPlayerInDynamicArea(playerid, MarketArea2)) return 1;
 return 0;
}*/

#if defined USEDRIFT
forward DriftTimer();
public DriftTimer()
{
  foreach(new playerid : Drifter) DriftUpdate(playerid);
  return 1;
}
#endif
stock IsInOthersHouse(playerid)
{
   if(InHouse[playerid] > 0 && InHouse[playerid] != PlayerInfo[playerid][pHouse]) return 1;
   return 0;
}
public OnPlayerUpdate(playerid)
{
#if defined USE_POOL
    BillardUpdate(playerid);
#endif
//Reset Weapons in gangwar

	new zza=pGz[playerid];
    if(zza > 0)
    {
	   if(GetPlayerVirtualWorld(playerid) == 0)
	   {
		 if(aZone[zza] > 0)
		 {
			 new gang=PlayerInfo[playerid][pGang];
			 if(gang > 0)
			 {
			  if(inGw[gang] == 0 || (inGw[gang] > 0 && GwTurf[gang] !=zza && GetPlayerVirtualWorld(playerid) == 0 && !GetPVarInt(gang, "induel") && !GetPVarInt(playerid, "induel")))
			  {
		     	  SetPlayerArmedWeapon(playerid, 0);
			  }
			 }
			 else SetPlayerArmedWeapon(playerid, 0);
		 }
	   }
    }

//
    if (posSYNC [playerid][sSyncTime])
    {
        if (g_Paused[playerid] - posSYNC [playerid][sLastSyncUpdate] > 1000)
        {
            posSYNC [playerid][sSyncTime]--;
            posSYNC [playerid][sLastSyncUpdate] = g_Paused[playerid];
        }
    }
    if(IsInOthersHouse(playerid) || (RaceStarted ==0 && IsPlayerInRangeOfPoint(playerid, 40.0, RaceInfo[RaceIDCount][StartCP][0], RaceInfo[RaceIDCount][StartCP][1], RaceInfo[RaceIDCount][StartCP][2])))
    {
	  SetPlayerArmedWeapon(playerid, 0);
    }
    else if(IsPlayerInAmmunation(playerid) || IsInBank(playerid) )
    {
     if(!GetPVarInt(playerid, "INDM"))
     {
	  SetPlayerArmedWeapon(playerid, 0);
	  new Float:k=GetPVarFloat(playerid, "bHealth");
	  new Float:kk=GetPVarFloat(playerid, "bArmour");
	  new Float:h, Float:a;
	  GetPlayerHealth(playerid, h);
	  GetPlayerArmour(playerid, a);
	  if(h < k) SetPlayerHealth(playerid, k);
	  if(a < kk) SetPlayerArmour(playerid, kk);
	 }
  	}
	else if(Footballer[playerid] == 1 || Footballer[playerid] == 2 && AllowPlaying == 1)
	{

        if((DisableAutoShoot < 1) && (GetTickCount() - TickCount[playerid][lastfp] > 800))
        {
			 new Float:x, Float:y, Float:z;
			 GetDynamicObjectPos(football, x, y, z);
			 if(IsPlayerInRangeOfPoint(playerid, 1.0, x, y, z))
			 {
                TickCount[playerid][lastfp]= GetTickCount();
				new Float:ppos[3], Float:Rot[3];
				ApplyAnimation(playerid, "FIGHT_D", "FightD_1", 4.1, 0, 1, 1, 0, 0);
	 	    	GetPlayerPos(playerid, ppos[0], ppos[1], ppos[2]);
				GetXYInFrontOfPlayer(playerid, ppos[0], ppos[1], 7.0);
				MoveDynamicObject(football, ppos[0], ppos[1], 10.300, 10.0, Rot[0], Rot[1], Rot[2]+90);
				PlayerPlaySound(playerid, 1130, 0.0, 0.0, 0.0);
				fLastPlayer=playerid;
			 }
        }
	}
  	else if(InCanon[playerid] == 1)
  	{
		if(IsPlayerInDynamicArea(playerid, lecanonarea[2]) && !IsPlayerInDynamicArea(playerid, lecanonarea[1]))
		{
			new castr[90],
			Float: fDistance = GetPlayerDistanceFromPoint(playerid, -22.3058, 2502.3088, 15.9330);
			format(castr, 90, "~r~Distance:~y~ %f", fDistance);
			PlayerTextDrawSetStringEX(playerid, pInfoTD[playerid], castr);
			PlayerTextDrawShow(playerid, pInfoTD[playerid]);
		}
  	}
  	else if(InDive[playerid] > 0)
  	{
		new str1[128];
		new str2[128];
		GetAnimationName(GetPlayerAnimationIndex(playerid), str1, 32, str2, 32);
		if(strfind(str2, "PARA", true) != -1)
		{
           ResetPlayerWeaponsEX(playerid);
		}
		if(IsPlayerInAnyVehicle(playerid)) RemovePlayerFromVehicle(playerid);
  	}

    if(RaceStarted ==1 && GetPVarInt(playerid, "RACER"))
    {
      new str[50];
      format(str, sizeof(str), "Time: ~h~~h~%s", ConvertTime2(GetTickCount() - RaceTicks));
      PlayerTextDrawSetStringEX(playerid, pRaceTD[playerid][6], str);
    }
    if(PourStat ==1 && GetPVarInt(playerid, "pOur"))
    {
      new str[35];
      format(str, sizeof(str), "~y~%s", ConvertTime(GetTickCount() - pOurTickCount));
      PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][5], str);
	}
    if(STUNTING[playerid] == 1)
    {
		new str[35];
		format(str, sizeof(str), "~n~~n~~n~~y~Time:~w~ %s", ConvertTime(GetTickCount() - STUNTTk[playerid]));
		PlayerTextDrawSetStringEX(playerid, pInfoTD[playerid], str);
		PlayerTextDrawShow(playerid, pInfoTD[playerid]);
    }
    if(GetPlayerMoney(playerid) != pMoney[playerid])
    {
       ResetPlayerMoney(playerid);
  	   GivePlayerMoney(playerid, pMoney[playerid]);
    }
//==============================Holding Weapons================================//
    //new hideweaps=0;
    //if(hideweaps == 0 && GetTickCount() - armedbody_pTick[playerid] > 113)
    if(GetTickCount() - armedbody_pTick[playerid] > 113)
    { //prefix check itter
		new
			weaponid[13], weaponammo[13], pArmedWeapon;
		pArmedWeapon = GetPlayerWeapon(playerid);
		GetPlayerWeaponData(playerid, 1, weaponid[1], weaponammo[1]);
		GetPlayerWeaponData(playerid, 2, weaponid[2], weaponammo[2]);
		GetPlayerWeaponData(playerid, 4, weaponid[4], weaponammo[4]);
		GetPlayerWeaponData(playerid, 5, weaponid[5], weaponammo[5]);
		if(weaponid[1] && weaponammo[1] > 0 && weaponid[1] != 9){
			if(pArmedWeapon != weaponid[1]){
				if(!IsPlayerAttachedObjectSlotUsed(playerid, 6)){
					SetPlayerAttachedObject(playerid, 6, GetWeaponModel(weaponid[1]), 1, 0.199999, -0.139999, 0.030000, 0.500007, -115.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				}
			}
			else {
				if(IsPlayerAttachedObjectSlotUsed(playerid, 6)){
					RemovePlayerAttachedObject(playerid, 6);
				}
			}
		}
		else if(IsPlayerAttachedObjectSlotUsed(playerid, 6)){
			RemovePlayerAttachedObject(playerid, 6);
		}

		if(weaponid[2] && weaponammo[2] > 0){
			if(pArmedWeapon != weaponid[2]){
				if(!IsPlayerAttachedObjectSlotUsed(playerid, 7)){
					SetPlayerAttachedObject(playerid, 7, GetWeaponModel(weaponid[2]), 8, -0.079999, -0.039999, 0.109999, -90.100006, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				}
			}
			else {
				if(IsPlayerAttachedObjectSlotUsed(playerid, 7)){
					RemovePlayerAttachedObject(playerid, 7);
				}
			}
		}
		else if(IsPlayerAttachedObjectSlotUsed(playerid, 7)){
			RemovePlayerAttachedObject(playerid, 7);
		}
		if(weaponid[4] && weaponammo[4] > 0){
			if(pArmedWeapon != weaponid[4]){
				if(!IsPlayerAttachedObjectSlotUsed(playerid, 8)){
					SetPlayerAttachedObject(playerid, 8, GetWeaponModel(weaponid[4]), 7, 0.000000, -0.100000, -0.080000, -95.000000, -10.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				}
			}
			else {
				if(IsPlayerAttachedObjectSlotUsed(playerid, 8)){
					RemovePlayerAttachedObject(playerid, 8);
				}
			}
		}
		else if(IsPlayerAttachedObjectSlotUsed(playerid, 8)){
			RemovePlayerAttachedObject(playerid, 8);
		}
		if(weaponid[5] && weaponammo[5] > 0){
			if(pArmedWeapon != weaponid[5]){
				if(!IsPlayerAttachedObjectSlotUsed(playerid, 9)){
					SetPlayerAttachedObject(playerid, 9, GetWeaponModel(weaponid[5]), 1, 0.200000, -0.119999, -0.059999, 0.000000, 206.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				}
			}
			else {
				if(IsPlayerAttachedObjectSlotUsed(playerid, 9)){
					RemovePlayerAttachedObject(playerid, 9);
				}
			}
		}
		else if(IsPlayerAttachedObjectSlotUsed(playerid, 9)){
			RemovePlayerAttachedObject(playerid, 9);
		}
		armedbody_pTick[playerid] = GetTickCount();
	}
//==============================================================================
    return 1;
}
stock ResetPlayerWeaponsEX(playerid)
{
	 ResetPlayerWeapons(playerid);
     if(IsPlayerAttachedObjectSlotUsed(playerid, 6)) RemovePlayerAttachedObject(playerid, 6);
     if(IsPlayerAttachedObjectSlotUsed(playerid, 7)) RemovePlayerAttachedObject(playerid, 7);
     if(IsPlayerAttachedObjectSlotUsed(playerid, 8)) RemovePlayerAttachedObject(playerid, 8);
     if(IsPlayerAttachedObjectSlotUsed(playerid, 9)) RemovePlayerAttachedObject(playerid, 9);
}
stock GivePlayerWeaponEX(playerid, weaponW, ammoW)
{
     if(ammoW > 0 )
     {
       if(IsvalidWeapon(weaponW) == 2)
       {
	     if(GetPlayerVirtualWorld(playerid) != 0) GivePlayerWeapon(playerid, weaponW, ammoW);
       }
       else GivePlayerWeapon(playerid, weaponW, ammoW);
     }
     return 1;
}

stock GetPlayerSpeed (playerid, get3d)
{
	new Float: x, Float: y, Float: z;
	if (IsPlayerInAnyVehicle (playerid)) GetVehicleVelocity (GetPlayerVehicleID (playerid), x, y, z);
	else GetPlayerVelocity (playerid, x, y, z);
	return floatround(floatsqroot((get3d)?(x*x+y*y+z*z):(x*x+y*y))*100.0*1.6);
}



stock ShowScoreTD(playerid)
{
    new sSTR[15];
    new ascore = PlayerInfo[playerid][pScore];
	if((ascore >= 0) && (ascore <= 9)) format(sSTR, 15, "S0000000%d", ascore);
	else if((ascore >= 10) && (ascore <= 99)) format(sSTR, 15, "S000000%d", ascore);
	else if((ascore >= 100) && (ascore <= 999)) format(sSTR, 15, "S00000%d", ascore);
	else if((ascore >= 1000) && (ascore <= 9999)) format(sSTR, 15, "S0000%d", ascore);
	else if((ascore >= 10000) && (ascore <= 99999)) format(sSTR, 15, "S000%d", ascore);
	else if((ascore >= 100000) && (ascore <= 999999)) format(sSTR, 15, "S00%d", ascore);
	else if((ascore >= 1000000) && (ascore <= 9999999)) format(sSTR, 15, "S0%d", ascore);
	else format(sSTR, 15, "S%d", ascore);
    PlayerTextDrawSetStringEX(playerid, ScoreTD[playerid], sSTR);
    if(HideShit[playerid] == 0) PlayerTextDrawShow(playerid, ScoreTD[playerid]);

}
stock ScoreTDupdate(playerid, score)
{
    PlayerInfo[playerid][pScore]= PlayerInfo[playerid][pScore] + score;
    PlayerInfo[playerid][inScore]= PlayerInfo[playerid][inScore] + score;
    ShowScoreTD(playerid);
    if((GetPVarInt(playerid, "LOGGED")) != 2)
    {
	  new Query[128];
 	  format(Query, sizeof(Query), "UPDATE `users` SET `Score` = %d WHERE `Name` = '%s'", PlayerInfo[playerid][pScore], pEscName[playerid]);
	  mysql_query(GTADM, Query);
	}
	if(PlayerInfo[playerid][inScore] >= 500) GiveMedal(playerid, 67);
    return 1;

}

stock GetFreeGangID()
{
  new count = -255;
  for(new g=1; g<MAX_GANGS;g++)
  {
	  if(GangInfo[g][gMembers] == 0)
	  {
		 count = g;
		 break;
	  }
  }
  return count;
}
stock CountGangZones(gangid)
{
   new count = 0;
   for(new x=0; x<sizeof(gSAZones); x++)
   {
	  if(ZoneOwner[x] == gangid)
	  count++;
   }
   return count;
}

forward GangWarTime(gang, attackedgang, base);
public GangWarTime(gang, attackedgang, base)
{
	new zone=GwTurf[gang];
   	GangZoneFlashForAll(GangZoneid[zone], PlayerColors[GangInfo[gang][gColor]]);
    if( GwEndON[gang] == 1) GwEndTime[gang]--;
    GwTime[gang][1]--;
	if(GwTime[gang][1] < 0) GwTime[gang][0]--, GwTime[gang][1] = 59;

	new str[100];
	new TotalCount1;
	new TotalCount2;
	new InCount;
	new attackedcount;
	new attackingcount;
	new Float:GwHealth1;
	new Float:GwHealth2;
	new Float:GwArmour1;
	new Float:GwArmour2;

	foreach(new i : Player)
	{
		 if(PlayerInfo[i][pGang] == gang)
		 {
		   TotalCount1++;
		   if(pInGW[i]==1)
		   {
			  new Float:h;
			  new Float:a;
			  GetPlayerHealth(i, h);
			  GetPlayerArmour(i, a);
			  GwHealth1=GwHealth1+h;
			  GwArmour1=GwArmour1+a;
	          attackingcount++;
		   }
		 }
		 else if(PlayerInfo[i][pGang] == attackedgang)
		 {
		   TotalCount2++;
		   if(pInGW[i]==1)
		   {
			   InCount++;
			   new Float:h;
			   new Float:a;
			   GetPlayerHealth(i, h);
			   GetPlayerArmour(i, a);
			   GwHealth2=GwHealth2+h;
			   GwArmour2=GwArmour2+a;
			   attackedcount++;
		   }
		 }
	}
	foreach(new i : Player)
	{
		 if((PlayerInfo[i][pGang] == gang) || (PlayerInfo[i][pGang] == attackedgang))
		 {
		   new zz=GetPlayerGangZone(i);
		   if(GwEndON[gang] == 1 )
		   {
			 if((PlayerInfo[i][pGang] == attackedgang) || (PlayerInfo[i][pGang] == gang) )
			 {
	              if(InCW[i] < 1 && !GetPVarInt(i, "RACER"))
	              {
			       format(str, sizeof(str), "- ~r~ Defending Time: %d", GwEndTime[gang]);
				   PlayerTextDrawSetStringEX(i, pInfoTD[i], str);
				   PlayerTextDrawShow(i, pInfoTD[i]);
				  }
			 }
 		   }
		   else if(GwEndON[gang] == 2) PlayerTextDrawHide(i, pInfoTD[i]);
		   if((zz == zone) && (GetPlayerState(i) != 7))
		   {
			   pInGW[i]=1;
			   if(IsPlayerInAnyVehicle(i) && !GetPVarInt(i, "RACER") && !GetPVarInt(i, "pOur"))
			   {
                  RemovePlayerFromVehicle(i);
				  new m=GetVehicleModel(GetPlayerVehicleID(i));
				  if(m == 501 || m== 464 || m== 441 || m== 465|| m== 564)
				  {
					  new Float:x, Float:y, Float:z;
					  GetPlayerPos(i, x, y, z);
					  SetPlayerPos(i, x, y, z+1);
				  }


			   }
			   if(g_IsPaused[i] == true && Pauseda[i] >= 10 && IsSpecing[i] == 0) KickEX(i, "ESC in Gangwar", -255);
			   else if(GetPVarInt(i, "AFK")) KickEX(i, "AFK in GangWar", -255);
		   }
		   if(InCW[i] < 1 && !GetPVarInt(i, "RACER") && !GetPVarInt(i, "Connectted"))
		   {
			   format(str, sizeof(str), "Kills: ~w~%d", pGwKills[i]);
			   PlayerTextDrawSetStringEX(i, GwTD[i][3], str);
			   format(str, sizeof(str), "Deaths: ~w~%d", pGwDeaths[i]);
			   PlayerTextDrawSetStringEX(i, GwTD[i][5], str);
			   if(GwTime[gang][0] == 0 && GwTime[gang][1] < 31)  format(str, sizeof(str), "~r~%s%d:%s%d", (GwTime[gang][0] < 10) ? ("0") : (""), GwTime[gang][0], (GwTime[gang][1] < 10) ? ("0") : (""), GwTime[gang][1]);
			   else format(str, sizeof(str), "%s%d:%s%d", (GwTime[gang][0] < 10) ? ("0") : (""), GwTime[gang][0], (GwTime[gang][1] < 10) ? ("0") : (""), GwTime[gang][1]);
			   PlayerTextDrawSetStringEX(i, GwTD[i][6], str);
			   format(str, sizeof(str), "%d / %d", attackingcount, TotalCount1);
			   PlayerTextDrawSetStringEX(i, GwTD[i][12], str);
			   format(str, sizeof(str), "%d / %d", attackedcount, TotalCount2);
			   PlayerTextDrawSetStringEX(i, GwTD[i][23], str);
			   format(str, sizeof(str), "%d", floatround(GwHealth2+GwArmour2));
			   PlayerTextDrawSetStringEX(i, GwTD[i][18], str);
			   format(str, sizeof(str), "%d", floatround(GwHealth1+GwArmour1));
			   PlayerTextDrawSetStringEX(i, GwTD[i][19], str);
			   PlayerTextDrawSetStringEX(i, GwTD[i][21], GangInfo[gang][Name]);
			   PlayerTextDrawSetStringEX(i, GwTD[i][17], GangInfo[attackedgang][Name]);
			   format(str, sizeof(str), "~b~%d", GwKills[gang]);
			   PlayerTextDrawSetStringEX(i, GwTD[i][22], str);
			   format(str, sizeof(str), "~g~%d", GwKills[attackedgang]);
			   PlayerTextDrawSetStringEX(i, GwTD[i][20], str);
			   for(new x=0; x<26; x++) PlayerTextDrawShow(i, GwTD[i][x]);
			   HideScreenTXD(i, 1);

			}
		 }
	}
	if(GwEndON[gang] == 2) GwEndON[gang]=0;
	if(InCount > 0 && GwEndON[gang] == 1)
	{
		GwEndON[gang]=2;
	}
	if(GwTime[gang][0] < 1 && GwTime[gang][1] <= 1)
	{
	   KillTimer(GwTimer[gang]);
	   KillTimer(GwTimer[attackedgang]);
	   GwTimer[gang]=-1;
	   GwTimer[attackedgang]=-1;
	   if(GwKills[gang] == GwKills[attackedgang])
	   {
	    if(attackingcount > attackedcount)  EndGangWar(zone, gang, attackedgang, base, gang, attackedgang);
	    else EndGangWar(zone, attackedgang, gang, base, gang, attackedgang);

	   }
	   else if(GwKills[gang]> GwKills[attackedgang])
	   {
	    if(attackingcount > 0)  EndGangWar(zone, gang, attackedgang, base, gang, attackedgang);
	    else EndGangWar(zone, attackedgang, gang, base, gang, attackedgang);
	   }
	   else EndGangWar(zone, attackedgang, gang, base, gang, attackedgang);
	}
	else
	{
		 if(TotalCount1 == 0 || attackingcount == 0)
		 {
			if(GwEndTime[gang] < 130)
			{
			   KillTimer(GwTimer[gang]);
			   KillTimer(GwTimer[attackedgang]);
			   GwTimer[gang]=-1;
			   GwTimer[attackedgang]=-1;
        	   EndGangWar(zone, attackedgang, gang, base, gang, attackedgang);
			}
		 }
		 else
		 {

 	       if(GwEndTime[gang] <= 1 && GwEndON[gang]==1)
		   {
		     KillTimer(GwTimer[gang]);
		     KillTimer(GwTimer[attackedgang]);
		  	 GwTimer[gang]=-1;
		  	 GwTimer[attackedgang]=-1;
			 EndGangWar(zone, gang, attackedgang, base, gang, attackedgang);
		   }

		 }
	}
	return 1;

}
stock EndGangWar(GangZone, WonGang, LostGang, base, attacker, attacked)
{
     if(WonGang >= 0) inGw[WonGang] = 0, GwTurf[WonGang]=-255, GangTK[WonGang] = GetTickCount(), LastGangAttack[WonGang]=LostGang;
	 if(LostGang >= 0) inGw[LostGang] = 0, GwTurf[LostGang]=-255, GangTK[LostGang] = GetTickCount(), LastGangAttack[LostGang]=WonGang;
     ZoneAttack[GangZone]=GetTickCount();

	 if(WonGang >= 0)
	 {
	    inGw[WonGang] = 0, GwTurf[WonGang]=-255, GangTK[WonGang] = GetTickCount(), LastGangAttack[WonGang]=LostGang;

        GangInfo[WonGang][gWWon]++;
		new dQuery[168];
		format(dQuery, sizeof(dQuery), "UPDATE `gangs` SET `GwWon` = %d WHERE `GangID` = '%d'", GangInfo[WonGang][gWWon], WonGang);
		mysql_query(GTADM, dQuery);

	 }
	 if(LostGang >= 0)
	 {
	    inGw[LostGang] = 0, GwTurf[LostGang]=-255, GangTK[LostGang] = GetTickCount(), LastGangAttack[LostGang]=WonGang;
        ZoneAttack[GangZone]=GetTickCount();

	    GangInfo[LostGang][gWLost]++;
		new dQuery[168];
		format(dQuery, sizeof(dQuery), "UPDATE `gangs` SET `GwLost` = %d WHERE `GangID` = '%d'", GangInfo[LostGang][gWLost], LostGang);
		mysql_query(GTADM, dQuery);
	 }
     aZone[GangZone] = 0;
     foreach(new i : Player)
	 {
           if(PlayerInfo[i][pGang] == WonGang || PlayerInfo[i][pGang] == LostGang)
           {
             for(new x=0; x<26; x++) PlayerTextDrawHide(i, GwTD[i][x]);
			 if(!GetPVarInt(i, "RACER") && HideShit[i]==0)
			 {
                 ShowScreenTXD(i);
			 }
			 pInGW[i]=0;
           }
	       if(PlayerInfo[i][pGang] == WonGang)
		   {
                 if(pLevel[i][gangster] < 18) UpdateSkills(i, gangster, 500);
				 else UpdateSkills(i, gangster, 1000);
                 if(pLevel[i][gangster] >= 25) GivePlayerMoneyEX(i, 100000, 1);
	             SendpInfo(i, "~g~Your gang has won the ~y~Gangwar!", 8000);
				 SendInfoText(i, 3000, "GangWar ~g~Won~w~!");
				 if(WonGang == attacker)
				 {
		    		 if(base == 888) SendClientMessage(i, ORANGE, "{AA8202}» Gang action «{FFC307} Your gang has successfully captured a new gang base");
	    			 else SendClientMessage(i, ORANGE, "{AA8202}» Gang action «{FFC307} Your gang has successfully captured a new turf!");
				 }
				 else if(WonGang == attacked)
				 {
		    		 if(base == 888) SendClientMessage(i, ORANGE, "{AA8202}» Gang action «{FFC307} Your gang has successfully defended the gang base!");
	    			 else SendClientMessage(i, ORANGE, "{AA8202}» Gang action «{FFC307} Your gang has successfully defended the turf");

				 }
				 PlayerInfo[i][pGWinz]++;
	             if(PlayerInfo[i][pGWinz] == 150) GiveMedal(i, 19);
		  		 new Query[128];
	 	  		 format(Query, sizeof(Query), "UPDATE `users` SET `GangWarsWon` = %d WHERE `Name` = '%s'", PlayerInfo[i][pGWinz], pName[i]);
		  		 mysql_query(GTADM, Query);
	             ScoreTDupdate(i, 3);
	             Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON , ZoneIcon[GangZone], E_STREAMER_PLAYER_ID, i);

           }
           else if(PlayerInfo[i][pGang] == LostGang)
           {
                 UpdateSkills(i, gangster, 50);
	             SendpInfo(i, "~r~Your gang has lost the ~y~Gangwar!", 8000);
	             SendInfoText(i, 3000, "GangWar ~r~Lost~w~!");
				 if(LostGang == attacker)
				 {
		    		 if(base == 888) SendClientMessage(i, ORANGE, "{AA8202}» Gang action «{FFC307} Your gang has failed to capture the gang base");
	    			 else SendClientMessage(i, ORANGE, "{AA8202}» Gang action «{FFC307} Your gang has failed to capture the turf");
				 }
				 else if(LostGang == attacked)
				 {
		    		 if(base == 888) SendClientMessage(i, ORANGE, "{AA8202}» Gang action «{FFC307} Your gang has lost the base!");
	    			 else SendClientMessage(i, ORANGE, "{AA8202}» Gang action «{FFC307} Your gang has lost the turf!");

				 }
	             PlayerInfo[i][pGWlost]++;
		  		 new Query[128];
	 	  		 format(Query, sizeof(Query), "UPDATE `users` SET `GangWarsLost` = %d WHERE `Name` = '%s'", PlayerInfo[i][pGWlost], pName[i]);
		  		 mysql_query(GTADM, Query);
	             Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON , ZoneIcon[GangZone], E_STREAMER_PLAYER_ID, i);

           }

	 }
     new Query[128];
     format(Query, sizeof(Query), "UPDATE `gangzones` SET `ZoneGang` = %d WHERE `ZoneID` = '%d'", WonGang, GangZone);
     mysql_query(GTADM, Query);

     ZoneOwner[GangZone] = WonGang;
     GangZoneStopFlashForAll(GangZoneid[GangZone]);
     GangZoneShowForAll(GangZoneid[GangZone], PlayerColors[GangInfo[WonGang][gColor]]);
     if(base == 888)
     {
           for(new i=0; i<MAX_BASES; i++)
           {
              if(GangBases[i][zID] == GangZone)
              {
         	         GangBases[i][gbGang]=WonGang;
					 new str[128];
    				 format(str, sizeof(str), "UPDATE `gangbases` SET `gbGang` = %d WHERE `BaseID` = '%d'", WonGang, i);
    				 mysql_query(GTADM, str);
					 break;
              }
		   }
     }
     return 1;
}

stock GetCarPriceFromID(id)
{
   return vInfo[id-400][vPrice];
}
stock ExitVehicleShow(playerid)
{
     if(HideShit[playerid] == 0)
     {
         ShowScreenTXD(playerid);
	 }
     SetCameraBehindPlayer(playerid);
     for(new x=0; x<10;x++) PlayerTextDrawHide(playerid, VDP[playerid][x]);
     CancelSelectTextDraw(playerid);
     SetPlayerVirtualWorldEX(playerid, 0);
	 DeletePVar(playerid, "v_Dealer");
	 DeletePVar(playerid, "v_Cam");
     SendInfoText(playerid, 100, "_");
	 TogglePlayerControllable2(playerid, 1);
     TogglePlayerAllDynamicCPs(playerid, 1);
}
stock return_vID(playerid)
{
	  new v;
	  switch(GetPVarInt(playerid, "v_Dealer"))
	  {
		 case 1:
		 {
			 switch(GetPVarInt(playerid, "v_Cam"))
			 {
		  	 	 case 0: v=404;
				 case 1: v=405;
				 case 2: v=410;
			 	 case 3: v=419;
				 case 4: v=436;
			   	 case 5: v=491;
			 	 case 6: v=421;
			 	 case 7: v=401;
			 	 case 8: v=440;
				 case 9: v=545;
			 	 case 10: v=580;
				 case 11: v=400;
			 }
		 }
		 case 2:
		 {
			 switch(GetPVarInt(playerid, "v_Cam"))
			 {
		  	 	 case  0: v=496;
		  	 	 case  1: v=500;
		  	 	 case  2: v=507;
		  	 	 case  3: v=533;
		  	 	 case  4: v=475;
		  	 	 case  5: v=492;
		  	 	 case  6: v=498;
		  	 	 case  7: v=499;
		  	 	 case  8: v=508;
		  	 	 case  9: v=552;
		  	 	 case  10: v=543;
		  	 	 case  11: v=605;
			 }
		 }
		 case 3:
		 {
			 switch(GetPVarInt(playerid, "v_Cam"))
			 {
		  	 	 case  0: v=482;
		  	 	 case  1: v=489;
		  	 	 case  2: v=483;
		  	 	 case  3: v=554;
		  	 	 case  4: v=542;
		  	 	 case  5: v=555;
		  	 	 case  6: v=566;
		  	 	 case  7: v=567;
		  	 	 case  8: v=549;
		  	 	 case  9: v=585;
		  	 	 case  10: v=551;
		  	 	 case  11: v=550;
			 }
		 }
		 case 4:
		 {
			 switch(GetPVarInt(playerid, "v_Cam"))
			 {
		  	 	 case  0: v=581;
		  	 	 case  1: v=522;
		  	 	 case  2: v=461;
		  	 	 case  3: v=521;
		  	 	 case  4: v=471;
		  	 	 case  5: v=586;
		  	 	 case  6: v=463;
		  	 	 case  7: v=462;
		  	 	 case  8: v=468;
		  	 	 case  9: v=481;
		  	 	 case  10: v=509;
		  	 	 case  11: v=510;
			 }
		 }
		 case 5:
		 {
			 switch(GetPVarInt(playerid, "v_Cam"))
			 {
		  	 	 case  0: v=536;
		  	 	 case  1: v=575;
		  	 	 case  2: v=534;
		  	 	 case  3: v=535;
		  	 	 case  4: v=576;
		  	 	 case  5: v=560;
		  	 	 case  6: v=559;
		  	 	 case  7: v=558;
		  	 	 case  8: v=561;
		  	 	 case  9: v=562;
		  	 	 case  10: v=601;
		  	 	 case  11: v=466;

			 }
		 }
		 case 6:
		 {
			 switch(GetPVarInt(playerid, "v_Cam"))
			 {
		  	 	 case  0: v=411;
		  	 	 case  1: v=506;
		  	 	 case  2: v=477;
		  	 	 case  3: v=451;
		  	 	 case  4: v=429;
		  	 	 case  5: v=494;
		  	 	 case  6: v=415;
		  	 	 case  7: v=541;
		  	 	 case  8: v=402;
		  	 	 case  9: v=602;
		  	 	 case  10: v=587;
		  	 	 case  11: v=429;

			 }
		 }

		 case 7:
		 {
			 switch(GetPVarInt(playerid, "v_Cam"))
			 {
		  	 	 case  0: v=424;
		  	 	 case  1: v=573;
		  	 	 case  2: v=444;
		  	 	 case  3: v=556;
		  	 	 case  4: v=557;
		  	 	 case  5: v=495;
		  	 	 case  6: v=524;
		  	 	 case  7: v=406;
		  	 	 case  8: v=530;
		  	 	 case  9: v=572;
		  	 	 case  10: v=483;
		  	 	 case  11: v=486;

			 }
		 }
		 case 8:
		 {
			 switch(GetPVarInt(playerid, "v_Cam"))
			 {
		  	 	 case  0: v=487;
		  	 	 case  1: v=548;
		  	 	 case  2: v=497;
		  	 	 case  3: v=513;
		  	 	 case  4: v=511;
		  	 	 case  5: v=469;
		  	 	 case  6: v=553;
		  	 	 case  7: v=460;
		  	 	 case  8: v=417;
		  	 	 case  9: v=593;
		  	 	 case  10: v=563;
		  	 	 case  11: v=577;
			 }
		 }

		 case 9:
		 {
			 switch(GetPVarInt(playerid, "v_Cam"))
			 {
		  	 	 case  0: v=441;
		  	 	 case  1: v=465;
		  	 	 case  2: v=501;//
		  	 	 case  3: v=564;//
		  	 	 case  4: v=594;
		  	 	 case  5: v=474;
		  	 	 case  6: v=490;
		  	 	 case  7: v=528;
		  	 	 case  8: v=532;
		  	 	 case  9: v=544;
		  	 	 case  10: v=523;
		  	 	 case  11: v=599;
			 }
		 }
	  }
	  return v;
}
stock AddCarForSale(vehicleid, dealerid)
{
	new string[40];
    format(string, sizeof(string), "~g~$%d", GetCarPriceFromID(vehicleid)*2);
    AddMenuItem(Cars[dealerid], 0, vInfo[vehicleid-400][vName]);
    AddMenuItem(Cars[dealerid], 1, string);

    format(string, sizeof(string), "~g~$%d", floatround(GetCarPriceFromID(vehicleid)*2*0.75));
    AddMenuItem(Cars_Discount[dealerid-1], 0, vInfo[vehicleid-400][vName]);
    AddMenuItem(Cars_Discount[dealerid-1], 1, string);

	return 1;
}

stock VehicleShow(playerid, dealerid)
{
	 TogglePlayerControllable2(playerid, 0);
     HideScreenTXD(playerid);
	 SetPVarInt(playerid, "v_Dealer", dealerid);
     SetVehicleShowCam(playerid, dealerid, 0);
     for(new x=0; x<10;x++) PlayerTextDrawShow(playerid, VDP[playerid][x]);
     SelectTextDraw(playerid, 0xE01B1BCC);
     SetPlayerVirtualWorldEX(playerid, 522);
     TogglePlayerAllDynamicCPs(playerid, 0);
}
stock SetVehicleShowCam(playerid, dealerid, cam)
{
	 if(cam < 0) cam = 11;
	 if(cam > 11) cam =0;
	 new Float:x, Float:y, Float:z;
	 GetPlayerCameraPos(playerid, x, y, z);
	 SetPVarInt(playerid, "v_Cam", cam);

	 switch(dealerid)
	 {
		case 1:
		{
          if(cam == 0) SetPlayerCameraPos(playerid, v_Dealer_Cam[0][0], v_Dealer_Cam[0][1], v_Dealer_Cam[0][2]), SetPlayerCameraLookAt(playerid, v_Dealer_Cam[0][3], v_Dealer_Cam[0][4], v_Dealer_Cam[0][5], CAMERA_MOVE);
     	  else InterpolateCameraPos(playerid, x, y, z, v_Dealer_Cam[cam][0], v_Dealer_Cam[cam][1], v_Dealer_Cam[cam][2], 1500, CAMERA_MOVE), InterpolateCameraLookAt(playerid, v_Dealer_Cam[cam-1][3], v_Dealer_Cam[cam-1][4], v_Dealer_Cam[cam-1][5], v_Dealer_Cam[cam][3], v_Dealer_Cam[cam][4], v_Dealer_Cam[cam][5], 1500, CAMERA_MOVE);
		}
		case 2:
		{
          if(cam == 0) SetPlayerCameraPos(playerid, v_Dealer_Cam2[0][0], v_Dealer_Cam2[0][1], v_Dealer_Cam2[0][2]), SetPlayerCameraLookAt(playerid, v_Dealer_Cam2[0][3], v_Dealer_Cam2[0][4], v_Dealer_Cam2[0][5], CAMERA_MOVE);
     	  else InterpolateCameraPos(playerid, x, y, z, v_Dealer_Cam2[cam][0], v_Dealer_Cam2[cam][1], v_Dealer_Cam2[cam][2], 1500, CAMERA_MOVE), InterpolateCameraLookAt(playerid, v_Dealer_Cam2[cam-1][3], v_Dealer_Cam2[cam-1][4], v_Dealer_Cam2[cam-1][5], v_Dealer_Cam2[cam][3], v_Dealer_Cam2[cam][4], v_Dealer_Cam2[cam][5], 1500, CAMERA_MOVE);
		}
		case 3:
		{
          if(cam == 0) SetPlayerCameraPos(playerid, v_Dealer_Cam3[0][0], v_Dealer_Cam3[0][1], v_Dealer_Cam3[0][2]), SetPlayerCameraLookAt(playerid, v_Dealer_Cam3[0][3], v_Dealer_Cam3[0][4], v_Dealer_Cam3[0][5], CAMERA_MOVE);
     	  else InterpolateCameraPos(playerid, x, y, z, v_Dealer_Cam3[cam][0], v_Dealer_Cam3[cam][1], v_Dealer_Cam3[cam][2], 1500, CAMERA_MOVE), InterpolateCameraLookAt(playerid, v_Dealer_Cam3[cam-1][3], v_Dealer_Cam3[cam-1][4], v_Dealer_Cam3[cam-1][5], v_Dealer_Cam3[cam][3], v_Dealer_Cam3[cam][4], v_Dealer_Cam3[cam][5], 1500, CAMERA_MOVE);
		}
		case 4:
		{
          if(cam == 0) SetPlayerCameraPos(playerid, v_Dealer_Cam4[0][0], v_Dealer_Cam4[0][1], v_Dealer_Cam4[0][2]), SetPlayerCameraLookAt(playerid, v_Dealer_Cam4[0][3], v_Dealer_Cam4[0][4], v_Dealer_Cam4[0][5], CAMERA_MOVE);
     	  else InterpolateCameraPos(playerid, x, y, z, v_Dealer_Cam4[cam][0], v_Dealer_Cam4[cam][1], v_Dealer_Cam4[cam][2], 1500, CAMERA_MOVE), InterpolateCameraLookAt(playerid, v_Dealer_Cam4[cam-1][3], v_Dealer_Cam4[cam-1][4], v_Dealer_Cam4[cam-1][5], v_Dealer_Cam4[cam][3], v_Dealer_Cam4[cam][4], v_Dealer_Cam4[cam][5], 1500, CAMERA_MOVE);
		}
		case 5:
		{
          if(cam == 0) SetPlayerCameraPos(playerid, v_Dealer_Cam5[0][0], v_Dealer_Cam5[0][1], v_Dealer_Cam5[0][2]), SetPlayerCameraLookAt(playerid, v_Dealer_Cam5[0][3], v_Dealer_Cam5[0][4], v_Dealer_Cam5[0][5], CAMERA_MOVE);
     	  else InterpolateCameraPos(playerid, x, y, z, v_Dealer_Cam5[cam][0], v_Dealer_Cam5[cam][1], v_Dealer_Cam5[cam][2], 1500, CAMERA_MOVE), InterpolateCameraLookAt(playerid, v_Dealer_Cam5[cam-1][3], v_Dealer_Cam5[cam-1][4], v_Dealer_Cam5[cam-1][5], v_Dealer_Cam5[cam][3], v_Dealer_Cam5[cam][4], v_Dealer_Cam5[cam][5], 1500, CAMERA_MOVE);
		}
		case 6:
		{
          if(cam == 0) SetPlayerCameraPos(playerid, v_Dealer_Cam6[0][0], v_Dealer_Cam6[0][1], v_Dealer_Cam6[0][2]), SetPlayerCameraLookAt(playerid, v_Dealer_Cam6[0][3], v_Dealer_Cam6[0][4], v_Dealer_Cam6[0][5], CAMERA_MOVE);
     	  else InterpolateCameraPos(playerid, x, y, z, v_Dealer_Cam6[cam][0], v_Dealer_Cam6[cam][1], v_Dealer_Cam6[cam][2], 1500, CAMERA_MOVE), InterpolateCameraLookAt(playerid, v_Dealer_Cam6[cam-1][3], v_Dealer_Cam6[cam-1][4], v_Dealer_Cam6[cam-1][5], v_Dealer_Cam6[cam][3], v_Dealer_Cam6[cam][4], v_Dealer_Cam6[cam][5], 1500, CAMERA_MOVE);
		}
		case 7:
		{
          if(cam == 0) SetPlayerCameraPos(playerid, v_Dealer_Cam7[0][0], v_Dealer_Cam7[0][1], v_Dealer_Cam7[0][2]), SetPlayerCameraLookAt(playerid, v_Dealer_Cam7[0][3], v_Dealer_Cam7[0][4], v_Dealer_Cam7[0][5], CAMERA_MOVE);
     	  else InterpolateCameraPos(playerid, x, y, z, v_Dealer_Cam7[cam][0], v_Dealer_Cam7[cam][1], v_Dealer_Cam7[cam][2], 1500, CAMERA_MOVE), InterpolateCameraLookAt(playerid, v_Dealer_Cam7[cam-1][3], v_Dealer_Cam7[cam-1][4], v_Dealer_Cam7[cam-1][5], v_Dealer_Cam7[cam][3], v_Dealer_Cam7[cam][4], v_Dealer_Cam7[cam][5], 1500, CAMERA_MOVE);
		}
		case 8:
		{
          if(cam == 0) SetPlayerCameraPos(playerid, v_Dealer_Cam8[0][0], v_Dealer_Cam8[0][1], v_Dealer_Cam8[0][2]), SetPlayerCameraLookAt(playerid, v_Dealer_Cam8[0][3], v_Dealer_Cam8[0][4], v_Dealer_Cam8[0][5], CAMERA_MOVE);
     	  else InterpolateCameraPos(playerid, x, y, z, v_Dealer_Cam8[cam][0], v_Dealer_Cam8[cam][1], v_Dealer_Cam8[cam][2], 1500, CAMERA_MOVE), InterpolateCameraLookAt(playerid, v_Dealer_Cam8[cam-1][3], v_Dealer_Cam8[cam-1][4], v_Dealer_Cam8[cam-1][5], v_Dealer_Cam8[cam][3], v_Dealer_Cam8[cam][4], v_Dealer_Cam8[cam][5], 1500, CAMERA_MOVE);
		}
		case 9:
		{
          if(cam == 0) SetPlayerCameraPos(playerid, v_Dealer_Cam9[0][0], v_Dealer_Cam9[0][1], v_Dealer_Cam9[0][2]), SetPlayerCameraLookAt(playerid, v_Dealer_Cam9[0][3], v_Dealer_Cam9[0][4], v_Dealer_Cam9[0][5], CAMERA_MOVE);
     	  else InterpolateCameraPos(playerid, x, y, z, v_Dealer_Cam9[cam][0], v_Dealer_Cam9[cam][1], v_Dealer_Cam9[cam][2], 1500, CAMERA_MOVE), InterpolateCameraLookAt(playerid, v_Dealer_Cam9[cam-1][3], v_Dealer_Cam9[cam-1][4], v_Dealer_Cam9[cam-1][5], v_Dealer_Cam9[cam][3], v_Dealer_Cam9[cam][4], v_Dealer_Cam9[cam][5], 1500, CAMERA_MOVE);
		}
	 }
	 new v=return_vID(playerid);
	 new str[50];
	 format(str, sizeof(str), "~y~%s", vInfo[v-400][vName]);
     SendInfoText(playerid, 7000, str);
     format(str, sizeof(str), "~g~$%d", GetCarPriceFromID(v)*2);
     PlayerTextDrawSetStringEX(playerid, VDP[playerid][6], str);
}

stock IsValidNosVehicle(vehicleid)
{
    if(IsAPlane(vehicleid)) return 0;
    switch(GetVehicleModel(vehicleid))
    {
        case 406, 573, 581, 523, 462, 521, 463, 522, 461, 448, 468, 586, 417, 425, 469, 487, 512, 520, 563, 593,
                         509, 481, 510, 472, 473, 493, 595, 484, 430, 453, 432, 476, 497, 513, 533, 577,
                         452, 446, 447, 454, 590, 569, 537, 538, 570, 449, 519, 460, 488, 511, 548, 592: return 0;
    }
    return 1;
}

stock IsDeathMatcher(playerid)
{
  if(GetPVarInt(playerid, "PoolWatch") || GetPVarInt(playerid, "poolguy1") || GetPVarInt(playerid, "poolguy2") || (GetPVarInt(playerid, "CS")) || InDive[playerid] > 0 || Iter_Contains(InSumo, playerid) || InCanon[playerid] > 0 ||(GetPVarInt(playerid, "InDerby")) || playerid==DuelInfo[player1] || playerid ==DuelInfo[player2] || GetPVarInt(playerid, "InTic")
  || GetPVarInt(playerid, "Trucker")|| GetPVarInt(playerid, "Trucker2") || GetPVarInt(playerid, "InHay") || Footballer[playerid] > 0 || (GetPVarInt(playerid, "pOur")) ||(GetPVarInt(playerid, "WW")) ||(GetPVarInt(playerid, "WW2")) || (GetPVarInt(playerid, "Drifter")) ||(GetPVarInt(playerid, "inFallout")) || InCW[playerid] > 0 || (GetPVarInt(playerid, "RACER")) || GetPVarInt(playerid, "inCTF") || GetPVarInt(playerid, "InMG")
  || GetPVarInt(playerid, "InOutRun") || GetPVarInt(playerid, "inflappy") || GetPVarInt(playerid, "DD") || ((GetPVarInt(playerid, "MissionProgress")) > 1) || GetPVarInt(playerid, "instunt") || GetPVarInt(playerid, "CO") || STUNTING[playerid] > 0  || (GetPVarInt(playerid, "TDM")) || (GetPVarInt(playerid, "INDM")) || (GetPVarInt(playerid, "Signed4Lms")) || (GetPVarInt(playerid, "CAM")) || (GetPVarInt(playerid, "v_Dealer")) || (GetPVarInt(playerid, "v_Cam"))  || (GetPVarInt(playerid, "g_Col_p"))) return 1;
  return 0;
}
stock IsDeathMatcher2(playerid)
{
  if(GetPVarInt(playerid, "PoolWatch") || GetPVarInt(playerid, "poolguy1") || GetPVarInt(playerid, "poolguy2") || (GetPVarInt(playerid, "CS")) || InDive[playerid] > 0 || Iter_Contains(InSumo, playerid) || InCanon[playerid] > 0 ||(GetPVarInt(playerid, "InDerby")) || playerid==DuelInfo[player1] || playerid ==DuelInfo[player2] || GetPVarInt(playerid, "InTic")
  || GetPVarInt(playerid, "Trucker")|| GetPVarInt(playerid, "Trucker2") || GetPVarInt(playerid, "InHay") || Footballer[playerid] > 0 || (GetPVarInt(playerid, "pOur")) ||(GetPVarInt(playerid, "WW")) ||(GetPVarInt(playerid, "WW2")) || (GetPVarInt(playerid, "Drifter")) ||(GetPVarInt(playerid, "inFallout")) || InCW[playerid] > 0 || (GetPVarInt(playerid, "RACER")) || GetPVarInt(playerid, "inCTF") || GetPVarInt(playerid, "InMG")
  || GetPVarInt(playerid, "InOutRun") || GetPVarInt(playerid, "inflappy") || GetPVarInt(playerid, "DD") || ((GetPVarInt(playerid, "MissionProgress")) > 1) || GetPVarInt(playerid, "CO") || STUNTING[playerid] > 0  || (GetPVarInt(playerid, "TDM")) || (GetPVarInt(playerid, "INDM")) || (GetPVarInt(playerid, "Signed4Lms")) || (GetPVarInt(playerid, "CAM")) || (GetPVarInt(playerid, "v_Dealer")) || (GetPVarInt(playerid, "v_Cam"))  || (GetPVarInt(playerid, "g_Col_p"))) return 1;
  return 0;
}
stock IsAdmin(playerid, level)
{
  if(PlayerInfo[playerid][pAdmin] >= level) return 1;
  if(IsPlayerAdmin(playerid)) return 1;
  return 0;
}
stock a_Level(playerid)
{
  new lvl;
  lvl = PlayerInfo[playerid][pAdmin];
  if(IsPlayerAdmin(playerid)) lvl=1337;
  return lvl;
}
stock IsAPlane(carid)
{
    switch(GetVehicleModel(carid))
    {
        case 460, 464, 476, 511, 512, 513, 519, 520, 553, 577, 592, 593, 548, 425, 417, 487, 488, 497, 563, 447, 469: return 1;
    }
    return 0;
}
stock IsABoat(carid)
{
    switch(GetVehicleModel(carid))
    {
        case 430, 446, 452, 453, 454, 472, 473, 484, 493, 595: return 1;
    }
	return 0;
}

stock IsABike( vehicleid )
{
    new
        _vmodel = GetVehicleModel( vehicleid )
    ;
    switch ( _vmodel )
    {
        case 462, 448, 581, 522, 461, 521, 523, 463, 586, 468, 571: return true;
    }
    return false;
}

stock SendMsg(playerid, MsgID)
{
  switch(MsgID)
  {
    case 0:  SendClientMessage(playerid, warning, ""RED_"» Error « {BABABA}You are not in a minigame!");
	case 1:  SendClientMessage(playerid, warning, ""RED_"» Error « {BABABA}You cant use this command in a minigame type (/Exit) and try again.");
	case 2:  SendClientMessage(playerid, warning, ""RED_"» Error « {BABABA}You cant use this command during a fight.");
 	case 3:  SendClientMessage(playerid, warning, ""RED_"» Error « {BABABA}You must be spawned to use this command.");
	case 4:  SendClientMessage(playerid, warning, ""RED_"» Error « {BABABA}Leaving the jetpack will cause for death!");
	case 5:  SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You are not authorized to use this command.");
	case 6:  SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Joining deathmatches has been disabled by an admin");
	case 7:  SendClientMessage(playerid, warning, ""RED_"» Error « {BABABA}You cant use this command on yourself!");
	case 9:  SendClientMessage(playerid, lblue, ""RED_"» Error « {BABABA}You have already signed up for the Last Man Standing minigame.");
  }
  return 1;
}

stock SendMoneyMSG(playerid, amount)
{
   new str[128];
   format(str, sizeof(str), ""RED_"» Error « {BABABA}You need at least $%d to use this command", amount);
   SendClientMessage(playerid, RED2, str);
   return 1;
}


stock GivePlayerMoneyEX(playerid, money, Type=0)
{
//if((!GetPVarInt(playerid, "TakingMedal")
  pMoney[playerid]+=money;
  GivePlayerMoney(playerid, money);
  if(Type != 0 && !GetPVarInt(playerid, "TakingMedal"))
  {
	 new str[30];
	 if(money > 0) format(str, sizeof(str), "~g~+%d", money);
	 else if(money < 0) format(str, sizeof(str), "~r~%d", money);
	 PlayerTextDrawSetString(playerid, pMoneyTD[playerid][0], str);
	 PlayerTextDrawSetString(playerid, pMoneyTD[playerid][2], "_");
	 PlayerTextDrawShow(playerid, pMoneyTD[playerid][0]);
	 PlayerTextDrawShow(playerid, pMoneyTD[playerid][1]);
	 PlayerTextDrawShow(playerid, pMoneyTD[playerid][2]);
	 SetTimerEx("HideMoneyTD", 2000, false, "i", playerid);
  }
}
stock ResetPlayerMoneyEx(playerid)
{
  pMoney[playerid]=0;
  new money = GetPlayerMoney(playerid);
  GivePlayerMoney(playerid, -money);
}
stock GetPlayerMoneyEx(playerid)
{
  return pMoney[playerid];
}

stock MutePlayer(playerid, Secs, admin, reason[])
{
   GiveMedal(playerid, 15);
   PlayerInfo[playerid][Muted]+=Secs;
   new str[128];
   if(admin == -255 || GetPVarInt(admin, "Hidden") || GetPVarInt(admin, "HideMeBitch") || Jonny[admin] == 1) format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}Admin Jonny has added %s to the STFU list (Reason: %s)", pName[playerid], reason);
   else format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}Admin %s has added %s to the STFU list (Reason: %s)", pName[admin], pName[playerid], reason);
   SendClientMessageToAll(AdminInfo, str);
}
stock FinePlayer(id, Cash, admin[], reason[], tybe = 1)
{
 if(!IsPlayerNPC(id))
 {
   if(IsDeathMatcher(id)) cmd_exit(id);
   if(tybe != 0)
   {
     if(PlayerInfo[id][pBank] >= Cash)
     {
        new str[256];
        format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}Admin %s has fined %s's bank account of $%d (Reason: %s)", admin, pName[id], Cash, reason);
        SendClientMessageToAll(AdminInfo, str);
        printf("%s", str);
     }
     new oldcash = PlayerInfo[id][pBank];
     PlayerInfo[id][pBank] = (oldcash - Cash);
     new Query[128];
     format(Query, sizeof(Query), "UPDATE `users` SET `pBank` = %d WHERE `Name` = '%s'", PlayerInfo[id][pBank], pEscName[id]);
     mysql_query(GTADM, Query);
     new str2[256];
     format(str2, sizeof(str2), "{9E1010}» Admin action « {E62525}Admin %s has fined your bank account of $%d (Reason: %s)", admin, Cash, reason);
	 SendClientMessage(id, -1, str2);
     SetPlayerHealth(id, 0);
     SendInfoText(id, 5000, "~r~Your bank account has been fined~w~!");
 	 PlayerPlaySound(id, 3201, 0.0, 0.0, 0.0);
	 PlayAudioStreamForPlayer(id, "http://dl.dropbox.com/u/52869044/Girl%20Screaming%20In%20Horror%21-cutmp3.net.mp3");
   }
 }
 return 1;
}
stock JailPlayer(id, Secs, admin[], reason[], tybe = 1)
{
 if(!IsPlayerNPC(id))
 {
   if(IsDeathMatcher(id)) cmd_exit(id);
   new count = CountJailed();

   SetPlayerPosEx(id, Jail[count][0], Jail[count][1], Jail[count][2], Jail[count][3]);
   SetPlayerInterior(id, 14);
   SetPlayerVirtualWorldEX(id, 871);
   if(tybe != 0)
   {
     if(PlayerInfo[id][Jailed] <= 0)
     {
        new str[128];
        format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}Admin %s has jailed %s (Reason: %s)", admin, pName[id], reason);
        SendClientMessageToAll(AdminInfo, str);
     }
     PlayerInfo[id][Jailed]+= Secs;
   }
   InHouse[id]=-1;
 }
 return 1;
}
stock CountJailed()
{
   new count=0;
   foreach (new i : Player)
   {
        if(PlayerInfo[i][Jailed]> 0) count ++;
   }
   return count;
}
stock ArrestPlayer(id)
{
	new time;
	switch(GetPVarInt(id, "Wanted"))
	{
	   case 1: time = 30;
	   case 2: time = 80;
	   case 3: time = 120;
	   case 4: time = 200;
	   case 5: time = 250;
	   case 6: time = 300;
	}
    new count = 0;
    foreach (new i : Player) if(PlayerInfo[i][Jailed]> 0) count ++;
    SetPlayerPos(id, Jail[count][0], Jail[count][1], Jail[count][2]);
    SetPlayerInterior(id, 14);
    SetPlayerVirtualWorldEX(id, 871);
    SetPlayerFacingAngle(id, Jail[count][3]);
    PlayerInfo[id][Jailed]=time;
}

CMD:ifly(playerid, params[])
{
    if(GetPVarInt(playerid, "MissionProgress")) return SendMsg(playerid, 1);
    if(!IsAdmin(playerid, 5)) return SendMsg(playerid, 5);
    if(GetPlayerVirtualWorld(playerid) != 0 && !IsAdmin(playerid, 10)) return SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}This command can only be used in world 0");
	if(GetPVarInt(playerid, "FLY"))
	{
        DeletePVar(playerid, "FLY");
        SendClientMessage(playerid, GRAY, ""GRAY_"You have "RED_"stopped "GRAY_"the fly mode");
//		TogglePlayerControllable2(playerid, true);
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		SetPlayerPos(playerid, x, y, z+3);
		ClearAnimations(playerid);
		return 1;
	}
	else
	{
        SetPVarInt(playerid, "FLY", true);
        SendClientMessage(playerid, GRAY, ""GRAY_"You have "RED_"started "GRAY_"to fly");
        //SetTimerEx("FlyTimer", 100, false, "i", playerid);
		FlyTimer(playerid);
//		TogglePlayerControllable2(playerid, false);

        SendClientMessage(playerid, RED, "Press shift & space to move up and down");
        new Float:x, Float:y, Float:z;
        GetPlayerPos(playerid, x, y, z);
        SetPlayerPos(playerid, x, y, z+5.0);
        ApplyAnimation(playerid, "SWIM", "Swim_Tread", 4.1, 1, 1, 1, 1, 0, 1);
	}
	return 1;
}
CMD:party(playerid)
{
   if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(Party == 0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}No party has been started yet");
   else if(Party == 2) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}The party has already been started");
   else
   {
	   switch(random(5))
	   {
			case 0:SetPlayerPos(playerid, partyX, partyY, partyZ);
			case 1:SetPlayerPos(playerid, partyX+1, partyY, partyZ);
			case 2:SetPlayerPos(playerid, partyX, partyY+1, partyZ);
			case 3:SetPlayerPos(playerid, partyX-1, partyY, partyZ);
			case 4:SetPlayerPos(playerid, partyX, partyY-1, partyZ);

	   }
   }
   SetPlayerVirtualWorldEX(playerid, partyVw);
   SendTeleMsg(playerid, "The Party", "Party");
   SendInfoText(playerid, 3000, "~r~You are not allowed to DM here");
   new str[128];
   format(str, sizeof(str), "{6F6AA6}» Party « {0099FF}%s has joined the party! {6F6AA6}(/Party)", pName[playerid]);
   SendClientMessageToAll(LIGHTBLUE, str);
   //SendInfoText2(4500, "Type ~r~/party~w~ To join the ~p~party~w~!");
   return 1;
}

CMD:endparty(playerid)
{
   if(!IsAdmin(playerid, 2)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You are not authorized to use this command.");
   if((Party == 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}No party has been started yet.");
   new str[75];
   format(str, sizeof(str), "{6F6AA6}» Party « {0099FF}%s has ended the party!", gAname(playerid));
   SendClientMessageToAll(LIGHTBLUE, str);
   Party=0;
   for(new x=0; x<sizeof(xMasPickUp); x++) DestroyPickup(xMasPickUp[x]), xMasPickUp[x]=-1;
   TextDrawHideForPlayer(playerid, PartyTD2);
   TextDrawHideForPlayer(playerid, PartyTD);
   DestroyDynamicArea(partyarea);
   return 1;
}
CMD:startparty(playerid)
{
     if(!IsAdmin(playerid, 2)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You are not authorized to use this command.");
     ShowPlayerDialog(playerid, 4544, DIALOG_STYLE_LIST, "Start Party", ""GRAY_"1."PINK_"Start a normal party in your position \n"GRAY_"2."RED_"Start THE TITANIC party\n"GRAY_"3."LIGHTBLUE_"xMas party", "Start", "Exit");
	 return 1;
}
stock UnJailPlayer(playerid, admin)
{
    PlayerInfo[playerid][Jailed]=0;
    new Admin[24];
    if(admin == -255 || GetPVarInt(admin, "Hidden") || GetPVarInt(admin, "HideMeBitch") || Jonny[admin] == 1) format(Admin, 24, "Jonny");
    else format(Admin, 24, "%s", pName[admin]);
	new str[128];

    format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}%s has been released from jail by admin %s", pName[playerid], Admin);
    SendClientMessageToAll(AdminInfo, str);
    SetPlayerWantedLevelEx(playerid, 0);
    DeletePVar(playerid, "Arrested");
    SetPlayerPosEx(playerid, 1754.0032, -1596.3201, 13.5374, 167.8265, 0), SetPlayerVirtualWorldEX(playerid, 0);
}

stock UnMutePlayer(playerid, admin)
{
    PlayerInfo[playerid][Muted]=0;
    new Admin[24];
    if(admin == -255 || GetPVarInt(admin, "Hidden") || GetPVarInt(admin, "HideMeBitch") || Jonny[admin] == 1) format(Admin, 24, "Jonny");
    else format(Admin, 24, "%s", pName[admin]);
	new str[128];
    format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}Admin %s has removed %s from the STFU list", Admin, pName[playerid]);
    SendClientMessageToAll(AdminInfo, str);
}
stock TimeConvert(time)
{
    new mins;
    new secs;
    new aa[128];
    if(time > 59)
	{
        mins = floatround(time/60);
        secs = floatround(time - mins*60);
        if((secs>9) && (mins > 9)) format(aa, sizeof(aa), "%d:%d", mins, secs);
        else if((secs>9) && (mins <= 9)) format(aa, sizeof(aa), "0%d:%d", mins, secs);
        else if((mins>9) && (secs <= 9)) format(aa, sizeof(aa), "%d:0%d", mins, secs);
        else if((mins<=9) && (secs <= 9)) format(aa, sizeof(aa), "0%d:0%d", mins, secs);
    }
    else
	{
        secs = floatround(time);
        if(secs>9)format(aa, sizeof(aa), "00:%d", secs);
        else format(aa, sizeof(aa), "00:0%d", secs);
    }
    return aa;
}
stock ConvertTime(time)
{
	new str[16];
    new minutes=time/60000;
    new ms=time-((minutes)*60000);
    new seconds=(ms)/1000;
    ms-=seconds*1000;
	format(str, sizeof(str), "%02d:%02d.%03d", minutes, seconds, ms);
	return str;
}
stock ConvertTime2(Milliseconds)
{
	new string[50];
    new Minutes = (Milliseconds % (1000*60*60)) / (1000*60);
    new Seconds = ((Milliseconds % (1000*60*60)) % (1000*60)) / 1000;
	format(string, sizeof(string), "%02d:%02d", Minutes, Seconds);
	return string;
}

/*
stock ShowRules(playerid, seconds)
{
	for(new x=0; x<sizeof(Rules); x++) TextDrawShowForPlayer(playerid, Rules[x]);
	SetTimerEx("HideRules", 1000*seconds, false, "i", playerid);
}
forward HideRules(i);
public HideRules(i)
{
   for(new x=0; x<sizeof(Rules); x++) TextDrawHideForPlayer(i, Rules[x]);
   return 1;
}
*/
forward FlyTimer(playerid);
public FlyTimer(playerid)
{
        if(!IsPlayerConnected(playerid))
                return 1;
        new k, ud, lr;
        GetPlayerKeys(playerid, k, ud, lr);
        new Float:v_x, Float:v_y, Float:v_z,
                Float:x, Float:y, Float:z;
        if(ud < 0)      // forward
        {
                GetPlayerCameraFrontVector(playerid, x, y, z);
                v_x = x+0.001;
                v_y = y+0.001;
        }
        if(k == KEY_SPRINT)     // down
                v_z = -0.1;

        if(k == KEY_JUMP)   // up
                v_z = 0.1;

        if(v_z == 0.0)
                v_z = 0.001;
		new Float:angle;
		if(lr == KEY_LEFT)
		{
             if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
			 {
                 GetPlayerFacingAngle(playerid, angle);
                 SetPlayerFacingAngle(playerid, angle+5);
             }
		}
		if(lr == KEY_RIGHT)
		{
		    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
			{
                GetPlayerFacingAngle(playerid, angle);
                SetPlayerFacingAngle(playerid, angle-5);
            }
		}
        SetPlayerVelocity(playerid, v_x, v_y, v_z);
        SetCameraBehindPlayer(playerid);

        new animlib[32];
        new animname[32];
        GetAnimationName(GetPlayerAnimationIndex(playerid), animlib, 32, animname, 32);

        if(v_x != 0 || v_y != 0)
        {
			   if(strcmp("Swim_Glide", animname))
               ApplyAnimation(playerid, "SWIM", "Swim_Glide", 4.1, 1, 1, 1, 1, 0, 1);
        }
        else
        {
			   if(strcmp("Swim_Breast", animname))
               ApplyAnimation(playerid, "SWIM", "Swim_Breast", 4.1, 1, 1, 1, 1, 0, 1);
        }

        new Float:health;
        GetPlayerHealth(playerid, health);
        if (health < 100.0) SetPlayerHealth(playerid, 100.0);

        if(GetPVarInt(playerid, "FLY"))SetTimerEx("FlyTimer", 50, false, "i", playerid);
        else ClearAnimations(playerid);
        return 1;
}

forward resetship();
public resetship()
{
   SetObjectPos(Ship1, -1604.04, 22.73, 35.57);
   SetObjectPos(Ship2, -1550.83, 75.93, 7.00);
   SetObjectPos(Ship3, -1552.314, 74.4206, 17.05);

   SetObjectRot(Ship1, 0.00, 0.00, 45.00);
   SetObjectRot(Ship2, 0.00, 0.00, 45.00);
   SetObjectRot(Ship3, 0.00, 0.00, 45.00);
   AttachObjectToObject(Ship1, Ship2, -75.65, 0.0, 28.5, 0.0, 0.0, 0.0, 1);
   AttachObjectToObject(Ship2, Ship3, 2.7, 0, -10.0, 0.0, 0.0, 0.0, 1);
   Party = 0;
   foreach(new i : Player)
   {
     TextDrawHideForPlayer(i, PartyTD2);
     TextDrawHideForPlayer(i, PartyTD);
   }
   return 1;
}


public OnDynamicObjectMoved(objectid)
{
	for(new g=0; g<MAX_GATES; g++)
	{
	  if(objectid == GateInfo[g][ObjectID])
	  {
		if(GateInfo[g][IsOpened] == 1)
		{
		   SetDynamicObjectPos(GateInfo[g][gKeypad3], GateInfo[g][k3][0], GateInfo[g][k3][1], GateInfo[g][k3][2]);
		}
		else
		{
		   SetDynamicObjectPos(GateInfo[g][gKeypad3], GateInfo[g][ok3][0], GateInfo[g][ok3][1], GateInfo[g][ok3][2]);
		}
		break;
	  }
	}
	if(haygamestarted == 1)
	{
		new Float:Haypos[3];
		if(objectid == MovingHay[1])
		{
			GetDynamicObjectPos(objectid, Haypos[0], Haypos[1], Haypos[2]);
			if(Haypos[2] == 85.92) MoveDynamicObject(MovingHay[1], -1045.85, 793.62, 78.92, 4.0);
			else MoveDynamicObject(MovingHay[1], -1045.85, 793.62, 85.92, 4.0);
		}
		else if(objectid == MovingHay[2])
		{
			GetDynamicObjectPos(objectid, Haypos[0], Haypos[1], Haypos[2]);
			if(Haypos[2] ==  95.84) MoveDynamicObject(MovingHay[2], -1052.32, 762.79, 93.84, 4.0);
			else MoveDynamicObject(MovingHay[2], -1052.32, 762.79, 95.84, 4.0);
		}
		else if(objectid == MovingHay[3])
		{
			GetDynamicObjectPos(objectid, Haypos[0], Haypos[1], Haypos[2]);
			if(Haypos[2] == 96.84) MoveDynamicObject(MovingHay[3], -1052.39, 758.44, 93.84, 4.0);
			else MoveDynamicObject(MovingHay[3], -1052.39, 758.44, 96.84, 4.0);
		}
		else if(objectid == MovingHay[4])
		{
			GetDynamicObjectPos(objectid, Haypos[0], Haypos[1], Haypos[2]);
			if(Haypos[2] == 97.84) MoveDynamicObject(MovingHay[4], -1052.40, 754.13, 93.84, 4.0);
			else MoveDynamicObject(MovingHay[4], -1052.40, 754.13, 97.84, 4.0);
		}
		else if(objectid == MovingHay[5])
		{
			GetDynamicObjectPos(objectid, Haypos[0], Haypos[1], Haypos[2]);
			if(Haypos[2] == 95.84) MoveDynamicObject(MovingHay[5], -1052.40, 749.92, 93.84, 4.0);
			else MoveDynamicObject(MovingHay[5], -1052.40, 749.92, 95.84, 4.0);
		}
		else if(objectid == MovingHay[6])
		{
			GetDynamicObjectPos(objectid, Haypos[0], Haypos[1], Haypos[2]);
			if(Haypos[2] == 96.84) MoveDynamicObject(MovingHay[6], -1052.35, 745.61, 93.84, 4.0);
			else MoveDynamicObject(MovingHay[6], -1052.35, 745.61, 96.84, 4.0);
		}
		else if(objectid == MovingHay[7])
		{
			GetDynamicObjectPos(objectid, Haypos[0], Haypos[1], Haypos[2]);
			if(Haypos[2] == 110.0) MoveDynamicObject(MovingHay[7], -1007.35, 817.99, 99.92, 4.0);
			else MoveDynamicObject(MovingHay[7], -1007.35, 817.99, 110.0, 4.0);
		}
		else if(objectid == MovingHay[8])
		{
			GetDynamicObjectPos(objectid, Haypos[0], Haypos[1], Haypos[2]);
			if(Haypos[2] ==118.86) MoveDynamicObject(MovingHay[8], -962.32, 769.81, 116.86, 4.0);
			else MoveDynamicObject(MovingHay[8], -962.32, 769.81, 118.86, 4.0);
		}
		else if(objectid == MovingHay[9])
		{
			GetDynamicObjectPos(objectid, Haypos[0], Haypos[1], Haypos[2]);
			if(Haypos[2] == 119.8) MoveDynamicObject(MovingHay[9], -959.72, 766.75, 116.86, 4.0);
			else MoveDynamicObject(MovingHay[9], -959.72, 766.75, 119.86, 4.0);
		}
		else if(objectid == MovingHay[10])
		{
			GetDynamicObjectPos(objectid, Haypos[0], Haypos[1], Haypos[2]);
			if(Haypos[2] == 117.86) MoveDynamicObject(MovingHay[10], -957.19, 763.71, 116.86, 4.0);
			else MoveDynamicObject(MovingHay[10], -957.19, 763.71, 117.86, 4.0);
		}
		else if(objectid == MovingHay[11])
		{
			GetDynamicObjectPos(objectid, Haypos[0], Haypos[1], Haypos[2]);
			if(Haypos[2] == 119.86) MoveDynamicObject(MovingHay[11], -954.64, 760.64, 116.86, 4.0);
			else MoveDynamicObject(MovingHay[11], -954.64, 760.64, 119.86, 4.0);
		}
		else if(objectid == MovingHay[12])
		{
			GetDynamicObjectPos(objectid, Haypos[0], Haypos[1], Haypos[2]);
			if(Haypos[2] == 118.86) MoveDynamicObject(MovingHay[12], -952.08, 757.49, 116.86, 4.0);
			else MoveDynamicObject(MovingHay[12], -952.08, 757.49, 118.86, 4.0);
		}



		else if(objectid == MovingHay2[0])
		{
			GetDynamicObjectPos(objectid, Haypos[0], Haypos[1], Haypos[2]);
			if(Haypos[2] == 999.60822) MoveDynamicObject(MovingHay2[0], Haypos[0], Haypos[1], Haypos[2]-10.0, 4.0);
			else MoveDynamicObject(MovingHay2[0], Haypos[0], Haypos[1], 999.60822, 4.0);
		}


		else if(objectid == MovingHay2[1])
		{
			GetDynamicObjectPos(objectid, Haypos[0], Haypos[1], Haypos[2]);
			if(Haypos[2] == 1001.10822) MoveDynamicObject(MovingHay2[1], Haypos[0], Haypos[1], Haypos[2]-5.0, 4.0);
			else MoveDynamicObject(MovingHay2[1], Haypos[0], Haypos[1], 1001.10822, 4.0);
		}

		else if(objectid == MovingHay2[2])
		{
			GetDynamicObjectPos(objectid, Haypos[0], Haypos[1], Haypos[2]);
			if(Haypos[2] == 1002.10822) MoveDynamicObject(MovingHay2[2], Haypos[0], Haypos[1], Haypos[2]-3.0, 4.0);
			else MoveDynamicObject(MovingHay2[2], Haypos[0], Haypos[1], 1002.10822, 4.0);
		}

		else if(objectid == MovingHay2[3])
		{
			GetDynamicObjectPos(objectid, Haypos[0], Haypos[1], Haypos[2]);
			if(Haypos[2] == 1002.6082) MoveDynamicObject(MovingHay2[3], -349.70880, 570.71619, 992.60822, 4.0);
			else MoveDynamicObject(MovingHay2[3], -349.6611, 575.7006, 1002.6082, 4.0);
		}


		else if(objectid == MovingHay2[4])
		{
			GetDynamicObjectPos(objectid, Haypos[0], Haypos[1], Haypos[2]);
			if(Haypos[1] == 547.8131) MoveDynamicObject(MovingHay2[4], -349.7751, 562.6813, 992.6082, 4.0);
			else MoveDynamicObject(MovingHay2[4], -349.6731, 547.8131, 992.6082, 4.0);
		}

		else if(objectid == MovingHay2[5])
		{
			GetDynamicObjectPos(objectid, Haypos[0], Haypos[1], Haypos[2]);
			if(Haypos[2] ==  996.6082) MoveDynamicObject(MovingHay2[5], -349.6755, 539.5939, 992.6082, 4.0);
			else MoveDynamicObject(MovingHay2[5], -349.7370, 534.7965, 996.6082, 4.0);
		}

		else if(objectid == MovingHay2[6])
		{
			GetDynamicObjectPos(objectid, Haypos[0], Haypos[1], Haypos[2]);
			if(Haypos[1] == 514.71619) MoveDynamicObject(MovingHay2[6], Haypos[0], Haypos[1]+3.0, Haypos[2], 4.0);
			else MoveDynamicObject(MovingHay2[6], Haypos[0], 514.71619, Haypos[2], 4.0);
		}


		else if(objectid == MovingHay2[7])
		{
			GetDynamicObjectPos(objectid, Haypos[0], Haypos[1], Haypos[2]);
			if(Haypos[1] == 514.71619) MoveDynamicObject(MovingHay2[7], Haypos[0], Haypos[1]-3.0, Haypos[2], 4.0);
			else MoveDynamicObject(MovingHay2[7], Haypos[0], 514.71619, Haypos[2], 4.0);
		}


		else if(objectid == MovingHay2[8])
		{
			GetDynamicObjectPos(objectid, Haypos[0], Haypos[1], Haypos[2]);
			if(Haypos[2] == 975.69818) MoveDynamicObject(MovingHay2[8], Haypos[0], Haypos[1], Haypos[2]+3, 4.0);
			else MoveDynamicObject(MovingHay2[8], Haypos[0], Haypos[1], 975.69818, 4.0);
		}


		else if(objectid == MovingHay2[9])
		{
			GetDynamicObjectPos(objectid, Haypos[0], Haypos[1], Haypos[2]);
			if(Haypos[2] == 975.69818) MoveDynamicObject(MovingHay2[9], Haypos[0], Haypos[1], Haypos[2]-3, 4.0);
			else MoveDynamicObject(MovingHay2[9], Haypos[0], Haypos[1], 975.69818, 4.0);
		}


		else if(objectid == MovingHay2[10])
		{
			GetDynamicObjectPos(objectid, Haypos[0], Haypos[1], Haypos[2]);
			if(Haypos[2] == 975.69818) MoveDynamicObject(MovingHay2[10], Haypos[0], Haypos[1], Haypos[2]+3, 4.0);
			else MoveDynamicObject(MovingHay2[10], Haypos[0], Haypos[1], 975.69818, 4.0);
		}


		else if(objectid == MovingHay2[11])
		{
			GetDynamicObjectPos(objectid, Haypos[0], Haypos[1], Haypos[2]);
			if(Haypos[2] == 975.69818) MoveDynamicObject(MovingHay2[11], Haypos[0], Haypos[1], Haypos[2]-3, 4.0);
			else MoveDynamicObject(MovingHay2[11], Haypos[0], Haypos[1], 975.69818, 4.0);
		}


		else if(objectid == MovingHay2[12])
		{
			GetDynamicObjectPos(objectid, Haypos[0], Haypos[1], Haypos[2]);
			if(Haypos[2] == 975.69818) MoveDynamicObject(MovingHay2[12], Haypos[0], Haypos[1], Haypos[2]+3, 4.0);
			else MoveDynamicObject(MovingHay2[12], Haypos[0], Haypos[1], 975.69818, 4.0);
		}

		else if(objectid == MovingHay2[13])
		{
			GetDynamicObjectPos(objectid, Haypos[0], Haypos[1], Haypos[2]);
			if(Haypos[2] == 977.69818) MoveDynamicObject(MovingHay2[13], Haypos[0], Haypos[1], Haypos[2]-3, 4.0);
			else MoveDynamicObject(MovingHay2[13], Haypos[0], Haypos[1], 977.69818, 4.0);
		}


		else if(objectid == MovingHay2[14])
		{
			GetDynamicObjectPos(objectid, Haypos[0], Haypos[1], Haypos[2]);
			if(Haypos[2] == 977.69818) MoveDynamicObject(MovingHay2[14], Haypos[0], Haypos[1], Haypos[2]+3, 4.0);
			else MoveDynamicObject(MovingHay2[14], Haypos[0], Haypos[1], 977.69818, 4.0);
		}


		else if(objectid == MovingHay2[15])
		{
			GetDynamicObjectPos(objectid, Haypos[0], Haypos[1], Haypos[2]);
			if(Haypos[2] == 977.69818) MoveDynamicObject(MovingHay2[15], Haypos[0], Haypos[1], Haypos[2]-3, 4.0);
			else MoveDynamicObject(MovingHay2[15], Haypos[0], Haypos[1], 977.69818, 4.0);
		}


		else if(objectid == MovingHay2[16])
		{
			GetDynamicObjectPos(objectid, Haypos[0], Haypos[1], Haypos[2]);
			if(Haypos[2] == 977.69818) MoveDynamicObject(MovingHay2[16], Haypos[0], Haypos[1], Haypos[2]+3, 4.0);
			else MoveDynamicObject(MovingHay2[16], Haypos[0], Haypos[1], 977.69818, 4.0);
		}


		else if(objectid == MovingHay2[17])
		{
			GetDynamicObjectPos(objectid, Haypos[0], Haypos[1], Haypos[2]);
			if(Haypos[2] == 977.69818) MoveDynamicObject(MovingHay2[17], Haypos[0], Haypos[1], Haypos[2]-3.0, 4.0);
			else MoveDynamicObject(MovingHay2[17], Haypos[0], Haypos[1], 977.69818, 4.0);
		}


		else if(objectid == MovingHay3[10])
		{
			GetDynamicObjectPos(objectid, Haypos[0], Haypos[1], Haypos[2]);
			if(Haypos[2] == 1050.50000) MoveDynamicObject(objectid, Haypos[0], Haypos[1], Haypos[2]-10.0, 4.0);
			else MoveDynamicObject(objectid, Haypos[0], Haypos[1], Haypos[2]+10.0, 4.0);
		}
		else if(objectid == MovingHay3[11])
		{
			GetDynamicObjectPos(objectid, Haypos[0], Haypos[1], Haypos[2]);
			if(Haypos[1] == -1272.16003) MoveDynamicObject(objectid, Haypos[0], -1267.263 , Haypos[2], 4.0);
			else MoveDynamicObject(objectid, Haypos[0], -1272.16003, Haypos[2], 4.0);
		}
		else if(objectid == MovingHay3[12])
		{
			GetDynamicObjectPos(objectid, Haypos[0], Haypos[1], Haypos[2]);
			if(Haypos[2] == 1048.5000) MoveDynamicObject(objectid, Haypos[0], Haypos[1], 1054.5000, 4.0);
			else MoveDynamicObject(objectid, Haypos[0], Haypos[1], 1048.5000, 4.0);
		}
		else if(objectid == MovingHay3[1])
		{
			GetDynamicObjectPos(objectid, Haypos[0], Haypos[1], Haypos[2]);
			if(Haypos[2] == 1037.00000) MoveDynamicObject(objectid, Haypos[0], Haypos[1] , 1032.00000, 4.0);
			else MoveDynamicObject(objectid, Haypos[0], Haypos[1], 1037.00000, 4.0);
		}
		else if(objectid == MovingHay3[3])
		{
			GetDynamicObjectPos(objectid, Haypos[0], Haypos[1], Haypos[2]);
			if(Haypos[2] == 1037.00000) MoveDynamicObject(objectid, Haypos[0], Haypos[1] , 1042.00000, 4.0);
			else MoveDynamicObject(objectid, Haypos[0], Haypos[1], 1037.00000, 4.0);
		}
/*
	    for(new x=0; x<10; x++)
	    {
		   if(x != 1 && x!= 3 && objectid == MovingHay3[x])
		   {
			   new Float:pos[6];
			   GetDynamicObjectPos(objectid, pos[0], pos[1], pos[2]);
			   GetDynamicObjectRot(objectid, pos[3], pos[4], pos[5]);

     	       haytest[x]++;
    	       if(haytest[x] == 100) haytest[x]=0;
			   if(isodd(haytest[x])) MoveDynamicObject(objectid, pos[0], pos[1], pos[2]+0.1, 0.05, pos[3]+180.0, pos[4], pos[5]);
			   else  MoveDynamicObject(objectid, pos[0], pos[1], pos[2]-0.1, 0.05, pos[3]+180.0, pos[4], pos[5]);
		   }
	    }
*/
	}
    for(new i=0;i<6;i++)
    {
		if(objectid == xMasPickUp[i])
		{
    		new Float:x, Float:y, Float:z;
 			GetDynamicObjectPos(xMasPickUp[i], x, y, z);
			if(IsValidDynamicObject(xMasPickUp[i])) DestroyDynamicObject(xMasPickUp[i]);
			if(Party == 1) xMasPickUp[i] = CreatePickup(19055+(random(3)), 2, x, y, z, 0);
		}
    }
	if(objectid == Balloon)
	{
		if(BalloonMoving == 22)
		{
		  BalloonMoving=0;
		  return 0;
		}
		else
		{
		  BalloonMoving++;
    	  MoveDynamicObject(Balloon, BallonCords[BalloonMoving][0], BallonCords[BalloonMoving][1], BallonCords[BalloonMoving][2], 5.00);
          BalloonMoving = 1;
		}
	}
    OnFireWorkMove(objectid);
    return 1;
}

public OnObjectMoved(objectid)
{
    if(objectid == MovingLand)
	{
		 new Float:x, Float:y, Float:z;
		 GetObjectPos(MovingLand, x, y, z);
		 if(x==5136.4902) MoveObject(MovingLand, 5048.9819, -3843.5554, 1.0000, 15.00, 0.0, 0.00, 360.0);
		 else MoveObject(MovingLand, 5136.4902, -2649.7905, 1.0000, 15.00, 0.0, 0.00, 0.0);
	}
	else if(objectid == Ship2)
	{
          ShipPartyCount++;
          MoveObject(Ship1, Titanic1Coords[ShipPartyCount][0], Titanic1Coords[ShipPartyCount][1], Titanic1Coords[ShipPartyCount][2], 10.00, Titanic1Coords[ShipPartyCount][3], Titanic1Coords[ShipPartyCount][4], Titanic1Coords[ShipPartyCount][5]);
          MoveObject(Ship2, Titanic2Coords[ShipPartyCount][0], Titanic2Coords[ShipPartyCount][1], Titanic2Coords[ShipPartyCount][2], 10.00, Titanic2Coords[ShipPartyCount][3], Titanic2Coords[ShipPartyCount][4], Titanic2Coords[ShipPartyCount][5]);
          MoveObject(Ship3, Titanic3Coords[ShipPartyCount][0], Titanic3Coords[ShipPartyCount][1], Titanic3Coords[ShipPartyCount][2], 10.00, Titanic3Coords[ShipPartyCount][3], Titanic3Coords[ShipPartyCount][4], Titanic3Coords[ShipPartyCount][5]);
		  if(ShipPartyCount == 5)
		  {
         	new Float:x, Float:y, Float:z;
		    GetObjectPos(Ship2, x, y, z);
      		foreach(new playerid : Player)
	      	{
                	if(IsPlayerInRangeOfPoint(playerid, 100.00, x, y, z))
                	{
                 	  SetPlayerWeather(playerid , 16);
                 	  SendClientMessage(playerid, RED, "The weather has started to change!");
                    }
			}
		  }
		  if(ShipPartyCount == 6)
		  {
         	new Float:x, Float:y, Float:z;
		    GetObjectPos(Ship2, x, y, z);
      		foreach(new playerid : Player)
	      	{
                	if(IsPlayerInRangeOfPoint(playerid, 100.00, x, y, z))
					{
                 	   StopAudioStreamForPlayer(playerid);
                 	   PlayAudioStreamForPlayer(playerid, "http://dl.dropbox.com/u/52869044/Alarm%20Sound%20Navy.mp3");
                 	   SendClientMessage(playerid, RED, "Danger... The Ship has crashed!");
                    }

			}
		  }
		  if(ShipPartyCount == 9)
		  {
			SetTimer("resetship", 10*1000, false);

		  }
	}
	return 1;
}
forward StartLms();
public StartLms()
{
	new count =Iter_Count(InLms);
    if(count < LMS_Min)
	{
		LMS = 0;
		SendClientMessageToAll(-1, "{9ACC89}» LMS « {70AB5C}The Last Man Standing has been cancelled {9ACC89}(Not enough players)");
		foreach(new playerid : InLms)
		{
			ResetPlayerWeaponsEX(playerid);
		 	DeletePVar(playerid, "LMSKILLES");
		 	DeletePVar(playerid, "Signed4Lms");

		    for(new x=0; x<8;x++) PlayerTextDrawHide(playerid, DMpTD[playerid][x]);

			TogglePlayerControllable2(playerid, 1);
		    LoadPlayerCoords(playerid);
			SetPlayerVirtualWorldEX(playerid, 0);
		    SetCameraBehindPlayer(playerid);
		}
		KillTimer(LmsStartTimer);
		LMS=0;
		KillTimer(LmsTimer);
		LmsTimer=-1;
		LmsStartTimer=-1;
		KillTimer(LmsStartTimer69);
		LmsStartTimer69=-1;
		Iter_Clear(InLms);
	}
	else
	{
 	   LMS=2;
	   LmsPlayers = count;

       SendClientMessageToAll(-1, "{9ACC89}» LMS « {70AB5C}The Last Man Standing has been started");
	   foreach(new playerid : InLms)
	   {
		SetCameraBehindPlayer(playerid);
 	    CountDown(playerid, 5, 1);
        for(new x=0; x<11; x++) SetPlayerSkillLevel(playerid, x, 999);
	   }
	   LmsTimer = SetTimer("LmsUpdate", 1000, true);
	}
	return 1;
}
forward LmsUpdate();
public LmsUpdate()
{
   if(LMS == 2)
   {
       new str[256];
	   new count= Iter_Count(InLms);
	   if(count <= 0)
	   {
	     LMS=0;
		 KillTimer(LmsTimer);
		 KillTimer(LmsStartTimer);
		 LmsTimer=-1;
		 LmsStartTimer=-1;
	   }
	   else if(count == 1 && LMS_Min != 1)
	   {
	       foreach(new playerid : InLms)
	       {
			  if(count == 1 && LMS_Min != 1)
			  {
				if(EventType==800 && EventStarted == 1) EventWinner(playerid);

				ResetPlayerWeaponsEX(playerid);
				DeletePVar(playerid, "LMSKILLES");
				DeletePVar(playerid, "Signed4Lms");

				for(new x=0; x<8;x++) PlayerTextDrawHide(playerid, DMpTD[playerid][x]);

				TogglePlayerControllable2(playerid, 1);
				LoadPlayerCoords(playerid);
				SetPlayerVirtualWorldEX(playerid, 0);
				SetCameraBehindPlayer(playerid);

				format(str, sizeof(str), "{9ACC89}» LMS « {70AB5C}%s has won the Last Man Standing!", pName[playerid]);
				GivePlayerMoneyEX(playerid, 12000 * LmsPlayers);
				SetPlayerVirtualWorldEX(playerid, 0);
				SendClientMessageToAll(-1, str);
				ScoreTDupdate(playerid, 5);
				PlayerInfo[playerid][pWLms]++;
				new Query[128];
				format(Query, sizeof(Query), "UPDATE `users` SET `LmsWon` = %d WHERE `Name` = '%s'", PlayerInfo[playerid][pWLms], pName[playerid]);
				mysql_query(GTADM, Query);
				if(PlayerInfo[playerid][pWLms] >= 20) GiveMedal(playerid, 89);
				break;
			  }
	       }
		   LMS=0;
		   KillTimer(LmsTimer);
		   KillTimer(LmsStartTimer);
		   LmsTimer=-1;
		   LmsStartTimer=-1;
		   Iter_Clear(InLms);
	   }
	   else
	   {
	       foreach(new playerid : InLms)
	       {
              if(playerid < MAX_PLAYERS)
              {
	              format(str, sizeof(str), "~r~Players: ~r~~h~%d", count);
	              PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][4], str);
	          }
		   }

	   }
   }
   return 1;
}
stock RemoveFromFallout(playerid, Type)
{
  Streamer_ToggleIdleUpdate(playerid, false);
  if(GetPVarInt(playerid, "inFallout"))
  {
    new str[256];
    if( FallOut > 1 )
    {

         if(Type == 1) format( str, sizeof( str ), ""fOUT2_"» Fallout « "fOUT_"%s has left the Fallout minigame", pName[playerid]);
         else if(Type == 0)  PlayerPlaySound(playerid, 2602 , 0.0, 0.0, 0.0), format( str, sizeof( str ), ""fOUT2_"» Fallout « "fOUT_"%s has been dropped out of the Fallout minigame", pName[playerid]);
         SendClientMessageToAll( fOUT2, str );
         Iter_Remove(FalloutPlayers, playerid );
         DeletePVar(playerid, "inFallout");
         DeletePVar(playerid, "falloutplace");
		 DeletePVar(playerid, "typedfallout");

         SetPlayerCameraPos(playerid, 113.3811, 66.5014, 571.3477);
         SetPlayerCameraLookAt(playerid, 113.3948, 67.4999, 570.6075);
	     if(IsPlayerConnected(playerid)) SetTimerEx( "f_RespawnPlayer", 2000, 0, "i", playerid );

    }
    else
    {
        Iter_Remove(FalloutPlayers, playerid );
        DeletePVar(playerid, "inFallout");
        DeletePVar(playerid, "falloutplace");
    }
  }
  return 1;
}
stock Remove_From_Lms(playerid, Type)
{

	ResetPlayerWeaponsEX(playerid);
	Iter_Remove(InLms, playerid);
 	DeletePVar(playerid, "LMSKILLES");
 	DeletePVar(playerid, "Signed4Lms");

    for(new x=0; x<8;x++) PlayerTextDrawHide(playerid, DMpTD[playerid][x]);

	TogglePlayerControllable2(playerid, 1);
	if(Iter_Count(InLms) == 0)
	{
		KillTimer(LmsStartTimer);
		LMS=0;
		KillTimer(LmsTimer);
		LmsTimer=-1;
		LmsStartTimer=-1;
		KillTimer(LmsStartTimer69);
        LmsStartTimer69=-1;
    }
    LoadPlayerCoords(playerid);
	SetPlayerVirtualWorldEX(playerid, 0);
    SetCameraBehindPlayer(playerid);
	new str[128];
	switch(Type)
	{
		case 1:
		{
		  format(str, sizeof(str), "{9ACC89}» LMS « {70AB5C}%s has been dropped out of the Last Man Standing", pName[playerid]);
		  SendClientMessageToAll(-1, str);
		  //TextDrawHideForPlayer(playerid, LMSwaiting);
		}
		case 2:
		{
		   format(str, sizeof(str), "{9ACC89}» LMS « {70AB5C}%s has left the Last Man Standing {9ACC89}(/Exit)", pName[playerid]);
		   SendClientMessageToAll(-1, str);
		   //TextDrawHideForPlayer(playerid, LMSwaiting);
		}
	}
}


stock CloseDerbyGates()
{

	SetDynamicObjectPos(DerbyGate[0], -1461.79199219, 940.51226807, 1036.00000000);
	SetDynamicObjectPos(DerbyGate[1], -1443.11071777, 935.84283447, 1037.28759766);
	SetDynamicObjectPos(DerbyGate[2], -1423.55773926, 933.88006592, 1036.00000000);
	SetDynamicObjectPos(DerbyGate[3], -1361.99560547, 938.50000000, 1037.23083496);
    SetDynamicObjectPos(DerbyGate[4], -1350.04333496, 939.62182617, 1037.23083496);
	SetDynamicObjectPos(DerbyGate[5], -1337.94653320, 942.79498291, 1037.23083496);
	SetDynamicObjectPos(DerbyGate[6], -1484.53845215, 955.83947754, 1037.76428223);
	SetDynamicObjectPos(DerbyGate[7], -1494.19995117, 963.87017822, 1037.94458008);
	SetDynamicObjectPos(DerbyGate[8], -1502.45458984, 973.35998535, 1037.94458008);
	SetDynamicObjectPos(DerbyGate[9], -1325.87170410, 947.76000977, 1037.23083496);

}
stock OpenDerbyGates()
{
   MoveDynamicObject(DerbyGate[0], -1461.79199219, 940.51226807, 1030, 1);
   MoveDynamicObject(DerbyGate[1], -1443.11071777, 935.84283447, 1030, 1);
   MoveDynamicObject(DerbyGate[2], -1423.55773926, 933.88006592, 1030, 1);
   MoveDynamicObject(DerbyGate[3], -1361.99560547, 938.50000000, 1030, 1);
   MoveDynamicObject(DerbyGate[4], -1350.04333496, 939.62182617, 1030, 1);
   MoveDynamicObject(DerbyGate[5], -1337.94653320, 942.79498291, 1030, 1);
   MoveDynamicObject(DerbyGate[6], -1484.53845215, 955.83947754, 1030, 1);
   MoveDynamicObject(DerbyGate[7], -1494.19995117, 963.87017822, 1030, 1);
   MoveDynamicObject(DerbyGate[8], -1502.45458984, 973.35998535, 1030, 1);
   MoveDynamicObject(DerbyGate[9], -1325.87170410, 947.76000977, 1030, 1);

}

forward SpeedOMeter_FPS_Sams();
public SpeedOMeter_FPS_Sams()
{
    OutRun();
	foreach(new playerid : pNos)
	{
	        new Float:Nitro = GetPVarFloat(playerid, "Nitro");
	        if(Nitro > 0)
	        {
	                Nitro -= 2.3;
	                SetPVarFloat(playerid, "Nitro", Nitro);
	        }
	        else if(Nitro <= 0)
	        {
	                Nitro = 0;
	                SetPVarFloat(playerid, "Nitro", Nitro);
	                RemoveVehicleComponent(GetPlayerVehicleID(playerid), 1010);
	        }

	}

  	foreach(new playerid : Player)
	{
	  #if defined USEDRIFT
	  if(Iter_Contains(Drifter, playerid)) AngleUpdate(playerid);
	  #endif
      if(Spawned[playerid]==1)
	  {
		if((GetPlayerState(playerid) ==2))
		{
			Driving[playerid]=1;
			new string[54];
			new v=GetPlayerVehicleID(playerid);
		    new m=GetVehicleModel(v);
		    if(m == 425 || m == 520 || m == 432 || m == 447)
		    {
				  new k=GetPlayerGangZone(playerid);
				  if(k > 0)
				  {
			        if(aZone[k] > 0)
				    {
	                  TrollArmed(playerid);
	   				  SendInfoText(playerid, 5000, "~r~Do not use armed vehicles in a gangwar");
				    }
				  }
		    }

			new Float:health;
			GetVehicleHealth(v, health);
			if(GOD[playerid] == 1) RepairVehicle(v);
			new KMH = GetPlayerSpeed(playerid, 0);
			pKMH[playerid]=KMH;
			new maxs=GetVehicleMaxSpeed(v)+60;//50
			if(KMH > (maxs))
			{
                 if (funcidx("OnPlayerSpeedHack") != -1)
                        CallLocalFunction("OnPlayerSpeedHack", "ddd", playerid, v, KMH);
			}
			if(KMH > 150 && rTest ==5) rTestWinner(playerid);

//
			new daga;
			if(KMH >= maxs) daga = 87;
			else daga=floatround(KMH/(maxs/85.7142857143));
            PlayerTextDrawTextSize(playerid, SpeedO[playerid][5], 262.000000+daga, 23.000000);
            format(string, sizeof(string), "%d KM/H", KMH);
            PlayerTextDrawSetString(playerid, SpeedO[playerid][6], string);
            new baga=floatround(health/4);
			switch(floatround(health))
			{
			  case 500..5000:  PlayerTextDrawColor(playerid, SpeedO[playerid][0], RGBAToHex(baga-250, 255, 0, 255));
			  case 250..499: PlayerTextDrawColor(playerid, SpeedO[playerid][0], RGBAToHex(255, baga, 0, 255));
			  default: PlayerTextDrawColor(playerid, SpeedO[playerid][0], RGBAToHex(255, baga, 0, 255));
			}

            new Float:Nitro = GetPVarFloat(playerid, "Nitro");
			if(Nitro >= 100) Nitro = 87;
			else Nitro=floatround(Nitro/1.14942528736);
            if(CarNitro[v] == 0) Nitro = 0;
            PlayerTextDrawTextSize(playerid, SpeedO[playerid][8], 262.000000+Nitro, 23.000000);


		    if(pSpeedo[playerid] != 255 && HideShit[playerid] == 0)  for(new x=0; x<9; x++) if(x != 1) PlayerTextDrawShow(playerid, SpeedO[playerid][x]);
            if(IsValidNosVehicle(v) && GetPVarFloat(playerid, "Nitro") < 100 && CarNitro[v] > 0)
            {
		    	if(!Iter_Contains(pNos, playerid))
				{
                  if(PowerUpPlayer[3]==playerid && !GetPVarInt(playerid, "RACER") && GetPlayerVirtualWorld(playerid) == 0)  SetPVarFloat(playerid, "Nitro", GetPVarFloat(playerid, "Nitro")+0.8);
				  else SetPVarFloat(playerid, "Nitro", GetPVarFloat(playerid, "Nitro")+0.4);
				}
            }
		}
		else
		{
		   if(Driving[playerid] == 1)
		   {
				Driving[playerid]=0;
	            for(new x=0; x<9; x++) PlayerTextDrawHide(playerid, SpeedO[playerid][x]);
		   }
		}
		if(CanFps[playerid]==1)
		{
			drunkLevel[playerid] = GetPlayerDrunkLevel(playerid);
			if(drunkLevel[playerid] < 100) SetPlayerDrunkLevel(playerid, 2000);
			else
			{
			    if(lastDrunkLeve[playerid] != drunkLevel[playerid])
	 	        {
			       fps[playerid] = (lastDrunkLeve[playerid] - drunkLevel[playerid]);
			       lastDrunkLeve[playerid]=drunkLevel[playerid];
			    }
		        if((fps[playerid] > 0) && (fps[playerid] < 200))
			    {
	                new string[16];
	                format(string, sizeof(string), "~r~FPS: ~w~%d", fps[playerid]);
	                PlayerTextDrawSetStringEX(playerid, FPS[playerid], string);
			    }


			}
		}

	  }
 //Sams
      SamsUpdate(playerid);
 //Pause
	  if(GetTickCount()-g_Paused[playerid] > TIME_DIF && g_Requesting[playerid] != true && g_IsPaused[playerid] != true && InvalidStates(playerid) != 1)
	  {
	    	OnPlayerPause(playerid);
		    g_IsPaused[playerid] = true;
	  }
	  else if(GetTickCount()-g_Paused[playerid] < TIME_DIF && g_Requesting[playerid] != true && g_IsPaused[playerid] != false && InvalidStates(playerid) != 1)
      {
	     	 OnPlayerUnPause(playerid);
	  	  	 g_IsPaused[playerid] = false;
   	  }
	}
	return 1;
}
stock SetObjectFacePlayer(Float:Px, Float:Py, Float:x, Float:y)
{
    new Float: Pa;
    Pa = floatabs(atan((y-Py)/(x-Px)));
    if(x <= Px && y >= Py) Pa = floatsub(180, Pa);
    else if(x < Px && y < Py) Pa = floatadd(Pa, 180);
    else if(x >= Px && y <= Py) Pa = floatsub(360.0, Pa);
    Pa = floatsub(Pa, 90.0);
    if(Pa >= 360.0) Pa = floatsub(Pa, 360.0);
    return floatround(Pa);
}
stock GetClanName(playerid)
{
    new Clan[MAX_PLAYER_NAME] = "Unknown";
    if ( strfind( pName[playerid] , "[" , true ) == -1 ) return Clan;
    if ( strfind( pName[playerid] , "]" , true ) == -1 ) return Clan;
    strmid( Clan , pName[playerid] , strfind( pName[playerid] , "[" , true )+1 , strfind( pName[playerid] , "]" , true ) , sizeof( Clan ) );
    return Clan;
}
stock ResetSpawnInfo(playerid)
{
  new DMID = 0;
  if(GetPVarInt(playerid, "INDM")) DMID = GetPVarInt(playerid, "INDM");
  new rand = random(sizeof(Dm1SP));
  switch(DMID)
  {
   case 1: SetSpawnInfo( playerid, 0, GetPlayerSkin(playerid),  Dm1SP[rand][0], Dm1SP[rand][1], Dm1SP[rand][2], Dm1SP[rand][3], 27, 9999, 9, 9999, 23, 9999 );
   case 2: SetSpawnInfo( playerid, 0, GetPlayerSkin(playerid),  Dm2SP[rand][0], Dm2SP[rand][1], Dm2SP[rand][2], Dm2SP[rand][3], 24, 9999, 34, 9999, 27, 9999 );
   case 3: SetSpawnInfo( playerid, 0, GetPlayerSkin(playerid),  Dm3SP[rand][0], Dm3SP[rand][1], Dm3SP[rand][2], Dm3SP[rand][3], 26, 9999, 28, 9999, 0, 9999 );
   case 4: SetSpawnInfo( playerid, 0, GetPlayerSkin(playerid),  Dm4SP[rand][0], Dm4SP[rand][1], Dm4SP[rand][2], Dm4SP[rand][3], 35, 9999, 37, 9999, 16, 9999 );
   case 5: rand=random(sizeof(Dm5SP)), SetSpawnInfo( playerid, 0, GetPlayerSkin(playerid),  Dm5SP[rand][0], Dm5SP[rand][1], Dm5SP[rand][2], Dm5SP[rand][3], 39, 9999, 38, 9999, 0, 9999 );
   case 6: SetSpawnInfo( playerid, 0, GetPlayerSkin(playerid),  Dm6SP[rand][0], Dm6SP[rand][1], Dm6SP[rand][2], Dm6SP[rand][3], 1, 9999, 0, 0, 0, 0 );
   case 7: SetSpawnInfo( playerid, 0, GetPlayerSkin(playerid),  Dm7SP[rand][0], Dm7SP[rand][1], Dm7SP[rand][2], Dm7SP[rand][3], 34, 9999, 31, 9999, 16, 9999 );
   case 8: SetSpawnInfo( playerid, 0, GetPlayerSkin(playerid),  Dm8SP[rand][0], Dm8SP[rand][1], Dm8SP[rand][2], Dm8SP[rand][3], 24, 9999, 25, 9999, 27, 9999 );
   case 9: SetSpawnInfo( playerid, 0, GetPlayerSkin(playerid),  Dm9SP[rand][0], Dm9SP[rand][1], Dm9SP[rand][2], Dm9SP[rand][3], 26, 9999, 0, 0, 0, 0 );
   case 10: SetSpawnInfo( playerid, 0, GetPlayerSkin(playerid), Dm10SP[rand][0], Dm10SP[rand][1], Dm10SP[rand][2], Dm10SP[rand][3], 0, 0, 0, 0, 22+random(12), 9999 );
   case 11: SetSpawnInfo( playerid, 0, GetPlayerSkin(playerid), Dm11SP[rand][0], Dm11SP[rand][1], Dm11SP[rand][2], Dm11SP[rand][3], 24, 9999, 18, 9999, 29, 9999 );
   case 12: SetSpawnInfo( playerid, 0, GetPlayerSkin(playerid), Dm12SP[rand][0], Dm12SP[rand][1], Dm12SP[rand][2], Dm12SP[rand][3], 37, 9999, 18, 9999, 42, 9999 );
   case 13: SetSpawnInfo( playerid, 0, GetPlayerSkin(playerid), Dm13SP[rand][0], Dm13SP[rand][1], Dm13SP[rand][2], Dm13SP[rand][3], 32, 9999, 32, 9999, 32, 9999 );
   case 14: SetSpawnInfo( playerid, 0, GetPlayerSkin(playerid), Dm14SP[rand][0], Dm14SP[rand][1], Dm14SP[rand][2], Dm14SP[rand][3], 33, 9999, 30, 9999, 24, 9999 );
   case 15: SetSpawnInfo( playerid, 0, GetPlayerSkin(playerid), Dm15SP[rand][0], Dm15SP[rand][1], Dm15SP[rand][2], Dm15SP[rand][3], 34, 9999, 31, 9999, 4, 9999 );
   case 16: SetSpawnInfo( playerid, 0, GetPlayerSkin(playerid), wwcoords[rand][0], wwcoords[rand][1], wwcoords[rand][2], wwcoords[rand][3], 26, 9999, 32, 9999, 0, 9999 );
   case 17: SetSpawnInfo( playerid, 0, GetPlayerSkin(playerid), Dm17SP[rand][0], Dm17SP[rand][1], Dm17SP[rand][2], Dm17SP[rand][3], 16, 9999, 30, 9999, 34, 9999 );
   case 18:
   {
       switch(GetGunGameLevel(playerid))
       {
		  case 1:SetSpawnInfo( playerid, 0, GetPlayerSkin(playerid), Dm18SP[rand][0], Dm18SP[rand][1], Dm18SP[rand][2], Dm18SP[rand][3], 9, 9999, 0, 0, 0, 0 );
		  case 2:SetSpawnInfo( playerid, 0, GetPlayerSkin(playerid), Dm18SP[rand][0], Dm18SP[rand][1], Dm18SP[rand][2], Dm18SP[rand][3], 22, 9999, 0, 0, 0, 0 );
		  case 3:SetSpawnInfo( playerid, 0, GetPlayerSkin(playerid), Dm18SP[rand][0], Dm18SP[rand][1], Dm18SP[rand][2], Dm18SP[rand][3], 23, 9999, 0, 0, 0, 0 );
		  case 4:SetSpawnInfo( playerid, 0, GetPlayerSkin(playerid), Dm18SP[rand][0], Dm18SP[rand][1], Dm18SP[rand][2], Dm18SP[rand][3], 24, 9999, 0, 0, 0, 0 );
		  case 5:SetSpawnInfo( playerid, 0, GetPlayerSkin(playerid), Dm18SP[rand][0], Dm18SP[rand][1], Dm18SP[rand][2], Dm18SP[rand][3], 25, 9999, 0, 0, 0, 0 );
		  case 6:SetSpawnInfo( playerid, 0, GetPlayerSkin(playerid), Dm18SP[rand][0], Dm18SP[rand][1], Dm18SP[rand][2], Dm18SP[rand][3], 27, 9999, 0, 0, 0, 0 );
		  case 7:SetSpawnInfo( playerid, 0, GetPlayerSkin(playerid), Dm18SP[rand][0], Dm18SP[rand][1], Dm18SP[rand][2], Dm18SP[rand][3], 29, 9999, 0, 0, 0, 0 );
		  case 8:SetSpawnInfo( playerid, 0, GetPlayerSkin(playerid), Dm18SP[rand][0], Dm18SP[rand][1], Dm18SP[rand][2], Dm18SP[rand][3], 26, 9999, 0, 0, 0, 0 );
		  case 9:SetSpawnInfo( playerid, 0, GetPlayerSkin(playerid), Dm18SP[rand][0], Dm18SP[rand][1], Dm18SP[rand][2], Dm18SP[rand][3], 31, 9999, 0, 0, 0, 0 );
		  case 10:SetSpawnInfo( playerid, 0, GetPlayerSkin(playerid), Dm18SP[rand][0], Dm18SP[rand][1], Dm18SP[rand][2], Dm18SP[rand][3], 34, 9999, 0, 0, 0, 0 );
		  case 11:SetSpawnInfo( playerid, 0, GetPlayerSkin(playerid), Dm18SP[rand][0], Dm18SP[rand][1], Dm18SP[rand][2], Dm18SP[rand][3], 16, 9999, 0, 0, 0, 0 );
		  case 12:SetSpawnInfo( playerid, 0, GetPlayerSkin(playerid), Dm18SP[rand][0], Dm18SP[rand][1], Dm18SP[rand][2], Dm18SP[rand][3], 38, 9999, 0, 0, 0, 0 );
       }

   }
   case 19:
   {
	 rand=random(5);
	 switch(random(2))
	 {
        case 0:SetSpawnInfo( playerid, 0, GetPlayerSkin(playerid), BFCoords[rand][0], BFCoords[rand][1], BFCoords[rand][2], BFCoords[rand][3], 16, 9999, 28, 9999, 31, 9999 );
        case 1:SetSpawnInfo( playerid, 0, GetPlayerSkin(playerid), BFCoords[rand][0], BFCoords[rand][1], BFCoords[rand][2], BFCoords[rand][3], 16, 9999, 27, 9999, 31, 9999 );
	 }
   }
   /*case 20:
   {
     SetSpawnInfo( playerid, 0, GetPlayerSkin(playerid), Dm20SP[rand][0], Dm20SP[rand][1], Dm20SP[rand][2], Dm20SP[rand][3], 0, 0, 0, 0, 0, 0);
	 SetPlayerHealth(playerid, 10);
   }*/
   default:
   {
	 if(!GetPVarInt(playerid, "TDM"))
	 {
      rand = random(sizeof(Rs));
	  if(PlayerInfo[playerid][pHouse] > 0)
	  {
	     new h=PlayerInfo[playerid][pHouse];
	     SetSpawnInfo( playerid, 0, GetPlayerSkin(playerid), hInfo[h][sX], hInfo[h][sY], hInfo[h][sZ], hInfo[h][SpawnA], 0, 0, 0, 0, 0, 0);
	  }
	  else SetSpawnInfo(playerid, 0, GetPlayerSkin(playerid), Rs[rand][0], Rs[rand][1], Rs[rand][2], Rs[rand][3], 0, 0, 0, 0, 0, 0);
	 }
   }
  }
  if(GetPVarInt(playerid, "TDM") == 1)
  {
	  new team = GetPVarInt(playerid, "TDMTeam");
	  if(team == 3) SetSpawnInfo( playerid, 3, GetPlayerSkin(playerid), TDm1SP1[rand][0], TDm1SP1[rand][1], TDm1SP1[rand][2], TDm1SP1[rand][3], 24, 9999, 34, 9999, 0, 0);
	  else if(team == 4)  SetSpawnInfo( playerid, 4, GetPlayerSkin(playerid), TDm1SP2[rand][0], TDm1SP2[rand][1], TDm1SP2[rand][2], TDm1SP2[rand][3], 24, 9999, 34, 9999, 0, 0);
  }
  else if(GetPVarInt(playerid, "TDM") == 2)
  {
	  new team = GetPVarInt(playerid, "TDMTeam");
	  if(team == 3) SetSpawnInfo( playerid, 3, GetPlayerSkin(playerid), TDm2SP1[rand][0], TDm2SP1[rand][1], TDm2SP1[rand][2], TDm2SP1[rand][3], 26, 9999, 32, 9999, 22, 9999);
	  else if(team == 4)  SetSpawnInfo( playerid, 4, GetPlayerSkin(playerid), TDm2SP2[rand][0], TDm2SP2[rand][1], TDm2SP2[rand][2], TDm2SP2[rand][3], 26, 9999, 28, 9999, 22, 9999);
  }
  else if(GetPVarInt(playerid, "TDM") == 3)
  {
	  new team = GetPVarInt(playerid, "TDMTeam");
	  if(team == 3) SetSpawnInfo( playerid, 3, GetPlayerSkin(playerid), TDm3SP1[rand][0], TDm3SP1[rand][1], TDm3SP1[rand][2], TDm3SP1[rand][3], 31, 9999, 24, 9999, 27, 9999);
	  else if(team == 4)  SetSpawnInfo( playerid, 4, GetPlayerSkin(playerid), TDm3SP2[rand][0], TDm3SP2[rand][1], TDm3SP2[rand][2], TDm3SP2[rand][3], 30, 9999, 24, 9999, 27, 9999);
  }
  else if(GetPVarInt(playerid, "WW"))
  {
    new rand2=random(sizeof(wwcoords));
    SetSpawnInfo( playerid, 0, GetPlayerSkin(playerid),  wwcoords[rand2][0], wwcoords[rand2][1], wwcoords[rand2][2], wwcoords[rand2][3], 24, 99999, 0, 0, 0, 0);
  }
  else if(GetPVarInt(playerid, "WW2"))
  {
    new rand2=random(sizeof(ww2coords));
    SetSpawnInfo( playerid, 0, GetPlayerSkin(playerid),  ww2coords[rand2][0], ww2coords[rand2][1], ww2coords[rand2][2], ww2coords[rand2][3], 24, 99999, 34, 99999, 0, 0);
  }
  else if(InCW[playerid] == 1) SetPlayerColor(playerid, PlayerColors[22]);
  else if(InCW[playerid] == 2) SetPlayerColor(playerid, PlayerColors[2]);
  else if(InCW[playerid] == 3) SetPlayerColor(playerid, PlayerColors[10]);
  else if(PlayerInfo[playerid][pGang] >= 0) SetPlayerColor(playerid, PlayerColors[GangInfo[PlayerInfo[playerid][pGang]][gColor]]);
}
stock Send_To_TDm( playerid , TDMID)
{
  for(new x=0; x<11; x++) SetPlayerSkillLevel(playerid, x, 999);
  HidePlayerDialog(playerid);
  HidePlayerMenu(playerid);
  SetPlayerHealth(playerid , 100);
  ResetPlayerWeaponsEX(playerid);
  new rand= random( 3 );
  SendpInfo(playerid, "Type ~r~/Exit ~y~to leave the Deathmatch", 5000);
  switch(TDMID)
  {
   case 1:
   {
	SetPlayerVirtualWorldEX(playerid, 123);
	GivePlayerWeaponEX(playerid, 24, 9999);
	GivePlayerWeaponEX(playerid, 34, 9999);
	if(GetPlayerTeam(playerid) == 3) SetPlayerColor( playerid, 0xE01B1BFF ), SetPlayerPos(playerid, TDm1SP1[rand][0], TDm1SP1[rand][1], TDm1SP1[rand][2]), SetPlayerFacingAngle(playerid, TDm1SP1[rand][3]);
	else if(GetPlayerTeam(playerid) == 4)  SetPlayerColor( playerid, 0x6A1BE0FF ), SetPlayerPos(playerid, TDm1SP2[rand][0], TDm1SP2[rand][1], TDm1SP2[rand][2]), SetPlayerFacingAngle(playerid, TDm1SP2[rand][3]);
	SetCameraBehindPlayer(playerid);
	SetPlayerInterior(playerid, 0);
   }
   case 2:
   {
    SetPlayerVirtualWorldEX(playerid, 124);
	GivePlayerWeaponEX(playerid, 26, 9999);
	GivePlayerWeaponEX(playerid, 22, 9999);
	if(GetPlayerTeam(playerid) == 3)  SetPlayerColor( playerid, 0xE01B1BFF ), GivePlayerWeaponEX(playerid, 32, 9999), SetPlayerPos(playerid, TDm2SP1[rand][0], TDm2SP1[rand][1], TDm2SP1[rand][2]), SetPlayerFacingAngle(playerid, TDm2SP1[rand][3]);
	else if(GetPlayerTeam(playerid) == 4)   SetPlayerColor( playerid, 0x6A1BE0FF ), GivePlayerWeaponEX(playerid, 28, 9999), SetPlayerPos(playerid, TDm2SP2[rand][0], TDm2SP2[rand][1], TDm2SP2[rand][2]), SetPlayerFacingAngle(playerid, TDm2SP2[rand][3]);
	SetCameraBehindPlayer(playerid);
	SetPlayerInterior(playerid, 0);
   }
   case 3:
   {
    SetPlayerVirtualWorldEX(playerid, 125);
	GivePlayerWeaponEX(playerid, 27, 9999);
	GivePlayerWeaponEX(playerid, 24, 9999);
	if(GetPlayerTeam(playerid) == 3)  SetPlayerColor( playerid, 0xE01B1BFF ), GivePlayerWeaponEX(playerid, 31, 9999), SetPlayerPos(playerid, TDm3SP1[rand][0], TDm3SP1[rand][1], TDm3SP1[rand][2]), SetPlayerFacingAngle(playerid, TDm3SP1[rand][3]);
	else if(GetPlayerTeam(playerid) == 4)  SetPlayerColor( playerid, 0x6A1BE0FF ), GivePlayerWeaponEX(playerid, 30, 9999), SetPlayerPos(playerid, TDm3SP2[rand][0], TDm3SP2[rand][1], TDm3SP2[rand][2]), SetPlayerFacingAngle(playerid, TDm3SP2[rand][3]);
	SetCameraBehindPlayer(playerid);
	SetPlayerInterior(playerid, 0);
   }
  }
  SetPVarInt(playerid, "TDMTeam", GetPlayerTeam(playerid));
}


stock Send_To_Dm( playerid , DMID)
{
  AllowForbidWeap[playerid]=1;
  for(new x=0; x<11; x++) SetPlayerSkillLevel(playerid, x, 999);
  HidePlayerDialog(playerid);
  HidePlayerMenu(playerid);
  SetPlayerHealth(playerid , 100);
  ResetPlayerWeaponsEX(playerid);
  new rand= random( 3 );
  SendpInfo(playerid, "Type ~r~/Exit ~y~to leave the Deathmatch", 5000);
  switch(DMID)
  {
   case 1:
   {
	SetPlayerVirtualWorldEX(playerid, 3);
	GivePlayerWeaponEX(playerid, 23, 9999);
	GivePlayerWeaponEX(playerid, 9, 9999);
	GivePlayerWeaponEX(playerid, 27, 9999);
	SetPlayerPos(playerid, Dm1SP[rand][0], Dm1SP[rand][1], Dm1SP[rand][2]);
	SetPlayerFacingAngle(playerid, Dm1SP[rand][3]);
	SetCameraBehindPlayer(playerid);
	SetPlayerInterior(playerid, 0);
	SetPlayerWorldBounds(playerid, -2098.3831, -2200.0667, -81.7697, -280.0457);
   }
   case 2:
   {
    SetPlayerVirtualWorldEX(playerid, 4);
    GivePlayerWeaponEX(playerid, 24, 9999);
    GivePlayerWeaponEX(playerid, 27, 9999);
    GivePlayerWeaponEX(playerid, 34, 9999);
    SetPlayerPos(playerid, Dm2SP[rand][0], Dm2SP[rand][1], Dm2SP[rand][2]);
    SetPlayerFacingAngle(playerid, Dm2SP[rand][3]);
    SetCameraBehindPlayer(playerid);
    SetPlayerInterior(playerid, 0);
   }
   case 3:
   {
    SetPlayerVirtualWorldEX(playerid, 5);
    GivePlayerWeaponEX(playerid, 26, 9999);
    GivePlayerWeaponEX(playerid, 28, 9999);
    SetPlayerPos(playerid, Dm3SP[rand][0], Dm3SP[rand][1], Dm3SP[rand][2]);
    SetPlayerFacingAngle(playerid, Dm3SP[rand][3]);
    SetCameraBehindPlayer(playerid);
    SetPlayerInterior(playerid, 0);
    SetPlayerWorldBounds(playerid, 1416.4606, 1295.3322, 2222.0486, 2102.1685);
   }
   case 4:
   {
    SetPlayerVirtualWorldEX(playerid, 6);
    GivePlayerWeaponEX(playerid, 37, 9999);
    GivePlayerWeaponEX(playerid, 35, 9999);
    GivePlayerWeaponEX(playerid, 16, 9999);
    SetPlayerPos(playerid, Dm4SP[rand][0], Dm4SP[rand][1], Dm4SP[rand][2]);
    SetPlayerFacingAngle(playerid, Dm4SP[rand][3]);
    SetCameraBehindPlayer(playerid);
    SetPlayerInterior(playerid, 0);
    SetPlayerWorldBounds(playerid, -2265.5720, -2405.9043, 244.9651, 59.2683);
   }
   case 5:
   {
    rand=random(sizeof(Dm5SP));
    SetPlayerVirtualWorldEX(playerid, 7);
    SetPlayerInterior(playerid , 10);
    GivePlayerWeaponEX(playerid, 39, 9999);
    GivePlayerWeaponEX(playerid, 38, 9999);
    SetPlayerPos(playerid, Dm5SP[rand][0], Dm5SP[rand][1], Dm5SP[rand][2]);
    SetPlayerFacingAngle(playerid, Dm5SP[rand][3]);
    SetCameraBehindPlayer(playerid);
   }
   case 6:
   {
    SetPlayerVirtualWorldEX(playerid, 8);
    SetPlayerInterior(playerid , 7);
    GivePlayerWeaponEX(playerid, 1, 9999);
    SetPlayerPos(playerid, Dm6SP[rand][0], Dm6SP[rand][1], Dm6SP[rand][2]);
    SetPlayerFacingAngle(playerid, Dm6SP[rand][3]);
    SetCameraBehindPlayer(playerid);
   }
   case 7:
   {
    SetPlayerVirtualWorldEX(playerid, 9);
    SetPlayerInterior(playerid , 0);
    GivePlayerWeaponEX(playerid, 34, 9999);
    GivePlayerWeaponEX(playerid, 31, 9999);
    GivePlayerWeaponEX(playerid, 16, 9999);
    SetPlayerPos(playerid, Dm7SP[rand][0], Dm7SP[rand][1], Dm7SP[rand][2]);
    SetPlayerFacingAngle(playerid, Dm7SP[rand][3]);
    SetCameraBehindPlayer(playerid);
   }
   case 8:
   {
    SetPlayerVirtualWorldEX(playerid, 10);
    GivePlayerWeaponEX(playerid, 27, 9999);
    GivePlayerWeaponEX(playerid, 25, 9999);
    GivePlayerWeaponEX(playerid, 24, 9999);
    SetPlayerInterior(playerid , 4);
    SetPlayerPos(playerid, Dm8SP[rand][0], Dm8SP[rand][1], Dm8SP[rand][2]);
    SetPlayerFacingAngle(playerid, Dm8SP[rand][3]);
    SetCameraBehindPlayer(playerid);
   }
   case 9:
   {
    SetPlayerVirtualWorldEX(playerid, 11);
    SetPlayerInterior(playerid, 16);
    GivePlayerWeaponEX(playerid, 26, 9999);
    SetPlayerPos(playerid, Dm9SP[rand][0], Dm9SP[rand][1], Dm9SP[rand][2]);
    SetPlayerFacingAngle(playerid, Dm9SP[rand][3]);
    SetCameraBehindPlayer(playerid);
   }
   case 10:
   {
	SetPlayerVirtualWorldEX(playerid, 12);
    SetPlayerInterior(playerid, 1);
    SetPlayerPos(playerid, Dm10SP[rand][0], Dm10SP[rand][1], Dm10SP[rand][2]);
    SetPlayerFacingAngle(playerid, Dm10SP[rand][3]);
    SetPlayerHealth(playerid , 100);
	GivePlayerWeaponEX(playerid, 22+random(12), 9999);
	SetCameraBehindPlayer(playerid);
   }
   case 11:
   {

	SetCameraBehindPlayer(playerid);
	DestroyPlayerObject(playerid, obj[playerid]);
	SetPVarInt(playerid, "used", 0);

    SetPlayerVirtualWorldEX(playerid, 19);
    GivePlayerWeaponEX(playerid, 24, 9999);
    GivePlayerWeaponEX(playerid, 18, 9999);
    GivePlayerWeaponEX(playerid, 29, 9999);
    SetPlayerPos(playerid, Dm11SP[rand][0], Dm11SP[rand][1], Dm11SP[rand][2]);
    SetPlayerFacingAngle(playerid, Dm11SP[rand][3]);
    SetPlayerInterior(playerid, 0);

////
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	SetPlayerCameraPos(playerid, x, y, z+20);
	SetPlayerCameraLookAt(playerid, x, y, z);
    obj[playerid]= CreateObject(19300, x, y, z, 0.0000, -1, -1, 100);
    AttachObjectToPlayer(obj[playerid], playerid, 0.0, 0.0, 30.0, 90.0, 0.0, 0.0);
	AttachCameraToObject(playerid, obj[playerid]);

   }
   case 12:
   {
    SetPlayerVirtualWorldEX(playerid, 14);
    GivePlayerWeaponEX(playerid, 37, 9999);
    GivePlayerWeaponEX(playerid, 18, 9999);
    GivePlayerWeaponEX(playerid, 42, 9999);
    SetPlayerPos(playerid, Dm12SP[rand][0], Dm12SP[rand][1], Dm12SP[rand][2]);
    SetPlayerFacingAngle(playerid, Dm12SP[rand][3]);
    SetPlayerInterior(playerid, 2);
    SetCameraBehindPlayer(playerid);
   }
   case 13:
   {
    SetPlayerVirtualWorldEX(playerid, 15);
    SetPlayerHealth(playerid , 1.1);
    GivePlayerWeaponEX(playerid, 32, 9999);
    SetPlayerPos(playerid, Dm13SP[rand][0], Dm13SP[rand][1], Dm13SP[rand][2]);
    SetPlayerFacingAngle(playerid, Dm13SP[rand][3]);
    SetPlayerInterior(playerid, 18);
    SetPlayerSpecialAction(playerid, 2);
    SetCameraBehindPlayer(playerid);
   }
   case 14:
   {
    SetPlayerVirtualWorldEX(playerid, 16);
    GivePlayerWeaponEX(playerid, 33, 9999);
    GivePlayerWeaponEX(playerid, 30, 9999);
    GivePlayerWeaponEX(playerid, 24, 9999);
    SetPlayerPos(playerid, Dm14SP[rand][0], Dm14SP[rand][1], Dm14SP[rand][2]);
    SetPlayerFacingAngle(playerid, Dm14SP[rand][3]);
    SetPlayerInterior(playerid, 0);
	SetPlayerWeather(playerid , 16);
	SetCameraBehindPlayer(playerid);
   }
   case 16:
   {
    SetPlayerVirtualWorldEX(playerid, 18);
    GivePlayerWeaponEX(playerid, 26, 9999);
    GivePlayerWeaponEX(playerid, 32, 9999);
    SetPlayerPos(playerid, wwcoords[rand][0], wwcoords[rand][1], wwcoords[rand][2]);
    SetPlayerFacingAngle(playerid, wwcoords[rand][3]);
    SetPlayerInterior(playerid, 0);
    SetCameraBehindPlayer(playerid);
   }
   case 15:
   {
    SetPlayerVirtualWorldEX(playerid, 17);
    GivePlayerWeaponEX(playerid, 34, 9999);
    GivePlayerWeaponEX(playerid, 31, 9999);
    GivePlayerWeaponEX(playerid, 4, 9999);
    SetPlayerPos(playerid, Dm15SP[rand][0], Dm15SP[rand][1], Dm15SP[rand][2]);
    SetPlayerFacingAngle(playerid, Dm15SP[rand][3]);
    SetPlayerInterior(playerid, 0);
    SetCameraBehindPlayer(playerid);
   }
   case 17:
   {
    SetPlayerVirtualWorldEX(playerid, 19);
    GivePlayerWeaponEX(playerid, 16, 9999);
    GivePlayerWeaponEX(playerid, 30, 9999);
    GivePlayerWeaponEX(playerid, 34, 9999);
    SetPlayerPos(playerid, Dm17SP[rand][0], Dm17SP[rand][1], Dm17SP[rand][2]);
    SetPlayerFacingAngle(playerid, Dm17SP[rand][3]);
    SetPlayerInterior(playerid, 0);
    SetCameraBehindPlayer(playerid);
   }
   case 18:
   {
//    SetPlayerWorldBounds(playerid, 1072.6954, 807.3755 , -1028.3644, -1130.1188);
    SetPlayerVirtualWorldEX(playerid, 199);
    GivePlayerWeaponEX(playerid, 9, 10);
    SetPlayerPos(playerid, Dm18SP[rand][0], Dm18SP[rand][1], Dm18SP[rand][2]);
    SetPlayerFacingAngle(playerid, Dm18SP[rand][3]);
    SetPlayerInterior(playerid, 0);
    SetCameraBehindPlayer(playerid);
	SetPVarInt(playerid, "nXtLvL", 5);

    PlayerTextDrawSetStringEX(playerid, pGunBattle[playerid], "~r~- - - - -");

	PlayerTextDrawShow(playerid, pGunBattle[playerid]);
	TextDrawShowForPlayer(playerid, GunBattleTD[0]);
	TextDrawShowForPlayer(playerid, GunBattleTD[1]);
	TextDrawShowForPlayer(playerid, GunBattleTD[2]);
	TextDrawShowForPlayer(playerid, GunBattleTD[3]);
	TextDrawShowForPlayer(playerid, GunBattleTD[4]);
	TextDrawShowForPlayer(playerid, GunBattleTD[5]);
   }
   case 19:
   {
	rand=random(5);
    SetPlayerVirtualWorldEX(playerid, 7995989);
    GivePlayerWeaponEX(playerid, 31, 9999);
    GivePlayerWeaponEX(playerid, 28, 9999);
    GivePlayerWeaponEX(playerid, 16, 9999);
    GivePlayerWeaponEX(playerid, 27, 9999);
    SetPlayerPos(playerid, BFCoords[rand][0], BFCoords[rand][1], BFCoords[rand][2]);
    SetPlayerFacingAngle(playerid, BFCoords[rand][3]);
    SetPlayerInterior(playerid, 0);
    SetCameraBehindPlayer(playerid);
   }
 /*  case 20:
   {
	rand=random(5);
    SetPlayerVirtualWorldEX(playerid, 7995922);
    SetPlayerPos(playerid, Dm20SP[rand][0], Dm20SP[rand][1], Dm20SP[rand][2]);
    SetPlayerFacingAngle(playerid, Dm20SP[rand][3]);
    SetPlayerInterior(playerid, 0);
    SetCameraBehindPlayer(playerid);
    SetPlayerHealth(playerid, 10);
   }*/
  }
}

stock Remove_From_Dm(playerid)
{
	new str[128];
	if(GetPVarInt(playerid, "INDM") == 18)
	{
		format(str, sizeof(str), "» Gungame « "GUNGAME_"%s has left the GunGame {D86EFF}(/Exit)", pName[playerid]);
        SendClientMessageToAll(GUNGAME, str);
	}
	else if(GetPVarInt(playerid, "INDM") == 19)
	{
	    format(str, sizeof(str), "{FF0000}» BF « {8B0000}%s has left the BattleField {FF0000}(/Exit) ", pName[playerid]);
        SendClientMessageToAll(DmCol1, str);
	}
	else if(GetPVarInt(playerid, "INDM") == 11 && IsValidObject(obj[playerid])) DestroyObject(obj[playerid]), obj[playerid]=INVALID_OBJECT_ID;
    else
	{
		format(str, sizeof(str), "{FF0000}» DM « {8B0000}%s has left the deathmatch {FF0000}(/Exit) ", pName[playerid]);
    	SendClientMessageToAll(DmCol1, str);
	}
	SetPVarInt(playerid, "INDM", 0);
    DeletePVar(playerid, "INDM");
    DeletePVar(playerid, "pDMKills");
    DeletePVar(playerid, "pDMDeaths");
    DeletePVar(playerid, "pDMKillStreak");

//	format(str, sizeof(str), "-DmInfo- %s has left a deathmatch. (/Exit) ", pName[playerid]);
//	SendClientMessageToAll(0x3E792AFF, str);
    SetPlayerVirtualWorldEX(playerid, 0);
   	SetCameraBehindPlayer( playerid );
   	SetPlayerWorldBounds(playerid, 20000.0000, -20000.0000, 20000.0000, -20000.0000);
   	for(new x=0; x<8; x++) PlayerTextDrawHide(playerid, DMpTD[playerid][x]);

	PlayerTextDrawHide(playerid, pGunBattle[playerid]);
	TextDrawHideForPlayer(playerid, GunBattleTD[0]);
	TextDrawHideForPlayer(playerid, GunBattleTD[1]);
	TextDrawHideForPlayer(playerid, GunBattleTD[2]);
	TextDrawHideForPlayer(playerid, GunBattleTD[3]);
	TextDrawHideForPlayer(playerid, GunBattleTD[4]);
	TextDrawHideForPlayer(playerid, GunBattleTD[5]);
    if(RaceStarted==0) SetPlayerRaceCheckpoint(playerid, 0, RaceInfo[RaceIDCount][StartCP][0], RaceInfo[RaceIDCount][StartCP][1], RaceInfo[RaceIDCount][StartCP][2], RaceCPs[RaceIDCount][0][0], RaceCPs[RaceIDCount][0][1], RaceCPs[RaceIDCount][0][2], 15.0);
	if(HideShit[playerid]==0)
	{
         ShowScreenTXD(playerid);
	}
	SetTimerEx("checkminigun", 3000, false, "i", playerid);
	ResetPlayerWeaponsEX(playerid);
   	LoadPlayerCoords(playerid);
   	ResetSpawnInfo(playerid);
	return 1;
}
forward checkminigun(playerid);
public checkminigun(playerid)
{
 if(GetPlayerVirtualWorld(playerid) == 0) AllowForbidWeap[playerid]=0;
 return 1;
}
stock Remove_From_TDm(playerid)
{
	DeletePVar(playerid, "TDMTeam");
    if(PlayerInfo[playerid][pGang] < 0) SetPlayerColor( playerid, PlayerColors[random(200)] );
    else SetPlayerColor( playerid, PlayerColors[GangInfo[PlayerInfo[playerid][pGang]][gColor]] );

    new d=GetPVarInt(playerid, "TDM");
    SetPlayerTeam(playerid, 255);
	new str[128];
	ResetPlayerWeaponsEX(playerid);

	format(str, sizeof(str), "{FF0000}» TDM « {8B0000}%s has left the Team Deathmatch - {FF0000}(/Exit) ", pName[playerid]);
	SendClientMessageToAll(DmCol1, str);

    DeletePVar(playerid, "TDM");
    DeletePVar(playerid, "pDMKills");
    DeletePVar(playerid, "pDMDeaths");
    DeletePVar(playerid, "pDMKillStreak");

    SetPlayerVirtualWorldEX(playerid, 0);
   	SetCameraBehindPlayer( playerid );
   	LoadPlayerCoords(playerid);
   	for(new x=0; x<8; x++) PlayerTextDrawHide(playerid, DMpTD[playerid][x]);

    if(RaceStarted==0) SetPlayerRaceCheckpoint(playerid, 0, RaceInfo[RaceIDCount][StartCP][0], RaceInfo[RaceIDCount][StartCP][1], RaceInfo[RaceIDCount][StartCP][2], RaceCPs[RaceIDCount][0][0], RaceCPs[RaceIDCount][0][1], RaceCPs[RaceIDCount][0][2], 15.0);
	if(HideShit[playerid]==0)
	{
         ShowScreenTXD(playerid);
	}
	new count;
	foreach(new i : Player)
	{
      new DmID= GetPVarInt(i, "TDM");
      if(DmID == d) count ++;
	}
	if(count == 0) TDMScore[d-1][0]=0, TDMScore[d-1][1]=0;

	return 1;
}
//=*=*=*=*=*=*=*=*=*=*=*=*=*=*=Duel Stocks=*=*=*=*=*==*=*=*=*=*==*=
forward StartDuel();
public StartDuel()
{
  new a=DuelInfo[player1], b=DuelInfo[player2];
  if(DuelInfo[startcount] > 0)
  {
     new str[25];
     format(str, sizeof(str), "~y~%d", DuelInfo[startcount]);
     PlayerPlaySound(a, 1056, 0, 0, 0), PlayerPlaySound(b, 1056, 0, 0, 0);
     SendInfoText(a, 1000, str), SendInfoText(b, 1000, str);
     foreach(new playerid : Player) if(GetPVarInt(playerid, "induel")) SetPVarInt(playerid, "cantexitduel", true);
  }
  if(DuelInfo[startcount] == 0)
  {
	 KillTimer(DuelInfo[starttimer]);
     DuelInfo[starttimer]=-1;
     PlayerPlaySound(a, 1057, 0, 0, 0), PlayerPlaySound(b, 1057, 0, 0, 0);
     SendInfoText(a, 1500, "~g~Draw your weapons"), SendInfoText(b, 1500, "~g~Draw your weapons");
	 GivePlayerWeaponEX(a, DuelInfo[weapon], 9999), GivePlayerWeaponEX(b, DuelInfo[weapon], 9999);
	 TogglePlayerControllable2(DuelInfo[player1], 1), TogglePlayerControllable2(DuelInfo[player2], 1);
     DuelCount=GetTickCount();
     foreach(new playerid : Player) if(GetPVarInt(playerid, "cantexitduel")) DeletePVar(playerid, "cantexitduel");
  }
  DuelInfo[startcount]--;
}
stock IsInDuelCP(playerid)
{
    for(new x= 0;x<sizeof(DuelCoords);x++)
    {
		if(IsPlayerInDynamicCP(playerid, DuelCP[x]))
		{
		  return x;
		}
    }
	return -255;
}

stock EndDuel(winner, loser, respawnloser=0)
{
   new str[256];
   if(winner >= 0) ResetPlayerWeaponsEX(winner);
   if(loser >= 0) ResetPlayerWeaponsEX(loser);
   new Float:health;
   new Float:armour;
   GetPlayerHealth(winner, health);
   GetPlayerArmour(winner, armour);
   if(armour > 0) format(str, sizeof(str), "» Duel « "fOUT_"%s has won the duel against %s "fOUT2_"(%s) (Health: %d%s | Armour: %d%s)", pName[winner], pName[loser], ConvertTime(GetTickCount() - DuelCount), floatround(health), "%", floatround(armour), "%");
   else format(str, sizeof(str), "» Duel « "fOUT_"%s has won the duel against %s "fOUT2_"(%s) (Health: %d%s)", pName[winner], pName[loser], ConvertTime(GetTickCount() - DuelCount), floatround(health), "%");
   SendClientMessageToAll(fOUT2, str);
   SetTimerEx("RespawnDuelWinner", 3000, false, "iii", winner, loser, respawnloser);
   if(IsPlayerConnected(winner))
   {
     PlayerPlaySound(winner, 5449, 0.0, 0.0, 0.0);
     PlayerInfo[winner][pWDuel]++;
     if(PlayerInfo[winner][pWDuel] == 200) GiveMedal(winner, 31);
 	 new Query[128];
 	 format(Query, sizeof(Query), "UPDATE `users` SET `DuelWon` = %d WHERE `Name` = '%s'", PlayerInfo[winner][pWDuel], pName[winner]);
 	 mysql_query(GTADM, Query);
     TogglePlayerControllable2(winner, 0);
	 SendpInfo(winner, "- ~g~You have a duel!", 5000);
     DeletePVar(winner, "induel");
   }
   if(IsPlayerConnected(loser))
   {
     SendInfoText(loser, 3000, "~r~You have lost the duel!");
	 new Float:pos[3];
	 GetPlayerPos(loser, pos[0], pos[1], pos[2]);
	 SetPlayerCameraPos(winner, pos[0], pos[1], pos[2]+5.00);
	 SetPlayerCameraLookAt(winner, pos[0], pos[1], pos[2]);
	 SetPlayerCameraPos(loser, pos[0], pos[1], pos[2]+5.00);
	 SetPlayerCameraLookAt(loser, pos[0], pos[1], pos[2]);
	 TogglePlayerControllable2(loser, 0);
	 SendpInfo(loser, "- ~r~You have lost a duel!", 5000);
     DeletePVar(loser, "induel");
   }

   DuelInfo[stat]=0, DuelInfo[player1]=-225, DuelInfo[player2]=-1;
}

stock RemoveFromDuel(playerid, spawn)
{
    if(playerid >= 0) ResetPlayerWeaponsEX(playerid);
	SetCameraBehindPlayer(playerid);
	SetPlayerVirtualWorldEX(playerid, 0);
	TogglePlayerControllable2(playerid, 1);
	if(spawn ==1) LoadPlayerCoords(playerid);
	else SetPlayerInterior(playerid, 0);
}
forward RespawnDuelWinner(winner, loser, d);
public RespawnDuelWinner(winner, loser, d)
{
	 if(IsPlayerConnected(loser)) RemoveFromDuel(loser, d);
	 if(IsPlayerConnected(winner)) RemoveFromDuel(winner, 1);
	 return 1;
}


//=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*Dialog=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*

stock ShowDMDialog(playerid)
{
    new k[20];
    if(GetPVarInt(playerid, "GoBack")) k="Back";
    else k="Exit";

    STRING = ""cb2"Drugs Factory "g2"|| 9mm | Combat | Chainsaw\n"cb2"Golf Field "g2"|| Deagle | Combat | Sniper\n"cb2"Runnies "g2"|| Sawn-Off | Uzi\n"cb2"Rocket "g2"|| Rocket | Grenades\n"cb2"Minigun Dm "g2"|| Minigun | Satchels\n"cb2"Beat Em up "g2"|| Brass Knuckles\n";
    strcat(STRING , ""cb2"Volcano Island "g2" || Grenades | Sniper | M4\n"cb2"Ammunation "g2"|| Deagle | Shotgun\n"cb2"BloodBowl "g2"|| Sawn-Off\n"cb2"Liberty City "g2"|| Random\n"cb2"Grand Theft Auto II "g2"|| Molotov Cocktail | MP5 | Deagle\n"cb2"Big Smoke "g2"|| Molotov Cocktail | Flamethrower\n");
	strcat(STRING , ""cb2"Bugs In The Atrium "g2"|| JetPack | Tec-9\n"cb2"Rain Forest"g2" || C.Rifle | Ak47 | Deagle\n"cb2"UnderWater Paradise"g2" || Sniper | M4 | Knife\n"cb2"Runnies II "g2"|| Sawn-Off | Uzi\n"cb2"Playing With Trash"g2" || Grenades | Sniper | M4");
	//strcat(STRING , "\n"cb2"Walkies World"g2" || Deagle\n\n"cb2"Walkies World 2"g2" || Deagle | Sniper\n"cb2"TDM 1 - K.A.C.C."g2" || Deagle | Sniper\n"cb2"TDM 2 - Las Venturas Stadium "g2"|| 9mm | Sawn Off | Tec 9\n"cb2"TDM 3 - Warehouse "g2"|| Deagle | Combat shotgun | M4\n"cb2"Colosseum"g2" || Random Weapons\n"ORANGE_"I Feel Lucky "g2"|| Random DM");
	strcat(STRING , "\n"cb2"Walkies World"g2" || Deagle\n\n"cb2"Walkies World 2"g2" || Deagle | Sniper\n"cb2"TDM 1 - K.A.C.C."g2" || Deagle | Sniper\n"cb2"TDM 2 - Las Venturas Stadium "g2"|| 9mm | Sawn Off | Tec 9\n"cb2"TDM 3 - Warehouse "g2"|| Deagle | Combat shotgun | M4\n"ORANGE_"I Feel Lucky "g2"|| Random DM");
    ShowPlayerDialog(playerid, DM_DIALOG, DIALOG_STYLE_LIST, "Deathmatches", STRING , "Enter", k);
}

stock Random(playerid)
{
   new rand[10]
   format(rand, 10, "%i", 1+random(16));
   return cmd_dm(playerid, rand);
}
//=*=*=*=*=*=*=*=*=*=*=*=*=*=*=Saving\Loading Coords=*=*=*=*=*=*=*=*=*=*=*=*=*=*=
stock SavePlayerCoords(playerid)
{
  if(IsPlayerConnected(playerid))
  {
    new Float:x, Float:y, Float:z, Float:a, Float:health, Float:armour;
    GetPlayerPos(playerid, x, y, z);
    GetPlayerFacingAngle(playerid, a);
    GetPlayerHealth(playerid, health);
	GetPlayerArmour(playerid, armour);
    SetPVarFloat(playerid, "xpos", x);
    SetPVarFloat(playerid, "ypos", y);
    SetPVarFloat(playerid, "zpos", z);
    SetPVarFloat(playerid, "apos", a);
    SetPVarInt(playerid, "ipos", GetPlayerInterior(playerid));
    SetPVarInt(playerid, "vpos", GetPlayerVirtualWorld(playerid));

    SetPVarFloat(playerid, "HEALTH", health);
    SetPVarFloat(playerid, "ARMOUR", armour);
    SetPVarInt(playerid, "InHouse", InHouse[playerid]);
    for( new w=0; w < 13; w++ ) GetPlayerWeaponData( playerid, w, pWeapons[playerid][w], pAmmo[playerid][w] );
  }
}
stock LoadPlayerCoords(playerid)
{
  if(IsPlayerConnected(playerid))
  {
	for( new w=0; w < 13; w++ ) if((IsvalidWeapon(pWeapons[playerid][w]) == 1)) GivePlayerWeaponEX( playerid, pWeapons[playerid][w], pAmmo[playerid][w] );
	SetPlayerPosEx(playerid, GetPVarFloat(playerid, "xpos"), GetPVarFloat(playerid, "ypos"), GetPVarFloat(playerid, "zpos"), GetPVarFloat(playerid, "apos"), GetPVarInt(playerid, "ipos"));
   	SetPlayerHealth(playerid , GetPVarFloat(playerid, "HEALTH"));
   	SetPlayerArmour(playerid , GetPVarFloat(playerid, "ARMOUR"));
	SetPlayerVirtualWorldEX(playerid, GetPVarInt(playerid, "vpos"));
    InHouse[playerid]=GetPVarInt(playerid, "InHouse");
    DeletePVar(playerid, "xpos"), DeletePVar(playerid, "ypos"), DeletePVar(playerid, "zpos"), DeletePVar(playerid, "apos"), DeletePVar(playerid, "ipos");
    DeletePVar(playerid, "HEALTH"), DeletePVar(playerid, "ARMOUR");
    DeletePVar(playerid, "vpos");
    DeletePVar(playerid, "InHouse");

  }
}
//=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*Other Stocks=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*

stock BombPlayer(playerid, Type, Float:range)
{
	new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);
    CreateExplosion(x, y, z, Type, range);
}



stock SaveAttachedObject(playerid, modelid)
{
	switch(modelid)
	{
	   case 18926..18935: {AttachedOBJ[playerid][ch] = 1, AttachedOBJ[playerid][cmodel][1] = modelid;}
	   case 19006..19035: {AttachedOBJ[playerid][cg] = 1, AttachedOBJ[playerid][cmodel][0] = modelid;}
	   case 19077, 18975: {AttachedOBJ[playerid][chr] = 1, AttachedOBJ[playerid][cmodel][2] = modelid;}
	}
}



//===============================================================================


stock GetpOurposition(playerid)
{
  new count = 1;
  new b=GetPVarInt(playerid, "PlayerCheckPoints");
  foreach(new x : Player)
  {
	if(GetPVarInt(x, "pOur"))
	{
	 new a=GetPVarInt(x, "PlayerCheckPoints");
     if(a && x != playerid)
	 {
       if(a > b)
       {
          count++;
       }
       else if(a == b)
       {

         new
         Float:pDistance = GetPlayerDistanceFromPoint(playerid, ParkOurCPS[Pour][b+1][CPposX], ParkOurCPS[Pour][b+1][CPposY], ParkOurCPS[Pour][b+1][CPposZ]),
         Float:xDistance = GetPlayerDistanceFromPoint(x, ParkOurCPS[Pour][a+1][CPposX], ParkOurCPS[Pour][a+1][CPposY], ParkOurCPS[Pour][a+1][CPposZ]);
         if(xDistance<pDistance) count++;
       }
     }
	}
  }
  return count+finishedpours;
}
public OnPlayerLeaveRaceCheckpoint(playerid)
{
	if(GetPVarInt(playerid, "ShowRaceStart"))
	{
	    TextDrawHideForPlayer(playerid, RaceStartTD);
	    DeletePVar(playerid, "ShowRaceStart");
    }
    return 1;
}
public OnPlayerLeaveCheckpoint(playerid)
{
    return 1;
}
public OnPlayerEnterCheckpoint(playerid)
{
    return 1;
}
public OnPlayerEnterRaceCheckpoint(playerid)
{

	if(IsValidDynamicMapIcon(pRIcon[playerid])) DestroyDynamicMapIcon(pRIcon[playerid]), pRIcon[playerid]=-1;

 	if(GetPVarInt(playerid, "RACER"))
	{
	 if(GetPlayerState(playerid) != 2) SendClientMessage(playerid, GRAY, "{BAAB34}» Race «{F2EE05} You must be driving a vehicle to enter a Race Checkpoint!");
	 else
	 {
  	  if(IsValidDynamicMapIcon(pRIcon[playerid])) DestroyDynamicMapIcon(pRIcon[playerid]), pRIcon[playerid]=-1;
      SetPVarInt(playerid, "PlayerCheckPoints", GetPVarInt(playerid, "PlayerCheckPoints")-1);
      PlayerPlaySound(playerid, 1058, 0, 0, 5);

	  new k=RaceInfo[RaceIDCount][RaceCpCount];
	  new str[128], a = GetPVarInt(playerid, "PlayerCheckPoints");
	  format(str, sizeof(str), "Checkpoints: ~h~%d/%d", RaceInfo[RaceIDCount][RaceCpCount]-a, RaceInfo[RaceIDCount][RaceCpCount]);
	  PlayerTextDrawSetStringEX(playerid, pRaceTD[playerid][5], str);
	  if(a == 2)
	  {
	    SetPlayerRaceCheckpoint(playerid, 0, RaceCPs[RaceIDCount][k-a][0], RaceCPs[RaceIDCount][k-a][1], RaceCPs[RaceIDCount][k-a][2], RaceCPs[RaceIDCount][k-a+1][0], RaceCPs[RaceIDCount][k-a+1][1], RaceCPs[RaceIDCount][k-a+1][2], 15.00);
        pRIcon[playerid] = CreateDynamicMapIcon(RaceCPs[RaceIDCount][k-a+1][0], RaceCPs[RaceIDCount][k-a+1][1], RaceCPs[RaceIDCount][k-a+1][2], 53, 0, 0, 0, playerid, 1000.0);
		Streamer_SetIntData(STREAMER_TYPE_MAP_ICON ,  pRIcon[playerid], E_STREAMER_STYLE, 1);
	  }
	  else if(a == 1)
	  {
	    SetPlayerRaceCheckpoint(playerid, 1, RaceCPs[RaceIDCount][k-a][0], RaceCPs[RaceIDCount][k-a][1], RaceCPs[RaceIDCount][k-a][2], 0, 0, 0, 15.00);
        pRIcon[playerid] = CreateDynamicMapIcon(RaceCPs[RaceIDCount][k-a][0], RaceCPs[RaceIDCount][k-a][1], RaceCPs[RaceIDCount][k-a][2], 53, 0, 0, 0, playerid, 1000.0);
		Streamer_SetIntData(STREAMER_TYPE_MAP_ICON ,  pRIcon[playerid], E_STREAMER_STYLE, 1);
	  }
	  else if(a== 0) pFinishRace(playerid);
      else
	  {
	    SetPlayerRaceCheckpoint(playerid, 0, RaceCPs[RaceIDCount][k-a][0], RaceCPs[RaceIDCount][k-a][1], RaceCPs[RaceIDCount][k-a][2], RaceCPs[RaceIDCount][k-a+1][0], RaceCPs[RaceIDCount][k-a+1][1], RaceCPs[RaceIDCount][k-a+1][2], 15.00);
        pRIcon[playerid] = CreateDynamicMapIcon(RaceCPs[RaceIDCount][k-a+1][0], RaceCPs[RaceIDCount][k-a+1][1], RaceCPs[RaceIDCount][k-a+1][2], 0, 0xFF000022, 0, 0, playerid, 1000.0);
		Streamer_SetIntData(STREAMER_TYPE_MAP_ICON ,  pRIcon[playerid], E_STREAMER_STYLE, 1);
	  }
	 }
	}
	else if(IsPlayerInRaceStartCheckpoint(playerid))
	{
		 SendClientMessage(playerid, GRAY, "{BAAB34}» Race «{F2EE05} You are in the race start checkpoint, type {BAAB34}/start {F2EE05}when you are ready to start!");
		 TextDrawShowForPlayer(playerid, RaceStartTD);
		 SetPVarInt(playerid, "ShowRaceStart", true);
 	}
	else if(GetPVarInt(playerid, "pOur"))
	{
	  new cpp=GetPVarInt(playerid, "PlayerCheckPoints");
	  if(ParkOurCPS[Pour][cpp][CPCar] == 0 && GetPlayerState(playerid) == 2)
	  {
		   new v=GetPVarInt(playerid, "pOurPlace");

		   DestroyVehicleEX(GetPlayerVehicleID(playerid));
		   POURCARS[v]=INVALID_VEHICLE_ID;
	  }
	  else if(ParkOurCPS[Pour][cpp][CPCar] > 0)
	  {
		new allow;
		if(cpp-1 < 0) allow=1;
		else
		{
            if(ParkOurCPS[Pour][cpp][CPCar] != ParkOurCPS[Pour][cpp-1][CPCar] ) allow=1;
		}
        if(allow==1)
		{
		   new v=GetPVarInt(playerid, "pOurPlace");
		   DestroyVehicleEX(GetPlayerVehicleID(playerid));
		   new Float:vPos[4];
		   GetPlayerPos(playerid, vPos[0], vPos[1], vPos[2]);
		   GetPlayerFacingAngle(playerid, vPos[3]);
       	   POURCARS[v] = CreateVehicle(ParkOurCPS[Pour][cpp][CPCar] , vPos[0], vPos[1], vPos[2], vPos[3], -1, -1, 30);
           ResetCarInfo(POURCARS[v]);
		   VehicleInfo[POURCARS[v]][Player]=INVALID_PLAYER_ID;
       	   SetVehicleVirtualWorld(POURCARS[v], 66);
       	   PutPlayerInVehicle(playerid, POURCARS[v], 0);
       	}
	  }
	  if(GetPVarInt(playerid, "inLastCP")) DeletePVar(playerid, "inLastCP"), pFinishpOur(playerid);
      SetPVarInt(playerid, "PlayerCheckPoints", GetPVarInt(playerid, "PlayerCheckPoints")+1);
//      DisablePlayerRaceCheckpoint(playerid);
      PlayerPlaySound(playerid, 1058, 0, 0, 5);

	  new string[128];
  	  format(string, sizeof(string), "~b~Checkpoints: ~g~~h~%d~w~/~r~~h~%d", GetPVarInt(playerid, "PlayerCheckPoints"), ParkOurInfo[Pour][CPcount]);
	  PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][4], string);
	  new cptype, Float:cbsize=5.0;


	  if(GetPVarInt(playerid, "PlayerCheckPoints") == (ParkOurInfo[Pour][CPcount]-1))
	  {
		SetPVarInt(playerid, "inLastCP", true);
		switch(ParkOurCPS[Pour][cpp][CPCar])
		{
			case 0:cbsize=2.0, cptype=1;
			case 464, 465, 501:cptype=4, cbsize=7;
			case 460, 476, 511, 512, 513, 519, 520, 553, 577, 592, 593, 548, 425, 417, 487, 488, 497, 563, 447, 469:cptype=4, cbsize=15;
			default:cptype=1;
		}
        SetPlayerRaceCheckpoint(playerid, cptype, ParkOurCPS[Pour][cpp+1][CPposX], ParkOurCPS[Pour][cpp+1][CPposY], ParkOurCPS[Pour][cpp+1][CPposZ], 0.0, 0.0, 0.0, cbsize);
	  }
      else
	  {
		switch(ParkOurCPS[Pour][cpp][CPCar])
		{
			case 0:cbsize=2.0, cptype=0;
			case 464, 465, 501:cptype=3, cbsize=7;
			case 460, 476, 511, 512, 513, 519, 520, 553, 577, 592, 593, 548, 425, 417, 487, 488, 497, 563, 447, 469:cptype=3, cbsize=15;
			default:cptype=0;
		}
		SetPlayerRaceCheckpoint(playerid, cptype, ParkOurCPS[Pour][cpp+1][CPposX], ParkOurCPS[Pour][cpp+1][CPposY], ParkOurCPS[Pour][cpp+1][CPposZ], ParkOurCPS[Pour][cpp+2][CPposX], ParkOurCPS[Pour][cpp+2][CPposY], ParkOurCPS[Pour][cpp+2][CPposZ], cbsize);
	  }
	}
	return 1;
}
forward SetBackToNormalCam(playerid);
public SetBackToNormalCam(playerid)
{
    SetCameraBehindPlayer(playerid);
}


stock IsVehicleValid(id)
{
	new Type=GetVehicleModel(id);
	new blocked[]={ 548, 425, 417, 487, 488, 497, 563, 447, 469, 520 };
	for(new i;i<sizeof(blocked);i++)
	{
		if(Type == blocked[i])
		{
			return 0;
		}
	}
	return 1;
}

stock SavePlayerWeapons(i)
{
	   new Query[300];
	   format(Query, sizeof(Query), "UPDATE `users` SET `weapon1` = %d, `weapon2` = %d, `weapon3` = %d, `weapon4` = %d, `weapon5` = %d, `weapon6` = %d, `weapon7` = %d, `weapon8` = %d, `weapon9` = %d, `weapon10` = %d, `weapon11` = %d, `weapon12` = %d, `weapon13` = %d, `weapon14` = %d, `weapon15` = %d, `weapon16` = %d, `weapon17` = %d WHERE `UserID` = '%d'", hweapons[i][storein][0]
	   , hweapons[i][storein][1]
	   , hweapons[i][storein][2]
	   , hweapons[i][storein][3]
	   , hweapons[i][storein][4]
	   , hweapons[i][storein][5]
	   , hweapons[i][storein][6]
	   , hweapons[i][storein][7]
	   , hweapons[i][storein][8]
	   , hweapons[i][storein][9]
	   , hweapons[i][storein][10]
	   , hweapons[i][storein][11]
	   , hweapons[i][storein][12]
	   , hweapons[i][storein][13]
	   , hweapons[i][storein][14]
	   , hweapons[i][storein][15]
	   , hweapons[i][storein][16]
	   , PlayerInfo[i][UserID]);
	   mysql_query(GTADM, Query);

}

stock GetWeaponIDfromSlot(slot)
{
   new weaponid=0;
   switch(slot)
   {
	  case 0: weaponid =1;
	  case 1: weaponid =22;
	  case 2: weaponid =24;
	  case 3: weaponid =25;
	  case 4: weaponid =26;
	  case 5: weaponid =27;
	  case 6: weaponid =31;
	  case 7: weaponid =30;
	  case 8: weaponid =29;
	  case 9: weaponid =28;
	  case 10: weaponid =32;
	  case 11: weaponid =34;
	  case 12: weaponid =33;
	  case 13: weaponid =16;
	  case 14: weaponid =9;
	  case 15: weaponid =39;
	  case 16: weaponid =8;
   }
   return weaponid;
}


//==============================================================================


forward moveship();
public moveship()
{
    SendClientMessageToAll(BLUE, "{6F6AA6}» Party « {0099FF}The Titanic party has been started.");
	MoveObject(Ship1, Titanic1Coords[0][0], Titanic1Coords[0][1], Titanic1Coords[0][2], 5.00, Titanic1Coords[0][3], Titanic1Coords[0][4], Titanic1Coords[0][5]);
    MoveObject(Ship2, Titanic2Coords[0][0], Titanic2Coords[0][1], Titanic2Coords[0][2], 5.00, Titanic2Coords[0][3], Titanic2Coords[0][4], Titanic2Coords[0][5]);
    MoveObject(Ship3, Titanic3Coords[0][0], Titanic3Coords[0][1], Titanic3Coords[0][2], 5.00, Titanic3Coords[0][3], Titanic3Coords[0][4], Titanic3Coords[0][5]);
    ShipPartyCount = 1;
    Party = 2;
    new Float:x, Float:y, Float:z;
    GetObjectPos(Ship2, x, y, z);
	foreach(new playerid : Player)
	{
           if(IsPlayerInRangeOfPoint(playerid, 100.00, x, y, z))
           {
          	  StopAudioStreamForPlayer(playerid);
              PlayAudioStreamForPlayer(playerid, "http://dl.dropbox.com/u/52869044/Server%20Songs/Titanic%20remix%20THE%20BEST%20EVER%21.mp3");
           }
	 }
}

stock StartShipParty(playerid)
{
	 new str[128];
	 format(str, sizeof(str), ""LIGHTBLUE_"{6F6AA6}» Party « {0099FF}%s has started the Titanic Party! {6F6AA6}(/Party)", gAname(playerid));
	 SendClientMessageToAll(LIGHTBLUE, str);
	 SendClientMessageToAll(GREENBLUE, ""LIGHTBLUE_"{6F6AA6}» Party « {0099FF}The Ship will move in 30 seconds, type {6F6AA6}(/party){0099FF} to join.");
	 SetTimer("moveship", 30*1000, false);
	 if(IsValidObject(Ship1))DestroyObject(Ship1);
	 if(IsValidObject(Ship2))DestroyObject(Ship2);
	 if(IsValidObject(Ship3))DestroyObject(Ship3);
     Ship1 = CreateObject(10793, -1604.04, 22.73, 35.57, 0.00, 0.00, 45.00);
     Ship2 = CreateObject(10794, -1550.83, 75.93, 7.00, 0.00, 0.00, 45.00);
     Ship3 = CreateObject(10795, -1552.314, 74.4206, 17.05, 0.00, 0.00, 45.00);
     AttachObjectToObject(Ship1, Ship2, -75.65, 0.0, 28.5, 0.0, 0.0, 0.0, 1);
     AttachObjectToObject(Ship2, Ship3, 2.7, 0, -10.0, 0.0, 0.0, 0.0, 1);
}
stock StartxMasParty(playerid)
{
	 new str[128];
	 format(str, sizeof(str), "{6F6AA6}» Party « {0099FF}%s has started the Christmas Party! {6F6AA6}(/Party)", gAname(playerid));
	 SendClientMessageToAll(LIGHTBLUE, str);

     xMasPickUp[0] = CreateDynamicObject(19057,  972.8822, -2483.4968, 70.5924, 0.0, 0.0, 0.0, 0);
     xMasPickUp[1] = CreateDynamicObject(19057, 981.8885, -2495.0662, 70.7624, 0.0, 0.0, 0.0, 0);
     xMasPickUp[2] = CreateDynamicObject(19056, 973.0527, -2510.1470, 70.8676, 0.0, 0.0, 0.0, 0);
     xMasPickUp[3] = CreateDynamicObject(19058, 961.7491, -2507.1165, 70.8982, 0.0, 0.0, 0.0, 0);
     xMasPickUp[4] = CreateDynamicObject(19055, 955.5288, -2497.6960, 70.2119, 0.0, 0.0, 0.0, 0);
     xMasPickUp[5] = CreateDynamicObject(19055, 962.6249, -2495.0610, 70.2687, 0.0, 0.0, 0.0, 0);
     for(new i=0;i<6;i++)
     {
		new Float:x, Float:y, Float:z;
		GetDynamicObjectPos(xMasPickUp[i], x, y, z);
        MoveDynamicObject(xMasPickUp[i], x, y, 55.0, 2.00);
     }
}

stock GetClosestVehicle(playerid)
{
   new v = INVALID_VEHICLE_ID;
   for(new i = 0; i <MAX_VEHICLES; i++)
   {
    new Float:x, Float:y, Float:z;
    GetVehiclePos(i, x, y, z);
    if(IsPlayerInRangeOfPoint(playerid, 5.00, x, y, z))
    {
		v=i;
	}
   }
   return v;
}
stock PlayerToPoint(Float:radi, playerid, Float:x, Float:y, Float:z)
{
    new Float:oldposx, Float:oldposy, Float:oldposz;
    new Float:tempposx, Float:tempposy, Float:tempposz;
    GetPlayerPos(playerid, oldposx, oldposy, oldposz);
    tempposx = (oldposx -x);
    tempposy = (oldposy -y);
    tempposz = (oldposz -z);
    if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
    {
        return 1;
    }
    return 0;
}



stock SetPlayerWantedLevelEx(playerid, wanted)
{
//	new Sstr[20];
	if(GetPVarInt(playerid, "Wanted"))
	{
	 DeletePVar(playerid, "Wanted");
	 PlayerTextDrawHide(playerid, wantedTD[playerid][0]);
     PlayerTextDrawHide(playerid, wantedTD[playerid][1]);
	}
	switch(wanted)
	{
		case 1:
		{
			PlayerTextDrawSetString(playerid, wantedTD[playerid][0], "]");
            PlayerTextDrawShow(playerid, wantedTD[playerid][0]);
            PlayerTextDrawShow(playerid, wantedTD[playerid][1]);
		}
		case 2:
		{
			PlayerTextDrawSetString(playerid, wantedTD[playerid][0], "]]");
            PlayerTextDrawShow(playerid, wantedTD[playerid][0]);
            PlayerTextDrawShow(playerid, wantedTD[playerid][1]);
		}
		case 3:
		{
			PlayerTextDrawSetString(playerid, wantedTD[playerid][0], "]]]");
            PlayerTextDrawShow(playerid, wantedTD[playerid][0]);
            PlayerTextDrawShow(playerid, wantedTD[playerid][1]);
		}
		case 4:
		{
			PlayerTextDrawSetString(playerid, wantedTD[playerid][0], "]]]]");
            PlayerTextDrawShow(playerid, wantedTD[playerid][0]);
            PlayerTextDrawShow(playerid, wantedTD[playerid][1]);
		}
		case 5:
		{
			PlayerTextDrawSetString(playerid, wantedTD[playerid][0], "]]]]]");
            PlayerTextDrawShow(playerid, wantedTD[playerid][0]);
            PlayerTextDrawShow(playerid, wantedTD[playerid][1]);
		}
		case 6:
		{
			PlayerTextDrawSetString(playerid, wantedTD[playerid][0], "]]]]]]");
            PlayerTextDrawShow(playerid, wantedTD[playerid][0]);
            PlayerTextDrawShow(playerid, wantedTD[playerid][1]);
		}
	}
   	if(wanted < 7 && wanted >= 0) SetPVarInt(playerid, "Wanted", wanted);
}

stock KickEX(playerid, reason[], admin)
{
 if(!GetPVarInt(playerid, "Kicked") && IsPlayerConnected(playerid))
 {
	  if(!IsPlayerNPC(playerid))
	  {
		    SendClientMessage(playerid, -1, "");
		    SendClientMessage(playerid, -1, "");
		    SendClientMessage(playerid, -1, "");
		    SendClientMessage(playerid, -1, "");
		    SendClientMessage(playerid, -1, "");
		    SendClientMessage(playerid, -1, "");
		    SendClientMessage(playerid, -1, "");
		    SendClientMessage(playerid, -1, "");
		    SendClientMessage(playerid, -1, "");
		    //HideScreenTXD(playerid);

			SetPVarInt(playerid, "Kicked", true);
			new string[128];
		    if(IsPlayerConnected(admin)) format(string, sizeof(string), "{3BB023}» Admin action « {ABFF85}Admin %s has kicked %s (%d) (Reason: %s)", gAname(admin), pName[playerid], playerid, reason);
		    else format(string, sizeof(string), "{3BB023}» Admin action « {ABFF85}Admin Jonny has kicked %s (%d) (Reason: %s)", pName[playerid], playerid, reason);
			new str2[128];
            format(str2, sizeof(str2), "-Kick- Admin Jonny has kicked %s (%d) (Reason: %s)", pName[playerid], playerid, reason);
            printf("%s", str2);
			foreach (new i : Player)
			{
			  if(i != playerid)
			  {
		        SendClientMessage(i, AdminInfo, string);
		      }
			}



		    format(string, sizeof(string), "~l~Name: ~w~%s", pName[playerid]);
		    PlayerTextDrawSetStringEX(playerid, PropTD[playerid][0], string);

		    if(admin >= 0) format(string, sizeof(string), "~l~Admin: %s", pName[admin]), printf("-Kick- %s has been kicked by %s (Reason: %s)", pName[playerid], pName[admin], reason);
		    else format(string, sizeof(string), "~l~Admin: Jonny"), printf("-Kick- %s has been kicked by Jonny (Reason: %s)", pName[playerid], reason);

		    PlayerTextDrawSetStringEX(playerid, PropTD[playerid][1], string);

		    format(string, sizeof(string), "~l~Reason: %s", reason);
		    PlayerTextDrawSetStringEX(playerid, PropTD[playerid][2], string);


		    PlayerTextDrawSetStringEX(playerid, PropTD[playerid][7], "~r~You have been kicked!");
		    PlayerTextDrawSetStringEX(playerid, PropTD[playerid][5], "_~n~_~n~_~n~_~n~_");

		    new Year, Month, Day;
		    getdate(Year, Month, Day);
		    format(string, sizeof(string), "~l~Date: %02d/%02d/%d", Day, Month, Year);

		    PlayerTextDrawSetStringEX(playerid, PropTD[playerid][3], string);

			PlayerTextDrawShow(playerid, PropTD[playerid][0]);
			PlayerTextDrawShow(playerid, PropTD[playerid][1]);
			PlayerTextDrawShow(playerid, PropTD[playerid][2]);
			PlayerTextDrawShow(playerid, PropTD[playerid][3]);
			PlayerTextDrawShow(playerid, PropTD[playerid][7]);
			PlayerTextDrawShow(playerid, PropTD[playerid][5]);

			TogglePlayerControllable2(playerid, 0);
			SetTimerEx("kickhim", 500, false, "i", playerid);
	  }
 }
}

stock KickEX2(playerid, reason[], admin[])
{
 if(!GetPVarInt(playerid, "Kicked") && IsPlayerConnected(playerid))
 {
	  if(!IsPlayerNPC(playerid))
	  {
		    SendClientMessage(playerid, -1, "");
		    SendClientMessage(playerid, -1, "");
		    SendClientMessage(playerid, -1, "");
		    SendClientMessage(playerid, -1, "");
		    SendClientMessage(playerid, -1, "");
		    SendClientMessage(playerid, -1, "");
		    SendClientMessage(playerid, -1, "");
		    SendClientMessage(playerid, -1, "");
		    SendClientMessage(playerid, -1, "");
		   // HideScreenTXD(playerid);

			SetPVarInt(playerid, "Kicked", true);
			new string[128];
		    format(string, sizeof(string), "{3BB023}» Admin action « {ABFF85}Admin %s has kicked %s (%d) (Reason: %s)", admin, pName[playerid], playerid, reason);
     	    new str2[128];
            format(str2, sizeof(str2), "-Kick- Admin %s has kicked %s (%d) (Reason: %s)", admin, pName[playerid], playerid, reason);
            printf("%s", str2);
			foreach (new i : Player)
			{
			  if(i != playerid)
			  {
		        SendClientMessage(i, AdminInfo, string);
		      }
			}

		    format(string, sizeof(string), "~l~Name: ~w~%s", pName[playerid]);
		    PlayerTextDrawSetStringEX(playerid, PropTD[playerid][0], string);

		    format(string, sizeof(string), "~l~Admin: %s", admin), printf("-Kick- %s has been kicked by %s (Reason: %s)", pName[playerid], admin, reason);

		    PlayerTextDrawSetStringEX(playerid, PropTD[playerid][1], string);

		    format(string, sizeof(string), "~l~Reason: %s", reason);
		    PlayerTextDrawSetStringEX(playerid, PropTD[playerid][2], string);


		    PlayerTextDrawSetStringEX(playerid, PropTD[playerid][7], "~r~You have been kicked!");
		    PlayerTextDrawSetStringEX(playerid, PropTD[playerid][5], "_~n~_~n~_~n~_~n~_");

		    new Year, Month, Day;
		    getdate(Year, Month, Day);
		    format(string, sizeof(string), "~l~Date: %02d/%02d/%d", Day, Month, Year);

		    PlayerTextDrawSetStringEX(playerid, PropTD[playerid][3], string);


			PlayerTextDrawShow(playerid, PropTD[playerid][0]);
			PlayerTextDrawShow(playerid, PropTD[playerid][1]);
			PlayerTextDrawShow(playerid, PropTD[playerid][2]);
			PlayerTextDrawShow(playerid, PropTD[playerid][3]);
			PlayerTextDrawShow(playerid, PropTD[playerid][7]);
			PlayerTextDrawShow(playerid, PropTD[playerid][5]);

			TogglePlayerControllable2(playerid, 0);
			SetTimerEx("kickhim", 500, false, "i", playerid);
	  }
 }
}

forward kickhim(playerid);
public kickhim(playerid)
{
	 Kick(playerid);
	 return 1;
}
stock tBanEX(playerid, reason[], admin, ban_time)
{
  if(!IsPlayerNPC(playerid) && IsPlayerConnected(playerid))
  {
	TogglePlayerControllable2(playerid, 0);

    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
	//HideScreenTXD(playerid);
    new string[400];
    format(string, sizeof(string), "INSERT INTO `bans`(`Name`, `IP`, `GPCI`, `Reason`, `Ban_Type`, `Time`, `Period`, `Admin`) VALUES ('%s', '%s', '%s', '%s', '%d', CURRENT_TIMESTAMP, '%d', '%s')", pEscName[playerid], Escape_Name(pIP(playerid)), Escape_String(pGPCI(playerid)), Escape_String(reason), 2, ban_time, Escape_Name(gAname(admin)));
	mysql_query(GTADM, string);
	printf("%s", string);

    format(string, sizeof(string), "~l~Name: ~w~%s", pName[playerid]);
    PlayerTextDrawSetStringEX(playerid, PropTD[playerid][0], string);

    if(admin >= 0) format(string, sizeof(string), "~l~Admin: %s", pName[admin]), printf("-Ban- %s has been temporary banned by %s (Reason: %s || %d mins)", pName[playerid], pName[admin], reason, ban_time);
    else format(string, sizeof(string), "~l~Admin: Jonny"), printf("-Ban- %s has been temporary banned by Jonny (Reason: %s || %d mins)", pName[playerid], reason, ban_time);

    PlayerTextDrawSetStringEX(playerid, PropTD[playerid][1], string);

    format(string, sizeof(string), "~l~Reason: %s", reason);
    PlayerTextDrawSetStringEX(playerid, PropTD[playerid][2], string);


    PlayerTextDrawSetStringEX(playerid, PropTD[playerid][7], "~r~You have been banned!");
    PlayerTextDrawSetStringEX(playerid, PropTD[playerid][5], "_~n~_~n~_~n~_~n~_");

    new Year, Month, Day;
    getdate(Year, Month, Day);
    format(string, sizeof(string), "~l~Date: %02d/%02d/%d", Day, Month, Year);

    PlayerTextDrawSetStringEX(playerid, PropTD[playerid][3], string);

    format(string, sizeof(string), "~r~Note - You can make an unban request in ~y~www.gtadm.com~n~~r~Press F8 to take a screenshot!~n~~g~IP - %s", pIP(playerid));
    PlayerTextDrawSetStringEX(playerid, PropTD[playerid][4], string);

	PlayerTextDrawShow(playerid, PropTD[playerid][0]);
	PlayerTextDrawShow(playerid, PropTD[playerid][1]);
	PlayerTextDrawShow(playerid, PropTD[playerid][2]);
	PlayerTextDrawShow(playerid, PropTD[playerid][3]);
	PlayerTextDrawShow(playerid, PropTD[playerid][4]);
	PlayerTextDrawShow(playerid, PropTD[playerid][7]);
	PlayerTextDrawShow(playerid, PropTD[playerid][5]);

/*    SendClientMessage(playerid, -1, ""RED_"» Banned « {BABABA}You have been banned from the server.");
    SendClientMessage(playerid, -1, ""RED_"» Banned « {BABABA}Admin: %s", pName[admin]);
    SendClientMessage(playerid, -1, ""RED_"» Banned « {BABABA}Reason: %s", reason);
    SendClientMessage(playerid, -1, ""RED_"» Banned « {BABABA}Date: %02d/%02d/%d", Day, Month, Year);
    SendClientMessage(playerid, -1, ""RED_"» Banned « {BABABA}IP: %s", pIP(playerid));
    SendClientMessage(playerid, -1, ""RED_"» Banned « {BABABA}Expires in: %d minutes", ban_time);
    SendClientMessage(playerid, -1, ""RED_"» Banned « {BABABA}Press F8 to take a screenshot.");
    SendClientMessage(playerid, -1, ""RED_"» Banned « {BABABA}You can make an unban request at www.gtadm.com.");*/

	TogglePlayerControllable2(playerid, 0);
	SetTimerEx("kickhim", 500, false, "i", playerid);
  }
}
stock BanEX3(playerid, reason[], admin[])
{
  if(!IsPlayerNPC(playerid) && IsPlayerConnected(playerid))
  {
	TogglePlayerControllable2(playerid, 0);
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
	//HideScreenTXD(playerid);

    new string[256];
    format(string, sizeof(string), "INSERT INTO `bans`(`Name`, `IP`, `GPCI`, `Reason`, `Ban_Type`, `Admin`, `Time`) VALUES ('%s', '%s', '%s', '%s', 3, '%s', CURRENT_TIMESTAMP)", pEscName[playerid], Escape_Name(pIP(playerid)), Escape_String(pGPCI(playerid)), Escape_String(reason), Escape_String(admin));
	mysql_query(GTADM, string);

    format(string, sizeof(string), "~l~Name: ~w~%s", pName[playerid]);
    PlayerTextDrawSetStringEX(playerid, PropTD[playerid][0], string);

    format(string, sizeof(string), "~l~Admin: %s", admin), printf("-Ban- %s has been banned by %s (Reason: %s)", pName[playerid], admin, reason);

    PlayerTextDrawSetStringEX(playerid, PropTD[playerid][1], string);

    format(string, sizeof(string), "~l~Reason: %s", reason);
    PlayerTextDrawSetStringEX(playerid, PropTD[playerid][2], string);


    PlayerTextDrawSetStringEX(playerid, PropTD[playerid][7], "~r~You have been banned!");
    PlayerTextDrawSetStringEX(playerid, PropTD[playerid][5], "_~n~_~n~_~n~_~n~_");

    new Year, Month, Day;
    getdate(Year, Month, Day);
    format(string, sizeof(string), "~l~Date: %02d/%02d/%d", Day, Month, Year);

    PlayerTextDrawSetStringEX(playerid, PropTD[playerid][3], string);

    format(string, sizeof(string), "~r~Note - You can make an unban request in ~y~www.gtadm.com~n~~r~Press F8 to take a screenshot!~n~~g~IP - %s", pIP(playerid));
    PlayerTextDrawSetStringEX(playerid, PropTD[playerid][4], string);

	PlayerTextDrawShow(playerid, PropTD[playerid][0]);
	PlayerTextDrawShow(playerid, PropTD[playerid][1]);
	PlayerTextDrawShow(playerid, PropTD[playerid][2]);
	PlayerTextDrawShow(playerid, PropTD[playerid][3]);
	PlayerTextDrawShow(playerid, PropTD[playerid][4]);
	PlayerTextDrawShow(playerid, PropTD[playerid][7]);
	PlayerTextDrawShow(playerid, PropTD[playerid][5]);

	/*SendClientMessage(playerid, -1, ""RED_"» Banned « {BABABA}You have been banned from the server.");
    SendClientMessage(playerid, -1, ""RED_"» Banned « {BABABA}Admin: %s", pName[admin]);
    SendClientMessage(playerid, -1, ""RED_"» Banned « {BABABA}Reason: %s", reason);
    SendClientMessage(playerid, -1, ""RED_"» Banned « {BABABA}Date: %02d/%02d/%d", Day, Month, Year);
    SendClientMessage(playerid, -1, ""RED_"» Banned « {BABABA}IP: %s", pIP(playerid));
    SendClientMessage(playerid, -1, ""RED_"» Banned « {BABABA}Press F8 to take a screenshot.");
    SendClientMessage(playerid, -1, ""RED_"» Banned « {BABABA}You can make an unban request at www.gtadm.com.");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
*/

	TogglePlayerControllable2(playerid, 0);
	SetTimerEx("banhim", 500, false, "i", playerid);
  }
}
stock BanEX2(playerid, reason[], admin)
{
  if(!IsPlayerNPC(playerid) && IsPlayerConnected(playerid))
  {
	TogglePlayerControllable2(playerid, 0);
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
///	HideScreenTXD(playerid);

    new string[256];
    format(string, sizeof(string), "INSERT INTO `bans`(`Name`, `IP`, `GPCI`, `Reason`, `Ban_Type`, `Admin`, `Time`) VALUES ('%s', '%s', '%s', '%s', 3, '%s', CURRENT_TIMESTAMP)", pEscName[playerid], Escape_Name(pIP(playerid)), Escape_String(pGPCI(playerid)), Escape_String(reason), Escape_Name(gAname(admin)));
	mysql_query(GTADM, string);

    format(string, sizeof(string), "~l~Name: ~w~%s", pName[playerid]);
    PlayerTextDrawSetStringEX(playerid, PropTD[playerid][0], string);

    if(admin >= 0) format(string, sizeof(string), "~l~Admin: %s", pName[admin]), printf("%-Ban- %s has been banned by %s (Reason: %s)", pName[playerid], pName[admin], reason);
    else format(string, sizeof(string), "~l~Admin: Jonny"), printf("-Ban- %s has been banned by Jonny (Reason: %s)", pName[playerid], reason);

    PlayerTextDrawSetStringEX(playerid, PropTD[playerid][1], string);

    format(string, sizeof(string), "~l~Reason: %s", reason);
    PlayerTextDrawSetStringEX(playerid, PropTD[playerid][2], string);


    PlayerTextDrawSetStringEX(playerid, PropTD[playerid][7], "~r~You have been banned!");
    PlayerTextDrawSetStringEX(playerid, PropTD[playerid][5], "_~n~_~n~_~n~_~n~_");

    new Year, Month, Day;
    getdate(Year, Month, Day);
    format(string, sizeof(string), "~l~Date: %02d/%02d/%d", Day, Month, Year);

    PlayerTextDrawSetStringEX(playerid, PropTD[playerid][3], string);

    format(string, sizeof(string), "~r~Note - You can make an unban request in ~y~www.gtadm.com~n~~r~Press F8 to take a screenshot!~n~~g~IP - %s", pIP(playerid));
    PlayerTextDrawSetStringEX(playerid, PropTD[playerid][4], string);

	PlayerTextDrawShow(playerid, PropTD[playerid][0]);
	PlayerTextDrawShow(playerid, PropTD[playerid][1]);
	PlayerTextDrawShow(playerid, PropTD[playerid][2]);
	PlayerTextDrawShow(playerid, PropTD[playerid][3]);
	PlayerTextDrawShow(playerid, PropTD[playerid][4]);
	PlayerTextDrawShow(playerid, PropTD[playerid][7]);
	PlayerTextDrawShow(playerid, PropTD[playerid][5]);

/*	SendClientMessage(playerid, -1, ""RED_"» Banned « {BABABA}You have been banned from the server.");
    SendClientMessage(playerid, -1, ""RED_"» Banned « {BABABA}Admin: %s", pName[admin]);
    SendClientMessage(playerid, -1, ""RED_"» Banned « {BABABA}Reason: %s", reason);
    SendClientMessage(playerid, -1, ""RED_"» Banned « {BABABA}Date: %02d/%02d/%d", Day, Month, Year);
    SendClientMessage(playerid, -1, ""RED_"» Banned « {BABABA}IP: %s", pIP(playerid));
    SendClientMessage(playerid, -1, ""RED_"» Banned « {BABABA}Press F8 to take a screenshot.");
    SendClientMessage(playerid, -1, ""RED_"» Banned « {BABABA}You can make an unban request at www.gtadm.com.");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");*/


	TogglePlayerControllable2(playerid, 0);
	SetTimerEx("banhim", 500, false, "i", playerid);
  }
}
forward banhim(playerid);
public banhim(playerid)
{
	 Ban(playerid);
	 return 1;
}

stock BanEX(playerid, reason[], admin)
{
  if(!IsPlayerNPC(playerid) && IsPlayerConnected(playerid))
  {
	TogglePlayerControllable2(playerid, 0);
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
//	HideScreenTXD(playerid);

    new string[256];
    if(admin < 0)  format(string, sizeof(string), "INSERT INTO `bans`(`Name`, `IP`, `GPCI`, `Reason`, `Ban_Type`, `Admin`, `Time`) VALUES ('%s', '%s', '%s', '%s', 1, 'Jonny', CURRENT_TIMESTAMP)", pEscName[playerid], Escape_Name(pIP(playerid)), Escape_String(pGPCI(playerid)), Escape_String(reason));
	else format(string, sizeof(string), "INSERT INTO `bans`(`Name`, `IP`, `GPCI`, `Reason`, `Ban_Type`, `Admin`, `Time`) VALUES ('%s', '%s', '%s', '%s', 1, '%s', CURRENT_TIMESTAMP)", pEscName[playerid], Escape_Name(pIP(playerid)), Escape_String(pGPCI(playerid)), Escape_String(reason), Escape_Name(gAname(admin)));
	mysql_query(GTADM, string);

    format(string, sizeof(string), "~l~Name: ~w~%s", pName[playerid]);
    PlayerTextDrawSetStringEX(playerid, PropTD[playerid][0], string);

    if(admin >= 0) format(string, sizeof(string), "~l~Admin: %s", pName[admin]), printf("-Ban- %s has been banned by %s (Reason: %s)", pName[playerid], pName[admin], reason);
    else format(string, sizeof(string), "~l~Admin: Jonny"), printf("-Ban- %s has been banned by Jonny (Reason: %s)", pName[playerid], reason);

    PlayerTextDrawSetStringEX(playerid, PropTD[playerid][1], string);

    format(string, sizeof(string), "~l~Reason: %s", reason);
    PlayerTextDrawSetStringEX(playerid, PropTD[playerid][2], string);


    PlayerTextDrawSetStringEX(playerid, PropTD[playerid][7], "~r~You have been banned!");
    PlayerTextDrawSetStringEX(playerid, PropTD[playerid][5], "_~n~_~n~_~n~_~n~_");

    new Year, Month, Day;
    getdate(Year, Month, Day);
    format(string, sizeof(string), "~l~Date: %02d/%02d/%d", Day, Month, Year);

    PlayerTextDrawSetStringEX(playerid, PropTD[playerid][3], string);

    format(string, sizeof(string), "~r~Note - You can make an unban request in ~y~www.gtadm.com~n~~r~Press F8 to take a screenshot!~n~~g~IP - %s", pIP(playerid));
    PlayerTextDrawSetStringEX(playerid, PropTD[playerid][4], string);

	PlayerTextDrawShow(playerid, PropTD[playerid][0]);
	PlayerTextDrawShow(playerid, PropTD[playerid][1]);
	PlayerTextDrawShow(playerid, PropTD[playerid][2]);
	PlayerTextDrawShow(playerid, PropTD[playerid][3]);
	PlayerTextDrawShow(playerid, PropTD[playerid][4]);
	PlayerTextDrawShow(playerid, PropTD[playerid][7]);
	PlayerTextDrawShow(playerid, PropTD[playerid][5]);

/*	SendClientMessage(playerid, -1, ""RED_"» Banned « {BABABA}You have been banned from the server.");
    SendClientMessage(playerid, -1, ""RED_"» Banned « {BABABA}Admin: %s", pName[admin]);
    SendClientMessage(playerid, -1, ""RED_"» Banned « {BABABA}Reason: %s", reason);
    SendClientMessage(playerid, -1, ""RED_"» Banned « {BABABA}Date: %02d/%02d/%d", Day, Month, Year);
    SendClientMessage(playerid, -1, ""RED_"» Banned « {BABABA}IP: %s", pIP(playerid));
    SendClientMessage(playerid, -1, ""RED_"» Banned « {BABABA}Press F8 to take a screenshot.");
    SendClientMessage(playerid, -1, ""RED_"» Banned « {BABABA}You can make an unban request at www.gtadm.com.");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");*/

	TogglePlayerControllable2(playerid, 0);
	SetTimerEx("banhim", 500, false, "i", playerid);
  }
}

stock gettimeEx(&Hour, &Minute, &Second)
{
     gettime(Hour, Minute, Second);
	 Hour+=1;///1
//	 Minute+=1;
	 if(Hour >= 24) Hour=Hour-24;
	 if(Minute >= 60) Minute=Minute-60;
}

forward BanCheck(playerid);
public BanCheck(playerid)
{
       new rows, fields, o, banana[50];
       cache_get_row_count(rows);
       cache_get_field_count(fields);
       new dbanhim;
       if(rows == 0)
	   {
		  OnPlayerConnects(playerid);
	   }
	   else
	   {
			for(new x=0; x<rows; x++)
			{
		         cache_get_value_index_int(x, 4, o);
		         cache_get_value_index(x, 0, banana);
		         if(o == 1 && !strcmp(banana, pName[playerid]))
		         {
                   dbanhim=1;
     			   break;
				 }
				 else if(o == 2 && !strcmp(banana, pName[playerid]))
				 {
                   if(dbanhim == 0) dbanhim=2;
				 }
				 else if(o == 3)
				 {
                    dbanhim=3;
     				break;
				 }
			}
			switch(dbanhim)
			{
			   case 1:
			   {
				   new string[128];
		     	   format(string, sizeof(string), "» Failed Connection Attempt « {AA8202}%s %s has been excluded from the server (Permanent ban)", pName[playerid], pIP(playerid));
		     	   foreach (new i : Player) if(IsAdmin(i, 1)) SendClientMessage(i, ORANGE, string);

				   SendClientMessage(playerid, RED, "YOU ARE BANNED FROM THIS SERVER!");
				   SetPVarInt(playerid, "DontCall_OnDisconnect", true);
				   printf("-Failed- %s has been banned on connect (Permanent ban)", pName[playerid]);
				   StopAudioStreamForPlayer(playerid);
				   SetTimerEx("banhim", 500, false, "i", playerid);
			   }
			   case 3:
			   {
			   		new string[128];
					format(string, sizeof(string), "SELECT `name` FROM `whitelist` WHERE `name` = '%s'", pEscName[playerid]);
					mysql_tquery(GTADM, string, "whitecheck", "dss", playerid);

			   }
			   case 2:
			   {
				   new oo;
		           cache_get_value_index_int(0, fields-1, oo);
		           if(oo <= 0)
		           {
						new query[168];
		            	format(query, sizeof(query), "DELETE FROM `bans` WHERE `NAME` = '%s'", pEscName[playerid]);
		            	mysql_query(GTADM, query);
		            	new string[128];
						format(string, sizeof(string), "» Temp ban « {AA8202}%s's temp ban has expired", pName[playerid]);
						foreach (new i : Player) if(IsAdmin(i, 1)) SendClientMessage(i, ORANGE, string);
				        printf("-Expired- %s's temp ban has been expired", pName[playerid]);
				        OnPlayerConnects(playerid);
		           }
		           else
		           {
					   SetTimerEx("KickPlayer2", 3000, false, "dd", playerid, oo);
		           }
			   }
			   default: OnPlayerConnects(playerid);
			}
	   }
       return 1;
}
forward KickPlayer2(playerid, oo);
public KickPlayer2(playerid, oo)
{
	 new string[256];
     format(string, sizeof(string), "» Failed Connection Attempt « {AA8202}%s %s has been excluded from the server (Temporary ban, expires in %d minutes)", pName[playerid], pIP(playerid), oo);
     foreach (new i : Player) if(IsAdmin(i, 1)) SendClientMessage(i, ORANGE, string);

     new str[128];
     format(str, sizeof(str), "YOU ARE TEMPORARY BANNED FROM THIS SERVER! (Your ban expires in %d minutes)", oo);
	 SendClientMessage(playerid, RED, str);
	 printf("-Kick- %s has been kicked for tempban || %d mins left", pName[playerid], oo);
	 SetPVarInt(playerid, "DontCall_OnDisconnect", true);
  	 StopAudioStreamForPlayer(playerid);
	 SetTimerEx("kickhim", 500, false, "i", playerid);
	 return 1;
}
CMD:offlineban(playerid, params[])
{
      if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
      if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
      if(!IsAdmin(playerid, 4)) return SendMsg(playerid, 5);
      new Reason[64], baname[24], string[168];
      if(sscanf(params, "s[24]s[64]", baname, Reason)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA} /offlineban "GRAY_"[Account Name] [reason]");
   	  if(strlen(Reason) > 10) return SendClientMessage(playerid, 0xFFFFFF, ""RED_"» Error « {BABABA}Ban reason cant be longer than 10 characters");

      format(string, sizeof(string), "SELECT `IP`, `GPCI` FROM `users` WHERE `Name` = '%s'", Escape_Name(baname));
      mysql_tquery(GTADM, string, "offlineban", "dss", playerid, baname, Reason);

      return 1;
}
CMD:offlinegpciban(playerid, params[])
{
      if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
      if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
      if(!IsAdmin(playerid, 5) && PlayerInfo[playerid][UserID] != 153569) return SendMsg(playerid, 5);
      new Reason[64], baname[24], string[168];
      if(sscanf(params, "s[24]s[64]", baname, Reason)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA} /offlinegpciban "GRAY_"[Account Name] [reason]");
   	  if(strlen(Reason) > 10) return SendClientMessage(playerid, 0xFFFFFF, ""RED_"» Error « {BABABA}Ban reason cant be longer than 10 characters");

      format(string, sizeof(string), "SELECT `IP`, `GPCI` FROM `users` WHERE `Name` = '%s'", Escape_Name(baname));
      mysql_tquery(GTADM, string, "gofflineban", "dss", playerid, baname, Reason);

      return 1;
}
forward setpassword(playerid, acc[], password[]);
public setpassword(playerid, acc[], password[])
{
	   new string[256];
       new rows, fields;
       cache_get_row_count(rows);
       cache_get_field_count(fields);
	   if(rows > 0)
	   {
          format(string, sizeof(string), "UPDATE `users` SET `Password` = md5('%s') WHERE `Name` = '%s'", Escape_String(password), Escape_Name(acc));
   	      mysql_query(GTADM, string);
   	      format(string, sizeof(string), "{00904C} » Account settings «{00D9AD} You have set a new password for %s's account", acc);
          SendClientMessage(playerid, AdminInfo, string);
	   }
	   else
	   {
         SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This account doesnt exist");
	   }
	   return 1;
}


forward whitecheck(playerid, acc[]);
public whitecheck(playerid, acc[])
{
       new rows, fields;
       cache_get_row_count(rows);
       cache_get_field_count(fields);
	   if(rows > 0)
	   {
			 OnPlayerConnects(playerid);
	   }
	   else
	   {
				new string[128];
				format(string, sizeof(string), "» Failed Connection Attempt « {AA8202}%s %s has been excluded from the server (GPCI ban)", pName[playerid], pIP(playerid));
				foreach (new i : Player) if(IsAdmin(i, 1)) SendClientMessage(i, ORANGE, string);
				SendClientMessage(playerid, RED, "YOU ARE BANNED FROM THIS SERVER!");
				SetPVarInt(playerid, "DontCall_OnDisconnect", true);
				printf("-Failed- %s has been banned on connect (GPCI)", pName[playerid]);
	  		    StopAudioStreamForPlayer(playerid);
				SetTimerEx("banhim", 500, false, "i", playerid);
	   }
	   return 1;
}
forward fwhiteadd(playerid, acc[]);
public fwhiteadd(playerid, acc[])
{
	   new str[256];
       new rows, fields;
       cache_get_row_count(rows);
       cache_get_field_count(fields);
	   if(rows > 0)
	   {
		format(str, sizeof(str), "INSERT INTO `whitelist`(`name`) VALUES ('%s')", Escape_Name(acc));
		mysql_query(GTADM, str);
		format(str, sizeof(str), "-AdminsMsg- Admin %s has added the name \"%s\" to the whitelist", gAname(playerid), acc);
		foreach (new i : Player)
		{
			if(IsAdmin(playerid, 1))
			{
		      SendClientMessage(i, AdminInfo, str);
			}
		}
	   }
	   else
	   {
         SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This account doesnt exist");
	   }
	   return 1;
}

forward fwhiteremove(playerid, acc[]);
public fwhiteremove(playerid, acc[])
{
	   new str[256];
       new rows, fields;
       cache_get_row_count(rows);
       cache_get_field_count(fields);
	   if(rows > 0)
	   {
		format(str, sizeof(str), "DELETE FROM `whitelist` WHERE `name` = '%s';", Escape_Name(acc));
		mysql_query(GTADM, str);
		format(str, sizeof(str), "-AdminsMsg- Admin %s has remove the name \"%s\" from the whitelist", gAname(playerid), acc);
		foreach (new i : Player)
		{
			if(IsAdmin(playerid, 1))
			{
		      SendClientMessage(i, AdminInfo, str);
			}
		}
	   }
	   else
	   {
         SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This account doesnt exist in the whitelist!");
	   }
	   return 1;
}


forward offlineban(playerid, acc[], reason[]);
public offlineban(playerid, acc[], reason[])
{
	   new string[256];
       new rows, fields, data[24], data2[32];
       cache_get_row_count(rows);
       cache_get_field_count(fields);
	   if(rows > 0)
	   {
          cache_get_value_name(0, "IP", data);
          cache_get_value_name(0, "GPCI", data2);
    	  format(string, sizeof(string), "{3BB023}» Admin action « {ABFF85}Admin %s has banned %s (Reason: %s)", gAname(playerid), acc, reason);
          SendClientMessageToAll(AdminInfo, string);
          format(string, sizeof(string), "INSERT INTO `bans`(`Name`, `IP`, `GPCI` , `Reason`, `Ban_Type`, `Time`, `Admin`) VALUES ('%s', '%s', '%s', '%s', 1, CURRENT_TIMESTAMP, '%s')", Escape_Name(acc), Escape_Name(data), Escape_String(data2), Escape_String(reason), gAname(playerid));
   	      mysql_query(GTADM, string);
      	  new str2[128];
          format(str2, sizeof(str2), "-Ban- Admin %s has banned %s (Reason: %s)", gAname(playerid), acc, reason);
          printf("%s", str2);
	   }
	   else
	   {
         SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This account doesnt exist");
	   }
	   return 1;
}

forward gofflineban(playerid, acc[], reason[]);
public gofflineban(playerid, acc[], reason[])
{
	   new string[256];
       new rows, fields, data[120], data2[120];
       cache_get_row_count(rows);
       cache_get_field_count(fields);
	   if(rows > 0)
	   {
          cache_get_value_name(0, "IP", data);
          cache_get_value_name(0, "GPCI", data2);
          if(strlen(data2) < 15)  SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Couldnt find the gpci of this account!");
		  else
		  {
	    	  format(string, sizeof(string), "{3BB023}» Admin action « {ABFF85}Admin %s has banned %s (Reason: %s)", gAname(playerid), acc, reason);
	          SendClientMessageToAll(AdminInfo, string);
	          format(string, sizeof(string), "INSERT INTO `bans`(`Name`, `IP`, `GPCI` , `Reason`, `Ban_Type`, `Time`, `Admin`) VALUES ('%s', '%s', '%s', '%s', 3, CURRENT_TIMESTAMP, '%s')", Escape_Name(acc), Escape_Name(data), Escape_String(data2), Escape_String(reason), Escape_String(gAname(playerid)));
	   	      mysql_query(GTADM, string);
   	      	  new str2[128];
              format(str2, sizeof(str2), "-Ban- Admin %s has banned %s (Reason: %s)", gAname(playerid), acc, reason);
              printf("%s", str2);
   	      }
	   }
	   else
	   {
         SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This account doesnt exist");
	   }
	   return 1;
}

forward p_Info(acc[], playerid);
public p_Info(acc[], playerid)
{
	   new string[512];
       new p_IP[50], p_Reason[50], p_Date[50], p_Admin[50], rows, fields;
       cache_get_row_count(rows);
       cache_get_field_count(fields);
	   if(rows > 0)
	   {
          cache_get_value_name(0, "IP", p_IP);
          cache_get_value_name(0, "Reason", p_Reason);
          cache_get_value_name(0, "Time", p_Date);
          cache_get_value_name(0, "Admin", p_Admin);

 	      format(string, sizeof(string), "{D44444}%s's Ban Info\n{C0D444}IP{FFFFFF}: %s\n{C0D444}Reason{FFFFFF}: %s\n{C0D444}Date - Time{FFFFFF}: %s\n{C0D444}Admin{FFFFFF}: %s", acc, p_IP, p_Reason, p_Date, p_Admin);
          ShowPlayerDialog(playerid, 32760, DIALOG_STYLE_MSGBOX, "Ban Info", string, "close", "");
	   }
	   else
	   {
         SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This account is not banned");
	   }
	   return 1;
}
forward p_Unban(acc[], playerid);
public p_Unban(acc[], playerid)
{
	   new string[256];
       new rows, fields, data[24], ban_type;
       cache_get_row_count(rows);
       cache_get_field_count(fields);
	   if(rows > 0)
	   {

        cache_get_value_name_int(0, "Ban_Type", ban_type);
        if(!IsAdmin(playerid, 5) && ban_type==3) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant unban GPCI banned players!");
        else
        {
	        format(string, sizeof(string), "DELETE FROM `bans` WHERE `NAME` = '%s'", Escape_Name(acc));
	        mysql_query(GTADM, string);
	 	    format(string, sizeof(string), "{3BB023}» Admin action « {ABFF85}Admin %s has unbanned %s", gAname(playerid), playerid, acc);
	        foreach(new i : Player) if(IsAdmin(i, 1)) SendClientMessage(i, -1, string);
			cache_get_value_name(0, "IP", data);
	        format(string, sizeof(string), "unbanip %s", data);
	        SendRconCommand(string);
	        new str2[128];
            format(str2, sizeof(str2), "-Unban- Admin %s has unbanned %s", gAname(playerid), playerid, acc);
            printf("%s", str2);
        }
	   }
	   else
	   {
         SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This account is not banned");
	   }
	   return 1;
}
stock GetPropCount(playerid)
{
  new count =0;
  for(new p=0; p<MAX_PROPS; p++)
  {
	if(fexist(PropPath(p)))
	{
       if(!strcmp(pInfo[p][Owner], pName[playerid], true))
	   {
	     count++;
	   }
	}
  }
  return count;
}

stock OpenPropDialog(playerid, p)
{
  new str[128];
  format(str, sizeof(str), "~l~Property: ~w~%s", pInfo[p][Name]);
  PlayerTextDrawSetStringEX(playerid, PropTD[playerid][0], str);
  PlayerTextDrawSetStringEX(playerid, PropTD[playerid][5], "_~n~_~n~_~n~_~n~");

  PlayerTextDrawShow(playerid, PropTD[playerid][0]);
  PlayerTextDrawShow(playerid, PropTD[playerid][5]);

  format(str, sizeof(str), "~l~Price: ~l~$%d", pInfo[p][Earnings]*25);
  PlayerTextDrawSetStringEX(playerid, PropTD[playerid][1], str);
  PlayerTextDrawShow(playerid, PropTD[playerid][1]);

  format(str, sizeof(str), "~l~Earnings: ~l~$%d", pInfo[p][Earnings]);
  PlayerTextDrawSetStringEX(playerid, PropTD[playerid][2], str);
  PlayerTextDrawShow(playerid, PropTD[playerid][2]);

  format(str, sizeof(str), "~l~Owner: ~l~%s", pInfo[p][Owner]);
  PlayerTextDrawSetStringEX(playerid, PropTD[playerid][3], str);
  PlayerTextDrawShow(playerid, PropTD[playerid][3]);

  format(str, sizeof(str), "~y~Property", pInfo[p][Earnings]);
  PlayerTextDrawSetStringEX(playerid, PropTD[playerid][7], str);
  PlayerTextDrawShow(playerid, PropTD[playerid][7]);
  PlayerTextDrawSetPreviewModel(playerid, PropTD[playerid][6], 1274);
  PlayerTextDrawShow(playerid, PropTD[playerid][6]);
  SetPVarInt(playerid, "ShowPropTD", true);

  if(!strcmp(pName[playerid], pInfo[p][Owner]))
  {
     ShowMenuForPlayer(PropMenu2, playerid);
     TogglePlayerControllable2(playerid, 0);
  }

  else
  {
    if(!IsOwnerActive(p))
    {
	  new cash = pInfo[p][Earnings]*25;
      if(GetPropCount(playerid) < 7 && GetPlayerMoneyEx(playerid) >= cash &&  (GetPVarInt(playerid, "LOGGED")) != 2)
	  {
          ShowMenuForPlayer(PropMenu1, playerid);
          TogglePlayerControllable2(playerid, 0);
	  }
	  else SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You can't buy this property! Use \"/help\" to see the requirements");
    }
  }
  return 1;
}

stock IsOwnerActive(p)
{
   new owner = INVALID_PLAYER_ID;
   foreach (new i : Player)
   {
	   if(!strcmp(pName[i], pInfo[p][Owner]))
	   {
		   owner = i;
		   break;
	   }
   }
   if((owner == INVALID_PLAYER_ID) || (GetPVarInt(owner, "AFK"))) return 0;
   return 1;
}

stock GetPlayerTotalPayday(playerid)
{
  new cashcount=0;
  for(new p=0; p<MAX_PROPS; p++)
  {
	if(fexist(PropPath(p)))
    {
	    if(!strcmp(pInfo[p][Owner], pName[playerid], false))
		{
		  cashcount = cashcount + pInfo[p][Earnings];
		}
	}
  }
  return cashcount;
}
#if defined USE_OLDBANK
ShowBankTD(playerid)
{
     HideScreenTXD(playerid);
     PlayerTextDrawShow(playerid, BankTD[playerid]);
}
#endif
stock CapsLockCheck (text [])
{
	new o[300];
	format(o, sizeof(o), "%s", text);
    str_replace(" ", "", o);

	new len = strlen (o);

	if (len > 3)
	{
		new c;

		for (new i = 0; i < len; ++i)
			if (o [i] >= 'A' && o [i] <= 'Z')
				c++;

		if (c)
			if (c >= (len >>> 2) * 3)
				return true;
	}
	return false;
}

stock PreloadAnims(playerid)
{
	PreloadAnimLib(playerid, "DEALER");
	PreloadAnimLib(playerid, "DANCING");
	PreloadAnimLib(playerid, "HEIST9");
	PreloadAnimLib(playerid, "BOMBER");
    PreloadAnimLib(playerid, "RAPPING");
    PreloadAnimLib(playerid, "SHOP");
    PreloadAnimLib(playerid, "BEACH");
    PreloadAnimLib(playerid, "SMOKING");
    PreloadAnimLib(playerid, "FOOD");
    PreloadAnimLib(playerid, "ON_LOOKERS");
    PreloadAnimLib(playerid, "DEALER");
    PreloadAnimLib(playerid, "CRACK");
    PreloadAnimLib(playerid, "CARRY");
    PreloadAnimLib(playerid, "COP_AMBIENT");
    PreloadAnimLib(playerid, "PARK");
    PreloadAnimLib(playerid, "INT_HOUSE");
    PreloadAnimLib(playerid, "FOOD" );
    PreloadAnimLib(playerid, "ped" );
    PreloadAnimLib(playerid, "MISC" );
    PreloadAnimLib(playerid, "POLICE" );
    PreloadAnimLib(playerid, "GRAVEYARD" );
    PreloadAnimLib(playerid, "WUZI" );
    PreloadAnimLib(playerid, "SUNBATHE" );
    PreloadAnimLib(playerid, "PLAYIDLES" );
    PreloadAnimLib(playerid, "CAMERA" );
    PreloadAnimLib(playerid, "RIOT" );
    PreloadAnimLib(playerid, "DAM_JUMP" );
    PreloadAnimLib(playerid, "JST_BUISNESS" );
    PreloadAnimLib(playerid, "KISSING" );
    PreloadAnimLib(playerid, "GANGS" );
    PreloadAnimLib(playerid, "GHANDS" );
    PreloadAnimLib(playerid, "BLOWJOBZ" );
}

stock PreloadAnimLib(playerid, animlib[]) {
ApplyAnimation(playerid, animlib, "null", 0.0, 0, 0, 0, 0, 0); }


//=================================Fallout======================================
//================================================================from this shit
public FalloutCountdown( )
{

	if( Iter_Count(FalloutPlayers) < 2 )//falloutplayers
	{
		SendClientMessageToAll( fOUT2, "» Fallout « "fOUT_"The Fallout minigame has been cancelled "fOUT2_"(Not enough players)");
		foreach(new i:FalloutPlayers) DeletePVar(i, "inFallout"), DeletePVar(i, "falloutplace"), DeletePVar(i, "typedfallout");
		return EndMinigame( );
	}

	if( FallOut != 2 )
	{
	    new spot;
		foreach(new i : FalloutPlayers)
		{
            SavePlayerCoords(i);
            ResetPlayerWeaponsEX(i);
			SetPlayerInterior( i, 0 );
			SetPlayerVirtualWorldEX( i, 0 );
			spot = Iter_Random(_Objects);
     		SendInfoText(i, 2050, pReadyText[random( sizeof( pReadyText ) )]);
     		Iter_Remove(_Objects, spot );
     		TogglePlayerControllable2( i, false );
			new a=GetPVarInt(i, "falloutplace");
			if(a >= 12)
			{
				SetPlayerPos( i, pgCoords[11][0], pgCoords[11][1], pgCoords[11][2] +0.5 );
				SetPlayerFacingAngle(i, pgCoords[11][3]);
			}
			else
			{
			SetPlayerPos( i, pgCoords[a][0], pgCoords[a][1], pgCoords[a][2] +0.5 );
			SetPlayerFacingAngle(i, pgCoords[a][3]);
			}
            SetPlayerCameraPos(i, 113.3811, 66.5014, 571.3477);
            SetPlayerCameraLookAt(i, 113.3948, 67.4999, 570.6075);

        }
		Iter_Clear(_Objects);
		for( new i; i < MAX_SLOTS; i++ ) Iter_Add(_Objects, i );
		SetTimer( "FalloutCountdown", 2000, 0 );
		FallOut = 2;
	}
	else
	{
		foreach(new i : FalloutPlayers)
		{
     		SendInfoText(i, 1500, "~g~Go!");
			PlayerPlaySound( i, 1057, 0.0, 0.0, 0.0 );
			TogglePlayerControllable2( i, true );
			SetCameraBehindPlayer(i);
            SetPVarInt(i, "inFallout", true);
		}
		uTimer = SetTimer( "MinigameUpdate", 2000, true );
	}
	return 1;
}

public MinigameUpdate( )
{
	if( Iter_Count(FalloutPlayers) < 1 ) return EndMinigame( );

 	new fobj = Iter_Random(_Objects);
 	new ti=SetTimerEx("ObjectShake", 300, true, "i", Objects_[fobj]);
 	SetTimerEx("FallOutDown", 3000, false, "id", Objects_[fobj], ti);
    Iter_Remove(_Objects, fobj );

	if(Iter_Count(_Objects) < 60)
	{
    	new fobj2 = Iter_Random(_Objects);
    	new ti2=SetTimerEx("ObjectShake", 300, true, "i", Objects_[fobj2]);
    	SetTimerEx("FallOutDown", 3000, false, "id", Objects_[fobj2], ti2);
        Iter_Remove(_Objects, fobj2 );
	}
	return 1;
}

forward ObjectShake( object );
public ObjectShake( object )
{
    new Float:pos[3];
    GetDynamicObjectPos(object, pos[0], pos[1], pos[2]);
    MoveDynamicObject(object, pos[0], pos[1], pos[2]-0.01, 0.1, -10+random(20), -3+(random(6)), 0.0);
	return 1;
}

forward FallOutDown( object, timerend );
public FallOutDown( object, timerend )
{
	KillTimer(timerend);
	new Float:pos[3];
	GetDynamicObjectPos(object, pos[0], pos[1], pos[2]);
	MoveDynamicObject( object, pos[0], pos[1], pos[2]-1000, 20.0);
	foreach(new i : FalloutPlayers) PlayerPlaySound( i, 1039, 0.0, 0.0, 0.0 );
	return 1;
}

stock EndMinigame( )
{
	for( new i; i < MAX_SLOTS; i++ )
 	{
 	    if(IsValidDynamicObject(Objects_[i])) DestroyDynamicObject( Objects_[i] );
 	    Objects_[i]=INVALID_OBJECT_ID;
 	}
 	FallOut = 0;
	Iter_Clear(_Objects);
	Iter_Clear(FalloutPlayers);
	KillTimer( uTimer );
	uTimer=-1;
	return 1;
}

//=============================================================== till this shit
public f_RespawnPlayer ( player )
{
	 LoadPlayerCoords(player);
	 SetCameraBehindPlayer(player);
	 return 1;
}

stock PlayerCarAudio(playerid, url[])
{
	   if(GetPlayerState(playerid) != 2) return 0;
	   new v =GetPlayerVehicleID(playerid);
	   foreach (new i : Player)
	   {
		   if(GetPlayerVehicleID(i) == v)
              PlayAudioStreamForPlayer(i, url);
	   }
	   return 1;
}


//================Hide Menu And Dialog==========================================
stock HidePlayerDialog(playerid)
{
 if(!GetPVarInt(playerid, "lolola")) return ShowPlayerDialog(playerid, -1, 0, "", "", "", "");
 return 1;
}

stock HidePlayerMenu(playerid)
{
    new Menu:current;
    current = GetPlayerMenu(playerid);
    if(_:current != 255)
    {
      HideMenuForPlayer(current, playerid);
      TogglePlayerControllable2(playerid, 1);
      #if defined USEDRIFT
      if(current != CanonMenu && current != DriftMenu && current != StuntMenu) OnPlayerExitedMenu(playerid);
	  #else
      if(current != CanonMenu && /*current != DriftMenu &&*/ current != StuntMenu) OnPlayerExitedMenu(playerid);
	  #endif
    }
}
//==============================================================================

stock GetWeaponModelIDFromName(wname[])
{
    for(new i = 0; i < 48; i++) {
        if (i == 19 || i == 20 || i == 21) continue;
        if (strfind(aWeaponNames[i], wname, true) != -1) {
            return i;
        }
    }
    return 0;
}


//||============================================================================||
//||                      Drift Stock                                                ||
//||                                                                            ||
//||============================================================================||
#if defined USEDRIFT


stock Remove_From_Drift(playerid)
{
   if(RaceStarted == 0) SetPlayerRaceCheckpoint(playerid, 0, RaceInfo[RaceIDCount][StartCP][0], RaceInfo[RaceIDCount][StartCP][1], RaceInfo[RaceIDCount][StartCP][2], RaceCPs[RaceIDCount][0][0], RaceCPs[RaceIDCount][0][1], RaceCPs[RaceIDCount][0][2], 15.0);
   SetPlayerVirtualWorldEX(playerid, 0);
   DeletePVar(playerid, "DriftScore");
   pDrift[playerid]=0;
   DeletePVar(playerid, "Drifter");
   DeletePVar(playerid, "Combo");
   DeletePVar(playerid, "DriftMap");
   for(new x=0; x<5; x++) TextDrawHideForPlayer(playerid, pDriftTD[playerid][x]);
   LoadPlayerCoords(playerid);
   return 1;
}


stock CreatepDriftTD(playerid)
{
	pDriftTD[playerid][1] = TextDrawCreate(320.000000, 150.000000, "_");
	TextDrawAlignment(pDriftTD[playerid][1], 2);
	TextDrawBackgroundColor(pDriftTD[playerid][1], 369098796);
	TextDrawFont(pDriftTD[playerid][1], 3);
	TextDrawLetterSize(pDriftTD[playerid][1], 0.449999, 1.500000);
	TextDrawColor(pDriftTD[playerid][1], 0xF9FF8FEE);
	TextDrawSetOutline(pDriftTD[playerid][1], 1);
	TextDrawSetProportional(pDriftTD[playerid][1], 1);

	pDriftTD[playerid][2] = TextDrawCreate(9.000000, 260.000000, "X1");
	TextDrawBackgroundColor(pDriftTD[playerid][2], 100);
	TextDrawFont(pDriftTD[playerid][2], 1);
	TextDrawLetterSize(pDriftTD[playerid][2], 0.639999, 2.700000);
	TextDrawColor(pDriftTD[playerid][2], -64513);
	TextDrawSetOutline(pDriftTD[playerid][2], 1);
	TextDrawSetProportional(pDriftTD[playerid][2], 1);
	TextDrawUseBox(pDriftTD[playerid][2], 0);
	TextDrawBoxColor(pDriftTD[playerid][2], 100);
	TextDrawTextSize(pDriftTD[playerid][2], 102.000000, 49.000000);

	pDriftTD[playerid][3] = TextDrawCreate(9.000000, 286.000000, "~r~Score: -");
	TextDrawBackgroundColor(pDriftTD[playerid][3], 100);
	TextDrawFont(pDriftTD[playerid][3], 1);
	TextDrawLetterSize(pDriftTD[playerid][3], 0.279999, 1.300000);
	TextDrawColor(pDriftTD[playerid][3], -64513);
	TextDrawSetOutline(pDriftTD[playerid][3], 1);
	TextDrawSetProportional(pDriftTD[playerid][3], 1);
	TextDrawUseBox(pDriftTD[playerid][3], 0);
	TextDrawBoxColor(pDriftTD[playerid][3], 100);
	TextDrawTextSize(pDriftTD[playerid][3], 102.000000, 49.000000);

	pDriftTD[playerid][4] = TextDrawCreate(523.000000, 221.000000, "-");//position
	TextDrawBackgroundColor(pDriftTD[playerid][4], 255);
	TextDrawFont(pDriftTD[playerid][4], 0);
	TextDrawLetterSize(pDriftTD[playerid][4], 0.759999, 2.800000);
	TextDrawColor(pDriftTD[playerid][4], -1848185345);
	TextDrawSetOutline(pDriftTD[playerid][4], 0);
	TextDrawSetProportional(pDriftTD[playerid][4], 1);
	TextDrawSetShadow(pDriftTD[playerid][4], 1);

	pDriftTD[playerid][0] = TextDrawCreate(9.000000, 300.000000, "    05:50");
	TextDrawBackgroundColor(pDriftTD[playerid][0], 100);
	TextDrawFont(pDriftTD[playerid][0], 1);
	TextDrawLetterSize(pDriftTD[playerid][0], 0.279999, 1.300000);
	TextDrawColor(pDriftTD[playerid][0], -64513);
	TextDrawSetOutline(pDriftTD[playerid][0], 1);
	TextDrawSetProportional(pDriftTD[playerid][0], 1);
	TextDrawUseBox(pDriftTD[playerid][0], 0);
	TextDrawBoxColor(pDriftTD[playerid][0], 100);
	TextDrawTextSize(pDriftTD[playerid][0], 102.000000, 49.000000);

}

#endif
//========================Npc===================================================
stock SendNpcPM(playerid, msg[])
{
 new str[128];
 new g=NpcID();
 format(str, sizeof(str), "» PM « from Jonny (%d): %s", g, msg);
 SendClientMessageEX(playerid, PINK, str);
 PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
 format(str, sizeof(str), "» PM « from Jonny to %s: %s", pName[playerid], msg);
 foreach (new i : Player) if(IsAdmin(i, PlayerInfo[playerid][pAdmin]+1) && (i != playerid)) SendClientMessageEX(i, GRAY, str);
 format(str, sizeof(str), "~y~PM FROM ~r~Jonny~y~[~b~%d~y~]~n~RECEIVED!", g);
 SendInfoText(playerid, 3000, str);
 SendClientMessageEX(playerid, RACE, "Use "PINK_"/r <Message> "RACE_"to reply directly to the private message");
 return 1;
}

stock NpcID()
{
	new count;
	foreach(new i : NPC) if(!strcmp(pName[i], "Jonny")) count = i;
	return count;
}
//===========================FireWork===========================================

stock CreateFireWork(Float:x, Float:y, Float:z, Type, Float:high)
{
      new id = GetfWorkSlot();
      if(id != -1)
      {
      	  FireWork[id][Color]=Type;
          FireWork[id][active] = 1;
          FireWork[id][fPos][0] = x;
          FireWork[id][fPos][1] = y;
          FireWork[id][fPos][2] = z;
		  FireWork[id][mis][0] = CreateDynamicObject(18728, x, y, z, 0.0, 0.0, 0.0, -1, -1, -1, 1000.0);
		  FireWork[id][mis][1] = CreateDynamicObject(345, x, y, z, 0.0, 0.0, 0.0, -1, -1, -1, 1000.0);
		  MoveDynamicObject(FireWork[id][mis][0], x, y, z+high, 10.00);
		  MoveDynamicObject(FireWork[id][mis][1], x, y, z+high, 10.00);
      }
      else print("NoSlotSOA__PKL");
}


stock IsFireWorkObject(objectid)
{
	  new m=-1;
      for(new x=0;x<MAX_FIREWORKS;x++)
      {
          if((FireWork[x][mis][0] == objectid)||(FireWork[x][mis][1] == objectid)) m =x;
		  else
		  {
			for(new d=0; d<15; d++)
			{
				if(d<10)
				{
                  if(FireWork[x][ColorObj][d] == objectid) m=x;
				}
                if(FireWork[x][ColorObj2][d] == objectid) m=x;
			}
		  }
      }
      return m;
}
stock GetfWorkSlot()
{
      for(new x=0;x<MAX_FIREWORKS;x++)
      {
		  if(FireWork[x][active] == 0)
		  {
			  return x;
		  }
      }
	  return -1;
}
stock OnFireWorkMove(objectid)
{
	   new id = IsFireWorkObject(objectid);
	   if( id >= 0)
	   {
	     if(FireWork[id][active] == 1)
	     {

                 FireWork[id][active] = 2;
			     new Float:x, Float:y, Float:z;
	 	 	  	 GetDynamicObjectPos(FireWork[id][mis][0], x, y, z);
			 	 if(IsValidDynamicObject(FireWork[id][mis][0])) DestroyDynamicObject(FireWork[id][mis][0]);
                 FireWork[id][mis][0]=INVALID_OBJECT_ID;
			 	 if(IsValidDynamicObject(FireWork[id][mis][1])) DestroyDynamicObject(FireWork[id][mis][1]);
                 FireWork[id][mis][1]=INVALID_OBJECT_ID;
                 for(new g=0; g<10; g++)
                 {
        	        FireWork[id][ColorObj][g] = CreateDynamicObject(354 , x, y, z, 00.00, 0.00, 0.00, -1, -1, -1, 1000.0);
					new b=(random(20));
					new a=-10+(random(20));
			    	MoveDynamicObject(FireWork[id][ColorObj][g], x+b, y+a, z-15, 4.00);
                 }
			     CreateExplosion(x, y, z, 2, 10.00);
	      }
	      else if(FireWork[id][active] == 2)
	      {
             FireWork[id][active] = 3;
			 new l=19296+random(3);
             for(new x=0; x<10; x++)
             {
		       new Float:xx, Float:y, Float:z;
 	 	  	   GetDynamicObjectPos(FireWork[id][ColorObj][x], xx, y, z);
               if(IsValidDynamicObject(FireWork[id][ColorObj][x])) DestroyDynamicObject(FireWork[id][ColorObj][x]);
               FireWork[id][ColorObj][x]=INVALID_OBJECT_ID;
 			   new b=(random(5));
   	           if(x < 5)
			   {
			     FireWork[id][ColorObj2][10+x] = CreateDynamicObject(19295 , xx+b, y, z, 00.00, 0.00, 0.00, -1, -1, -1, 1000.0);
		         MoveDynamicObject(FireWork[id][ColorObj2][10+x], xx+b, y, z-8, 4.00);
//		         printf("Created %d %d", FireWork[id][ColorObj2][10+x], 10+x);
			   }
    	       FireWork[id][ColorObj2][x] = CreateDynamicObject(l , xx+b, y, z, 00.00, 0.00, 0.00, -1, -1, -1, 1000.0);
		       MoveDynamicObject(FireWork[id][ColorObj2][x], xx+b, y, z-8, 4.00);
//	           printf("Created %d %d", FireWork[id][ColorObj2][x], x);
			 }
	      }
	      else if(FireWork[id][active] == 3)
	      {
             FireWork[id][active] = 0;
             for(new x=0; x<15; x++)
             {
               if(IsValidDynamicObject(FireWork[id][ColorObj2][x])) DestroyDynamicObject(FireWork[id][ColorObj2][x]);
               FireWork[id][ColorObj2][x]=INVALID_OBJECT_ID;
             }
	      }
	   }
	   return 1;
}
//=================================CW===========================================
stock CreateCwWinTD()
{
	EnDCwTD_[0] = TextDrawCreate(106.000000, 121.000000, "__");
	TextDrawBackgroundColor(EnDCwTD_[0], 255);
	TextDrawFont(EnDCwTD_[0], 1);
	TextDrawLetterSize(EnDCwTD_[0], 0.600000, 2.900000);
	TextDrawColor(EnDCwTD_[0], -1);
	TextDrawSetOutline(EnDCwTD_[0], 1);
	TextDrawSetProportional(EnDCwTD_[0], 1);
	TextDrawSetShadow(EnDCwTD_[0], 1);
	TextDrawUseBox(EnDCwTD_[0], 1);
	TextDrawBoxColor(EnDCwTD_[0], 38550);
	TextDrawTextSize(EnDCwTD_[0], 510.000000, 0.000000);

	EnDCwTD_[1] = TextDrawCreate(106.000000, 149.000000, "__");
	TextDrawBackgroundColor(EnDCwTD_[1], 255);
	TextDrawFont(EnDCwTD_[1], 1);
	TextDrawLetterSize(EnDCwTD_[1], 0.600000, 20.300001);
	TextDrawColor(EnDCwTD_[1], -1);
	TextDrawSetOutline(EnDCwTD_[1], 1);
	TextDrawSetProportional(EnDCwTD_[1], 1);
	TextDrawSetShadow(EnDCwTD_[1], 1);
	TextDrawUseBox(EnDCwTD_[1], 1);
	TextDrawBoxColor(EnDCwTD_[1], 150);
	TextDrawTextSize(EnDCwTD_[1], 510.000000, 0.000000);

	EnDCwTD_[2] = TextDrawCreate(155.000000, 130.000000, "Team blahblah has won the clan war");
	TextDrawBackgroundColor(EnDCwTD_[2], 255);
	TextDrawFont(EnDCwTD_[2], 1);
	TextDrawLetterSize(EnDCwTD_[2], 0.500000, 1.000000);
	TextDrawColor(EnDCwTD_[2], -1);
	TextDrawSetOutline(EnDCwTD_[2], 1);
	TextDrawSetProportional(EnDCwTD_[2], 1);

	EnDCwTD_[3] = TextDrawCreate(124.000000, 164.000000, "~y~Team Home score:~g~ 30");
	TextDrawBackgroundColor(EnDCwTD_[3], 255);
	TextDrawFont(EnDCwTD_[3], 1);
	TextDrawLetterSize(EnDCwTD_[3], 0.400000, 1.100000);
	TextDrawColor(EnDCwTD_[3], -1);
	TextDrawSetOutline(EnDCwTD_[3], 1);
	TextDrawSetProportional(EnDCwTD_[3], 1);
	TextDrawSetShadow(EnDCwTD_[3], 1);

	EnDCwTD_[4] = TextDrawCreate(124.000000, 180.000000, "~y~Team Away score:~r~ 30");
	TextDrawBackgroundColor(EnDCwTD_[4], 255);
	TextDrawFont(EnDCwTD_[4], 1);
	TextDrawLetterSize(EnDCwTD_[4], 0.400000, 1.100000);
	TextDrawColor(EnDCwTD_[4], -1);
	TextDrawSetOutline(EnDCwTD_[4], 1);
	TextDrawSetProportional(EnDCwTD_[4], 1);
	TextDrawSetShadow(EnDCwTD_[4], 1);

	EnDCwTD_[5] = TextDrawCreate(124.000000, 228.000000, "~w~Best player:~y~ Player ~n~~n~~w~Worst player: ~y~Player~n~~n~~w~Best killing spree: ~y~15 by player");
	TextDrawBackgroundColor(EnDCwTD_[5], 255);
	TextDrawFont(EnDCwTD_[5], 1);
	TextDrawLetterSize(EnDCwTD_[5], 0.300000, 1.000000);//0.480000, 1.000000);
	TextDrawColor(EnDCwTD_[5], -1);
	TextDrawSetOutline(EnDCwTD_[5], 1);
	TextDrawSetProportional(EnDCwTD_[5], 1);

	EnDCwTD[0] = TextDrawCreate(90.000000, 101.000000, "_");
	TextDrawBackgroundColor(EnDCwTD[0], 255);
	TextDrawFont(EnDCwTD[0], 1);
	TextDrawLetterSize(EnDCwTD[0], 0.900000, 3.000000);
	TextDrawColor(EnDCwTD[0], -1);
	TextDrawSetOutline(EnDCwTD[0], 1);
	TextDrawSetProportional(EnDCwTD[0], 1);
	TextDrawUseBox(EnDCwTD[0], 1);
	TextDrawBoxColor(EnDCwTD[0], 345379990);
	TextDrawTextSize(EnDCwTD[0], 498.000000, 50.000000);

	EnDCwTD[1] = TextDrawCreate(90.000000, 127.000000, "___");
	TextDrawBackgroundColor(EnDCwTD[1], 255);
	TextDrawFont(EnDCwTD[1], 1);
	TextDrawLetterSize(EnDCwTD[1], 1.100000, 23.000000);
	TextDrawColor(EnDCwTD[1], -1);
	TextDrawSetOutline(EnDCwTD[1], 1);
	TextDrawSetProportional(EnDCwTD[1], 1);
	TextDrawUseBox(EnDCwTD[1], 1);
	TextDrawBoxColor(EnDCwTD[1], 150);
	TextDrawTextSize(EnDCwTD[1], 498.000000, 80.000000);

	EnDCwTD[2] = TextDrawCreate(103.000000, 138.000000, "Players");
	TextDrawBackgroundColor(EnDCwTD[2], 255);
	TextDrawFont(EnDCwTD[2], 1);
	TextDrawLetterSize(EnDCwTD[2], 0.420000, 0.899999);
	TextDrawColor(EnDCwTD[2], -1);
	TextDrawSetOutline(EnDCwTD[2], 1);
	TextDrawSetProportional(EnDCwTD[2], 1);

	EnDCwTD[3] = TextDrawCreate(102.000000, 157.000000, "~g~WinnerTeamPlayer1~w~        10                  5                    2");
	TextDrawBackgroundColor(EnDCwTD[3], 255);
	TextDrawFont(EnDCwTD[3], 1);
	TextDrawLetterSize(EnDCwTD[3], 0.300000, 1.000000);
	TextDrawColor(EnDCwTD[3], -1);
	TextDrawSetOutline(EnDCwTD[3], 1);
	TextDrawSetProportional(EnDCwTD[3], 1);
	TextDrawSetShadow(EnDCwTD[3], 1);

	EnDCwTD[4] = TextDrawCreate(102.000000, 171.000000, "~g~WinnerTeamPlayer1~w~        10                  5                    2");
	TextDrawBackgroundColor(EnDCwTD[4], 255);
	TextDrawFont(EnDCwTD[4], 1);
	TextDrawLetterSize(EnDCwTD[4], 0.300000, 1.000000);
	TextDrawColor(EnDCwTD[4], -1);
	TextDrawSetOutline(EnDCwTD[4], 1);
	TextDrawSetProportional(EnDCwTD[4], 1);
	TextDrawSetShadow(EnDCwTD[4], 1);

	EnDCwTD[5] = TextDrawCreate(102.000000, 185.000000, "~g~WinnerTeamPlayer1~w~        10                  5                    2");
	TextDrawBackgroundColor(EnDCwTD[5], 255);
	TextDrawFont(EnDCwTD[5], 1);
	TextDrawLetterSize(EnDCwTD[5], 0.300000, 1.000000);
	TextDrawColor(EnDCwTD[5], -1);
	TextDrawSetOutline(EnDCwTD[5], 1);
	TextDrawSetProportional(EnDCwTD[5], 1);
	TextDrawSetShadow(EnDCwTD[5], 1);

	EnDCwTD[6] = TextDrawCreate(102.000000, 199.000000, "~g~WinnerTeamPlayer1~w~        10                  5                    2");
	TextDrawBackgroundColor(EnDCwTD[6], 255);
	TextDrawFont(EnDCwTD[6], 1);
	TextDrawLetterSize(EnDCwTD[6], 0.300000, 1.000000);
	TextDrawColor(EnDCwTD[6], -1);
	TextDrawSetOutline(EnDCwTD[6], 1);
	TextDrawSetProportional(EnDCwTD[6], 1);
	TextDrawSetShadow(EnDCwTD[6], 1);

	EnDCwTD[7] = TextDrawCreate(102.000000, 214.000000, "~g~WinnerTeamPlayer1~w~        10                  5                    2");
	TextDrawBackgroundColor(EnDCwTD[7], 255);
	TextDrawFont(EnDCwTD[7], 1);
	TextDrawLetterSize(EnDCwTD[7], 0.300000, 1.000000);
	TextDrawColor(EnDCwTD[7], -1);
	TextDrawSetOutline(EnDCwTD[7], 1);
	TextDrawSetProportional(EnDCwTD[7], 1);
	TextDrawSetShadow(EnDCwTD[7], 1);

	EnDCwTD[8] = TextDrawCreate(102.000000, 229.000000, "~g~WinnerTeamPlayer1~w~        10                  5                    2");
	TextDrawBackgroundColor(EnDCwTD[8], 255);
	TextDrawFont(EnDCwTD[8], 1);
	TextDrawLetterSize(EnDCwTD[8], 0.300000, 1.000000);
	TextDrawColor(EnDCwTD[8], -1);
	TextDrawSetOutline(EnDCwTD[8], 1);
	TextDrawSetProportional(EnDCwTD[8], 1);
	TextDrawSetShadow(EnDCwTD[8], 1);

	EnDCwTD[9] = TextDrawCreate(102.000000, 243.000000, "~g~WinnerTeamPlayer1~w~        10                  5                    2");
	TextDrawBackgroundColor(EnDCwTD[9], 255);
	TextDrawFont(EnDCwTD[9], 1);
	TextDrawLetterSize(EnDCwTD[9], 0.300000, 1.000000);
	TextDrawColor(EnDCwTD[9], -1);
	TextDrawSetOutline(EnDCwTD[9], 1);
	TextDrawSetProportional(EnDCwTD[9], 1);
	TextDrawSetShadow(EnDCwTD[9], 1);

	EnDCwTD[10] = TextDrawCreate(102.000000, 258.000000, "~g~WinnerTeamPlayer1~w~        10                  5                    2");
	TextDrawBackgroundColor(EnDCwTD[10], 255);
	TextDrawFont(EnDCwTD[10], 1);
	TextDrawLetterSize(EnDCwTD[10], 0.300000, 1.000000);
	TextDrawColor(EnDCwTD[10], -1);
	TextDrawSetOutline(EnDCwTD[10], 1);
	TextDrawSetProportional(EnDCwTD[10], 1);
	TextDrawSetShadow(EnDCwTD[10], 1);

	EnDCwTD[11] = TextDrawCreate(102.000000, 273.000000, "~g~WinnerTeamPlayer1~w~        10                  5                    2");
	TextDrawBackgroundColor(EnDCwTD[11], 255);
	TextDrawFont(EnDCwTD[11], 1);
	TextDrawLetterSize(EnDCwTD[11], 0.300000, 1.000000);
	TextDrawColor(EnDCwTD[11], -1);
	TextDrawSetOutline(EnDCwTD[11], 1);
	TextDrawSetProportional(EnDCwTD[11], 1);
	TextDrawSetShadow(EnDCwTD[11], 1);

	EnDCwTD[12] = TextDrawCreate(102.000000, 288.000000, "~g~WinnerTeamPlayer1~w~        10                  5                    2");
	TextDrawBackgroundColor(EnDCwTD[12], 255);
	TextDrawFont(EnDCwTD[12], 1);
	TextDrawLetterSize(EnDCwTD[12], 0.300000, 1.000000);
	TextDrawColor(EnDCwTD[12], -1);
	TextDrawSetOutline(EnDCwTD[12], 1);
	TextDrawSetProportional(EnDCwTD[12], 1);
	TextDrawSetShadow(EnDCwTD[12], 1);

	EnDCwTD[13] = TextDrawCreate(102.000000, 302.000000, "~g~WinnerTeamPlayer1~w~        10                  5                    2");
	TextDrawBackgroundColor(EnDCwTD[13], 255);
	TextDrawFont(EnDCwTD[13], 1);
	TextDrawLetterSize(EnDCwTD[13], 0.300000, 1.000000);
	TextDrawColor(EnDCwTD[13], -1);
	TextDrawSetOutline(EnDCwTD[13], 1);
	TextDrawSetProportional(EnDCwTD[13], 1);
	TextDrawSetShadow(EnDCwTD[13], 1);

	EnDCwTD[14] = TextDrawCreate(144.000000, 108.000000, "Team ~y~blahblah~w~ has won the round");
	TextDrawBackgroundColor(EnDCwTD[14], 255);
	TextDrawFont(EnDCwTD[14], 1);
	TextDrawLetterSize(EnDCwTD[14], 0.500000, 1.000000);
	TextDrawColor(EnDCwTD[14], -1);
	TextDrawSetOutline(EnDCwTD[14], 1);
	TextDrawSetProportional(EnDCwTD[14], 1);

	EnDCwTD[15] = TextDrawCreate(93.000000, 324.000000, "       ~w~The next round starts in ~y~30 ~w~seconds");
	TextDrawBackgroundColor(EnDCwTD[15], 255);
	TextDrawFont(EnDCwTD[15], 1);
	TextDrawLetterSize(EnDCwTD[15], 0.230000, 0.899999);
	TextDrawColor(EnDCwTD[15], -1);
	TextDrawSetOutline(EnDCwTD[15], 1);
	TextDrawSetProportional(EnDCwTD[15], 1);
}
//========================================Medals================================
stock GetPlayerMedalsCount(playerid)
{
	new count =0;
	for(new x=0;x<sizeof(Medals);x++)
	{
	   if(MyMedals[playerid][x] == 1)
	   count++;
	}
	return count;
}
stock GiveMedal(playerid, medalid)
{
  if(!IsPlayerNPC(playerid) && MyMedals[playerid][medalid] == 0)
  {
    MyMedals[playerid][medalid] =1;
    new msg[128];
    new a=GetPlayerMedalsCount(playerid);
	format(msg, sizeof(msg), "» Achievements «{D0E0FF} %s has unlocked the Achievement \"%s\" (%d/%d)", pName[playerid], Medals[medalid][mName], a, sizeof(Medals));
    if(medalid != 1) SendClientMessageToAll(0x8A9571FF, msg);

	if(GetPVarInt(playerid, "LOGGED") != 2)
	{
        new Query[168];
        format(Query, sizeof(Query), "SELECT `Medal1` FROM `medals` WHERE `UserID` = '%d'", PlayerInfo[playerid][UserID]);
        mysql_tquery(GTADM, Query, "Medals_Update", "dd", playerid, medalid+1);
	}
	ScoreTDupdate(playerid, Medals[medalid][Price][1]);
	GivePlayerMoneyEX(playerid, Medals[medalid][Price][0]);
    if(a == (sizeof(Medals)-1)) GiveMedal(playerid, 0), GivePP(playerid, 3);

    if((!GetPVarInt(playerid, "TakingMedal") && (medalid != 1) && (medalid != 70) ))
    {
//==============================================================================

		format(msg, sizeof(msg), "\"%s\"", Medals[medalid][mName]);
		PlayerTextDrawSetString(playerid, pmTD[playerid][1], msg);

		format(msg, sizeof(msg), "%s", Medals[medalid][HowTo]);
		PlayerTextDrawSetString(playerid, pmTD[playerid][0], msg);

		TextDrawShowForPlayer(playerid, mTD[0]);
		TextDrawShowForPlayer(playerid, mTD[1]);
		TextDrawShowForPlayer(playerid, mTD[2]);
		TextDrawShowForPlayer(playerid, mTD[3]);
		PlayerTextDrawShow(playerid, pmTD[playerid][0]);
		PlayerTextDrawShow(playerid, pmTD[playerid][1]);


		SetPVarInt(playerid, "TakingMedal", true);
		SetTimerEx("HideMedalTD", 8000, false, "i", playerid);
	}
  }
  return 1;
}

forward HideMedalTD(playerid);
public HideMedalTD(playerid)
{
	TextDrawHideForPlayer(playerid, mTD[0]);
	TextDrawHideForPlayer(playerid, mTD[1]);
	TextDrawHideForPlayer(playerid, mTD[2]);
	TextDrawHideForPlayer(playerid, mTD[3]);
	PlayerTextDrawHide(playerid, pmTD[playerid][0]);
	PlayerTextDrawHide(playerid, pmTD[playerid][1]);


	DeletePVar(playerid, "TakingMedal");
	return 1;
}
stock ShowMedalsDialog(playerid)
{
	format(STRING, sizeof(STRING), "");
	for(new x=0;x<sizeof(Medals);x++)
	{
/*	   new medaltype[10];
	   if(Medals[x][mType] == 1) medaltype = "Bronze";
	   else if(Medals[x][mType] == 2)  medaltype = "Silver";
	   else if(Medals[x][mType] == 3)  medaltype = "Gold";
	   else if(Medals[x][mType] == 4)  medaltype = "Platinum";
	   if(MyMedals[playerid][x] == 1) format(STRING, sizeof(STRING), "%s[%s%d] %s (%s) ["GREEN_"Acheived"WHITE_"]\n", STRING, (x < 9) ? ("0") : (""), x+1, Medals[x][mName], medaltype);
	   else format(STRING, sizeof(STRING), "%s[%s%d] %s (%s) [-]\n", STRING, (x < 9) ? ("0") : (""), x+1, Medals[x][mName], medaltype);
*/
	   if(MyMedals[playerid][x] == 1) format(STRING, sizeof(STRING), "%s[%s%d] %s ["GREEN_"Achieved"WHITE_"]\n", STRING, (x < 9) ? ("0") : (""), x+1, Medals[x][mName]);
	   else format(STRING, sizeof(STRING), "%s[%s%d] %s [-]\n", STRING, (x < 9) ? ("0") : (""), x+1, Medals[x][mName]);
    }
//    printf("%s", STRING);
    new str2[128];
    format(str2, sizeof(str2), "GTADM: "LIGHTYELLOW_"Medals(%d/%d)", GetPlayerMedalsCount(playerid), sizeof(Medals));
    ShowPlayerDialog(playerid, 2012, DIALOG_STYLE_LIST, str2, STRING, "Choose", "Close");

}
//=========================Weapons==============================================
stock GetWeaponModel(weaponid)
{
	switch(weaponid)
	{
	    case 1:return 331;
		case 2..8:return weaponid+331;
        case 9:return 341;
		case 10..15:return weaponid+311;
		case 16..18:return weaponid+326;
		case 22..29:return weaponid+324;
		case 30, 31:return weaponid+325;
		case 32:return 372;
		case 33..45: return weaponid+324;
		case 46: return 371;
		case 555:return 370;
		case 666:return 1240;
		case 777:return 1242;
	}
	return 0;
}

//==============================Gates===========================================
stock GetAttachedObjectPos(objectid, Float:offset_x, Float:offset_y, Float:offset_z, &Float:x, &Float:y, &Float:z)
{
    new Float:object_px,
        Float:object_py,
        Float:object_pz,
        Float:object_rx,
        Float:object_ry,
        Float:object_rz;
    GetObjectPos(objectid, object_px, object_py, object_pz);
    GetObjectRot(objectid, object_rx, object_ry, object_rz);
    new Float:cos_x = floatcos(object_rx, degrees),
        Float:cos_y = floatcos(object_ry, degrees),
        Float:cos_z = floatcos(object_rz, degrees),
        Float:sin_x = floatsin(object_rx, degrees),
        Float:sin_y = floatsin(object_ry, degrees),
        Float:sin_z = floatsin(object_rz, degrees);
    x = object_px + offset_x * cos_y * cos_z - offset_x * sin_x * sin_y * sin_z - offset_y * cos_x * sin_z + offset_z * sin_y * cos_z + offset_z * sin_x * cos_y * sin_z;
    y = object_py + offset_x * cos_y * sin_z + offset_x * sin_x * sin_y * cos_z + offset_y * cos_x * cos_z + offset_z * sin_y * sin_z - offset_z * sin_x * cos_y * cos_z;
    z = object_pz - offset_x * cos_x * sin_y + offset_y * sin_x + offset_z * cos_x * cos_y;
}
stock SaveGate(playerid)
{

	new iD=GetPVarInt(playerid, "gateid"),
	Model=GetPVarInt(playerid, "model"),
	Type=GetPVarInt(playerid, "type"),
	Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz,
	Float:ox, Float:oy, Float:oz, Float:orx, Float:ory, Float:orz,
	Float:kx, Float:ky, Float:kz, Float:krx, Float:kry, Float:krz,
	Float:k2x, Float:k2y, Float:k2z, Float:k2rx, Float:k2ry, Float:k2rz,
	Float:k3x, Float:k3y, Float:k3z, Float:k3rx, Float:k3ry, Float:k3rz;
	GetDynamicObjectPos(GetPVarInt(playerid, "Gate_ObjectID"), ox, oy, oz);
	GetDynamicObjectRot(GetPVarInt(playerid, "Gate_ObjectID"), orx, ory, orz);
	GetDynamicObjectPos(GetPVarInt(playerid, "Keypad1_ObjectID"), kx, ky, kz);
	GetDynamicObjectRot(GetPVarInt(playerid, "Keypad1_ObjectID"), krx, kry, krz);
	GetDynamicObjectPos(GetPVarInt(playerid, "Keypad2_ObjectID"), k2x, k2y, k2z);
	GetDynamicObjectRot(GetPVarInt(playerid, "Keypad2_ObjectID"), k2rx, k2ry, k2rz);
	if(Model == 5837 || Model == 18755)
	{
		GetDynamicObjectPos(GetPVarInt(playerid, "Keypad3_ObjectID"), k3x, k3y, k3z);
		GetDynamicObjectRot(GetPVarInt(playerid, "Keypad3_ObjectID"), k3rx, k3ry, k3rz);

        GateInfo[iD][k3][0]=GetPVarFloat(playerid, "oKeyX");
        GateInfo[iD][k3][1]=GetPVarFloat(playerid, "oKeyY");
        GateInfo[iD][k3][2]=GetPVarFloat(playerid, "oKeyZ");
        GateInfo[iD][k3][3]=GetPVarFloat(playerid, "oKeyRX");
        GateInfo[iD][k3][4]=GetPVarFloat(playerid, "oKeyRY");
        GateInfo[iD][k3][5]=GetPVarFloat(playerid, "oKeyRZ");

        GateInfo[iD][ok3][0]=k3x;
        GateInfo[iD][ok3][1]=k3y;
        GateInfo[iD][ok3][2]=k3z;
        GateInfo[iD][ok3][3]=k3rx;
        GateInfo[iD][ok3][4]=k3ry;
        GateInfo[iD][ok3][5]=k3rz;

		ox=GetPVarFloat(playerid, "oGateX");
		oy=GetPVarFloat(playerid, "oGateY");
		oz=GetPVarFloat(playerid, "oGateZ");
		orx=GetPVarFloat(playerid, "oGateRX");
		ory=GetPVarFloat(playerid, "oGateRY");
		orz=GetPVarFloat(playerid, "oGateRZ");
        GateInfo[iD][HideObj]=1;

	}
    else GateInfo[iD][HideObj]=0;
	x=GetPVarFloat(playerid, "GateX");
	y=GetPVarFloat(playerid, "GateY");
	z=GetPVarFloat(playerid, "GateZ");
	rx=GetPVarFloat(playerid, "GateRX");
	ry=GetPVarFloat(playerid, "GateRY");
	rz=GetPVarFloat(playerid, "GateRZ");

    GateInfo[iD][gPos][0]=x;
    GateInfo[iD][gPos][1]=y;
    GateInfo[iD][gPos][2]=z;
    GateInfo[iD][gPos][3]=rx;
    GateInfo[iD][gPos][4]=ry;
    GateInfo[iD][gPos][5]=rz;

    GateInfo[iD][gmovedPos][0]=ox;
    GateInfo[iD][gmovedPos][1]=oy;
    GateInfo[iD][gmovedPos][2]=oz;
    GateInfo[iD][gmovedPos][3]=orx;
    GateInfo[iD][gmovedPos][4]=ory;
    GateInfo[iD][gmovedPos][5]=orz;

    GateInfo[iD][k1][0]=kx;
    GateInfo[iD][k1][1]=ky;
    GateInfo[iD][k1][2]=kz;
    GateInfo[iD][k1][3]=krz;

    GateInfo[iD][k2][0]=k2x;
    GateInfo[iD][k2][1]=k2y;
    GateInfo[iD][k2][2]=k2z;
    GateInfo[iD][k2][3]=k2rz;

    GateInfo[iD][gSpeed]=2.0;
    GateInfo[iD][g_type]=Type;
    if(Type == 1) GateInfo[iD][g_range] = CreateDynamicSphere(x, y, z, 5.00, 0);
    GateInfo[iD][IsOpened]=0;
	GateInfo[iD][gModel]=Model;
	GateInfo[iD][ObjectID] = CreateDynamicObject(Model, x, y, z, rx, ry, rz, 0);
	GateInfo[iD][gKeypad1] = CreateDynamicObject(19273, kx, ky, kz, 0, 0, krz, 0);
	GateInfo[iD][gKeypad2] = CreateDynamicObject(19273, k2x, k2y, k2z, 0, 0, k2rz, 0);
	GateInfo[iD][gKeypad3] = CreateDynamicObject(19273, GateInfo[iD][ok3][0], GateInfo[iD][ok3][1], GateInfo[iD][ok3][2], GateInfo[iD][ok3][3], GateInfo[iD][ok3][4], GateInfo[iD][ok3][5], 0);

	new INI:File2 = INI_Open(GatePath(iD));
	INI_SetTag(File2, "gatedata");
	INI_WriteInt(File2, "ModelID", Model);
	INI_WriteFloat(File2, "gPos1", GateInfo[iD][gPos][0]);
	INI_WriteFloat(File2, "gPos2", GateInfo[iD][gPos][1]);
	INI_WriteFloat(File2, "gPos3", GateInfo[iD][gPos][2]);
	INI_WriteFloat(File2, "gPos4", GateInfo[iD][gPos][3]);
	INI_WriteFloat(File2, "gPos5", GateInfo[iD][gPos][4]);
	INI_WriteFloat(File2, "gPos6", GateInfo[iD][gPos][5]);

	INI_WriteFloat(File2, "gOpenPos1", GateInfo[iD][gmovedPos][0]);
	INI_WriteFloat(File2, "gOpenPos2", GateInfo[iD][gmovedPos][1]);
	INI_WriteFloat(File2, "gOpenPos3", GateInfo[iD][gmovedPos][2]);
	INI_WriteFloat(File2, "gOpenPos4", GateInfo[iD][gmovedPos][3]);
	INI_WriteFloat(File2, "gOpenPos5", GateInfo[iD][gmovedPos][4]);
	INI_WriteFloat(File2, "gOpenPos6", GateInfo[iD][gmovedPos][5]);

	INI_WriteFloat(File2, "X_Keypad1", kx);
	INI_WriteFloat(File2, "Y_Keypad1", ky);
	INI_WriteFloat(File2, "Z_Keypad1", kz);
	INI_WriteFloat(File2, "R_Keypad1", krz);

	INI_WriteFloat(File2, "X_Keypad2", k2x);
	INI_WriteFloat(File2, "Y_Keypad2", k2y);
	INI_WriteFloat(File2, "Z_Keypad2", k2z);
	INI_WriteFloat(File2, "R_Keypad2", k2rz);

	if(Model == 5837 || Model == 18755)
	{
		INI_WriteFloat(File2, "X_Keypad3", GateInfo[iD][k3][0]);
		INI_WriteFloat(File2, "Y_Keypad3", GateInfo[iD][k3][1]);
		INI_WriteFloat(File2, "Z_Keypad3", GateInfo[iD][k3][2]);
		INI_WriteFloat(File2, "RX_Keypad3", GateInfo[iD][k3][3]);
		INI_WriteFloat(File2, "RY_Keypad3", GateInfo[iD][k3][4]);
		INI_WriteFloat(File2, "RZ_Keypad3", GateInfo[iD][k3][5]);

		INI_WriteFloat(File2, "OX_Keypad3",  GateInfo[iD][ok3][0]);
		INI_WriteFloat(File2, "OY_Keypad3",  GateInfo[iD][ok3][1]);
		INI_WriteFloat(File2, "OZ_Keypad3",  GateInfo[iD][ok3][2]);
		INI_WriteFloat(File2, "ORX_Keypad3",  GateInfo[iD][ok3][3]);
		INI_WriteFloat(File2, "ORY_Keypad3",  GateInfo[iD][ok3][4]);
		INI_WriteFloat(File2, "ORZ_Keypad3",  GateInfo[iD][ok3][5]);
	}
	INI_WriteFloat(File2, "Speed", GateInfo[iD][gSpeed]);

	INI_WriteInt(File2, "Type", GateInfo[iD][g_type]);
    INI_WriteInt(File2, "HideObj", GateInfo[iD][HideObj]);
	INI_Close(File2);
	new str[128];
    format(str, sizeof(str), "Gate ID "GREEN_"%d "WHITE_"has been "GREEN_"Created", iD);
    SendClientMessage(playerid, WHITE, str);

	if(GetPVarInt(playerid, "Gate_ObjectID") && IsValidDynamicObject(GetPVarInt(playerid, "Gate_ObjectID"))) DestroyDynamicObject(GetPVarInt(playerid, "Gate_ObjectID"));
	if(GetPVarInt(playerid, "Keypad1_ObjectID") && IsValidDynamicObject(GetPVarInt(playerid, "Keypad1_ObjectID"))) DestroyDynamicObject(GetPVarInt(playerid, "Keypad1_ObjectID"));
	if(GetPVarInt(playerid, "Keypad2_ObjectID") && IsValidDynamicObject(GetPVarInt(playerid, "Keypad2_ObjectID"))) DestroyDynamicObject(GetPVarInt(playerid, "Keypad2_ObjectID"));
	if(GetPVarInt(playerid, "Keypad3_ObjectID") && IsValidDynamicObject(GetPVarInt(playerid, "Keypad3_ObjectID"))) DestroyDynamicObject(GetPVarInt(playerid, "Keypad3_ObjectID"));

	DeletePVar(playerid, "Gate_ObjectID");
	DeletePVar(playerid, "Keypad1_ObjectID");
	DeletePVar(playerid, "Keypad2_ObjectID");
	DeletePVar(playerid, "Keypad3_ObjectID");
	DeletePVar(playerid, "model");
	DeletePVar(playerid, "gateid");
	DeletePVar(playerid, "type");
	DeletePVar(playerid, "GateX");
	DeletePVar(playerid, "GateY");
	DeletePVar(playerid, "GateZ");
	DeletePVar(playerid, "GateRX");
	DeletePVar(playerid, "GateRY");
	DeletePVar(playerid, "GateRZ");

	DeletePVar(playerid, "oGateX");
	DeletePVar(playerid, "oGateY");
	DeletePVar(playerid, "oGateZ");
	DeletePVar(playerid, "oGateRX");
	DeletePVar(playerid, "oGateRY");
	DeletePVar(playerid, "oGateRZ");
	DeletePVar(playerid, "GateEditing");
    Streamer_Update(playerid);
}

stock Gate_Lift(playerid)
{
    new h = PlayerInfo[playerid][pHouse];
	new Float:pos[3], Float:pos2[3];
	new Float:pos3[3];
	new c=0, s=0;
    for(new g=0; g<MAX_GATES; g++)
    {
	  if(GateInfo[g][ObjectID] > 0)
	  {
	     GetDynamicObjectPos(GateInfo[g][gKeypad1], pos[0], pos[1], pos[2]);
	     GetDynamicObjectPos(GateInfo[g][gKeypad2], pos2[0], pos2[1], pos2[2]);
	     GetDynamicObjectPos(GateInfo[g][gKeypad3], pos3[0], pos3[1], pos3[2]);
//	     if(GateInfo[g][gModel] == 5837) GetAttachedObjectPos(GateInfo[g][ObjectID], 0.109863, 1.341552, -0.530003, pos3[0], pos3[1], pos3[2]);
//		 else if(GateInfo[g][gModel] == 18755)  GetAttachedObjectPos(GateInfo[g][ObjectID], -0.873535, 2.221618, -0.530003, pos3[0], pos3[1], pos3[2]);

         if(IsPlayerInRangeOfPoint(playerid, 1.00, pos[0], pos[1], pos[2])
    	 ||(IsPlayerInRangeOfPoint(playerid, 1.00, pos2[0], pos2[1], pos2[2]))
	     ||(IsPlayerInRangeOfPoint(playerid, 1.00, pos3[0], pos3[1], pos3[2]) && IsValidDynamicObject(GateInfo[g][gKeypad3])))
         {
		    s++;
		    ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 1.0, 0, 1, 1, 0, 0);
		    if((IsGateOwner(h, g) && GateInfo[g][g_type] ==0) || (IsAdmin(playerid, 1)) || (GateInfo[g][g_type] == 2 && IsAdmin(playerid, 1)) || (GateInfo[g][g_type] == 3 && PlayerInfo[playerid][IsVIP] > 0) || (GateInfo[g][g_type] == 4 && IsDoDMember(playerid)))
		    {
  		       c++;
               PlayerPlaySound(playerid, 6400, 0.0, 0.0, 0.0);
		       if(GateInfo[g][IsOpened] == 1)
		       {
		          GateInfo[g][IsOpened] = 0;
		          MoveDynamicObject(GateInfo[g][ObjectID], GateInfo[g][gPos][0], GateInfo[g][gPos][1], GateInfo[g][gPos][2], GateInfo[g][gSpeed], GateInfo[g][gPos][3], GateInfo[g][gPos][4], GateInfo[g][gPos][5]);
				  if(IsValidDynamicObject(GateInfo[g][gKeypad3]))
				  {
    				  if(GateInfo[g][HideObj] == 1) SetDynamicObjectPos(GateInfo[g][gKeypad3], -100.0, -100.0, -100.0);
			          else MoveDynamicObject(GateInfo[g][gKeypad3], GateInfo[g][ok3][0], GateInfo[g][ok3][1], GateInfo[g][ok3][2], GateInfo[g][gSpeed], GateInfo[g][ok3][3], GateInfo[g][ok3][4], GateInfo[g][ok3][5]);
                      Streamer_Update(playerid);
				  }
		       }
		       else
		       {
		          GateInfo[g][IsOpened] = 1;
		          MoveDynamicObject(GateInfo[g][ObjectID], GateInfo[g][gmovedPos][0], GateInfo[g][gmovedPos][1], GateInfo[g][gmovedPos][2], GateInfo[g][gSpeed], GateInfo[g][gmovedPos][3], GateInfo[g][gmovedPos][4], GateInfo[g][gmovedPos][5]);
				  if(IsValidDynamicObject(GateInfo[g][gKeypad3]))
				  {
				      if(GateInfo[g][HideObj] == 1) SetDynamicObjectPos(GateInfo[g][gKeypad3], -100.0, -100.0, -100.0);
			          else MoveDynamicObject(GateInfo[g][gKeypad3], GateInfo[g][k3][0], GateInfo[g][k3][1], GateInfo[g][k3][2], GateInfo[g][gSpeed], GateInfo[g][k3][3], GateInfo[g][k3][4], GateInfo[g][k3][5]);
                      Streamer_Update(playerid);
				  }
		       }
		    }
         }
	  }
    }
    if(c==0 && s>0)
    {
       PlayerPlaySound(playerid, 4202, 0.0, 0.0, 0.0);
	   SendInfoText(playerid, 3000, "~r~Access Denied");
    }
}
stock IsGateOwner(houseid, gate)
{
   new a = 0;
   for(new x=0;x<10;x++)
   {
		if(houseid == GateInfo[gate][Houses][x])
		a++;
   }
   if(a > 0) return 1;
   return a;
}

stock LoadGates()
{
  for(new iD=0;iD<MAX_GATES;iD++)
  {
    if(fexist(GatePath(iD)))
    {
		INI_ParseFile(GatePath(iD), "LoadGate_gatedata", .bExtra = true, .extra = iD);
		GateInfo[iD][ObjectID] = CreateDynamicObject(GateInfo[iD][gModel], GateInfo[iD][gPos][0], GateInfo[iD][gPos][1], GateInfo[iD][gPos][2], GateInfo[iD][gPos][3], GateInfo[iD][gPos][4], GateInfo[iD][gPos][5]);
		GateInfo[iD][gKeypad1] = CreateDynamicObject(19273, GateInfo[iD][k1][0], GateInfo[iD][k1][1], GateInfo[iD][k1][2], 0, 0, GateInfo[iD][k1][3]);
		GateInfo[iD][gKeypad2] = CreateDynamicObject(19273, GateInfo[iD][k2][0], GateInfo[iD][k2][1], GateInfo[iD][k2][2], 0, 0, GateInfo[iD][k2][3]);

		GateInfo[iD][IsOpened]=0;
		if(GateInfo[iD][g_type] == 1) GateInfo[iD][g_range] = CreateDynamicSphere(GateInfo[iD][gPos][0], GateInfo[iD][gPos][1], GateInfo[iD][gPos][2], 5.00, 0);

		if(GateInfo[iD][gModel] == 5837 || GateInfo[iD][gModel] == 18755)
		{
			GateInfo[iD][gKeypad3] = CreateDynamicObject(19273, GateInfo[iD][ok3][0], GateInfo[iD][ok3][1], GateInfo[iD][ok3][2], GateInfo[iD][ok3][3], GateInfo[iD][ok3][4], GateInfo[iD][ok3][5]);

		}
    }
    else
	{
          GateInfo[iD][ObjectID]=INVALID_OBJECT_ID;
          GateInfo[iD][gKeypad1]=INVALID_OBJECT_ID;
          GateInfo[iD][gKeypad2]=INVALID_OBJECT_ID;
          GateInfo[iD][gKeypad3]=INVALID_OBJECT_ID;
	}
  }
}


stock LoadCreatedRaces()
{
  for(new r=0;r<MAX_RACES;r++)
  {
    if(fexist(RacePath(r)))
    {
      INI_ParseFile(RacePath(r), "LoadRace_%s", .bExtra = true, .extra = r);
	}
  }
}
stock LoadCreatedParkours()
{
  for(new r=0;r<MAX_POURS;r++)
  {
    if(fexist(PourPath(r)))
    {
      INI_ParseFile(PourPath(r), "LoadPOur_%s", .bExtra = true, .extra = r);
	}
  }
}


forward LoadPOur_POUR(r, name[], value[]);
public LoadPOur_POUR(r, name[], value[])
{
      INI_String("Name", ParkOurInfo[r][PourName], 50);
      INI_Int("CPcount", ParkOurInfo[r][CPcount]);
      for(new x=0; x<12; x++)
      {
		  new str[50];
		  format(str, sizeof(str), "SP%dX", x);
	  	  INI_Float(str, ParkOurInfo[r][SpawnsX][x]);
		  format(str, sizeof(str), "SP%dY", x);
	  	  INI_Float(str, ParkOurInfo[r][SpawnsY][x]);
		  format(str, sizeof(str), "SP%dZ", x);
	  	  INI_Float(str, ParkOurInfo[r][SpawnsZ][x]);
		  format(str, sizeof(str), "SP%dA", x);
	  	  INI_Float(str, ParkOurInfo[r][SpawnsA][x]);
      }
      for(new x=0; x<50; x++)
      {
		  new str[50];
		  format(str, sizeof(str), "CP%dX", x);
	  	  INI_Float(str, ParkOurCPS[r][x][CPposX]);
		  format(str, sizeof(str), "CP%dY", x);
	  	  INI_Float(str, ParkOurCPS[r][x][CPposY]);
		  format(str, sizeof(str), "CP%dZ", x);
	  	  INI_Float(str, ParkOurCPS[r][x][CPposZ]);
		  format(str, sizeof(str), "CP%dCar", x);
	  	  INI_Int(str, ParkOurCPS[r][x][CPCar]);
      }
      return 0;
}


forward LoadRace_RaceInfo(r, name[], value[]);
public LoadRace_RaceInfo(r, name[], value[])
{
      INI_Float("StartX", RaceInfo[r][StartCP][0]);
	  INI_Float("StartY", RaceInfo[r][StartCP][1]);
	  INI_Float("StartZ", RaceInfo[r][StartCP][2]);
      INI_Float("SpawnpX", RaceInfo[r][Spawnp][0]);
	  INI_Float("SpawnpY", RaceInfo[r][Spawnp][1]);
	  INI_Float("SpawnpZ", RaceInfo[r][Spawnp][2]);
	  INI_Float("SpawnpA", RaceInfo[r][Spawnp][3]);
	  INI_Int("CPCount", RaceInfo[r][RaceCpCount]);
      INI_String("Creator", RaceInfo[r][Creator], 30);

	  new strvar[24];
	  for(new x=0; x<50; x++)
	  {
            format(strvar, sizeof(strvar), "X_CheckPoint%d", x);
      	    INI_Float(strvar, RaceCPs[r][x][0]);
            format(strvar, sizeof(strvar), "Y_CheckPoint%d", x);
      	    INI_Float(strvar, RaceCPs[r][x][1]);
            format(strvar, sizeof(strvar), "Z_CheckPoint%d", x);
      	    INI_Float(strvar, RaceCPs[r][x][2]);
	  }
      return 0;
}
stock GetFreeRaceID()
{
	 new Q;
	 for(new x=0; x<MAX_RACES; x++)
	 {
		  if(RaceInfo[x][RaceCpCount] == 0)
		  {
				Q=x;
				break;
		  }
	 }
	 return Q;
}
stock RacePath(raceid)
{
       new pathh[128];
       format(pathh, sizeof(pathh), "/CreatedRaces/%d.ini", raceid);
       return pathh;
}

stock LoadPickups()
{
  for(new g=0;g<MAX_C_PICKUPS;g++)
  {
    if(fexist(PickupPath(g)))
    {
      INI_ParseFile(PickupPath(g), "LoadPickup_lol", .bExtra = true, .extra = g);
	  if(wPickup[g][Model_] == 1239 || wPickup[g][Model_] == 1242 || wPickup[g][Model_] == 1240)
	  {
	     wWPickup[g]=CreateDynamicPickup(wPickup[g][Model_], wPickup[g][Spawn], wPickup[g][WPos][0], wPickup[g][WPos][1], wPickup[g][WPos][2], wPickup[g][Wworld]);
	  }
	  if(wPickup[g][Model_] >= 0 && wPickup[g][Model_] <= 50)
	  {
       	  wWPickup[g]=CreateDynamicPickup(GetWeaponModel(wPickup[g][Model_]), 2, wPickup[g][WPos][0], wPickup[g][WPos][1], wPickup[g][WPos][2], wPickup[g][Wworld]);
	  }
	}
  }
}

forward LoadPickup_lol(g, name[], value[]);
public LoadPickup_lol(g, name[], value[])
{
    INI_Float("WPos1", wPickup[g][WPos][0]);
    INI_Float("WPos2", wPickup[g][WPos][1]);
    INI_Float("WPos3", wPickup[g][WPos][2]);
    INI_Int("world", wPickup[g][Wworld]);
    INI_Int("Model", wPickup[g][Model_]);
    INI_Int("Spawn", wPickup[g][Spawn]);
	return 0;
}
stock GetFreePickupID()
{
	new ai=-1;
	for(new k=0; k<MAX_C_PICKUPS; k++)
	{
	   if(wPickup[k][Model_] == 0)
	   {
			ai=k;
			break;
	   }
	}
	return ai;
}
stock PickupPath(gateid)
{
  new gatefile[64];
  format(gatefile, sizeof(gatefile), "Pickups/PickupID%d.ini", gateid);
  return gatefile;

}
forward LoadGate_gatedata(iD, name[], value[]);
public LoadGate_gatedata(iD, name[], value[])
{
	INI_Int("ModelID",  GateInfo[iD][gModel]);
	INI_Float("gPos1",  GateInfo[iD][gPos][0]);
	INI_Float("gPos2",  GateInfo[iD][gPos][1]);
	INI_Float("gPos3",  GateInfo[iD][gPos][2]);
	INI_Float("gPos4",  GateInfo[iD][gPos][3]);
	INI_Float("gPos5",  GateInfo[iD][gPos][4]);
	INI_Float("gPos6",  GateInfo[iD][gPos][5]);

	INI_Float("gOpenPos1",  GateInfo[iD][gmovedPos][0]);
	INI_Float("gOpenPos2",  GateInfo[iD][gmovedPos][1]);
	INI_Float("gOpenPos3",  GateInfo[iD][gmovedPos][2]);
	INI_Float("gOpenPos4",  GateInfo[iD][gmovedPos][3]);
	INI_Float("gOpenPos5",  GateInfo[iD][gmovedPos][4]);
	INI_Float("gOpenPos6",  GateInfo[iD][gmovedPos][5]);

	INI_Float("X_Keypad1",  GateInfo[iD][k1][0]);
	INI_Float("Y_Keypad1",  GateInfo[iD][k1][1]);
	INI_Float("Z_Keypad1",  GateInfo[iD][k1][2]);
	INI_Float("R_Keypad1",  GateInfo[iD][k1][3]);

	INI_Float("X_Keypad2",  GateInfo[iD][k2][0]);
	INI_Float("Y_Keypad2",  GateInfo[iD][k2][1]);
	INI_Float("Z_Keypad2",  GateInfo[iD][k2][2]);
	INI_Float("R_Keypad2",  GateInfo[iD][k2][3]);

	INI_Float("X_Keypad3",  GateInfo[iD][k3][0]);
	INI_Float("Y_Keypad3",  GateInfo[iD][k3][1]);
	INI_Float("Z_Keypad3",  GateInfo[iD][k3][2]);
	INI_Float("RX_Keypad3",  GateInfo[iD][k3][3]);
	INI_Float("RY_Keypad3",  GateInfo[iD][k3][4]);
	INI_Float("RZ_Keypad3",  GateInfo[iD][k3][5]);

	INI_Float("OX_Keypad3",  GateInfo[iD][ok3][0]);
	INI_Float("OY_Keypad3",  GateInfo[iD][ok3][1]);
	INI_Float("OZ_Keypad3",  GateInfo[iD][ok3][2]);
	INI_Float("ORX_Keypad3",  GateInfo[iD][ok3][3]);
	INI_Float("ORY_Keypad3",  GateInfo[iD][ok3][4]);
	INI_Float("ORZ_Keypad3",  GateInfo[iD][ok3][5]);

	INI_Float("Speed", GateInfo[iD][gSpeed]);
	INI_Int("Type", GateInfo[iD][g_type]);
    INI_Int("HideObj", GateInfo[iD][HideObj]);

	for(new x=1;x<11;x++)
    {
		  new str[10];
		  format(str, sizeof(str), "House%d", x);
       	  INI_Int(str, GateInfo[iD][Houses][x-1]);
	}
	return 0;
}
CMD:exitge(playerid) return cmd_stopgateeditor(playerid);
CMD:stopgateeditor(playerid)
{
   if(!IsAdmin(playerid, 5)) return SendMsg(playerid, 5);
   if(!GetPVarInt(playerid, "GateEditing")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You are not creating any gate!");
   stopgateeditor(playerid);
   return 1;
}
stock stopgateeditor(playerid)
{
	if(GetPVarInt(playerid, "Gate_ObjectID") && IsValidDynamicObject(GetPVarInt(playerid, "Gate_ObjectID"))) DestroyDynamicObject(GetPVarInt(playerid, "Gate_ObjectID"));
	if(GetPVarInt(playerid, "Keypad1_ObjectID") && IsValidDynamicObject(GetPVarInt(playerid, "Keypad1_ObjectID"))) DestroyDynamicObject(GetPVarInt(playerid, "Keypad1_ObjectID"));
	if(GetPVarInt(playerid, "Keypad2_ObjectID") && IsValidDynamicObject(GetPVarInt(playerid, "Keypad2_ObjectID"))) DestroyDynamicObject(GetPVarInt(playerid, "Keypad2_ObjectID"));
	if(GetPVarInt(playerid, "Keypad3_ObjectID") && IsValidDynamicObject(GetPVarInt(playerid, "Keypad3_ObjectID"))) DestroyDynamicObject(GetPVarInt(playerid, "Keypad3_ObjectID"));
	DeletePVar(playerid, "Gate_ObjectID");
	DeletePVar(playerid, "Keypad1_ObjectID");
	DeletePVar(playerid, "Keypad2_ObjectID");
	DeletePVar(playerid, "Keypad3_ObjectID");
	DeletePVar(playerid, "model");
	DeletePVar(playerid, "gateid");
	DeletePVar(playerid, "type");
	DeletePVar(playerid, "GateX");
	DeletePVar(playerid, "GateY");
	DeletePVar(playerid, "GateZ");
	DeletePVar(playerid, "GateRX");
	DeletePVar(playerid, "GateRY");
	DeletePVar(playerid, "GateRZ");
	DeletePVar(playerid, "oGateX");
	DeletePVar(playerid, "oGateY");
	DeletePVar(playerid, "oGateZ");
	DeletePVar(playerid, "oGateRX");
	DeletePVar(playerid, "oGateRY");
	DeletePVar(playerid, "oGateRZ");
	DeletePVar(playerid, "GateEditing");


	CancelEdit(playerid);
}
CMD:creategate(playerid, params[])
{
   if(!IsAdmin(playerid, 5)) return SendMsg(playerid, 5);
   new type, model, gateid;
   if(sscanf(params, "ddd", gateid, model, type)) return SendClientMessage(playerid, RED, ""RED2_"Usage :"RED_" /CreateGate <GateID> <ObjectModelID> <Gate Type (1/2/3/4)>"), SendClientMessage(playerid, GRAY, "Gate Types: 1 House gate || 2 Automatic gate || 3 Admins gate  || 4 Vip gates || 5 nXs members gate"), SendClientMessage(playerid, GRAY, "-Default Models- Gate = 980 || Lift = 5837 || Elevator = 18755 || Elevator door = 18756 or 18757");
   if(gateid < 0 || gateid >= MAX_GATES) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Invalid GateID entered");
   if(fexist(GatePath(gateid)))  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This Gate ID Already Exists");
   SetPVarInt(playerid, "gateid", gateid);
   SetPVarInt(playerid, "model", model);
   SetPVarInt(playerid, "type", type-1);
   ShowPlayerDialog(playerid, 2025, DIALOG_STYLE_LIST, "Gate Editor", "Gate\nLift\nElevator", "Select", "Exit");
   return 1;
}
CMD:movegate(playerid, params[])
{
   new cmd[10], Float:amount;
   if(!IsAdmin(playerid, 5)) return SendMsg(playerid, 5);
   if(!GetPVarInt(playerid, "GateEditing")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You are not creating any gate!");
   if(sscanf(params, "s[10]F(1.0)", cmd, amount))  return SendWarning(playerid, ""GRAY_"/movegate <Up/Down/+X/-X/+Y/-Y/+Rx/-Rx/+Rx/-Ry/+Ry/-Rz/+Rz>");
   new Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz;
   switch(GetPVarInt(playerid, "GateEditing"))
   {
	 case 1, 4:
	 {
       GetDynamicObjectPos(GetPVarInt(playerid, "Gate_ObjectID"), x, y, z);
       GetDynamicObjectRot(GetPVarInt(playerid, "Gate_ObjectID"), rx, ry, rz);
	   if(!strcmp(cmd, "up", true)) SetDynamicObjectPos(GetPVarInt(playerid, "Gate_ObjectID"), x, y, z+amount);
	   else if(!strcmp(cmd, "down", true)) SetDynamicObjectPos(GetPVarInt(playerid, "Gate_ObjectID"), x, y, z-amount);
	   else if(!strcmp(cmd, "+x", true)) SetDynamicObjectPos(GetPVarInt(playerid, "Gate_ObjectID"), x+amount, y, z);
	   else if(!strcmp(cmd, "-x", true)) SetDynamicObjectPos(GetPVarInt(playerid, "Gate_ObjectID"), x-amount, y, z);
	   else if(!strcmp(cmd, "-y", true)) SetDynamicObjectPos(GetPVarInt(playerid, "Gate_ObjectID"), x, y-amount, z);
	   else if(!strcmp(cmd, "+y", true)) SetDynamicObjectPos(GetPVarInt(playerid, "Gate_ObjectID"), x, y+amount, z);
	   else if(!strcmp(cmd, "+rx", true)) SetDynamicObjectRot(GetPVarInt(playerid, "Gate_ObjectID"), rx+amount, ry, rz);
	   else if(!strcmp(cmd, "-rx", true)) SetDynamicObjectRot(GetPVarInt(playerid, "Gate_ObjectID"), rx-amount, ry, rz);
	   else if(!strcmp(cmd, "+ry", true)) SetDynamicObjectRot(GetPVarInt(playerid, "Gate_ObjectID"), rx, ry+amount, rz);
	   else if(!strcmp(cmd, "-ry", true)) SetDynamicObjectRot(GetPVarInt(playerid, "Gate_ObjectID"), rx, ry-amount, rz);
	   else if(!strcmp(cmd, "+rz", true)) SetDynamicObjectRot(GetPVarInt(playerid, "Gate_ObjectID"), rx, ry, rz+amount);
	   else if(!strcmp(cmd, "-rz", true)) SetDynamicObjectRot(GetPVarInt(playerid, "Gate_ObjectID"), rx, ry, rz-amount);
	   else SendWarning(playerid, ""GRAY_"/movegate <Up/Down/+X/-X/+Y/-Y/+Rx/-Rx/+Rx/-Ry/+Ry/-Rz/+Rz>");
	 }
	 case 2:
	 {
       GetDynamicObjectPos(GetPVarInt(playerid, "Keypad1_ObjectID"), x, y, z);
       GetDynamicObjectRot(GetPVarInt(playerid, "Keypad1_ObjectID"), rx, ry, rz);
	   if(!strcmp(cmd, "up", true)) SetDynamicObjectPos(GetPVarInt(playerid, "Keypad1_ObjectID"), x, y, z+amount);
	   else if(!strcmp(cmd, "down", true)) SetDynamicObjectPos(GetPVarInt(playerid, "Keypad1_ObjectID"), x, y, z-amount);
	   else if(!strcmp(cmd, "+x", true)) SetDynamicObjectPos(GetPVarInt(playerid, "Keypad1_ObjectID"), x+amount, y, z);
	   else if(!strcmp(cmd, "-x", true)) SetDynamicObjectPos(GetPVarInt(playerid, "Keypad1_ObjectID"), x-amount, y, z);
	   else if(!strcmp(cmd, "-y", true)) SetDynamicObjectPos(GetPVarInt(playerid, "Keypad1_ObjectID"), x, y-amount, z);
	   else if(!strcmp(cmd, "+y", true)) SetDynamicObjectPos(GetPVarInt(playerid, "Keypad1_ObjectID"), x, y+amount, z);
	   else if(!strcmp(cmd, "+rx", true)) SetDynamicObjectRot(GetPVarInt(playerid, "Keypad1_ObjectID"), rx+amount, ry, rz);
	   else if(!strcmp(cmd, "-rx", true)) SetDynamicObjectRot(GetPVarInt(playerid, "Keypad1_ObjectID"), rx-amount, ry, rz);
	   else if(!strcmp(cmd, "+ry", true)) SetDynamicObjectRot(GetPVarInt(playerid, "Keypad1_ObjectID"), rx, ry+amount, rz);
	   else if(!strcmp(cmd, "-ry", true)) SetDynamicObjectRot(GetPVarInt(playerid, "Keypad1_ObjectID"), rx, ry-amount, rz);
	   else if(!strcmp(cmd, "+rz", true)) SetDynamicObjectRot(GetPVarInt(playerid, "Keypad1_ObjectID"), rx, ry, rz+amount);
	   else if(!strcmp(cmd, "-rz", true)) SetDynamicObjectRot(GetPVarInt(playerid, "Keypad1_ObjectID"), rx, ry, rz-amount);
	   else SendWarning(playerid, ""GRAY_"/movegate <Up/Down/+X/-X/+Y/-Y/+Rx/-Rx/+Rx/-Ry/+Ry/-Rz/+Rz>");
	 }
	 case 3:
	 {
       GetDynamicObjectPos(GetPVarInt(playerid, "Keypad2_ObjectID"), x, y, z);
       GetDynamicObjectRot(GetPVarInt(playerid, "Keypad2_ObjectID"), rx, ry, rz);
	   if(!strcmp(cmd, "up", true)) SetDynamicObjectPos(GetPVarInt(playerid, "Keypad2_ObjectID"), x, y, z+amount);
	   else if(!strcmp(cmd, "down", true)) SetDynamicObjectPos(GetPVarInt(playerid, "Keypad2_ObjectID"), x, y, z-amount);
	   else if(!strcmp(cmd, "+x", true)) SetDynamicObjectPos(GetPVarInt(playerid, "Keypad2_ObjectID"), x+amount, y, z);
	   else if(!strcmp(cmd, "-x", true)) SetDynamicObjectPos(GetPVarInt(playerid, "Keypad2_ObjectID"), x-amount, y, z);
	   else if(!strcmp(cmd, "-y", true)) SetDynamicObjectPos(GetPVarInt(playerid, "Keypad2_ObjectID"), x, y-amount, z);
	   else if(!strcmp(cmd, "+y", true)) SetDynamicObjectPos(GetPVarInt(playerid, "Keypad2_ObjectID"), x, y+amount, z);
	   else if(!strcmp(cmd, "+rx", true)) SetDynamicObjectRot(GetPVarInt(playerid, "Keypad2_ObjectID"), rx+amount, ry, rz);
	   else if(!strcmp(cmd, "-rx", true)) SetDynamicObjectRot(GetPVarInt(playerid, "Keypad2_ObjectID"), rx-amount, ry, rz);
	   else if(!strcmp(cmd, "+ry", true)) SetDynamicObjectRot(GetPVarInt(playerid, "Keypad2_ObjectID"), rx, ry+amount, rz);
	   else if(!strcmp(cmd, "-ry", true)) SetDynamicObjectRot(GetPVarInt(playerid, "Keypad2_ObjectID"), rx, ry-amount, rz);
	   else if(!strcmp(cmd, "+rz", true)) SetDynamicObjectRot(GetPVarInt(playerid, "Keypad2_ObjectID"), rx, ry, rz+amount);
	   else if(!strcmp(cmd, "-rz", true)) SetDynamicObjectRot(GetPVarInt(playerid, "Keypad2_ObjectID"), rx, ry, rz-amount);
	   else SendWarning(playerid, ""GRAY_"/movegate <Up/Down/+X/-X/+Y/-Y/+Rx/-Rx/+Rx/-Ry/+Ry/-Rz/+Rz>");
	 }
	 case 5, 6:
	 {
       GetDynamicObjectPos(GetPVarInt(playerid, "Keypad3_ObjectID"), x, y, z);
       GetDynamicObjectRot(GetPVarInt(playerid, "Keypad3_ObjectID"), rx, ry, rz);
	   if(!strcmp(cmd, "up", true)) SetDynamicObjectPos(GetPVarInt(playerid, "Keypad3_ObjectID"), x, y, z+amount);
	   else if(!strcmp(cmd, "down", true)) SetDynamicObjectPos(GetPVarInt(playerid, "Keypad3_ObjectID"), x, y, z-amount);
	   else if(!strcmp(cmd, "+x", true)) SetDynamicObjectPos(GetPVarInt(playerid, "Keypad3_ObjectID"), x+amount, y, z);
	   else if(!strcmp(cmd, "-x", true)) SetDynamicObjectPos(GetPVarInt(playerid, "Keypad3_ObjectID"), x-amount, y, z);
	   else if(!strcmp(cmd, "-y", true)) SetDynamicObjectPos(GetPVarInt(playerid, "Keypad3_ObjectID"), x, y-amount, z);
	   else if(!strcmp(cmd, "+y", true)) SetDynamicObjectPos(GetPVarInt(playerid, "Keypad3_ObjectID"), x, y+amount, z);
	   else if(!strcmp(cmd, "+rx", true)) SetDynamicObjectRot(GetPVarInt(playerid, "Keypad3_ObjectID"), rx+amount, ry, rz);
	   else if(!strcmp(cmd, "-rx", true)) SetDynamicObjectRot(GetPVarInt(playerid, "Keypad3_ObjectID"), rx-amount, ry, rz);
	   else if(!strcmp(cmd, "+ry", true)) SetDynamicObjectRot(GetPVarInt(playerid, "Keypad3_ObjectID"), rx, ry+amount, rz);
	   else if(!strcmp(cmd, "-ry", true)) SetDynamicObjectRot(GetPVarInt(playerid, "Keypad3_ObjectID"), rx, ry-amount, rz);
	   else if(!strcmp(cmd, "+rz", true)) SetDynamicObjectRot(GetPVarInt(playerid, "Keypad3_ObjectID"), rx, ry, rz+amount);
	   else if(!strcmp(cmd, "-rz", true)) SetDynamicObjectRot(GetPVarInt(playerid, "Keypad3_ObjectID"), rx, ry, rz-amount);
	   else SendWarning(playerid, ""GRAY_"/movegate <Up/Down/+X/-X/+Y/-Y/+Rx/-Rx/+Rx/-Ry/+Ry/-Rz/+Rz>");
	 }
   }
   return 1;
}

CMD:editgate(playerid, params[])
{
   if(!IsAdmin(playerid, 5)) return SendMsg(playerid, 5);
   if(!GetPVarInt(playerid, "GateEditing")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You are not creating any gate!");
   switch(GetPVarInt(playerid, "GateEditing"))
   {
	 case 1, 4:EditDynamicObject(playerid, GetPVarInt(playerid, "Gate_ObjectID"));
	 case 2:EditDynamicObject(playerid, GetPVarInt(playerid, "Keypad1_ObjectID"));
	 case 3:EditDynamicObject(playerid, GetPVarInt(playerid, "Keypad2_ObjectID"));
	 case 5:EditDynamicObject(playerid, GetPVarInt(playerid, "Keypad3_ObjectID"));
	 case 6:EditDynamicObject(playerid, GetPVarInt(playerid, "Keypad3_ObjectID"));
   }
   return 1;
}
CMD:liftkeypad(playerid, params[])
{
   if(!IsAdmin(playerid, 5)) return SendMsg(playerid, 5);
   new iD, ggaqqe;
   if(sscanf(params, "dd", iD, ggaqqe)) return SendClientMessage(playerid, RED, "Usage : /liftkeypad "GRAY_"<GateID> <1(show)/0(hide)> ");
   if(iD >= MAX_GATES)  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Gate ID is above the limit");
   if(!fexist(GatePath(iD))) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}this gate doesnt exists");

   GateInfo[iD][HideObj]=ggaqqe;

   new str[128];
   if(ggaqqe == 1) format(str, sizeof(str), "Lift id %d keypad will be hidden while moving!", iD);
   if(ggaqqe == 0) format(str, sizeof(str), "Lift id %d keypad will be shown while moving!", iD);
   SendClientMessage(playerid, WHITE, str);

   new INI:File2 = INI_Open(GatePath(iD));
   INI_SetTag(File2, "gatedata");
   INI_WriteInt(File2, "HideObj", GateInfo[iD][HideObj]);
   INI_Close(File2);
   return 1;

}


CMD:gatespeed(playerid, params[])
{
   if(!IsAdmin(playerid, 5)) return SendMsg(playerid, 5);
   new iD, Float:ggspeed;
   if(sscanf(params, "df", iD, ggspeed)) return SendClientMessage(playerid, RED, "Usage : /gatespeed "GRAY_"<GateID> <Speed*>  (default speed is 2.00)");
   if(iD >= MAX_GATES)  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Gate ID is above the limit");
   if(!fexist(GatePath(iD))) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}this gate doesnt exists");

   GateInfo[iD][gSpeed]=ggspeed;

   new str[128];
   format(str, sizeof(str), "Gate id %d Speed has been set to"GREEN_"%f", iD, ggspeed);
   SendClientMessage(playerid, WHITE, str);

   new INI:File2 = INI_Open(GatePath(iD));
   INI_SetTag(File2, "gatedata");
   INI_WriteFloat(File2, "Speed", GateInfo[iD][gSpeed]);
   INI_Close(File2);
   return 1;
}

CMD:deletegate(playerid, params[])
{
  if(!IsAdmin(playerid, 5)) return SendMsg(playerid, 5);
  new id;
  if(sscanf(params, "d", id)) return SendClientMessage(playerid, RED, "Usage : /deletegate "GRAY_"<GateID>");
  if(id >= MAX_GATES)  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Gate ID is above the limit");
  if(!fexist(GatePath(id))) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}this gate doesnt exists");
  fremove(GatePath(id));
  GateInfo[id][k1][0]=-1;
  GateInfo[id][k1][1]=-1;
  GateInfo[id][k1][2]=-1;
  GateInfo[id][k2][0]=-1;
  GateInfo[id][k2][1]=-1;
  GateInfo[id][k2][2]=-1;

  GateInfo[id][k3][0]=-1;
  GateInfo[id][k3][1]=-1;
  GateInfo[id][k3][2]=-1;
  GateInfo[id][k3][3]=-1;
  GateInfo[id][k3][4]=-1;
  GateInfo[id][k3][5]=-1;

  GateInfo[id][ok3][0]=-1;
  GateInfo[id][ok3][1]=-1;
  GateInfo[id][ok3][2]=-1;
  GateInfo[id][ok3][3]=-1;
  GateInfo[id][ok3][4]=-1;
  GateInfo[id][ok3][5]=-1;

  if(IsValidDynamicObject(GateInfo[id][ObjectID])) DestroyDynamicObject(GateInfo[id][ObjectID]);
  if(IsValidDynamicObject(GateInfo[id][gKeypad1])) DestroyDynamicObject(GateInfo[id][gKeypad1]);
  if(IsValidDynamicObject(GateInfo[id][gKeypad2])) DestroyDynamicObject(GateInfo[id][gKeypad2]);
  if(IsValidDynamicObject(GateInfo[id][gKeypad3]))DestroyDynamicObject(GateInfo[id][gKeypad3]);
  GateInfo[id][ObjectID]=INVALID_OBJECT_ID;
  GateInfo[id][gKeypad1]=INVALID_OBJECT_ID;
  GateInfo[id][gKeypad2]=INVALID_OBJECT_ID;
  GateInfo[id][gKeypad3]=INVALID_OBJECT_ID;
  DestroyDynamicArea(GateInfo[id][g_range]);
  new str[128];
  format(str, sizeof(str), "Gate id %d has been "RED_"Removed", id);
  SendClientMessage(playerid, WHITE, str);
  return 1;
}

CMD:startparkour(playerid, params[])
{
    if(PlayerInfo[playerid][pOurAdmin] == 0) return SendMsg(playerid, 5);
	new rend;
    if(sscanf(params, "d", rend)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Usage /StartParkour <ParkOurID>");
	if(rend < 0 || rend > (MAX_POURS-1)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Invalid Parkour ID, please check the created list in (/ParkourEditor)");
    if(PourStat != 0) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}The parkour has already been started");
    if(ParkOurInfo[rend][CPcount] < 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This parkour is not created, please check the created list in (/ParkourEditor)");
    Pour=rend;
	return 1;
}

CMD:parkour(playerid)
{
   if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
   if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
   if((PourStat != 0) && (PourStat != 2)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}The parkour has already been started");
   if(CountpOurs() >= 12) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Parkour is full!");
   if(GetPVarInt(playerid, "MissionProgress") || IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
   if(aduty[playerid] == 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command while on admin duty.");
   if(IsInFight(playerid)) return SendMsg(playerid, 2);
   if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
   if(CountPOurID() < 1)  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}There are no parkours created!");
   if(GetPVarInt(playerid, "ShowPropTD")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant join the parkour, please try again later.");
   if(EventStarted > 1 && EventType == 900) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant join the parkour during an event countdown.");
   new str[128];

   if(PourStat == 0)
   {
	   for(new x=0; x<12; x++) PourPlaces[x]=0;
       PourStat=2;
       if(ParkOurInfo[Pour][CPcount] < 1)
       {
	     new BA=Pour;
		 GeneratePOurID();
		 if(BA==Pour) GeneratePOurID2();
       }
       if(ParkOurInfo[Pour][CPcount] < 1) GeneratePOurID2();

	   if(EventType==900 && EventStarted == 1)
   	   {
	       PourStartTimer=SetTimer("StartParkOur", 60*1000, false);
	       format(str, sizeof(str), "{776387}» Parkour «{AF49FC} The Parkour \"%s\" will start in 60 seconds", ParkOurInfo[Pour][PourName]);
	       SendClientMessageToAll(-1, str);
 	       ParkStartTime=60;
	       ParkStartTimer69=SetTimer("ParkCountdown", 1000, true);
 	   }
 	   else
 	   {
	       PourStartTimer=SetTimer("StartParkOur", 30*1000, false);
	       format(str, sizeof(str), "{776387}» Parkour «{AF49FC} The Parkour \"%s\" will start in 30 seconds", ParkOurInfo[Pour][PourName]);
	       SendClientMessageToAll(-1, str);
           ParkStartTime=30;
	       ParkStartTimer69=SetTimer("ParkCountdown", 1000, true);
	   }

       for(new i; i<MAX_VEHICLES; i++)
       {
	     if(GetVehicleVirtualWorld(i)==66)
	     DestroyVehicleEX(i);
	   }
   }
   HidePlayerMenu(playerid);

   SetPVarInt(playerid, "pOur", true);
   new v=GetPVarInt(playerid, "pOurPlace");
   POURCARS[v]=INVALID_VEHICLE_ID;
   new count =CountpOurs();
   SendToPour(playerid);
   format(str, sizeof(str), "{776387}» Parkour «{AF49FC} %s has joined the parkour \"%s\" {776387}(/Parkour) {AF49FC}[%d/12]", pName[playerid], ParkOurInfo[Pour][PourName], count);
   SendClientMessageToAll(-1, str);
   SetPlayerVirtualWorldEX(playerid, 66);
   SetTeleShow(1, 0);
   return 1;
}
forward ParkCountdown();
public ParkCountdown()
{
     ParkStartTime--;
	 new str[128];
	 format(str, sizeof(str), "~g~The ~p~parkour~b~ will start in~n~~y~%d Seconds", ParkStartTime);
	// format(str, sizeof(str), "~p~%d
	 if(ParkStartTime > 0)
	 {
		 foreach(new i : Player)
		 {
			  if(GetPVarInt(i, "pOur"))
			  {
				SendInfoText(i, 1500, str);
			  }
		 }
	 }
	 if(ParkStartTime <= 0)
	 {
		KillTimer(ParkStartTimer69);
		ParkStartTimer69=-1;//-1

	 }
	 return 1;
}

stock SendToPour(playerid)
{
	new place;
	for(new x=0; x<12; x++)
	{
	  if(PourPlaces[x] == 0)
	  {
		  place =x;
		  break;
	  }
	}

	PourPlaces[place]=1;
    new str[80];
    format(str, sizeof(str), "~p~%s", ParkOurInfo[Pour][PourName]);
    PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][7], str);
    PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][1], "_");
    PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][4], "~b~Checkpoints: ~g~~h~-~w~/~r~~h~-");
    PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][3], "~g~Position: ~g~~h~-~w~/~r~~h~-");
    PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][5], "~y~00:00:00");
	for(new x=0; x<8; x++) PlayerTextDrawShow(playerid, DMpTD[playerid][x]);

	SavePlayerCoords(playerid);
	ResetPlayerWeaponsEX(playerid);
	SetPVarInt(playerid, "pOurPlace", place);

    TeleportPlayer(playerid, ParkOurInfo[Pour][SpawnsX][place], ParkOurInfo[Pour][SpawnsY][place], ParkOurInfo[Pour][SpawnsZ][place], ParkOurInfo[Pour][SpawnsA][place], 0, false);
    SetPlayerRaceCheckpoint(playerid, 0, ParkOurCPS[Pour][0][CPposX], ParkOurCPS[Pour][0][CPposY], ParkOurCPS[Pour][0][CPposZ], ParkOurCPS[Pour][1][CPposX], ParkOurCPS[Pour][1][CPposY], ParkOurCPS[Pour][1][CPposZ], 3.0);

    SetCameraBehindPlayer(playerid);
    SetPVarInt(playerid, "PlayerCheckPoints", 0);

    new str2[128];
    format(str2, sizeof(str2), "{FFC307}» {AA8202}Top 5 Records of the Parkour \"%s\" {FFC307}«", ParkOurInfo[Pour][PourName]);
    SendClientMessage(playerid, 0xF2EE05FF, str2);
    format(str2, sizeof(str2), "{AA8202}#1 - {FFC307}%s (%s)", pOurRecords[Pour][Top1Player], ConvertTime(pOurRecords[Pour][toptime][0]));
    SendClientMessage(playerid, 0xF2EE05FF, str2);
    format(str2, sizeof(str2), "{AA8202}#2 - {FFC307}%s (%s)", pOurRecords[Pour][Top2Player], ConvertTime(pOurRecords[Pour][toptime][1]));
    SendClientMessage(playerid, 0xF2EE05FF, str2);
    format(str2, sizeof(str2), "{AA8202}#3 - {FFC307}%s (%s)", pOurRecords[Pour][Top3Player], ConvertTime(pOurRecords[Pour][toptime][2]));
    SendClientMessage(playerid, 0xF2EE05FF, str2);
    format(str2, sizeof(str2), "{AA8202}#4 - {FFC307}%s (%s)", pOurRecords[Pour][Top4Player], ConvertTime(pOurRecords[Pour][toptime][3]));
    SendClientMessage(playerid, 0xF2EE05FF, str2);
    format(str2, sizeof(str2), "{AA8202}#5 - {FFC307}%s (%s)", pOurRecords[Pour][Top5Player], ConvertTime(pOurRecords[Pour][toptime][4]));
    SendClientMessage(playerid, 0xF2EE05FF, str2);

    TogglePlayerControllable2(playerid, 0);

}
forward StartParkOur();
public StartParkOur()
{
    new count =CountpOurs();
	if(count == 0)
	{
	 PourStat=0;
	 EndpOur();
	 //foreach(new i : Player) TextDrawHideForPlayer(i, Pwaiting);
	}
	else
	{
		new str[128];
		format(str, sizeof(str), "{776387}» Parkour «{AF49FC} The parkour \"%s\" has been started {776387}(%d players)", ParkOurInfo[Pour][PourName], count);
	    SendClientMessageToAll(-1, str);
	    finishedpours=0;
	    PourStat = 3;
	    pOurStartCount = 5;
	    PourTimer = SetTimer("pOurUpdate", 1000, true);
	   // foreach(new i : Player) TextDrawHideForPlayer(i, Pwaiting);
    }
    pOurTickCount=GetTickCount();
	return 1;
}

forward pOurUpdate();
public pOurUpdate()
{
   if(PourStat == 3)
   {
      pOurStartCount--;
      if(pOurStartCount == 1)
      {
		   PourStat = 1;
		   foreach(new playerid : Player)
		   {
			  if(GetPVarInt(playerid, "pOur"))
			  {
                SendInfoText(playerid, 1000, "~g~GO!");
	            TogglePlayerControllable2(playerid, true);
                PlayerPlaySound(playerid, 1057, 0, 0, 0);
                SetCameraBehindPlayer(playerid);
	          }
		   }
      }
      else if(pOurStartCount > 1)
      {
		foreach(new playerid : Player)
		{
		 if(GetPVarInt(playerid, "pOur"))
	     {
	       new str[25];
	       format(str, sizeof(str), "~b~~h~~h~%d", pOurStartCount-1);
           PlayerPlaySound(playerid, 1056, 0, 0, 0);
	       SendInfoText(playerid, 1000, str);
	     }
		}
      }

   }
//===============pOur Updater===================================================

   else if(PourStat == 1)
   {
      if(CountpOurs() == 0) EndpOur();
	  foreach(new playerid : Player)
	  {
		if(GetPVarInt(playerid, "pOur"))
		{
          pOurRank[playerid] = GetpOurposition(playerid);
          new str[80];
          format(str, sizeof(str), "~g~Position: ~g~~h~%d~w~/~r~~h~%d", pOurRank[playerid], CountpOurs());
		  PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][3], str);
		}
	  }
   }
   return 1;
}
stock CountpOurs()
{
	new count=0;
	foreach (new i : Player)
	{
		if(GetPVarInt(i, "pOur"))
		count++;
	}
	return count;

}
stock EndpOur()
{
    KillTimer(PourStartTimer);
    KillTimer(PourTimer);
    PourStartTimer=-1;
    PourTimer=-1;////
    PourStat=0;
    PourStartTimer=-1;
	SendClientMessageToAll(-1, "{776387}» Parkour «{AF49FC} The parkour has been finished");
	if(finishedpours > 0)
	{
	  new BA=Pour;
      GeneratePOurID();
      if(Pour == BA) GeneratePOurID2();
	}
    finishedpours=0;
	KillTimer(ParkStartTimer69);
    ParkStartTimer69=-1;///-1
}

stock RemoveFrompOur(playerid, nianniannian=0)
{

    DeletePVar(playerid, "inLastCP");
    DeletePVar(playerid, "PlayerCheckPoints");
    DeletePVar(playerid, "pOur");
	if(CountpOurs() == 0)
	{
	 PourStat=0;
     EndpOur();
	}
	SetPlayerVirtualWorldEX(playerid, 0);

	TogglePlayerControllable2(playerid, 1);

	for(new x=0; x< 8;x++)
	{
		PlayerTextDrawHide(playerid, DMpTD[playerid][x]);
	}
	if(nianniannian==1)
	{
		new str[256];
        format(str, sizeof(str), "{776387}» Parkour «{AF49FC} %s has been dropped out of the parkour", pName[playerid]);
		SendClientMessageToAll(-1, str);
		pOurRank[playerid] = 0;
		//foreach(new i : Player) TextDrawHideForPlayer(i, Pwaiting);
	}
    DisablePlayerRaceCheckpoint(playerid);
    LoadPlayerCoords(playerid);
    new v=GetPVarInt(playerid, "pOurPlace");
    if(GetPVarInt(playerid, "pOurPlace"))
	{
	   if(IsValidVehicle(POURCARS[v])) DestroyVehicleEX(POURCARS[v]);
	   PourPlaces[v]=0;
	}
	DeletePVar(playerid, "pOurPlace");
	return 1;
}
stock pFinishpOur(playerid)
{
	 new t= GetTickCount()-pOurTickCount;

     finishedpours++;

  	 new str3[256];
     if(finishedpours == 1)
	 {
	   GivePlayerMoneyEX(playerid, 10000);
	   ScoreTDupdate(playerid, 3);
	   format(str3, sizeof(str3), "{776387}» Parkour «{AF49FC} %s has won the parkour \"%s\" {776387}(1st place)", pName[playerid], ParkOurInfo[Pour][PourName]);
	   PlayerInfo[playerid][pWpOurs]++;
       new Query[256];
       format(Query, sizeof(Query), "UPDATE `users` SET `ParkOurWon` = %d WHERE `Name` = '%s'", PlayerInfo[playerid][pWpOurs], pName[playerid]);
       mysql_query(GTADM, Query);
       if(EventType == 900 && EventStarted ==1) EventWinner(playerid);
       if(PlayerInfo[playerid][pWpOurs] >= 25) GiveMedal(playerid, 94);
	 }
     else if(finishedpours == 2) ScoreTDupdate(playerid, 2), format(str3, sizeof(str3), "{776387}» Parkour «{AF49FC} %s has finished the parkour \"%s\" {776387}(2nd place)", pName[playerid], ParkOurInfo[Pour][PourName]);
     else if(finishedpours == 3) ScoreTDupdate(playerid, 1), format(str3, sizeof(str3), "{776387}» Parkour «{AF49FC} %s has finished the parkour \"%s\" {776387}(3rd place)", pName[playerid], ParkOurInfo[Pour][PourName]);
     else format(str3, sizeof(str3), "{776387}» Parkour «{AF49FC} %s has finished the parkour \"%s\" {776387}(%dth place)", pName[playerid], ParkOurInfo[Pour][PourName], finishedpours);
     SendClientMessageToAll(-1, str3);
	 new count=0;
	 for(new d=0;d<5;d++)
	 {
		 if((t < pOurRecords[Pour][toptime][d]) || (pOurRecords[Pour][toptime][d] == 0))
		 {
		   count++;
		 }
	 }
     if((GetPVarInt(playerid, "LOGGED")) != 2)
     {
	 if(count > 0)
	 {
 	   new pathh[128];
	   format(pathh, sizeof(pathh), "/Parkour/ID%d.ini", Pour);
	   switch(count)
	   {
		  case 1:
		  {
       		  pOurRecords[Pour][toptime][4] =t, format(pOurRecords[Pour][Top5Player], 24, "%s", pName[playerid]);

	          new Query[256];
              format(Query, sizeof(Query), "UPDATE `pourrecords` SET `Top5Player` = '%s', `Top5Record` = %d WHERE `ParkOurID` = %d", pEscName[playerid], t, Pour);
              mysql_query(GTADM, Query);

              ScoreTDupdate(playerid, 2);
          	  GivePlayerMoneyEX(playerid, 25000);
		  }
		  case 2:
		  {
		      pOurRecords[Pour][toptime][3] =t, format(pOurRecords[Pour][Top4Player], 24, "%s", pName[playerid]);

	          new Query[256];
              format(Query, sizeof(Query), "UPDATE `pourrecords` SET `Top4Player` = '%s', `Top4Record` = %d WHERE `ParkOurID` = %d", pEscName[playerid], t, Pour);
              mysql_query(GTADM, Query);

     	      SendInfoText(playerid, 3000, "~y~new record~n~~h~reward~h~ 31000$");
              ScoreTDupdate(playerid, 4);
          	  GivePlayerMoneyEX(playerid, 31000);
		  }
		  case 3:
		  {
		      pOurRecords[Pour][toptime][2] =t, format(pOurRecords[Pour][Top3Player], 24, "%s", pName[playerid]);

	          new Query[256];
              format(Query, sizeof(Query), "UPDATE `pourrecords` SET `Top3Player` = '%s', `Top3Record` = %d WHERE `ParkOurID` = %d", pEscName[playerid], t, Pour);
              mysql_query(GTADM, Query);

     	      SendInfoText(playerid, 3000, "~y~new record~n~~h~reward~h~ 50000$");
              ScoreTDupdate(playerid, 6);
          	  GivePlayerMoneyEX(playerid, 50000);
		  }
		  case 4:
		  {
		      pOurRecords[Pour][toptime][1] =t, format(pOurRecords[Pour][Top2Player], 24, "%s", pName[playerid]);

	          new Query[256];
              format(Query, sizeof(Query), "UPDATE `pourrecords` SET `Top2Player` = '%s', `Top2Record` = %d WHERE `ParkOurID` = %d", pEscName[playerid], t, Pour);
              mysql_query(GTADM, Query);


     	      SendInfoText(playerid, 3000, "~y~new record~n~~h~reward~h~ 70000$");
              ScoreTDupdate(playerid, 8);
          	  GivePlayerMoneyEX(playerid, 70000);
          	  GivePP(playerid, 1);
		  }
		  case 5:
		  {
		      pOurRecords[Pour][toptime][0] =t, format(pOurRecords[Pour][Top1Player], 24, "%s", pName[playerid]);

	          new Query[256];
              format(Query, sizeof(Query), "UPDATE `pourrecords` SET `Top1Player` = '%s', `Top1Record` = %d WHERE `ParkOurID` = %d", pEscName[playerid], t, Pour);
              mysql_query(GTADM, Query);


     	      SendInfoText(playerid, 3000, "~y~new record~n~~h~reward~h~ 120000$");
              ScoreTDupdate(playerid, 10);
          	  GivePlayerMoneyEX(playerid, 120000);
          	  GivePP(playerid, 1);
		  }
	   }
       format(str3, sizeof(str3), "{776387}» Parkour «{AF49FC} %s has set a new \"%s\" parkour record {776387}%s", pName[playerid], ParkOurInfo[Pour][PourName], ConvertTime(t));
       SendClientMessageToAll(-1, str3);
	 }
	 }
     DisablePlayerRaceCheckpoint(playerid);
     RemoveFrompOur(playerid, 0);
}
stock CountDerby()
{
	new avo=0;
	foreach (new i : Player)
	{
	   if(GetPVarInt(i, "InDerby"))
	   {
		 avo++;
	   }
	}
	return avo;
}
stock CountRace()
{
	new avo=0;
	foreach (new i : Player)
	{
	   if(GetPVarInt(i, "RACER"))
	   {
		 avo++;
	   }
	}
	return avo;
}

//=================================Derby========================================

CMD:derby(playerid)
{
  if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
  if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
  if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
  if(GetPVarInt(playerid, "MissionProgress") || IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
  if(IsInFight(playerid)) return SendMsg(playerid, 2);
  if(aduty[playerid] == 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command while on admin duty.");
  if(EventStarted > 1 && EventType == 3) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant join the derby during an event countdown.");

  if(DERBY > 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}The derby has already been started");

  new count=CountDerby();
  if(count >= 12) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}The Derby is already full, try again later");
  Derbyposition[playerid]=count;

  SavePlayerCoords(playerid);
  SetPVarInt(playerid, "InDerby", true);
  new msg[128];
  format(msg, sizeof(msg), "» Derby «"DERBYCOLOR_" %s has joined the derby {FF4D3B}(/Derby) "DERBYCOLOR_"[%d/12]", pName[playerid], count+1);
  SendClientMessageToAll(DERBYCOLOR, msg);
  Streamer_ToggleIdleUpdate(playerid, true);
  if(DERBY == 0)
  {
	  switch(random(3))
	  {
		case 0:
		{
           DerbyMapsTroll[0]=0;
           DerbyMapsTroll[1]=1;
           DerbyMapsTroll[2]=2;
           DerbyMapsTroll[3]=3;
           DerbyMapsTroll[4]=4;
           DerbyMapsTroll[5]=5;
           DerbyMapsTroll[6]=6;
           DerbyMapsTroll[7]=7;
           DerbyMapsTroll[8]=8;
           DerbyMapsTroll[9]=9;
           DerbyMapsTroll[10]=10;
           DerbyMapsTroll[11]=11;
           DerbyMapsTroll[12]=12;
		}
		case 1:
		{
           DerbyMapsTroll[0]=12;
           DerbyMapsTroll[1]=10;
           DerbyMapsTroll[2]=9;
           DerbyMapsTroll[3]=8;
           DerbyMapsTroll[4]=7;
           DerbyMapsTroll[5]=11;
           DerbyMapsTroll[6]=6;
           DerbyMapsTroll[7]=5;
           DerbyMapsTroll[8]=4;
           DerbyMapsTroll[9]=3;
           DerbyMapsTroll[10]=0;
           DerbyMapsTroll[11]=1;
           DerbyMapsTroll[12]=2;
		}
		case 2:
		{
           DerbyMapsTroll[0]=6;
           DerbyMapsTroll[1]=2;
           DerbyMapsTroll[2]=1;
           DerbyMapsTroll[3]=11;
           DerbyMapsTroll[4]=10;
           DerbyMapsTroll[5]=9;
           DerbyMapsTroll[6]=7;
           DerbyMapsTroll[7]=8;
           DerbyMapsTroll[8]=3;
           DerbyMapsTroll[9]=0;
           DerbyMapsTroll[10]=12;
           DerbyMapsTroll[11]=5;
           DerbyMapsTroll[12]=4;
		}
		case 3:
		{
           DerbyMapsTroll[0]=0;
           DerbyMapsTroll[1]=2;
           DerbyMapsTroll[2]=4;
           DerbyMapsTroll[3]=6;
           DerbyMapsTroll[4]=8;
           DerbyMapsTroll[5]=10;
           DerbyMapsTroll[6]=12;
           DerbyMapsTroll[7]=1;
           DerbyMapsTroll[8]=3;
           DerbyMapsTroll[9]=5;
           DerbyMapsTroll[10]=7;
           DerbyMapsTroll[11]=9;
           DerbyMapsTroll[12]=11;
		}
	  }
      CloseDerbyGates();
	  if(IsValidObject(MovingLand)) DestroyObject(MovingLand);
	  MovingLand = CreateObject(18754, 5048.9819, -3843.5554, 1.0000, 0.00, 0.00, 360.00);
	  for(new x=0; x<sizeof(DerbyVote); x++) DerbyVote[x]=0;
	  DERBY = 1;
      if(EventType == 3 && EventStarted ==1)
	  {
		  DerbyStartTime=60;
		  SendClientMessageToAll(DERBYCOLOR, "» Derby «"DERBYCOLOR_" The demolition derby will start in 60 seconds");
	      DerbyStartTimer = SetTimer("StartDerbyCount", 1000, true);
	      DerbyStartTimer2 = SetTimer("StartDerby", 60000, false);
	  }
	  else
	  {
		  DerbyStartTime=30;
		  SendClientMessageToAll(DERBYCOLOR, "» Derby «"DERBYCOLOR_" The demolition derby will start in 30 seconds");
	      DerbyStartTimer = SetTimer("StartDerbyCount", 1000, true);
	      DerbyStartTimer2 = SetTimer("StartDerby", 30000, false);
	  }
      for(new i; i<MAX_VEHICLES; i++)
      {
	     if(GetVehicleVirtualWorld(i)==2)
	     DestroyVehicleEX(i);
	  }
	  //TextDrawSetStringEX(DerbyWaiting, "~p~The demolition derby starts in ~y~-~w~ ~p~seconds ~n~ ~w~~n~ Required players for start: ~y~3~n~~w~ Current players: ~r~1");
	  if(EventStarted == 0) SendInfoText2(4500, "Type ~g~/Derby~w~ To join the ~r~Demolition Derby~w~!");
  }

  new str[1024];
  for(new x=0; x<sizeof(DerbyInfo); x++)
  {
	  format(str, sizeof(str), "%s\n%s", str, DerbyInfo[DerbyMapsTroll[x]][DerbyMaps]);
  }
  SetPlayerInterior(playerid, 0);
  switch(random(3))
  {
   case 0: SetPlayerCameraPos(playerid, 2816.1570, -1527.1493, 99.7924), SetPlayerCameraLookAt(playerid, 2815.8513, -1528.1069, 99.5523);
   case 1: SetPlayerCameraPos(playerid, -2227.1282, -516.8747, 110.7236), SetPlayerCameraLookAt(playerid, -2226.2412, -516.3990, 110.3985);
   case 2: SetPlayerCameraPos(playerid, 1263.0780, 1629.2690, 92.5193), SetPlayerCameraLookAt(playerid, 1262.2054, 1628.7834, 92.0643);
  }
  SetPVarInt(playerid, "InDerby", true);
  ShowPlayerDialog(playerid, 32700, DIALOG_STYLE_LIST, "Vote:", str, "Vote", "Exit");
  SetPlayerVirtualWorldEX(playerid, 2);
  SetPlayerHealth(playerid, 100);
  SetPlayerArmour(playerid, 100);
  TogglePlayerControllable2(playerid, 0);
  PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][3] , "~p~Players: ~y~-");
  PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][4] , "~g~Time: ~r~-");
  PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][7] , "~b~Derby");
  PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][1] , "_");
  PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][5] , "_");
  //TextDrawShowForPlayer(playerid, DerbyWaiting);
  SetTeleShow(2, 0);
  return 1;
}
forward StartDerbyCount();
public StartDerbyCount()
{
  if(DerbyStartTime > 0)
  {
      new count = CountDerby();
	  DerbyStartTime--;
      new str[128];
	  format(str, sizeof(str), "~r~the demolition derby ~y~starts~n~in ~p~%d ~b~seconds", DerbyStartTime);
	  foreach(new i : Player)
	  {
        if(GetPVarInt(i, "InDerby"))
	    {
          PlayerTextDrawHide(i, pInfoTD[i]);
		  SendInfoText(i, 1000, str);
		}
	  }
	  if(count ==0)
	  {
	       KillTimer(DerbyStartTimer2);
           KillTimer(DerbyStartTimer);
           DerbyStartTimer2=-1;
           DerbyStartTimer=-1;
           DERBY = 0;
           SendClientMessageToAll(DERBYCOLOR, "» Derby «"DERBYCOLOR_" The demolition derby start has been cancelled {FF4D3B}(Not enough players)");
           if(IsValidObject(MovingLand)) DestroyObject(MovingLand);
		   MovingLand=INVALID_OBJECT_ID;
	  }
  }
  else
  {
	 KillTimer(DerbyStartTimer);
	 DerbyStartTimer=-1;
  }
}
forward StartDerby();
public StartDerby()
{
    KillTimer(DerbyStartTimer), DerbyStartTimer=-1;
	new count =CountDerby();
    if(count < Derby_Min)
	{
      DERBY = 0;
      SendClientMessageToAll(DERBYCOLOR, "» Derby «"DERBYCOLOR_" The demolition derby start has been cancelled {FF4D3B}(Not enough players)");
      foreach (new i : Player) if(GetPVarInt(i, "InDerby")) Remove_From_Derby(i, 0), LoadPlayerCoords(i);
      if(IsValidObject(MovingLand)) DestroyObject(MovingLand);
      MovingLand=INVALID_OBJECT_ID;
      KillTimer(DerbyStartTimer2);
      KillTimer(DerbyStartTimer);
      DerbyStartTimer=-1;
      DerbyStartTimer2=-1;
	}
	else
	{

       new HighestVote = 0;
       for(new i; i < sizeof(DerbyVote); i++)
       {
        if(DerbyVote[i] > HighestVote) HighestVote = i;
       }
	   DerbyID =HighestVote;
	   if(DerbyID == 0) OpenDerbyGates();
	   else if(DerbyID == 5) MoveObject(MovingLand, 5136.4902, -2649.7905, 1.0000, 15.00, 0.00, 0.00, 360.0);
	   DERBY=2;
	   DerbyPlayers = count;

       SendClientMessageToAll(DERBYCOLOR, "» Derby «"DERBYCOLOR_" The demolition derby match has been started");
       new ss= DerbyID*12;
	   foreach(new i : Player)
	   {
		 if(GetPVarInt(i, "InDerby"))
		 {
			new c = ss+Derbyposition[i];
			new b = Derbyposition[i];
			SetCameraBehindPlayer(i);
            DerbyCars[b] = CreateVehicle(DerbySpawns[c][DcarType], DerbySpawns[c][Dpos][0], DerbySpawns[c][Dpos][1], DerbySpawns[c][Dpos][2], DerbySpawns[c][Dpos][3], -1, -1, 10);
            ResetCarInfo(DerbyCars[b]);
			SetPlayerInterior(i, DerbyInfo[DerbyID][DerbyInterior]);
            VehicleInfo[DerbyCars[b]][Player]=INVALID_PLAYER_ID;
            LinkVehicleToInterior(DerbyCars[b], DerbyInfo[DerbyID][DerbyInterior]);
			SetVehicleVirtualWorld(DerbyCars[b], 2);

			SetPlayerPos(i, DerbySpawns[c][Dpos][0], DerbySpawns[c][Dpos][1], DerbySpawns[c][Dpos][2]);
			PutPlayerInVehicle(i, DerbyCars[b], 0);

            HidePlayerDialog(i);
            SetCameraBehindPlayer(i);

			for(new x=0; x<8; x++) PlayerTextDrawShow(i, DMpTD[i][x]);
            //TextDrawHideForPlayer(i, DerbyWaiting);
		 }
	   }
	   DerbyTime = 60*DerbyPlayers;
	   DerbyTime2=4;
	   DerbyTimer = SetTimer("DerbyUpdate", 1000, true);
	}
	return 1;
}
forward DerbyUpdate();
public DerbyUpdate()
{
   new count= CountDerby();
   if(DERBY == 2)
   {
	 if(count <= 0)
	 {
		KillTimer(DerbyStartTimer);
		DERBY=0;
		KillTimer(DerbyTimer);
		DerbyTimer=-1;
		DerbyStartTimer=-1;
        return 0;
	 }
	 if(DerbyTime2 > -1)
	 {
         DerbyTime2--;
		 foreach(new playerid : Player)
		 {
	       if(GetPVarInt(playerid, "InDerby"))
	       {
			  switch(DerbyTime2)
			  {
				case 3: SendInfoText(playerid, 1000, "~r~3"), PlayerPlaySound(playerid, 1056, 0, 0, 0);
				case 2: SendInfoText(playerid, 1000, "~y~~n~2"), PlayerPlaySound(playerid, 1056, 0, 0, 0);
				case 1: SendInfoText(playerid, 1000, "~g~~n~~n~1"), PlayerPlaySound(playerid, 1056, 0, 0, 0);
				case 0: SendInfoText(playerid, 1000, "~g~GO!"), TogglePlayerControllable2(playerid, 1), PlayerPlaySound(playerid, 1057, 0, 0, 0);
			  }
		   }
		 }
	 }

	 else
	 {
         DerbyTime--;
		 if(DerbyTime <= 0)
		 {
			KillTimer(DerbyStartTimer);
			DERBY=0;
			KillTimer(DerbyTimer);
			DerbyTimer=-1;
			DerbyStartTimer=-1;
			SendClientMessageToAll(DERBYCOLOR, "» Derby «"DERBYCOLOR_" The demolition derby has ended {FF4D3B}(Time's up)");
			foreach(new playerid : Player) if(GetPVarInt(playerid, "InDerby")) Remove_From_Derby(playerid, 0), LoadPlayerCoords(playerid);
			if(IsValidObject(MovingLand)) DestroyObject(MovingLand);
			MovingLand=INVALID_OBJECT_ID;
	        return 0;
		 }
		 foreach(new playerid : Player)
		 {
	       if(GetPVarInt(playerid, "InDerby"))
	       {
	        new str[128];
	        if(count == 1 && Derby_Min != 1)
	        {
	           Remove_From_Derby(playerid, 0);
	           LoadPlayerCoords(playerid);
	           format(str, sizeof(str), "» Derby «"DERBYCOLOR_" %s has won the demolition derby {FF4D3B}(Reward: $%d)", pName[playerid], 12000 * DerbyPlayers);
	           GivePlayerMoneyEX(playerid, 12000 * DerbyPlayers);
	           ScoreTDupdate(playerid, 5);
	           SendClientMessageToAll(DERBYCOLOR, str);
	           DERBY=0;
	           KillTimer(DerbyTimer);
	           KillTimer(DerbyStartTimer);
			   DerbyTimer=-1;
		 	   DerbyStartTimer=-1;

	           PlayerInfo[playerid][pWDerby]++;
		       new Query[256];
	           format(Query, sizeof(Query), "UPDATE `users` SET `DerbyWon` = %d WHERE `Name` = '%s'", PlayerInfo[playerid][pWDerby], pEscName[playerid]);
	           mysql_query(GTADM, Query);
			   if(PlayerInfo[playerid][pWDerby] >= 35) GiveMedal(playerid, 39);
	           if(EventType == 3 && EventStarted ==1) EventWinner(playerid);
	        }
	        new Float:x, Float:y, Float:z;
	        GetPlayerPos(playerid, x, y, z);
	        if((z<DerbyInfo[DerbyID][LowestPoint])) SetPlayerHealth(playerid, -1);

	   	    format(str, sizeof(str), "~p~Players: ~b~%d", count);
	  	    PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][3], str);
		    format(str, sizeof(str), "~g~Time: ~r~%s", TimeConvert(DerbyTime));
	        PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][4], str);
	       }
		 }
	 }
   }
   return 1;
}

stock Remove_From_Derby(playerid, Type)
{
  if(IsPlayerConnected(playerid))
  {
    Streamer_ToggleIdleUpdate(playerid, false);
	TogglePlayerControllable2(playerid, 1);
	new a=Derbyposition[playerid];
	if(IsValidVehicle(DerbyCars[a])) DestroyVehicleEX(DerbyCars[a]);
    HidePlayerDialog(playerid);
	SetPlayerVirtualWorldEX(playerid, 0);
 	DeletePVar(playerid, "InDerby");
	for(new x=0; x<8; x++) PlayerTextDrawHide(playerid, DMpTD[playerid][x]);
    //TextDrawHideForPlayer(playerid, DerbyWaiting);
	new str[256];
	switch(Type)
	{
		case 1:
		{
		   format(str, sizeof(str), "» Derby «"DERBYCOLOR_" %s has been dropped out of the demolition derby", pName[playerid]);
		   SendClientMessageToAll(DERBYCOLOR, str);
		}
		case 2:
		{
		   format(str, sizeof(str), "» Derby «"DERBYCOLOR_" %s has left the derby {FF4D3B}(/Exit)", pName[playerid]);
		   SendClientMessageToAll(DERBYCOLOR, str);
		}
		case 3:
		{
		   format(str, sizeof(str), "» Derby «"DERBYCOLOR_" %s has been dropped out of the demolition derby {FF4D3B}(Camping)", pName[playerid]);
		   SendClientMessageToAll(DERBYCOLOR, str);
		}
		case 4:
		{
		   format(str, sizeof(str), "» Derby «"DERBYCOLOR_" %s has been dropped out of the demolition derby {FF4D3B}(Paused)", pName[playerid]);
		   SendClientMessageToAll(DERBYCOLOR, str);
		}
	}
	SetCameraBehindPlayer(playerid);
  }
}



stock ResetpTuning(playerid)
{
  for(new x=0;x<20;x++)
  {
    pMods[playerid][x] = 0;
  }
  pMods[playerid][17] = -255;
  NEON[playerid]= -255;
  Player_Info[playerid][Fbumps]=-1;
  Player_Info[playerid][Rbumps]=-1;
  Player_Info[playerid][Hood]=-1;
  Player_Info[playerid][SS]=-1;
  Player_Info[playerid][Spoiler]=-1;
  Player_Info[playerid][Ex]=-1;
  Player_Info[playerid][Wheel]=-1;
  new Query[256];
  format(Query, sizeof(Query), "UPDATE `users` SET `Neon` = -255, `Mod1` = 0, `Mod2` = 0, `Mod3` = 0, `Mod4` = 0, `Mod5` = 0, `Mod6` = 0, `Mod7` = 0, `Mod8` = 0, `Mod9` = 0, `Mod10` = 0 WHERE `UserID` = '%d'", PlayerInfo[playerid][UserID]);
  mysql_query(GTADM, Query);
  format(Query, sizeof(Query), "UPDATE `users` SET `Mod11` = 0, `Mod12` = 0, `Mod13` = 0, `Mod14` = 0, `Mod15` = 0, `Mod16` = 0, `Mod17` = 0, `Mod18` = -255, `Mod19` = 0, `Mod20` = 0 WHERE `UserID` = '%d'", PlayerInfo[playerid][UserID]);
  mysql_query(GTADM, Query);
  format(Query, sizeof(Query), "UPDATE `users` SET `Spoiler` = 0, `SS` = 0, `Hood` = 0, `FrontB` = 0, `RearB` = 0, `Ex` = 0, `Wheel` =0 WHERE `UserID` = '%d'", PlayerInfo[playerid][UserID]);
  mysql_query(GTADM, Query);
}

stock RemoveWeaponFromSlot(playerid, iWeaponSlot) {
    new weapons[13][2];
    for(new i = 0; i < 13; i++)
        GetPlayerWeaponData(playerid, i, weapons[i][0], weapons[i][1]);

    weapons[iWeaponSlot][0] = 0;

    ResetPlayerWeaponsEX(playerid);

    for(new i = 0; i < 13; i++)
        GivePlayerWeaponEX(playerid, weapons[i][0], weapons[i][1]);

    return 1;
}

//==============================================================================

public OnQueryError(errorid, const error[], const callback[], const query[])
{
	printf("MYSQL ERROR - error :%s  || callback: %s", error, callback);
	printf("Error Query - %s", query);
	return 1;
}

//============================Vehiclee mOds=====================================
stock IsComponentidCompatible(modelid, componentid)
{
    if(componentid == 1025 || componentid == 1073 || componentid == 1074 || componentid == 1075 || componentid == 1076 ||
         componentid == 1077 || componentid == 1078 || componentid == 1079 || componentid == 1080 || componentid == 1081 ||
         componentid == 1082 || componentid == 1083 || componentid == 1084 || componentid == 1085 || componentid == 1096 ||
         componentid == 1097 || componentid == 1098 || componentid == 1087 || componentid == 1086)
         return true;

    switch (modelid)
    {
        case 400: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 401: return (componentid == 1005 || componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 114 || componentid == 1020 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 402: return (componentid == 1009 || componentid == 1009 || componentid == 1010);
        case 404: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1002 || componentid == 1016 || componentid == 1000 || componentid == 1017 || componentid == 1007);
        case 405: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1014 || componentid == 1023 || componentid == 1000);
        case 409: return (componentid == 1009);
        case 410: return (componentid == 1019 || componentid == 1021 || componentid == 1020 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 411: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 412: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 415: return (componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 418: return (componentid == 1020 || componentid == 1021 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1016);
        case 419: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 420: return (componentid == 1005 || componentid == 1004 || componentid == 1021 || componentid == 1019 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1003);
        case 421: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1014 || componentid == 1023 || componentid == 1016 || componentid == 1000);
        case 422: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1017 || componentid == 1007);
        case 426: return (componentid == 1005 || componentid == 1004 || componentid == 1021 || componentid == 1019 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1003);
        case 429: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 436: return (componentid == 1020 || componentid == 1021 || componentid == 1022 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 438: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 439: return (componentid == 1003 || componentid == 1023 || componentid == 1001 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1017 || componentid == 1007 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1013);
        case 442: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 445: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 451: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 458: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 466: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 467: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 474: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 475: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 477: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1017 || componentid == 1007);
        case 478: return (componentid == 1005 || componentid == 1004 || componentid == 1012 || componentid == 1020 || componentid == 1021 || componentid == 1022 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 479: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 480: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 489: return (componentid == 1005 || componentid == 1004 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1016 || componentid == 1000);
        case 491: return (componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1014 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 492: return (componentid == 1005 || componentid == 1004 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1016 || componentid == 1000);
        case 496: return (componentid == 1006 || componentid == 1017 || componentid == 1007 || componentid == 1011 || componentid == 1019 || componentid == 1023 || componentid == 1001 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1003 || componentid == 1002 || componentid == 1142 || componentid == 1143 || componentid == 1020);
        case 500: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 506: return (componentid == 1009);
        case 507: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 516: return (componentid == 1004 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1002 || componentid == 1015 || componentid == 1016 || componentid == 1000 || componentid == 1017 || componentid == 1007);
        case 517: return (componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1002 || componentid == 1023 || componentid == 1016 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 518: return (componentid == 1005 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1018 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 526: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 527: return (componentid == 1021 || componentid == 1020 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1014 || componentid == 1015 || componentid == 1017 || componentid == 1007);
        case 529: return (componentid == 1012 || componentid == 1011 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 533: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 534: return (componentid == 1126 || componentid == 1127 || componentid == 1179 || componentid == 1185 || componentid == 1100 || componentid == 1123 || componentid == 1125 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1180 || componentid == 1178 || componentid == 1101 || componentid == 1122 || componentid == 1124 || componentid == 1106);
        case 535: return (componentid == 1109 || componentid == 1110 || componentid == 1113 || componentid == 1114 || componentid == 1115 || componentid == 1116 || componentid == 1117 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1120 || componentid == 1118 || componentid == 1121 || componentid == 1119);
        case 536: return (componentid == 1104 || componentid == 1105 || componentid == 1182 || componentid == 1181 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1184 || componentid == 1183 || componentid == 1128 || componentid == 1103 || componentid == 1107 || componentid == 1108);
        case 540: return (componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007);
        case 541: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 542: return (componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1014 || componentid == 1015);
        case 545: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 546: return (componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1019 || componentid == 1018 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007);
        case 547: return (componentid == 1142 || componentid == 1143 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1016 || componentid == 1003 || componentid == 1000);
        case 549: return (componentid == 1012 || componentid == 1011 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 550: return (componentid == 1005 || componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003);
        case 551: return (componentid == 1005 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1023 || componentid == 1016 || componentid == 1003);
        case 555: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 558: return (componentid == 1092 || componentid == 1089 || componentid == 1166 || componentid == 1165 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1168 || componentid == 1167 || componentid == 1088 || componentid == 1091 || componentid == 1164 || componentid == 1163 || componentid == 1094 || componentid == 1090 || componentid == 1095 || componentid == 1093);
        case 559: return (componentid == 1065 || componentid == 1066 || componentid == 1160 || componentid == 1173 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1159 || componentid == 1161 || componentid == 1162 || componentid == 1158 || componentid == 1067 || componentid == 1068 || componentid == 1071 || componentid == 1069 || componentid == 1072 || componentid == 1070 || componentid == 1009);
        case 560: return (componentid == 1028 || componentid == 1029 || componentid == 1169 || componentid == 1170 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1141 || componentid == 1140 || componentid == 1032 || componentid == 1033 || componentid == 1138 || componentid == 1139 || componentid == 1027 || componentid == 1026 || componentid == 1030 || componentid == 1031);
        case 561: return (componentid == 1064 || componentid == 1059 || componentid == 1155 || componentid == 1157 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1154 || componentid == 1156 || componentid == 1055 || componentid == 1061 || componentid == 1058 || componentid == 1060 || componentid == 1062 || componentid == 1056 || componentid == 1063 || componentid == 1057);
        case 562: return (componentid == 1034 || componentid == 1037 || componentid == 1171 || componentid == 1172 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1149 || componentid == 1148 || componentid == 1038 || componentid == 1035 || componentid == 1147 || componentid == 1146 || componentid == 1040 || componentid == 1036 || componentid == 1041 || componentid == 1039);
        case 565: return (componentid == 1046 || componentid == 1045 || componentid == 1153 || componentid == 1152 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1150 || componentid == 1151 || componentid == 1054 || componentid == 1053 || componentid == 1049 || componentid == 1050 || componentid == 1051 || componentid == 1047 || componentid == 1052 || componentid == 1048);
        case 566: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 567: return (componentid == 1129 || componentid == 1132 || componentid == 1189 || componentid == 1188 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1187 || componentid == 1186 || componentid == 1130 || componentid == 1131 || componentid == 1102 || componentid == 1133);
        case 575: return (componentid == 1044 || componentid == 1043 || componentid == 1174 || componentid == 1175 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1176 || componentid == 1177 || componentid == 1099 || componentid == 1042);
        case 576: return (componentid == 1136 || componentid == 1135 || componentid == 1191 || componentid == 1190 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1192 || componentid == 1193 || componentid == 1137 || componentid == 1134);
        case 579: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 580: return (componentid == 1020 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007);
        case 585: return (componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 587: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 589: return (componentid == 1005 || componentid == 1004 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1024 || componentid == 1013 || componentid == 1006 || componentid == 1016 || componentid == 1000 || componentid == 1017 || componentid == 1007);
        case 600: return (componentid == 1005 || componentid == 1004 || componentid == 1020 || componentid == 1022 || componentid == 1018 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1017 || componentid == 1007);
        case 602: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 603: return (componentid == 1144 || componentid == 1145 || componentid == 1142 || componentid == 1143 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007);
    }
    return false;
}
//=============

public Ballposition()
{
	 new Float:pos[3];
	 GetDynamicObjectPos(football, pos[0], pos[1], pos[2]);
	 new str[200];
	 new str2[50], str3[50];

	 format(str, sizeof(str), "Time: ~p~%s%d:%s%d", (fTime < 10) ? ("0") : (""), fTime, (fcounter < 10) ? ("0") : (""), fcounter);
	 format(str2, sizeof(str2), "~y~%s: ~g~~h~%d", Team1Name, fTeamScore[0]);
	 format(str3, sizeof(str3), "~r~%s: ~b~%d", Team2Name, fTeamScore[1]);

	 foreach(new playerid : Player)
	 {
		if(Footballer[playerid] > 0)
		{
			PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][7], "~g~Football");
			PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][3], str2);
			PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][4], str3);
			PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][5], str);
			PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][1], "_");
		}
  	    if(IsPlayerInDynamicArea(playerid, PlayArea) && Footballer[playerid]==3)
	    {
			SendInfoText(playerid, 5000, "~r~Stay Out Of the Playing Area");
			SetPlayerPos(playerid, 1392.4801, 2170.7742, 13.8000);
	    }
	 }
	 if(IsPointInDynamicArea(GoalArea[0], pos[0], pos[1], pos[2]))
	 {
			foreach (new i : Player) if(GetPlayerVirtualWorld(i) == 777) SendInfoText(i, 3000, "~g~Goal!"), PlayerPlaySound(i, 3201, 0.0, 0.0, 0.0);
            StopDynamicObject(football);
		    if(IsValidDynamicObject(football))  DestroyDynamicObject(football);
            football = CreateDynamicObject(1946, 1347.5692, 2150.1047, 10.3000, 0.0000, 0.0000, 0.0000, 777);
            SetDynamicObjectMaterial(football, 0, 7913, "vgnbballsign2", "eris_4", 0);
            StopDynamicObject(football);
            fTeamScore[1]++;
            GiveMedal(fLastPlayer, 41);
  	        if(Footballer[fLastPlayer] == 2)
	        {
				switch(random(3))
				{
				   case 0: format(str, sizeof(str), "~r~L~h~i~h~v~h~e: ~y~%s~w~ has scored a wonderful ~g~goal ~w~(%d : %d)", pName[fLastPlayer], fTeamScore[0], fTeamScore[1]);
				   case 1: format(str, sizeof(str), "~r~L~h~i~h~v~h~e: ~w~Goal for %s (min %d)", pName[fLastPlayer], fTime);
				   case 2: format(str, sizeof(str), "~r~L~h~i~h~v~h~e: ~w~Gooooooooooooooooooooooooooooooooooooooooal by ~y~%s", pName[fLastPlayer]);
			    }
	 		}
     		foreach (new i : Player)
	 		{
				new team = Footballer[i];
				if(team == 1)
	   				SetPlayerPosEx(i, 1324.5721, 2148.6230, 11.0433, 270.1467), SetPlayerHealth(i, 100);
   				else if(team == 2)
	  		 		SetPlayerPosEx(i, 1371.1351, 2148.9751, 11.0378, 91.7135), SetPlayerHealth(i, 100);
	        }

	 }
	 else if(IsPointInDynamicArea(GoalArea[1], pos[0], pos[1], pos[2]))
	 {
			foreach (new i : Player) if(GetPlayerVirtualWorld(i) == 777) SendInfoText(i, 3000, "~g~Goal!"), PlayerPlaySound(i, 3201, 0.0, 0.0, 0.0);
            StopDynamicObject(football);
		    if(IsValidDynamicObject(football)) DestroyDynamicObject(football);

            football = CreateDynamicObject(1946, 1347.5692, 2150.1047, 10.3000, 0.0000, 0.0000, 0.0000, 777);
            SetDynamicObjectMaterial(football, 0, 7913, "vgnbballsign2", "eris_4", 0);
            StopDynamicObject(football);
            fTeamScore[0]++;
            GiveMedal(fLastPlayer, 41);
  	        if(Footballer[fLastPlayer] == 1)
	        {
				switch(random(3))
				{
				   case 0: format(str, sizeof(str), "~r~L~h~i~h~v~h~e: ~y~%s~w~ has scored a wonderful ~g~goal ~w~(%d : %d)", pName[fLastPlayer], fTeamScore[0], fTeamScore[1]);
				   case 1: format(str, sizeof(str), "~r~L~h~i~h~v~h~e: ~w~Goal for %s (min %d)", pName[fLastPlayer], fTime);
				   case 2: format(str, sizeof(str), "~r~L~h~i~h~v~h~e: ~w~Gooooooooooooooooooooooooooooooooooooooooal by ~y~%s", pName[fLastPlayer]);
			    }
			}
     		foreach (new i : Player)
	 		{
				new team = Footballer[i];
				if(team == 1)
	   				SetPlayerPosEx(i, 1324.5721, 2148.6230, 11.0433, 270.1467);
   				else if(team == 2)
	  		 		SetPlayerPosEx(i, 1371.1351, 2148.9751, 11.0378, 91.7135);
	        }
	 }
	 else
	 {
  	     if(!IsPointInDynamicArea(FieldArea, pos[0], pos[1], pos[2]) && !IsPointInDynamicArea(GoalSaveArea[0], pos[0], pos[1], pos[2]) && !IsPointInDynamicArea(GoalSaveArea[1], pos[0], pos[1], pos[2]))
	     {
            StopDynamicObject(football);
		    if(IsValidDynamicObject(football)) DestroyDynamicObject(football);
            football = CreateDynamicObject(1946, 1347.5692, 2150.1047, 10.3000, 0.0000, 0.0000, 0.0000, 777);
            SetDynamicObjectMaterial(football, 0, 7913, "vgnbballsign2", "eris_4", 0);
			foreach (new i : Player) if(GetPlayerVirtualWorld(i) == 777) SendInfoText(i, 3000, "~y~OUT!"), PlayerPlaySound(i, 3201, 0.0, 0.0, 0.0);

	     }

	 }

	 if(AllowPlaying == 1)
	 {
       fcounter++;
	   if(fcounter == 60) fTime++, fcounter=0;
	 }
	 if((fTime == 45) && (fcounter==0))
	 {
           KillTimer(fKeyChange);
           fKeyChange=-1;
		   foreach (new i : Player) if(GetPlayerVirtualWorld(i) == 777) PlayerTextDrawSetStringEX(i, DMpTD[i][5], "~g~Half Time! Break!"), SendInfoText(i, 15000, "~y~HALF TIME!~n~BREAK!"), PlayerPlaySound(i, 3201, 0.0, 0.0, 0.0);
	       SetTimer("SecondHalf", 60000, false);

	 }
	 else if(fTime == 90)
	 {
           KillTimer(fKeyChange);
           fKeyChange=-1;

           if(fTeamScore[0] > fTeamScore[1])
		   {
		      foreach (new i : Player)
			  {
			    if(GetPlayerVirtualWorld(i) == 777)
			    {
                if(Footballer[i] ==1) SendInfoText(i, 15000, "~g~Winners!");
                new str34[128];
                if(EventType==6969 && EventStarted==1)
                {
				  foreach(new a : Player)
				  {
                    if(Footballer[a] == 1)
                    {
                      FB1[a]=1;
                    }
                  }
                }
                if(Footballer[i]==1 && EventType==6969 && EventStarted == 1) EventWinner2(), format(str34, sizeof(str34), "» Event « {CDF590}The Football Team 1 has won the Event!"), SendClientMessageToAll(0xE8AF02FF, str34);
                else if(Footballer[i] ==2) SendInfoText(i, 15000, "~r~Losers!");
				PlayerPlaySound(i, 3201, 0.0, 0.0, 0.0);
                if(Footballer[i]==1)
                {
                  PlayerInfo[i][FBWins]++;
                  new Query[256];
                  format(Query, sizeof(Query), "UPDATE `users` SET `FBWins` = %d WHERE `UserID` = '%d'", PlayerInfo[i][FBWins], PlayerInfo[i][UserID]);
                  mysql_query(GTADM, Query);
 			      if(PlayerInfo[i][FBWins] >= 10) GiveMedal(i, 92);
                }
       	        PlayerTextDrawSetStringEX(i, DMpTD[i][5], "~g~Match Ended");
       	        new gang = PlayerInfo[i][pGang];
	            if(gang > 0) SetPlayerColor(i, PlayerColors[GangInfo[gang][gColor]]);
	            else SetPlayerColor(i, PlayerColors[random(200)] );
				}
			  }
		   }
           else if(fTeamScore[1] > fTeamScore[0])
		   {
		      foreach (new i : Player)
			  {
			    if(GetPlayerVirtualWorld(i) == 777)
			    {
                  if(Footballer[i]==2) SendInfoText(i, 15000, "~g~Winners!");
                  new str33[128];
                  if(EventType==6969 && EventStarted==1)
                  {
					foreach(new a : Player)
					{
                      if(Footballer[a] == 2)
                      {
                        FB2[a]=1;
                      }
		            }
				  }
                  if(Footballer[i]==2 && EventType==6969 && EventStarted == 1) EventWinner2(), format(str33, sizeof(str33), "» Event « {CDF590}The Football Team 2 has won the Event!"), SendClientMessageToAll(0xE8AF02FF, str33);
                  else if(Footballer[i] ==1) SendInfoText(i, 15000, "~r~Losers!");
                  if(Footballer[i]==2)
                  {
                    PlayerInfo[i][FBWins]++;
                    new Query[256];
                    format(Query, sizeof(Query), "UPDATE `users` SET `FBWins` = %d WHERE `UserID` = '%d'", PlayerInfo[i][FBWins], PlayerInfo[i][UserID]);
                    mysql_query(GTADM, Query);
					if(PlayerInfo[i][FBWins] >= 10) GiveMedal(i, 92);
                  }
				  PlayerPlaySound(i, 3201, 0.0, 0.0, 0.0);
       	          PlayerTextDrawSetStringEX(i, DMpTD[i][5], "~g~Match Ended");
				}
			  }
           }
           else if(fTeamScore[1] == fTeamScore[0])
		   {
		      foreach (new i : Player)
			  {
			    if(GetPlayerVirtualWorld(i) == 777)
			    {
                    SendInfoText(i, 15000, "~y~Draw!");
			    	PlayerPlaySound(i, 3201, 0.0, 0.0, 0.0);
       	            PlayerTextDrawSetStringEX(i, DMpTD[i][5], "~g~Match Ended");
				}
			  }
		   }
		   EndFootBall();
	 }
	 return 1;

}


CMD:football(playerid)
{
	 if(IsInFight(playerid)) return SendMsg(playerid, 2);
	 if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
	 if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
     if(aduty[playerid] == 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command while on admin duty.");
	 if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
	 if(EventStarted > 1 && EventType == 6969) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant join the football during an event countdown.");
	 if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
	 if(FootballStarted == 1)
	 {
	     SavePlayerCoords(playerid);
         SetPlayerPosEx(playerid, 1403.4863, 2109.2959, 16.3672, 56.7647);
         Footballer[playerid]=3;
         SendClientMessage(playerid, RED2, ""RED_"» Error « {BABABA}The Football match has already been started");
         SendClientMessage(playerid, RED2, ""RED_"» Error « {BABABA}You must wait for the next match to be able to play!");
	 }
	 else
	 {

	     SavePlayerCoords(playerid);
	     ResetPlayerWeaponsEX(playerid);
	     SavedSKIN[playerid]=GetPlayerSkin(playerid);
	     SetPlayerVirtualWorldEX(playerid, 777);
	     SetTeleShow(5, 0);

	     new cf=CountFootballers();
		 new str[128];
		 format(str, sizeof(str), "» Football « {1EB5E3}%s has joined the Football {1189AD}(/Football)", pName[playerid]);
		 SendClientMessageToAll(0x1189ADFF, str);
	     if(EventType == 6969 && EventStarted ==1 && cf == 0)
	     {
           FootballStartTime=60;
           SendClientMessageToAll(0x1189ADFF, "» Football « {1EB5E3}The Football match will start in 60 seconds");
           FootballStartTimer2=SetTimer("FootballCountdown", 1000, true);
           FootballStartTimer=SetTimer("FootballStart", 60000, false);

           fTeamScore[0]=0;
           fTeamScore[1]=0;

           fcounter=0;
           fTime=0;
           if(IsValidDynamicObject(football)) DestroyDynamicObject(football);
           football = CreateDynamicObject(1946, 1347.5692, 2150.1047, 10.3000, 0.0000, 0.0000, 0.0000, 777);
           SetDynamicObjectMaterial(football, 0, 7913, "vgnbballsign2", "eris_4", 0);
	     }
	     else if(cf == 0)
	     {
           FootballStartTime=30;
           SendClientMessageToAll(0x1189ADFF, "» Football « {1EB5E3}The Football match will start in 30 seconds");
           FootballStartTimer2=SetTimer("FootballCountdown", 1000, true);
           FootballStartTimer=SetTimer("FootballStart", 30000, false);

           fTeamScore[0]=0;
           fTeamScore[1]=0;

           fcounter=0;
           fTime=0;
           if(IsValidDynamicObject(football)) DestroyDynamicObject(football);
           football = CreateDynamicObject(1946, 1347.5692, 2150.1047, 10.3000, 0.0000, 0.0000, 0.0000, 777);
           SetDynamicObjectMaterial(football, 0, 7913, "vgnbballsign2", "eris_4", 0);
	     }
	     if(CountFootballers2() > CountFootballers1()) Footballer[playerid]=1;
		 else Footballer[playerid]=2;
		 SavePlayerCoords(playerid);
         SetPlayerPosEx(playerid, 1403.4863, 2109.2959, 16.3672, 56.7647);
         SetPlayerCameraPos(playerid, 1296.1340, 2203.8652, 44.2073);
         SetPlayerCameraLookAt(playerid, 1296.8340, 2203.1519, 43.6473);
	 }
	 return 1;
}
forward FootballStart();
public FootballStart()
{
   AllowPlaying=1;
   KillTimer(FootballStartTimer2);
   FootballStartTimer2=-1;
   new k=CountFootballers();
   if(k > 1)
   {
	   SendClientMessageToAll(0x1189ADFF, "» Football « {1EB5E3}The Football match has been started");
	   AllowPlaying=1;
   	   fKeyChange = SetTimer("Ballposition", 100, true);
       //foreach(new i : Player) TextDrawHideForPlayer(i, Fwaiting);
	   foreach(new i : Player)
	   {
		  if(Footballer[i] == 1)
		  {
		   for(new f=0; f<8; f++) PlayerTextDrawShow(i, DMpTD[i][f]);

		   SetPlayerPosEx(i, 1324.5721, 2148.6230, 11.0433, 270.1467);
		   SetPlayerSkin(i, 52);
		   SetPlayerColor(i, PlayerColors[10]);
		   SetCameraBehindPlayer(i);
		   new str[128];
		   format(str, sizeof(str), "{1189AD}» Football « {1EB5E3}You can use {1189AD}/FChat {1EB5E3}to chat with your team!");
		   SendClientMessage(i, -1, str);
		  }
		  else if(Footballer[i] == 2)
		  {
		   for(new f=0; f<8; f++) PlayerTextDrawShow(i, DMpTD[i][f]);

	       SetPlayerPosEx(i, 1371.1351, 2148.9751, 11.0378, 91.7135);
		   SetPlayerSkin(i, 51);
		   SetPlayerColor(i, PlayerColors[2]);
		   SetCameraBehindPlayer(i);
		   new str2[128];
		   format(str2, sizeof(str2), "{1189AD}» Football « {1EB5E3}You can use {1189AD}/FChat {1EB5E3}to chat with your team!");
		   SendClientMessage(i, -1, str2);
		  }
	   }
   }
   else
   {
	  KillTimer(FootballStartTimer2);
	  KillTimer(FootballStartTimer);
	  FootballStartTimer=-1;
	  FootballStartTimer2=-1;
	  SendClientMessageToAll(0x1189ADFF, "» Football « {1EB5E3}The Football match has been cancelled {1189AD}(Not enough players)");
      EndFootBall();
      //foreach(new i : Player) TextDrawHideForPlayer(i, Fwaiting);
   }
   return 1;
}
forward FootballCountdown();
public FootballCountdown()
{
     FootballStartTime--;
	 new str[128];
	 format(str, sizeof(str), "~r~The ~y~Football Match~r~ will start in~n~~y~%d Seconds", FootballStartTime);
	 if(FootballStartTime > 0)
	 {
		 foreach(new i : Player)
		 {
			  if(Footballer[i] > 0)
			  {
				SendInfoText(i, 1500, str);
			  }
		 }
	 }
	 return 1;
}

CMD:attach(playerid, params[])
{
   if(!IsAdmin(playerid, 1)) return SendMsg(playerid, 5);
   new id;
   if(sscanf(params, "u", id)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}"RED2_""RED_"» Error « {BABABA}"RED_" /attach <playerid>");
   if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
   AttachObjectTo[playerid]=id;


   new str[1024];
   strcat(str, ""cornsilk2"BigHead\n"YELLOW_"Fart\n"ORANGE_"Big Trashcan\n"lime2"Small Trashcan\n"LIGHTBLUE_"Phone Station\n"BLUE_"Coffin\n"PINK_"Egg\n"RED_"Pumpkin\n"cornsilk2"Big Parrot\n"lime2"Small Parrot\n"GREEN_"Tied Cop\n");
   strcat(str, ""BLUE_"Fire Hands\n"LIGHTBLUE_"Fire\n"LIGHTYELLOW_"Deer 1\n"PINK_"Deer 2\n"YELLOW_"Pumpkin Clown\n"ORANGE_"Trash Clown\n"cornsilk2"Donkey cart\n"YELLOW_"Huge Cop\n"BLUE_"House\n"LIGHTYELLOW_"Meathead\n"RED_"Huge Shark\n"LIGHTBLUE_"Meat hand\n"ORANGE_"Taxi\n"GRAY_"Tent\n"lime2"Tourch\n"GREEN_"Turtle\n"WHITE_"TV\n"YELLOW_"Skull head\n"ORANGE_"Dildo\n");
   strcat(str, ""cornsilk2"Hammer\n"YELLOW_"Cop Head\n"ORANGE_"Chicken Head");


   ShowPlayerDialog(playerid, 275, DIALOG_STYLE_LIST, "Attach Objects", str, "Select", "Exit");
   return 1;
}
CMD:vipcmds(playerid)
{
	if(PlayerInfo[playerid][IsVIP] == 0) return SendWarning(playerid, "Only VIP's can use this command!");
	new string[1024];
    strcat(string, "{255F17}* Free Permit {FFFFFF}- Ability to enter hunter/rhino/hydra/seasparrow without permit.\n");
    strcat(string, "{255F17}* Special Ramp {FFFFFF}- Mostly for stunting, /ramp.\n");
    strcat(string, "{255F17}* Houses - No PP {FFFFFF}- Ability to buy any house with PP without having required amount of PP.\n");
    strcat(string, "{255F17}* Ammunation discount {FFFFFF}- Ability to buy any weapons at the ammunation with a discount.\n");
    strcat(string, "{255F17}* Car dealer discount {FFFFFF}- Ability to buy any car at any car dealer with a discount.\n");
    strcat(string, "{255F17}* Teleport discount {FFFFFF}- Ability to teleport and save money with a discount.\n");
    strcat(string, "{255F17}* /Tuning {FFFFFF}- Ability to tune your car with some mods.\n");
    strcat(string, "{255F17}/AF {FFFFFF}- Anti bike fall off.\n");
    strcat(string, "{255F17}/Car2 {FFFFFF}- Spawns your second vehicle.\n");
    strcat(string, "{255F17}/SetSecondCar {FFFFFF}- Changes your second vehicle.\n");
    strcat(string, "{255F17}/Attachments {FFFFFF}- Attach some objects to yourself.\n");
    strcat(string, "{255F17}/VIPSetting {FFFFFF}- Changes your skin, spawn weapons, 3d head text and more.\n");
    strcat(string, "{255F17}/HeadText {FFFFFF}- Changes your 3d head text.\n");
    strcat(string, "{255F17}/VIPCmds {FFFFFF}- Shows the VIP Commands.\n");
    ShowPlayerDialog(playerid, 4126, DIALOG_STYLE_MSGBOX, ""LIGHTYELLOW_"GTADM - "WHITE_"VIP Commands", string, "Back", "");
    return 1;
}
CMD:attachments(playerid)
{
   if(PlayerInfo[playerid][IsVIP] == 0) return SendWarning(playerid, "Only VIP's can use this command!");
   AttachObjectTo[playerid]=playerid;


   new str[1024];
   strcat(str, ""cornsilk2"BigHead\n"YELLOW_"Fart\n"ORANGE_"Big Trashcan\n"lime2"Small Trashcan\n"LIGHTBLUE_"Phone Station\n"BLUE_"Coffin\n"PINK_"Egg\n"RED_"Pumpkin\n"cornsilk2"Big Parrot\n"lime2"Small Parrot\n"GREEN_"Tied Cop\n");
   strcat(str, ""BLUE_"Fire Hands\n"LIGHTBLUE_"Fire\n"LIGHTYELLOW_"Deer 1\n"PINK_"Deer 2\n"YELLOW_"Pumpkin Clown\n"ORANGE_"Trash Clown\n"cornsilk2"Donkey cart\n"ORANGE_"Meathand\n"GRAY_"Tent\n"lime2"Tourch\n"GREEN_"Santa Hat\n"WHITE_"TV\n"YELLOW_"Dildo\n"ORANGE_"Hammer\n");
   strcat(str, ""cornsilk2"Cop Head\n"YELLOW_"Chicken Head");


   ShowPlayerDialog(playerid, 8585, DIALOG_STYLE_LIST, "Attachments", str, "Select", "Exit");
   return 1;
}
/*
CMD:santa(playerid)
{
  SendInfoText(playerid, 3000, "~b~Enjoy your Santa Hat!");
  SetPlayerAttachedObject(playerid, 2, 19065, 2, 0.120000, 0.040000, -0.003500, 0, 100, 100, 1.4, 1.4, 1.4);
  return 1;
}
CMD:dildo(playerid)
{
  SendInfoText(playerid, 3000, "~p~Enjoy your dildo!");
  SetPlayerAttachedObject( playerid, 2, 19086, 8, -0.049768, -0.014062, -0.108385, 87.458297, 263.478149, 184.123764, 0.622413, 1.041609, 1.012785 );
  return 1;
}
CMD:parrot(playerid)
{
  SendInfoText(playerid, 3000, "~g~Enjoy your parrot!");
  SetPlayerAttachedObject( playerid, 2, 19079, 1, -0.70, 0.00, 0.00, 0.0, 0.0, 0.0, 8.90, 10.82, 9.07);
  return 1;
}*/
stock EndFootBall()
{
   fTeamScore[0]=0;
   fTeamScore[1]=0;

   fcounter=0;
   fTime=0;
   if(IsValidDynamicObject(football)) DestroyDynamicObject(football);
   football = CreateDynamicObject(1946, 1347.5692, 2150.1047, 10.3000, 0.0000, 0.0000, 0.0000, 777);
   SetDynamicObjectMaterial(football, 0, 7913, "vgnbballsign2", "eris_4", 0);
   KillTimer(fKeyChange);
   fKeyChange=-1;
   foreach(new playerid : Player)
   {
	  if(Footballer[playerid] > 0)
	  {
	  	 for(new f=0; f<8; f++) PlayerTextDrawHide(playerid, DMpTD[playerid][f]);
       	 SetPlayerVirtualWorldEX(playerid, 0);
       	 Footballer[playerid]=0;
       	 LoadPlayerCoords(playerid);
       	 SetPlayerSkin(playerid, SavedSKIN[playerid]);
       	 SetCameraBehindPlayer(playerid);
	  }
   }
}
forward MoveBallDown(Float:Tox, Float:Toy, Float:speed);
public MoveBallDown(Float:Tox, Float:Toy, Float:speed)
{
 new Float:pos[3];
 GetDynamicObjectPos(football, pos[0], pos[1], pos[2]);
 if(pos[0] != 1347.5692 && pos[1] != 2150.1047)
 MoveDynamicObject(football, Tox, Toy, 10.3000, speed, 0.0, 90.0, 15.0);
 return 1;
}
forward SecondHalf();
public SecondHalf()
{
     foreach (new i : Player) if(GetPlayerVirtualWorld(i) == 777) SendInfoText(i, 5000, "~g~Second half~n~Go!"), PlayerPlaySound(i, 3201, 0.0, 0.0, 0.0);
     fKeyChange = SetTimer("Ballposition", 100, true);
     if(IsValidDynamicObject(football)) DestroyDynamicObject(football);
     football = CreateDynamicObject(1946, 1347.5692, 2150.1047, 10.3000, 0.0000, 0.0000, 0.0000, 777);
     SetDynamicObjectMaterial(football, 0, 7913, "vgnbballsign2", "eris_4", 0);
     foreach (new i : Player)
	 {
		new team = Footballer[i];
		if(team == 1)
		{
		    SetPlayerPosEx(i, 1324.5721, 2148.6230, 11.0433, 270.1467);
		    SetPlayerSkin(i, 52);
		    SetPlayerColor(i, PlayerColors[2]);
	   		SetPlayerHealth(i, 2);
	   		ResetPlayerWeaponsEX(i);
   		}
   		else if(team == 2)
   		{
	        SetPlayerPosEx(i, 1371.1351, 2148.9751, 11.0378, 91.7135);
		    SetPlayerSkin(i, 51);
		    SetPlayerColor(i, PlayerColors[10]);
	  		SetPlayerHealth(i, 2);
	  		ResetPlayerWeaponsEX(i);
   		}
	 }
 	 return 1;

}
stock ShowTeleports(playerid)
{
  new str[1024];
  strcat(str, "/LSA\t\tLS Airport\n/LVA\t\tLV Airport\n/SFA\t\tSF Airport\n/House\t\tGo Home\n/Bank\t\tBanks around San Andreas\n/Market\t\tGTADM Market\n/Cars<1-9>\tCar Dealers\n/LS\t\tLos Santos\n/Binco\t\tBinco! Clothes Store\n/SF\t\tSan Fierro");
  strcat(str, "\n/LV\t\tLas Venturas\n/LSB\t\tLos Santos Beach\n/LB\t\tLas Barrancas\n/UFO\t\tThe Secret UFO\n/Casino1\tThe Casino of Las Venturas\n/Casino2\tCaligula's Casino\n/Casino3\tThe Four Dragons Casino");
  strcat(str, "\n/Casino4\tThe Starfish Casino\n/Chilliad\tMount Chilliad\n/TransLS\tTransfender of Los Santos\n/TransSF\tTransfender of San Fierro\n/TransLV\tTransfender of Las Venturas\n/WAA\t\tWheel Arch Angels\n/Locolow\tLoco Low Lowrider\n/AmmuLS\tAmmunation of Los Santos\n/AmmuLV\tAmmunation of Las Venturas\n/Ammusf\tAmmunation of San Fierro");
  strcat(str, "\n/Trucking1\tBlueberry's Trucking Station\n/Trucking2\tRS Haul's Trucking Station");
  ShowPlayerDialog(playerid, 2278, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM: "WHITE_"Teleport Commands", str, "Exit", "");
  return 1;
}

//==============================================================================


stock IsValidChars(name[])
{
	new len=strlen(name);
	if(len<3 || len>20)
	    return false;

	for(new i=0;i<len;i++)
	{
	    if((name[i]>='a' && name[i]<='z') || (name[i]>='A' && name[i]<='Z') || (name[i]>='0' && name[i]<='9')
	        || name[i]=='[' || name[i]==']' || name[i]=='_' || name[i]=='.' || name[i]=='@' || name[i]=='$'
			|| name[i]=='(' || name[i]==')' || name[i]=='=')
			continue;
		else
		    return false;
	}
	return true;
}

//==============================================================================
CMD:nextcs(playerid, params[])
{
 	new Id;
    if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
	if(sscanf(params, "d", Id)) return SendClientMessage(playerid, RED, ""RED2_""RED_"» Error « {BABABA}"RED_" /nextcs <MapID>"), SendClientMessage(playerid, GRAY, "Use /CsMaps to view the available CS maps");
    if(Id < 1 || Id >CS_MAPS) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Wrong Map ID"), SendClientMessage(playerid, GRAY, "Use /CsMaps to view the available CS maps");
	if(CS == 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}a CS map has already been loaded");
    if (CanCsVote[playerid]==0) return SendClientMessage( playerid, RED, ""RED_"» Error « {BABABA}You have already voted for the next CS map" );
    NextMap[Id-1]++;
	new str[128];
	format(str, sizeof(str), "» CS « Next Map Voting - %s has voted for the map \"%s\" (%d votes)", pName[playerid], CSMapPos[Id-1][CsMapName], NextMap[Id-1]);
	SendClientMessageToAll(GRAY, str);
	CanCsVote[playerid]=0;
    return 1;
}
CMD:csmaps(playerid)
{
   if(!IsAdmin(playerid, 5)) return SendMsg(playerid, 5);
   ShowPlayerDialog(playerid, 7471, DIALOG_STYLE_MSGBOX, "Counter Strike Maps", ""LIGHTYELLOW_"1. cs_iceworld\n"LIGHTYELLOW_"2. cs_detrain\n"LIGHTYELLOW_"3. Assault\n"LIGHTYELLOW_"4. cs_inferno\n"LIGHTYELLOW_"5. cs_dust\n"LIGHTYELLOW_"6. cs_island\n"LIGHTYELLOW_"7. cs_roman\n8."LIGHTYELLOW_" cs_italy\n"LIGHTYELLOW_"9. cs_station\n"LIGHTYELLOW_"10. cs_pool", "Exit", "");
   return 1;
}

CMD:cs(playerid)
{
    if((PlayerInfo[playerid][Jailed] > 0)) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in jail.");
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(EventStarted > 1 && EventType == 6971) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant join the Counter Strike during an event countdown.");
    if(IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
    if(IsInFight(playerid)) return SendMsg(playerid, 2);
    if(aduty[playerid] == 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command while on admin duty.");

    if(CS > 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}The Counter Strike has already been started");
    new count=CountCS();
    Derbyposition[playerid]=count;

    SavePlayerCoords(playerid);
    SavedSKIN[playerid]=GetPlayerSkin(playerid);
    new msg[128];
    format(msg, sizeof(msg), "» CS « {D47098}%s has joined the Counter Strike {FF0D6E}(/CS)", pName[playerid], count+1);
    SendClientMessageToAll(0xFF0D6EFF, msg);

	if(CS == 0)
	{
		 new highestid=-255, highest;
         for(new x=0; x<CS_MAPS; x++)
         {
              if(NextMap[x] > highest)
              {
                  highestid = x;
                  highest = NextMap[x];
              }
         }
         if(highestid != -255) CSMAP=highestid;
		 else CSMAP =random(CS_MAPS);
         for(new x=0; x<CS_MAPS; x++) NextMap[x]=0;
		 TextDrawSetString(CSTimeTD, "~l~--:--");
		 if(EventType == 6971 && EventStarted ==1)
	     {
           CStime=750;
           CSStartTime=60;
		   format(msg, sizeof(msg), "» CS « {D47098}Counter Strike will start in 60 seconds {FF0D6E}(Map: %s)", CSMapPos[CSMAP][CsMapName]);
		   SendClientMessageToAll(0xFF0D6EFF, msg);
           CSStartTimer = SetTimer("StartCSCount", 1000, true);
     	   CSStartTimer2 = SetTimer("StartCS", 60000, false);
     	   canhold=-255, csplanted=0, csplantedtime=0;
     	   CS=1;
	     }
	     else
	     {
           CStime=750;
           CSStartTime=30;
		   format(msg, sizeof(msg), "» CS « {D47098}Counter Strike will start in 30 seconds {FF0D6E}(Map: %s)", CSMapPos[CSMAP][CsMapName]);
		   SendClientMessageToAll(0xFF0D6EFF, msg);
           CSStartTimer = SetTimer("StartCSCount", 1000, true);
     	   CSStartTimer2 = SetTimer("StartCS", 30000, false);
     	   canhold=-255, csplanted=0, csplantedtime=0;
     	   CS=1;
	     }
	}
	for(new ad=0; ad<CS_MAPS; ad++) if(ad != CSMAP) TogglePlayerDynamicCP(playerid, CSCPs[ad], false);
    TogglePlayerDynamicCP(playerid, CSCPs[CSMAP], true);
	ResetPlayerWeaponsEX(playerid);
    if(CountTCS(2) > CountTCS(1))
	{
	  SetPVarInt(playerid, "CS", 1);
	}
	else
	{
      SetPVarInt(playerid, "CS", 2);
	}
    //TextDrawShowForPlayer(playerid, CSwaiting);
    SetPlayerVirtualWorldEX(playerid, 2101);
    HidePlayerMenu(playerid);
	TogglePlayerControllable2(playerid, 0);
	//Destroyp3D(playerid);
    CSKeyHold[playerid]=0;
    SetPlayerPos(playerid, CSMapPos[CSMAP][cscam][0],  CSMapPos[CSMAP][cscam][1],  CSMapPos[CSMAP][cscam][2]-20);
    Streamer_UpdateEx(playerid, CSMapPos[CSMAP][cscam][0],  CSMapPos[CSMAP][cscam][1],  CSMapPos[CSMAP][cscam][2]);
	SetPlayerCameraPos(playerid, CSMapPos[CSMAP][cscam][0],  CSMapPos[CSMAP][cscam][1],  CSMapPos[CSMAP][cscam][2]);
	SetPlayerCameraLookAt(playerid, CSMapPos[CSMAP][cscamlookat][0],  CSMapPos[CSMAP][cscamlookat][1],  CSMapPos[CSMAP][cscamlookat][2]);
	DisablePlayerRaceCheckpoint(playerid);
    SetTeleShow(2, 0);
	return 1;
}
stock Remove_From_CS(playerid)
{
  if(IsPlayerConnected(playerid))
  {

    HidePlayerDialog(playerid);

    for(new x=0; x<8; x++) PlayerTextDrawHide(playerid, DMpTD[playerid][x]);
    //TextDrawHideForPlayer(playerid, CSwaiting);
    TextDrawHideForPlayer(playerid, CSTimeTD);

 	if(GetPlayerState(playerid) == 9)
 	{
		TogglePlayerSpectating(playerid, false);
 	}
 	DeletePVar(playerid, "CS");
 	DeletePVar(playerid, "CS_spec");
 	DeletePVar(playerid, "CS_ks");

	ResetPlayerWeaponsEX(playerid);
    LoadPlayerCoords(playerid);
    SetPlayerSkin(playerid, SavedSKIN[playerid]);
	SetCameraBehindPlayer(playerid);
	TogglePlayerControllable2(playerid, 1);
    Createp3D(playerid);
	new gang=PlayerInfo[playerid][pGang];
	if(gang > 0) SetPlayerColor(playerid, PlayerColors[GangInfo[gang][gColor]]);
	else SetPlayerColor(playerid, PlayerColors[random(200)] );

    if(RaceStarted==0) SetPlayerRaceCheckpoint(playerid, 0, RaceInfo[RaceIDCount][StartCP][0], RaceInfo[RaceIDCount][StartCP][1], RaceInfo[RaceIDCount][StartCP][2], RaceCPs[RaceIDCount][0][0], RaceCPs[RaceIDCount][0][1], RaceCPs[RaceIDCount][0][2], 15.0);
//    Set3DText(playerid, 1);
    foreach (new d : Player)
	{
	  SetPlayerMarkerForPlayer( d, playerid, GetPlayerColor(playerid) );
	  SetPlayerMarkerForPlayer( playerid, d, GetPlayerColor(d) );
	  ShowPlayerNameTagForPlayer(playerid, d, true);
	  ShowPlayerNameTagForPlayer(d, playerid, true);
	}
	SetPlayerVirtualWorldEX(playerid, 0);
  }
}
forward StartCS2();
public StartCS2()
{
  foreach (new i : Player)
  {
	for(new x=0; x<11; x++) SetPlayerSkillLevel(i, x, 999);
	if(GetPVarInt(i, "CS"))
	{
	   TogglePlayerControllable2(i, 1);
	   if(GetPVarInt(i, "CS") == 1) SetPlayerColor(i, 0x1B87E0FF);
	   if(GetPVarInt(i, "CS") == 2) SetPlayerColor(i, 0xFF0000FF);
       PlayAudioStreamForPlayer(i, "https://dl.dropbox.com/u/52869044/CounterStrike_GTADM/counter_strike_go.mp3");
	   SendInfoText(i, 2000, "~g~Go Go Go");
	   SetPVarInt(i, "CS_ks", PlayerInfo[i][currentks]);
	   if(GetPVarInt(i, "CS") == 1)
	   	ShowPlayerDialog(i, 7854, DIALOG_STYLE_LIST, "Choose Your Weaponpack", ""cornsilk2"WeaponsPack#1"lime2" Desert Eagle + M4 + Grenades\n"cornsilk2"WeaponsPack#2"lime2" MP5 + M4 + Sniper\n"cornsilk2"WeaponsPack#3"lime2" Shotgun + M4 + Grenades\n"cornsilk2"WeaponsPack#4"lime2" Country Rifle + M4 + Grenades\n"cornsilk2"WeaponsPack#5"lime2" Combat Shotgun + M4 + MP5\n"cornsilk2"WeaponsPack#6"lime2" SmokeBombs + M4 + Desert Eagle", "Choose", "");
	   else if(GetPVarInt(i, "CS") == 2)
 		 	ShowPlayerDialog(i, 7854, DIALOG_STYLE_LIST, "Choose Your Weaponpack", ""cornsilk2"WeaponsPack#1"lime2" Desert Eagle + AK47 + Grenades\n"cornsilk2"WeaponsPack#2"lime2" MP5 + AK47 + Sniper\n"cornsilk2"WeaponsPack#3"lime2" Shotgun + AK47 + Grenades\n"cornsilk2"WeaponsPack#4"lime2" Country Rifle + AK47 + Grenades\n"cornsilk2"WeaponsPack#5"lime2" Combat Shotgun + AK47 + MP5\n"cornsilk2"WeaponsPack#6"lime2" SmokeBombs + AK47 + Desert Eagle", "Choose", "");
	}
  }
}
forward StartCS();
public StartCS()
{
    KillTimer(CSStartTimer);
    CSStartTimer=-1;
	new count =CountCS();
    if(count < 2)
	{
	  EndCS();
      SendClientMessageToAll(0xFF0D6EFF, "» CS « {D47098}Counter Strike has been cancelled {FF0D6E}(Not enough players)");
      foreach (new i : Player)
	  {
	     CanCsVote[i]=1;
		 if(GetPVarInt(i, "CS")) Remove_From_CS(i);
	  }
	}
	else
	{
	  CSUpdateTimer=SetTimer("CSUpdate", 1000, true);
      CS = 2;
      SendClientMessageToAll(0xFF0D6EFF, "» CS « {D47098}Counter Strike has been started");
      SetTimer("StartCS2", 3000, false);
      foreach (new i : Player)
	  {
         CanCsVote[i]=1;
		 new a= GetPVarInt(i, "CS");
		 if(a > 0)
		 {
            PlayAudioStreamForPlayer(i, "https://dl.dropbox.com/u/52869044/CounterStrike_GTADM/prepare.mp3");
            foreach (new d : Player)
			{

			  if(GetPVarInt(d, "CS") != a) SetPlayerMarkerForPlayer( d, i, GetPlayerColor( i ) & 0xFFFFFF00 ), SetPlayerMarkerForPlayer( i, d, GetPlayerColor( d ) & 0xFFFFFF00 ), ShowPlayerNameTagForPlayer(d, i, false), ShowPlayerNameTagForPlayer(i, d, false);
			  else if(GetPVarInt(d, "CS") == a) SetPlayerMarkerForPlayer( i, d, 0x228F22FF ), SetPlayerMarkerForPlayer( d, i, 0x228F22FF ), ShowPlayerNameTagForPlayer(d, i, true), ShowPlayerNameTagForPlayer(i, d, true);
			}
			new bakk[68];
			format(bakk, sizeof(bakk), "~r~Terrorists: ~r~~h~%d", CountTCS(2));
            PlayerTextDrawSetStringEX(i, DMpTD[i][3], bakk);
			format(bakk, sizeof(bakk), "~b~Counters: ~b~~h~%d", CountTCS(1));
            PlayerTextDrawSetStringEX(i, DMpTD[i][4], bakk);

            PlayerTextDrawSetStringEX(i, DMpTD[i][1], "_");
            PlayerTextDrawSetStringEX(i, DMpTD[i][5], "_");
            PlayerTextDrawSetStringEX(i, DMpTD[i][7], "~p~Counter Strike");
            for(new x=0; x<8; x++) PlayerTextDrawShow(i, DMpTD[i][x]);

            //TextDrawHideForPlayer(i, CSwaiting);
			SetCameraBehindPlayer(i);
	        if(a == 1)
            {
              SendClientMessage(i, 0xD47098FF, "---------------------------------------------------------");
              SendClientMessage(i, 0xFF0D6EFF, "You are in the Counter Terrorist team - use {D47098}/cschat {FF0D6E}to talk with your team!");
              SendClientMessage(i, 0xFF0D6EFF, "Your goal is to stop the Terrorists team from planting the bomb.");
              SendClientMessage(i, 0xFF0D6EFF, "If the Terrorist team has successfully planted the bomb before the countdown, your team will lose the game.");
              SendClientMessage(i, 0xD47098FF, "---------------------------------------------------------");
	          Streamer_UpdateEx(i, CSMapPos[CSMAP][cspos][0],  CSMapPos[CSMAP][cspos][1],  CSMapPos[CSMAP][cspos][2]);
	          TeleportPlayer(i, CSMapPos[CSMAP][cspos][0],  CSMapPos[CSMAP][cspos][1],  CSMapPos[CSMAP][cspos][2], CSMapPos[CSMAP][cspos][3], 0, false);
              SetPlayerColor(i, 0x1B87E0FF);
			  csteam1[i]=1;
			  SetPlayerTeam(i, 71);
			  SetPlayerSkin(i, 285);
		      Destroyp3D(i);
	        }
	        else if(a == 2)
	        {
              SendClientMessage(i, 0xD47098FF, "---------------------------------------------------------");
              SendClientMessage(i, 0xFF0D6EFF, "You are in the Terrorists team - use {D47098}/cschat {FF0D6E}to talk with your team");
              SendClientMessage(i, 0xFF0D6EFF, "Your goal is to plant the bomb in the base.");
              SendClientMessage(i, 0xFF0D6EFF, "If the time passes without planting the bomb, your team will lose the game.");
              SendClientMessage(i, 0xD47098FF, "---------------------------------------------------------");
              Streamer_UpdateEx(i, CSMapPos[CSMAP][cs2pos][0],  CSMapPos[CSMAP][cs2pos][1],  CSMapPos[CSMAP][cs2pos][2]);
	          TeleportPlayer(i, CSMapPos[CSMAP][cs2pos][0],  CSMapPos[CSMAP][cs2pos][1],  CSMapPos[CSMAP][cs2pos][2], CSMapPos[CSMAP][cs2pos][3], 0, false);
              SetPlayerColor(i, 0xFF0000FF);
              csteam2[i]=1;
              SetPlayerTeam(i, 72);
              SetPlayerSkin(i, 179);
              Destroyp3D(i);
	        }
		    SetPlayerHealth(i, 100);
		    SetPlayerArmour(i, 100);
			TogglePlayerControllable2(i, 0);
		 }
	  }
	}
	return 1;
}

forward CSUpdate();
public CSUpdate()
{
	   new count=CountCS();
	   new count2=CountTCS(1);
	   new count3=CountTCS(2);
	   if(count ==0)
	   {
	         EndCS();
             SendClientMessageToAll(0xFF0D6EFF, "» CS « {D47098}Counter Strike has been cancelled {FF0D6E}(Not enough players)");
	   }

	   else if(count3 == 0)
	   {
			 new str[150];
			 format(str, sizeof(str), "» CS « {D47098}Counter Terrorists Team has won the Counter Strike");
             SendClientMessageToAll(0xFF0D6EFF, str);
             if(EventType==6971 && EventStarted==1)
             {
			   foreach(new a : Player)
			   {
                 if((GetPVarInt(a, "CS") == 1) || (GetPVarInt(a, "CS") == 3))
                 {
	               CSCT[a]=1;
                 }
			   }
			 }
             foreach (new i : Player)
             {
				 if((GetPVarInt(i, "CS") == 1) || (GetPVarInt(i, "CS") == 3))
				 {
                   new str2[128];
                   if(EventType==6971 && EventStarted==1) EventWinner2(), format(str2, sizeof(str2), "» Event « {CDF590}Counter Terrorists have won the Event!"), SendClientMessageToAll(0xE8AF02FF, str2);
                   SendInfoText(i, 5000, "~g~Winners!");
                   ScoreTDupdate(i, 5);
                   Remove_From_CS(i);
                   csteam1[i]=0;
				   csteam2[i]=0;
				   SetPlayerTeam(i, NO_TEAM);
                  // Createp3D(i);
				   PlayAudioStreamForPlayer(i, "https://dl.dropbox.com/u/52869044/CounterStrike_GTADM/ct_win.mp3");
				   PlayerInfo[i][CSWins]++;
				   new qqr[128];
				   format(qqr, sizeof(qqr), "UPDATE `users` SET `CSWINS` = %d WHERE `UserID` = '%d'", PlayerInfo[i][CSWins], PlayerInfo[i][UserID]);
			       mysql_query(GTADM, qqr);
			       if(PlayerInfo[i][CSWins]==30) GiveMedal(i, 42);
				 }
				 else if((GetPVarInt(i, "CS") == 2) || (GetPVarInt(i, "CS") == 4))
				 {
                     SendInfoText(i, 5000, "~r~Losers!");
                     ScoreTDupdate(i, 1);
                     Remove_From_CS(i);
                     csteam1[i]=0;
					 csteam2[i]=0;
					 SetPlayerTeam(i, NO_TEAM);
                   //  Createp3D(i);
					 PlayAudioStreamForPlayer(i, "https://dl.dropbox.com/u/52869044/CounterStrike_GTADM/ct_win.mp3");
				 }
             }
             EndCS();

	   }
	   else if(count2 == 0)
	   {
			 new str[150];
			 format(str, sizeof(str), "» CS « {D47098}Terrorists Team has won the Counter Strike");
             SendClientMessageToAll(0xFF0D6EFF, str);
             if(EventType==6971 && EventStarted==1)
             {
			   foreach(new a : Player)
			   {
                 if((GetPVarInt(a, "CS") == 2) || (GetPVarInt(a, "CS") == 4))
		         {
		           CSTer[a]=1;
		         }
			   }
			 }
             foreach (new i : Player)
             {
				 if((GetPVarInt(i, "CS") == 2) || (GetPVarInt(i, "CS") == 4))
				 {
                   new str3[128];
                   if(EventType==6971 && EventStarted==1) EventWinner2(), format(str3, sizeof(str3), "» Event « {CDF590}Terrorists have won the Event!"), SendClientMessageToAll(0xE8AF02FF, str3);
                   SendInfoText(i, 5000, "~g~Winners!");
                   ScoreTDupdate(i, 5);
                   Remove_From_CS(i);
                   csteam1[i]=0;
				   csteam2[i]=0;
				   SetPlayerTeam(i, NO_TEAM);
				   SetPlayerSkin(i, SavedSKIN[i]);
                 //  Createp3D(i);
				   PlayerInfo[i][CSWins]++;
				   new qqr[128];
				   format(qqr, sizeof(qqr), "UPDATE `users` SET `CSWINS` = %d WHERE `UserID` = '%d'", PlayerInfo[i][CSWins], PlayerInfo[i][UserID]);
			       mysql_query(GTADM, qqr);
			       if(PlayerInfo[i][CSWins]==30) GiveMedal(i, 42);
				 }
				 else if((GetPVarInt(i, "CS") == 1) || (GetPVarInt(i, "CS") == 3))
				 {
                     SendInfoText(i, 5000, "~r~Losers!");
                     ScoreTDupdate(i, 1);
                     Remove_From_CS(i);
					 csteam1[i]=0;
					 csteam2[i]=0;
                     SetPlayerTeam(i, NO_TEAM);
					 SetPlayerSkin(i, SavedSKIN[i]);
                     //Createp3D(i);
				 }
             }
             EndCS();
	   }

	   else
	   {
		 if(CStime > 0)
		 {
            CStime--;
            new str[30];
            format(str, sizeof(str), "~g~Time left: ~y~%s", TimeConvert(CStime));
	        foreach (new i : Player) if(GetPVarInt(i, "CS")) PlayerTextDrawSetString(i, DMpTD[i][5], str);
	     }
	     else if(CStime <= 0)
         {
	         if(EventType==6971 && EventStarted==1)
             {
			   foreach(new a : Player)
			   {
                 if((GetPVarInt(a, "CS") == 1))
                 {
	               CSCT[a]=1;
                 }
			   }
			 }
	 	     new str[150];
			 format(str, sizeof(str), "» CS « {D47098}Counter Terrorists Team has won the Counter Strike");
             SendClientMessageToAll(0xFF0D6EFF, str);
             foreach (new i : Player)
             {
				 if(GetPVarInt(i, "CS") == 1)
				 {
				   new str4[128];
                   if(EventType==6971 && EventStarted==1) EventWinner2(), format(str4, sizeof(str4), "» Event « {CDF590}Counter Terrorists have won the Event!"), SendClientMessageToAll(0xE8AF02FF, str4);
                   SendInfoText(i, 5000, "~g~Winners!");
                   ScoreTDupdate(i, 5);
                   Remove_From_CS(i);
                   csteam1[i]=0;
				   csteam2[i]=0;
				   SetPlayerTeam(i, NO_TEAM);
                 //  Createp3D(i);
				   PlayAudioStreamForPlayer(i, "https://dl.dropbox.com/u/52869044/CounterStrike_GTADM/ct_win.mp3");
				   PlayerInfo[i][CSWins]++;
				   new qqr[128];
				   format(qqr, sizeof(qqr), "UPDATE `users` SET `CSWINS` = %d WHERE `UserID` = '%d'", PlayerInfo[i][CSWins], PlayerInfo[i][UserID]);
			       mysql_query(GTADM, qqr);
			       if(PlayerInfo[i][CSWins]==30) GiveMedal(i, 42);
				 }
				 else if(GetPVarInt(i, "CS") == 2)
				 {
                     SendInfoText(i, 5000, "~r~Losers!");
                     ScoreTDupdate(i, 1);
                     csteam1[i]=0;
					 csteam2[i]=0;
					 SetPlayerTeam(i, NO_TEAM);
                     Remove_From_CS(i);
                    // Createp3D(i);
  				     PlayAudioStreamForPlayer(i, "https://dl.dropbox.com/u/52869044/CounterStrike_GTADM/ct_win.mp3");
				 }
			     else if((GetPVarInt(i, "CS") == 4))
			     {
			          SendInfoText(i, 5000, "~r~Losers!");
                      ScoreTDupdate(i, 1);
                      csteam1[i]=0;
					  csteam2[i]=0;
					  SetPlayerTeam(i, NO_TEAM);
					  TogglePlayerSpectating(i, false);
                      Remove_From_CS(i);
                  //    Createp3D(i);
  				      PlayAudioStreamForPlayer(i, "https://dl.dropbox.com/u/52869044/CounterStrike_GTADM/ct_win.mp3");
			     }
			     else if((GetPVarInt(i, "CS") == 3))
			     {
                      SendInfoText(i, 5000, "~g~Winners!");
					  TogglePlayerSpectating(i, false);
                      ScoreTDupdate(i, 5);
                      Remove_From_CS(i);
                    //  Createp3D(i);
                      csteam1[i]=0;
					  csteam2[i]=0;
					  SetPlayerTeam(i, NO_TEAM);
  				      PlayAudioStreamForPlayer(i, "https://dl.dropbox.com/u/52869044/CounterStrike_GTADM/ct_win.mp3");
				      PlayerInfo[i][CSWins]++;
				      new qqr[128];
				      format(qqr, sizeof(qqr), "UPDATE `users` SET `CSWINS` = %d WHERE `UserID` = '%d'", PlayerInfo[i][CSWins], PlayerInfo[i][UserID]);
			          mysql_query(GTADM, qqr);
			          if(PlayerInfo[i][CSWins]==30) GiveMedal(i, 42);
			     }
             }
             EndCS();
         }
	   }
	   if(csplanted == 1)
	   {
	     csplantedtime++;
	     new btime[50];
	     if(csplantedtime < 45)
		 {
		   format(btime, sizeof(btime), "~y~Bomb Planted:~n~~r~%d", 45-csplantedtime);
	       foreach (new i : Player)
		   {
		      if(GetPVarInt(i, "CS"))
			  {
			    SendInfoText(i, 1500, btime);
			    if(csplantedtime == 1) PlayAudioStreamForPlayer(i, "https://dl.dropbox.com/u/52869044/CounterStrike_GTADM/bomb_planted_sms.mp3");
			  }
		   }
		 }
	     else if(csplantedtime == 45)
	     {
			    new str[150];
			    format(str, sizeof(str), "» CS « {D47098}Terrorists Team has won the Counter Strike");
                SendClientMessageToAll(0xFF0D6EFF, str);
                foreach (new i : Player)
                {
			   	 if(GetPVarInt(i, "CS") == 2)
			     {
                   SendInfoText(i, 5000, "~g~Winners!");
                   ScoreTDupdate(i, 5);
			       SetPlayerCameraPos(i, CSMapPos[CSMAP][csCPPos][0], CSMapPos[CSMAP][csCPPos][1], CSMapPos[CSMAP][csCPPos][2]+20);
			       SetPlayerCameraLookAt(i, CSMapPos[CSMAP][csCPPos][0], CSMapPos[CSMAP][csCPPos][1], CSMapPos[CSMAP][csCPPos][2]);
				   PlayAudioStreamForPlayer(i, "https://dl.dropbox.com/u/52869044/CounterStrike_GTADM/bomb_expolde.mp3");
				   PlayerInfo[i][CSWins]++;
				   csteam1[i]=0;
		           csteam2[i]=0;
		           SetPlayerTeam(i, NO_TEAM);
				   new qqr[128];
				   format(qqr, sizeof(qqr), "UPDATE `users` SET `CSWINS` = %d WHERE `UserID` = '%d'", PlayerInfo[i][CSWins], PlayerInfo[i][UserID]);
			       mysql_query(GTADM, qqr);
			       if(PlayerInfo[i][CSWins]==30) GiveMedal(i, 42);
			      // Createp3D(i);
			     }
			     else if(GetPVarInt(i, "CS") == 1)
			     {
			         SendInfoText(i, 5000, "~r~Losers!");
			         ScoreTDupdate(i, 1);
			        // Createp3D(i);
			         csteam1[i]=0;
					 csteam2[i]=0;
					 SetPlayerTeam(i, NO_TEAM);
			         SetPlayerCameraPos(i, CSMapPos[CSMAP][csCPPos][0], CSMapPos[CSMAP][csCPPos][1], CSMapPos[CSMAP][csCPPos][2]+20);
			         SetPlayerCameraLookAt(i, CSMapPos[CSMAP][csCPPos][0], CSMapPos[CSMAP][csCPPos][1], CSMapPos[CSMAP][csCPPos][2]);
				     PlayAudioStreamForPlayer(i, "https://dl.dropbox.com/u/52869044/CounterStrike_GTADM/bomb_expolde.mp3");
			     }
			     else if((GetPVarInt(i, "CS") == 3))
			     {
			          SendInfoText(i, 5000, "~r~Losers!");
			          ScoreTDupdate(i, 1);
			         // Createp3D(i);
	                  csteam1[i]=0;
					  csteam2[i]=0;
					  SetPlayerTeam(i, NO_TEAM);
			          TogglePlayerSpectating(i, false);
			          SetPlayerCameraPos(i, CSMapPos[CSMAP][csCPPos][0], CSMapPos[CSMAP][csCPPos][1], CSMapPos[CSMAP][csCPPos][2]+20);
			          SetPlayerCameraLookAt(i, CSMapPos[CSMAP][csCPPos][0], CSMapPos[CSMAP][csCPPos][1], CSMapPos[CSMAP][csCPPos][2]);
  				      PlayAudioStreamForPlayer(i, "https://dl.dropbox.com/u/52869044/CounterStrike_GTADM/bomb_expolde.mp3");
			     }
			     else if((GetPVarInt(i, "CS") == 4))
			     {
                      SendInfoText(i, 5000, "~g~Winners!");
                      ScoreTDupdate(i, 5);
                      csteam1[i]=0;
					  csteam2[i]=0;
					  SetPlayerTeam(i, NO_TEAM);
					  TogglePlayerSpectating(i, false);
					 // Createp3D(i);
			          SetPlayerCameraPos(i, CSMapPos[CSMAP][csCPPos][0], CSMapPos[CSMAP][csCPPos][1], CSMapPos[CSMAP][csCPPos][2]+20);
			          SetPlayerCameraLookAt(i, CSMapPos[CSMAP][csCPPos][0], CSMapPos[CSMAP][csCPPos][1], CSMapPos[CSMAP][csCPPos][2]);
  				      PlayAudioStreamForPlayer(i, "https://dl.dropbox.com/u/52869044/CounterStrike_GTADM/bomb_expolde.mp3");
				      PlayerInfo[i][CSWins]++;
				      new qqr[128];
				      format(qqr, sizeof(qqr), "UPDATE `users` SET `CSWINS` = %d WHERE `UserID` = '%d'", PlayerInfo[i][CSWins], PlayerInfo[i][UserID]);
			          mysql_query(GTADM, qqr);
			          if(PlayerInfo[i][CSWins]==30) GiveMedal(i, 42);
			     }
                }
                SetTimer("CS_Exp", 1000, false);
                SetTimer("CS_Exp", 2000, false);
                SetTimer("CS_Exp", 3000, false);
                SetTimer("CS_Exp", 4000, false);
                SetTimer("End_CS", 5000, false);
	     }
	   }
	   new bakk[80];
	   new bakk2[80];
	   format(bakk, sizeof(bakk), "~r~Terrorists: ~r~~h~%d", count3);
       format(bakk2, sizeof(bakk2), "~b~Counters: ~b~~h~%d", count2);

       foreach (new i : Player)
       {
		if(GetPVarInt(i, "CS"))
		{
	      PlayerTextDrawSetStringEX(i, DMpTD[i][3], bakk);
          PlayerTextDrawSetStringEX(i, DMpTD[i][4], bakk2);
		}
		if(GetPVarInt(i, "CS") == 2 && csplanted == 0)
	    {
            new Keys, ud, lr, gg=0;
            GetPlayerKeys(i, Keys, ud, lr);
		    if(IsPlayerInDynamicCP(i, CSCPs[CSMAP]))
		    {
			  if(Keys & KEY_SECONDARY_ATTACK)
			  {
			   if(canhold == -255 || canhold == i)
			   {
                CSKeyHold[i]++;
                gg=1;
                if(CSKeyHold[i] == 1)
				{
				  canhold = i;
                  ApplyAnimation(i, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
				  //ApplyAnimation(i, "BOMBER", "BOM_Plant", 3.0, 1, 0, 0, 0, 5000, 1);
				}
				new str[128];
				format(str, sizeof(str), "~r~%s~y~ is planting the bomb -~r~ %d", pName[i], 5-CSKeyHold[i]);
				GetPlayerPos(i, BombX[i], BombY[i], BombZ[i]);
                GetXYInFrontOfPlayer(i, BombX[i], BombY[i], 0.7);
                BombObject[i] = CreateObject(1252, BombX[i], BombY[i], BombZ[i] - 0.85, 270, 0, 0);
				ApplyAnimation(i, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);

                if(CSKeyHold[i] == 5)
                {
                     csplanted=1;
			      	 format(str, sizeof(str), "» CS « {FF0D6E}%s has planted the bomb!", pName[i]);
			      	 SendClientMessageToAll(0xD47098FF, str);
			      	 ClearAnimations(i, 1);

                }
                else foreach (new x : Player) if(GetPVarInt(x, "CS")) SendpInfo(x, str, 800);
			   }
			  }
		    }
		    if(gg != 1)
		    {
		        if(CSKeyHold[i] > 0)
                {
                    CSKeyHold[i]=0;
                    canhold=-1;
                    ClearAnimations(i, 1);
                }
		    }
	    }
	    else if(GetPVarInt(i, "CS") == 1 && csplanted == 1)
	    {
            new Keys, ud, lr, gg=0;
            GetPlayerKeys(i, Keys, ud, lr);
		    if(IsPlayerInDynamicCP(i, CSCPs[CSMAP]))
		    {
			  if(Keys & KEY_SECONDARY_ATTACK)
			  {
                CSKeyHold[i]++;
                gg=1;
                if(CSKeyHold[i] == 1)
				{
                  canhold = i;
                  ApplyAnimation(i, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
                  //ApplyAnimation(i, "BOMBER", "BOM_Plant", 2.0, 1, 0, 0, 0, 10000, 1);

				}
				new str[128];
				format(str, sizeof(str), "~r~%s~y~ is defusing the bomb -~r~ %d", pName[i], 15-CSKeyHold[i]);
				ApplyAnimation(i, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
                if(CSKeyHold[i] == 15)
                {
                     csplanted=0;
                     csplantedtime=0;
			      	 format(str, sizeof(str), "» CS « {FF0D6E}%s has successfully Defused the bomb!", pName[i]);
			      	 SendClientMessageToAll(0xD47098FF, str);
			      	 ClearAnimations(i, 1);
			      	 DestroyObject(BombObject[i]);////////////

		             format(str, sizeof(str), "» CS « {D47098}Counter Terrorists Team has won the Counter Strike");
                     SendClientMessageToAll(0xFF0D6EFF, str);
                     foreach (new u : Player)
                     {
			   	       if(GetPVarInt(u, "CS") == 1)
			           {
                          SendInfoText(u, 5000, "~g~Winners!");
                          ScoreTDupdate(u, 5);
			              SetPlayerCameraPos(u, CSMapPos[CSMAP][csCPPos][0], CSMapPos[CSMAP][csCPPos][1], CSMapPos[CSMAP][csCPPos][2]+20);
			              SetPlayerCameraLookAt(u, CSMapPos[CSMAP][csCPPos][0], CSMapPos[CSMAP][csCPPos][1], CSMapPos[CSMAP][csCPPos][2]);
                          PlayAudioStreamForPlayer(u, "https://dl.dropbox.com/u/52869044/CounterStrike_GTADM/difiusing.mp3");
				          PlayerInfo[u][CSWins]++;
				          csteam1[i]=0;
					      csteam2[i]=0;
					      SetPlayerTeam(i, NO_TEAM);
				          new qqr[128];
				          format(qqr, sizeof(qqr), "UPDATE `users` SET `CSWINS` = %d WHERE `UserID` = '%d'", PlayerInfo[u][CSWins], PlayerInfo[u][UserID]);
			              mysql_query(GTADM, qqr);
			              if(PlayerInfo[u][CSWins]==30) GiveMedal(u, 42);
			           }
			   	       else if(GetPVarInt(u, "CS") == 2)
			           {
			            SendInfoText(u, 5000, "~r~Losers!");
			            ScoreTDupdate(u, 1);
			            SetPlayerCameraPos(u, CSMapPos[CSMAP][csCPPos][0], CSMapPos[CSMAP][csCPPos][1], CSMapPos[CSMAP][csCPPos][2]+20);
			            SetPlayerCameraLookAt(u, CSMapPos[CSMAP][csCPPos][0], CSMapPos[CSMAP][csCPPos][1], CSMapPos[CSMAP][csCPPos][2]);
                        PlayAudioStreamForPlayer(u, "https://dl.dropbox.com/u/52869044/CounterStrike_GTADM/difiusing.mp3");
			           }
			   	       else if((GetPVarInt(u, "CS") == 4))
			           {
			             SendInfoText(u, 5000, "~r~Losers!");
			             ScoreTDupdate(u, 1);
			             csteam1[i]=0;
					     csteam2[i]=0;
					     SetPlayerTeam(i, NO_TEAM);
					     TogglePlayerSpectating(u, false);
			             SetPlayerCameraPos(u, CSMapPos[CSMAP][csCPPos][0], CSMapPos[CSMAP][csCPPos][1], CSMapPos[CSMAP][csCPPos][2]+20);
			             SetPlayerCameraLookAt(u, CSMapPos[CSMAP][csCPPos][0], CSMapPos[CSMAP][csCPPos][1], CSMapPos[CSMAP][csCPPos][2]);
                         PlayAudioStreamForPlayer(u, "https://dl.dropbox.com/u/52869044/CounterStrike_GTADM/difiusing.mp3");
			   	       }
			   	       else if((GetPVarInt(u, "CS") == 3))
			   	       {
                         SendInfoText(u, 5000, "~g~Winners!");
                         ScoreTDupdate(u, 5);
                         csteam1[i]=0;
					     csteam2[i]=0;
					     SetPlayerTeam(i, NO_TEAM);
				      	 TogglePlayerSpectating(u, false);
			             SetPlayerCameraPos(u, CSMapPos[CSMAP][csCPPos][0], CSMapPos[CSMAP][csCPPos][1], CSMapPos[CSMAP][csCPPos][2]+20);
			             SetPlayerCameraLookAt(u, CSMapPos[CSMAP][csCPPos][0], CSMapPos[CSMAP][csCPPos][1], CSMapPos[CSMAP][csCPPos][2]);
                         PlayAudioStreamForPlayer(u, "https://dl.dropbox.com/u/52869044/CounterStrike_GTADM/difiusing.mp3");
			             if(PlayerInfo[u][CSWins]==30) GiveMedal(u, 42);
			   	       }
                     }
                     SetTimer("End_CS", 3000, false);
                }
                else foreach (new x : Player) if(GetPVarInt(x, "CS")) SendpInfo(x, str, 800);
			  }
			}
		    if(gg != 1)
		    {
		        if(CSKeyHold[i] > 0)
                {
                    CSKeyHold[i]=0;
                    canhold=-1;
                    ClearAnimations(i, 1);
                }
		    }

	    }
	   }
	   return 1;
}

forward StartCSCount();
public StartCSCount()
{
  if(CSStartTime > 0)
  {
      new count = CountCS();
	  CSStartTime--;
      new str[128];
	  format(str, sizeof(str), "~r~Counter strike ~p~starts~n~in ~g~%d ~y~seconds", CSStartTime);
	  foreach(new i : Player)
	  {
        if(GetPVarInt(i, "CS"))
	    {
          PlayerTextDrawHide(i, pInfoTD[i]);
		  SendInfoText(i, 1000, str);
		}
	  }
	  if(count == 0)
	  {
		   EndCS();
           SendClientMessageToAll(0xFF0D6EFF, "» CS « {D47098}Counter Strike start has been cancelled {FF0D6E}(Not enough players)");
           foreach(new i : Player) CanCsVote[i]=1;
           foreach(new i : Player) csteam1[i]=0;
		   foreach(new i : Player) csteam2[i]=0;
		   foreach(new i : Player) SetPlayerTeam(i, NO_TEAM);
      }
  }
  else
  {
     KillTimer(CSStartTimer);
     CSStartTimer=-1;

  }
  return 1;
}
forward End_CS();
public End_CS()
{
  EndCS();
  foreach (new i : Player)
  {
    if(GetPVarInt(i, "CS")) Remove_From_CS(i), SetCameraBehindPlayer(i);
  }
  return 1;
}
forward CS_Exp();
public CS_Exp()
{
    CreateExplosion(CSMapPos[CSMAP][csCPPos][0]+random(5), CSMapPos[CSMAP][csCPPos][1]+random(5), CSMapPos[CSMAP][csCPPos][2], 6, 20.0);
	return 1;
}

stock EndCS()
{
   CS = 0;
   KillTimer(CSStartTimer);
   KillTimer(CSStartTimer2);
   KillTimer(CSUpdateTimer);
   CSStartTimer=-1;
   CSStartTimer2=-1;
   CSUpdateTimer=-1;
   CStime=250;
}


stock CountCS()
{
	new sst=0;
	foreach (new i : Player)
	{
	   if(GetPVarInt(i, "CS"))
	   sst++;
	}
	return sst;
}

stock CountTCS(team)
{
	new sst=0;
	foreach (new i : Player)
	{
	   if(GetPVarInt(i, "CS") == team)
	   sst++;
	}
	return sst;
}
//===============================================================================

stock GetGunGameLevel(playerid)
{
	   new lvl;
       switch(GetPVarInt(playerid, "pDMKills"))
       {
		  case 0..4:lvl=1;
		  case 5..9:lvl=2;
		  case 10..14:lvl=3;
		  case 15..19:lvl=4;
		  case 20..24:lvl=5;
		  case 25..29:lvl=6;
		  case 30..34:lvl=7;
		  case 35..39:lvl=8;
		  case 40..44:lvl=9;
		  case 45..49:lvl=10;
		  case 50..54:lvl=11;
		  case 55..59:lvl=12;
		  case 60:lvl=13;
       }
	   return lvl;
}
stock SetPlayerCameraLookAtEx(playerid, Float:cx, Float:cy, Float:cz)
{
  SetPlayerCameraLookAt(playerid, cx, cy, cz);
  pcx[playerid]=cx;
  pcy[playerid]=cy;
  pcz[playerid]=cz;
  Streamer_UpdateEx(playerid, cx, cy, cz);
}
stock InterpolateCameraLookAtEx(playerid, Float:cx, Float:cy, Float:cz, Float:cx2, Float:cy2, Float:cz2, ctime)
{
  InterpolateCameraLookAt(playerid, cx, cy, cz, cx2, cy2, cz2, ctime);
  pcx[playerid]=cx2;
  pcy[playerid]=cy2;
  pcz[playerid]=cz2;
  Streamer_UpdateEx(playerid, cx2, cy2, cz2);

}
stock InterpolateCameraPosEx(playerid, Float:cx, Float:cy, Float:cz, Float:cx2, Float:cy2, Float:cz2, ctime)
{
  InterpolateCameraPos(playerid, cx, cy, cz, cx2, cy2, cz2, ctime);
  camX[playerid]=cx2;
  camY[playerid]=cy2;
  camZ[playerid]=cz2;
  Streamer_UpdateEx(playerid, cx2, cy2, cz2);

}
stock SetPlayerCameraPosEx(playerid, Float:cx, Float:cy, Float:cz)
{
  SetPlayerCameraPos(playerid, cx, cy, cz);
  camX[playerid]=cx;
  camY[playerid]=cy;
  camZ[playerid]=cz;
  Streamer_UpdateEx(playerid, cx, cy, cz);
}


//==============================================================================
//||                              MySQL querries
//||
//==============================================================================
forward MySQL_Account_Check(playerid);
public MySQL_Account_Check(playerid)
{
    new rows, fields, data, data2[80], Float:data3;
    cache_get_row_count(rows);
    cache_get_field_count(fields);
	if(!rows)
    {
    	SetPlayerCameraPosEx(playerid, 1221.2258, 695.7006, 23.3862);
    	SetPlayerCameraLookAtEx(playerid, 1222.0439, 696.2729, 23.1812);
        ShowPlayerDialog(playerid, DIALOG_REGISTER, DIALOG_STYLE_PASSWORD, ""LIGHTRED_"Registration", "Your name is not registered in our database\n\n"WHITE_"Enter your password below to register a new account:", "Register", "");
    	Streamer_UpdateEx(playerid, 1221.2258, 695.7006, 23.386);
    }
    else
    {
	   new ip_[20], gpci_[80], last;
	   cache_get_value_index_int(0, fields-1, last);
       cache_get_value_index_int(0, 0, PlayerInfo[playerid][UserID]);
       cache_get_value_index_int(0, 6, PlayerInfo[playerid][pCash]);
       cache_get_value_index_int(0, 7, PlayerInfo[playerid][pScore]);
       cache_get_value_index_int(0, 8, p_A_Level[playerid]);

       cache_get_value_index_int(0, 9, PlayerInfo[playerid][pKills]);
       cache_get_value_index_int(0, 10, PlayerInfo[playerid][pDeaths]);
       cache_get_value_index_int(0, 11, PlayerInfo[playerid][pVip]);
       cache_get_value_index_int(0, 12, PlayerInfo[playerid][pRaceAdmin]);
       cache_get_value_index_int(0, 13, PlayerInfo[playerid][pCwAdmin]);
       cache_get_value_index(0, 14, PlayerInfo[playerid][HeadText]);
       if(strlen(PlayerInfo[playerid][HeadText]) < 3) PlayerInfo[playerid][HeadText][0]='\0';

       cache_get_value_index_int(0, 15, PlayerInfo[playerid][pHours]);
       cache_get_value_index_int(0, 16, PlayerInfo[playerid][pMins]);
       cache_get_value_index_int(0, 17, PlayerInfo[playerid][pHouse]);
       cache_get_value_index_int(0, 18, PlayerInfo[playerid][pCar]);
       cache_get_value_index_int(0, 19, PlayerInfo[playerid][pGang]);
       cache_get_value_index_int(0, 20, PlayerInfo[playerid][pGangRank]);
       cache_get_value_index_int(0, 21, PlayerInfo[playerid][pBank]);
       cache_get_value_index_int(0, 22, PlayerInfo[playerid][pExported]);
       cache_get_value_index_int(0, 23, PlayerInfo[playerid][Ramp]);
       cache_get_value_index_int(0, 24, PlayerInfo[playerid][pDriftW]);
       cache_get_value_index_int(0, 25, PlayerInfo[playerid][pWDerby]);
       cache_get_value_index_int(0, 26, PlayerInfo[playerid][pWLms]);
       cache_get_value_index_int(0, 27, PlayerInfo[playerid][pWpOurs]);
       cache_get_value_index_int(0, 28, PlayerInfo[playerid][pWRace]);
       cache_get_value_index_int(0, 29, PlayerInfo[playerid][pWDuel]);
       cache_get_value_index_int(0, 30, PlayerInfo[playerid][HS]);
       cache_get_value_index_int(0, 31, PlayerInfo[playerid][vDamage]);
       cache_get_value_index_int(0, 32, PlayerInfo[playerid][rTestWon]);
       cache_get_value_index_int(0, 33, PlayerInfo[playerid][pBeatUp]);
       cache_get_value_index_int(0, 34, PlayerInfo[playerid][ksHighScore]);
       cache_get_value_index_int(0, 35, PlayerInfo[playerid][pGWinz]);
       cache_get_value_index_int(0, 36, PlayerInfo[playerid][pGWlost]);
       cache_get_value_index_int(0, 37, PlayerInfo[playerid][pRrecord]);
       cache_get_value_index_int(0, 38, PlayerInfo[playerid][pDrecord]);
       cache_get_value_index_int(0, 39, PlayerInfo[playerid][pBounty]);
       cache_get_value_index_int(0, 40, PlayerInfo[playerid][PfOutW]);
       cache_get_value_index_int(0, 41, PlayerInfo[playerid][currentks]);
       cache_get_value_index_int(0, 42, PlayerInfo[playerid][pVipSkin]);
       cache_get_value_index_int(0, 43, PlayerInfo[playerid][pVipJob]);
       cache_get_value_index_int(0, 44, PlayerInfo[playerid][pVipWeapon1]);
       cache_get_value_index_int(0, 45, PlayerInfo[playerid][pVipWeapon2]);
       cache_get_value_index_int(0, 46, PlayerInfo[playerid][pVipWeapon3]);
       cache_get_value_index_int(0, 47, PlayerInfo[playerid][pVipAmmo1]);
       cache_get_value_index_int(0, 48, PlayerInfo[playerid][pVipAmmo2]);
       cache_get_value_index_int(0, 49, PlayerInfo[playerid][pVipAmmo3]);
       cache_get_value_index_int(0, 50, PlayerInfo[playerid][Muted]);
       cache_get_value_index_int(0, 51, PlayerInfo[playerid][Jailed]);

       cache_get_value_index_int(0, 78, PlayerInfo[playerid][Drunk]);
       cache_get_value_index_int(0, 79, PlayerInfo[playerid][pCook]);

       cache_get_value_index_int(0, 80, PlayerInfo[playerid][VipItems][0]);
       cache_get_value_index_int(0, 81, PlayerInfo[playerid][VipItems][1]);
       cache_get_value_index_int(0, 82, PlayerInfo[playerid][VipItems][2]);
       cache_get_value_index_int(0, 83, PlayerInfo[playerid][VipItems][3]);


       cache_get_value_index_int(0, 84, PlayerInfo[playerid][premiumItems][0]);
       cache_get_value_index_int(0, 85, PlayerInfo[playerid][premiumItems][1]);
       cache_get_value_index_int(0, 86, PlayerInfo[playerid][premiumItems][2]);
       cache_get_value_index_int(0, 87, PlayerInfo[playerid][premiumItems][3]);
       cache_get_value_index_int(0, 195, PlayerInfo[playerid][premiumItems][4]);

       cache_get_value_index_int(0, 88, PlayerInfo[playerid][pSecV]);
       cache_get_value_index_int(0, 89, PlayerInfo[playerid][pSecNitro]);
       cache_get_value_index_int(0, 90, PlayerInfo[playerid][pSecWheel]);
       cache_get_value_index_int(0, 91, PlayerInfo[playerid][pSecVc1]);
       cache_get_value_index_int(0, 92, PlayerInfo[playerid][pSecVc2]);
       cache_get_value_index_int(0, 93, PlayerInfo[playerid][IsVIP]);

       cache_get_value_index_int(0, 97, hweapons[playerid][storein][0]);
       cache_get_value_index_int(0, 98, hweapons[playerid][storein][1]);
       cache_get_value_index_int(0, 99, hweapons[playerid][storein][2]);
       cache_get_value_index_int(0, 100, hweapons[playerid][storein][3]);
       cache_get_value_index_int(0, 101, hweapons[playerid][storein][4]);
       cache_get_value_index_int(0, 102, hweapons[playerid][storein][5]);
       cache_get_value_index_int(0, 103, hweapons[playerid][storein][6]);
       cache_get_value_index_int(0, 104, hweapons[playerid][storein][7]);
       cache_get_value_index_int(0, 105, hweapons[playerid][storein][8]);
       cache_get_value_index_int(0, 106, hweapons[playerid][storein][9]);
       cache_get_value_index_int(0, 107, hweapons[playerid][storein][10]);
       cache_get_value_index_int(0, 108, hweapons[playerid][storein][11]);
       cache_get_value_index_int(0, 109, hweapons[playerid][storein][12]);
       cache_get_value_index_int(0, 110, hweapons[playerid][storein][13]);
       cache_get_value_index_int(0, 111, hweapons[playerid][storein][14]);
       cache_get_value_index_int(0, 112, hweapons[playerid][storein][15]);
       cache_get_value_index_int(0, 196, hweapons[playerid][storein][16]);

       cache_get_value_index_int(0, 113, pMods[playerid][0]);
       cache_get_value_index_int(0, 114, pMods[playerid][1]);
       cache_get_value_index_int(0, 115, pMods[playerid][2]);
       cache_get_value_index_int(0, 116, pMods[playerid][3]);
       cache_get_value_index_int(0, 117, pMods[playerid][4]);
       cache_get_value_index_int(0, 118, pMods[playerid][5]);
       cache_get_value_index_int(0, 119, pMods[playerid][6]);
       cache_get_value_index_int(0, 120, pMods[playerid][7]);
       cache_get_value_index_int(0, 121, pMods[playerid][8]);
       cache_get_value_index_int(0, 122, pMods[playerid][9]);
       cache_get_value_index_int(0, 123, pMods[playerid][10]);
       cache_get_value_index_int(0, 124, pMods[playerid][11]);
       cache_get_value_index_int(0, 125, pMods[playerid][12]);
       cache_get_value_index_int(0, 126, pMods[playerid][13]);
       cache_get_value_index_int(0, 127, pMods[playerid][14]);
       cache_get_value_index_int(0, 128, pMods[playerid][15]);
       cache_get_value_index_int(0, 129, pMods[playerid][16]);
       cache_get_value_index_int(0, 130, pMods[playerid][17]);
       cache_get_value_index_int(0, 131, pMods[playerid][18]);
       cache_get_value_index_int(0, 132, pMods[playerid][19]);

       cache_get_value_index_int(0, 133, NEON[playerid]);
       cache_get_value_index(0, 134, Player_Info[playerid][numplate]);
       cache_get_value_index_int(0, 135, Player_Info[playerid][Spoiler]);
       cache_get_value_index_int(0, 136, Player_Info[playerid][Ex]);
       cache_get_value_index_int(0, 137, Player_Info[playerid][SS]);
       cache_get_value_index_int(0, 138, Player_Info[playerid][Fbumps]);
       cache_get_value_index_int(0, 139, Player_Info[playerid][Rbumps]);
       cache_get_value_index_int(0, 140, Player_Info[playerid][Hood]);
       cache_get_value_index_int(0, 141, PlayerInfo[playerid][Mission]);

       cache_get_value_index_int(0, 142, PlayerInfo[playerid][DDWins]);
       cache_get_value_index_int(0, 143, PlayerInfo[playerid][CSWins]);
       cache_get_value_index_int(0, 144, PlayerInfo[playerid][Heals]);
       cache_get_value_index_int(0, 145, PlayerInfo[playerid][Arrests]);
       cache_get_value_index_int(0, 146, PlayerInfo[playerid][pBombed]);
       cache_get_value_index_int(0, 147, Player_Info[playerid][Wheel]);

       cache_get_value_index(0, 148, PlayerClothes[playerid][HatString]);
       cache_get_value_index(0, 149, PlayerClothes[playerid][GlassString]);

       cache_get_value_index_int(0, 150, PlayerInfo[playerid][pFS]);
       cache_get_value_index_int(0, 151, pSpeedo[playerid]);
       cache_get_value_index_int(0, 152, pPhone[playerid]);
       cache_get_value_index(0, 153, data2);
	   sscanf(data2, "p<|>s[10]s[12]", ContactID[playerid][0], ContactName[playerid][0]);
       cache_get_value_index(0, 154, data2);
	   sscanf(data2, "p<|>s[10]s[12]", ContactID[playerid][1], ContactName[playerid][1]);
       cache_get_value_index(0, 155, data2);
	   sscanf(data2, "p<|>s[10]s[12]", ContactID[playerid][2], ContactName[playerid][2]);
       cache_get_value_index(0, 156, data2);
	   sscanf(data2, "p<|>s[10]s[12]", ContactID[playerid][3], ContactName[playerid][3]);
       cache_get_value_index(0, 157, data2);
	   sscanf(data2, "p<|>s[10]s[12]", ContactID[playerid][4], ContactName[playerid][4]);
       cache_get_value_index(0, 158, data2);
	   sscanf(data2, "p<|>s[10]s[12]", ContactID[playerid][5], ContactName[playerid][5]);
       cache_get_value_index(0, 159, data2);
	   sscanf(data2, "p<|>s[10]s[12]", ContactID[playerid][6], ContactName[playerid][6]);

       cache_get_value_index_int(0, 160, pWallpaper[playerid]);
       cache_get_value_index_int(0, 161, pRingTone[playerid]);
	   cache_get_value_index(0, 162, PlayerInfo[playerid][StatsMSG]);
	   cache_get_value_index_int(0, 163, PlayerInfo[playerid][pSpeedR]);
	   cache_get_value_index_int(0, 164, HideShit[playerid]);

	   cache_get_value_index_int(0, 165, PlayerInfo[playerid][PDrugSp]);
	   cache_get_value_index_int(0, 166, PlayerInfo[playerid][pEventWon]);
	   cache_get_value_index_int(0, 167, data);
	   if(data == 1)
	   {
		SetPVarInt(playerid, "BlockedPM", true);
	   }
	   cache_get_value_index_int(0, 168, data);
	   if(data == 1)
	   {
		SetPVarInt(playerid, "TeleportsBlock", true);
	   }
	   cache_get_value_index_int(0, 169, PlayerInfo[playerid][pOurAdmin]);

	   cache_get_value_index(0, 170, RconPass[playerid]);
	   cache_get_value_index_int(0, 171, IsRCON[playerid]);
	   cache_get_value_index(0, 172, AdminPass[playerid]);

	   cache_get_value_index_int(0, 173, pEXP[playerid][combat]);
	   cache_get_value_index_int(0, 174, pEXP[playerid][fist]);
	   cache_get_value_index_int(0, 175, pEXP[playerid][hitpoint]);
	   cache_get_value_index_int(0, 176, pEXP[playerid][drugdealing]);
	   cache_get_value_index_int(0, 177, pEXP[playerid][driving]);
	   cache_get_value_index_int(0, 178, pEXP[playerid][gangster]);
	   cache_get_value_index_int(0, 179, pEXP[playerid][medicine]);
	   cache_get_value_index_int(0, 180, pEXP[playerid][justice]);
	   cache_get_value_index_int(0, 181, pLevel[playerid][combat]);
	   cache_get_value_index_int(0, 182, pLevel[playerid][fist]);
	   cache_get_value_index_int(0, 183, pLevel[playerid][hitpoint]);
	   cache_get_value_index_int(0, 184, pLevel[playerid][drugdealing]);
	   cache_get_value_index_int(0, 185, pLevel[playerid][driving]);
	   cache_get_value_index_int(0, 186, pLevel[playerid][gangster]);
	   cache_get_value_index_int(0, 187, pLevel[playerid][medicine]);
	   cache_get_value_index_int(0, 188, pLevel[playerid][justice]);
	   cache_get_value_index_int(0, 189, PlayerInfo[playerid][HouseFix]);
	   cache_get_value_index_int(0, 190, PlayerInfo[playerid][pWCTF]);
	   cache_get_value_index_int(0, 191, PlayerInfo[playerid][SumoWinz]);
	   cache_get_value_index_int(0, 192, PlayerInfo[playerid][PoolWon]);
	   cache_get_value_index_int(0, 193, ClanTag[playerid]);

       cache_get_value_index_int(0, 197, BlockAsk[playerid]);
	   cache_get_value_index_int(0, 198, HitSound[playerid]);
       cache_get_value_index_int(0, 199, PlayerInfo[playerid][GGWins]);
       cache_get_value_index_int(0, 200, PlayerInfo[playerid][FBWins]);
       cache_get_value_index_int(0, 201, PlayerInfo[playerid][HayWins]);
       cache_get_value_index_int(0, 202, PlayerInfo[playerid][MGWins]);
       cache_get_value_index_int(0, 203, PlayerInfo[playerid][TTTWins]);
       cache_get_value_index_int(0, 204, attach[playerid]);//attachments
       cache_get_value_index_int(0, 205, specramp[playerid]);//special ramp
       cache_get_value_index_int(0, 206, damagetxds[playerid]);//damage txds
       cache_get_value_index_int(0, 207, PlayerInfo[playerid][pTrucking]);
       cache_get_value_index_int(0, 208, PlayerInfo[playerid][pOutRunz]);
       cache_get_value_index_int(0, 209, PlayerInfo[playerid][blowjobs]);
       cache_get_value_index_int(0, 210, PlayerInfo[playerid][carsrepaired]);
       cache_get_value_index_int(0, 211, PlayerInfo[playerid][bountiesearned]);
       cache_get_value_index_int(0, 212, PlayerInfo[playerid][diveswon]);
       cache_get_value_index_int(0, 213, antifallvip[playerid]);
       cache_get_value_index_int(0, 214, freepermit[playerid]);
       cache_get_value_index_int(0, 215, Jonny[playerid]);
       cache_get_value_index_int(0, 216, PlayerInfo[playerid][COWins]);
       cache_get_value_index_int(0, 217, PlayerInfo[playerid][vipexpiresin]);
       cache_get_value_index_int(0, 218, PlayerInfo[playerid][FCWins]);
       cache_get_value_index_int(0, 219, HFA[playerid]);
       cache_get_value_index_int(0, 220, PlayerInfo[playerid][readcmds]);
       cache_get_value_index_int(0, 221, PlayerInfo[playerid][readgchat]);
       cache_get_value_index_int(0, 222, PlayerInfo[playerid][readvchat]);
       cache_get_value_index_int(0, 223, PlayerInfo[playerid][SRWins]);
       cache_get_value_index_int(0, 224, PlayerInfo[playerid][TileWins]);

       cache_get_value_index(0, 4, ip_);
       cache_get_value_index(0, 5, gpci_);
       if(!strcmp(ip_, pIP(playerid)) && !strcmp(gpci_, pGPCI(playerid)))
       {
		  if(last > 0)
		  {
              cache_get_value_index_float(0, 53, data3), SetPVarFloat(playerid, "x", data3);
              cache_get_value_index_float(0, 54, data3), SetPVarFloat(playerid, "y", data3);
              cache_get_value_index_float(0, 55, data3), SetPVarFloat(playerid, "z", data3);
              cache_get_value_index_float(0, 56, data3), SetPVarFloat(playerid, "a", data3);
              cache_get_value_index_int(0, 57, data), SetPVarInt(playerid, "skin", data);
              cache_get_value_index_int(0, 58, data), SetPVarInt(playerid, "class", data);
              cache_get_value_index_int(0, 59, data), SetPVarInt(playerid, "W1", data);
              cache_get_value_index_int(0, 60, data), SetPVarInt(playerid, "W2", data);
              cache_get_value_index_int(0, 61, data), SetPVarInt(playerid, "W3", data);
              cache_get_value_index_int(0, 62, data), SetPVarInt(playerid, "W4", data);
              cache_get_value_index_int(0, 63, data), SetPVarInt(playerid, "W5", data);
              cache_get_value_index_int(0, 64, data), SetPVarInt(playerid, "W6", data);
              cache_get_value_index_int(0, 65, data), SetPVarInt(playerid, "W7", data);
              cache_get_value_index_int(0, 66, data), SetPVarInt(playerid, "W8", data);
              cache_get_value_index_int(0, 67, data), SetPVarInt(playerid, "A1", data);
              cache_get_value_index_int(0, 68, data), SetPVarInt(playerid, "A2", data);
              cache_get_value_index_int(0, 69, data), SetPVarInt(playerid, "A3", data);
              cache_get_value_index_int(0, 70, data), SetPVarInt(playerid, "A4", data);
              cache_get_value_index_int(0, 71, data), SetPVarInt(playerid, "A5", data);
              cache_get_value_index_int(0, 72, data), SetPVarInt(playerid, "A6", data);
              cache_get_value_index_int(0, 73, data), SetPVarInt(playerid, "A7", data);
              cache_get_value_index_int(0, 74, data), SetPVarInt(playerid, "A8", data);
              //last_login
              cache_get_value_index_float(0, 75, data3), SetPVarFloat(playerid, "Health", data3);
              cache_get_value_index_float(0, 76, data3), SetPVarFloat(playerid, "Armour", data3);
              cache_get_value_index_int(0, 77, data), SetPVarInt(playerid, "interior", data);
              SetPVarInt(playerid, "Auto_Login", true);
              WelcomeText(playerid);
              LoginPlayer(playerid, 1);
		  }
		  else ShowLogin(playerid);
       }
       else ShowLogin(playerid);
    }
    return 1;
}
forward OnPlayerLogin(playerid);
public OnPlayerLogin(playerid)
{
    new rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);
    if(!rows)
    {
            PassCount[playerid]++;
            if(PassCount[playerid] >= 3) KickEX(playerid, "Login Failed", -255);
            else
            {
	            new Dialog[256];
	            format(Dialog, sizeof(Dialog), "You have entered an incorrect password\nIf you are not the owner of this account please rejoin with another name\n\n"LIGHTYELLOW_"Account: "WHITE_"%s\n\n{0059FF}Type your password below:\n{0059FF}tries left %d/3", pName[playerid], PassCount[playerid]);
	            ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, "{0059FF}Login", Dialog, "Login", "Quit");
			}
	}
	else
	{
 	 new outpass[50];
	 GetPVarString(playerid, "pPasss", outpass, 50);
	 new INI:File2 = INI_Open("Passwords.ini");
	 INI_WriteString(File2, pName[playerid], outpass);
	 INI_Close(File2);
     LoginPlayer(playerid, 0);
     OnPlayerRequestClass(playerid, 0);
	}
    return 1;
}
forward GangKick(playerid, kicked[]);
public GangKick(playerid, kicked[])
{

    new rows, fields, GANG=-255, RANK=-1;
    cache_get_row_count(rows);
    cache_get_field_count(fields);
    if(!rows)
    {
		SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This player is not in your gang");
    }
	else
	{
		cache_get_value_name_int(0, "Gang", GANG);
        cache_get_value_name_int(0, "GangRank", RANK);
	    if(GANG != PlayerInfo[playerid][pGang])  SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This player is not in your gang");
        else if(RANK >= PlayerInfo[playerid][pGangRank]) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant kick a gang member with equal or higher rank");
		else
		{
			 new str[128], g=PlayerInfo[playerid][pGang];
			 format(str, sizeof(str), "UPDATE `users` SET `Gang` = -255, `GangRank` = 0 WHERE `Name` = '%s'", kicked);
             mysql_query(GTADM, str);
             foreach (new i : Player)
             {
               if(!strcmp(kicked, pName[i], false))
               {
                  PlayerInfo[i][pGang] = -255;
                  SetPlayerColor( i, PlayerColors[random(200)] );
                  SendClientMessage(i, ORANGE, "{AA8202}» Gang action «{FFC307} You have been kicked out from your gang");
                  pInGW[i]=0;
               }
             }
             GangInfo[g][gMembers]--;
             new str2[128];
             format(str2, sizeof(str2), "{AA8202}» Gang action «{FFC307} %s has been kicked from the gang by %s", kicked, pName[playerid]);
             foreach(new x : Player) if(PlayerInfo[x][pGang] == g) SendClientMessage(x, ORANGE, str2);
			 format(str, sizeof(str), "UPDATE `gangs` SET `Members` = %d WHERE `GangID` = '%d'", GangInfo[g][gMembers], GangInfo[g][ID]);
             mysql_query(GTADM, str);
        }
	}
	return 1;
}

forward GangLeave(playerid, g);
public GangLeave(playerid, g)
{
		new adra[26], str[128], rows, fields;
        cache_get_row_count(rows);
        cache_get_field_count(fields);
        cache_get_value_index(0, 0, adra);

        format(GangInfo[g][leader], 24, "%s", adra);
        format(str, sizeof(str), "{AA8202}» Gang action «{FFC307} %s is the new leader of your gang", adra);
        foreach (new i : Player)
		{
		   if(PlayerInfo[i][pGang] == g) SendClientMessage(i, ORANGE, str);
		   if(!strcmp(pName[i], adra)) PlayerInfo[i][pGangRank] = 4;
		}
        format(str, sizeof(str), "UPDATE `users` SET `GangRank` = 4 WHERE `Name` = '%s'", adra);
        mysql_query(GTADM, str);
        format(str, sizeof(str), "UPDATE `gangs` SET `Leader` = '%s' WHERE `GangID` = '%d'", adra, g);
        mysql_query(GTADM, str);
		return 1;
}

forward GangLeader(playerid, ranked[]);
public GangLeader(playerid, ranked[])
{

    new rows, fields, GANG=-255, RANK=-255;
    cache_get_row_count(rows);
    cache_get_field_count(fields);
    if(!rows)
    {
		SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This player is not in your gang");
    }
	else
	{
		cache_get_value_name_int(0, "Gang", GANG);
        cache_get_value_name_int(0, "GangRank", RANK);
	    if(GANG != PlayerInfo[playerid][pGang])  SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This player is not in your gang");
        else if(RANK >= PlayerInfo[playerid][pGangRank]) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant rank a gang member with equal or higher rank");
		else
		{
			 new str[128];
			 format(str, sizeof(str), "UPDATE `users` SET `GangRank` = %d WHERE `Name` = '%s'", 4, ranked);
             mysql_query(GTADM, str);
		}
        foreach (new i : Player) if(strcmp(ranked, pName[i], true) == 0) PlayerInfo[i][pGangRank] = 4;

        new str2[128];
        format(str2, sizeof(str2), "{AA8202}» Gang action «{FFC307} %s is now the new leader of your gang", ranked);
        foreach(new x : Player) if(PlayerInfo[x][pGang] == PlayerInfo[playerid][pGang]) SendClientMessage(x, ORANGE, str2);

        format(str2, sizeof(str2), "UPDATE `users` SET `GangRank` = 3 WHERE `Name` = '%s'", pName[playerid]);
        mysql_query(GTADM, str2);
		format(GangInfo[GANG][leader], 24, "%s", ranked);
		PlayerInfo[playerid][pGangRank]=3;

        format(str2, sizeof(str2), "UPDATE `gangs` SET `Leader` = '%s' WHERE `Leader` = '%s'", ranked, pName[playerid]);
        mysql_query(GTADM, str2);

	}
	return 1;
}

forward GangRank(playerid, ranked[], rank);
public GangRank(playerid, ranked[], rank)
{

    new rows, fields, GANG=-255, RANK=-255;
    cache_get_row_count(rows);
    cache_get_field_count(fields);
    if(!rows)
    {
		SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This player is not in your gang");
    }
	else
	{
		cache_get_value_name_int(0, "Gang", GANG);
        cache_get_value_name_int(0, "GangRank", RANK);
	    if(GANG != PlayerInfo[playerid][pGang])  SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This player is not in your gang");
        else if(RANK >= PlayerInfo[playerid][pGangRank]) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant rank a gang member with equal or higher rank");
		else
		{
			new str[128];
			format(str, sizeof(str), "UPDATE `users` SET `GangRank` = %d WHERE `Name` = '%s'", rank, ranked);
            mysql_query(GTADM, str);
	        foreach (new i : Player) if(strcmp(ranked, pName[i], true) == 0) PlayerInfo[i][pGangRank] = rank;

	        new str2[128];
	        format(str2, sizeof(str2), "{AA8202}» Gang action «{FFC307} %s has been set to rank %d by %s", ranked, rank, pName[playerid]);
	        foreach(new x : Player) if(PlayerInfo[x][pGang] == PlayerInfo[playerid][pGang]) SendClientMessage(x, ORANGE, str2);
		}
	}
	return 1;
}

forward ChangePassword(playerid, pass[]);
public ChangePassword(playerid, pass[])
{
    new rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);
    if(!rows)
    {
		SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Error - incorrect password");
    }
	else
	{
          new Query[256];
          format(Query, sizeof(Query), "UPDATE `users` SET `Password` = md5('%s') WHERE `Name` = '%s'", pass, pName[playerid]);
          mysql_query(GTADM, Query);
          new str[128];
          format(str, sizeof(str), "Your password has been set to %s", pass);
          ShowPlayerDialog(playerid, 22573, DIALOG_STYLE_MSGBOX, "Change Password", str, "Exit", "");
	}
	return 1;
}

forward ChangeName(playerid, name[]);
public ChangeName(playerid, name[])
{
    new rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);
    if(!rows)
    {
	  new str[256];
      SetPVarString(playerid, "RequestedName", name);
      format(str, sizeof(str), "» Name « "LIGHTBLUE_"A changename request has been sent to online admins with the name "LIGHTBLUE_"\"%s\"", name);
      SendClientMessage(playerid, BLUE, str);
      format(str, sizeof(str), "» Changename «  Request received: "LIGHTBLUE_"%s (%d) ==> "LIGHTBLUE_"%s", pName[playerid], playerid, name);
      foreach(new x : Player) if(IsAdmin(x, 1)) SendClientMessage(x, BLUE, str);
    }
	else
	{
	   SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This name is already taken");
	}
	return 1;
}

forward SetName(playerid, renamed, name[]);
public SetName(playerid, renamed, name[])
{
    new rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);
    if(rows > 0) SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This name is already taken");
	else
	{
		if(GetPVarInt(renamed, "HiddenEX"))
		{
             SetPVarInt(renamed, "Hidden", true);
			 SetPVarString(renamed, "HiddenName", pName[renamed]);
			 new str[128];

             format(str, sizeof(str), "{F81414}«» {3399ff}%s (%d) {ACACAC}has left the server {FFAF00}[%d/%d] {ACACAC}(Crashed)", pName[playerid], playerid, CountPlayers(playerid), pmax), SendClientMessageToAll(GRAY, str);
			 SetTimerEx("ComeBack", 3000, false, "i", playerid);
		}
		RenamePlayer(playerid, renamed, name);
	}
	DeletePVar(playerid, "HiddenEX");
	return 1;
}
forward ComeBack(playerid);
public ComeBack(playerid)
{
    new plrIP[16];
    GetPlayerIp(playerid, plrIP, sizeof(plrIP));
    new str1[128], str_[128];


    format(str1, sizeof(str1), "{6EF83C}«» {3399ff}%s{ACACAC} has joined the GTADM Server {FFAF00}[%d/%d]", pName[playerid], Iter_Count(Player), pmax);
    format(str_, sizeof(str_), "{6EF83C}«» {3399ff}%s{ACACAC} has joined the GTADM Server | Jamaica - 208.138.36.66 {FFAF00}[%d/%d]", pName[playerid], Iter_Count(Player), pmax);
    foreach (new i : Player)
	{
      if(PlayerInfo[i][pAdmin] < 1) SendClientMessage(i, GRAY, str1);
      else if(PlayerInfo[i][pAdmin] >= 1) SendClientMessage(i, GRAY, str_);
	}
	return 1;
}

forward LoadServerSetting();
public LoadServerSetting()
{
       new rows, fields;
       cache_get_row_count(rows);
       cache_get_field_count(fields);
	   if(rows > 0)
	   {
          cache_get_value_index_int(0, 0, DisableAutoShoot);
          cache_get_value_index(0, 1, Team1Name);
          cache_get_value_index(0, 2, Team2Name);
	   }
	   return 1;

}

forward LoadleCanon();
public LoadleCanon()
{
  new rows, fields;
  cache_get_row_count(rows);
  cache_get_field_count(fields);
  if(rows > 0)
  {
     cache_get_value_index(0, 1, CanonRecordPlayers[0]);
     cache_get_value_index(0, 2, CanonRecordPlayers[1]);
     cache_get_value_index(0, 3, CanonRecordPlayers[2]);
     cache_get_value_index(0, 4, CanonRecordPlayers[3]);
     cache_get_value_index(0, 5, CanonRecordPlayers[4]);
     cache_get_value_index_float(0, 6, CanonRecordDistance[0]);
     cache_get_value_index_float(0, 7, CanonRecordDistance[1]);
     cache_get_value_index_float(0, 8, CanonRecordDistance[2]);
     cache_get_value_index_float(0, 9, CanonRecordDistance[3]);
     cache_get_value_index_float(0, 10, CanonRecordDistance[4]);
  }
  return 1;
}

#if defined USEDRIFT

forward LoadDriftRecords();
public LoadDriftRecords()
{

  new rows, fields;
  new rid;
  cache_get_row_count(rows);
  cache_get_field_count(fields);
  for(new x=0; x<rows; x++)
  {
        cache_get_value_index_int(x, 0, rid);
        if(rid < MAX_DRIFTS && rid >= 0)
        {
         cache_get_value_index(x, 1, DriftRecords[rid][driftTOP1]);
         cache_get_value_index(x, 2, DriftRecords[rid][D_Top1Car]);
         cache_get_value_index(x, 3, DriftRecords[rid][driftTOP2]);
         cache_get_value_index(x, 4, DriftRecords[rid][D_Top2Car]);
         cache_get_value_index(x, 5, DriftRecords[rid][driftTOP3]);
         cache_get_value_index(x, 6, DriftRecords[rid][D_Top3Car]);
         cache_get_value_index(x, 7, DriftRecords[rid][driftTOP4]);
         cache_get_value_index(x, 8, DriftRecords[rid][D_Top4Car]);
         cache_get_value_index(x, 9, DriftRecords[rid][driftTOP5]);
         cache_get_value_index(x, 10, DriftRecords[rid][D_Top5Car]);
         cache_get_value_index_int(x, 11, DriftRecords[rid][driftTOP][0]);
         cache_get_value_index_int(x, 12, DriftRecords[rid][driftTOP][1]);
         cache_get_value_index_int(x, 13, DriftRecords[rid][driftTOP][2]);
         cache_get_value_index_int(x, 14, DriftRecords[rid][driftTOP][3]);
         cache_get_value_index_int(x, 15, DriftRecords[rid][driftTOP][4]);
        }
  }

  return 1;
}
#endif
forward LoadsRaceRecords();
public LoadsRaceRecords()
{

  new rows, fields;
  new rid;
  cache_get_row_count(rows);
  cache_get_field_count(fields);
  for(new x=0; x<rows; x++)
  {
        cache_get_value_index_int(x, 0, rid);
        if(rid < MAX_sRACES && rid >= 0)
        {
         cache_get_value_index(x, 1, sRaceRecords[rid][Top1Player]);
         cache_get_value_index(x, 2, sRaceRecords[rid][Top2Player]);
         cache_get_value_index(x, 3, sRaceRecords[rid][Top3Player]);
         cache_get_value_index(x, 4, sRaceRecords[rid][Top4Player]);
         cache_get_value_index(x, 5, sRaceRecords[rid][Top5Player]);
         cache_get_value_index_int(x, 6, sRaceRecords[rid][toptime][0]);
         cache_get_value_index_int(x, 7, sRaceRecords[rid][toptime][1]);
         cache_get_value_index_int(x, 8, sRaceRecords[rid][toptime][2]);
         cache_get_value_index_int(x, 9, sRaceRecords[rid][toptime][3]);
         cache_get_value_index_int(x, 10, sRaceRecords[rid][toptime][4]);
        }
  }
  return 1;

}
forward LoadRaceRecords();
public LoadRaceRecords()
{

  new rows, fields;
  new rid;
  cache_get_row_count(rows);
  cache_get_field_count(fields);
  for(new x=0; x<rows; x++)
  {
        cache_get_value_index_int(x, 0, rid);
        if(rid < MAX_RACES && rid > -1)
        {
         cache_get_value_index(x, 1, RaceRecords[rid][Top1Player]);
         cache_get_value_index(x, 2, RaceRecords[rid][Top2Player]);
         cache_get_value_index(x, 3, RaceRecords[rid][Top3Player]);
         cache_get_value_index(x, 4, RaceRecords[rid][Top4Player]);
         cache_get_value_index(x, 5, RaceRecords[rid][Top5Player]);
         cache_get_value_index_int(x, 6, RaceRecords[rid][toptime][0]);
         cache_get_value_index_int(x, 7, RaceRecords[rid][toptime][1]);
         cache_get_value_index_int(x, 8, RaceRecords[rid][toptime][2]);
         cache_get_value_index_int(x, 9, RaceRecords[rid][toptime][3]);
         cache_get_value_index_int(x, 10, RaceRecords[rid][toptime][4]);
         cache_get_value_index(x, 11, RaceRecords[rid][Top1Car]);
         cache_get_value_index(x, 12, RaceRecords[rid][Top2Car]);
         cache_get_value_index(x, 13, RaceRecords[rid][Top3Car]);
         cache_get_value_index(x, 14, RaceRecords[rid][Top4Car]);
         cache_get_value_index(x, 15, RaceRecords[rid][Top5Car]);
        }
  }
  return 1;
}

forward LoadpOurRecords();
public LoadpOurRecords()
{
  new rows, fields;
  new pid;
  cache_get_row_count(rows);
  cache_get_field_count(fields);
  for(new x=0; x<rows; x++)
  {
        cache_get_value_index_int(x, 0, pid);
        if(pid < 50 && pid >= 0)
        {
         cache_get_value_index(x, 1, pOurRecords[pid][Top1Player]);
         cache_get_value_index(x, 2, pOurRecords[pid][Top2Player]);
         cache_get_value_index(x, 3, pOurRecords[pid][Top3Player]);
         cache_get_value_index(x, 4, pOurRecords[pid][Top4Player]);
         cache_get_value_index(x, 5, pOurRecords[pid][Top5Player]);
         cache_get_value_index_int(x, 6, pOurRecords[pid][toptime][0]);
         cache_get_value_index_int(x, 7, pOurRecords[pid][toptime][1]);
         cache_get_value_index_int(x, 8, pOurRecords[pid][toptime][2]);
         cache_get_value_index_int(x, 9, pOurRecords[pid][toptime][3]);
         cache_get_value_index_int(x, 10, pOurRecords[pid][toptime][4]);
        }
  }
  return 1;
}

/*
forward ShowGangMembers(playerid, gang);
public ShowGangMembers(playerid, gang)
{
	new string[1024], rows, fields;
	new name[24], rank;
    cache_get_row_count(rows);
    cache_get_field_count(fields);
	for(new x=0; x<rows; x++)
	{
       cache_get_value_index(x, 0, name);
       cache_get_value_index_int(x, 1, rank);
	   if(IspOnline(name) == 1) format(string, sizeof(string), "%s\n{59E01B}%s \t\t\t{BAF5CA}Rank:%d", string, name, rank);
	   else format(string, sizeof(string), "%s\n{CF3E40}%s \t\t\t{F5BABB}Rank:%d", string, name, rank);
	   format(PlayerGangShow[playerid][x], 30, "%s", name);
	}
   	if(gang==PlayerInfo[playerid][pGang] && gang>0 && PlayerInfo[playerid][pGangRank] >= 3) ShowPlayerDialog(playerid, 10124, DIALOG_STYLE_LIST, GangInfo[gang][Name], string, "Manage", "Close");
	else ShowPlayerDialog(playerid, 10224, DIALOG_STYLE_LIST, GangInfo[gang][Name], string, "Close", "");
   	pganggo[playerid]=gang;
	return 1;
}*/
forward ShowRichest(playerid);
public ShowRichest(playerid)
{
	new string[1024], rows, fields;
	new name[24], score;
    cache_get_row_count(rows);
    cache_get_field_count(fields);
	for(new x=0; x<rows; x++)
	{
           cache_get_value_index(x, 0, name);
           cache_get_value_index_int(x, 1, score);
		   format(string, sizeof(string), "%s"WHITE_"#%d - "LIGHTYELLOW_"%s "GRAY_"($%d)\n", string, x+1, name, score);
	}
   	ShowPlayerDialog(playerid, 9343, DIALOG_STYLE_LIST, "GTADM: "LIGHTYELLOW_"Top 10 Richest", string, "Back", "");
	return 1;
}

forward GPCIScan(playerid);
public GPCIScan(playerid)
{
	new string[560], rows, fields;
	new name[24];
    cache_get_row_count(rows);
    cache_get_field_count(fields);
    if(!rows) SendWarning(playerid, "-GPCI Scan- No Users with same GPCI are found");
    else
    {
    	for(new x=0; x<rows; x++)
    	{
           cache_get_value_index(x, 0, name);
		   format(string, sizeof(string), "%s%s\n", string, name);
    	}
     	ShowPlayerDialog(playerid, 10127, DIALOG_STYLE_LIST, "GTADM: "LIGHTYELLOW_" GPCI Scan", string, "Close", "");
	}
	return 1;
}
forward OfflineGPCIScan1(playerid);
public OfflineGPCIScan1(playerid)
{
	new query[560], rows, fields;
	new gpppciii[128];
    cache_get_row_count(rows);
    cache_get_field_count(fields);
    if(!rows) SendWarning(playerid, "-GPCI SCAN- No Accounts with such a Name are found!");
    else
    {
        cache_get_value_index(0, 0, gpppciii);

		format(query, sizeof(query), "SELECT `Name` FROM `users` WHERE `GPCI` = '%s' ORDER BY `Score` DESC", Escape_String(gpppciii));
        mysql_tquery(GTADM, query, "GPCIScan", "d", playerid);
	}
	return 1;
}

forward pIPSCAN(playerid);
public pIPSCAN(playerid)
{
	new string[560], rows, fields;
	new name[24];
    cache_get_row_count(rows);
    cache_get_field_count(fields);
    if(!rows) SendWarning(playerid, "-IpScan- No Users with same ip are found");
    else
    {
    	for(new x=0; x<rows; x++)
    	{
           cache_get_value_index(x, 0, name);
		   format(string, sizeof(string), "%s%s\n", string, name);
    	}
     	ShowPlayerDialog(playerid, 10127, DIALOG_STYLE_LIST, "GTADM: "LIGHTYELLOW_" IP Scan", string, "Close", "");
	}

	return 1;
}

forward whiteshow(playerid);
public whiteshow(playerid)
{
	new string[1024], rows, fields;
	new name[24];
    cache_get_row_count(rows);
    cache_get_field_count(fields);
    if(!rows) SendWarning(playerid, "-WhiteList- No Accounts in the White-List");
    else
    {
    	for(new x=0; x<rows; x++)
    	{
           cache_get_value_index(x, 0, name);
		   format(string, sizeof(string), "%s%s\n", string, name);
    	}
     	ShowPlayerDialog(playerid, 10127, DIALOG_STYLE_LIST, "GTADM: "LIGHTYELLOW_" Whitelist", string, "Close", "");
	}
	return 1;
}
/*
forward showreports(playerid);
public showreports(playerid)
{
	new string[1024], rows, fields;
	new reporter[24], date[30], reported[24];
    cache_get_row_count(rows);
    cache_get_field_count(fields);
    if(!rows) SendWarning(playerid, "-Reports- No Reports in the Reports-List");
    else
    {
      for(new x=0; x<rows; x++)
      {
        cache_get_value_index(x, 0, reporter);
        cache_get_value_index(x, 1, reported);
        cache_get_value_index(x, 2, date);
//        cache_get_value_index(x, 2, gpci);
//        cache_get_value_index(x, 3, reason);
//        cache_get_value_index(x, 4, ban_type);
//        cache_get_value_index(x, 5, ban_date);
//        cache_get_value_index(x, 6, period);
        format(string, sizeof(string), "%s%s\t%s\t%s\n", string, reporter, reported, date);
      }
    }
    ShowPlayerDialog(playerid, 10127, DIALOG_STYLE_LIST, "GTADM: "LIGHTYELLOW_"Reports", string, "Close", "");
    return 1;
}
*/
forward showgpcibans(playerid);
public showgpcibans(playerid)
{
	new string[1024], rows, fields;
	new name[24], ip[30];
    cache_get_row_count(rows);
    cache_get_field_count(fields);
    if(!rows) SendWarning(playerid, "-GPCI Bans- No Accounts in the GPCI-Bans");
    else
    {
      for(new x=0; x<rows; x++)
      {
        cache_get_value_index(x, 0, name);
        cache_get_value_index(x, 1, ip);
//        cache_get_value_index(x, 2, gpci);
//        cache_get_value_index(x, 3, reason);
//        cache_get_value_index(x, 4, ban_type);
//        cache_get_value_index(x, 5, ban_date);
//        cache_get_value_index(x, 6, period);
        format(string, sizeof(string), "%s%s\t%s\n", string, name, ip);
      }
    }
    ShowPlayerDialog(playerid, 10127, DIALOG_STYLE_LIST, "GTADM: "LIGHTYELLOW_"GPCI Bans", string, "Close", "");
    return 1;
}
forward showtempbans(playerid);
public showtempbans(playerid)
{
	new string[1024], rows, fields;
	new name[24], period, ip[30];
    cache_get_row_count(rows);
    cache_get_field_count(fields);
    if(!rows) SendWarning(playerid, "-Temp Bans- No Accounts in the Temp-Bans");
    else
    {
    	for(new x=0; x<rows; x++)
    	{
           cache_get_value_index(x, 0, name);
           cache_get_value_index(x, 1, ip);
           cache_get_value_index_int(x, 6, period);
           format(string, sizeof(string), "%s%s\t%s\t(%d Hours)\n", string, name, ip, floatround(period/60));
    	}
     	ShowPlayerDialog(playerid, 10127, DIALOG_STYLE_LIST, "GTADM: "LIGHTYELLOW_"Temp Bans", string, "Close", "");
	}
	return 1;
}

forward IPSCAN(playerid);
public IPSCAN(playerid)
{
	new rows, fields;
	new name[24], ip[20];
    cache_get_row_count(rows);
    cache_get_field_count(fields);
	format(STRING, sizeof(STRING), "");
    if(!rows) SendWarning(playerid, "-IpScan- No Users with such an ip are found");
    else
    {
    	for(new x=0; x<rows; x++)
    	{
           cache_get_value_index(x, 0, name);
           cache_get_value_index(x, 1, ip);
		   format(STRING, sizeof(STRING), "%s{FF7700}%s\t{1B94E0}%s\n", STRING, ip, name);
    	}
     	ShowPlayerDialog(playerid, 10127, DIALOG_STYLE_LIST, "GTADM: "LIGHTYELLOW_" IP Scan "GRAY_"(Limited to 35 results)", STRING, "Close", "");
	}
	return 1;
}

forward AccSCAN(playerid, fakname[]);
public AccSCAN(playerid, fakname[])
{
	new string2[128], rows, fields, score;
	new name[24];
    cache_get_row_count(rows);
    cache_get_field_count(fields);
	format(STRING, sizeof(STRING), "");
    if(!rows) SendWarning(playerid, "-Account Scan- No accounts with such a name are found!");
    else
    {
		format(string2, sizeof(string2), "Accounts containing {1BAFE0}\"%s\" "GRAY_"(Limited to 35 results)", fakname);
    	for(new x=0; x<rows; x++)
    	{
           cache_get_value_index(x, 0, name);
           cache_get_value_index_int(x, 1, score);
		   format(STRING, sizeof(STRING), "%s\n{1B94E0}Score: %d\t{FF7700}Name: %s", STRING, score, name);
    	}
     	ShowPlayerDialog(playerid, 10127, DIALOG_STYLE_LIST, string2, STRING, "Close", "");
	}
	return 1;
}
//=====================================Top=Shit=================================
//Minigamers
//==============================================================================
forward ShowTopMedics(playerid);
public ShowTopMedics(playerid)
{
	new string[1024], rows, fields;
	new name[24], Heals2;//data 10
    cache_get_row_count(rows);
    cache_get_field_count(fields);
	for(new x=0; x<rows; x++)
	{
           cache_get_value_index(x, 0, name);
           cache_get_value_index_int(x, 1, Heals2);
		   format(string, sizeof(string), "%s"WHITE_"#%d - "LIGHTYELLOW_"%s "GRAY_"(%d players healed)\n", string, x+1, name, Heals2);
	}
   	ShowPlayerDialog(playerid, 10357, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM "WHITE_"- Top 10 Medics", string, "Back", "");
	return 1;
}
forward ShowTopCops(playerid);
public ShowTopCops(playerid)
{
	new string[1024], rows, fields;
	new name[24], Arrests2;//data 10
    cache_get_row_count(rows);
    cache_get_field_count(fields);
	for(new x=0; x<rows; x++)
	{
           cache_get_value_index(x, 0, name);
           cache_get_value_index_int(x, 1, Arrests2);
		   format(string, sizeof(string), "%s"WHITE_"#%d - "LIGHTYELLOW_"%s "GRAY_"(%d players arrested)\n", string, x+1, name, Arrests2);
	}
   	ShowPlayerDialog(playerid, 10358, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM "WHITE_"- Top 10 Cops", string, "Back", "");
	return 1;
}
forward ShowTopTerrorists(playerid);
public ShowTopTerrorists(playerid)
{
	new string[1024], rows, fields;
	new name[24], pBombed2;//data 10
    cache_get_row_count(rows);
    cache_get_field_count(fields);
	for(new x=0; x<rows; x++)
	{
           cache_get_value_index(x, 0, name);
           cache_get_value_index_int(x, 1, pBombed2);
		   format(string, sizeof(string), "%s"WHITE_"#%d - "LIGHTYELLOW_"%s "GRAY_"(%d players bombed)\n", string, x+1, name, pBombed2);
	}
   	ShowPlayerDialog(playerid, 10359, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM "WHITE_"- Top 10 Terrorists", string, "Back", "");
	return 1;
}
forward ShowTopWhores(playerid);
public ShowTopWhores(playerid)
{
	new string[1024], rows, fields;
	new name[24], blowjobs2;//data 10
    cache_get_row_count(rows);
    cache_get_field_count(fields);
	for(new x=0; x<rows; x++)
	{
           cache_get_value_index(x, 0, name);
           cache_get_value_index_int(x, 1, blowjobs2);
		   format(string, sizeof(string), "%s"WHITE_"#%d - "LIGHTYELLOW_"%s "GRAY_"(%d blowjobs)\n", string, x+1, name, blowjobs2);
	}
   	ShowPlayerDialog(playerid, 10360, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM "WHITE_"- Top 10 Whores", string, "Back", "");
	return 1;
}
forward ShowTopHitmans(playerid);
public ShowTopHitmans(playerid)
{
	new string[1024], rows, fields;
	new name[24], bounties2;//data 10
    cache_get_row_count(rows);
    cache_get_field_count(fields);
	for(new x=0; x<rows; x++)
	{
           cache_get_value_index(x, 0, name);
           cache_get_value_index_int(x, 1, bounties2);
		   format(string, sizeof(string), "%s"WHITE_"#%d - "LIGHTYELLOW_"%s "GRAY_"($%d earned from bounties)\n", string, x+1, name, bounties2);
	}
   	ShowPlayerDialog(playerid, 10361, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM "WHITE_"- Top 10 Hitmans", string, "Back", "");
	return 1;
}
forward ShowTopMechanics(playerid);
public ShowTopMechanics(playerid)
{
	new string[1024], rows, fields;
	new name[24], carsrepaired2;//data 10
    cache_get_row_count(rows);
    cache_get_field_count(fields);
	for(new x=0; x<rows; x++)
	{
           cache_get_value_index(x, 0, name);
           cache_get_value_index_int(x, 1, carsrepaired2);
		   format(string, sizeof(string), "%s"WHITE_"#%d - "LIGHTYELLOW_"%s "GRAY_"(%d vehicles repaired)\n", string, x+1, name, carsrepaired2);
	}
   	ShowPlayerDialog(playerid, 10362, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM "WHITE_"- Top 10 Mechanics", string, "Back", "");
	return 1;
}
//Other shit top list
//==============================================================================
forward ShowTopPlayers(playerid);
public ShowTopPlayers(playerid)
{
	new string[1024], rows, fields;
	new name[24], score;//data 10
    cache_get_row_count(rows);
    cache_get_field_count(fields);
	for(new x=0; x<rows; x++)
	{
           cache_get_value_index(x, 0, name);
           cache_get_value_index_int(x, 1, score);
		   format(string, sizeof(string), "%s"WHITE_"#%d - "LIGHTYELLOW_"%s "GRAY_"(%d score)\n", string, x+1, name, score);
	}
   	ShowPlayerDialog(playerid, 9327, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM "WHITE_"- Top 10 Players", string, "Back", "");
	return 1;
}
forward ShowTopBeatenUp(playerid);
public ShowTopBeatenUp(playerid)
{
	new string[1024], rows, fields;
	new name[24], score;//data 10
    cache_get_row_count(rows);
    cache_get_field_count(fields);
	for(new x=0; x<rows; x++)
	{
           cache_get_value_index(x, 0, name);
           cache_get_value_index_int(x, 1, score);
		   format(string, sizeof(string), "%s"WHITE_"#%d - "LIGHTYELLOW_"%s "GRAY_"(%d players beaten up)\n", string, x+1, name, score);
	}
   	ShowPlayerDialog(playerid, 9328, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM "WHITE_"- Top 10 Players Beaten Up", string, "Back", "");
	return 1;
}
forward ShowTopHeadshot(playerid);
public ShowTopHeadshot(playerid)
{
	new string[1024], rows, fields;
	new name[24], HS2;//data 10
    cache_get_row_count(rows);
    cache_get_field_count(fields);
	for(new x=0; x<rows; x++)
	{
           cache_get_value_index(x, 0, name);
           cache_get_value_index_int(x, 1, HS2);
		   format(string, sizeof(string), "%s"WHITE_"#%d - "LIGHTYELLOW_"%s "GRAY_"(%d headshots)\n", string, x+1, name, HS2);
	}
   	ShowPlayerDialog(playerid, 9329, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM "WHITE_"- Top 10 Headshooters", string, "Back", "");
	return 1;
}
forward ShowTopDrinkers(playerid);
public ShowTopDrinkers(playerid)
{
	new string[1024], rows, fields;
	new name[24], Drunk2;//data 10
    cache_get_row_count(rows);
    cache_get_field_count(fields);
	for(new x=0; x<rows; x++)
	{
           cache_get_value_index(x, 0, name);
           cache_get_value_index_int(x, 1, Drunk2);
		   format(string, sizeof(string), "%s"WHITE_"#%d - "LIGHTYELLOW_"%s "GRAY_"(%d drinks)\n", string, x+1, name, Drunk2);
	}
   	ShowPlayerDialog(playerid, 9330, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM "WHITE_"- Top 10 Drinkers", string, "Back", "");
	return 1;
}
forward ShowTopOnline(playerid);
public ShowTopOnline(playerid)
{
	new string[1024], rows, fields;
	new name[24], pHours2;//data 10
    cache_get_row_count(rows);
    cache_get_field_count(fields);
	for(new x=0; x<rows; x++)
	{
           cache_get_value_index(x, 0, name);
           cache_get_value_index_int(x, 1, pHours2);
		   format(string, sizeof(string), "%s"WHITE_"#%d - "LIGHTYELLOW_"%s "GRAY_"(%d hours online)\n", string, x+1, name, pHours2);
	}
   	ShowPlayerDialog(playerid, 9331, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM "WHITE_"- Top 10 Addicted", string, "Back", "");
	return 1;
}
forward ShowTopPP(playerid);
public ShowTopPP(playerid)
{
	new string[1024], rows, fields;
	new name[24], pCook2;//data 10
    cache_get_row_count(rows);
    cache_get_field_count(fields);
	for(new x=0; x<rows; x++)
	{
           cache_get_value_index(x, 0, name);
           cache_get_value_index_int(x, 1, pCook2);
		   format(string, sizeof(string), "%s"WHITE_"#%d - "LIGHTYELLOW_"%s "GRAY_"(%d premium points)\n", string, x+1, name, pCook2);
	}
   	ShowPlayerDialog(playerid, 9332, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM "WHITE_"- Top 10 Premium Players", string, "Back", "");
	return 1;
}
forward ShowTopEventWon(playerid);
public ShowTopEventWon(playerid)
{
	new string[1024], rows, fields;
	new name[24], sc;//data 10
    cache_get_row_count(rows);
    cache_get_field_count(fields);
	for(new x=0; x<rows; x++)
	{
           cache_get_value_index(x, 0, name);
           cache_get_value_index_int(x, 1, sc);
		   format(string, sizeof(string), "%s"WHITE_"#%d - "LIGHTYELLOW_"%s "GRAY_"(%d events won)\n", string, x+1, name, sc);
	}
   	ShowPlayerDialog(playerid, 9333, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM "WHITE_"- Top 10 Event Players", string, "Back", "");
	return 1;
}
forward ShowTopDealers(playerid);
public ShowTopDealers(playerid)
{
	new string[1024], rows, fields;
	new name[24], pDrugLevel2;//data 10
    cache_get_row_count(rows);
    cache_get_field_count(fields);
	for(new x=0; x<rows; x++)
	{
           cache_get_value_index(x, 0, name);
           cache_get_value_index_int(x, 1, pDrugLevel2);
		   format(string, sizeof(string), "%s"WHITE_"#%d - "LIGHTYELLOW_"%s "GRAY_"(%d drugs)\n", string, x+1, name, pDrugLevel2);
	}
   	ShowPlayerDialog(playerid, 10363, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM "WHITE_"- Top 10 Dealers", string, "Back", "");
	return 1;
}
forward ShowTopGWLost(playerid);
public ShowTopGWLost(playerid)
{
	new string[1024], rows, fields;
	new name[24], pGWlost2;//data 10
    cache_get_row_count(rows);
    cache_get_field_count(fields);
	for(new x=0; x<rows; x++)
	{
           cache_get_value_index(x, 0, name);
           cache_get_value_index_int(x, 1, pGWlost2);
		   format(string, sizeof(string), "%s"WHITE_"#%d - "LIGHTYELLOW_"%s "GRAY_"(%d gangwars lost)\n", string, x+1, name, pGWlost2);
	}
   	ShowPlayerDialog(playerid, 9334, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM "WHITE_"- Top 10 Worst Gangsters", string, "Back", "");
	return 1;
}
forward ShowTopAccidents(playerid);
public ShowTopAccidents(playerid)
{
	new string[1024], rows, fields;
	new name[24], vDamage2;//data 10
    cache_get_row_count(rows);
    cache_get_field_count(fields);
	for(new x=0; x<rows; x++)
	{
           cache_get_value_index(x, 0, name);
           cache_get_value_index_int(x, 1, vDamage2);
		   format(string, sizeof(string), "%s"WHITE_"#%d - "LIGHTYELLOW_"%s "GRAY_"(%d accidents)\n", string, x+1, name, vDamage2);
	}
   	ShowPlayerDialog(playerid, 9335, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM "WHITE_"- Top 10 Accidents", string, "Back", "");
	return 1;
}
forward ShowTopReaction(playerid);
public ShowTopReaction(playerid)
{
	new string[1024], rows, fields;
	new name[24], rTestWon2;//data 10
    cache_get_row_count(rows);
    cache_get_field_count(fields);
	for(new x=0; x<rows; x++)
	{
           cache_get_value_index(x, 0, name);
           cache_get_value_index_int(x, 1, rTestWon2);
		   format(string, sizeof(string), "%s"WHITE_"#%d - "LIGHTYELLOW_"%s "GRAY_"(%d reaction tests won)\n", string, x+1, name, rTestWon2);
	}
   	ShowPlayerDialog(playerid, 9336, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM "WHITE_"- Top 10 Reactions", string, "Back", "");
	return 1;
}
forward ShowTopKillers(playerid);
public ShowTopKillers(playerid)
{
	new string[1024], rows, fields;
	new name[24], pk;//data 10
    cache_get_row_count(rows);
    cache_get_field_count(fields);
	for(new x=0; x<rows; x++)
	{
           cache_get_value_index(x, 0, name);
           cache_get_value_index_int(x, 1, pk);
		   format(string, sizeof(string), "%s"WHITE_"#%d - "LIGHTYELLOW_"%s "GRAY_"(%d kills)\n", string, x+1, name, pk);
	}
   	ShowPlayerDialog(playerid, 9337, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM "WHITE_"- Top 10 Killers", string, "Back", "");
	return 1;
}
forward ShowTopExporters(playerid);
public ShowTopExporters(playerid)
{
	new string[1024], rows, fields;
	new name[24], pExported2;//data 10
    cache_get_row_count(rows);
    cache_get_field_count(fields);
	for(new x=0; x<rows; x++)
	{
           cache_get_value_index(x, 0, name);
           cache_get_value_index_int(x, 1, pExported2);
		   format(string, sizeof(string), "%s"WHITE_"#%d - "LIGHTYELLOW_"%s "GRAY_"(%d exports)\n", string, x+1, name, pExported2);
	}
   	ShowPlayerDialog(playerid, 9338, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM "WHITE_"- Top 10 Exporters", string, "Back", "");
	return 1;
}
forward ShowTopGangsters(playerid);
public ShowTopGangsters(playerid)
{
	new string[1024], rows, fields;
	new name[24], pGWinz2;//data 10
    cache_get_row_count(rows);
    cache_get_field_count(fields);
	for(new x=0; x<rows; x++)
	{
           cache_get_value_index(x, 0, name);
           cache_get_value_index_int(x, 1, pGWinz2);
		   format(string, sizeof(string), "%s"WHITE_"#%d - "LIGHTYELLOW_"%s "GRAY_"(%d gangwars won)\n", string, x+1, name, pGWinz2);
	}
   	ShowPlayerDialog(playerid, 9339, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM "WHITE_"- Top 10 Gangsters", string, "Back", "");
	return 1;
}
forward ShowTopWeakest(playerid);
public ShowTopWeakest(playerid)
{
	new string[1024], rows, fields;
	new name[24], pDeaths2;//data 10
    cache_get_row_count(rows);
    cache_get_field_count(fields);
	for(new x=0; x<rows; x++)
	{
           cache_get_value_index(x, 0, name);
           cache_get_value_index_int(x, 1, pDeaths2);
		   format(string, sizeof(string), "%s"WHITE_"#%d - "LIGHTYELLOW_"%s "GRAY_"(%d deaths)\n", string, x+1, name, pDeaths2);
	}
   	ShowPlayerDialog(playerid, 9340, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM "WHITE_"- Top 10 Weakest", string, "Back", "");
	return 1;
}
//==============================================================================
forward ShowTopTruckers(playerid);
public ShowTopTruckers(playerid)
{
	new string[1024], rows, fields;
	new name[24], pTrucking2;//data 10
    cache_get_row_count(rows);
    cache_get_field_count(fields);
	for(new x=0; x<rows; x++)
	{
           cache_get_value_index(x, 0, name);
           cache_get_value_index_int(x, 1, pTrucking2);
		   format(string, sizeof(string), "%s"WHITE_"#%d - "LIGHTYELLOW_"%s "GRAY_"(%d trucks delivered)\n", string, x+1, name, pTrucking2);
	}
   	ShowPlayerDialog(playerid, 10364, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM "WHITE_"- Top 10 Truckers", string, "Back", "");
	return 1;
}
forward ShowTopDrifters(playerid);
public ShowTopDrifters(playerid)
{
	new string[1024], rows, fields;
	new name[24], pDriftW2;//data 10
    cache_get_row_count(rows);
    cache_get_field_count(fields);
	for(new x=0; x<rows; x++)
	{
           cache_get_value_index(x, 0, name);
           cache_get_value_index_int(x, 1, pDriftW2);
		   format(string, sizeof(string), "%s"WHITE_"#%d - "LIGHTYELLOW_"%s "GRAY_"(%d drift records)\n", string, x+1, name, pDriftW2);
	}
   	ShowPlayerDialog(playerid, 10385, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM "WHITE_"- Top 10 Drifters", string, "Back", "");
	return 1;
}
forward ShowTopDD(playerid);
public ShowTopDD(playerid)
{
	new string[1024], rows, fields;
	new name[24], DDWins2;//data 10
    cache_get_row_count(rows);
    cache_get_field_count(fields);
	for(new x=0; x<rows; x++)
	{
           cache_get_value_index(x, 0, name);
           cache_get_value_index_int(x, 1, DDWins2);
		   format(string, sizeof(string), "%s"WHITE_"#%d - "LIGHTYELLOW_"%s "GRAY_"(%d Disco Dodgebombs won)\n", string, x+1, name, DDWins2);
	}
   	ShowPlayerDialog(playerid, 10386, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM "WHITE_"- Top 10 Disco Dodgebombers", string, "Back", "");
	return 1;
}
forward ShowTopCO(playerid);
public ShowTopCO(playerid)
{
	new string[1024], rows, fields;
	new name[24], COWins2;//data 10
    cache_get_row_count(rows);
    cache_get_field_count(fields);
	for(new x=0; x<rows; x++)
	{
           cache_get_value_index(x, 0, name);
           cache_get_value_index_int(x, 1, COWins2);
		   format(string, sizeof(string), "%s"WHITE_"#%d - "LIGHTYELLOW_"%s "GRAY_"(%d Colosseums won)\n", string, x+1, name, COWins2);
	}
   	ShowPlayerDialog(playerid, 10387, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM "WHITE_"- Top 10 Colosseum", string, "Back", "");
	return 1;
}
forward ShowTopFC(playerid);
public ShowTopFC(playerid)
{
	new string[1024], rows, fields;
	new name[24], FCWins2;//data 10
    cache_get_row_count(rows);
    cache_get_field_count(fields);
	for(new x=0; x<rows; x++)
	{
           cache_get_value_index(x, 0, name);
           cache_get_value_index_int(x, 1, FCWins2);
		   format(string, sizeof(string), "%s"WHITE_"#%d - "LIGHTYELLOW_"%s "GRAY_"(%d Flappy cars won)\n", string, x+1, name, FCWins2);
	}
   	ShowPlayerDialog(playerid, 10388, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM "WHITE_"- Top 10 Flappy Car", string, "Back", "");
	return 1;
}
forward ShowTopRaceRecords(playerid);
public ShowTopRaceRecords(playerid)
{
	new string[1024], rows, fields;
	new name[24], pDriftW2;//data 10
    cache_get_row_count(rows);
    cache_get_field_count(fields);
	for(new x=0; x<rows; x++)
	{
           cache_get_value_index(x, 0, name);
           cache_get_value_index_int(x, 1, pDriftW2);
		   format(string, sizeof(string), "%s"WHITE_"#%d - "LIGHTYELLOW_"%s "GRAY_"(%d race records)\n", string, x+1, name, pDriftW2);
	}
   	ShowPlayerDialog(playerid, 10384, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM "WHITE_"- Top 10 Race Records", string, "Back", "");
	return 1;
}
forward ShowTopMG(playerid);
public ShowTopMG(playerid)
{
	new string[1024], rows, fields;
	new name[24], MGWins2;//data 10
    cache_get_row_count(rows);
    cache_get_field_count(fields);
	for(new x=0; x<rows; x++)
	{
           cache_get_value_index(x, 0, name);
           cache_get_value_index_int(x, 1, MGWins2);
		   format(string, sizeof(string), "%s"WHITE_"#%d - "LIGHTYELLOW_"%s "GRAY_"(%d MG's won)\n", string, x+1, name, MGWins2);
	}
   	ShowPlayerDialog(playerid, 10365, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM "WHITE_"- Top 10 Money Hunters", string, "Back", "");
	return 1;
}
forward ShowTopFarmers(playerid);
public ShowTopFarmers(playerid)
{
	new string[1024], rows, fields;
	new name[24], HayWins2;//data 10
    cache_get_row_count(rows);
    cache_get_field_count(fields);
	for(new x=0; x<rows; x++)
	{
           cache_get_value_index(x, 0, name);
           cache_get_value_index_int(x, 1, HayWins2);
		   format(string, sizeof(string), "%s"WHITE_"#%d - "LIGHTYELLOW_"%s "GRAY_"(%d hays won)\n", string, x+1, name, HayWins2);
	}
   	ShowPlayerDialog(playerid, 10366, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM "WHITE_"- Top 10 Farmers", string, "Back", "");
	return 1;
}
forward ShowTopSumo(playerid);
public ShowTopSumo(playerid)
{
	new string[1024], rows, fields;
	new name[24], SumoWinz2;//data 10
    cache_get_row_count(rows);
    cache_get_field_count(fields);
	for(new x=0; x<rows; x++)
	{
           cache_get_value_index(x, 0, name);
           cache_get_value_index_int(x, 1, SumoWinz2);
		   format(string, sizeof(string), "%s"WHITE_"#%d - "LIGHTYELLOW_"%s "GRAY_"(%d sumos won)\n", string, x+1, name, SumoWinz2);
	}
   	ShowPlayerDialog(playerid, 10367, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM "WHITE_"- Top 10 Sumo Players", string, "Back", "");
	return 1;
}
forward ShowTopRunners(playerid);
public ShowTopRunners(playerid)
{
	new string[1024], rows, fields;
	new name[24], pWpOurs2;//data 10
    cache_get_row_count(rows);
    cache_get_field_count(fields);
	for(new x=0; x<rows; x++)
	{
           cache_get_value_index(x, 0, name);
           cache_get_value_index_int(x, 1, pWpOurs2);
		   format(string, sizeof(string), "%s"WHITE_"#%d - "LIGHTYELLOW_"%s "GRAY_"(%d parkours won)\n", string, x+1, name, pWpOurs2);
	}
   	ShowPlayerDialog(playerid, 10368, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM "WHITE_"- Top 10 Runners", string, "Back", "");
	return 1;
}
forward ShowTopTTT(playerid);
public ShowTopTTT(playerid)
{
	new string[1024], rows, fields;
	new name[24], TTTWins2;//data 10
    cache_get_row_count(rows);
    cache_get_field_count(fields);
	for(new x=0; x<rows; x++)
	{
           cache_get_value_index(x, 0, name);
           cache_get_value_index_int(x, 1, TTTWins2);
		   format(string, sizeof(string), "%s"WHITE_"#%d - "LIGHTYELLOW_"%s "GRAY_"(%d Tic Tac Toe's won)\n", string, x+1, name, TTTWins2);
	}
   	ShowPlayerDialog(playerid, 10369, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM "WHITE_"- Top 10 TTT Players", string, "Back", "");
	return 1;
}
forward ShowTopPool(playerid);
public ShowTopPool(playerid)
{
	new string[1024], rows, fields;
	new name[24], PoolWon2;//data 10
    cache_get_row_count(rows);
    cache_get_field_count(fields);
	for(new x=0; x<rows; x++)
	{
           cache_get_value_index(x, 0, name);
           cache_get_value_index_int(x, 1, PoolWon2);
		   format(string, sizeof(string), "%s"WHITE_"#%d - "LIGHTYELLOW_"%s "GRAY_"(%d pools won)\n", string, x+1, name, PoolWon2);
	}
   	ShowPlayerDialog(playerid, 10370, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM "WHITE_"- Top 10 Runners", string, "Back", "");
	return 1;
}
forward ShowTopGG(playerid);
public ShowTopGG(playerid)
{
	new string[1024], rows, fields;
	new name[24], GGWins2;//data 10
    cache_get_row_count(rows);
    cache_get_field_count(fields);
	for(new x=0; x<rows; x++)
	{
           cache_get_value_index(x, 0, name);
           cache_get_value_index_int(x, 1, GGWins2);
		   format(string, sizeof(string), "%s"WHITE_"#%d - "LIGHTYELLOW_"%s "GRAY_"(%d gungames won)\n", string, x+1, name, GGWins2);
	}
   	ShowPlayerDialog(playerid, 10371, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM "WHITE_"- Top 10 Wielders", string, "Back", "");
	return 1;
}
forward ShowTopFallout(playerid);
public ShowTopFallout(playerid)
{
	new string[1024], rows, fields;
	new name[24], PfOutW2;//data 10
    cache_get_row_count(rows);
    cache_get_field_count(fields);
	for(new x=0; x<rows; x++)
	{
           cache_get_value_index(x, 0, name);
           cache_get_value_index_int(x, 1, PfOutW2);
		   format(string, sizeof(string), "%s"WHITE_"#%d - "LIGHTYELLOW_"%s "GRAY_"(%d fallouts won)\n", string, x+1, name, PfOutW2);
	}
   	ShowPlayerDialog(playerid, 10372, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM "WHITE_"- Top 10 Fallout Players", string, "Back", "");
	return 1;
}
forward ShowTopLMS(playerid);
public ShowTopLMS(playerid)
{
	new string[1024], rows, fields;
	new name[24], pWLms2;//data 10
    cache_get_row_count(rows);
    cache_get_field_count(fields);
	for(new x=0; x<rows; x++)
	{
           cache_get_value_index(x, 0, name);
           cache_get_value_index_int(x, 1, pWLms2);
		   format(string, sizeof(string), "%s"WHITE_"#%d - "LIGHTYELLOW_"%s "GRAY_"(%d LMS's won)\n", string, x+1, name, pWLms2);
	}
   	ShowPlayerDialog(playerid, 10373, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM "WHITE_"- Top 10 LMS", string, "Back", "");
	return 1;
}
forward ShowTopCTF(playerid);
public ShowTopCTF(playerid)
{
	new string[1024], rows, fields;
	new name[24], pWCTF2;//data 10
    cache_get_row_count(rows);
    cache_get_field_count(fields);
	for(new x=0; x<rows; x++)
	{
           cache_get_value_index(x, 0, name);
           cache_get_value_index_int(x, 1, pWCTF2);
		   format(string, sizeof(string), "%s"WHITE_"#%d - "LIGHTYELLOW_"%s "GRAY_"(%d CTF's won)\n", string, x+1, name, pWCTF2);
	}
   	ShowPlayerDialog(playerid, 10374, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM "WHITE_"- Top 10 Runners", string, "Back", "");
	return 1;
}
forward ShowTopFastest(playerid);
public ShowTopFastest(playerid)
{
	new string[1024], rows, fields;
	new name[24], pSpeedR2;//data 10
    cache_get_row_count(rows);
    cache_get_field_count(fields);
	for(new x=0; x<rows; x++)
	{
           cache_get_value_index(x, 0, name);
           cache_get_value_index_int(x, 1, pSpeedR2);
		   format(string, sizeof(string), "%s"WHITE_"#%d - "LIGHTYELLOW_"%s "GRAY_"(%d speed records)\n", string, x+1, name, pSpeedR2);
	}
   	ShowPlayerDialog(playerid, 10375, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM "WHITE_"- Top 10 Fastest", string, "Back", "");
	return 1;
}
forward ShowTopOutrun(playerid);
public ShowTopOutrun(playerid)
{
	new string[1024], rows, fields;
	new name[24], pOutRunz2;//data 10
    cache_get_row_count(rows);
    cache_get_field_count(fields);
	for(new x=0; x<rows; x++)
	{
           cache_get_value_index(x, 0, name);
           cache_get_value_index_int(x, 1, pOutRunz2);
		   format(string, sizeof(string), "%s"WHITE_"#%d - "LIGHTYELLOW_"%s "GRAY_"(%d outruns won)\n", string, x+1, name, pOutRunz2);
	}
   	ShowPlayerDialog(playerid, 10376, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM "WHITE_"- Top 10 Outrunners", string, "Back", "");
	return 1;
}
forward ShowTopCS(playerid);
public ShowTopCS(playerid)
{
	new string[1024], rows, fields;
	new name[24], CSWins2;//data 10
    cache_get_row_count(rows);
    cache_get_field_count(fields);
	for(new x=0; x<rows; x++)
	{
           cache_get_value_index(x, 0, name);
           cache_get_value_index_int(x, 1, CSWins2);
		   format(string, sizeof(string), "%s"WHITE_"#%d - "LIGHTYELLOW_"%s "GRAY_"(%d CS's won)\n", string, x+1, name, CSWins2);
	}
   	ShowPlayerDialog(playerid, 10377, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM "WHITE_"- Top 10 CS Players", string, "Back", "");
	return 1;
}
forward ShowTopFB(playerid);
public ShowTopFB(playerid)
{
	new string[1024], rows, fields;
	new name[24], FBWins2;//data 10
    cache_get_row_count(rows);
    cache_get_field_count(fields);
	for(new x=0; x<rows; x++)
	{
           cache_get_value_index(x, 0, name);
           cache_get_value_index_int(x, 1, FBWins2);
		   format(string, sizeof(string), "%s"WHITE_"#%d - "LIGHTYELLOW_"%s "GRAY_"(%d footballs won)\n", string, x+1, name, FBWins2);
	}
   	ShowPlayerDialog(playerid, 10378, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM "WHITE_"- Top 10 Footballers", string, "Back", "");
	return 1;
}
forward ShowTopDuel(playerid);
public ShowTopDuel(playerid)
{
	new string[1024], rows, fields;
	new name[24], pWDuel2;//data 10
    cache_get_row_count(rows);
    cache_get_field_count(fields);
	for(new x=0; x<rows; x++)
	{
           cache_get_value_index(x, 0, name);
           cache_get_value_index_int(x, 1, pWDuel2);
		   format(string, sizeof(string), "%s"WHITE_"#%d - "LIGHTYELLOW_"%s "GRAY_"(%d duels won)\n", string, x+1, name, pWDuel2);
	}
   	ShowPlayerDialog(playerid, 10379, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM "WHITE_"- Top 10 Strongest", string, "Back", "");
	return 1;
}
forward ShowTopDives(playerid);
public ShowTopDives(playerid)
{
	new string[1024], rows, fields;
	new name[24], score;//data 10
    cache_get_row_count(rows);
    cache_get_field_count(fields);
	for(new x=0; x<rows; x++)
	{
           cache_get_value_index(x, 0, name);
           cache_get_value_index_int(x, 1, score);
		   format(string, sizeof(string), "%s"WHITE_"#%d - "LIGHTYELLOW_"%s "GRAY_"(%d dives won)\n", string, x+1, name, score);
	}
   	ShowPlayerDialog(playerid, 10380, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM "WHITE_"- Top 10 Dives", string, "Back", "");
	return 1;
}
forward ShowTopMissions(playerid);
public ShowTopMissions(playerid)
{
	new string[1024], rows, fields;
	new name[24], score;//data 10
    cache_get_row_count(rows);
    cache_get_field_count(fields);
	for(new x=0; x<rows; x++)
	{
           cache_get_value_index(x, 0, name);
           cache_get_value_index_int(x, 1, score);
		   format(string, sizeof(string), "%s"WHITE_"#%d - "LIGHTYELLOW_"%s "GRAY_"(%d missions completed)\n", string, x+1, name, score);
	}
   	ShowPlayerDialog(playerid, 10381, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM "WHITE_"- Top 10 Missions", string, "Back", "");
	return 1;
}
forward ShowTopRacers(playerid);
public ShowTopRacers(playerid)
{
	new string[1024], rows, fields;
	new name[24], pRaceWon2;//data 10
    cache_get_row_count(rows);
    cache_get_field_count(fields);
	for(new x=0; x<rows; x++)
	{
           cache_get_value_index(x, 0, name);
           cache_get_value_index_int(x, 1, pRaceWon2);
		   format(string, sizeof(string), "%s"WHITE_"#%d - "LIGHTYELLOW_"%s "GRAY_"(%d races won)\n", string, x+1, name, pRaceWon2);
	}
   	ShowPlayerDialog(playerid, 10382, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM "WHITE_"- Top 10 Racers", string, "Back", "");
	return 1;
}
forward ShowTopDerby(playerid);
public ShowTopDerby(playerid)
{
	new string[1024], rows, fields;
	new name[24], pWDerby2;//data 10
    cache_get_row_count(rows);
    cache_get_field_count(fields);
	for(new x=0; x<rows; x++)
	{
           cache_get_value_index(x, 0, name);
           cache_get_value_index_int(x, 1, pWDerby2);
		   format(string, sizeof(string), "%s"WHITE_"#%d - "LIGHTYELLOW_"%s "GRAY_"(%d derbies won)\n", string, x+1, name, pWDerby2);
	}
   	ShowPlayerDialog(playerid, 10383, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM "WHITE_"- Top 10 Crashers", string, "Back", "");
	return 1;
}
//==============================================================================
forward ShowTopGangs(playerid);
public ShowTopGangs(playerid)
{
	new string[1024], rows, fields;
	new name[24], iD, kills, deaths, pwwon, pwwlost;
    cache_get_row_count(rows);
    cache_get_field_count(fields);
	for(new x=0; x<rows; x++)
	{
		cache_get_value_index(x, 0, name);
		cache_get_value_index_int(x, 1, kills);
		cache_get_value_index_int(x, 2, deaths);
		cache_get_value_index_int(x, 3, iD);
		cache_get_value_index_int(x, 4, pwwon);
		cache_get_value_index_int(x, 5, pwwlost);

		new Float:gwratio, Float:killratio;
		if(pwwlost == 0) gwratio=0;
		else gwratio=floatdiv(pwwon, pwwlost);

		if(deaths == 0) killratio=0;
		else killratio=floatdiv(kills, deaths);

		format(string, sizeof(string), "%s{AAF598}#%d - {08C5FF}%s ({6EB1FF}%d{08C5FF}) ({99FF80}%d Kills {08C5FF}| {FF8C8C}%d Deaths{08C5FF} | {F9FF8A}Ratio: %.2f {08C5FF}| {255F17}%d Gangwars won {08C5FF}| {E62525}%d Gangwars lost{08C5FF} | {FF8C00}Gangwars ratio: %.2f{08C5FF})\n", string, x+1, name, iD, kills, deaths, killratio, pwwon, pwwlost, gwratio);
	}

   	ShowPlayerDialog(playerid, 10127, DIALOG_STYLE_MSGBOX, "GTADM: {AAF598}Top 10 Gangs", string, "Close", "");
	return 1;
}
forward ShowTopGangs2(playerid);
public ShowTopGangs2(playerid)
{
	new string[1024], rows, fields;
	new name[24], iD, kills, deaths, pwwon, pwwlost;
    cache_get_row_count(rows);
    cache_get_field_count(fields);
	for(new x=0; x<rows; x++)
	{
		cache_get_value_index(x, 0, name);
		cache_get_value_index_int(x, 1, kills);
		cache_get_value_index_int(x, 2, deaths);
		cache_get_value_index_int(x, 3, iD);
		cache_get_value_index_int(x, 4, pwwon);
		cache_get_value_index_int(x, 5, pwwlost);

		new Float:gwratio, Float:killratio;
		if(pwwlost == 0) gwratio=0;
		else gwratio=floatdiv(pwwon, pwwlost);

		if(deaths == 0) killratio=0;
		else killratio=floatdiv(kills, deaths);

		format(string, sizeof(string), "%s{AAF598}#%d - {08C5FF}%s ({6EB1FF}%d{08C5FF}) ({99FF80}%d Kills {08C5FF}| {FF8C8C}%d Deaths{08C5FF} | {F9FF8A}Ratio: %.2f {08C5FF}| {255F17}%d Gangwars won {08C5FF}| {E62525}%d Gangwars lost{08C5FF} | {FF8C00}Gangwars ratio: %.2f{08C5FF})\n", string, x+1, name, iD, kills, deaths, killratio, pwwon, pwwlost, gwratio);
	}

   	ShowPlayerDialog(playerid, 9341, DIALOG_STYLE_MSGBOX, "GTADM: {AAF598}Top 10 Gangs", string, "Back", "");
	return 1;
}
forward LoadGangs();
public LoadGangs()
{
	new rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);
    new gangid;
	for(new x=0; x<rows; x++)
	{
        cache_get_value_name_int(x, "GangID", gangid), GangInfo[gangid][ID] = gangid;
        cache_get_value_name(x, "GangName", GangInfo[gangid][Name]);
        cache_get_value_name_int(x, "GangColor", GangInfo[gangid][gColor]);
        cache_get_value_name_int(x, "GangBank", GangInfo[gangid][gBank]);

        cache_get_value_name_int(x, "GangKills", GangInfo[gangid][gKills]);
        cache_get_value_name_int(x, "GangDeaths", GangInfo[gangid][gDeaths]);

        cache_get_value_name_int(x, "GwLost", GangInfo[gangid][gWLost]);
        cache_get_value_name_int(x, "GwWon", GangInfo[gangid][gWWon]);

 	}
	return 1;
}
forward mCount();
public mCount()
{
	new rows, fields, k;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

	for(new x=0; x<rows; x++)
	{
       cache_get_value_index_int(x, 0, k);
       if(k < MAX_GANGS && k > -1)
       {
	     GangInfo[k][gMembers]++;
	   }
	}
    return 1;
}

forward LoadBases();
public LoadBases()
{
	new rows, fields, i;
    cache_get_row_count(rows);
    cache_get_field_count(fields);
	for(new x=0; x<rows; x++)
	{
        cache_get_value_name_int(x, "BaseID", i);
		if(i < MAX_BASES && i>=0)
		{
	        cache_get_value_name_int(x, "gbGang", GangBases[i][gbGang]);
		    if(GangBases[i][gbGang] > 0)
			{
			  GangBases[i][gbIcon] = CreateDynamicMapIcon(GangBases[i][gbPos][0], GangBases[i][gbPos][1], GangBases[i][gbPos][2], 43, 0, 0, 0, -1, 500.0);
		      GangBases[i][gbPickup] = CreateDynamicPickup(1272, 1, GangBases[i][gbPos][0], GangBases[i][gbPos][1], GangBases[i][gbPos][2], 0, 0);
			}
			else
			{
			  GangBases[i][gbIcon] = CreateDynamicMapIcon(GangBases[i][gbPos][0], GangBases[i][gbPos][1], GangBases[i][gbPos][2], 44, 0, 0, 0, -1, 500.0);
		      GangBases[i][gbPickup] = CreateDynamicPickup(1273, 1, GangBases[i][gbPos][0], GangBases[i][gbPos][1], GangBases[i][gbPos][2], 0, 0);
			}
		}
	}
	return 1;
}

forward LoadZones();
public LoadZones()
{
	new rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);
    new zoneid, zoneowner;
	for(new x=0; x<rows; x++)
	{
        cache_get_value_index_int(x, 0, zoneid);
        cache_get_value_index_int(x, 1, zoneowner);
        ZoneOwner[zoneid]=zoneowner;
	}
	return 1;
}
forward ShowVips(playerid);
public ShowVips(playerid)
{
	new rows, fields;
	new name[24];
    cache_get_row_count(rows);
    cache_get_field_count(fields);
    format(STRING, sizeof(STRING), "");
	for(new x=0; x<rows; x++)
	{
           cache_get_value_index(x, 0, name);
		   format(STRING, sizeof(STRING), "%s%10s\n", STRING, name);
	}
   	ShowPlayerDialog(playerid, 213, DIALOG_STYLE_LIST, ""LIGHTYELLOW_"GTADM "WHITE_"- VIP's", STRING, "Close", "");
	return 1;
}
forward Easter_Egg_Update(playerid, slot);
public Easter_Egg_Update(playerid, slot)
{
	new rows, fields, str[168];
    new suck[10];
	format(suck, sizeof(suck), "Egg%d", slot);

    cache_get_row_count(rows);
    cache_get_field_count(fields);
    if(rows > 0)
	{
		 format(str, sizeof(str), "UPDATE `eastereggs` SET `%s` = 1, eName = '%s' WHERE `UserID` = '%d'", suck, pEscName[playerid], PlayerInfo[playerid][UserID]);
	     mysql_query(GTADM, str);
	}
    else
    {
		 format(str, sizeof(str), "INSERT INTO `eastereggs` (`eName`, `UserID`, `%s`) VALUES ('%s', '%d', 1)", suck, pEscName[playerid], PlayerInfo[playerid][UserID]);
	     mysql_query(GTADM, str);
	}
    return 1;
}


forward Oysters_Update(playerid, slot);
public Oysters_Update(playerid, slot)
{
	new rows, fields, str[168];
    cache_get_row_count(rows);
    cache_get_field_count(fields);
    if(!rows)
	{
		 format(str, sizeof(str), "INSERT INTO `oysters` (`UserID`, `Oyster%d`) VALUES ('%d', 1)", slot, PlayerInfo[playerid][UserID]);
	     mysql_query(GTADM, str);
	}
    else
    {
		 format(str, sizeof(str), "UPDATE `oysters` SET `Oyster%d` = 1 WHERE `UserID` = '%d'", slot, PlayerInfo[playerid][UserID]);
	     mysql_query(GTADM, str);
	}
    return 1;
}

forward HorseShoeses_Update(playerid, slot);
public HorseShoeses_Update(playerid, slot)
{
	new rows, fields, str[168];
    cache_get_row_count(rows);
    cache_get_field_count(fields);
    if(!rows)
	{
		 format(str, sizeof(str), "INSERT INTO `horseshoes` (`UserID`, `Horseshoe%d`) VALUES ('%d', 1)", slot, PlayerInfo[playerid][UserID]);
	     mysql_query(GTADM, str);
	}
    else
    {
		 format(str, sizeof(str), "UPDATE `horseshoes` SET `Horseshoe%d` = 1 WHERE `UserID` = '%d'", slot, PlayerInfo[playerid][UserID]);
	     mysql_query(GTADM, str);
	}
    return 1;
}

forward SprayTags_Update(playerid, slot);
public SprayTags_Update(playerid, slot)
{
	new rows, fields, str[168];
    cache_get_row_count(rows);
    cache_get_field_count(fields);
    if(!rows)
	{
		 format(str, sizeof(str), "INSERT INTO `spraytags` (`UserID`, `Tag%d`) VALUES ('%d', 1)", slot, PlayerInfo[playerid][UserID]);
	     mysql_query(GTADM, str);
	}
    else
    {
		 format(str, sizeof(str), "UPDATE `spraytags` SET `Tag%d` = 1 WHERE `UserID` = '%d'", slot, PlayerInfo[playerid][UserID]);
	     mysql_query(GTADM, str);
	}
    return 1;
}

forward Medals_Update(playerid, slot);
public Medals_Update(playerid, slot)
{
	new rows, fields, str[168];
    cache_get_row_count(rows);
    cache_get_field_count(fields);
    if(!rows)
	{
		 format(str, sizeof(str), "INSERT INTO `medals` (`UserID`, `Medal%d`) VALUES ('%d', 1)", slot, PlayerInfo[playerid][UserID]);
	     mysql_query(GTADM, str);
	}
    else
    {
		 format(str, sizeof(str), "UPDATE `medals` SET `Medal%d` = 1 WHERE `UserID` = '%d'", slot, PlayerInfo[playerid][UserID]);
	     mysql_query(GTADM, str);
	}
    return 1;
}


forward LoadEasterEggs(playerid);
public LoadEasterEggs(playerid)
{
	new rows, fields, str[20];
    cache_get_row_count(rows);
    cache_get_field_count(fields);
    if(rows > 0)
    {
		for(new x=1; x<101; x++)
		{
		   format(str, sizeof(str), "Egg%d", x);
	       cache_get_value_name_int(0, str, MyEggs[playerid][x-1]);
	    }
    }
    return 1;
}
forward LoadHorseShoeses(playerid);
public LoadHorseShoeses(playerid)
{
	new rows, fields, str[20];
    cache_get_row_count(rows);
    cache_get_field_count(fields);
    if(rows > 0)
    {
		for(new x=1; x<51; x++)
		{
		   format(str, sizeof(str), "HorseShoe%d", x);
	       cache_get_value_name_int(0, str, MyShoeses[playerid][x-1]);
	    }
    }
    return 1;
}
forward LoadOysters(playerid);
public LoadOysters(playerid)
{
	new rows, fields, str[20];
    cache_get_row_count(rows);
    cache_get_field_count(fields);
    if(rows > 0)
    {
		for(new x=1; x<51; x++)
		{
		   format(str, sizeof(str), "Oyster%d", x);
	       cache_get_value_name_int(0, str, MyOysters[playerid][x-1]);
	    }
    }
    return 1;
}
forward LoadSprayTags(playerid);
public LoadSprayTags(playerid)
{
	new rows, fields, str[20];
    cache_get_row_count(rows);
    cache_get_field_count(fields);
    if(rows > 0)
    {
		for(new x=1; x<101; x++)
		{
		   format(str, sizeof(str), "Tag%d", x);
	       cache_get_value_name_int(0, str, MySprays[playerid][x-1]);
	    }
    }
    return 1;
}
forward LoadMedals(playerid);
public LoadMedals(playerid)
{
	new rows, fields, str[20];
    cache_get_row_count(rows);
    cache_get_field_count(fields);
    if(rows > 0)
    {
		for(new x=1; x<(sizeof(Medals)+1); x++)
		{
		   format(str, sizeof(str), "Medal%d", x);
	       cache_get_value_name_int(0, str, MyMedals[playerid][x-1]);
	    }
    }
	return 1;
}

forward GetUserID(playerid);
public GetUserID(playerid)
{
	  PlayerInfo[playerid][UserID] = cache_insert_id();
	  return 1;
}

stock Escape_String(string[])
{
  new escape[128];
  mysql_escape_string(string, escape);
  return escape;
}

stock Escape_Name(name[])
{
  new escape[24];
  mysql_escape_string(name, escape);
  return escape;
}
//==============================================================================
stock SetGCOLSHOW(playerid)
{
  new f;
  switch(GetPVarInt(playerid, "g_Col_p"))
  {
      case 1:f=0;
      case 2:f=20;
      case 3:f=40;
      case 4:f=60;
      case 5:f=80;
  }
  for(new x=0; x<26; x++)
  {
      if(x != 9 && x != 12 && x >=4 && x<23)
      {
            PlayerTextDrawBoxColor(playerid, gCol[playerid][x], PlayerColors[f]);
            f++;
      }
      PlayerTextDrawShow(playerid, gCol[playerid][x]);
  }
  SelectTextDraw(playerid, 0xE01B1BCC);
}

//==============================================================================
stock reverseString(input[])
{
    new
        string[128]
    ;
    for(new x = (strlen(input) - 1), i = x; i > -1; i--)
    {
        string[x - i] = input[i];
    }
    return string;
}
stock strtolower(input[])
{
    new
        string[128]
    ;
    for(new i = 0; i < strlen(input); i++)
    {
      if (isupper(input[i]))
        string[i] =input[i]+ 32;
      else string[i]=input[i];
    }
    return string;
}
stock MakeColorDark(col)
{
	new r, g, b, a;
    r = (col >> 24) & 0xFF;
    g = (col >> 16) & 0xFF;
    b = (col >> 8) & 0xFF;
    a = col & 0xFF;
    return RGBAToHex(r, g-20, b, a);
}

stock RGBAToHex(r, g, b, a) //By Betamaster
{
    return (r<<24 | g<<16 | b<<8 | a);
}

stock RGBAtoARGB(color)
	return (color >>> 8)|(color << 24);

stock SetObjectMaterialEx(objectid, materialindex, modelid, txdname[], texturename[], materialcolor)
	return SetDynamicObjectMaterial(objectid, materialindex, modelid, txdname, texturename, RGBAtoARGB(materialcolor));
stock SetObjectMaterialTextEx(objectid, text[], materialindex = 0, materialsize = OBJECT_MATERIAL_SIZE_256x128, fontface[] = "Arial", fontsize = 24, bold = 1, fontcolor = 0xFFFFFFFF, backcolor = 0, textalignment = 0)
	return SetObjectMaterialText(objectid, text, materialindex, materialsize, fontface, fontsize, bold, RGBAtoARGB(fontcolor), RGBAtoARGB(backcolor), textalignment);



//Mission-----------------------------------------------------------------------
forward mission1_(playerid);
forward mission2_(playerid);
forward mission3_(playerid);
forward mission4_(playerid);
forward mission1_1();
forward mission1_2();
forward mission1_3();
forward mission1_4();
forward mission1_5(playerid);
forward mission6_1(playerid);
forward mission6_3(playerid);
forward mission6_2(playerid, v);
forward mission5_(playerid);
forward mission9_(playerid);
forward Mission9_2(playerid);

public mission1_(playerid) {PlayerTextDrawSetStringEX(playerid, pMissionTD[playerid], "Follow the ~y~Red Checkpoint~w~ on your minimap to collect the ~r~bombs~n~~y~Bombs Collected : 0/3"); }
public mission1_1() {CreateExplosion(1092.9360, -1472.1014, 15.7825, 7, 50.0); }
public mission1_2() {CreateExplosion(1167.9585, -1438.3928, 15.7981, 7, 50.0); }
public mission1_3() {CreateExplosion(1137.2532, -1489.1219, 22.7591, 7, 50.0); }
public mission1_4() {CreateExplosion(1128.4727, -1517.6351, 15.7973, 7, 50.0); }
public mission1_5(playerid)
{
   CreateExplosion(1130.7607, -1453.6198, 15.7981, 7, 30.0);
   SendInfoText(playerid, 4000, "~y~Mission Completed~n~~g~$50000");
   PlayAudioStreamForPlayer(playerid, "https://dl.dropbox.com/u/52869044/GTADM%20-%20Mission%20Completed.mp3");
   GivePlayerMoneyEX(playerid, 50000);
   ScoreTDupdate(playerid, 5);
   DeletePVar(playerid, "MissionProgress");
   PlayerInfo[playerid][Mission]++;
   PlayerTextDrawHide(playerid, pMissionTD[playerid]);

   TogglePlayerAllDynamicRaceCPs(playerid, true);


   SetCameraBehindPlayer(playerid);
   new str[128];
   format(str, sizeof(str), "UPDATE `users` SET `Mission` = %d WHERE `UserID` = '%d'", PlayerInfo[playerid][Mission], PlayerInfo[playerid][UserID]);
   mysql_query(GTADM, str);
}

public mission9_(playerid) { PlayerTextDrawSetStringEX(playerid, pMissionTD[playerid], "- Go to ~p~Madd Dogg's Mansion~w~ in los santos and ~y~Steal~w~ the ~y~treasure's map~w~"); }
public mission2_(playerid){PlayerTextDrawSetStringEX(playerid, pMissionTD[playerid], "Go to the nearest ~r~Pizza~w~ resturant~n~to start your ~y~job!");}
public mission3_(playerid){PlayerTextDrawSetStringEX(playerid, pMissionTD[playerid], "Your job is to ~y~find the briefcase~n~inside caligula's palace ~w~and bring it back to us!");}
public mission4_(playerid){ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 1, 1, 1, 1, 1, 1);}
public mission5_(playerid) {PlayerTextDrawSetStringEX(playerid, pMissionTD[playerid], "- ~w~Find a ~y~broadway ~w~and steal it!"); }
public mission6_2(playerid, v)
{
	 DestroyVehicleEX(v);
     PlayerTextDrawSetStringEX(playerid, pMissionTD[playerid], "-Wait a minute that ~y~moron~w~ shouldnt rest in peace~n~-Head to the ~y~graveyard~w~ and take what is left from his ~r~nasty body");
	 SetPlayerSkin(playerid, GetPVarInt(playerid, "sskins"));
	 SetPlayerPosEx(playerid, 2837.7429, -1230.3541, 22.9258, 282.7087);

	 TogglePlayerDynamicCP(playerid, MissionCP[25], true);
     Streamer_AppendArrayData(STREAMER_TYPE_MAP_ICON , MissionMap[25], E_STREAMER_PLAYER_ID, playerid);
	 DeletePVar(playerid, "sskins");
     SetCameraBehindPlayer(playerid);
}
public mission6_3(playerid)
{
	 SetPlayerSkin(playerid, 62);
	 SetPlayerPos(playerid, 2807.9617, -1189.1959, 25.3517);
	 SetPlayerFacingAngle(playerid, 358.3901);
	 ApplyAnimation(playerid, "ped", "WALK_fat", 2.00, 1, 1, 1, 1, 1, 1);
}
public mission6_1(playerid)
{
     PlayerTextDrawSetStringEX(playerid, pMissionTD[playerid], "-~r~Rest in peace~w~ our little ~r~friend!");
	 new Float:x, Float:y, Float:z;
	 GetPlayerCameraPos(playerid, x, y, z);
	 for(new a=0; a<6; a++) PlayerPlaySound(playerid, 1159, x, y, z);
}
public Mission9_2(playerid)
{
	 CreateExplosion(1224.9714, -810.8404, 1083.4688, 12, 10.0);
	 DestroyPlayerObject(playerid, MissionObjects[playerid][0]);
	 MissionObjects[playerid][0]=CreatePlayerObject(playerid, 1829, 1225.1101, -810.7333, 1083.4688, 357.0000, 0.0000, 91.0000);
     PlayerTextDrawSetStringEX(playerid, pMissionTD[playerid], "- Take the ~y~treasure map");
     Streamer_AppendArrayData(STREAMER_TYPE_PICKUP , MissionPickup[3], E_STREAMER_PLAYER_ID, playerid);
     return 1;
}
stock SendpInfo(playerid, TD_string[], seconds)
{
 if(!GetPVarInt(playerid, "noMsg"))
 {
   PlayerTextDrawSetStringEX(playerid, pInfoTD[playerid], TD_string);
   PlayerTextDrawShow(playerid, pInfoTD[playerid]);
   SetTimerEx("hidepinfo", seconds, false, "i", playerid);
   SetPVarInt(playerid, "noMsg", true);
 }
}
forward hidepinfo(playerid);
public hidepinfo(playerid)
{
  if(IsPlayerConnected(playerid))
  {
    PlayerTextDrawHide(playerid, pInfoTD[playerid]);
    DeletePVar(playerid, "noMsg");
  }
  return 1;
}

//========================
stock SendClientMessageToAllEX(color, const text[], darabolas = 100)
{
	new
		seged1[148 + 1],
		valami = 0 - darabolas,
		lenght = strlen(text);

	while(lenght > (valami += darabolas))
		strmid(seged1, text[valami], 0, darabolas), SendClientMessageToAll(color, seged1);
}
stock SendClientMessageEX(playerid, color, const text[], darabolas = 100)
{
	new
		seged1[148 + 1],
		valami = 0 - darabolas,
		lenght = strlen(text);

	while(lenght > (valami += darabolas))
		strmid(seged1, text[valami], 0, darabolas), SendClientMessage(playerid, color, seged1);
}

stock SendRainbowMessage(const text[]) // RyDeR`
{
	new color_Red, color_Green, color_Blue, string[256];
	for(new i = strlen(text), j = i; i > 0; --i)
	{
		color_Red = floatround((0xFF * floatsin((i / (j / 3.0)), radian)));
		color_Green = floatround((0xFF / j) * i);
		color_Blue = floatround((0xFF / j) * (j - i));

		format(string, sizeof(string), "%s{%06x}%c", string, color_Red << 16 | color_Green << 8 | color_Blue, text[j - i]);
 	}
    return SendClientMessageToAll(-1, string);
}

stock GetGateCam(playerid, Float:fScale, &Float:object_x, &Float:object_y, &Float:object_z)
{

		new
		Float:fPX, Float:fPY, Float:fPZ,
		Float:fVX, Float:fVY, Float:fVZ;
		GetPlayerPos(playerid, fPX, fPY, fPZ);
		GetPlayerCameraFrontVector(playerid, fVX, fVY, fVZ);
		object_x = fPX + floatmul(fVX, fScale);
		object_y = fPY + floatmul(fVY, fScale);
		object_z = fPZ + floatmul(fVZ, fScale);

}
stock SetGlass(playerid)
{
   if(PlayerClothes[playerid][Glass] > 0 && (strlen(PlayerClothes[playerid][GlassString]) > 20))
   {
		new Float:pos[9], iD;
		sscanf(PlayerClothes[playerid][GlassString], "p<, >dfffffffff", iD, pos[0], pos[1], pos[2], pos[3], pos[4], pos[5], pos[6], pos[7], pos[8]);
	  	SetPlayerAttachedObject(playerid, 1, iD, 2, pos[0], pos[1], pos[2], pos[3], pos[4], pos[5], pos[6], pos[7], pos[8]);
   }
}
stock SetCaps(playerid)
{
   if(PlayerClothes[playerid][Caps] > 0 && (strlen(PlayerClothes[playerid][HatString]) > 20))
   {
		new Float:pos[9], iD;
		sscanf(PlayerClothes[playerid][HatString], "p<, >dfffffffff", iD, pos[0], pos[1], pos[2], pos[3], pos[4], pos[5], pos[6], pos[7], pos[8]);
	  	SetPlayerAttachedObject(playerid, 2, iD, 2, pos[0], pos[1], pos[2], pos[3], pos[4], pos[5], pos[6], pos[7], pos[8]);
   }
}

stock IsPlayerFemale(Model)
{
    if(Model < 0 || Model > 299)
	{
        return false;
    }

    static const Female[] = {
        9, 10, 11, 12, 13, 31, 38, 39, 40, 41, 53, 54, 55, 56, 63, 64, 65, 69, 75, 76, 77, 85, 87, 88, 89, 90, 91, 92, 93, 129, 130, 131, 138, 139, 140, 141, 145, 148, 150, 151, 152, 157, 169, 172,
        178, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 205, 207, 211, 214, 215, 216, 218, 219, 224, 225, 226, 231, 232, 233, 237, 238, 243, 244, 245, 246, 251, 256, 257, 263, 298
    };

    for(new FemaleID = 0; FemaleID < sizeof(Female); FemaleID++) {
        if(Female[FemaleID] == Model) {
            return true;
        }
    }
    return false;
}
stock GivePP(playerid, cookamount)
{
	  PlayerInfo[playerid][pCook]+=cookamount;
	  new Query[150];
 	  format(Query, sizeof(Query), "UPDATE `users` SET `Cooks` = %d WHERE `UserID` = '%d'", PlayerInfo[playerid][pCook], PlayerInfo[playerid][UserID]);
	  mysql_query(GTADM, Query);
	  if(cookamount > 0)
	  {
		  format(Query, sizeof(Query), "~g~~h~~h~~h~Premium Points: ~p~+%d", cookamount);
	      SendpInfo(playerid, Query, 5000);
		  TextDrawShowForPlayer(playerid, PPEarned);
		  SetTimerEx("HidePPTD", 3000, false, "i", playerid);
		  PlayerPlaySound(playerid, 5201, 0, 0, 0);
	  }
	  else if(cookamount < 0)
	  {
		  format(Query, sizeof(Query), "~r~Premium Points: ~p~%d", cookamount);
	      SendpInfo(playerid, Query, 5000);
	  }
	  if(PlayerInfo[playerid][pCook] >= 5) GiveMedal(playerid, 71);

}
forward HidePPTD(playerid);
public HidePPTD(playerid) {TextDrawHideForPlayer(playerid, PPEarned); }


stock ShowWeaponDialog(playerid)
{
    new str[1215];//1215
    format(str, sizeof(str), "ID\tType\t\t\tPrice");
    format(str, sizeof(str), "%s\n\n{6EB1FF}0\t{FF6E6E}Armour\t\t{B6FF6E}$5000\n", str);

    if(PlayerInfo[playerid][IsVIP] == 0)
    {
		for(new x=0; x<sizeof(SpawnWeapPrices); x++)
		{
	       if(x == 0) format(str, sizeof(str), "%s{6EB1FF}%d\t{FF6E6E}%s\t{B6FF6E}$%d\n", str, x+1, aWeaponNames[SpawnWeapID[x]], floatround(SpawnWeapPrices[x]));
	       else if(x == 4 || x==3 || x > 11) format(str, sizeof(str), "%s{6EB1FF}%d\t{FF6E6E}%s\t\t{B6FF6E}$%d\n", str, x+1, aWeaponNames[SpawnWeapID[x]], floatround(SpawnWeapPrices[x]));
		   else format(str, sizeof(str), "%s{6EB1FF}%d\t{FF6E6E}%s\t\t\t{B6FF6E}$%d\n", str, x+1, aWeaponNames[SpawnWeapID[x]], floatround(SpawnWeapPrices[x]));
		}
	}
    else
    {
		for(new x=0; x<sizeof(SpawnWeapPrices); x++)
		{
	       if(x == 0) format(str, sizeof(str), "%s{6EB1FF}%d\t{FF6E6E}%s\t{B6FF6E}$%d\n", str, x+1, aWeaponNames[SpawnWeapID[x]], floatround(SpawnWeapPrices[x]*0.75));
	       else if(x == 4 || x==3 || x > 11) format(str, sizeof(str), "%s{6EB1FF}%d\t{FF6E6E}%s\t\t{B6FF6E}$%d\n", str, x+1, aWeaponNames[SpawnWeapID[x]], floatround(SpawnWeapPrices[x]*0.75));
		   else format(str, sizeof(str), "%s{6EB1FF}%d\t{FF6E6E}%s\t\t\t{B6FF6E}$%d\n", str, x+1, aWeaponNames[SpawnWeapID[x]], floatround(SpawnWeapPrices[x]*0.75));
		}
	}
	ShowPlayerDialog(playerid, 1015, DIALOG_STYLE_INPUT, ""LIGHTRED_"Ammunation", str, "Buy", "Exit");
}

stock rTestWinner(playerid)
{
   if(GetTickCount() - rTestcount < 2000) GiveMedal(playerid, 57);
   new str[128];
   format(str, sizeof(str), "{10869E}» Reaction test «{00D799} %s has won the reaction test! {10869E}(Reward $%d) (%s)", pName[playerid], rMoney, ConvertTime(GetTickCount() - rTestcount));
   SendClientMessageToAll(DARKBLUE, str);
   GivePlayerMoneyEX(playerid, rMoney, 1);
   rTest = 0;
   KillTimer(rTestTimer);
   rTestTimer = SetTimer("ReactionTest", 60000*3, true);

   PlayerInfo[playerid][rTestWon]++;
   PlayerInfo[playerid][rTs]++;
   new Query[128];
   format(Query, sizeof(Query),  "UPDATE `users` SET `ReactionTests` = %d WHERE `Name` = '%s'", PlayerInfo[playerid][rTestWon], pEscName[playerid]);
   mysql_query(GTADM, Query);
   ScoreTDupdate(playerid, 2);
   foreach(new i : Player) if(i != playerid) PlayerInfo[i][rTs]=0;
   if(PlayerInfo[playerid][rTs]==5) GiveMedal(playerid, 66);
}

/*public OnProxyResponse(playerid, bool:proxy)
{
   if(proxy && con ==1)
   {
	if(!IsPlayerNPC(playerid))
	{
		new string[128];
		format(string, sizeof(string), "» Failed Connection Attempt « {AA8202}%s %s has been excluded from the server (Proxy User)", pName[playerid], pIP(playerid));
		foreach (new i : Player) if(IsAdmin(i, 1)) SendClientMessage(i, ORANGE, string);
		printf("-Kick- %s has been kicked for proxy using", pName[playerid]);
		SetPVarInt(playerid, "DontCall_OnDisconnect", true);
		SendClientMessage(playerid, RED, "YOU ARE BANNED FROM THIS SERVER (Proxy User)!");
        StopAudioStreamForPlayer(playerid);
		SetTimerEx("banhim", 500, false, "i", playerid);
	}
   }
   return 1;
}*/

//====
stock AntiCheatCheck ()
{
	    new
	        t = tickcount (),
			speed;

	    foreach(new i : Player)
	    {

			if(IsSpecing[i] == 1)
			{
			  if(spectatorid[i] >= 0)
			  {
				new id=spectatorid[i];
				new Float:health, Float:armour;
				GetPlayerHealth(id, health);
				GetPlayerArmour(id, armour);
				new str[256];
				new vehicleid=GetPlayerVehicleID(id);
			    //new vehicle = GetPlayerVehicleID(id);
			    new Float:var;
                vehicleid=GetPlayerVehicleID(id);
                GetVehicleHealth(vehicleid, var);
				format(str, sizeof(str), "~w~FPS: ~y~%d~n~~w~Ping: ~b~~h~%d~n~~w~Health: ~r~~h~%.0f~n~~w~Armour: ~g~~h~~h~%.0f~n~~w~Speed: ~r~%d~n~~w~Weapon: ~y~~h~%s~n~~w~Vehicle health: ~p~~h~%.0f~n~~w~Packet loss: ~b~~h~~h~~h~%.1f%%", fps[id], GetPlayerPing(id), health, armour, GetPlayerSpeed(id, true), ReturnWeaponName(GetPlayerWeapon(id)), var, GetPlayerPacketLoss(id));
				PlayerTextDrawSetStringEX(i, SpecInfo[i][2], str);

				format(str, sizeof(str), "Name: ~p~%s~n~~w~ID: ~b~~h~~h~%d~n~~w~Money: ~g~$%d~n~~w~Score: ~b~%d", pName[id], id, GetPlayerMoneyEx(id), PlayerInfo[id][pScore]);
				PlayerTextDrawSetStringEX(i, SpecInfo[i][1], str);
			  }
			}

            if(g_IsPaused[i] == true) continue;
			new pstat=GetPlayerState(i);
//TeleportHack


            if(pstat == PLAYER_STATE_ONFOOT || pstat == PLAYER_STATE_DRIVER || pstat == PLAYER_STATE_SPAWNED)
            {
		        if (!posSYNC [i][sSyncTime] && !g_IsPaused[i] && Spawned[i] == 1)
		        {
			        if (GetPlayerSurfingVehicleID (i) == INVALID_VEHICLE_ID && GetPlayerSurfingObjectID (i) == INVALID_OBJECT_ID)
			        {
		               if(!IsPlayerInRangeOfPoint (i, 450.0, AirbPos[i][0], AirbPos[i][1], AirbPos[i][2]))
		               {
	                     if (AirbPos[i][2] < 900.0 && AirbPos[i][2] > 0)
	                     {
		                    if(!IsPlayerInRangeOfPoint (i, 5.0, TelePos[i][0], TelePos[i][1], TelePos[i][2]))
		                    {
	                            if (funcidx("OnPlayerTeleportHack") != -1)
	                                CallLocalFunction("OnPlayerTeleportHack", "d", i);
		                    }
	                     }
		               }
			        }
		        }
	        }
//Airbreak
	        if (!posSYNC [i][sSyncTime] && !g_IsPaused[i] && Spawned[i] == 1)
	        {
		        if (GetPlayerSurfingVehicleID (i) == INVALID_VEHICLE_ID && GetPlayerSurfingObjectID (i) == INVALID_OBJECT_ID && GetPlayerSpeed (i, true) < 30 && (pstat == PLAYER_STATE_DRIVER || pstat == PLAYER_STATE_ONFOOT))
		        {
					speed = floatround ((GetPlayerDistanceFromPoint (i, AirbPos[i][0], AirbPos[i][1], AirbPos[i][2]) / float (t - LastCheck[i])) * 1000.0);
                    GetPlayerPos (i, AirbPos[i][0], AirbPos[i][1], AirbPos[i][2]);
					if (speed > 150 && LastSpeed[i] > 150)
					{
                            if (funcidx("OnPlayerAirbreak") != -1)
                                CallLocalFunction("OnPlayerAirbreak", "d", i);
					}
					LastSpeed [i]= speed;
				}
				else
				{
				    GetPlayerPos (i, AirbPos[i][0], AirbPos[i][1], AirbPos[i][2]);
				    LastSpeed[i] = 0;
				}
			}
			else
			{
				    GetPlayerPos (i, AirbPos[i][0], AirbPos[i][1], AirbPos[i][2]);
				    LastSpeed[i] = 0;
			}
			LastCheck[i] = t;
	    }
	    return 1;
}

stock SetSyncTime (playerid, base = 3)
{
	if (!IsPlayerConnected (playerid)) return 0;

    posSYNC [playerid][sSyncTime] = base;
	posSYNC [playerid][sLastSyncUpdate] = tickcount ();
	return 1;
}

stock ShowMobileScreen(playerid, page)
{
    CreatePhone(playerid);
    HideScreenTXD(playerid);
	switch(page)
	{
		   case 0: //main page
		   {
			   for(new x=0; x<MAX_PHONE_TD;x++) PlayerTextDrawHide(playerid, PhoneTD[playerid][x]);

			   PlayerTextDrawShow(playerid, PhoneTD[playerid][19]);
			   PlayerTextDrawShow(playerid, PhoneTD[playerid][18]);
			   PlayerTextDrawShow(playerid, PhoneTD[playerid][17]);
			   PlayerTextDrawShow(playerid, PhoneTD[playerid][11]);
			   PlayerTextDrawShow(playerid, PhoneTD[playerid][1]);
			   PlayerTextDrawShow(playerid, PhoneTD[playerid][0]);
			   switch(pWallpaper[playerid])
			   {
					 case 0: PlayerTextDrawSetString(playerid, PhoneTD[playerid][38], "_");
					 case 1: PlayerTextDrawSetString(playerid, PhoneTD[playerid][38], "ld_grav:sky");
					 case 2: PlayerTextDrawSetString(playerid, PhoneTD[playerid][38], "splash1:splash1");
					 case 3: PlayerTextDrawSetString(playerid, PhoneTD[playerid][38], "splash2:splash2");
					 case 4: PlayerTextDrawSetString(playerid, PhoneTD[playerid][38], "LD_DUAL:backgnd");
					 case 5: PlayerTextDrawSetString(playerid, PhoneTD[playerid][38], "loadsc4:loadsc4");
			   }

			   PlayerTextDrawShow(playerid, PhoneTD[playerid][38]);
			   PlayerTextDrawShow(playerid, PhoneTD[playerid][20]);
			   PlayerTextDrawShow(playerid, PhoneTD[playerid][21]);
			   PlayerTextDrawShow(playerid, PhoneTD[playerid][22]);
			   PlayerTextDrawShow(playerid, PhoneTD[playerid][23]);
			   PlayerTextDrawShow(playerid, PhoneTD[playerid][24]);
			   PlayerTextDrawShow(playerid, PhoneTD[playerid][25]);
			   PlayerTextDrawShow(playerid, PhoneTD[playerid][26]);
			   PlayerTextDrawShow(playerid, PhoneTD[playerid][27]);
			   PlayerTextDrawShow(playerid, PhoneTD[playerid][28]);
			   PlayerTextDrawShow(playerid, PhoneTD[playerid][29]);
			   PlayerTextDrawShow(playerid, PhoneTD[playerid][30]);
			   PlayerTextDrawShow(playerid, PhoneTD[playerid][31]);
			   SelectTextDraw(playerid, 0x17BCCFFF);
		   }
		   case 1:
		   {
			   for(new x=0; x<MAX_PHONE_TD;x++) PlayerTextDrawHide(playerid, PhoneTD[playerid][x]);
			   for(new b=0; b<20; b++) PlayerTextDrawShow(playerid, PhoneTD[playerid][b]);
			   SelectTextDraw(playerid, 0x17BCCFFF);
		   }
		   case 2:
		   {
			   for(new x=0; x<MAX_PHONE_TD;x++) PlayerTextDrawHide(playerid, PhoneTD[playerid][x]);
			   PlayerTextDrawShow(playerid, PhoneTD[playerid][19]);
			   PlayerTextDrawShow(playerid, PhoneTD[playerid][18]);
			   PlayerTextDrawShow(playerid, PhoneTD[playerid][17]);
			   PlayerTextDrawShow(playerid, PhoneTD[playerid][11]);
			   PlayerTextDrawShow(playerid, PhoneTD[playerid][1]);
			   PlayerTextDrawShow(playerid, PhoneTD[playerid][0]);
			   PlayerTextDrawShow(playerid, PhoneTD[playerid][32]);
			   PlayerTextDrawShow(playerid, PhoneTD[playerid][33]);
			   PlayerTextDrawShow(playerid, PhoneTD[playerid][34]);
			   PlayerTextDrawShow(playerid, PhoneTD[playerid][35]);
			   PlayerTextDrawShow(playerid, PhoneTD[playerid][36]);
			   PlayerTextDrawShow(playerid, PhoneTD[playerid][37]);
			   PlayerTextDrawShow(playerid, PhoneTD[playerid][39]);

			   SelectTextDraw(playerid, 0x17BCCFFF);
		   }
		   case 3:
		   {
			   for(new x=0; x<MAX_PHONE_TD;x++) PlayerTextDrawHide(playerid, PhoneTD[playerid][x]);
			   PlayerTextDrawShow(playerid, PhoneTD[playerid][19]);
			   PlayerTextDrawShow(playerid, PhoneTD[playerid][18]);
			   PlayerTextDrawShow(playerid, PhoneTD[playerid][17]);
			   PlayerTextDrawShow(playerid, PhoneTD[playerid][11]);
			   PlayerTextDrawShow(playerid, PhoneTD[playerid][1]);
			   PlayerTextDrawShow(playerid, PhoneTD[playerid][0]);
			   for(new b=40; b<51; b++) PlayerTextDrawShow(playerid, PhoneTD[playerid][b]);
			   SelectTextDraw(playerid, 0x17BCCFFF);
		   }
		   case 4:
		   {
 			    for(new x=0; x<MAX_PHONE_TD;x++) PlayerTextDrawHide(playerid, PhoneTD[playerid][x]);
				new count;
				for(new x=0; x<7; x++)
				{
					if(strlen(ContactID[playerid][x]) >4 && strlen(ContactName[playerid][x]) >2)
					{
						count ++;
					}
				}
				for(new x=0; x<16; x++)
				{
				   if(x!= 6) PlayerTextDrawSetStringEX(playerid, PhoneTD[playerid][51+x], "_");
				}
				if(count > 0) PlayerTextDrawSetStringEX(playerid, PhoneTD[playerid][52], "Name        Number");

				switch(count)
				{
				   case 0:
				   {
					  PlayerTextDrawSetStringEX(playerid, PhoneTD[playerid][52], "No Contacts");
					  PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][51], 0);
					  PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][53], 0);
					  PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][54], 0);
					  PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][55], 0);
					  PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][56], 0);
					  PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][58], 0);
					  PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][59], 0);
				   }
				   case 1:
				   {
					  PlayerTextDrawSetStringEX(playerid, PhoneTD[playerid][51], ContactName[playerid][0]);
					  PlayerTextDrawSetStringEX(playerid, PhoneTD[playerid][60], ContactID[playerid][0]);
					  PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][51], 1);
					  PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][53], 0);
					  PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][54], 0);
					  PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][55], 0);
					  PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][56], 0);
					  PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][58], 0);
					  PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][59], 0);
				   }
				   case 2:
				   {
					  PlayerTextDrawSetStringEX(playerid, PhoneTD[playerid][51], ContactName[playerid][0]);
					  PlayerTextDrawSetStringEX(playerid, PhoneTD[playerid][60], ContactID[playerid][0]);
					  PlayerTextDrawSetStringEX(playerid, PhoneTD[playerid][53], ContactName[playerid][1]);
					  PlayerTextDrawSetStringEX(playerid, PhoneTD[playerid][61], ContactID[playerid][1]);
					  PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][51], 1);
					  PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][53], 1);
					  PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][54], 0);
					  PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][55], 0);
					  PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][56], 0);
					  PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][58], 0);
					  PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][59], 0);
				   }
				   case 3:
				   {
					  PlayerTextDrawSetStringEX(playerid, PhoneTD[playerid][51], ContactName[playerid][0]);
					  PlayerTextDrawSetStringEX(playerid, PhoneTD[playerid][60], ContactID[playerid][0]);
					  PlayerTextDrawSetStringEX(playerid, PhoneTD[playerid][53], ContactName[playerid][1]);
					  PlayerTextDrawSetStringEX(playerid, PhoneTD[playerid][61], ContactID[playerid][1]);
					  PlayerTextDrawSetStringEX(playerid, PhoneTD[playerid][54], ContactName[playerid][2]);
					  PlayerTextDrawSetStringEX(playerid, PhoneTD[playerid][62], ContactID[playerid][2]);
					  PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][51], 1);
					  PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][53], 1);
					  PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][54], 1);
					  PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][55], 0);
					  PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][56], 0);
					  PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][58], 0);
					  PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][59], 0);
				   }
				   case 4:
				   {
					  PlayerTextDrawSetStringEX(playerid, PhoneTD[playerid][51], ContactName[playerid][0]);
					  PlayerTextDrawSetStringEX(playerid, PhoneTD[playerid][60], ContactID[playerid][0]);
					  PlayerTextDrawSetStringEX(playerid, PhoneTD[playerid][53], ContactName[playerid][1]);
					  PlayerTextDrawSetStringEX(playerid, PhoneTD[playerid][61], ContactID[playerid][1]);
					  PlayerTextDrawSetStringEX(playerid, PhoneTD[playerid][54], ContactName[playerid][2]);
					  PlayerTextDrawSetStringEX(playerid, PhoneTD[playerid][62], ContactID[playerid][2]);
					  PlayerTextDrawSetStringEX(playerid, PhoneTD[playerid][55], ContactName[playerid][3]);
					  PlayerTextDrawSetStringEX(playerid, PhoneTD[playerid][63], ContactID[playerid][3]);
					  PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][51], 1);
					  PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][53], 1);
					  PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][54], 1);
					  PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][55], 1);
					  PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][56], 0);
					  PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][58], 0);
					  PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][59], 0);
				   }
				   case 5:
				   {
					  PlayerTextDrawSetStringEX(playerid, PhoneTD[playerid][51], ContactName[playerid][0]);
					  PlayerTextDrawSetStringEX(playerid, PhoneTD[playerid][60], ContactID[playerid][0]);
					  PlayerTextDrawSetStringEX(playerid, PhoneTD[playerid][53], ContactName[playerid][1]);
					  PlayerTextDrawSetStringEX(playerid, PhoneTD[playerid][61], ContactID[playerid][1]);
					  PlayerTextDrawSetStringEX(playerid, PhoneTD[playerid][54], ContactName[playerid][2]);
					  PlayerTextDrawSetStringEX(playerid, PhoneTD[playerid][62], ContactID[playerid][2]);
					  PlayerTextDrawSetStringEX(playerid, PhoneTD[playerid][55], ContactName[playerid][3]);
					  PlayerTextDrawSetStringEX(playerid, PhoneTD[playerid][63], ContactID[playerid][3]);
					  PlayerTextDrawSetStringEX(playerid, PhoneTD[playerid][56], ContactName[playerid][4]);
					  PlayerTextDrawSetStringEX(playerid, PhoneTD[playerid][64], ContactID[playerid][4]);
					  PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][51], 1);
					  PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][53], 1);
					  PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][54], 1);
					  PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][55], 1);
					  PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][56], 1);
					  PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][58], 0);
					  PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][59], 0);
				   }
				   case 6:
				   {
					  PlayerTextDrawSetStringEX(playerid, PhoneTD[playerid][51], ContactName[playerid][0]);
					  PlayerTextDrawSetStringEX(playerid, PhoneTD[playerid][60], ContactID[playerid][0]);
					  PlayerTextDrawSetStringEX(playerid, PhoneTD[playerid][53], ContactName[playerid][1]);
					  PlayerTextDrawSetStringEX(playerid, PhoneTD[playerid][61], ContactID[playerid][1]);
					  PlayerTextDrawSetStringEX(playerid, PhoneTD[playerid][54], ContactName[playerid][2]);
					  PlayerTextDrawSetStringEX(playerid, PhoneTD[playerid][62], ContactID[playerid][2]);
					  PlayerTextDrawSetStringEX(playerid, PhoneTD[playerid][55], ContactName[playerid][3]);
					  PlayerTextDrawSetStringEX(playerid, PhoneTD[playerid][63], ContactID[playerid][3]);
					  PlayerTextDrawSetStringEX(playerid, PhoneTD[playerid][56], ContactName[playerid][4]);
					  PlayerTextDrawSetStringEX(playerid, PhoneTD[playerid][64], ContactID[playerid][4]);
					  PlayerTextDrawSetStringEX(playerid, PhoneTD[playerid][58], ContactName[playerid][5]);
					  PlayerTextDrawSetStringEX(playerid, PhoneTD[playerid][65], ContactID[playerid][5]);
					  PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][51], 1);
					  PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][53], 1);
					  PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][54], 1);
					  PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][55], 1);
					  PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][56], 1);
					  PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][58], 1);
					  PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][59], 0);
				   }
				   case 7:
				   {
					  PlayerTextDrawSetStringEX(playerid, PhoneTD[playerid][51], ContactName[playerid][0]);
					  PlayerTextDrawSetStringEX(playerid, PhoneTD[playerid][60], ContactID[playerid][0]);
					  PlayerTextDrawSetStringEX(playerid, PhoneTD[playerid][53], ContactName[playerid][1]);
					  PlayerTextDrawSetStringEX(playerid, PhoneTD[playerid][61], ContactID[playerid][1]);
					  PlayerTextDrawSetStringEX(playerid, PhoneTD[playerid][54], ContactName[playerid][2]);
					  PlayerTextDrawSetStringEX(playerid, PhoneTD[playerid][62], ContactID[playerid][2]);
					  PlayerTextDrawSetStringEX(playerid, PhoneTD[playerid][55], ContactName[playerid][3]);
					  PlayerTextDrawSetStringEX(playerid, PhoneTD[playerid][63], ContactID[playerid][3]);
					  PlayerTextDrawSetStringEX(playerid, PhoneTD[playerid][56], ContactName[playerid][4]);
					  PlayerTextDrawSetStringEX(playerid, PhoneTD[playerid][64], ContactID[playerid][4]);
					  PlayerTextDrawSetStringEX(playerid, PhoneTD[playerid][58], ContactName[playerid][5]);
					  PlayerTextDrawSetStringEX(playerid, PhoneTD[playerid][65], ContactID[playerid][5]);
					  PlayerTextDrawSetStringEX(playerid, PhoneTD[playerid][59], ContactName[playerid][6]);
					  PlayerTextDrawSetStringEX(playerid, PhoneTD[playerid][66], ContactID[playerid][6]);
					  PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][51], 1);
					  PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][53], 1);
					  PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][54], 1);
					  PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][55], 1);
					  PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][56], 1);
					  PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][58], 1);
					  PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][59], 1);
				   }
				}
		   		PlayerTextDrawShow(playerid, PhoneTD[playerid][19]);
			    PlayerTextDrawShow(playerid, PhoneTD[playerid][18]);
			    PlayerTextDrawShow(playerid, PhoneTD[playerid][17]);
			    PlayerTextDrawShow(playerid, PhoneTD[playerid][11]);
			    PlayerTextDrawShow(playerid, PhoneTD[playerid][1]);
			    PlayerTextDrawShow(playerid, PhoneTD[playerid][0]);
				for(new x=0; x<16; x++) PlayerTextDrawShow(playerid, PhoneTD[playerid][51+x]);
		   }
	}
}
stock GetPhoneNumber(playerid)
{
	 new str[10];
	 format(str, sizeof(str), "055%06d", PlayerInfo[playerid][UserID]);
	 return str;
}
stock HoldPhone(playerid)
{
     SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
     switch(pPhone[playerid])
     {
		case 1:SetPlayerAttachedObject(playerid, 4, 330, 6, 0.06, 0.00, -0.00, 282.0, 25.0, -195.0, 0.99, 0.95, 1.00);
		case 2:SetPlayerAttachedObject(playerid, 4, 2967, 6, 0.06, 0.00, -0.00, 282.0, 25.0, -195.0, 0.99, 0.95, 1.00);
		case 3:SetPlayerAttachedObject(playerid, 4, 18866, 6, 0.06, 0.00, -0.00, 282.0, 25.0, -195.0, 0.99, 0.95, 1.00);
		case 4:SetPlayerAttachedObject(playerid, 4, 18869, 6, 0.06, 0.00, -0.00, 282.0, 25.0, -195.0, 0.99, 0.95, 1.00);
		case 5:SetPlayerAttachedObject(playerid, 4, 18867, 6, 0.06, 0.00, -0.00, 282.0, 25.0, -195.0, 0.99, 0.95, 1.00);
		case 6:SetPlayerAttachedObject(playerid, 4, 18868, 6, 0.06, 0.00, -0.00, 282.0, 25.0, -195.0, 0.99, 0.95, 1.00);
		case 7:SetPlayerAttachedObject(playerid, 4, 18870, 6, 0.06, 0.00, -0.00, 282.0, 25.0, -195.0, 0.99, 0.95, 1.00);
		case 8:SetPlayerAttachedObject(playerid, 4, 18871, 6, 0.06, 0.00, -0.00, 282.0, 25.0, -195.0, 0.99, 0.95, 1.00);
		case 9:SetPlayerAttachedObject(playerid, 4, 18872, 6, 0.06, 0.00, -0.00, 282.0, 25.0, -195.0, 0.99, 0.95, 1.00);
		case 10:SetPlayerAttachedObject(playerid, 4, 18873, 6, 0.06, 0.00, -0.00, 282.0, 25.0, -195.0, 0.99, 0.95, 1.00);
		case 11:SetPlayerAttachedObject(playerid, 4, 18874, 6, 0.06, 0.00, -0.00, 282.0, 25.0, -195.0, 0.99, 0.95, 1.00);
     }
}
forward SeeSMS(playerid);
public SeeSMS(playerid)
{
	new string[560], rows, fields;
	new smsid, From[50], Date[20], Msg[256];
    cache_get_row_count(rows);
    cache_get_field_count(fields);
    if(!rows) ShowMobileScreen(playerid, 0), SendClientMessage(playerid, RED, "{71A839}» Phone «{66CC00} Error");
    else
    {
       cache_get_value_index_int(0, 0, smsid);
       cache_get_value_index(0, 1, From);
       cache_get_value_index(0, 3, Msg);
       cache_get_value_index(0, 4, Date);
	   format(string, sizeof(string), "From %s\nAt %s\n\n%s", From, Date, Msg);
	   ShowPlayerDialog(playerid, 2149, DIALOG_STYLE_MSGBOX, "SMS", string, "Ok", "");
	   format(string, sizeof(string), "UPDATE `sms` SET `Read` = 1 WHERE `SmsID` = '%d'", smsid);
	   mysql_query(GTADM, string);
	}
	return 1;
}

forward GetSMS(playerid);
public GetSMS(playerid)
{
	new string[1024], rows, fields;
	new smsid, From[50], Date[20], read;
    cache_get_row_count(rows);
    cache_get_field_count(fields);
    if(!rows) ShowMobileScreen(playerid, 0), SendClientMessage(playerid, RED, "{71A839}» Phone «{66CC00} Your phone inbox is empty!");
    else
    {
    	for(new x=0; x<rows; x++)
    	{
           cache_get_value_index_int(x, 0, smsid);
           cache_get_value_index(x, 1, From);
           cache_get_value_index(x, 4, Date);
           cache_get_value_index_int(x, 5, read);
           SMSID[playerid][x]=smsid;
           if(read == 1)format(string, sizeof(string), "%s\n{FFFFFF}At "GRAY_"%s {FFFFFF}From "GRAY_"%s", string, Date, From);
		   else format(string, sizeof(string), "%s\n{FFFFFF}At "GRAY_"%s {FFFFFF}From "GRAY_"%s "GREEN_"(NEW)", string, Date, From);
    	}
     	ShowPlayerDialog(playerid, 2148, DIALOG_STYLE_LIST, "GTADM: "LIGHTYELLOW_" Phone Inbox", string, "View", "Exit");
	}
	return 1;
}
//MG
forward StartMG();
public StartMG()
{
    KillTimer(mgtimer);
    mgtimer=-1;
    new count=CountMG();
    if(count > 1)
    {
		   mgstarted=1;
		   foreach(new i : Player)
		   {
			  if(GetPVarInt(i, "InMG"))
			  {
      			 SendInfoText(i, 1000, "~g~Go");
      			 PlayerPlaySound(i, 15805, 0, 0, 0);
			  }
		   }
		   new Float:pos[3];
		   new k=Iter_Random(mgiter);
		   GetDynamicObjectPos(mgObjects_[k], pos[0], pos[1], pos[2]);
		   Mgpickup=CreateDynamicPickup(1550, 2, pos[0], pos[1], pos[2]+0.8, 14567);
		   Iter_Remove(mgiter, k);


		   MoveDynamicObject(mggate, 2787.1000977, -2680.1999512, 195.3000031, 5.0);
	   	   MgTime=45;
		   mgtimer3=SetTimer("MGCount", 1000, true);
    }
    else
    {
	       KillTimer(mgtimer);
           KillTimer(mgtimer2);
           KillTimer(mgtimer3);
           mgtimer=-1;
           mgtimer2=-1;
           mgtimer3=-1;
           mgstarted = 0;
           SendClientMessageToAll(0xF86EFFFF, "{8F6FA8}» Money Game «{6E8CC4} The Money Game has been cancelled (Not enough players)");
		   foreach(new i : Player)
		   {
			  if(GetPVarInt(i, "InMG"))
			  {
				  LoadPlayerCoords(i);
				  DeletePVar(i, "InMG");
				  //TextDrawHideForPlayer(i, Mwaiting);
			  }
		   }
		   EndMG();
    }
    return 1;
}
stock EndMG()
{
	for( new i; i < mgslots; i++ )
 	{
 	    if(IsValidDynamicObject(mgObjects_[i])) DestroyDynamicObject( mgObjects_[i] );
 	    mgObjects_[i]=INVALID_OBJECT_ID;
 	}
	Iter_Clear(mgiter);
	Iter_Clear(mgiter2);
	Iter_Clear(mgiter3);
	MoveDynamicObject(mggate, 2787.1000977, -2680.1999512, 205.3000031, 5.0);
}
/*forward MGCount();
public MGCount()
{
  if(MgTime > 0)
  {
	  MgTime--;
	  new str[128];
	  foreach(new i : Player) TextDrawHideForPlayer(i, Mwaiting);
	  format(str, sizeof(str), "~y~Find the hidden Money bag: ~r~%d", MgTime);

	  foreach(new i : Player)
	  {
		  if(GetPVarInt(i, "InMG"))
		  {
             PlayerTextDrawSetStringEX(i, pInfoTD[i], str);
             PlayerTextDrawShow(i, pInfoTD[i]);
		  }
	  }
	  for(new x=0; x<5; x++)
	  {
		new k=Iter_Random(mgiter);
		new Float:pos[3];
		if(IsValidDynamicObject(mgObjects_[k]))
		{
			GetDynamicObjectPos(mgObjects_[k], pos[0], pos[1], pos[2]);
			if(pos[2] == mgCoords[k][2]) MoveDynamicObject(mgObjects_[k], mgCoords[k][0], mgCoords[k][1], mgCoords[k][2]+5.0, 3.0);
			else MoveDynamicObject(mgObjects_[k], mgCoords[k][0], mgCoords[k][1], mgCoords[k][2], 3.0);
		}
		new b=Iter_Random(mgiter);
		if(IsValidDynamicObject(mgObjects_[b]))
		{
			GetDynamicObjectPos(mgObjects_[b], pos[0], pos[1], pos[2]);
			if(pos[2] == mgCoords[b][2]) MoveDynamicObject(mgObjects_[b], mgCoords[b][0], mgCoords[b][1], mgCoords[b][2]-5.0, 3.0);
			else MoveDynamicObject(mgObjects_[b], mgCoords[b][0], mgCoords[b][1], mgCoords[b][2], 3.0);

		}
		new c=Iter_Random(mgiter);
		if(IsValidDynamicObject(mgObjects_[c]))
		{
			GetDynamicObjectPos(mgObjects_[c], pos[0], pos[1], pos[2]);
			if(pos[2] == mgCoords[c][2]) MoveDynamicObject(mgObjects_[c], mgCoords[c][0], mgCoords[c][1], mgCoords[c][2]+8.0, 5.0);
			else MoveDynamicObject(mgObjects_[c], mgCoords[c][0], mgCoords[c][1], mgCoords[c][2], 3.0);

		}
	  }
  }
  else
  {
	    KillTimer(mgtimer);
	    KillTimer(mgtimer2);
	    KillTimer(mgtimer3);
	    mgtimer=-1;
	    mgtimer2=-1;
	    mgtimer3=-1;
	    mgstarted = 1;
	    foreach(new i : Player)
	    {
		  if(GetPVarInt(i, "InMG"))
		  {
            PlayerTextDrawHide(i, pInfoTD[i]);
			switch(random(3))
			{
				case 0: SetPlayerPosEx(i, 2807.1082, -2674.0049, 204.5200, 100.9919);
				case 1: SetPlayerPosEx(i, 2808.5535, -2680.4304, 204.5200, 90.0251);
				case 2: SetPlayerPosEx(i, 2806.5286, -2689.2800, 204.5200, 62.1382);
			}
			SetCameraBehindPlayer(i);
			TogglePlayerControllable2(i, 0);
			ssTimer[i]=SetTimerEx("WarningUnfreeze", 2000, false, "id", i, GetPlayerVirtualWorld(i));
		  }
	    }
	    if(EventType==2429 && EventStarted == 1)
		{
          MgStartTime=20;
		  mgstarted=2;
          mgtimer = SetTimer("StartMGCount", 1000, true);
	      mgtimer2 = SetTimer("StartMG", 20000, false);

		}
		else
		{
          MgStartTime=20;
		  mgstarted=2;
          mgtimer = SetTimer("StartMGCount", 1000, true);
	      mgtimer2 = SetTimer("StartMG", 20000, false);
		}*/
        /*MgStartTime=20;
		mgstarted=2;
        mgtimer = SetTimer("StartMGCount", 1000, true);

	    mgtimer2 = SetTimer("StartMG", 20000, false);*/
	    /*MoveDynamicObject(mggate, 2787.1000977, -2680.1999512, 205.3000031, 5.0);
		DestroyDynamicPickup(Mgpickup);
  }
}




forward StartMGCount();
public StartMGCount()
{
  if(MgStartTime > 0)
  {
      new count;
	  MgStartTime--;
	  new str[128];
	  //format(str, sizeof(str), "_~n~~y~%d", MgStartTime);
	  format(str, sizeof(str), "~p~Money game starts in ~g~%d~w~ ~r~seconds ~n~ ~w~~n~ Required players for start: ~y~2~n~~w~ Current players: ~r~%d", MgStartTime, CountMG());
	  foreach(new i : Player)
	  {
		  if(GetPVarInt(i, "InMG"))
		  {
             PlayerTextDrawHide(i, pInfoTD[i]);
             if(MgStartTime < 0) TextDrawHideForPlayer(i, Mwaiting);
			 //SendInfoText(i, 1000, str);
			 TextDrawSetStringEX(Mwaiting, str);
			 TextDrawShowForPlayer(i, Mwaiting);
			 count++;
			 if(MgStartTime == 3) PlayerPlaySound(i, 7417, 0, 0, 0);
			 else if(MgStartTime == 2) PlayerPlaySound(i, 7418, 0, 0, 0);
			 else if(MgStartTime == 1) PlayerPlaySound(i, 7419, 0, 0, 0);
		  }
	  }
	  if(count ==0)
	  {
           EndMG();
	       KillTimer(mgtimer);
           KillTimer(mgtimer2);
           KillTimer(mgtimer3);
           mgtimer=-1;
           mgtimer2=-1;
           mgtimer3=-1;
           mgstarted = 0;
           SendClientMessageToAll(0xF86EFFFF, "{8F6FA8}» Money Game «{6E8CC4} The Money Game has been cancelled (Not enough players)");
           foreach(new i : Player) TextDrawHideForPlayer(i, Mwaiting);
	  }
  }
}*/
forward MGCount();
public MGCount()
{
  if(MgTime > 0)
  {
	  MgTime--;
	  new str[128];
	  format(str, sizeof(str), "~y~Find the hidden money bag: ~r~%d", MgTime);

	  foreach(new i : Player)
	  {
		  if(GetPVarInt(i, "InMG"))
		  {
             PlayerTextDrawSetStringEX(i, pInfoTD[i], str);
             PlayerTextDrawShow(i, pInfoTD[i]);
		  }
	  }
	  for(new x=0; x<5; x++)
	  {
		new k=Iter_Random(mgiter);
		new Float:pos[3];
		if(IsValidDynamicObject(mgObjects_[k]))
		{
			GetDynamicObjectPos(mgObjects_[k], pos[0], pos[1], pos[2]);
			if(pos[2] == mgCoords[k][2]) MoveDynamicObject(mgObjects_[k], mgCoords[k][0], mgCoords[k][1], mgCoords[k][2]+5.0, 3.0);
			else MoveDynamicObject(mgObjects_[k], mgCoords[k][0], mgCoords[k][1], mgCoords[k][2], 3.0);
		}
		new b=Iter_Random(mgiter);
		if(IsValidDynamicObject(mgObjects_[b]))
		{
			GetDynamicObjectPos(mgObjects_[b], pos[0], pos[1], pos[2]);
			if(pos[2] == mgCoords[b][2]) MoveDynamicObject(mgObjects_[b], mgCoords[b][0], mgCoords[b][1], mgCoords[b][2]-5.0, 3.0);
			else MoveDynamicObject(mgObjects_[b], mgCoords[b][0], mgCoords[b][1], mgCoords[b][2], 3.0);

		}
		new c=Iter_Random(mgiter);
		if(IsValidDynamicObject(mgObjects_[c]))
		{
			GetDynamicObjectPos(mgObjects_[c], pos[0], pos[1], pos[2]);
			if(pos[2] == mgCoords[c][2]) MoveDynamicObject(mgObjects_[c], mgCoords[c][0], mgCoords[c][1], mgCoords[c][2]+8.0, 5.0);
			else MoveDynamicObject(mgObjects_[c], mgCoords[c][0], mgCoords[c][1], mgCoords[c][2], 3.0);

		}
	  }
  }
  else
  {
	    KillTimer(mgtimer);
	    KillTimer(mgtimer2);
	    KillTimer(mgtimer3);
	    mgtimer=-1;
	    mgtimer2=-1;
	    mgtimer3=-1;
	    mgstarted = 1;
	    foreach(new i : Player)
	    {
		  if(GetPVarInt(i, "InMG"))
		  {
            PlayerTextDrawHide(i, pInfoTD[i]);
			switch(random(3))
			{
				case 0: SetPlayerPosEx(i, 2807.1082, -2674.0049, 204.5200, 100.9919);
				case 1: SetPlayerPosEx(i, 2808.5535, -2680.4304, 204.5200, 90.0251);
				case 2: SetPlayerPosEx(i, 2806.5286, -2689.2800, 204.5200, 62.1382);
			}
			SetCameraBehindPlayer(i);
			TogglePlayerControllable2(i, 0);
			ssTimer[i]=SetTimerEx("WarningUnfreeze", 2000, false, "id", i, GetPlayerVirtualWorld(i));
		  }
	    }
	    if(EventType==2429 && EventStarted == 1)
		{
          MgStartTime=20;
		  mgstarted=2;
          mgtimer = SetTimer("StartMGCount", 1000, true);
	      mgtimer2 = SetTimer("StartMG", 20000, false);

		}
		else
		{
          MgStartTime=20;
		  mgstarted=2;
          mgtimer = SetTimer("StartMGCount", 1000, true);
	      mgtimer2 = SetTimer("StartMG", 20000, false);
		}
        /*MgStartTime=20;
		mgstarted=2;
        mgtimer = SetTimer("StartMGCount", 1000, true);

	    mgtimer2 = SetTimer("StartMG", 20000, false);*/
	    MoveDynamicObject(mggate, 2787.1000977, -2680.1999512, 205.3000031, 5.0);
		DestroyDynamicPickup(Mgpickup);
  }
}




forward StartMGCount();
public StartMGCount()
{
  if(MgStartTime > 0)
  {
      new count;
	  MgStartTime--;
	  new str[128];
	  format(str, sizeof(str), "~g~Money game ~r~starts in ~y~%d ~b~seconds", MgStartTime);
	  foreach(new i : Player)
	  {
		  if(GetPVarInt(i, "InMG"))
		  {
             PlayerTextDrawHide(i, pInfoTD[i]);
			 SendInfoText(i, 1000, str);
			 count++;
			 if(MgStartTime == 3) PlayerPlaySound(i, 7417, 0, 0, 0);
			 else if(MgStartTime == 2) PlayerPlaySound(i, 7418, 0, 0, 0);
			 else if(MgStartTime == 1) PlayerPlaySound(i, 7419, 0, 0, 0);
		  }
	  }
	  if(count ==0)
	  {
           EndMG();
	       KillTimer(mgtimer);
           KillTimer(mgtimer2);
           KillTimer(mgtimer3);
           mgtimer=-1;
           mgtimer2=-1;
           mgtimer3=-1;
           mgstarted = 0;
           SendClientMessageToAll(0xF86EFFFF, "{8F6FA8}» Money Game «{6E8CC4} The Money Game has been cancelled {8F6FA8}(Not enough players)");
	  }
  }
}
stock CountMG()
{
	new avo=0;
	foreach (new i : Player)
	{
	   if(GetPVarInt(i, "InMG"))
	   {
		 avo++;
	   }
	}
	return avo;
}

//=====================================Hay Game=================================
stock CountHay()
{
	new avo=0;
	foreach (new i : Player)
	{
	   if(GetPVarInt(i, "InHay"))
	   {
		 avo++;
	   }
	}
	return avo;
}

/*forward StartHayCount();
public StartHayCount()
{
  if(HayStartTime > 0)
  {
      new count;
	  HayStartTime--;
	  new str[128];
	  //format(str, sizeof(str), "_~n~~y~%d", HayStartTime);
	  format(str, sizeof(str), "~b~Hay starts in ~y~%d~w~ ~r~seconds ~n~ ~w~~n~ Required players for start: ~y~1~n~~w~ Current players: ~r~%d", HayStartTime, CountHay());
	  foreach(new i : Player)
	  {
		  if(GetPVarInt(i, "InHay"))
		  {
             if(HayStartTime < 0) TextDrawHideForPlayer(i, Hwaiting);
			 //SendInfoText(i, 1000, str);
			 TextDrawSetStringEX(Hwaiting, str);
			 TextDrawShowForPlayer(i, Hwaiting);
			 count++;
		  }
		  if(HayStartTime == 3) PlayerPlaySound(i, 7417, 0, 0, 0);
		  else if(HayStartTime == 2) PlayerPlaySound(i, 7418, 0, 0, 0);
		  else if(HayStartTime == 1) PlayerPlaySound(i, 7419, 0, 0, 0);
	  }
	  if(count ==0)
	  {
	       KillTimer(haygametimer);
           KillTimer(haygametimer2);
           haygametimer=-1;
           haygametimer2=-1;
           haygamestarted = 0;
           SendClientMessageToAll(0xF86EFFFF, "» Hay Game «{FF6EC0} The Hay Game has been cancelled (Not enough players)");
		   SetDynamicObjectPos(MovingHay[0], -1033.86, 814.61, 78.30);
		   foreach(new i : Player) TextDrawHideForPlayer(i, Hwaiting);
	  }
  }
}

forward StartHay();
public StartHay()
{
    KillTimer(haygametimer);
    haygametimer=-1;
    new count=CountHay();
    if(count > 0)
    {
           SendClientMessageToAll(0xF86EFFFF, "» Hay Game «{FF6EC0} The Hay Game has been started.");
		   MoveDynamicObject(MovingHay[0], -1024.7136, 814.6202, 78.3024, 5.0);
		   MoveDynamicObject(MovingHay[1], -1045.85, 793.62, 85.92, 5.0);
		   MoveDynamicObject(MovingHay[2], -1052.32, 762.79, 95.84, 5.0);
		   MoveDynamicObject(MovingHay[3], -1052.39, 758.44, 96.84, 5.0);
		   MoveDynamicObject(MovingHay[4], -1052.40, 754.13, 97.84, 5.0);
		   MoveDynamicObject(MovingHay[5], -1052.40, 749.92, 95.84, 5.0);
		   MoveDynamicObject(MovingHay[6], -1052.35, 745.61, 96.84, 5.0);
		   MoveDynamicObject(MovingHay[7], -1007.35, 817.99, 110.0, 5.0);
		   MoveDynamicObject(MovingHay[8], -962.32, 769.81, 118.86, 5.0);
		   MoveDynamicObject(MovingHay[9], -959.72, 766.75, 119.86, 5.0);
		   MoveDynamicObject(MovingHay[10], -957.19, 763.71, 117.86, 5.0);
		   MoveDynamicObject(MovingHay[11], -954.64, 760.64, 119.86, 5.0);
		   MoveDynamicObject(MovingHay[12], -952.08, 757.49, 118.86, 5.0);
		   haygamestarted=1;
		   foreach(new i : Player)
		   {
			  if(GetPVarInt(i, "InHay"))
			  {
      			 SendInfoText(i, 1000, "~g~Go");
      			 PlayerPlaySound(i, 15805, 0, 0, 0);
				 TextDrawHideForPlayer(i, Hwaiting);
			  }
		   }

    }
    else
    {
	       KillTimer(haygametimer);
           KillTimer(haygametimer2);
           haygametimer=-1;
           haygametimer2=-1;
           haygamestarted = 0;
           SendClientMessageToAll(0xF86EFFFF, "» Hay Game «{FF6EC0} The Hay Game has been cancelled (Not enough players)");
		   SetDynamicObjectPos(MovingHay[0], -1033.86, 814.61, 78.30);
		   foreach(new i : Player)
		   {
			  if(GetPVarInt(i, "InHay"))
			  {
				  LoadPlayerCoords(i);
				  DeletePVar(i, "InHay");
				  TextDrawHideForPlayer(i, Hwaiting);
			  }
		   }
    }
    return 1;
}*/
forward StartHayCount();
public StartHayCount()
{
  if(HayStartTime > 0)
  {
      new count;
	  HayStartTime--;
	  new str[128];
	  format(str, sizeof(str), "~p~Hay ~r~starts in ~y~%d ~g~seconds", HayStartTime);
	  foreach(new i : Player)
	  {
		  if(GetPVarInt(i, "InHay"))
		  {
			 SendInfoText(i, 1000, str);
			 count++;
		     if(HayStartTime == 3) PlayerPlaySound(i, 7417, 0, 0, 0);
		     else if(HayStartTime == 2) PlayerPlaySound(i, 7418, 0, 0, 0);
		     else if(HayStartTime == 1) PlayerPlaySound(i, 7419, 0, 0, 0);
		  }
	  }
	  if(count ==0)
	  {
	       KillTimer(haygametimer);
           KillTimer(haygametimer2);
           haygametimer=-1;
           haygametimer2=-1;
           haygamestarted = 0;
           SendClientMessageToAll(0xF86EFFFF, "» Hay Game «{FF6EC0} The Hay Game has been cancelled {F86EFF}(Not enough players)");
		   SetDynamicObjectPos(MovingHay[0], -1033.86, 814.61, 78.30);
		   SetDynamicObjectPos(MovingHay2[18], -380.20999, 618.88000, 1002.75000);
		   SetDynamicObjectPos(MovingHay3[13], 315.42001, -1185.25000, 1002.78003);
	  	   SetDynamicObjectRot(MovingHay3[13], 0.0, 0.0, 0.0);
	  }
  }
  else
  {
	       KillTimer(haygametimer);
           haygametimer=-1;

  }
}

forward StartHay();
public StartHay()
{
    KillTimer(haygametimer);
    haygametimer=-1;
    new count=CountHay();
    if(count > 0)
    {
           SendClientMessageToAll(0xF86EFFFF, "» Hay Game «{FF6EC0} The Hay Game has been started.");
		   MoveDynamicObject(MovingHay[0], -1024.7136, 814.6202, 78.3024, 5.0);
		   MoveDynamicObject(MovingHay[1], -1045.85, 793.62, 85.92, 5.0);
		   MoveDynamicObject(MovingHay[2], -1052.32, 762.79, 95.84, 5.0);
		   MoveDynamicObject(MovingHay[3], -1052.39, 758.44, 96.84, 5.0);
		   MoveDynamicObject(MovingHay[4], -1052.40, 754.13, 97.84, 5.0);
		   MoveDynamicObject(MovingHay[5], -1052.40, 749.92, 95.84, 5.0);
		   MoveDynamicObject(MovingHay[6], -1052.35, 745.61, 96.84, 5.0);
		   MoveDynamicObject(MovingHay[7], -1007.35, 817.99, 110.0, 5.0);
		   MoveDynamicObject(MovingHay[8], -962.32, 769.81, 118.86, 5.0);
		   MoveDynamicObject(MovingHay[9], -959.72, 766.75, 119.86, 5.0);
		   MoveDynamicObject(MovingHay[10], -957.19, 763.71, 117.86, 5.0);
		   MoveDynamicObject(MovingHay[11], -954.64, 760.64, 119.86, 5.0);
		   MoveDynamicObject(MovingHay[12], -952.08, 757.49, 118.86, 5.0);
		   //
	   	   MoveDynamicObject(MovingHay2[0], -349.70880, 598.71619, 999.60822-10.0, 5.0);
		   MoveDynamicObject(MovingHay2[1], -349.70880, 593.71619, 1001.10822-5.0, 5.0);
		   MoveDynamicObject(MovingHay2[2], -349.70880, 588.71619, 1002.10822-3.0, 5.0);
		   MoveDynamicObject(MovingHay2[3], -349.6611, 575.7006, 1002.6082, 5.0);//Old is -349.70880, 570.71619, 992.60822
		   MoveDynamicObject(MovingHay2[4], -349.6731, 547.8131, 992.6082, 5.0);//Old is -349.7751, 562.6813, 992.6082
		   MoveDynamicObject(MovingHay2[5], -349.7370, 534.7965, 996.6082, 5.0);//Old is -349.6755, 539.5939, 992.6082

		   MoveDynamicObject(MovingHay2[6], -373.20880, 514.71619+3.0, 987.10822, 5.0);
		   MoveDynamicObject(MovingHay2[7], -379.20880, 514.71619-3.0, 987.10822, 5.0);

		   MoveDynamicObject(MovingHay2[8], -443.13879, 522.71619, 975.69818+3, 5.0);
		   MoveDynamicObject(MovingHay2[9], -443.13879, 527.71619, 975.69818-3, 5.0);
		   MoveDynamicObject(MovingHay2[10], -443.13879, 532.71619, 975.69818+3, 5.0);
		   MoveDynamicObject(MovingHay2[11], -443.13879, 537.71619, 975.69818-3, 5.0);
		   MoveDynamicObject(MovingHay2[12], -443.13879, 542.71619, 975.69818+3, 5.0);

		   MoveDynamicObject(MovingHay2[13], -392.13879, 547.71619, 977.69818+3, 5.0);
		   MoveDynamicObject(MovingHay2[14], -400.13879, 547.71619, 977.69818-3, 5.0);
		   MoveDynamicObject(MovingHay2[15], -404.13879, 543.71619, 977.69818+3, 5.0);
		   MoveDynamicObject(MovingHay2[16], -396.13879, 543.71619, 977.69818-3, 5.0);
		   MoveDynamicObject(MovingHay2[17], -388.13879, 543.71619, 977.69818+3, 5.0);
		   MoveDynamicObject(MovingHay2[18], -380.20999, 618.88000, 997.2630, 5.0);

		   MoveDynamicObject(MovingHay3[10], 266.14001, -1259.16003, 1050.50000-10.0, 5.0);
		   MoveDynamicObject(MovingHay3[11], 266.14001, -1267.263, 1047.8600, 5.0);
		   MoveDynamicObject(MovingHay3[12], 266.14001, -1283.16003, 1048.5000, 5.0);
		   MoveDynamicObject(MovingHay3[13], 310.0714, -1185.2618, 1005.6710, 2.0, 0.0000, -90.0000, 0.0000);

		   MoveDynamicObject(MovingHay3[1], 306.14001, -1198.16003, 1032.00000, 5.0);
		   MoveDynamicObject(MovingHay3[3], 296.14001, -1198.16003, 1042.00000, 5.0);


		   for(new x=0; x<10; x++)
		   {
			   new objectid= MovingHay3[x];
			   new Float:pos[6];
			   GetDynamicObjectPos(objectid, pos[0], pos[1], pos[2]);
			   GetDynamicObjectRot(objectid, pos[3], pos[4], pos[5]);
               MoveDynamicObject(objectid, pos[0], pos[1], pos[2]+0.1, 0.05, pos[3]+180.0, pos[4], pos[5]);
		   }


		   //
		   haygamestarted=1;
		   foreach(new i : Player)
		   {
			  if(GetPVarInt(i, "InHay"))
			  {
      			 SendInfoText(i, 1000, "~g~Go");
      			 PlayerPlaySound(i, 15805, 0, 0, 0);
			  }
		   }

    }
    else
    {
	       KillTimer(haygametimer);
           KillTimer(haygametimer2);
           haygametimer=-1;
           haygametimer2=-1;
           haygamestarted = 0;
           SendClientMessageToAll(0xF86EFFFF, "» Hay Game «{FF6EC0} The Hay Game has been cancelled {F86EFF}(Not enough players)");
		   SetDynamicObjectPos(MovingHay[0], -1033.86, 814.61, 78.30);
		   SetDynamicObjectPos(MovingHay2[18], -380.20999, 618.88000, 1002.75000);
		   SetDynamicObjectPos(MovingHay3[13], 315.42001, -1185.25000, 1002.78003);
	  	   SetDynamicObjectRot(MovingHay3[13], 0.0, 0.0, 0.0);
		   foreach(new i : Player)
		   {
			  if(GetPVarInt(i, "InHay"))
			  {
				  LoadPlayerCoords(i);
				  DeletePVar(i, "InHay");
			  }
		   }
    }
    return 1;
}
stock ShowResultsWindow(playerid)
{
	if(Songs_Found[playerid] == 0)return SendClientMessage(playerid, -1, ""RED_"» Error « {BABABA}No results are found for your search!");
	new c = 0;
	for(new l = 0; l < Songs_Found[playerid]; l++)
	{
		if(l == 0) format(Dialog_String, sizeof(Dialog_String), "{1BE0D6}%s", Results_Names[playerid][l]);
		else
		{
			if(c == 0)
			{
				format(Dialog_String, sizeof(Dialog_String), "%s\n{93FAF5}%s", Dialog_String, Results_Names[playerid][l]);
				c = 1;
			}
			else
			{
				format(Dialog_String, sizeof(Dialog_String), "%s\n{1BE0D6}%s", Dialog_String, Results_Names[playerid][l]);
				c = 0;
			}
		}
	}
	new title[64]; format(title, 64, "GTADM - Search results for {80FF00}\"%s\":", Last_Search[playerid]);
	if(Request_Type[playerid] == 1) ShowPlayerDialog(playerid, 18506, DIALOG_STYLE_LIST, title, Dialog_String, "Play!", "Close");
	else ShowPlayerDialog(playerid, 18505, DIALOG_STYLE_LIST, title, Dialog_String, "Play!", "Close");
	return 1;
}
forward MyMp3SkullHttpResponse(index, response_code, data[]);
public MyMp3SkullHttpResponse(index, response_code, data[])
{
    if(response_code == 200)
    {
		new assist[128];
		new f = strfind(data, "<br>", true, 0), t = 0, c = 0, offset = 0;
		while(f != -1 && t < 16)
		{
			strmid(assist, data, f + 4, strfind(data, "</br>", true, f + 5));
		    if(!c)
			{
				format(Results_Names[index][t], 128, "%s", assist);
				c = 1;
			}
			else
			{
				format(Results_Links[index][t], 128, "http://%s", assist);
				c = 0;
				t++;
			}
			offset = f + 5;
			f = strfind(data, "<br>", true, offset);
		}
		Songs_Found[index] = t;
		ShowResultsWindow(index);
    }
    else
    SendClientMessage(index, -1, ""RED_"» Error « {BABABA}Error! Please try again later");
    return 1;
}
CMD:youtube(playerid, params[])
{
    if(musiclock == 1) return SendWarning(playerid, "You cant use the youtube at the moment!");
	if(sscanf(params, "s[128]", params)) return SendWarning(playerid, "/youtube < Name of video to search >");
	Request_Type[playerid] = 0;
	new assist[256];
	format(assist, sizeof(assist), "gtadm.com/a.php?musica=%s", urlencode(params));
    HTTP(playerid, HTTP_GET, assist, "", "MyYouTubeHttpResponse");
    SendClientMessage(playerid, -1, "Searching...");
    return 1;
}
CMD:youtubeid(playerid, params[])
{
    if(musiclock == 1) return SendWarning(playerid, "You cant use the youtube at the moment!");
	if(!IsAdmin(playerid, 5) || PlayerInfo[playerid][UserID] != 153569) return SendMsg(playerid, 5);
	new id;
	if(sscanf(params, "us[128]", id, params)) return SendWarning(playerid, "/youtubeid <playerid> < Name of video to search >");
    if(!IsPlayerConnected(id))  return SendWarning(playerid, "{BABABA}This player is not connected");
	Request_Type[playerid] = 2;
	Request_ID[playerid]=id;
	new assist[256];
	format(assist, sizeof(assist), "gtadm.com/a.php?musica=%s", urlencode(params));
    HTTP(playerid, HTTP_GET, assist, "", "MyYouTubeHttpResponse");
    SendClientMessage(playerid, -1, "Searching...");
    return 1;
}
CMD:playyoutube(playerid, params[])
{
    if(musiclock == 1) return SendWarning(playerid, "You cant use the youtube at the moment!");
    if(!IsAdmin(playerid, 5) && PlayerInfo[playerid][UserID] != 153569) return SendMsg(playerid, 5);
	if(sscanf(params, "s[128]", params)) return SendWarning(playerid, "/youtube < Name of video to search >");
	Request_Type[playerid] = 1;
	new assist[256];
	format(assist, sizeof(assist), "gtadm.com/a.php?musica=%s", urlencode(params));
    HTTP(playerid, HTTP_GET, assist, "", "MyYouTubeHttpResponse");
    SendClientMessage(playerid, -1, "Searching...");
    return 1;
}


CMD:mp3(playerid, params[])
{
    if(musiclock == 1) return SendWarning(playerid, "You cant use the MP3 at the moment!");
	if(sscanf(params, "s[128]", params)) return SendWarning(playerid, "/mp3 <MP3 URL>");
	PlayAudioStreamForPlayer(playerid, params);
    SendClientMessage(playerid, GRAY, "- Type (/stopmusic) to stop the music.");
    return 1;
}
CMD:playmp3(playerid, params[])
{
    if(!IsAdmin(playerid, 5) && PlayerInfo[playerid][UserID] != 153569) return SendMsg(playerid, 5);
    if(musiclock == 1) return SendWarning(playerid, "You cant use the MP3 at the moment!");
	if(sscanf(params, "s[128]", params)) return SendWarning(playerid, "/playmp3 <MP3 URL>");
	foreach(new i : Player) PlayAudioStreamForPlayer(i, params), SendClientMessage(i, GRAY, "- Type (/stopmusic) to stop the music.");
    if(!IsAdmin(playerid, 1))
	{
      new str[128];
      format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}Admin %s has played an audio stream for all players.", gAname(playerid), playerid);
      SendClientMessageToAll(-1, str);
    }
    return 1;
}



forward MyYouTubeHttpResponse(index, response_code, data[]);
public MyYouTubeHttpResponse(index, response_code, data[])
{
  if(response_code == 200)
  {
	if(strlen(data) < 10) SendClientMessage(index, -1, ""RED_"» Error « {BABABA}No results found");
	else
	{
		   if(Request_Type[index] == 0) PlayAudioStreamForPlayer(index, data);
		   else if(Request_Type[index] == 1)
		   {
		     foreach(new i : Player) PlayAudioStreamForPlayer(i, data);
             if(!IsAdmin(index, 1))
             {
               new str[128];
               format(str, sizeof(str), "{3BB023}» Admin action « {ABFF85}Admin %s has played an audio stream for all players.", gAname(index), index);
               SendClientMessageToAll(-1, str);
             }
           }
		   else if(Request_Type[index] == 2) PlayAudioStreamForPlayer(Request_ID[index], data);
	}
  }
  else SendClientMessage(index, -1, ""RED_"» Error « {BABABA}Error! please try again later");
  return 1;
}

stock ShowScreenTXD(playerid)
{
    if(!GetPVarInt(playerid, "RACER") && HideShit[playerid] == 0 && !GetPVarInt(playerid, "Connectted") )
    {
         for(new x=0; x<sizeof(ScreenTXDS); x++) TextDrawShowForPlayer(playerid, ScreenTXDS[x]);
	}
}
stock HideScreenTXD(playerid, type=0)
{
   if(type == 1) for(new x=0; x<sizeof(ScreenTXDS); x++) TextDrawHideForPlayer(playerid, ScreenTXDS[x]);
   else  for(new x=0; x<sizeof(ScreenTXDS); x++) if(x!= 9 && x!= 10 && x!= 5) TextDrawHideForPlayer(playerid, ScreenTXDS[x]);
}

stock IsArmedVehicle(vehicleid)
{
  if(vehicleid == 425 || vehicleid == 430 || vehicleid == 432 || vehicleid == 447 || vehicleid == 464 || vehicleid == 476 || vehicleid == 520) return 1;
  return 0;
}



CMD:parkoureditor(playerid)
{
  if(GetPVarInt(playerid, "MissionProgress") || IsDeathMatcher(playerid)) return SendMsg(playerid, 1);
  if(PlayerInfo[playerid][pOurAdmin] == 0) return SendMsg(playerid, 5);
  if(GetPVarInt(playerid, "PourEditing")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You are already in the parkour construction mode");
  if(PourEditOn == 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Another admin is already in the parkour construction mode");
  ShowPlayerDialog(playerid, 16749, DIALOG_STYLE_LIST, "Parkour Construction", "Create a new Parkour\nView Created Parkours\nDelete a Parkour\nRename a Parkour\nReset Parkour Records", "Select", "Exit");
  return 1;
}


CMD:addcp(playerid, params[])
{
   new carid;
   if(!GetPVarInt(playerid, "PourEditing")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You are not in the parkour construction mode");
   if (sscanf(params, "k<vehicle>", carid)) return SendWarning(playerid, "/addcp"GRAY_" <carID>"), SendWarning(playerid, "Use 0 as carID if you dont want any cars.");
   if(carid < 400 || carid > 611) carid=0;
   new Float:pos[4];
   new r=PourEditID;
   new pr=PourEditCount;
   printf("%d %d %d", r, pr, carid);
   PourEditCount++;
   GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
   GetPlayerFacingAngle(playerid, pos[3]);


   new str[128];
   if(carid > 0) format(str, sizeof(str), "-Parkour Editor- Checkpoints created : %d  (Vehicle: %d)", PourEditCount, carid);
   else format(str, sizeof(str), "-Parkour Editor- Checkpoints created : %d  (Vehicle: None)", PourEditCount);
   SendClientMessage(playerid, -1, str);

   ParkOurCPS[r][pr][CPposX]=pos[0];
   ParkOurCPS[r][pr][CPposY]=pos[1];
   ParkOurCPS[r][pr][CPposZ]=pos[2];
   ParkOurCPS[r][pr][CPCar]=carid;

   EDITORCPS[playerid][pr] = CreateDynamicRaceCP(2, pos[0], pos[1], pos[2], 0.0, 0.0, 0.0, 5.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), playerid);
   return 1;
}



stock GetFreepOurID()
{
	 new Q;
	 for(new x=0; x<MAX_POURS; x++)
	 {
		  if(ParkOurInfo[x][CPcount] == 0)
		  {
				Q=x;
				break;
		  }
	 }
	 return Q;
}
stock PourPath(gateid)
{
  new gatefile[64];
  format(gatefile, sizeof(gatefile), "ParkOurs/Pour%d.ini", gateid);
  return gatefile;
}
/*
public OnPlayerStreamIn(playerid, forplayerid)
{
	if(PlayerTargetID[forplayerid] == playerid) //Targetting system
	{
	    new vehicleid = GetPlayerVehicleID(forplayerid);
	    new VehicleModel = GetVehicleModel(vehicleid);

	    if(VehicleModel == 520 || VehicleModel == 425 || VehicleModel == 447 || VehicleModel == 432 || VehicleModel == 476) //hydra/hunter/sea sparrow/rhino
	    {
		    if(PlayerTargetUpdatetRunning[forplayerid] == true)
		    {
		        KillTimer(PlayerTargetUpdatet[forplayerid]);
		        PlayerTargetUpdatetRunning[forplayerid] = false;
		    }

			if(PlayerTargetTextCreated[forplayerid] == true)
			{
			    DeletePlayer3DTextLabel(forplayerid, PlayerText3D:PlayerTargetText[forplayerid]);
			}

		    PlayerTargetText[forplayerid] = CreatePlayer3DTextLabel(forplayerid, "{FF0000}v\n>  o  <\n^", 0xFFFFFFFF, 0.0, 0.0, 0.0, 100000.0, PlayerTargetID[forplayerid], INVALID_VEHICLE_ID, 0);
		    PlayerTargetTextCreated[forplayerid] = true;
	    }
	}
}
public OnPlayerStreamOut(playerid, forplayerid)
{
	if(PlayerTargetID[forplayerid] == playerid) //Targetting system
	{
	    new vehicleid = GetPlayerVehicleID(forplayerid);
	    new VehicleModel = GetVehicleModel(vehicleid);

	    if(VehicleModel == 520 || VehicleModel == 425 || VehicleModel == 447 || VehicleModel == 432) //hydra/hunter
	    {
			if(PlayerTargetTextCreated[forplayerid] == true)
			{
			    DeletePlayer3DTextLabel(forplayerid, PlayerText3D:PlayerTargetText[forplayerid]);
			}

			new Float:px, Float:py, Float:pz;
			GetPlayerPos(playerid, px, py, pz);

		    PlayerTargetText[forplayerid] = CreatePlayer3DTextLabel(forplayerid, "{FF0000}v\n>  o  <\n^", 0xFFFFFFFF, px, py, pz, 100000.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0);
		    PlayerTargetTextCreated[forplayerid] = true;

		    if(PlayerTargetUpdatetRunning[forplayerid] == true)
		    {
		        KillTimer(PlayerTargetUpdatet[forplayerid]);
		    }

		    PlayerTargetUpdatet[forplayerid] = SetTimerEx("PlayerTargetUpdate", 202, 1, "i", forplayerid);
		    PlayerTargetUpdatetRunning[forplayerid] = true;
	    }
	}
}
public PlayerTargetUpdate(playerid) //Targetting system
{
	if(!IsPlayerStreamedIn(PlayerTargetID[playerid], playerid))
	{
		if(PlayerTargetTextCreated[playerid] == true)
		{
		    DeletePlayer3DTextLabel(playerid, PlayerText3D:PlayerTargetText[playerid]);
		}

		new Float:px, Float:py, Float:pz;
		GetPlayerPos(PlayerTargetID[playerid], px, py, pz);

	    PlayerTargetText[playerid] = CreatePlayer3DTextLabel(playerid, "{FF0000}v\n>  o  <\n^", 0xFFFFFFFF, px, py, pz, 100000.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0);
	    PlayerTargetTextCreated[playerid] = true;
	}
	return 1;
}*/
/*

public OnPlayerStreamIn(playerid, forplayerid)
{
        if(IsPlayerNPC(playerid)) return 1;
        if(IsPlayerNPC(forplayerid)) return 1;
        if(strlen(PlayerInfo[playerid][HeadText]) > 2) p3D[playerid] = CreatePlayer3DTextLabel(forplayerid, PlayerInfo[playerid][HeadText], -1, 0.0, 0.0, 0.35, 30.0, playerid, INVALID_VEHICLE_ID, 0);
        return 1;
}
public OnPlayerStreamOut(playerid, forplayerid)
{
        if(IsPlayerNPC(playerid)) return 1;
        if(IsPlayerNPC(forplayerid)) return 1;
        DeletePlayer3DTextLabel(forplayerid, p3D[playerid]);
        return 1;
}*/

stock TogglePlayerControllableEx(playerid, arg)
{
  if(IsPlayerConnected(playerid))
  {
	if(arg == 0)
	{
		GetPlayerHealth(playerid, PreToggleHealth[playerid]);
		GetPlayerArmour(playerid, PreToggleArmour[playerid]);
		SetPlayerHealth(playerid, 0x7F800000);
		TogglePlayerControllable(playerid, 0);
		PlayerIsFrozen[playerid] = true;
	}
	else
	{
		TogglePlayerControllable(playerid, 1);
		SetPlayerHealth(playerid, PreToggleHealth[playerid]);
		SetPlayerArmour(playerid, PreToggleArmour[playerid]);
		PlayerIsFrozen[playerid] = false;
	}
  }
  return 1;
}
stock TogglePlayerControllable2(playerid, arg)
{
  if(IsPlayerConnected(playerid))
  {
	if(arg == 0)
	{
		TogglePlayerControllable(playerid, 0);
		PlayerIsFrozen[playerid] = true;
	}
	else
	{
		TogglePlayerControllable(playerid, 1);
		PlayerIsFrozen[playerid] = false;
	}
  }
  return 1;
}

/*stock SendaMsg(qeq[])
{
	if(strlen(cMSG) > 0) format(dMSG, sizeof(dMSG), "%s", cMSG);
	if(strlen(bMSG) > 0) format(cMSG, sizeof(cMSG), "%s", bMSG);
	format(bMSG, sizeof(bMSG), "%s", qeq);

	format(bMSG, sizeof(bMSG), "%s", qeq);
	format(bMSG, sizeof(bMSG), "%s", qeq);
	TextDrawSetString(ScreenTXDS[9], qeq);

	TextDrawSetString(ScreenTXDS[9], bMSG);
	TextDrawSetString(ScreenTXDS[5], cMSG);
	TextDrawSetString(ScreenTXDS[10], dMSG);

}
*/
stock SendaMsg(qeq[])
{
	if(strlen(cMSG) > 0) format(dMSG, sizeof(dMSG), "%s", cMSG);
	if(strlen(bMSG) > 0) format(cMSG, sizeof(cMSG), "%s", bMSG);
	format(bMSG, sizeof(bMSG), "%s", qeq);

	format(bMSG, sizeof(bMSG), "%s", qeq);
	format(bMSG, sizeof(bMSG), "%s", qeq);
	TextDrawSetString(ScreenTXDS[10], qeq);

	TextDrawSetString(ScreenTXDS[10], bMSG);
	TextDrawSetString(ScreenTXDS[5], cMSG);
	TextDrawSetString(ScreenTXDS[9], dMSG);

}
forward ExpirePlayersVIP();
public ExpirePlayersVIP()
{
    new string[128];

    mysql_query(GTADM, "DELETE FROM `bans` WHERE `Ban_Type` = 2 AND TIMESTAMPDIFF(MINUTE, NOW(), DATE_ADD(Time, INTERVAL Period MINUTE))  <= 0;");

	format(string, sizeof(string), "UPDATE users SET IsVIP = 0, vipexpiresin = 0 WHERE IsVIP = 1 AND vipexpiresin < %i", gettime());
	mysql_query(GTADM, string);
	foreach(new i : Player) {
	    if(GetPVarInt(i, "LOGGED")==1 && PlayerInfo[i][IsVIP] && PlayerInfo[i][vipexpiresin] < gettime()) {
			PlayerInfo[i][vipexpiresin] = 0;
	        PlayerInfo[i][IsVIP] = 0;
	        SendClientMessage(i, -1, "Your VIP has expired.");
	        ForceClassSelection(i);
	        SetPlayerHealth(i, 0.0);
	        //==================================================================
	        PlayerInfo[i][pVipSkin] = 0;
			SetPlayerSkin(i, 0);
    		new Query[128];
    		format(Query, sizeof(Query), "UPDATE `users` SET `VipSkin` = 0 WHERE `UserID` = '%d'", PlayerInfo[i][UserID]);
    		mysql_query(GTADM, Query);
    		//==================================================================
    		PlayerInfo[i][pVipJob] = 0;
    		new Query2[128];
    		format(Query2, sizeof(Query2), "UPDATE `users` SET `VipJob` = 0 WHERE `UserID` = '%d'", PlayerInfo[i][UserID]);
    		mysql_query(GTADM, Query2);
    		//==================================================================
    		PlayerInfo[i][pVipWeapon1] = 0;
			PlayerInfo[i][pVipAmmo1] = 0;
			new Query3[128];
			format(Query3, sizeof(Query3), "UPDATE `users` SET `VipWeap1` = 0, `VipAmmo1` = 0 WHERE `UserID` = '%d'", PlayerInfo[i][UserID]);
			mysql_query(GTADM, Query3);
			//==================================================================
			PlayerInfo[i][pVipWeapon2] = 0;
			PlayerInfo[i][pVipAmmo2] = 0;
            new Query4[128];
			format(Query4, sizeof(Query4), "UPDATE `users` SET `VipWeap2` = 0, `VipAmmo2` = 0 WHERE `UserID` = '%d'", PlayerInfo[i][UserID]);
			mysql_query(GTADM, Query4);
			//==================================================================
			PlayerInfo[i][pVipWeapon3] = 0;
			PlayerInfo[i][pVipAmmo3] = 0;
			new Query5[128];
			format(Query5, sizeof(Query5), "UPDATE `users` SET `VipWeap3` = 0, `VipAmmo3` = 0 WHERE `UserID` = '%d'", PlayerInfo[i][UserID]);
			mysql_query(GTADM, Query5);
			//==================================================================
			PlayerInfo[i][HeadText][0]='\0';
	        new Query6[168];
            format(Query6, sizeof(Query6), "UPDATE `users` SET `HeadText` = 'no' WHERE `UserID` = '%d'", PlayerInfo[i][UserID]);
            mysql_query(GTADM, Query6);
	    }
	}
}

//SKills Stock
stock HideSkills(playerid)
{
   for(new x=0; x<35; x++) PlayerTextDrawHide(playerid, ShiText[playerid][x]);

}
/*public UpdateHealth()
{
  if(PlayerHealthCount < 100) PlayerHealthCount ++;
  else PlayerHealthCount = 0;
  if(PlayerArmourCount < 100) PlayerArmourCount ++;
  else PlayerArmourCount = 0;
  new Float:PlayerHealth;
  new Float:PlayerArmour;
  for(new i; i<MAX_PLAYERS; i++)
  {
    if(IsPlayerConnected(i) && i == PowerUpPlayer[5])
    {
      if(Spawned[i] == 1 && PlayerHealthCount < 100 && PlayerArmourCount < 100 && GOD[i] == 0 && aduty[i] == 0)
      {
		GetPlayerHealth(i, PlayerHealth);
		GetPlayerArmour(i, PlayerArmour);
		if(PlayerHealth < MAX_HEALTH && PlayerHealth != 0) SetPlayerHealth(i, PlayerHealth + 1.0);
		if(PlayerHealth == MAX_HEALTH && PlayerArmour < MAX_ARMOUR && PlayerArmour != 0) SetPlayerArmour(i, PlayerArmour + 1.0);
		//if(PlayerArmour < MAX_ARMOUR && PlayerArmour != 0)
      }
    }
  }
  return 1;
}
*/
stock UpdateSkills(playerid, skill, amount)
{
   new str[128];
   pEXP[playerid][skill]=pEXP[playerid][skill]+amount;
   if(GetEXPfromLevel(pLevel[playerid][skill])-pEXP[playerid][skill] <= 0)
   {
	   while (pEXP[playerid][skill] > 0)
	   {
            pEXP[playerid][skill]-=GetEXPfromLevel(pLevel[playerid][skill]);
            if(pEXP[playerid][skill] > 0)
            {
				pLevel[playerid][skill]++;
			}
			else
			{
				break;
			}
	   }
       format(str, sizeof(str), "Congratulations! ~r~Your %s level has advanced.", skullname[skill]);
	   PlayerTextDrawSetString(playerid, pAchTD[playerid], str);
	   PlayerTextDrawShow(playerid, pAchTD[playerid]);
	   format(str, sizeof(str), "{A81BE0}» Skills « {1B77E0}Your %s level has advanced to {A81BE0}level %d", skullname[skill], pLevel[playerid][skill]);
	   SendClientMessage(playerid, -1, str);
	   PlayAudioStreamForPlayer(playerid, "http://dl.dropbox.com/u/52869044/Super%20Mario%20Bros.-Mushroom%20Sound%20Effect.mp3");
	   SetTimerEx("HideSkillUpdate", 5000, false, "i", playerid);
	   SaveEXP(playerid);
   }
   if(pLevel[playerid][combat] >= 25) SetPVarInt(playerid, "CanHeadShot", true);
   if(pLevel[playerid][combat] >= 30) SetPVarInt(playerid, "OneShootKill", true);
}
stock SaveEXP(playerid)
{
	 new query[400];
	 format(query, sizeof(query), "UPDATE `users` SET `Ecombat` = '%d', `Efist` = '%d', `Ehitpoint` = '%d', `Edrugdealing` = '%d', `Eracing` = '%d', `Egangster` = '%d', `Emedicine` = '%d', `Ejustice` = '%d' WHERE `UserID` = '%d'"
	 , pEXP[playerid][combat], pEXP[playerid][fist], pEXP[playerid][hitpoint], pEXP[playerid][drugdealing], pEXP[playerid][driving], pEXP[playerid][gangster], pEXP[playerid][medicine], pEXP[playerid][justice], PlayerInfo[playerid][UserID]);
	 mysql_query(GTADM, query);

	 format(query, sizeof(query), "UPDATE `users` SET `combat` = '%d', `fist` = '%d', `hitpoint` = '%d', `drugdealing` = '%d', `racing` = '%d', `gangster` = '%d', `medicine` = '%d', `justice` = '%d' WHERE `UserID` = '%d'"
	 , pLevel[playerid][combat], pLevel[playerid][fist], pLevel[playerid][hitpoint], pLevel[playerid][drugdealing], pLevel[playerid][driving], pLevel[playerid][gangster], pLevel[playerid][medicine], pLevel[playerid][justice], PlayerInfo[playerid][UserID]);
	 mysql_query(GTADM, query);

}
forward HideSkillUpdate(playerid);
public HideSkillUpdate(playerid)
{
   PlayerTextDrawHide(playerid, pAchTD[playerid]);
   return 1;
}
stock ShowSkills(playerid)
{
   if(pLevel[playerid][gangster] < 3) pLevel[playerid][gangster]=3;
   if(pLevel[playerid][combat] < 3) pLevel[playerid][combat]=3;
   if(pLevel[playerid][driving] < 3) pLevel[playerid][driving]=3;
   if(pLevel[playerid][justice] < 3) pLevel[playerid][justice]=3;
   if(pLevel[playerid][drugdealing] < 3) pLevel[playerid][drugdealing]=3;
   if(pLevel[playerid][medicine] < 3) pLevel[playerid][medicine]=3;
   if(pLevel[playerid][hitpoint] < 3) pLevel[playerid][hitpoint]=3;
   if(pLevel[playerid][fist] < 3) pLevel[playerid][fist]=3;
   new str[50];
   format(str, sizeof(str), "~y~%d", pLevel[playerid][gangster]);
   PlayerTextDrawSetString(playerid, ShiText[playerid][34], str);

   format(str, sizeof(str), "%d Exp Left", GetEXPfromLevel(pLevel[playerid][driving]+1)-pEXP[playerid][driving]);
   PlayerTextDrawSetString(playerid, ShiText[playerid][32], str);

   format(str, sizeof(str), "%d Exp Left", GetEXPfromLevel(pLevel[playerid][gangster]+1)-pEXP[playerid][gangster]);
   PlayerTextDrawSetString(playerid, ShiText[playerid][31], str);

   format(str, sizeof(str), "~y~%d", pLevel[playerid][medicine]);
   PlayerTextDrawSetString(playerid, ShiText[playerid][30], str);

   format(str, sizeof(str), "~y~%d", pLevel[playerid][drugdealing]);
   PlayerTextDrawSetString(playerid, ShiText[playerid][27], str);

   format(str, sizeof(str), "~y~%d", pLevel[playerid][justice]);
   PlayerTextDrawSetString(playerid, ShiText[playerid][26], str);

   format(str, sizeof(str), "%d Exp Left", GetEXPfromLevel(pLevel[playerid][drugdealing]+1)-pEXP[playerid][drugdealing]);
   PlayerTextDrawSetString(playerid, ShiText[playerid][24], str);

   format(str, sizeof(str), "%d Exp Left", GetEXPfromLevel(pLevel[playerid][medicine]+1)-pEXP[playerid][medicine]);
   PlayerTextDrawSetString(playerid, ShiText[playerid][23], str);

   format(str, sizeof(str), "~y~%d", pLevel[playerid][combat]);
   PlayerTextDrawSetString(playerid, ShiText[playerid][18], str);

   format(str, sizeof(str), "~y~%d", pLevel[playerid][hitpoint]);
   PlayerTextDrawSetString(playerid, ShiText[playerid][14], str);

   format(str, sizeof(str), "%d Exp Left", GetEXPfromLevel(pLevel[playerid][hitpoint]+1)-pEXP[playerid][hitpoint]);
   PlayerTextDrawSetString(playerid, ShiText[playerid][12], str);

   format(str, sizeof(str), "%d Exp Left", GetEXPfromLevel(pLevel[playerid][fist]+1)-pEXP[playerid][fist]);
   PlayerTextDrawSetString(playerid, ShiText[playerid][11], str);

   format(str, sizeof(str), "~y~%d", pLevel[playerid][fist]);
   PlayerTextDrawSetString(playerid, ShiText[playerid][10], str);

   format(str, sizeof(str), "%d Exp Left", GetEXPfromLevel(pLevel[playerid][combat]+1)-pEXP[playerid][combat]);
   PlayerTextDrawSetString(playerid, ShiText[playerid][8], str);

   format(str, sizeof(str), "~y~%d", pLevel[playerid][driving]);
   PlayerTextDrawSetString(playerid, ShiText[playerid][6], str);

   format(str, sizeof(str), "%d Exp Left", GetEXPfromLevel(pLevel[playerid][justice]+1)-pEXP[playerid][justice]);
   PlayerTextDrawSetString(playerid, ShiText[playerid][3], str);

   format(str, sizeof(str), "Total Level - %d", calcucatetotallevel(playerid));
   PlayerTextDrawSetString(playerid, ShiText[playerid][4], str);

   for(new x=0; x<35; x++) PlayerTextDrawShow(playerid, ShiText[playerid][x]);
}
stock calcucatetotallevel(playerid)
{
   new v=pLevel[playerid][combat]+pLevel[playerid][fist]+pLevel[playerid][hitpoint]+pLevel[playerid][drugdealing]+pLevel[playerid][driving]+pLevel[playerid][gangster]+pLevel[playerid][medicine]+pLevel[playerid][justice];
   new Float:k=v/8;
   new d=floatround(k);
   return d;
}



stock GetEXPfromLevel(lvl)
{

	if(lvl < 3) lvl =3;
	new a=0;
	for(new x=1; x<lvl; x++)
	{
	  a += floatround(x+300*floatpower(2, x/7), floatround_floor);
	}
	return floatround(a/4, floatround_floor);
}

stock Createp3D(playerid)
{
	if(p3D[playerid] == INVALID_3DTEXT_ID)
	{
		p3D[playerid] = Create3DTextLabel(PlayerInfo[playerid][HeadText], 0xFF, 0, 0, 0, 50.0, GetPlayerVirtualWorld(playerid), true);
		Attach3DTextLabelToPlayer(p3D[playerid], playerid, 0, 0, 0.5);
		return 1;
	}
	return 0;

}


stock Destroyp3D(playerid)
{
	if (p3D[playerid] != INVALID_3DTEXT_ID)
	{
		Delete3DTextLabel(p3D[playerid]);
		p3D[playerid] = INVALID_3DTEXT_ID;
		return 1;
	}
	return 0;
}


stock SetPlayerVirtualWorldEX(playerid, worldid)
{
	if (SetPlayerVirtualWorld(playerid, worldid))
	{
	    if(IsBeingSpeced[playerid] == 1)
	    {
	        foreach (new i : Player)
	        {
	            if(spectatorid[i] == playerid)
	            {
	                SetPlayerInterior(i, GetPlayerInterior(playerid));
	                SetPlayerVirtualWorld(i, worldid);
	            }
	        }
	    }

		if (p3D[playerid] != INVALID_3DTEXT_ID)
		{
			Delete3DTextLabel(p3D[playerid]);
			p3D[playerid] = Create3DTextLabel(" ", 0xFF, 0, 0, 0, 50.0, worldid, true);
			Attach3DTextLabelToPlayer(p3D[playerid], playerid, 0, 0, 0.5);
		}
		if(worldid == 0 && Spawned[playerid]==1 && HideShit[playerid] == 0) PlayerTextDrawShow(playerid, Location[playerid][0]), PlayerTextDrawShow(playerid, Location[playerid][1]);
		else PlayerTextDrawHide(playerid, Location[playerid][0]), PlayerTextDrawHide(playerid, Location[playerid][1]);
		return 1;
	}
	return 0;

}
forward hidePMTD(playerid);
public hidePMTD(playerid)
{
		PlayerTextDrawHide(playerid, pPMTD[playerid][0]);
		PlayerTextDrawHide(playerid, pPMTD[playerid][1]);
		return 1;
}
forward HideMoneyTD(playerid);
public HideMoneyTD(playerid)
{
		PlayerTextDrawHide(playerid, pMoneyTD[playerid][0]);
		PlayerTextDrawHide(playerid, pMoneyTD[playerid][1]);
		PlayerTextDrawHide(playerid, pMoneyTD[playerid][2]);
		return 1;
}
stock CreategColor(playerid)
{
	gCol[playerid][0] = CreatePlayerTextDraw(playerid, 166.000000, 13.000000, "-");
	PlayerTextDrawBackgroundColor(playerid, gCol[playerid][0], 255);
	PlayerTextDrawFont(playerid, gCol[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid, gCol[playerid][0], 19.399997, 30.299995);
	PlayerTextDrawColor(playerid, gCol[playerid][0], -1);
	PlayerTextDrawSetOutline(playerid, gCol[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid, gCol[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, gCol[playerid][0], 1);

	gCol[playerid][1] = CreatePlayerTextDraw(playerid, 252.000000, 164.000000, "~r~~h~G~h~a~h~n~h~g~r~C~b~o~g~l~y~o~p~r~r~s");
	PlayerTextDrawBackgroundColor(playerid, gCol[playerid][1], 255);
	PlayerTextDrawFont(playerid, gCol[playerid][1], 3);
	PlayerTextDrawLetterSize(playerid, gCol[playerid][1], 0.490000, 2.199999);
	PlayerTextDrawColor(playerid, gCol[playerid][1], -1);
	PlayerTextDrawSetOutline(playerid, gCol[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, gCol[playerid][1], 1);

	gCol[playerid][2] = CreatePlayerTextDraw(playerid, 305.000000, 186.000000, "_");
	PlayerTextDrawAlignment(playerid, gCol[playerid][2], 2);
	PlayerTextDrawBackgroundColor(playerid, gCol[playerid][2], 255);
	PlayerTextDrawFont(playerid, gCol[playerid][2], 1);
	PlayerTextDrawLetterSize(playerid, gCol[playerid][2], 1.029999, 9.699993);
	PlayerTextDrawColor(playerid, gCol[playerid][2], -1);
	PlayerTextDrawSetOutline(playerid, gCol[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid, gCol[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, gCol[playerid][2], 1);
	PlayerTextDrawUseBox(playerid, gCol[playerid][2], 1);
	PlayerTextDrawBoxColor(playerid, gCol[playerid][2], 255);
	PlayerTextDrawTextSize(playerid, gCol[playerid][2], 113.000000, 319.000000);
 	gCol[playerid][4] = CreatePlayerTextDraw(playerid, 305.000000, 189.000000, "_");
	PlayerTextDrawAlignment(playerid, gCol[playerid][4], 2);
	PlayerTextDrawBackgroundColor(playerid, gCol[playerid][4], 255);
	PlayerTextDrawFont(playerid, gCol[playerid][4], 1);
	PlayerTextDrawLetterSize(playerid, gCol[playerid][4], 1.019999, -0.000001);
	PlayerTextDrawColor(playerid, gCol[playerid][4], -1);
	PlayerTextDrawSetOutline(playerid, gCol[playerid][4], 0);
	PlayerTextDrawSetProportional(playerid, gCol[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, gCol[playerid][4], 1);
	PlayerTextDrawUseBox(playerid, gCol[playerid][4], 1);
	PlayerTextDrawBoxColor(playerid, gCol[playerid][4], 255);
	PlayerTextDrawTextSize(playerid, gCol[playerid][4], 113.000000, 309.000000);
	PlayerTextDrawSetSelectable(playerid, gCol[playerid][4], 1);

	gCol[playerid][5] = CreatePlayerTextDraw(playerid, 305.000000, 193.500000, "_");
	PlayerTextDrawAlignment(playerid, gCol[playerid][5], 2);
	PlayerTextDrawBackgroundColor(playerid, gCol[playerid][5], 255);
	PlayerTextDrawFont(playerid, gCol[playerid][5], 1);
	PlayerTextDrawLetterSize(playerid, gCol[playerid][5], 1.019999, -0.000001);
	PlayerTextDrawColor(playerid, gCol[playerid][5], -1);
	PlayerTextDrawSetOutline(playerid, gCol[playerid][5], 0);
	PlayerTextDrawSetProportional(playerid, gCol[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, gCol[playerid][5], 1);
	PlayerTextDrawUseBox(playerid, gCol[playerid][5], 1);
	PlayerTextDrawBoxColor(playerid, gCol[playerid][5], 255);
	PlayerTextDrawTextSize(playerid, gCol[playerid][5], 113.000000, 309.000000);
	PlayerTextDrawSetSelectable(playerid, gCol[playerid][5], 1);

	gCol[playerid][6] = CreatePlayerTextDraw(playerid, 305.000000, 198.000000, "_");
	PlayerTextDrawAlignment(playerid, gCol[playerid][6], 2);
	PlayerTextDrawBackgroundColor(playerid, gCol[playerid][6], 255);
	PlayerTextDrawFont(playerid, gCol[playerid][6], 1);
	PlayerTextDrawLetterSize(playerid, gCol[playerid][6], 1.019999, -0.000001);
	PlayerTextDrawColor(playerid, gCol[playerid][6], -1);
	PlayerTextDrawSetOutline(playerid, gCol[playerid][6], 0);
	PlayerTextDrawSetProportional(playerid, gCol[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, gCol[playerid][6], 1);
	PlayerTextDrawUseBox(playerid, gCol[playerid][6], 1);
	PlayerTextDrawBoxColor(playerid, gCol[playerid][6], 255);
	PlayerTextDrawTextSize(playerid, gCol[playerid][6], 113.000000, 309.000000);
	PlayerTextDrawSetSelectable(playerid, gCol[playerid][6], 1);

	gCol[playerid][7] = CreatePlayerTextDraw(playerid, 305.000000, 202.500000, "_");
	PlayerTextDrawAlignment(playerid, gCol[playerid][7], 2);
	PlayerTextDrawBackgroundColor(playerid, gCol[playerid][7], 255);
	PlayerTextDrawFont(playerid, gCol[playerid][7], 1);
	PlayerTextDrawLetterSize(playerid, gCol[playerid][7], 1.019999, -0.000001);
	PlayerTextDrawColor(playerid, gCol[playerid][7], -1);
	PlayerTextDrawSetOutline(playerid, gCol[playerid][7], 0);
	PlayerTextDrawSetProportional(playerid, gCol[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid, gCol[playerid][7], 1);
	PlayerTextDrawUseBox(playerid, gCol[playerid][7], 1);
	PlayerTextDrawBoxColor(playerid, gCol[playerid][7], 255);
	PlayerTextDrawTextSize(playerid, gCol[playerid][7], 113.000000, 309.000000);
	PlayerTextDrawSetSelectable(playerid, gCol[playerid][7], 1);

	gCol[playerid][8] = CreatePlayerTextDraw(playerid, 305.000000, 207.0, "_");
	PlayerTextDrawAlignment(playerid, gCol[playerid][8], 2);
	PlayerTextDrawBackgroundColor(playerid, gCol[playerid][8], 255);
	PlayerTextDrawFont(playerid, gCol[playerid][8], 1);
	PlayerTextDrawLetterSize(playerid, gCol[playerid][8], 1.019999, -0.000001);
	PlayerTextDrawColor(playerid, gCol[playerid][8], -1);
	PlayerTextDrawSetOutline(playerid, gCol[playerid][8], 0);
	PlayerTextDrawSetProportional(playerid, gCol[playerid][8], 1);
	PlayerTextDrawSetShadow(playerid, gCol[playerid][8], 1);
	PlayerTextDrawUseBox(playerid, gCol[playerid][8], 1);
	PlayerTextDrawBoxColor(playerid, gCol[playerid][8], 255);
	PlayerTextDrawTextSize(playerid, gCol[playerid][8], 113.000000, 309.000000);
	PlayerTextDrawSetSelectable(playerid, gCol[playerid][8], 1);


	gCol[playerid][10] = CreatePlayerTextDraw(playerid, 305.000000, 211.500000, "_");
	PlayerTextDrawAlignment(playerid, gCol[playerid][10], 2);
	PlayerTextDrawBackgroundColor(playerid, gCol[playerid][10], 255);
	PlayerTextDrawFont(playerid, gCol[playerid][10], 1);
	PlayerTextDrawLetterSize(playerid, gCol[playerid][10], 1.019999, -0.000001);
	PlayerTextDrawColor(playerid, gCol[playerid][10], -1);
	PlayerTextDrawSetOutline(playerid, gCol[playerid][10], 0);
	PlayerTextDrawSetProportional(playerid, gCol[playerid][10], 1);
	PlayerTextDrawSetShadow(playerid, gCol[playerid][10], 1);
	PlayerTextDrawUseBox(playerid, gCol[playerid][10], 1);
	PlayerTextDrawBoxColor(playerid, gCol[playerid][10], 255);
	PlayerTextDrawTextSize(playerid, gCol[playerid][10], 113.000000, 309.000000);
	PlayerTextDrawSetSelectable(playerid, gCol[playerid][10], 1);


	gCol[playerid][11] = CreatePlayerTextDraw(playerid, 305.000000, 216.000000, "_");
	PlayerTextDrawAlignment(playerid, gCol[playerid][11], 2);
	PlayerTextDrawBackgroundColor(playerid, gCol[playerid][11], 255);
	PlayerTextDrawFont(playerid, gCol[playerid][11], 1);
	PlayerTextDrawLetterSize(playerid, gCol[playerid][11], 1.019999, -0.000001);
	PlayerTextDrawColor(playerid, gCol[playerid][11], -1);
	PlayerTextDrawSetOutline(playerid, gCol[playerid][11], 0);
	PlayerTextDrawSetProportional(playerid, gCol[playerid][11], 1);
	PlayerTextDrawSetShadow(playerid, gCol[playerid][11], 1);
	PlayerTextDrawUseBox(playerid, gCol[playerid][11], 1);
	PlayerTextDrawBoxColor(playerid, gCol[playerid][11], 255);
	PlayerTextDrawTextSize(playerid, gCol[playerid][11], 113.000000, 309.000000);
	PlayerTextDrawSetSelectable(playerid, gCol[playerid][11], 1);


	gCol[playerid][13] = CreatePlayerTextDraw(playerid, 305.000000, 220.500000, "_");
	PlayerTextDrawAlignment(playerid, gCol[playerid][13], 2);
	PlayerTextDrawBackgroundColor(playerid, gCol[playerid][13], 255);
	PlayerTextDrawFont(playerid, gCol[playerid][13], 1);
	PlayerTextDrawLetterSize(playerid, gCol[playerid][13], 1.019999, -0.000001);
	PlayerTextDrawColor(playerid, gCol[playerid][13], -1);
	PlayerTextDrawSetOutline(playerid, gCol[playerid][13], 0);
	PlayerTextDrawSetProportional(playerid, gCol[playerid][13], 1);
	PlayerTextDrawSetShadow(playerid, gCol[playerid][13], 1);
	PlayerTextDrawUseBox(playerid, gCol[playerid][13], 1);
	PlayerTextDrawBoxColor(playerid, gCol[playerid][13], 255);
	PlayerTextDrawTextSize(playerid, gCol[playerid][13], 113.000000, 309.000000);
	PlayerTextDrawSetSelectable(playerid, gCol[playerid][13], 1);


	gCol[playerid][14] = CreatePlayerTextDraw(playerid, 305.000000, 225.000000, "_");
	PlayerTextDrawAlignment(playerid, gCol[playerid][14], 2);
	PlayerTextDrawBackgroundColor(playerid, gCol[playerid][14], 255);
	PlayerTextDrawFont(playerid, gCol[playerid][14], 1);
	PlayerTextDrawLetterSize(playerid, gCol[playerid][14], 1.019999, -0.000001);
	PlayerTextDrawColor(playerid, gCol[playerid][14], -1);
	PlayerTextDrawSetOutline(playerid, gCol[playerid][14], 0);
	PlayerTextDrawSetProportional(playerid, gCol[playerid][14], 1);
	PlayerTextDrawSetShadow(playerid, gCol[playerid][14], 1);
	PlayerTextDrawUseBox(playerid, gCol[playerid][14], 1);
	PlayerTextDrawBoxColor(playerid, gCol[playerid][14], 255);
	PlayerTextDrawTextSize(playerid, gCol[playerid][14], 113.000000, 309.000000);
	PlayerTextDrawSetSelectable(playerid, gCol[playerid][14], 1);

	gCol[playerid][15] = CreatePlayerTextDraw(playerid, 305.000000, 229.500000, "_");
	PlayerTextDrawAlignment(playerid, gCol[playerid][15], 2);
	PlayerTextDrawBackgroundColor(playerid, gCol[playerid][15], 255);
	PlayerTextDrawFont(playerid, gCol[playerid][15], 1);
	PlayerTextDrawLetterSize(playerid, gCol[playerid][15], 1.019999, -0.000001);
	PlayerTextDrawColor(playerid, gCol[playerid][15], -1);
	PlayerTextDrawSetOutline(playerid, gCol[playerid][15], 0);
	PlayerTextDrawSetProportional(playerid, gCol[playerid][15], 1);
	PlayerTextDrawSetShadow(playerid, gCol[playerid][15], 1);
	PlayerTextDrawUseBox(playerid, gCol[playerid][15], 1);
	PlayerTextDrawBoxColor(playerid, gCol[playerid][15], 255);
	PlayerTextDrawTextSize(playerid, gCol[playerid][15], 113.000000, 309.000000);
	PlayerTextDrawSetSelectable(playerid, gCol[playerid][15], 1);

	gCol[playerid][16] = CreatePlayerTextDraw(playerid, 305.000000, 234.000000, "_");
	PlayerTextDrawAlignment(playerid, gCol[playerid][16], 2);
	PlayerTextDrawBackgroundColor(playerid, gCol[playerid][16], 255);
	PlayerTextDrawFont(playerid, gCol[playerid][16], 1);
	PlayerTextDrawLetterSize(playerid, gCol[playerid][16], 1.019999, -0.000001);
	PlayerTextDrawColor(playerid, gCol[playerid][16], -1);
	PlayerTextDrawSetOutline(playerid, gCol[playerid][16], 0);
	PlayerTextDrawSetProportional(playerid, gCol[playerid][16], 1);
	PlayerTextDrawSetShadow(playerid, gCol[playerid][16], 1);
	PlayerTextDrawUseBox(playerid, gCol[playerid][16], 1);
	PlayerTextDrawBoxColor(playerid, gCol[playerid][16], 255);
	PlayerTextDrawTextSize(playerid, gCol[playerid][16], 113.000000, 309.000000);
	PlayerTextDrawSetSelectable(playerid, gCol[playerid][16], 1);

	gCol[playerid][17] = CreatePlayerTextDraw(playerid, 305.000000, 238.500000, "_");
	PlayerTextDrawAlignment(playerid, gCol[playerid][17], 2);
	PlayerTextDrawBackgroundColor(playerid, gCol[playerid][17], 255);
	PlayerTextDrawFont(playerid, gCol[playerid][17], 1);
	PlayerTextDrawLetterSize(playerid, gCol[playerid][17], 1.019999, -0.000001);
	PlayerTextDrawColor(playerid, gCol[playerid][17], -1);
	PlayerTextDrawSetOutline(playerid, gCol[playerid][17], 0);
	PlayerTextDrawSetProportional(playerid, gCol[playerid][17], 1);
	PlayerTextDrawSetShadow(playerid, gCol[playerid][17], 1);
	PlayerTextDrawUseBox(playerid, gCol[playerid][17], 1);
	PlayerTextDrawBoxColor(playerid, gCol[playerid][17], 255);
	PlayerTextDrawTextSize(playerid, gCol[playerid][17], 113.000000, 309.000000);
	PlayerTextDrawSetSelectable(playerid, gCol[playerid][17], 1);

	gCol[playerid][18] = CreatePlayerTextDraw(playerid, 305.000000, 243.500000, "_");
	PlayerTextDrawAlignment(playerid, gCol[playerid][18], 2);
	PlayerTextDrawBackgroundColor(playerid, gCol[playerid][18], 255);
	PlayerTextDrawFont(playerid, gCol[playerid][18], 1);
	PlayerTextDrawLetterSize(playerid, gCol[playerid][18], 1.019999, -0.000001);
	PlayerTextDrawColor(playerid, gCol[playerid][18], -1);
	PlayerTextDrawSetOutline(playerid, gCol[playerid][18], 0);
	PlayerTextDrawSetProportional(playerid, gCol[playerid][18], 1);
	PlayerTextDrawSetShadow(playerid, gCol[playerid][18], 1);
	PlayerTextDrawUseBox(playerid, gCol[playerid][18], 1);
	PlayerTextDrawBoxColor(playerid, gCol[playerid][18], 255);
	PlayerTextDrawTextSize(playerid, gCol[playerid][18], 113.000000, 309.000000);
	PlayerTextDrawSetSelectable(playerid, gCol[playerid][18], 1);

	gCol[playerid][19] = CreatePlayerTextDraw(playerid, 305.000000, 247.500000, "_");
	PlayerTextDrawAlignment(playerid, gCol[playerid][19], 2);
	PlayerTextDrawBackgroundColor(playerid, gCol[playerid][19], 255);
	PlayerTextDrawFont(playerid, gCol[playerid][19], 1);
	PlayerTextDrawLetterSize(playerid, gCol[playerid][19], 1.019999, -0.000001);
	PlayerTextDrawColor(playerid, gCol[playerid][19], -1);
	PlayerTextDrawSetOutline(playerid, gCol[playerid][19], 0);
	PlayerTextDrawSetProportional(playerid, gCol[playerid][19], 1);
	PlayerTextDrawSetShadow(playerid, gCol[playerid][19], 1);
	PlayerTextDrawUseBox(playerid, gCol[playerid][19], 1);
	PlayerTextDrawBoxColor(playerid, gCol[playerid][19], 255);
	PlayerTextDrawTextSize(playerid, gCol[playerid][19], 113.000000, 309.000000);
	PlayerTextDrawSetSelectable(playerid, gCol[playerid][19], 1);

	gCol[playerid][20] = CreatePlayerTextDraw(playerid, 305.000000, 252.000000, "_");
	PlayerTextDrawAlignment(playerid, gCol[playerid][20], 2);
	PlayerTextDrawBackgroundColor(playerid, gCol[playerid][20], 255);
	PlayerTextDrawFont(playerid, gCol[playerid][20], 1);
	PlayerTextDrawLetterSize(playerid, gCol[playerid][20], 1.019999, -0.000001);
	PlayerTextDrawColor(playerid, gCol[playerid][20], -1);
	PlayerTextDrawSetOutline(playerid, gCol[playerid][20], 0);
	PlayerTextDrawSetProportional(playerid, gCol[playerid][20], 1);
	PlayerTextDrawSetShadow(playerid, gCol[playerid][20], 1);
	PlayerTextDrawUseBox(playerid, gCol[playerid][20], 1);
	PlayerTextDrawBoxColor(playerid, gCol[playerid][20], 255);
	PlayerTextDrawTextSize(playerid, gCol[playerid][20], 113.000000, 309.000000);
	PlayerTextDrawSetSelectable(playerid, gCol[playerid][20], 1);

	gCol[playerid][21] = CreatePlayerTextDraw(playerid, 305.000000, 256.500000, "_");
	PlayerTextDrawAlignment(playerid, gCol[playerid][21], 2);
	PlayerTextDrawBackgroundColor(playerid, gCol[playerid][21], 255);
	PlayerTextDrawFont(playerid, gCol[playerid][21], 1);
	PlayerTextDrawLetterSize(playerid, gCol[playerid][21], 1.019999, -0.000001);
	PlayerTextDrawColor(playerid, gCol[playerid][21], -1);
	PlayerTextDrawSetOutline(playerid, gCol[playerid][21], 0);
	PlayerTextDrawSetProportional(playerid, gCol[playerid][21], 1);
	PlayerTextDrawSetShadow(playerid, gCol[playerid][21], 1);
	PlayerTextDrawUseBox(playerid, gCol[playerid][21], 1);
	PlayerTextDrawBoxColor(playerid, gCol[playerid][21], 255);
	PlayerTextDrawTextSize(playerid, gCol[playerid][21], 113.000000, 309.000000);
	PlayerTextDrawSetSelectable(playerid, gCol[playerid][21], 1);

	gCol[playerid][22] = CreatePlayerTextDraw(playerid, 305.000000, 261.00, "_");
	PlayerTextDrawAlignment(playerid, gCol[playerid][22], 2);
	PlayerTextDrawBackgroundColor(playerid, gCol[playerid][22], 255);
	PlayerTextDrawFont(playerid, gCol[playerid][22], 1);
	PlayerTextDrawLetterSize(playerid, gCol[playerid][22], 1.019999, -0.000001);
	PlayerTextDrawColor(playerid, gCol[playerid][22], -1);
	PlayerTextDrawSetOutline(playerid, gCol[playerid][22], 0);
	PlayerTextDrawSetProportional(playerid, gCol[playerid][22], 1);
	PlayerTextDrawSetShadow(playerid, gCol[playerid][22], 1);
	PlayerTextDrawUseBox(playerid, gCol[playerid][22], 1);
	PlayerTextDrawBoxColor(playerid, gCol[playerid][22], 255);
	PlayerTextDrawTextSize(playerid, gCol[playerid][22], 113.000000, 309.000000);
	PlayerTextDrawSetSelectable(playerid, gCol[playerid][22], 1);

	gCol[playerid][9] = CreatePlayerTextDraw(playerid, 150.000000, 267.000000, "1");
	PlayerTextDrawBackgroundColor(playerid, gCol[playerid][9], 255);
	PlayerTextDrawFont(playerid, gCol[playerid][9], 1);
	PlayerTextDrawLetterSize(playerid, gCol[playerid][9], 0.310000, 0.699999);
	PlayerTextDrawColor(playerid, gCol[playerid][9], -1);
	PlayerTextDrawSetOutline(playerid, gCol[playerid][9], 0);
	PlayerTextDrawSetProportional(playerid, gCol[playerid][9], 1);
	PlayerTextDrawSetShadow(playerid, gCol[playerid][9], 1);
	PlayerTextDrawUseBox(playerid, gCol[playerid][9], 1);
    PlayerTextDrawBoxColor(playerid, gCol[playerid][9], 0);
	PlayerTextDrawTextSize(playerid, gCol[playerid][9], 156.000000, 20.000000);
	PlayerTextDrawSetSelectable(playerid, gCol[playerid][9], 1);

	gCol[playerid][12] = CreatePlayerTextDraw(playerid, 196.000000, 267.000000, "5");
	PlayerTextDrawBackgroundColor(playerid, gCol[playerid][12], 255);
	PlayerTextDrawFont(playerid, gCol[playerid][12], 1);
	PlayerTextDrawLetterSize(playerid, gCol[playerid][12], 0.310000, 0.699999);
	PlayerTextDrawColor(playerid, gCol[playerid][12], -1);
	PlayerTextDrawSetOutline(playerid, gCol[playerid][12], 0);
	PlayerTextDrawSetProportional(playerid, gCol[playerid][12], 1);
	PlayerTextDrawSetShadow(playerid, gCol[playerid][12], 1);
	PlayerTextDrawUseBox(playerid, gCol[playerid][12], 1);
	PlayerTextDrawTextSize(playerid, gCol[playerid][12], 156.000000, 4.000000);
	PlayerTextDrawUseBox(playerid, gCol[playerid][12], 1);
    PlayerTextDrawBoxColor(playerid, gCol[playerid][12], 0);
	PlayerTextDrawTextSize(playerid, gCol[playerid][12], 203.000000, 20.000000);
	PlayerTextDrawSetSelectable(playerid, gCol[playerid][12], 1);

	gCol[playerid][24] = CreatePlayerTextDraw(playerid, 161.000000, 267.000000, "2");
	PlayerTextDrawBackgroundColor(playerid, gCol[playerid][24], 255);
	PlayerTextDrawFont(playerid, gCol[playerid][24], 1);
	PlayerTextDrawLetterSize(playerid, gCol[playerid][24], 0.310000, 0.699999);
	PlayerTextDrawColor(playerid, gCol[playerid][24], -1);
	PlayerTextDrawSetOutline(playerid, gCol[playerid][24], 0);
	PlayerTextDrawSetProportional(playerid, gCol[playerid][24], 1);
	PlayerTextDrawSetShadow(playerid, gCol[playerid][24], 1);
	PlayerTextDrawUseBox(playerid, gCol[playerid][24], 1);
    PlayerTextDrawBoxColor(playerid, gCol[playerid][24], 0);
	PlayerTextDrawTextSize(playerid, gCol[playerid][24], 168.000000, 20.000000);
	PlayerTextDrawSetSelectable(playerid, gCol[playerid][24], 1);

	gCol[playerid][25] = CreatePlayerTextDraw(playerid, 173.000000, 267.000000, "3");
	PlayerTextDrawBackgroundColor(playerid, gCol[playerid][25], 255);
	PlayerTextDrawFont(playerid, gCol[playerid][25], 1);
	PlayerTextDrawLetterSize(playerid, gCol[playerid][25], 0.310000, 0.699999);
	PlayerTextDrawColor(playerid, gCol[playerid][25], -1);
	PlayerTextDrawSetOutline(playerid, gCol[playerid][25], 0);
	PlayerTextDrawSetProportional(playerid, gCol[playerid][25], 1);
	PlayerTextDrawSetShadow(playerid, gCol[playerid][25], 1);
	PlayerTextDrawUseBox(playerid, gCol[playerid][25], 1);
    PlayerTextDrawBoxColor(playerid, gCol[playerid][25], 0);
	PlayerTextDrawTextSize(playerid, gCol[playerid][25], 180.000000, 20.000000);
	PlayerTextDrawSetSelectable(playerid, gCol[playerid][25], 1);

	gCol[playerid][3] = CreatePlayerTextDraw(playerid, 184.000000, 267.000000, "4");
	PlayerTextDrawBackgroundColor(playerid, gCol[playerid][3], 255);
	PlayerTextDrawFont(playerid, gCol[playerid][3], 1);
	PlayerTextDrawLetterSize(playerid, gCol[playerid][3], 0.310000, 0.699999);
	PlayerTextDrawColor(playerid, gCol[playerid][3], -1);
	PlayerTextDrawSetOutline(playerid, gCol[playerid][3], 0);
	PlayerTextDrawSetProportional(playerid, gCol[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, gCol[playerid][3], 1);
	PlayerTextDrawUseBox(playerid, gCol[playerid][3], 1);
    PlayerTextDrawBoxColor(playerid, gCol[playerid][3], 0);
	PlayerTextDrawTextSize(playerid, gCol[playerid][3], 191.000000, 20.000000);
	PlayerTextDrawSetSelectable(playerid, gCol[playerid][3], 1);
	gColCreated[playerid] =1;

}
stock DestroygColor(playerid)
{
 for(new x=0; x<26; x++) PlayerTextDrawDestroy(playerid, gCol[playerid][x]);
 gColCreated[playerid] =0;
}
stock DestroyTikTD(playerid)
{
  if(TikCreated[playerid] == 1 && playerid >=0)
  {
   TikCreated[playerid] = 0;
   for(new x=0; x<17; x++) PlayerTextDrawDestroy(playerid, TickTD[playerid][x]);
  }
}

stock DestroyPhone(playerid)
{
  if(PhoneCreated[playerid] == 1 && playerid >=0)
  {
   PhoneCreated[playerid] = 0;
   for(new x=0; x<MAX_PHONE_TD; x++) PlayerTextDrawDestroy(playerid, PhoneTD[playerid][x]);
  }
}
stock CreatePhone(playerid)
{
  if(PhoneCreated[playerid] == 0 && playerid >=0)
  {
    PhoneCreated[playerid]=1;
	//default
	PhoneTD[playerid][0] = CreatePlayerTextDraw(playerid, 508.300, 281.500, "LD_POKE:cd10d");
	PlayerTextDrawFont(playerid, PhoneTD[playerid][0], 4);
	PlayerTextDrawTextSize(playerid, PhoneTD[playerid][0], 110.500, 154.000);
	PlayerTextDrawBoxColor(playerid, PhoneTD[playerid][0], 204);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][0], 204);

	PhoneTD[playerid][1] = CreatePlayerTextDraw(playerid, 612.000000, 298.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PhoneTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, PhoneTD[playerid][1], 1);
	PlayerTextDrawLetterSize(playerid, PhoneTD[playerid][1], 0.400000, 12.000000);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][1], -1);
	PlayerTextDrawSetOutline(playerid, PhoneTD[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid, PhoneTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, PhoneTD[playerid][1], 1);
	PlayerTextDrawUseBox(playerid, PhoneTD[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, PhoneTD[playerid][1], 255);
	PlayerTextDrawTextSize(playerid, PhoneTD[playerid][1], 515.000000, 30.000000);

	PhoneTD[playerid][11] = CreatePlayerTextDraw(playerid, 553.000000, 412.000000, "LD_BEAT:square");
	PlayerTextDrawBackgroundColor(playerid, PhoneTD[playerid][11], 255);
	PlayerTextDrawFont(playerid, PhoneTD[playerid][11], 4);
	PlayerTextDrawLetterSize(playerid, PhoneTD[playerid][11], 199.789993, 196.000000);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][11], -1);
	PlayerTextDrawSetOutline(playerid, PhoneTD[playerid][11], 0);
	PlayerTextDrawSetProportional(playerid, PhoneTD[playerid][11], 1);
	PlayerTextDrawSetShadow(playerid, PhoneTD[playerid][11], 1);
	PlayerTextDrawUseBox(playerid, PhoneTD[playerid][11], 1);
	PlayerTextDrawBoxColor(playerid, PhoneTD[playerid][11], 200);
	PlayerTextDrawTextSize(playerid, PhoneTD[playerid][11], 19.000000, 19.000000);
	PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][11], 1);


	PhoneTD[playerid][17] = CreatePlayerTextDraw(playerid, 513.500000, 291.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PhoneTD[playerid][17], 255);
	PlayerTextDrawFont(playerid, PhoneTD[playerid][17], 1);
	PlayerTextDrawLetterSize(playerid, PhoneTD[playerid][17], 0.400000, -1.000000);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][17], -1);
	PlayerTextDrawSetOutline(playerid, PhoneTD[playerid][17], 0);
	PlayerTextDrawSetProportional(playerid, PhoneTD[playerid][17], 1);
	PlayerTextDrawSetShadow(playerid, PhoneTD[playerid][17], 1);
	PlayerTextDrawUseBox(playerid, PhoneTD[playerid][17], 1);
	PlayerTextDrawBoxColor(playerid, PhoneTD[playerid][17], 255);
	PlayerTextDrawTextSize(playerid, PhoneTD[playerid][17], 615.000000, 30.000000);

	PhoneTD[playerid][18] = CreatePlayerTextDraw(playerid, 511.000, 286.000, "LD_DUAL:backgnd");
	PlayerTextDrawFont(playerid, PhoneTD[playerid][18], 4);
	PlayerTextDrawTextSize(playerid, PhoneTD[playerid][18], 4.000, 148.000);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][18], -1);

	PhoneTD[playerid][19] = CreatePlayerTextDraw(playerid, 613.000, 286.000, "LD_DUAL:backgnd");
	PlayerTextDrawFont(playerid, PhoneTD[playerid][19], 4);
	PlayerTextDrawTextSize(playerid, PhoneTD[playerid][19], 4.000, 148.000);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][19], -1);
//dial
	PhoneTD[playerid][2] = CreatePlayerTextDraw(playerid, 532.000000, 331.000000, "1");
	PlayerTextDrawBackgroundColor(playerid, PhoneTD[playerid][2], 255);
	PlayerTextDrawFont(playerid, PhoneTD[playerid][2], 0);
	PlayerTextDrawLetterSize(playerid, PhoneTD[playerid][2], 0.439999, 1.100000);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][2], -106);
	PlayerTextDrawSetOutline(playerid, PhoneTD[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, PhoneTD[playerid][2], 1);
	PlayerTextDrawUseBox(playerid, PhoneTD[playerid][2], 1);
	PlayerTextDrawBoxColor(playerid, PhoneTD[playerid][2], -106);
	PlayerTextDrawTextSize(playerid, PhoneTD[playerid][2], 542.000000, 8.000000);
	PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][2], 1);

	PhoneTD[playerid][4] = CreatePlayerTextDraw(playerid, 558.000000, 331.000000, "2");
	PlayerTextDrawBackgroundColor(playerid, PhoneTD[playerid][4], 255);
	PlayerTextDrawFont(playerid, PhoneTD[playerid][4], 0);
	PlayerTextDrawLetterSize(playerid, PhoneTD[playerid][4], 0.439900, 1.100000);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][4], -1);
	PlayerTextDrawSetOutline(playerid, PhoneTD[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, PhoneTD[playerid][4], 1);
	PlayerTextDrawUseBox(playerid, PhoneTD[playerid][4], 1);
	PlayerTextDrawBoxColor(playerid, PhoneTD[playerid][4], -1);
	PlayerTextDrawTextSize(playerid, PhoneTD[playerid][4], 568.000000, 8.000000);
	PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][4], 1);

	PhoneTD[playerid][5] = CreatePlayerTextDraw(playerid, 584.000000, 331.000000, "3");
	PlayerTextDrawBackgroundColor(playerid, PhoneTD[playerid][5], 255);
	PlayerTextDrawFont(playerid, PhoneTD[playerid][5], 0);
	PlayerTextDrawLetterSize(playerid, PhoneTD[playerid][5], 0.439900, 1.100000);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][5], -106);
	PlayerTextDrawSetOutline(playerid, PhoneTD[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, PhoneTD[playerid][5], 1);
	PlayerTextDrawUseBox(playerid, PhoneTD[playerid][5], 1);
	PlayerTextDrawBoxColor(playerid, PhoneTD[playerid][5], -106);
	PlayerTextDrawTextSize(playerid, PhoneTD[playerid][5], 595.000000, 8.000000);
	PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][5], 1);

	PhoneTD[playerid][6] = CreatePlayerTextDraw(playerid, 584.000000, 373.000000, "9");
	PlayerTextDrawBackgroundColor(playerid, PhoneTD[playerid][6], 255);
	PlayerTextDrawFont(playerid, PhoneTD[playerid][6], 0);
	PlayerTextDrawLetterSize(playerid, PhoneTD[playerid][6], 0.439900, 1.100000);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][6], -106);
	PlayerTextDrawSetOutline(playerid, PhoneTD[playerid][6], 1);
	PlayerTextDrawSetProportional(playerid, PhoneTD[playerid][6], 1);
	PlayerTextDrawUseBox(playerid, PhoneTD[playerid][6], 1);
	PlayerTextDrawBoxColor(playerid, PhoneTD[playerid][6], -106);
	PlayerTextDrawTextSize(playerid, PhoneTD[playerid][6], 595.000000, 8.000000);
	PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][6], 1);

	PhoneTD[playerid][7] = CreatePlayerTextDraw(playerid, 558.000000, 394.000000, "0");
	PlayerTextDrawBackgroundColor(playerid, PhoneTD[playerid][7], 255);
	PlayerTextDrawFont(playerid, PhoneTD[playerid][7], 0);
	PlayerTextDrawLetterSize(playerid, PhoneTD[playerid][7], 0.439900, 1.100000);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][7], -1);
	PlayerTextDrawSetOutline(playerid, PhoneTD[playerid][7], 1);
	PlayerTextDrawSetProportional(playerid, PhoneTD[playerid][7], 1);
	PlayerTextDrawUseBox(playerid, PhoneTD[playerid][7], 1);
	PlayerTextDrawBoxColor(playerid, PhoneTD[playerid][7], -1);
	PlayerTextDrawTextSize(playerid, PhoneTD[playerid][7], 568.000000, 8.000000);
	PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][7], 1);

	PhoneTD[playerid][8] = CreatePlayerTextDraw(playerid, 532.000000, 352.000000, "4");
	PlayerTextDrawBackgroundColor(playerid, PhoneTD[playerid][8], 255);
	PlayerTextDrawFont(playerid, PhoneTD[playerid][8], 0);
	PlayerTextDrawLetterSize(playerid, PhoneTD[playerid][8], 0.439900, 1.100000);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][8], -1);
	PlayerTextDrawSetOutline(playerid, PhoneTD[playerid][8], 1);
	PlayerTextDrawSetProportional(playerid, PhoneTD[playerid][8], 1);
	PlayerTextDrawUseBox(playerid, PhoneTD[playerid][8], 1);
	PlayerTextDrawBoxColor(playerid, PhoneTD[playerid][8], -1);
	PlayerTextDrawTextSize(playerid, PhoneTD[playerid][8], 542.000000, 8.000000);
	PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][8], 1);

	PhoneTD[playerid][9] = CreatePlayerTextDraw(playerid, 532.000000, 373.000000, "7");
	PlayerTextDrawBackgroundColor(playerid, PhoneTD[playerid][9], 255);
	PlayerTextDrawFont(playerid, PhoneTD[playerid][9], 0);
	PlayerTextDrawLetterSize(playerid, PhoneTD[playerid][9], 0.439900, 1.100000);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][9], -106);
	PlayerTextDrawSetOutline(playerid, PhoneTD[playerid][9], 1);
	PlayerTextDrawSetProportional(playerid, PhoneTD[playerid][9], 1);
	PlayerTextDrawUseBox(playerid, PhoneTD[playerid][9], 1);
	PlayerTextDrawBoxColor(playerid, PhoneTD[playerid][9], -106);
	PlayerTextDrawTextSize(playerid, PhoneTD[playerid][9], 542.000000, 8.000000);
	PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][9], 1);

	PhoneTD[playerid][10] = CreatePlayerTextDraw(playerid, 558.000000, 352.000000, "5");
	PlayerTextDrawBackgroundColor(playerid, PhoneTD[playerid][10], 255);
	PlayerTextDrawFont(playerid, PhoneTD[playerid][10], 0);
	PlayerTextDrawLetterSize(playerid, PhoneTD[playerid][10], 0.439900, 1.100000);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][10], -106);
	PlayerTextDrawSetOutline(playerid, PhoneTD[playerid][10], 1);
	PlayerTextDrawSetProportional(playerid, PhoneTD[playerid][10], 1);
	PlayerTextDrawUseBox(playerid, PhoneTD[playerid][10], 1);
	PlayerTextDrawBoxColor(playerid, PhoneTD[playerid][10], -106);
	PlayerTextDrawTextSize(playerid, PhoneTD[playerid][10], 568.000000, 8.000000);
	PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][10], 1);

	PhoneTD[playerid][3] = CreatePlayerTextDraw(playerid, 584.000000, 352.000000, "6");
	PlayerTextDrawBackgroundColor(playerid, PhoneTD[playerid][3], 255);
	PlayerTextDrawFont(playerid, PhoneTD[playerid][3], 0);
	PlayerTextDrawLetterSize(playerid, PhoneTD[playerid][3], 0.439900, 1.100000);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][3], -1);
	PlayerTextDrawSetOutline(playerid, PhoneTD[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, PhoneTD[playerid][3], 1);
	PlayerTextDrawUseBox(playerid, PhoneTD[playerid][3], 1);
	PlayerTextDrawBoxColor(playerid, PhoneTD[playerid][3], -1);
	PlayerTextDrawTextSize(playerid, PhoneTD[playerid][3], 595.000000, 8.000000);
	PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][3], 1);

	PhoneTD[playerid][12] = CreatePlayerTextDraw(playerid, 590.000000, 398.000000, "~r~-");
	PlayerTextDrawAlignment(playerid, PhoneTD[playerid][12], 2);
	PlayerTextDrawBackgroundColor(playerid, PhoneTD[playerid][12], 150);
	PlayerTextDrawFont(playerid, PhoneTD[playerid][12], 1);
	PlayerTextDrawLetterSize(playerid, PhoneTD[playerid][12], 0.840000, 1.300000);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][12], -1);
	PlayerTextDrawSetOutline(playerid, PhoneTD[playerid][12], 1);
	PlayerTextDrawSetProportional(playerid, PhoneTD[playerid][12], 1);
	PlayerTextDrawUseBox(playerid, PhoneTD[playerid][12], 1);
	PlayerTextDrawBoxColor(playerid, PhoneTD[playerid][12], 0);
    PlayerTextDrawTextSize(playerid, PhoneTD[playerid][12], 263.000000, 8.000000);
 	PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][12], 1);

	PhoneTD[playerid][13] = CreatePlayerTextDraw(playerid, 537.000000, 398.000000, "~g~-");
	PlayerTextDrawAlignment(playerid, PhoneTD[playerid][13], 2);
	PlayerTextDrawBackgroundColor(playerid, PhoneTD[playerid][13], 150);
	PlayerTextDrawFont(playerid, PhoneTD[playerid][13], 1);
	PlayerTextDrawLetterSize(playerid, PhoneTD[playerid][13], 0.840000, 1.300000);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][13], -1);
	PlayerTextDrawSetOutline(playerid, PhoneTD[playerid][13], 1);
	PlayerTextDrawSetProportional(playerid, PhoneTD[playerid][13], 1);
	PlayerTextDrawUseBox(playerid, PhoneTD[playerid][13], 1);
	PlayerTextDrawBoxColor(playerid, PhoneTD[playerid][13], 0);
    PlayerTextDrawTextSize(playerid, PhoneTD[playerid][13], 263.000000, 8.000000);
	PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][13], 1);

	PhoneTD[playerid][14] = CreatePlayerTextDraw(playerid, 558.000000, 373.000000, "8");
	PlayerTextDrawBackgroundColor(playerid, PhoneTD[playerid][14], 255);
	PlayerTextDrawFont(playerid, PhoneTD[playerid][14], 0);
	PlayerTextDrawLetterSize(playerid, PhoneTD[playerid][14], 0.439900, 1.100000);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][14], -1);
	PlayerTextDrawSetOutline(playerid, PhoneTD[playerid][14], 1);
	PlayerTextDrawSetProportional(playerid, PhoneTD[playerid][14], 1);
	PlayerTextDrawUseBox(playerid, PhoneTD[playerid][14], 1);
	PlayerTextDrawBoxColor(playerid, PhoneTD[playerid][14], -1);
	PlayerTextDrawTextSize(playerid, PhoneTD[playerid][14], 568.000000, 8.000000);
	PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][14], 1);

	PhoneTD[playerid][15] = CreatePlayerTextDraw(playerid, 565.000000, 296.000000, "dial");
	PlayerTextDrawAlignment(playerid, PhoneTD[playerid][15], 2);
	PlayerTextDrawBackgroundColor(playerid, PhoneTD[playerid][15], 255);
	PlayerTextDrawFont(playerid, PhoneTD[playerid][15], 2);
	PlayerTextDrawLetterSize(playerid, PhoneTD[playerid][15], 0.230000, 0.799999);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][15], -106);
	PlayerTextDrawSetOutline(playerid, PhoneTD[playerid][15], 1);
	PlayerTextDrawSetProportional(playerid, PhoneTD[playerid][15], 1);
	PlayerTextDrawTextSize(playerid, PhoneTD[playerid][15] , 541.0, 10.0);

	PhoneTD[playerid][16] = CreatePlayerTextDraw(playerid, 564.000000, 309.000000, "1234567");
	PlayerTextDrawAlignment(playerid, PhoneTD[playerid][16], 2);
	PlayerTextDrawBackgroundColor(playerid, PhoneTD[playerid][16], 255);
	PlayerTextDrawFont(playerid, PhoneTD[playerid][16], 2);
	PlayerTextDrawLetterSize(playerid, PhoneTD[playerid][16], 0.309900, 0.899999);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][16], -1);
	PlayerTextDrawSetOutline(playerid, PhoneTD[playerid][16], 1);
	PlayerTextDrawSetProportional(playerid, PhoneTD[playerid][16], 1);

	//Main Page
	PhoneTD[playerid][38] = CreatePlayerTextDraw(playerid, 516.000000, 295.000000, "ld_grav:sky");
	PlayerTextDrawBackgroundColor(playerid, PhoneTD[playerid][38], 255);
	PlayerTextDrawFont(playerid, PhoneTD[playerid][38], 4);
	PlayerTextDrawLetterSize(playerid, PhoneTD[playerid][38], 0.470000, 0.199999);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][38], -1);
	PlayerTextDrawSetOutline(playerid, PhoneTD[playerid][38], 0);
	PlayerTextDrawSetProportional(playerid, PhoneTD[playerid][38], 1);
	PlayerTextDrawSetShadow(playerid, PhoneTD[playerid][38], 1);
	PlayerTextDrawUseBox(playerid, PhoneTD[playerid][38], 1);
	PlayerTextDrawBoxColor(playerid, PhoneTD[playerid][38], 255);
	PlayerTextDrawTextSize(playerid, PhoneTD[playerid][38], 95.000000, 114.000000);

	PhoneTD[playerid][20] = CreatePlayerTextDraw(playerid, 547.000, 302.500, "LD_CHAT:goodcha");
	PlayerTextDrawFont(playerid, PhoneTD[playerid][20], 4);
	PlayerTextDrawTextSize(playerid, PhoneTD[playerid][20], 25.000, 19.000);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][20], -1);
	PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][20], 1);

	PhoneTD[playerid][21] = CreatePlayerTextDraw(playerid, 520.000, 304.000, "LD_POOL:nib");
	PlayerTextDrawFont(playerid, PhoneTD[playerid][21], 4);
	PlayerTextDrawTextSize(playerid, PhoneTD[playerid][21], 16.000, 16.000);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][21], 16711935);
	PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][21], 1);

	PhoneTD[playerid][22] = CreatePlayerTextDraw(playerid, 584.500, 304.000, "ld_shtr:ps1");
	PlayerTextDrawFont(playerid, PhoneTD[playerid][22], 4);
	PlayerTextDrawTextSize(playerid, PhoneTD[playerid][22], 20.500, 16.000);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][22], -1);
	PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][22], 1);

	PhoneTD[playerid][23] = CreatePlayerTextDraw(playerid, 517.000, 346.000, "ld_grav:flwr");
	PlayerTextDrawFont(playerid, PhoneTD[playerid][23], 4);
	PlayerTextDrawTextSize(playerid, PhoneTD[playerid][23], 20.500, 19.000);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][23], -1);
	PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][23], 1);

	PhoneTD[playerid][24] = CreatePlayerTextDraw(playerid, 581.500, 347.500, "LD_NONE:ship3");
	PlayerTextDrawFont(playerid, PhoneTD[playerid][24], 4);
	PlayerTextDrawTextSize(playerid, PhoneTD[playerid][24], 26.500, 16.000);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][24], -1);
	PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][24], 1);

	PhoneTD[playerid][25] = CreatePlayerTextDraw(playerid, 551.500, 346.000, "LD_NONE:warp");
	PlayerTextDrawFont(playerid, PhoneTD[playerid][25], 4);
	PlayerTextDrawTextSize(playerid, PhoneTD[playerid][25], 20.500, 17.500);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][25], -1);
	PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][25], 1);

	PhoneTD[playerid][26] = CreatePlayerTextDraw(playerid, 552.000000, 324.000000, "SMS");
	PlayerTextDrawBackgroundColor(playerid, PhoneTD[playerid][26], 255);
	PlayerTextDrawFont(playerid, PhoneTD[playerid][26], 1);
	PlayerTextDrawLetterSize(playerid, PhoneTD[playerid][26], 0.179000, 0.799999);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][26], -1);
	PlayerTextDrawSetOutline(playerid, PhoneTD[playerid][26], 1);
	PlayerTextDrawSetProportional(playerid, PhoneTD[playerid][26], 1);
	PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][26], 1);
	PlayerTextDrawTextSize(playerid, PhoneTD[playerid][26] , 541.0, 10.0);

	PhoneTD[playerid][27] = CreatePlayerTextDraw(playerid, 580.000000, 324.000000, "Turn Off");
	PlayerTextDrawFont(playerid, PhoneTD[playerid][27], 1);
	PlayerTextDrawLetterSize(playerid, PhoneTD[playerid][27], 0.179000, 0.799999);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][27], -1);
	PlayerTextDrawSetOutline(playerid, PhoneTD[playerid][27], 1);

	PhoneTD[playerid][28] = CreatePlayerTextDraw(playerid, 580.000000, 366.000000, "Wallpaper");
	PlayerTextDrawBackgroundColor(playerid, PhoneTD[playerid][28], 255);
	PlayerTextDrawFont(playerid, PhoneTD[playerid][28], 1);
	PlayerTextDrawLetterSize(playerid, PhoneTD[playerid][28], 0.179000, 0.799999);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][28], -1);
	PlayerTextDrawSetOutline(playerid, PhoneTD[playerid][28], 1);
	PlayerTextDrawSetProportional(playerid, PhoneTD[playerid][28], 1);
	PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][28], 1);
	PlayerTextDrawTextSize(playerid, PhoneTD[playerid][28] , 541.0, 10.0);

	PhoneTD[playerid][29] = CreatePlayerTextDraw(playerid, 547.000000, 366.000000, "Ringtone");
	PlayerTextDrawBackgroundColor(playerid, PhoneTD[playerid][29], 255);
	PlayerTextDrawFont(playerid, PhoneTD[playerid][29], 1);
	PlayerTextDrawLetterSize(playerid, PhoneTD[playerid][29], 0.200000, 0.799999);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][29], -1);
	PlayerTextDrawSetOutline(playerid, PhoneTD[playerid][29], 1);
	PlayerTextDrawSetProportional(playerid, PhoneTD[playerid][29], 1);
	PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][29], 1);
	PlayerTextDrawTextSize(playerid, PhoneTD[playerid][29] , 541.0, 10.0);

	PhoneTD[playerid][30] = CreatePlayerTextDraw(playerid, 516.000000, 366.000000, "Contacts");
	PlayerTextDrawBackgroundColor(playerid, PhoneTD[playerid][30], 255);
	PlayerTextDrawFont(playerid, PhoneTD[playerid][30], 1);
	PlayerTextDrawLetterSize(playerid, PhoneTD[playerid][30], 0.179000, 0.799999);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][30], -1);
	PlayerTextDrawSetOutline(playerid, PhoneTD[playerid][30], 1);
	PlayerTextDrawSetProportional(playerid, PhoneTD[playerid][30], 1);
	PlayerTextDrawTextSize(playerid, PhoneTD[playerid][30] , 541.0, 10.0);

	PhoneTD[playerid][31] = CreatePlayerTextDraw(playerid, 522.000000, 324.000000, "Dial");
	PlayerTextDrawBackgroundColor(playerid, PhoneTD[playerid][31] , 255);
	PlayerTextDrawFont(playerid, PhoneTD[playerid][31] , 1);
	PlayerTextDrawLetterSize(playerid, PhoneTD[playerid][31] , 0.179000, 0.799999);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][31] , -1);
	PlayerTextDrawSetOutline(playerid, PhoneTD[playerid][31] , 1);
	PlayerTextDrawSetProportional(playerid, PhoneTD[playerid][31] , 1);
	PlayerTextDrawTextSize(playerid, PhoneTD[playerid][31] , 541.0, 10.0);
//Wallpaper Page
	PhoneTD[playerid][37] = CreatePlayerTextDraw(playerid, 563.500000, 298.000000, "No Background");
	PlayerTextDrawAlignment(playerid, PhoneTD[playerid][37], 2);
	PlayerTextDrawBackgroundColor(playerid, PhoneTD[playerid][37], 255);
	PlayerTextDrawFont(playerid, PhoneTD[playerid][37], 1);
	PlayerTextDrawLetterSize(playerid, PhoneTD[playerid][37], 0.300000, 1.099999);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][37], -1);
	PlayerTextDrawSetOutline(playerid, PhoneTD[playerid][37], 1);
	PlayerTextDrawSetProportional(playerid, PhoneTD[playerid][37], 1);
	PlayerTextDrawUseBox(playerid, PhoneTD[playerid][37], 1);
	PlayerTextDrawBoxColor(playerid, PhoneTD[playerid][37], -1);
	PlayerTextDrawTextSize(playerid, PhoneTD[playerid][37], 17.000000, 90.000000);
	PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][37], 1);

	PhoneTD[playerid][32] = CreatePlayerTextDraw(playerid, 516.500000, 315.000000, "ld_grav:sky");
	PlayerTextDrawAlignment(playerid, PhoneTD[playerid][32], 2);
	PlayerTextDrawBackgroundColor(playerid, PhoneTD[playerid][32], 255);
	PlayerTextDrawFont(playerid, PhoneTD[playerid][32], 4);
	PlayerTextDrawLetterSize(playerid, PhoneTD[playerid][32], 0.300000, 1.099999);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][32], -1);
	PlayerTextDrawSetOutline(playerid, PhoneTD[playerid][32], 1);
	PlayerTextDrawSetProportional(playerid, PhoneTD[playerid][32], 1);
	PlayerTextDrawUseBox(playerid, PhoneTD[playerid][32], 1);
	PlayerTextDrawBoxColor(playerid, PhoneTD[playerid][32], -1);
	PlayerTextDrawTextSize(playerid, PhoneTD[playerid][32], 94.000000, 17.000000);
	PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][32], 1);

	PhoneTD[playerid][33] = CreatePlayerTextDraw(playerid, 516.500000, 333.000000, "splash1:splash1");
	PlayerTextDrawAlignment(playerid, PhoneTD[playerid][33], 2);
	PlayerTextDrawBackgroundColor(playerid, PhoneTD[playerid][33], 255);
	PlayerTextDrawFont(playerid, PhoneTD[playerid][33], 4);
	PlayerTextDrawLetterSize(playerid, PhoneTD[playerid][33], 0.300000, 1.099999);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][33], -1);
	PlayerTextDrawSetOutline(playerid, PhoneTD[playerid][33], 1);
	PlayerTextDrawSetProportional(playerid, PhoneTD[playerid][33], 1);
	PlayerTextDrawUseBox(playerid, PhoneTD[playerid][33], 1);
	PlayerTextDrawBoxColor(playerid, PhoneTD[playerid][33], -1);
	PlayerTextDrawTextSize(playerid, PhoneTD[playerid][33], 94.000000, 17.000000);
	PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][33], 1);

	PhoneTD[playerid][34] = CreatePlayerTextDraw(playerid, 516.500000, 351.000000, "splash2:splash2");
	PlayerTextDrawAlignment(playerid, PhoneTD[playerid][34], 2);
	PlayerTextDrawBackgroundColor(playerid, PhoneTD[playerid][34], 255);
	PlayerTextDrawFont(playerid, PhoneTD[playerid][34], 4);
	PlayerTextDrawLetterSize(playerid, PhoneTD[playerid][34], 0.300000, 1.099999);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][34], -1);
	PlayerTextDrawSetOutline(playerid, PhoneTD[playerid][34], 1);
	PlayerTextDrawSetProportional(playerid, PhoneTD[playerid][34], 1);
	PlayerTextDrawUseBox(playerid, PhoneTD[playerid][34], 1);
	PlayerTextDrawBoxColor(playerid, PhoneTD[playerid][34], -1);
	PlayerTextDrawTextSize(playerid, PhoneTD[playerid][34], 94.000000, 17.000000);
	PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][34], 1);

	PhoneTD[playerid][35] = CreatePlayerTextDraw(playerid, 516.500000, 369.000000, "LD_DUAL:backgnd");
	PlayerTextDrawAlignment(playerid, PhoneTD[playerid][35], 2);
	PlayerTextDrawBackgroundColor(playerid, PhoneTD[playerid][35], 255);
	PlayerTextDrawFont(playerid, PhoneTD[playerid][35], 4);
	PlayerTextDrawLetterSize(playerid, PhoneTD[playerid][35], 0.300000, 1.099999);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][35], -1);
	PlayerTextDrawSetOutline(playerid, PhoneTD[playerid][35], 1);
	PlayerTextDrawSetProportional(playerid, PhoneTD[playerid][35], 1);
	PlayerTextDrawUseBox(playerid, PhoneTD[playerid][35], 1);
	PlayerTextDrawBoxColor(playerid, PhoneTD[playerid][35], -1);
	PlayerTextDrawTextSize(playerid, PhoneTD[playerid][35], 94.000000, 17.000000);
	PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][35], 1);

	PhoneTD[playerid][36] = CreatePlayerTextDraw(playerid, 516.500000, 387.000000, "loadsc4:loadsc4");
	PlayerTextDrawAlignment(playerid, PhoneTD[playerid][36], 2);
	PlayerTextDrawBackgroundColor(playerid, PhoneTD[playerid][36], 255);
	PlayerTextDrawFont(playerid, PhoneTD[playerid][36], 4);
	PlayerTextDrawLetterSize(playerid, PhoneTD[playerid][36], 0.300000, 1.099999);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][36], -1);
	PlayerTextDrawSetOutline(playerid, PhoneTD[playerid][36], 1);
	PlayerTextDrawSetProportional(playerid, PhoneTD[playerid][36], 1);
	PlayerTextDrawUseBox(playerid, PhoneTD[playerid][36], 1);
	PlayerTextDrawBoxColor(playerid, PhoneTD[playerid][36], -1);
	PlayerTextDrawTextSize(playerid, PhoneTD[playerid][36], 94.000000, 17.000000);
	PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][36], 1);

	PhoneTD[playerid][39] = CreatePlayerTextDraw(playerid, 564.500000, 288.000000, "Select Wallpaper");
	PlayerTextDrawAlignment(playerid, PhoneTD[playerid][39], 2);
	PlayerTextDrawBackgroundColor(playerid, PhoneTD[playerid][39], 255);
	PlayerTextDrawFont(playerid, PhoneTD[playerid][39], 1);
	PlayerTextDrawLetterSize(playerid, PhoneTD[playerid][39], 0.250000, 0.799998);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][39], -1);
	PlayerTextDrawSetOutline(playerid, PhoneTD[playerid][39], 1);
	PlayerTextDrawSetProportional(playerid, PhoneTD[playerid][39], 1);

	PhoneTD[playerid][40] = CreatePlayerTextDraw(playerid, 576.000000, 312.000000, "~>~");
	PlayerTextDrawBackgroundColor(playerid, PhoneTD[playerid][40], 255);
	PlayerTextDrawFont(playerid, PhoneTD[playerid][40], 1);
	PlayerTextDrawLetterSize(playerid, PhoneTD[playerid][40], 0.290000, 0.799999);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][40], 16711935);
	PlayerTextDrawSetOutline(playerid, PhoneTD[playerid][40], 1);
	PlayerTextDrawSetProportional(playerid, PhoneTD[playerid][40], 1);
	PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][40], 1);

	PhoneTD[playerid][41] = CreatePlayerTextDraw(playerid, 520.500000, 311.000000, "Ringtone1");
	PlayerTextDrawBackgroundColor(playerid, PhoneTD[playerid][41], 255);
	PlayerTextDrawFont(playerid, PhoneTD[playerid][41], 1);
	PlayerTextDrawLetterSize(playerid, PhoneTD[playerid][41], 0.260000, 0.899998);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][41], -1);
	PlayerTextDrawSetOutline(playerid, PhoneTD[playerid][41], 1);
	PlayerTextDrawSetProportional(playerid, PhoneTD[playerid][41], 1);
	PlayerTextDrawUseBox(playerid, PhoneTD[playerid][41], 1);
	PlayerTextDrawBoxColor(playerid, PhoneTD[playerid][41], 0);
	PlayerTextDrawTextSize(playerid, PhoneTD[playerid][41], 564.000000, 8.000000);
	PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][41], 1);

	PhoneTD[playerid][42] = CreatePlayerTextDraw(playerid, 576.000000, 323.000000, "~>~");
	PlayerTextDrawBackgroundColor(playerid, PhoneTD[playerid][42], 255);
	PlayerTextDrawFont(playerid, PhoneTD[playerid][42], 1);
	PlayerTextDrawLetterSize(playerid, PhoneTD[playerid][42], 0.290000, 0.799999);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][42], 16711935);
	PlayerTextDrawSetOutline(playerid, PhoneTD[playerid][42], 1);
	PlayerTextDrawSetProportional(playerid, PhoneTD[playerid][42], 1);
	PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][42], 1);

	PhoneTD[playerid][43] = CreatePlayerTextDraw(playerid, 576.000000, 333.000000, "~>~");
	PlayerTextDrawBackgroundColor(playerid, PhoneTD[playerid][43], 255);
	PlayerTextDrawFont(playerid, PhoneTD[playerid][43], 1);
	PlayerTextDrawLetterSize(playerid, PhoneTD[playerid][43], 0.290000, 0.799999);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][43], 16711935);
	PlayerTextDrawSetOutline(playerid, PhoneTD[playerid][43], 1);
	PlayerTextDrawSetProportional(playerid, PhoneTD[playerid][43], 1);
	PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][43], 1);

	PhoneTD[playerid][44] = CreatePlayerTextDraw(playerid, 576.000000, 343.000000, "~>~");
	PlayerTextDrawBackgroundColor(playerid, PhoneTD[playerid][44], 255);
	PlayerTextDrawFont(playerid, PhoneTD[playerid][44], 1);
	PlayerTextDrawLetterSize(playerid, PhoneTD[playerid][44], 0.290000, 0.799999);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][44], 16711935);
	PlayerTextDrawSetOutline(playerid, PhoneTD[playerid][44], 1);
	PlayerTextDrawSetProportional(playerid, PhoneTD[playerid][44], 1);
	PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][44], 1);

	PhoneTD[playerid][45] = CreatePlayerTextDraw(playerid, 520.500000, 322.000000, "Ringtone2");
	PlayerTextDrawBackgroundColor(playerid, PhoneTD[playerid][45], 255);
	PlayerTextDrawFont(playerid, PhoneTD[playerid][45], 1);
	PlayerTextDrawLetterSize(playerid, PhoneTD[playerid][45], 0.260000, 0.899998);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][45], -1);
	PlayerTextDrawSetOutline(playerid, PhoneTD[playerid][45], 1);
	PlayerTextDrawSetProportional(playerid, PhoneTD[playerid][45], 1);
	PlayerTextDrawTextSize(playerid, PhoneTD[playerid][45], 564.000000, 8.000000);
	PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][45], 1);

	PhoneTD[playerid][46] = CreatePlayerTextDraw(playerid, 564.500000, 288.000000, "Select Ringtone");
	PlayerTextDrawAlignment(playerid, PhoneTD[playerid][46], 2);
	PlayerTextDrawBackgroundColor(playerid, PhoneTD[playerid][46], 255);
	PlayerTextDrawFont(playerid, PhoneTD[playerid][46], 1);
	PlayerTextDrawLetterSize(playerid, PhoneTD[playerid][46], 0.250000, 0.799997);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][46], -1);
	PlayerTextDrawSetOutline(playerid, PhoneTD[playerid][46], 1);
	PlayerTextDrawSetProportional(playerid, PhoneTD[playerid][46], 1);

	PhoneTD[playerid][47] = CreatePlayerTextDraw(playerid, 576.000000, 353.000000, "~>~");
	PlayerTextDrawBackgroundColor(playerid, PhoneTD[playerid][47], 255);
	PlayerTextDrawFont(playerid, PhoneTD[playerid][47], 1);
	PlayerTextDrawLetterSize(playerid, PhoneTD[playerid][47], 0.290000, 0.799999);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][47], 16711935);
	PlayerTextDrawSetOutline(playerid, PhoneTD[playerid][47], 1);
	PlayerTextDrawSetProportional(playerid, PhoneTD[playerid][47], 1);
	PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][47], 1);

	PhoneTD[playerid][48] = CreatePlayerTextDraw(playerid, 520.500000, 332.000000, "Ringtone3");
	PlayerTextDrawBackgroundColor(playerid, PhoneTD[playerid][48], 255);
	PlayerTextDrawFont(playerid, PhoneTD[playerid][48], 1);
	PlayerTextDrawLetterSize(playerid, PhoneTD[playerid][48], 0.260000, 0.899998);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][48], -1);
	PlayerTextDrawSetOutline(playerid, PhoneTD[playerid][48], 1);
	PlayerTextDrawSetProportional(playerid, PhoneTD[playerid][48], 1);
	PlayerTextDrawTextSize(playerid, PhoneTD[playerid][48], 564.000000, 8.000000);
	PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][48], 1);

	PhoneTD[playerid][49] = CreatePlayerTextDraw(playerid, 520.500000, 342.000000, "Ringtone4");
	PlayerTextDrawBackgroundColor(playerid, PhoneTD[playerid][49], 255);
	PlayerTextDrawFont(playerid, PhoneTD[playerid][49], 1);
	PlayerTextDrawLetterSize(playerid, PhoneTD[playerid][49], 0.260000, 0.899998);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][49], -1);
	PlayerTextDrawSetOutline(playerid, PhoneTD[playerid][49], 1);
	PlayerTextDrawSetProportional(playerid, PhoneTD[playerid][49], 1);
	PlayerTextDrawTextSize(playerid, PhoneTD[playerid][49], 564.000000, 8.000000);
	PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][49], 1);

	PhoneTD[playerid][50] = CreatePlayerTextDraw(playerid, 520.500000, 352.000000, "Ringtone5");
	PlayerTextDrawBackgroundColor(playerid, PhoneTD[playerid][50], 255);
	PlayerTextDrawFont(playerid, PhoneTD[playerid][50], 1);
	PlayerTextDrawLetterSize(playerid, PhoneTD[playerid][50], 0.260000, 0.899998);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][50], -1);
	PlayerTextDrawSetOutline(playerid, PhoneTD[playerid][50], 1);
	PlayerTextDrawSetProportional(playerid, PhoneTD[playerid][50], 1);
	PlayerTextDrawTextSize(playerid, PhoneTD[playerid][50], 564.000000, 8.000000);
	PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][50], 1);

	PhoneTD[playerid][51] = CreatePlayerTextDraw(playerid, 518.500000, 317.000000, "1");
	PlayerTextDrawBackgroundColor(playerid, PhoneTD[playerid][51], 255);
	PlayerTextDrawFont(playerid, PhoneTD[playerid][51], 1);
	PlayerTextDrawLetterSize(playerid, PhoneTD[playerid][51], 0.1900, 0.9999);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][51], -1);
	PlayerTextDrawSetOutline(playerid, PhoneTD[playerid][51], 1);
	PlayerTextDrawSetProportional(playerid, PhoneTD[playerid][51], 1);
	PlayerTextDrawUseBox(playerid, PhoneTD[playerid][51], 1);
	PlayerTextDrawBoxColor(playerid, PhoneTD[playerid][51], 0);
	PlayerTextDrawTextSize(playerid, PhoneTD[playerid][51], 564.000000, 10.000000);
	PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][51], 1);

	PhoneTD[playerid][52] = CreatePlayerTextDraw(playerid, 520.500000, 302.000000, "Name    Number");
	PlayerTextDrawBackgroundColor(playerid, PhoneTD[playerid][52], 255);
	PlayerTextDrawFont(playerid, PhoneTD[playerid][52], 1);
	PlayerTextDrawLetterSize(playerid, PhoneTD[playerid][52], 0.259999, 0.899998);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][52], -1);
	PlayerTextDrawSetOutline(playerid, PhoneTD[playerid][52], 1);
	PlayerTextDrawSetProportional(playerid, PhoneTD[playerid][52], 1);
	PlayerTextDrawUseBox(playerid, PhoneTD[playerid][52], 1);
	PlayerTextDrawBoxColor(playerid, PhoneTD[playerid][52], 0);
	PlayerTextDrawTextSize(playerid, PhoneTD[playerid][52], 624.000000, 2.000000);

	PhoneTD[playerid][53] = CreatePlayerTextDraw(playerid, 518.500000, 328.000000, "2");
	PlayerTextDrawBackgroundColor(playerid, PhoneTD[playerid][53], 255);
	PlayerTextDrawFont(playerid, PhoneTD[playerid][53], 1);
	PlayerTextDrawLetterSize(playerid, PhoneTD[playerid][53], 0.1900, 0.9999);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][53], -1);
	PlayerTextDrawSetOutline(playerid, PhoneTD[playerid][53], 1);
	PlayerTextDrawSetProportional(playerid, PhoneTD[playerid][53], 1);
	PlayerTextDrawUseBox(playerid, PhoneTD[playerid][53], 1);
	PlayerTextDrawBoxColor(playerid, PhoneTD[playerid][53], 0);
	PlayerTextDrawTextSize(playerid, PhoneTD[playerid][53], 564.000000, 10.000000);
	PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][53], 1);

	PhoneTD[playerid][54] = CreatePlayerTextDraw(playerid, 518.799987, 339.000000, "3");
	PlayerTextDrawBackgroundColor(playerid, PhoneTD[playerid][54], 255);
	PlayerTextDrawFont(playerid, PhoneTD[playerid][54], 1);
	PlayerTextDrawLetterSize(playerid, PhoneTD[playerid][54], 0.1900, 0.9999);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][54], -1);
	PlayerTextDrawSetOutline(playerid, PhoneTD[playerid][54], 1);
	PlayerTextDrawSetProportional(playerid, PhoneTD[playerid][54], 1);
	PlayerTextDrawUseBox(playerid, PhoneTD[playerid][54], 1);
	PlayerTextDrawBoxColor(playerid, PhoneTD[playerid][54], 0);
	PlayerTextDrawTextSize(playerid, PhoneTD[playerid][54], 564.000000, 10.000000);
	PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][54], 1);

	PhoneTD[playerid][55] = CreatePlayerTextDraw(playerid, 518.500000, 351.000000, "4");
	PlayerTextDrawBackgroundColor(playerid, PhoneTD[playerid][55], 255);
	PlayerTextDrawFont(playerid, PhoneTD[playerid][55], 1);
	PlayerTextDrawLetterSize(playerid, PhoneTD[playerid][55], 0.1900, 0.9999);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][55], -1);
	PlayerTextDrawSetOutline(playerid, PhoneTD[playerid][55], 1);
	PlayerTextDrawSetProportional(playerid, PhoneTD[playerid][55], 1);
	PlayerTextDrawUseBox(playerid, PhoneTD[playerid][55], 1);
	PlayerTextDrawBoxColor(playerid, PhoneTD[playerid][55], 0);
	PlayerTextDrawTextSize(playerid, PhoneTD[playerid][55], 564.000000, 10.000000);
	PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][55], 1);

	PhoneTD[playerid][56] = CreatePlayerTextDraw(playerid, 518.500000, 364.000000, "5");
	PlayerTextDrawBackgroundColor(playerid, PhoneTD[playerid][56], 255);
	PlayerTextDrawFont(playerid, PhoneTD[playerid][56], 1);
	PlayerTextDrawLetterSize(playerid, PhoneTD[playerid][56], 0.1900, 0.9999);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][56], -1);
	PlayerTextDrawSetOutline(playerid, PhoneTD[playerid][56], 1);
	PlayerTextDrawSetProportional(playerid, PhoneTD[playerid][56], 1);
	PlayerTextDrawUseBox(playerid, PhoneTD[playerid][56], 1);
	PlayerTextDrawBoxColor(playerid, PhoneTD[playerid][56], 0);
	PlayerTextDrawTextSize(playerid, PhoneTD[playerid][56], 564.000000, 10.000000);
	PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][56], 1);

	PhoneTD[playerid][57] = CreatePlayerTextDraw(playerid, 564.500000, 288.000000, "My Contacts");
	PlayerTextDrawAlignment(playerid, PhoneTD[playerid][57], 2);
	PlayerTextDrawBackgroundColor(playerid, PhoneTD[playerid][57], 255);
	PlayerTextDrawFont(playerid, PhoneTD[playerid][57], 1);
	PlayerTextDrawLetterSize(playerid, PhoneTD[playerid][57], 0.250000, 0.799997);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][57], -1);
	PlayerTextDrawSetOutline(playerid, PhoneTD[playerid][57], 1);
	PlayerTextDrawSetProportional(playerid, PhoneTD[playerid][57], 1);

	PhoneTD[playerid][58] = CreatePlayerTextDraw(playerid, 518.500000, 377.000000, "6");
	PlayerTextDrawBackgroundColor(playerid, PhoneTD[playerid][58], 255);
	PlayerTextDrawFont(playerid, PhoneTD[playerid][58], 1);
	PlayerTextDrawLetterSize(playerid, PhoneTD[playerid][58], 0.1900, 0.9999);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][58], -1);
	PlayerTextDrawSetOutline(playerid, PhoneTD[playerid][58], 1);
	PlayerTextDrawSetProportional(playerid, PhoneTD[playerid][58], 1);
	PlayerTextDrawUseBox(playerid, PhoneTD[playerid][58], 1);
	PlayerTextDrawBoxColor(playerid, PhoneTD[playerid][58], 0);
	PlayerTextDrawTextSize(playerid, PhoneTD[playerid][58], 564.000000, 10.000000);
	PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][58], 1);

	PhoneTD[playerid][59] = CreatePlayerTextDraw(playerid, 518.500000, 389.000000, "7");
	PlayerTextDrawBackgroundColor(playerid, PhoneTD[playerid][59], 255);
	PlayerTextDrawFont(playerid, PhoneTD[playerid][59], 1);
	PlayerTextDrawLetterSize(playerid, PhoneTD[playerid][59], 0.1900, 0.9999);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][59], -1);
	PlayerTextDrawSetOutline(playerid, PhoneTD[playerid][59], 1);
	PlayerTextDrawSetProportional(playerid, PhoneTD[playerid][59], 1);
	PlayerTextDrawUseBox(playerid, PhoneTD[playerid][59], 1);
	PlayerTextDrawBoxColor(playerid, PhoneTD[playerid][59], 0);
	PlayerTextDrawTextSize(playerid, PhoneTD[playerid][59], 564.000000, 10.000000);
	PlayerTextDrawSetSelectable(playerid, PhoneTD[playerid][59], 1);

	PhoneTD[playerid][60] = CreatePlayerTextDraw(playerid, 573.500000, 317.000000, "1num");
	PlayerTextDrawBackgroundColor(playerid, PhoneTD[playerid][60], 255);
	PlayerTextDrawFont(playerid, PhoneTD[playerid][60], 1);
	PlayerTextDrawLetterSize(playerid, PhoneTD[playerid][60], 0.1900, 0.9999);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][60], -1);
	PlayerTextDrawSetOutline(playerid, PhoneTD[playerid][60], 1);
	PlayerTextDrawSetProportional(playerid, PhoneTD[playerid][60], 1);

	PhoneTD[playerid][61] = CreatePlayerTextDraw(playerid, 573.500000, 327.000000, "2num");
	PlayerTextDrawBackgroundColor(playerid, PhoneTD[playerid][61], 255);
	PlayerTextDrawFont(playerid, PhoneTD[playerid][61], 1);
	PlayerTextDrawLetterSize(playerid, PhoneTD[playerid][61], 0.1900, 0.9999);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][61], -1);
	PlayerTextDrawSetOutline(playerid, PhoneTD[playerid][61], 1);
	PlayerTextDrawSetProportional(playerid, PhoneTD[playerid][61], 1);

	PhoneTD[playerid][62] = CreatePlayerTextDraw(playerid, 573.500000, 338.000000, "3num");
	PlayerTextDrawBackgroundColor(playerid, PhoneTD[playerid][62], 255);
	PlayerTextDrawFont(playerid, PhoneTD[playerid][62], 1);
	PlayerTextDrawLetterSize(playerid, PhoneTD[playerid][62], 0.1900, 0.9999);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][62], -1);
	PlayerTextDrawSetOutline(playerid, PhoneTD[playerid][62], 1);
	PlayerTextDrawSetProportional(playerid, PhoneTD[playerid][62], 1);

	PhoneTD[playerid][63] = CreatePlayerTextDraw(playerid, 573.500000, 350.000000, "4num");
	PlayerTextDrawBackgroundColor(playerid, PhoneTD[playerid][63], 255);
	PlayerTextDrawFont(playerid, PhoneTD[playerid][63], 1);
	PlayerTextDrawLetterSize(playerid, PhoneTD[playerid][63], 0.1900, 0.9999);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][63], -1);
	PlayerTextDrawSetOutline(playerid, PhoneTD[playerid][63], 1);
	PlayerTextDrawSetProportional(playerid, PhoneTD[playerid][63], 1);

	PhoneTD[playerid][64] = CreatePlayerTextDraw(playerid, 573.500000, 363.000000, "5num");
	PlayerTextDrawBackgroundColor(playerid, PhoneTD[playerid][64], 255);
	PlayerTextDrawFont(playerid, PhoneTD[playerid][64], 1);
	PlayerTextDrawLetterSize(playerid, PhoneTD[playerid][64], 0.1900, 0.9999);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][64], -1);
	PlayerTextDrawSetOutline(playerid, PhoneTD[playerid][64], 1);
	PlayerTextDrawSetProportional(playerid, PhoneTD[playerid][64], 1);

	PhoneTD[playerid][65] = CreatePlayerTextDraw(playerid, 573.500000, 377.000000, "6num");
	PlayerTextDrawBackgroundColor(playerid, PhoneTD[playerid][65], 255);
	PlayerTextDrawFont(playerid, PhoneTD[playerid][65], 1);
	PlayerTextDrawLetterSize(playerid, PhoneTD[playerid][65], 0.1900, 0.9999);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][65], -1);
	PlayerTextDrawSetOutline(playerid, PhoneTD[playerid][65], 1);
	PlayerTextDrawSetProportional(playerid, PhoneTD[playerid][65], 1);

	PhoneTD[playerid][66] = CreatePlayerTextDraw(playerid, 573.500000, 390.000000, "7num");
	PlayerTextDrawBackgroundColor(playerid, PhoneTD[playerid][66], 255);
	PlayerTextDrawFont(playerid, PhoneTD[playerid][66], 1);
	PlayerTextDrawLetterSize(playerid, PhoneTD[playerid][66], 0.1900, 0.9999);
	PlayerTextDrawColor(playerid, PhoneTD[playerid][66], -1);
	PlayerTextDrawSetOutline(playerid, PhoneTD[playerid][66], 1);
	PlayerTextDrawSetProportional(playerid, PhoneTD[playerid][66], 1);
  }
}
stock CreateTikTD(playerid)
{
  if(TikCreated[playerid] == 0 && playerid >=0)
  {
    TikCreated[playerid] = 1;
	TickTD[playerid][0] = CreatePlayerTextDraw(playerid, 190.000000, 151.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, TickTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, TickTD[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid, TickTD[playerid][0], 15.000000, 16.899999);
	PlayerTextDrawColor(playerid, TickTD[playerid][0], -1);
	PlayerTextDrawSetOutline(playerid, TickTD[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid, TickTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, TickTD[playerid][0], 1);
	PlayerTextDrawUseBox(playerid, TickTD[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, TickTD[playerid][0], 150);
	PlayerTextDrawTextSize(playerid, TickTD[playerid][0], 401.000000, 81.000000);
	PlayerTextDrawSetSelectable(playerid, TickTD[playerid][0], 0);

	TickTD[playerid][1] = CreatePlayerTextDraw(playerid, 189.000000, 237.000000, "-");
	PlayerTextDrawBackgroundColor(playerid, TickTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, TickTD[playerid][1], 1);
	PlayerTextDrawLetterSize(playerid, TickTD[playerid][1], 15.000000, 1.799998);
	PlayerTextDrawColor(playerid, TickTD[playerid][1], -1);
	PlayerTextDrawSetOutline(playerid, TickTD[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid, TickTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, TickTD[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, TickTD[playerid][1], 0);

	TickTD[playerid][2] = CreatePlayerTextDraw(playerid, 269.000000, 168.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, TickTD[playerid][2], 255);
	PlayerTextDrawFont(playerid, TickTD[playerid][2], 1);
	PlayerTextDrawLetterSize(playerid, TickTD[playerid][2], 0.500000, 13.299997);
	PlayerTextDrawColor(playerid, TickTD[playerid][2], -1);
	PlayerTextDrawSetOutline(playerid, TickTD[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid, TickTD[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, TickTD[playerid][2], 1);
	PlayerTextDrawUseBox(playerid, TickTD[playerid][2], 1);
	PlayerTextDrawBoxColor(playerid, TickTD[playerid][2], -1);
	PlayerTextDrawTextSize(playerid, TickTD[playerid][2], 262.000000, 132.000000);
	PlayerTextDrawSetSelectable(playerid, TickTD[playerid][2], 0);

	TickTD[playerid][3] = CreatePlayerTextDraw(playerid, 330.500000, 168.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, TickTD[playerid][3], 255);
	PlayerTextDrawFont(playerid, TickTD[playerid][3], 1);
	PlayerTextDrawLetterSize(playerid, TickTD[playerid][3], 0.500000, 13.299997);
	PlayerTextDrawColor(playerid, TickTD[playerid][3], -1);
	PlayerTextDrawSetOutline(playerid, TickTD[playerid][3], 0);
	PlayerTextDrawSetProportional(playerid, TickTD[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, TickTD[playerid][3], 1);
	PlayerTextDrawUseBox(playerid, TickTD[playerid][3], 1);
	PlayerTextDrawBoxColor(playerid, TickTD[playerid][3], -1);
	PlayerTextDrawTextSize(playerid, TickTD[playerid][3], 327.000000, 133.000000);
	PlayerTextDrawSetSelectable(playerid, TickTD[playerid][3], 0);

	TickTD[playerid][4] = CreatePlayerTextDraw(playerid, 231.000000, 141.000000, "~r~Tic-Tac-Toe");
	PlayerTextDrawBackgroundColor(playerid, TickTD[playerid][4], 255);
	PlayerTextDrawFont(playerid, TickTD[playerid][4], 3);
	PlayerTextDrawLetterSize(playerid, TickTD[playerid][4], 0.589999, 1.700000);
	PlayerTextDrawColor(playerid, TickTD[playerid][4], -1);
	PlayerTextDrawSetOutline(playerid, TickTD[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, TickTD[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, TickTD[playerid][4], 0);

	TickTD[playerid][5] = CreatePlayerTextDraw(playerid, 189.000000, 187.000000, "-");
	PlayerTextDrawBackgroundColor(playerid, TickTD[playerid][5], 255);
	PlayerTextDrawFont(playerid, TickTD[playerid][5], 1);
	PlayerTextDrawLetterSize(playerid, TickTD[playerid][5], 15.000000, 1.799998);
	PlayerTextDrawColor(playerid, TickTD[playerid][5], -1);
	PlayerTextDrawSetOutline(playerid, TickTD[playerid][5], 0);
	PlayerTextDrawSetProportional(playerid, TickTD[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, TickTD[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid, TickTD[playerid][5], 0);

	TickTD[playerid][6] = CreatePlayerTextDraw(playerid, 226.000000, 167.000000, "~y~X");
	PlayerTextDrawBackgroundColor(playerid, TickTD[playerid][6], 255);
	PlayerTextDrawFont(playerid, TickTD[playerid][6], 1);
	PlayerTextDrawLetterSize(playerid, TickTD[playerid][6], 0.829999, 3.099998);
	PlayerTextDrawColor(playerid, TickTD[playerid][6], -1);
	PlayerTextDrawSetOutline(playerid, TickTD[playerid][6], 0);
	PlayerTextDrawSetProportional(playerid, TickTD[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, TickTD[playerid][6], 1);
	PlayerTextDrawUseBox(playerid, TickTD[playerid][6], 1);
	PlayerTextDrawBoxColor(playerid, TickTD[playerid][6], 0);
	PlayerTextDrawTextSize(playerid, TickTD[playerid][6], 248.000000, 26.000000);
	PlayerTextDrawSetSelectable(playerid, TickTD[playerid][6], 1);

	TickTD[playerid][7] = CreatePlayerTextDraw(playerid, 283.000000, 167.000000, "~y~O");
	PlayerTextDrawBackgroundColor(playerid, TickTD[playerid][7], 255);
	PlayerTextDrawFont(playerid, TickTD[playerid][7], 1);
	PlayerTextDrawLetterSize(playerid, TickTD[playerid][7], 0.829999, 3.099997);
	PlayerTextDrawColor(playerid, TickTD[playerid][7], -1);
	PlayerTextDrawSetOutline(playerid, TickTD[playerid][7], 0);
	PlayerTextDrawSetProportional(playerid, TickTD[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid, TickTD[playerid][7], 1);
	PlayerTextDrawUseBox(playerid, TickTD[playerid][7], 1);
	PlayerTextDrawBoxColor(playerid, TickTD[playerid][7], 0);
	PlayerTextDrawTextSize(playerid, TickTD[playerid][7], 318.000000, 26.000000);
	PlayerTextDrawSetSelectable(playerid, TickTD[playerid][7], 1);

	TickTD[playerid][8] = CreatePlayerTextDraw(playerid, 344.000000, 167.000000, "~y~O");
	PlayerTextDrawBackgroundColor(playerid, TickTD[playerid][8], 255);
	PlayerTextDrawFont(playerid, TickTD[playerid][8], 1);
	PlayerTextDrawLetterSize(playerid, TickTD[playerid][8], 0.829999, 3.099997);
	PlayerTextDrawColor(playerid, TickTD[playerid][8], -1);
	PlayerTextDrawSetOutline(playerid, TickTD[playerid][8], 0);
	PlayerTextDrawSetProportional(playerid, TickTD[playerid][8], 1);
	PlayerTextDrawSetShadow(playerid, TickTD[playerid][8], 1);
	PlayerTextDrawUseBox(playerid, TickTD[playerid][8], 1);
	PlayerTextDrawBoxColor(playerid, TickTD[playerid][8], 0);
	PlayerTextDrawTextSize(playerid, TickTD[playerid][8], 391.000000, 26.000000);
	PlayerTextDrawSetSelectable(playerid, TickTD[playerid][8], 1);

	TickTD[playerid][9] = CreatePlayerTextDraw(playerid, 224.000000, 212.000000, "~y~O");
	PlayerTextDrawBackgroundColor(playerid, TickTD[playerid][9], 255);
	PlayerTextDrawFont(playerid, TickTD[playerid][9], 1);
	PlayerTextDrawLetterSize(playerid, TickTD[playerid][9], 0.829999, 3.099997);
	PlayerTextDrawColor(playerid, TickTD[playerid][9], -1);
	PlayerTextDrawSetOutline(playerid, TickTD[playerid][9], 0);
	PlayerTextDrawSetProportional(playerid, TickTD[playerid][9], 1);
	PlayerTextDrawSetShadow(playerid, TickTD[playerid][9], 1);
	PlayerTextDrawUseBox(playerid, TickTD[playerid][9], 1);
	PlayerTextDrawBoxColor(playerid, TickTD[playerid][9], 0);
	PlayerTextDrawTextSize(playerid, TickTD[playerid][9], 259.000000, 26.000000);
	PlayerTextDrawSetSelectable(playerid, TickTD[playerid][9], 1);

	TickTD[playerid][10] = CreatePlayerTextDraw(playerid, 284.000000, 212.000000, "~y~O");
	PlayerTextDrawBackgroundColor(playerid, TickTD[playerid][10], 255);
	PlayerTextDrawFont(playerid, TickTD[playerid][10], 1);
	PlayerTextDrawLetterSize(playerid, TickTD[playerid][10], 0.829999, 3.099997);
	PlayerTextDrawColor(playerid, TickTD[playerid][10], -1);
	PlayerTextDrawSetOutline(playerid, TickTD[playerid][10], 0);
	PlayerTextDrawSetProportional(playerid, TickTD[playerid][10], 1);
	PlayerTextDrawSetShadow(playerid, TickTD[playerid][10], 1);
	PlayerTextDrawUseBox(playerid, TickTD[playerid][10], 1);
	PlayerTextDrawBoxColor(playerid, TickTD[playerid][10], 0);
	PlayerTextDrawTextSize(playerid, TickTD[playerid][10], 314.000000, 26.000000);
	PlayerTextDrawSetSelectable(playerid, TickTD[playerid][10], 1);

	TickTD[playerid][11] = CreatePlayerTextDraw(playerid, 345.000000, 212.000000, "~y~O");
	PlayerTextDrawBackgroundColor(playerid, TickTD[playerid][11], 255);
	PlayerTextDrawFont(playerid, TickTD[playerid][11], 1);
	PlayerTextDrawLetterSize(playerid, TickTD[playerid][11], 0.829999, 3.099997);
	PlayerTextDrawColor(playerid, TickTD[playerid][11], -1);
	PlayerTextDrawSetOutline(playerid, TickTD[playerid][11], 0);
	PlayerTextDrawSetProportional(playerid, TickTD[playerid][11], 1);
	PlayerTextDrawSetShadow(playerid, TickTD[playerid][11], 1);
	PlayerTextDrawUseBox(playerid, TickTD[playerid][11], 1);
	PlayerTextDrawBoxColor(playerid, TickTD[playerid][11], 0);
	PlayerTextDrawTextSize(playerid, TickTD[playerid][11], 383.000000, 26.000000);
	PlayerTextDrawSetSelectable(playerid, TickTD[playerid][11], 1);

	TickTD[playerid][12] = CreatePlayerTextDraw(playerid, 225.000000, 258.000000, "~y~O");
	PlayerTextDrawBackgroundColor(playerid, TickTD[playerid][12], 255);
	PlayerTextDrawFont(playerid, TickTD[playerid][12], 1);
	PlayerTextDrawLetterSize(playerid, TickTD[playerid][12], 0.829999, 3.099997);
	PlayerTextDrawColor(playerid, TickTD[playerid][12], -1);
	PlayerTextDrawSetOutline(playerid, TickTD[playerid][12], 0);
	PlayerTextDrawSetProportional(playerid, TickTD[playerid][12], 1);
	PlayerTextDrawSetShadow(playerid, TickTD[playerid][12], 1);
	PlayerTextDrawUseBox(playerid, TickTD[playerid][12], 1);
	PlayerTextDrawBoxColor(playerid, TickTD[playerid][12], 0);
	PlayerTextDrawTextSize(playerid, TickTD[playerid][12], 262.000000, 26.000000);
	PlayerTextDrawSetSelectable(playerid, TickTD[playerid][12], 1);

	TickTD[playerid][13] = CreatePlayerTextDraw(playerid, 284.000000, 258.000000, "~y~O");
	PlayerTextDrawBackgroundColor(playerid, TickTD[playerid][13], 255);
	PlayerTextDrawFont(playerid, TickTD[playerid][13], 1);
	PlayerTextDrawLetterSize(playerid, TickTD[playerid][13], 0.829999, 3.099997);
	PlayerTextDrawColor(playerid, TickTD[playerid][13], -1);
	PlayerTextDrawSetOutline(playerid, TickTD[playerid][13], 0);
	PlayerTextDrawSetProportional(playerid, TickTD[playerid][13], 1);
	PlayerTextDrawSetShadow(playerid, TickTD[playerid][13], 1);
	PlayerTextDrawUseBox(playerid, TickTD[playerid][13], 1);
	PlayerTextDrawBoxColor(playerid, TickTD[playerid][13], 0);
	PlayerTextDrawTextSize(playerid, TickTD[playerid][13], 322.000000, 26.000000);
	PlayerTextDrawSetSelectable(playerid, TickTD[playerid][13], 1);

	TickTD[playerid][14] = CreatePlayerTextDraw(playerid, 345.000000, 259.000000, "~y~O");
	PlayerTextDrawBackgroundColor(playerid, TickTD[playerid][14], 255);
	PlayerTextDrawFont(playerid, TickTD[playerid][14], 1);
	PlayerTextDrawLetterSize(playerid, TickTD[playerid][14], 0.829999, 3.099997);
	PlayerTextDrawColor(playerid, TickTD[playerid][14], -1);
	PlayerTextDrawSetOutline(playerid, TickTD[playerid][14], 0);
	PlayerTextDrawSetProportional(playerid, TickTD[playerid][14], 1);
	PlayerTextDrawSetShadow(playerid, TickTD[playerid][14], 1);
	PlayerTextDrawUseBox(playerid, TickTD[playerid][14], 1);
	PlayerTextDrawBoxColor(playerid, TickTD[playerid][14], 0);
	PlayerTextDrawTextSize(playerid, TickTD[playerid][14], 391.000000, 26.000000);
	PlayerTextDrawSetSelectable(playerid, TickTD[playerid][14], 1);

	TickTD[playerid][15] = CreatePlayerTextDraw(playerid, 268.000000, 309.000000, "~p~Your Turn");
	PlayerTextDrawBackgroundColor(playerid, TickTD[playerid][15], 255);
	PlayerTextDrawFont(playerid, TickTD[playerid][15], 1);
	PlayerTextDrawLetterSize(playerid, TickTD[playerid][15], 0.349999, 1.299998);
	PlayerTextDrawColor(playerid, TickTD[playerid][15], -1);
	PlayerTextDrawSetOutline(playerid, TickTD[playerid][15], 1);
	PlayerTextDrawSetProportional(playerid, TickTD[playerid][15], 1);
	PlayerTextDrawSetSelectable(playerid, TickTD[playerid][15], 0);


	TickTD[playerid][15] = CreatePlayerTextDraw(playerid, 296.000000, 309.000000, "~p~Your Turn");
	PlayerTextDrawAlignment(playerid, TickTD[playerid][15], 2);
	PlayerTextDrawBackgroundColor(playerid, TickTD[playerid][15], 255);
	PlayerTextDrawFont(playerid, TickTD[playerid][15], 1);
	PlayerTextDrawLetterSize(playerid, TickTD[playerid][15], 0.349999, 1.299998);
	PlayerTextDrawColor(playerid, TickTD[playerid][15], -1);
	PlayerTextDrawSetOutline(playerid, TickTD[playerid][15], 1);
	PlayerTextDrawSetProportional(playerid, TickTD[playerid][15], 1);
	PlayerTextDrawUseBox(playerid, TickTD[playerid][15], 1);
	PlayerTextDrawBoxColor(playerid, TickTD[playerid][15], 0);
	PlayerTextDrawTextSize(playerid, TickTD[playerid][15], 0.000000, 113.000000);
	PlayerTextDrawSetSelectable(playerid, TickTD[playerid][15], 0);


	TickTD[playerid][16] = CreatePlayerTextDraw(playerid, 296.000000, 326.000000, "Round I~n~~n~1:1");
	PlayerTextDrawAlignment(playerid, TickTD[playerid][16] , 2);
	PlayerTextDrawBackgroundColor(playerid, TickTD[playerid][16] , 255);
	PlayerTextDrawFont(playerid, TickTD[playerid][16] , 1);
	PlayerTextDrawLetterSize(playerid, TickTD[playerid][16] , 0.250000, 0.699997);
	PlayerTextDrawColor(playerid, TickTD[playerid][16] , -1);
	PlayerTextDrawSetOutline(playerid, TickTD[playerid][16] , 1);
	PlayerTextDrawSetProportional(playerid, TickTD[playerid][16] , 1);
	PlayerTextDrawUseBox(playerid, TickTD[playerid][16] , 1);
	PlayerTextDrawBoxColor(playerid, TickTD[playerid][16] , 0);
	PlayerTextDrawTextSize(playerid, TickTD[playerid][16] , 0.000000, 113.000000);
	PlayerTextDrawSetSelectable(playerid, TickTD[playerid][16] , 0);
  }

}

//======CTF
forward StartCTFCount();
public StartCTFCount()
{
  if(CTFstarttime > 0)
  {
      new count = CTFCount1+CTFCount2;
	  CTFstarttime--;
      new str[128];
	  format(str, sizeof(str), "~g~~h~Capture the flag ~b~starts~n~in ~r~%d ~p~seconds", CTFstarttime);
	  foreach(new i : Player)
	  {
        if(GetPVarInt(i, "inCTF"))
	    {
          PlayerTextDrawHide(i, pInfoTD[i]);
		  SendInfoText(i, 1000, str);
		}
	  }
	  if(count ==0)
	  {
	       KillTimer(CTFStartTimer);
           KillTimer(CTFStartTimer2);
           CTFStartTimer=-1;
           CTFStartTimer2=-1;
           ctf = 0;
	  }
  }
  else
  {
	       KillTimer(CTFStartTimer);
           CTFStartTimer=-1;
  }
}
forward StartCTF();
public StartCTF()
{
    KillTimer(CTFStartTimer), CTFStartTimer=-1;
	new count =CTFCount1+CTFCount2;
    if(count < 2)
	{
      ctf = 0;
	  SendClientMessageToAll(DERBYCOLOR, "{00A15E}» CTF « {13D6B2}Capture the flag has been cancelled {00A15E}(Not enough players)");
      foreach (new i : Player) if(GetPVarInt(i, "inCTF")) Remove_From_CTF(i, 0);
      KillTimer(CTFStartTimer);
      KillTimer(CTFStartTimer2);
      CTFStartTimer=-1;
      CTFStartTimer2=-1;
      foreach (new i : Player)
      {
	    inctf[i]=0;
	    ctfteam1[i]=0;
	    ctfteam2[i]=0;
	    SetPlayerTeam(i, NO_TEAM);
	  }
	}
	else
	{
	   inFG1 =1;
	   inFG2 =1;
	   FlagCaptured[0]=0, FlagCaptured[1]=0;

  	   ctfflag[0] = CreateDynamicPickup(2993, 23, CTF_Flag1_Spawn[ctftype][0], CTF_Flag1_Spawn[ctftype][1], CTF_Flag1_Spawn[ctftype][2], 1777);
  	   ctfflag[1] = CreateDynamicPickup(2993, 23, CTF_Flag2_Spawn[ctftype][0], CTF_Flag2_Spawn[ctftype][1], CTF_Flag2_Spawn[ctftype][2], 1777);

       flagpos[0][0]=CTF_Flag1_Spawn[ctftype][0];
       flagpos[0][1]=CTF_Flag1_Spawn[ctftype][1];
       flagpos[0][2]=CTF_Flag1_Spawn[ctftype][2];

       flagpos[1][0]=CTF_Flag2_Spawn[ctftype][0];
       flagpos[1][1]=CTF_Flag2_Spawn[ctftype][1];
       flagpos[1][2]=CTF_Flag2_Spawn[ctftype][2];

  	   ctfmapicon[0] = CreateDynamicMapIcon(CTF_Flag1_Spawn[ctftype][0], CTF_Flag1_Spawn[ctftype][1], CTF_Flag1_Spawn[ctftype][2], 58, 0, 1777, -1, -1, 20000.0000);
  	   ctfmapicon[1] = CreateDynamicMapIcon(CTF_Flag2_Spawn[ctftype][0], CTF_Flag2_Spawn[ctftype][1], CTF_Flag2_Spawn[ctftype][2], 62, 0, 1777, -1, -1, 20000.0000);

       Streamer_SetIntData(STREAMER_TYPE_MAP_ICON ,  ctfmapicon[0], E_STREAMER_STYLE, 1);
       Streamer_SetIntData(STREAMER_TYPE_MAP_ICON ,  ctfmapicon[1], E_STREAMER_STYLE, 1);

	   ctf=1;

       SendClientMessageToAll(DERBYCOLOR, "{00A15E}» CTF « {13D6B2}Capture the flag has been started!");
	   foreach(new i : Player)
	   {
         //TextDrawHideForPlayer(i, CTFwaiting);
		 new a=GetPVarInt(i, "inCTF");
		 if(a > 0)
		 {
			ResetPlayerWeaponsEX(i);
			GivePlayerWeapon(i, CTF_WEAPON[ctftype][0], 100000);
			GivePlayerWeapon(i, CTF_WEAPON[ctftype][1], 100000);
			GivePlayerWeapon(i, CTF_WEAPON[ctftype][2], 5);

			SetCameraBehindPlayer(i);
		    TogglePlayerControllable2(i, 1);
			for(new x=0; x<8; x++) PlayerTextDrawShow(i, DMpTD[i][x]);
            //TextDrawHideForPlayer(i, DerbyWaiting);
            CTFSETCOLOR(i);
            SendClientMessage(i, -1, "{FF8400}-Instructions- {13D6B2}Steal the enemy's flag and bring it to your base!");
            SendClientMessage(i, -1, "{FF8400}- {13D6B2}Your team will earn a point when both flags are in your base!");
            SendClientMessage(i, -1, "{FF8400}- {13D6B2}The team with more points will win the CTF! Use {FF8400}/CTFChat {13D6B2}to chat with your team!");
            inctf[i]=1;
		 }
	   }
	   CTFtime=250;
	   CTFtimer = SetTimer("CTFupdate", 1000, true);
	}
	return 1;
}
forward CTFupdate();
public CTFupdate()
{

   new count =CTFCount1+CTFCount2;
   CTFtime--;
   if(ctf == 1)
   {
	 if(count <= 0)
	 {
		KillTimer(CTFtimer);
		KillTimer(CTFStartTimer);
		KillTimer(CTFStartTimer2);
		ctf=0;
		DerbyTimer=-1;
		DerbyStartTimer=-1;
		CTFStartTimer2=-1;
		if(IsValidDynamicPickup(ctfflag[0])) DestroyDynamicPickup(ctfflag[0]), ctfflag[0]=-1;
		if(IsValidDynamicPickup(ctfflag[1])) DestroyDynamicPickup(ctfflag[1]), ctfflag[1]=-1;
		if(IsValidDynamicMapIcon(ctfmapicon[0])) DestroyDynamicMapIcon(ctfmapicon[0]), ctfmapicon[0]=-1;
		if(IsValidDynamicMapIcon(ctfmapicon[1])) DestroyDynamicMapIcon(ctfmapicon[1]), ctfmapicon[1]=-1;

		if(IsValidDynamicMapIcon(ctfmapicon[2])) DestroyDynamicMapIcon(ctfmapicon[2]), ctfmapicon[2]=-1;
		if(IsValidDynamicMapIcon(ctfmapicon[3])) DestroyDynamicMapIcon(ctfmapicon[3]), ctfmapicon[3]=-1;
        ctftype++;
        if(ctftype > 2) ctftype=0;
	 }
	 else if(CTFtime <= 0)
	 {
		if(IsValidDynamicPickup(ctfflag[0])) DestroyDynamicPickup(ctfflag[0]), ctfflag[0]=-1;
		if(IsValidDynamicPickup(ctfflag[1])) DestroyDynamicPickup(ctfflag[1]), ctfflag[1]=-1;
		if(IsValidDynamicMapIcon(ctfmapicon[0])) DestroyDynamicMapIcon(ctfmapicon[0]), ctfmapicon[0]=-1;
		if(IsValidDynamicMapIcon(ctfmapicon[1])) DestroyDynamicMapIcon(ctfmapicon[1]), ctfmapicon[1]=-1;

		if(IsValidDynamicMapIcon(ctfmapicon[2])) DestroyDynamicMapIcon(ctfmapicon[2]), ctfmapicon[2]=-1;
		if(IsValidDynamicMapIcon(ctfmapicon[3])) DestroyDynamicMapIcon(ctfmapicon[3]), ctfmapicon[3]=-1;
		KillTimer(CTFtimer);
		KillTimer(CTFStartTimer);
		KillTimer(CTFStartTimer2);
		ctf=0;
		DerbyTimer=-1;
		DerbyStartTimer=-1;
		CTFStartTimer2=-1;
		if(CTF1Score > CTF2Score)
		{
		  SendClientMessageToAll(DERBYCOLOR, "{00A15E}» CTF « {13D6B2} Blue Team have won Capture The Flag!");
		  foreach(new i : Player)
		  {
			 if(GetPVarInt(i, "inCTF") == 1)
			 {
                if(EventType==6970 && EventStarted==1)
                {
                  foreach(new a : Player)
			      {
		            if(GetPVarInt(a, "inCTF") == 1)
		            {
                      CTFB[a]=1;
                    }
                  }
		        }
		        new str2[128];
				if(EventType==6970 && EventStarted==1) EventWinner2(), format(str2, sizeof(str2), "» Event « {CDF590}CTF Blue Team have won the Event!"), SendClientMessageToAll(0xE8AF02FF, str2);
				PlayerInfo[i][pWCTF]++;
				new Query[256];
				format(Query, sizeof(Query), "UPDATE `users` SET `CTFWon` = %d WHERE `UserID` = '%d'", PlayerInfo[i][pWCTF], PlayerInfo[i][UserID]);
				mysql_query(GTADM, Query);
				if(PlayerInfo[i][pWCTF] >= 25) GiveMedal(i, 78);
				GivePlayerMoneyEX(i, 25000);
				ScoreTDupdate(i, 3);
				inctf[i]=0;
				ctfteam1[i]=0;
				SetPlayerTeam(i, NO_TEAM);
				DeletePVar(i, "inCTF");
				Remove_From_CTF(i);
				if(IsValidDynamicPickup(ctfflag[0])) DestroyDynamicPickup(ctfflag[0]), ctfflag[0]=-1;
				if(IsValidDynamicPickup(ctfflag[1])) DestroyDynamicPickup(ctfflag[1]), ctfflag[1]=-1;
				if(IsValidDynamicMapIcon(ctfmapicon[0])) DestroyDynamicMapIcon(ctfmapicon[0]), ctfmapicon[0]=-1;
				if(IsValidDynamicMapIcon(ctfmapicon[1])) DestroyDynamicMapIcon(ctfmapicon[1]), ctfmapicon[1]=-1;

				if(IsValidDynamicMapIcon(ctfmapicon[2])) DestroyDynamicMapIcon(ctfmapicon[2]), ctfmapicon[2]=-1;
				if(IsValidDynamicMapIcon(ctfmapicon[3])) DestroyDynamicMapIcon(ctfmapicon[3]), ctfmapicon[3]=-1;
				KillTimer(CTFtimer);
				KillTimer(CTFStartTimer);
				KillTimer(CTFStartTimer2);
				ctf=0;
				DerbyTimer=-1;
				DerbyStartTimer=-1;
				CTFStartTimer2=-1;
			 }

		  }
		}
		else if(CTF2Score > CTF1Score)
		{
		  SendClientMessageToAll(DERBYCOLOR, "{00A15E}» CTF « {13D6B2}Green Team have won Capture The Flag!");
		  foreach(new i : Player)
		  {
			 if(GetPVarInt(i, "inCTF") == 2)
			 {
                new str3[128];
                if(EventType==6970 && EventStarted==1)
                {
				  foreach(new a : Player)
				  {
                    if(GetPVarInt(a, "inCTF") == 2)
                    {
                      CTFG[a]=1;
                    }
                  }
		        }
                if(EventType==6970 && EventStarted==1) EventWinner2(), format(str3, sizeof(str3), "» Event « {CDF590}CTF Green Team have won the Event!"), SendClientMessageToAll(0xE8AF02FF, str3);
				PlayerInfo[i][pWCTF]++;
				new Query[256];
				format(Query, sizeof(Query), "UPDATE `users` SET `CTFWon` = %d WHERE `UserID` = '%d'", PlayerInfo[i][pWCTF], PlayerInfo[i][UserID]);
				mysql_query(GTADM, Query);
				if(PlayerInfo[i][pWCTF] >= 25) GiveMedal(i, 78);
				GivePlayerMoneyEX(i, 25000);
				ScoreTDupdate(i, 3);
				inctf[i]=0;
				ctfteam2[i]=0;
				DeletePVar(i, "inCTF");
				Remove_From_CTF(i);
				if(IsValidDynamicPickup(ctfflag[0])) DestroyDynamicPickup(ctfflag[0]), ctfflag[0]=-1;
				if(IsValidDynamicPickup(ctfflag[1])) DestroyDynamicPickup(ctfflag[1]), ctfflag[1]=-1;
				if(IsValidDynamicMapIcon(ctfmapicon[0])) DestroyDynamicMapIcon(ctfmapicon[0]), ctfmapicon[0]=-1;
				if(IsValidDynamicMapIcon(ctfmapicon[1])) DestroyDynamicMapIcon(ctfmapicon[1]), ctfmapicon[1]=-1;

				if(IsValidDynamicMapIcon(ctfmapicon[2])) DestroyDynamicMapIcon(ctfmapicon[2]), ctfmapicon[2]=-1;
				if(IsValidDynamicMapIcon(ctfmapicon[3])) DestroyDynamicMapIcon(ctfmapicon[3]), ctfmapicon[3]=-1;
				KillTimer(CTFtimer);
				KillTimer(CTFStartTimer);
				KillTimer(CTFStartTimer2);
				ctf=0;
				DerbyTimer=-1;
				DerbyStartTimer=-1;
				CTFStartTimer2=-1;
			 }
		  }
		}
		else SendClientMessageToAll(DERBYCOLOR, "{00A15E}» CTF « {13D6B2}Capture The Flag has been finished!");
		foreach(new playerid : Player) if(GetPVarInt(playerid, "inCTF")) Remove_From_CTF(playerid, 0);
        ctftype++;
        if(ctftype > 2) ctftype=0;

	 }
	 else
	 {
		new Float:x, Float:y, Float:z;
		if(IsPlayerConnected(Flag1Player))
		{
			GetPlayerPos(Flag1Player, x, y, z);
			flagpos[0][0]=x;
			flagpos[0][1]=y;
			flagpos[0][2]=z;
		}


		if(IsPlayerConnected(Flag2Player))
		{
			GetPlayerPos(Flag2Player, x, y, z);
	        flagpos[1][0]=x;
	        flagpos[1][1]=y;
	        flagpos[1][2]=z;
		}



		foreach(new playerid : Player)
		{
		    new a=GetPVarInt(playerid, "inCTF");
			if(a > 0)
			{
				new str[128];
				format(str, sizeof(str), "~b~Blue Team: ~b~~h~%d", CTF1Score);
				PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][3] , str);

				format(str, sizeof(str), "~g~Green Team: ~g~~h~%d", CTF2Score);
				PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][4] , str);

				format(str, sizeof(str), "~n~~r~Time: ~p~%s", TimeConvert(CTFtime));
				PlayerTextDrawSetStringEX(playerid, DMpTD[playerid][1] , str);

			}
		}
	}
   }
   return 1;
}/*
stock Remove_From_DD(playerid, left=0)//ddshit
{
  if(IsPlayerConnected(playerid))
  {

	if(GetPVarInt(playerid, "DD") == 1) DDCount1--;
	if(GetPVarInt(playerid, "DD") == 2) DDCount2--;
    if(RaceStarted==0) SetPlayerRaceCheckpoint(playerid, 0, RaceInfo[RaceIDCount][StartCP][0], RaceInfo[RaceIDCount][StartCP][1], RaceInfo[RaceIDCount][StartCP][2], RaceCPs[RaceIDCount][0][0], RaceCPs[RaceIDCount][0][1], RaceCPs[RaceIDCount][0][2], 15.0);
	RemovePlayerAttachedObject(playerid, 4);
	TogglePlayerControllable2(playerid, 1);
	new countshit=DDCount1+DDCount2;
    if(countshit < 1) EndDD();
	SetPlayerVirtualWorldEX(playerid, 0);
 	DeletePVar(playerid, "DD");
    SetPlayerTeam(playerid, NO_TEAM);
    SetCameraBehindPlayer(playerid);
    ResetPlayerWeaponsEX(playerid);
    LoadPlayerCoords(playerid);
    new gang=PlayerInfo[playerid][pGang];
    if(gang > 0) SetPlayerColor(playerid, PlayerColors[GangInfo[gang][gColor]]);
    else SetPlayerColor(playerid, PlayerColors[random(200)] );
	for(new x=0; x<8; x++) PlayerTextDrawHide(playerid, DMpTD[playerid][x]);
	new str[128];
	if(left == 1)
	{
	   format(str, sizeof(str), "{FF00EA}» DD « {9D00FF}%s has left the Disco Dodgebomb {FF00EA}(/Exit)", pName[playerid]);
	   SendClientMessageToAll(DERBYCOLOR, str);
	   SetPlayerTeam(playerid, NO_TEAM);
	   SetCameraBehindPlayer(playerid);
       new gang2=PlayerInfo[playerid][pGang];
	   if(gang2 > 0) SetPlayerColor(playerid, PlayerColors[GangInfo[gang2][gColor]]);
	   else SetPlayerColor(playerid, PlayerColors[random(200)] );
    }
  }
}
stock Remove_From_CO(playerid, left=0)//coshit
{
  if(IsPlayerConnected(playerid))
  {

	if(GetPVarInt(playerid, "CO") == 1) COCount1--;
	if(GetPVarInt(playerid, "CO") == 2) COCount2--;
	ResetPlayerWeaponsEX(playerid);
    new hours, mins, sec;
    gettimeEx(hours, mins, sec);
    SetPlayerTime(playerid, hours, mins);
    if(RaceStarted==0) SetPlayerRaceCheckpoint(playerid, 0, RaceInfo[RaceIDCount][StartCP][0], RaceInfo[RaceIDCount][StartCP][1], RaceInfo[RaceIDCount][StartCP][2], RaceCPs[RaceIDCount][0][0], RaceCPs[RaceIDCount][0][1], RaceCPs[RaceIDCount][0][2], 15.0);
   	new str[128];
	if(left == 1)
	{
       format(str, sizeof(str), "{168BFF}» CO « {5EAFFF}%s has left the Colosseum {168BFF}(/Exit)", pName[playerid]);
	   SendClientMessageToAll(DERBYCOLOR, str);
	   SetPlayerTeam(playerid, NO_TEAM);
	   SetCameraBehindPlayer(playerid);
       SetPlayerHealth(playerid, 100);
       new gang2=PlayerInfo[playerid][pGang];
	   if(gang2 > 0) SetPlayerColor(playerid, PlayerColors[GangInfo[gang2][gColor]]);
	   else SetPlayerColor(playerid, PlayerColors[random(200)] );
    }
	new countshit=COCount1+COCount2;
    if(countshit < 1) EndCO();
	RemovePlayerAttachedObject(playerid, 4);
	TogglePlayerControllable2(playerid, 1);
	SetPlayerVirtualWorldEX(playerid, 0);
 	DeletePVar(playerid, "CO");
    SetPlayerTeam(playerid, NO_TEAM);
    SetCameraBehindPlayer(playerid);
    SetPlayerHealth(playerid, 100);
    LoadPlayerCoords(playerid);
    new gang=PlayerInfo[playerid][pGang];
    if(gang > 0) SetPlayerColor(playerid, PlayerColors[GangInfo[gang][gColor]]);
    else SetPlayerColor(playerid, PlayerColors[random(200)] );
	for(new x=0; x<8; x++) PlayerTextDrawHide(playerid, DMpTD[playerid][x]);
  }
}*/
stock Remove_From_CTF(playerid, left=0)
{
  if(IsPlayerConnected(playerid))
  {

	if(GetPVarInt(playerid, "inCTF") == 1) CTFCount1--;
	if(GetPVarInt(playerid, "inCTF") == 2) CTFCount2--;
    if(RaceStarted==0) SetPlayerRaceCheckpoint(playerid, 0, RaceInfo[RaceIDCount][StartCP][0], RaceInfo[RaceIDCount][StartCP][1], RaceInfo[RaceIDCount][StartCP][2], RaceCPs[RaceIDCount][0][0], RaceCPs[RaceIDCount][0][1], RaceCPs[RaceIDCount][0][2], 15.0);
    //TextDrawHideForPlayer(playerid, CTFwaiting);

	RemovePlayerAttachedObject(playerid, 4);
	TogglePlayerControllable2(playerid, 1);
	SetPlayerVirtualWorldEX(playerid, 0);
 	DeletePVar(playerid, "inCTF");
	for(new x=0; x<8; x++) PlayerTextDrawHide(playerid, DMpTD[playerid][x]);
   // TextDrawHideForPlayer(playerid, CTFwaiting);
	new str[128];

	if(left == 1)
	{
	   format(str, sizeof(str), "{00A15E}» CTF « {13D6B2}%s has left Capture The Flag {00A15E}(/Exit)", pName[playerid]);
	   SendClientMessageToAll(DERBYCOLOR, str);
	   inctf[playerid]=0;
	   ctfteam1[playerid]=0;
	   ctfteam2[playerid]=0;
	   SetPlayerTeam(playerid, NO_TEAM);

       if( playerid == Flag1Player || playerid == Flag2Player)
       {
		  new Float:x, Float:y, Float:z;
		  GetPlayerPos(playerid, x, y, z);
		  if( playerid == Flag1Player)
		  {
            ctfflag[0]=CreateDynamicPickup(2993, 23, x, y, z, 1777);
            Flag1Player=INVALID_PLAYER_ID;
 		    format(str, sizeof(str), "{00A15E}» CTF « {13D6B2}%s has dropped the blue team's flag", pName[playerid]);
  		    foreach(new i : Player)
		    {
			  if(GetPVarInt(i, "inCTF")) SendClientMessage(i, -1, str);
			}
		  }
		  else if( playerid == Flag2Player)
		  {
            ctfflag[1]=CreateDynamicPickup(2993, 23, x, y, z, 1777);
            Flag2Player=INVALID_PLAYER_ID;
 		    format(str, sizeof(str), "{00A15E}» CTF « {13D6B2}%s has dropped the green team's flag", pName[playerid]);
  		    foreach(new i : Player)
		    {
			  if(GetPVarInt(i, "inCTF")) SendClientMessage(i, -1, str);
			}
		  }
       }
	}
	SetCameraBehindPlayer(playerid);
	ResetPlayerWeaponsEX(playerid);
    LoadPlayerCoords(playerid);
	new gang=PlayerInfo[playerid][pGang];
	if(gang > 0) SetPlayerColor(playerid, PlayerColors[GangInfo[gang][gColor]]);
	else SetPlayerColor(playerid, PlayerColors[random(200)] );
  }
}
stock CTFSETCOLOR(playerid)
{
  if(GetPVarInt(playerid, "inCTF") == 1)
  {
    SetPlayerColor(playerid, 0x1B87E0FF);
	ctfteam1[playerid]=1;
	SetPlayerTeam(playerid, 69);
  }
  else if(GetPVarInt(playerid, "inCTF") == 2)
  {
    SetPlayerColor(playerid, 0x1BE01BFF);
	ctfteam2[playerid]=1;
	SetPlayerTeam(playerid, 70);
  }
}/*
stock DDSETCOLOR(playerid)//ddshit
{
  if(GetPVarInt(playerid, "DD") == 1)
  {
    SetPlayerColor(playerid, 0x1B87E0FF);
    SetPlayerTime(playerid, 0, 0);
	SetPlayerTeam(playerid, 922);
  }
  else if(GetPVarInt(playerid, "DD") == 2)
  {
    SetPlayerColor(playerid, 0x1BE01BFF);
    SetPlayerTime(playerid, 0, 0);
	SetPlayerTeam(playerid, 923);
  }
}
stock COSETCOLOR(playerid)//coshit
{
  if(GetPVarInt(playerid, "CO") == 1)
  {
    SetPlayerColor(playerid, 0x1B87E0FF);
	SetPlayerTeam(playerid, 925);
  }
  else if(GetPVarInt(playerid, "CO") == 2)
  {
    SetPlayerColor(playerid, 0x1BE01BFF);
	SetPlayerTeam(playerid, 926);
  }
}*/
forward LoadMaps();
public LoadMaps()
{
  new rows, fields, data[50];
  cache_get_row_count(rows);
  cache_get_field_count(fields);
  for(new i = 0; i != rows; i++)
  {
       cache_get_value_index(i, 0, data);
       format(data, sizeof(data), "Maps/%s.txt", data);
       if(strlen(data)) LoadSAMPMap(INVALID_PLAYER_ID, data, 0);
  }
  return 1;
}
forward LoadHouseCars();
public LoadHouseCars()
{
	new rows, fields;
	cache_get_row_count(rows);
    cache_get_field_count(fields);
	for(new i = 0; i != rows; i++)
	{
		new wewo, d, carID, Float:hCarX, Float:hCarY, Float:hCarZ, Float:hCarA, hCarCol1, hCarCol2, hCarHouse1, hCarHouse2, hCarHouse3, hCarHouse4;
		cache_get_value_index_int(i, 0, d);
		cache_get_value_index_int(i, 1, carID);
		cache_get_value_index_float(i, 2, hCarX);
		cache_get_value_index_float(i, 3, hCarY);
		cache_get_value_index_float(i, 4, hCarZ);
	    cache_get_value_index_float(i, 5, hCarA);
		cache_get_value_index_int(i, 6, hCarCol1);
		cache_get_value_index_int(i, 7, hCarCol2);
		cache_get_value_index_int(i, 8, hCarHouse1);
		cache_get_value_index_int(i, 9, hCarHouse2);
		cache_get_value_index_int(i, 10, hCarHouse3);
		cache_get_value_index_int(i, 11, hCarHouse3);
		cache_get_value_index_int(i, 12, wewo);

		new v=AddStaticVehicleEx(carID, hCarX, hCarY, hCarZ, hCarA, hCarCol1, hCarCol2, 60);
        ResetCarInfo(v);
		SetVehicleVirtualWorld(v, wewo);
		if(IsValidVehicle(v))
		{
			IsHouseCar[v]=57;
	        HouseCar[v][hCarIndex]=d;

	        HouseCar[v][hCarHouse][0]=hCarHouse1;
	        HouseCar[v][hCarHouse][1]=hCarHouse2;
	        HouseCar[v][hCarHouse][2]=hCarHouse3;
	        HouseCar[v][hCarHouse][3]=hCarHouse4;
	        if(hCarHouse1 > 0|| hCarHouse2 > 0 || hCarHouse3 > 0 || hCarHouse4 > 0) HouseCar[v][Blockcar]=1;
		}
	}
}
forward GethCarID(v);
public GethCarID(v)
{
      HouseCar[v][hCarIndex] = cache_insert_id();
	  return 1;
}

CMD:addcar(playerid, params[])
{
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(!IsAdmin(playerid, 6)) return SendMsg(playerid, 5);
	new carid, hhhh[4], carcol1, carcol2;
    if (sscanf(params, "p<, >k<rvehicle>D(-1)D(-1)D(0)D(0)D(0)D(0)", carid, carcol1, carcol2, hhhh[0], hhhh[1], hhhh[2], hhhh[3])) return SendWarning(playerid, "/addcar <carID / Name>, <color1>, <color2>, <house1>, <house2>, <house3>, <house4>");
	if(carid <400)  return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Invalid Vehicle");
	new Float:x, Float:y, Float:z, Float:a;
	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);
	AddHouseCar(carid, x, y, z, a, carcol1, carcol2, hhhh[0], hhhh[1], hhhh[2], hhhh[3], GetPlayerVirtualWorld(playerid));
	return 1;
}
CMD:carinfo(playerid)
{
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(!IsAdmin(playerid, 10)) return SendMsg(playerid, 5);
	new v=GetPlayerVehicleID(playerid);
	if(v == INVALID_VEHICLE_ID) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}you must be inside a vehicle to use this command!");
	if(IsHouseCar[v] < 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}Cant get info of this vehicle!");

	new str[256];
	format(str, sizeof(str), "%s\nHouses: %d, %d, %d, %d", vInfo[GetVehicleModel(v)-400][vName], HouseCar[v][hCarHouse][0], HouseCar[v][hCarHouse][1], HouseCar[v][hCarHouse][2], HouseCar[v][hCarHouse][3]);
	ShowPlayerDialog(playerid, 5802, DIALOG_STYLE_MSGBOX, "CarInfo", str, "Ok", "");
	return 1;
}
CMD:changeexport(playerid)
{
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(!IsAdmin(playerid, 10)) return SendMsg(playerid, 5);
    KillTimer(ExportTimer);
    Export(1);
	return 1;
}
CMD:deletecar(playerid, params[])
{
    if(GetPVarInt(playerid, "AFK")) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}You cant use this command in AFK Mode type (/back) then try again.");
    if(GetPlayerState(playerid) == 7) return SendMsg(playerid, 3);
    if(!IsAdmin(playerid, 6)) return SendMsg(playerid, 5);
	new v=GetPlayerVehicleID(playerid);
	if(v == INVALID_VEHICLE_ID) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}you must be inside a vehicle to use this command!");
	if(IsHouseCar[v] < 1) return SendClientMessage(playerid, RED, ""RED_"» Error « {BABABA}This vehicle cannot be removed!");
    DeleteHouseCar(v);
	return 1;
}
stock AddHouseCar(id, Float:x, Float:y, Float:z, Float:a, col1, col2, h1=0, h2=0, h3=0, h4=0, vwrld=0)
{
		new v=AddStaticVehicleEx(id, x, y, z, a, col1, col2, 60);
		ResetCarInfo(v);
		SetVehicleVirtualWorld(v, vwrld);
		IsHouseCar[v]=57;

        HouseCar[v][hCarHouse][0]=h1;
        HouseCar[v][hCarHouse][1]=h2;
        HouseCar[v][hCarHouse][2]=h3;
        HouseCar[v][hCarHouse][3]=h4;

        new query[400];
        format(query, sizeof(query), "INSERT INTO `housecars` (`id`, `x`, `y`, `z`, `a`, `col1`, `col2`, `h1`, `h2`, `h3`, `h4`, `vwrld`) VALUES('%d', '%f', '%f', '%f', '%f', '%d', '%d', '%d', '%d', '%d', '%d', '%d')", id, x, y, z, a, col1, col2, h1, h2, h3, h4, vwrld);
        mysql_tquery(GTADM, query, "GethCarID", "d", v);
        if(h1 > 0|| h2 > 0 || h3 > 0 || h4 > 0) HouseCar[v][Blockcar]=1;
        else  HouseCar[v][Blockcar]=0;
}

stock DeleteHouseCar(id)
{
        new query[256];
        format(query, sizeof(query), "DELETE FROM `housecars` WHERE `index` = %d", HouseCar[id][hCarIndex]);
        mysql_query(GTADM, query);
        if(IsValidVehicle(id)) DestroyVehicleEX(id);

        HouseCar[id][hCarHouse][0]=0;
        HouseCar[id][hCarHouse][1]=0;
        HouseCar[id][hCarHouse][2]=0;
        HouseCar[id][hCarHouse][3]=0;
        HouseCar[id][hCarIndex]=-1;
        HouseCar[id][Blockcar]=0;
}
/*Sumo*/
stock SpawnInSumo(playerid)
{
  ClearHitId(playerid);
  SumoSpecID[playerid]=-1;
  SetPlayerVirtualWorldEX(playerid, 741);
  SumoSecs[playerid]=0;
  SetPlayerColor(playerid, 0x2DCF04AA);
  FallDown[playerid]=false;
  UnderZ[playerid]=false;
  Suicide[playerid]=false;
  SumoPaused[playerid]=false;
  SumoCamping[playerid]=false;
  if(sumocam == 1)
  {
    SendInfoText(playerid, 5000, "~y~Please wait for the next round!");
	TogglePlayerControllable2(playerid, 0);
	if(ring==1){
	ShowRing1(playerid);}
	if(ring==2){
	ShowRing2(playerid);}
	if(ring==3){
	ShowRing3(playerid);}
	if(ring==4){
	ShowRing4(playerid);}
	if(ring==5){
	ShowRing5(playerid);}
	if(ring==6){
	ShowRing6(playerid);}
	if(ring==7){
	ShowRing7(playerid);}
	if(ring==8){
	ShowRing8(playerid);}
	if(ring==9){
	ShowRing9(playerid);}
	if(ring==10){
	ShowRing10(playerid);}
	if(ring==11){
	ShowRing11(playerid);}
	if(ring==12){
	ShowRing12(playerid);}
	if(ring==13){
	ShowRing13(playerid);}
  }
  else
  {
      if(SumoCar[playerid] > 0) DestroyVehicleEX(SumoCar[playerid]);
      SumoCar[playerid]=0;
      new vm=AviableCars[random(84)];
	  switch(ring)
	  {
		  case 1:
		  {
		    SetPlayerInterior(playerid, 0);
		    new rand = random(sizeof(SpawnsRing1));
		    SumoCar[playerid]=CreateVehicle(vm, SpawnsRing1[rand][0], SpawnsRing1[rand][1], SpawnsRing1[rand][2]+7, SpawnsRing1[rand][3], -1, -1, 9999);
            ResetCarInfo(SumoCar[playerid]);
			LinkVehicleToInterior(SumoCar[playerid], 0);
	      }
		  case 2:
		  {
		    SetPlayerInterior(playerid, 0);
		    new rand = random(sizeof(SpawnsRing2));
		    SumoCar[playerid]=CreateVehicle(vm, SpawnsRing2[rand][0], SpawnsRing2[rand][1], SpawnsRing2[rand][2]+7, SpawnsRing2[rand][3], -1, -1, 9999);
            ResetCarInfo(SumoCar[playerid]);
		    LinkVehicleToInterior(SumoCar[playerid], 0);
	      }
		  case 3:
		  {
		    SetPlayerInterior(playerid, 0);
		    new rand = random(sizeof(SpawnsRing3));
		    SumoCar[playerid]=CreateVehicle(vm, SpawnsRing3[rand][0], SpawnsRing3[rand][1], SpawnsRing3[rand][2]+7, SpawnsRing3[rand][3], -1, -1, 9999);
            ResetCarInfo(SumoCar[playerid]);
		    LinkVehicleToInterior(SumoCar[playerid], 0);
	      }
		  case 4:
		  {
		    SetPlayerInterior(playerid, 0);
		    new rand = random(sizeof(SpawnsRing4));
		    SumoCar[playerid]=CreateVehicle(vm, SpawnsRing4[rand][0], SpawnsRing4[rand][1], SpawnsRing4[rand][2]+7, SpawnsRing4[rand][3], -1, -1, 9999);
            ResetCarInfo(SumoCar[playerid]);
		    LinkVehicleToInterior(SumoCar[playerid], 0);
	      }
		  case 5:
		  {
		    SetPlayerInterior(playerid, 0);
		    new rand = random(sizeof(SpawnsRing5));
		    SumoCar[playerid]=CreateVehicle(vm, SpawnsRing5[rand][0], SpawnsRing5[rand][1], SpawnsRing5[rand][2]+7, SpawnsRing5[rand][3], -1, -1, 9999);
            ResetCarInfo(SumoCar[playerid]);
		    LinkVehicleToInterior(SumoCar[playerid], 0);
	      }
		  case 6:
		  {
		    SetPlayerInterior(playerid, 0);
		    new rand = random(sizeof(SpawnsRing6));
		    SumoCar[playerid]=CreateVehicle(vm, SpawnsRing6[rand][0], SpawnsRing6[rand][1], SpawnsRing6[rand][2]+7, SpawnsRing6[rand][3], -1, -1, 9999);
            ResetCarInfo(SumoCar[playerid]);
		    LinkVehicleToInterior(SumoCar[playerid], 0);
	      }
		  case 7:
		  {
		    SetPlayerInterior(playerid, 0);
		    new rand = random(sizeof(SpawnsRing7));
		    SumoCar[playerid]=CreateVehicle(vm, SpawnsRing7[rand][0], SpawnsRing7[rand][1], SpawnsRing7[rand][2]+7, SpawnsRing7[rand][3], -1, -1, 9999);
            ResetCarInfo(SumoCar[playerid]);
		    LinkVehicleToInterior(SumoCar[playerid], 0);
	      }
		  case 8:
		  {
		    SetPlayerInterior(playerid, 0);
		    new rand = random(sizeof(SpawnsRing8));
		    SumoCar[playerid]=CreateVehicle(vm, SpawnsRing8[rand][0], SpawnsRing8[rand][1], SpawnsRing8[rand][2]+7, SpawnsRing8[rand][3], -1, -1, 9999);
            ResetCarInfo(SumoCar[playerid]);
		    LinkVehicleToInterior(SumoCar[playerid], 0);
	      }
		  case 9:
		  {
		    new rand = random(sizeof(SpawnsRing9));
		    SetPlayerInterior(playerid, 1);
		    SumoCar[playerid]=CreateVehicle(vm, SpawnsRing9[rand][0], SpawnsRing9[rand][1], SpawnsRing9[rand][2]+7, SpawnsRing9[rand][3], -1, -1, 9999);
            ResetCarInfo(SumoCar[playerid]);
		    LinkVehicleToInterior(SumoCar[playerid], 1);
	      }
		  case 10:
		  {
		    new rand = random(sizeof(SpawnsRing10));
		    SetPlayerInterior(playerid, 1);
		    SumoCar[playerid]=CreateVehicle(vm, SpawnsRing10[rand][0], SpawnsRing10[rand][1], SpawnsRing10[rand][2]+7, SpawnsRing10[rand][3], -1, -1, 9999);
            ResetCarInfo(SumoCar[playerid]);
		    LinkVehicleToInterior(SumoCar[playerid], 1);

	      }
		  case 11:
		  {
		    new rand = random(sizeof(SpawnsRing11));
		    SetPlayerInterior(playerid, 0);
		    SumoCar[playerid]=CreateVehicle(vm, SpawnsRing11[rand][0], SpawnsRing11[rand][1], SpawnsRing11[rand][2]+7, SpawnsRing11[rand][3], -1, -1, 9999);
            ResetCarInfo(SumoCar[playerid]);
			LinkVehicleToInterior(SumoCar[playerid], 0);
	      }
		  case 12:
		  {
		    new rand = random(sizeof(SpawnsRing12));
		    SetPlayerInterior(playerid, 0);
		    SumoCar[playerid]=CreateVehicle(vm, SpawnsRing12[rand][0], SpawnsRing12[rand][1], SpawnsRing12[rand][2]+7, SpawnsRing12[rand][3], -1, -1, 9999);
            ResetCarInfo(SumoCar[playerid]);
			LinkVehicleToInterior(SumoCar[playerid], 0);
		  }
		  case 13:
		  {
		    new rand = random(sizeof(SpawnsRing13));
		    SetPlayerInterior(playerid, 0);
		    SumoCar[playerid]=CreateVehicle(vm, SpawnsRing13[rand][0], SpawnsRing13[rand][1], SpawnsRing13[rand][2]+7, SpawnsRing13[rand][3], -1, -1, 9999);
            ResetCarInfo(SumoCar[playerid]);
			LinkVehicleToInterior(SumoCar[playerid], 0);
		  }
	  }
	  if(vm == 406) GiveMedal(playerid, 80);
      SetVehicleVirtualWorld(SumoCar[playerid], 741);
	  PutPlayerInVehicle(playerid, SumoCar[playerid], 0);
	  SetVehicleHealth(SumoCar[playerid], 1000);
	  SetPlayerHealth(playerid, 100);
      SetCameraBehindPlayer(playerid);
	  if(IsValidDynamic3DTextLabel(Sumo3D[playerid])) DestroyDynamic3DTextLabel(Sumo3D[playerid]);
      Sumo3D[playerid]=CreateDynamic3DTextLabel(" ", 0x7AE01BCC, 0.0, 0.0, 0.0, 100.0, INVALID_PLAYER_ID, GetPlayerVehicleID(playerid));
  }
  SumoSpec[playerid]=0;
}
//****** Ring Cameras *******//
stock ShowRing1(playerid){
  SetPlayerCameraPos(playerid, 1803.9218, -2742.5598, 170.7601);
  SetPlayerCameraLookAt(playerid, 1809.9016, -2512.8027, 83.1964);
  Streamer_UpdateEx(playerid, 1809.9016, -2512.8027, 83.1964);}

stock ShowRing2(playerid){
  SetPlayerCameraPos(playerid, 577.9863, -2679.8147, 130.7797);
  SetPlayerCameraLookAt(playerid, 654.7505, -2616.5317, 83.3855);
  Streamer_UpdateEx(playerid, 654.7505, -2616.5317, 83.3855);}

stock ShowRing3(playerid){
  SetPlayerCameraPos(playerid, -2330.0217, -1542.0033, 584.7253);
  SetPlayerCameraLookAt(playerid, -2346.0100, -1649.1647, 533.0064);
  Streamer_UpdateEx(playerid, -2346.0100, -1649.1647, 533.0064);}

stock ShowRing4(playerid){
  SetPlayerCameraPos(playerid, -784.3764, 2115.1748, 103.0966);
  SetPlayerCameraLookAt(playerid, -687.3683, 2207.4700, 58.9422);
  Streamer_UpdateEx(playerid, -687.3683, 2207.4700, 58.9422);}

stock ShowRing5(playerid){
  SetPlayerCameraPos(playerid, -1163.2433, 481.6400, 73.1759);
  SetPlayerCameraLookAt(playerid, -1199.7272, 594.1843, 21.6073);
  Streamer_UpdateEx(playerid, -1199.7272, 594.1843, 21.6073);}

stock ShowRing6(playerid){
  SetPlayerCameraPos(playerid, 145.8065, 2085.4307, 128.0709);
  SetPlayerCameraLookAt(playerid, 220.7653, 2000.6575, 63.8270);
  Streamer_UpdateEx(playerid, 220.7653, 2000.6575, 63.8270);}

stock ShowRing7(playerid){
  SetPlayerCameraPos(playerid, 1614.2882, -1329.1445, 368.0589);
  SetPlayerCameraLookAt(playerid, 1498.0513, -1377.7743, 347.2751);
  Streamer_UpdateEx(playerid, 1498.0513, -1377.7743, 347.2751);}

stock ShowRing8(playerid){
  SetPlayerCameraPos(playerid, 1333.2061, -1408.7585, 257.1575);
  SetPlayerCameraLookAt(playerid, 1446.7545, -1339.5974, 200.2276);
  Streamer_UpdateEx(playerid, 1446.7545, -1339.5974, 200.2276);}

stock ShowRing9(playerid){
  SetPlayerCameraPos(playerid, 3012.3989, -1010.9984, 30.5744);
  SetPlayerCameraLookAt(playerid, 3094.3684, -1066.4286, 18.0176);
  Streamer_UpdateEx(playerid, 3094.3684, -1066.4286, 18.0176);}

stock ShowRing10(playerid){
  SetPlayerCameraPos(playerid, 4053.8215, -2433.7217, 243.0711);
  SetPlayerCameraLookAt(playerid, 3989.2751, -2508.9490, 236.5284);
  Streamer_UpdateEx(playerid, 3989.2751, -2508.9490, 236.5284);}

stock ShowRing11(playerid){
  SetPlayerCameraPos(playerid, 3033.3718, -1718.5540, -1.6453);
  SetPlayerCameraLookAt(playerid, 3092.4863, -1632.0776, -31.9036);
  Streamer_UpdateEx(playerid, 3092.4863, -1632.0776, -31.9036);}

stock ShowRing12(playerid){
  SetPlayerCameraPos(playerid, 1051.4351, -386.9863, 112.1771);
  SetPlayerCameraLookAt(playerid, 1014.6059, -323.0315, 82.8081);
  Streamer_UpdateEx(playerid, 1014.6059, -323.0315, 82.8081);}

stock ShowRing13(playerid){
  SetPlayerCameraPos(playerid, 2316.9902, 1134.4740, 118.4101);
  SetPlayerCameraLookAt(playerid, 2224.2424, 1050.8982, 67.8678);
  Streamer_UpdateEx(playerid, 2224.2424, 1050.8982, 67.8678);}

forward sumorespawn(playerid);
public sumorespawn(playerid)
{
 if(Iter_Contains(InSumo, playerid))
 {
  DeletePVar(playerid, "SumoShowIt");
  SetCameraBehindPlayer(playerid);
  if(GetPlayerState(playerid)==PLAYER_STATE_SPECTATING) TogglePlayerSpectating(playerid, 0);
  SpawnInSumo(playerid);
  SumoSpecID[playerid]=-1;
 }
 return 1;
}

forward Sumo_Drift_Cheat_Update();
public Sumo_Drift_Cheat_Update()
{
  AntiCheatCheck ();
#if defined USEDRIFT

  foreach(new playerid : Drifter)
  {
	  if(playerid < MAX_PLAYERS)
	  {
       pDCOUNTER[playerid]--;
       new str[50];
       format(str, sizeof(str), "%s", TimeConvert(pDCOUNTER[playerid]));
       TextDrawSetString(pDriftTD[playerid][0], str);
       if(pDCOUNTER[playerid] == 0)
       {
		GameTextForPlayer(playerid, "~r~Time's Up", 5000, 6);
		TogglePlayerControllable2(playerid, 0);
		ShowMenuForPlayer(DriftMenu, playerid);
       }
	  }
  }
#endif
  if(sumocam == 0)
  {
	   if(Iter_Count(InSumo) == 1)
	   {
		   foreach(new playerid : InSumo)
		   {
			  if(playerid < MAX_PLAYERS)
			  {
				new count=1;
				new m, Float:SumoHealth, sumo3d[128];
				SendInfoText(playerid, 1000, "~y~Please Wait for ~r~opponents");
				if(Spawned[playerid] && SumoSpec[playerid] == 0 && !GetPVarInt(playerid, "SumoShowIt"))
				{
					m=GetVehicleModel(GetPlayerVehicleID(playerid));
					if(m >= 400)
					{
						GetVehicleHealth(GetPlayerVehicleID(playerid), SumoHealth);
						format(sumo3d, sizeof(sumo3d), "\n%s\nAlive : %d Seconds\nHealth: %d%s\nPosition: %s", vInfo[m-400][vName], SumoSecs[playerid], floatround((SumoHealth/1000)*100), "%", possuffix(count));
						UpdateDynamic3DTextLabelText(Sumo3D[playerid], 0x7AE01BCC, sumo3d);
					}
				}

				if(!IsPlayerInAnyVehicle(playerid) && SumoSecs[playerid] > 3 && !GetPVarInt(playerid, "SumoShowIt"))
				{
				 if(FallDown[playerid] != true)
				 {
				  FallDown[playerid]=true;
				  SumoKnock(playerid);
				 }
				}
			    if(HideShit[playerid] == 0) PlayerTextDrawSetString(playerid, Location[playerid][0], "_");
			    if(HideShit[playerid] == 0) PlayerTextDrawSetString(playerid, Location[playerid][1], "_");
	            new Float:x, Float:y, Float:z;
		        GetPlayerPos(playerid, x, y, z);
		        if(z < SumoMinZ[ring-1] && SumoSecs[playerid] > 3 && !GetPVarInt(playerid, "SumoShowIt"))
		        {
				 if(UnderZ[playerid] != true)
				 {
		          FallDown[playerid]=false;
		          UnderZ[playerid]=true;
	              SumoKnock(playerid);
				 }
		        }
			  }

		   }
	   }
	   else
	   {
		   new winnames[256], winnameon, sumoWON, sumoWONID;
		   foreach(new playerid : InSumo)
		   {
				 new count=1;
				 foreach(new i : InSumo)
				 {
					if(SumoSecs[i] > SumoSecs[playerid]) count++;
				 }

			     if(Spawned[playerid] && SumoSpec[playerid] == 0 && !GetPVarInt(playerid, "SumoShowIt"))
			     {
				  	   new m, Float:SumoHealth, sumo3d[128];
				  	   if(GetPlayerState(playerid) == 2)
				  	   {
						  m=GetVehicleModel(GetPlayerVehicleID(playerid));
						  GetVehicleHealth(GetPlayerVehicleID(playerid), SumoHealth);
						  format(sumo3d, sizeof(sumo3d), "\n%s\nAlive : %d Seconds\nHealth: %d%s\nPosition: %s", vInfo[m-400][vName], SumoSecs[playerid], floatround((SumoHealth/1000)*100), "%", possuffix(count));
						  UpdateDynamic3DTextLabelText(Sumo3D[playerid], 0x7AE01BCC, sumo3d);
				  	   }

					   if(!IsPlayerInAnyVehicle(playerid) && SumoSecs[playerid] > 3 && !GetPVarInt(playerid, "SumoShowIt"))
					   {
						 if(FallDown[playerid] != true)
						 {
						  FallDown[playerid]=true;
						  SumoKnock(playerid);
						 }
					   }
					   if(g_IsPaused[playerid] != true) SumoSecs[playerid]++;
					   else
					   {
						  if(Pauseda[playerid] >= 5)
						  {
						      if(!GetPVarInt(playerid, "SumoPause"))
							  {
                                 SumoPaused[playerid]=true;
							     SetPVarInt(playerid, "SumoPause", true);
							     SumoKnock(playerid);
							  }
						  }

					   }

					   if(HideShit[playerid] == 0) PlayerTextDrawSetString(playerid, Location[playerid][0], "_");
					   if(HideShit[playerid] == 0) PlayerTextDrawSetString(playerid, Location[playerid][1], "_");


			           switch(SumoSecs[playerid])
			           {
						  case 1, 5, 10:
						  {
			               SetPlayerColor(playerid, 0x2DCF04AA);
						  }
						  case 200:
						  {
			               SetPlayerColor(playerid, 0xFFFF00AA);
			               SendClientMessage(playerid, -1, "{70DB72}» Sumo «{BDDDFB} You have been alive half of the time! Hang in there!");
						  }
						  case 300:
						  {
			               SetPlayerColor(playerid, 0xF60000AA);
						  }
						  case 340:
						  {
							format(winnames, sizeof(winnames), "%s, %s", winnames, pName[playerid]);
							winnameon++;
							new engine, llights, alarm, doors, bonnet, boot, objective;
							GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, llights, alarm, doors, bonnet, boot, objective);
							SetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, llights, 1, doors, bonnet, boot, objective);
						  }
						  case 400:
						  {
			                 sumoWON++;
			                 sumoWONID=playerid;
						  }
			           }
			           new Float:x, Float:y, Float:z;
				       GetPlayerPos(playerid, x, y, z);
				       if(z < SumoMinZ[ring-1] && SumoSecs[playerid] > 3 && !GetPVarInt(playerid, "SumoShowIt"))
				       {
						 if(UnderZ[playerid] != true)
						 {
				          FallDown[playerid]=false;
				          UnderZ[playerid]=true;
			              SumoKnock(playerid);
						 }
				       }

		   	     }
		   }
		   if(winnameon > 0)
		   {
				new str[256], str2[256];
				if(winnameon == 1) strdel(winnames, 0, 1);
				format(str, sizeof(str), "~g~%s~w~ will win ~n~in ~r~60 seconds!", winnames);
				if(winnameon > 1) format(str2, sizeof(str2), "{70DB72}» Sumo « {FEC0F2}%s{FFFFFF} will win in 60 seconds, unless they are {FF0000}eliminated.", winnames);
				else format(str2, sizeof(str2), "{70DB72}» Sumo « {FEC0F2}%s{FFFFFF} will win in 60 seconds, unless he is {FF0000}eliminated.", winnames);
				foreach(new i : InSumo)
				{
				    SendInfoText(i, 4000, str);
				    SendClientMessage(i, -1, str2);
				}
		   }
		   if(sumoWON == 1)
		   {
				 SumoWinner(sumoWONID);
		   }
		   else if(sumoWON > 1)
		   {
	             SumoWinner(-1);
		   }
	   }
  }
  return 1;
}
stock SumoWinner(winid)
{
	new str[128];
	if(winid > 0)
	{
		format(str, sizeof(str), "{70DB72}» Sumo «{FEC0F2} %s has won the Sumo{BDDDFB}!", pName[winid]);
		SendClientMessageToAll(-1, str);
		PlayerInfo[winid][SumoWinz]++;

		new Query[256];
		format(Query, sizeof(Query), "UPDATE `users` SET `SumoWon` = %d WHERE `UserID` = '%d'", PlayerInfo[winid][SumoWinz], PlayerInfo[winid][UserID]);
		mysql_query(GTADM, Query);
		if(PlayerInfo[winid][SumoWinz] >= 30) GiveMedal(winid, 79);
		if(SumoDied[winid]==0) GiveMedal(winid, 81);
		GivePlayerMoneyEX(winid, 50000);
		ScoreTDupdate(winid, 5);
		if(EventType==700 && EventStarted == 1) EventWinner(winid);
	}
	else if(winid < 0)
	{
		SendClientMessageToAll(-1, "{70DB72}» Sumo «{FEC0F2} The Sumo has ended with multiple winners{BDDDFB}!");
	}
	sumocam=1;
	ring++;
	if(ring > 13) ring=1;
    foreach(new playerid : InSumo)
    {
        if(SumoCar[playerid] > 0) DestroyVehicleEX(SumoCar[playerid]);
        SumoCar[playerid]=0;
        SpawnInSumo(playerid);
        if(nextroundtimer > 0) KillTimer(nextroundtimer);
        nextroundtimer=SetTimer("nextroundsumo", 15000, false);
    }

}
forward nextroundsumo();
public nextroundsumo()
{
 sumocam=0;
 foreach(new playerid : InSumo)
 {
     SpawnInSumo(playerid);
     TogglePlayerControllable2(playerid, 1);
     SumoDied[playerid]=0;
 }
 nextroundtimer=-1;
 return 1;
}


stock RemoveFromSumo(playerid)
{
     if(Iter_Contains(InSumo, playerid))
     {
        ClearHitId(playerid);
        DeletePVar(playerid, "lasthit");
        if(IsValidDynamic3DTextLabel(Sumo3D[playerid])) DestroyDynamic3DTextLabel(Sumo3D[playerid]);
		Sumo3D[playerid]=INVALID_3DTEXT_ID;
        if(SumoCar[playerid] > 0) DestroyVehicleEX(SumoCar[playerid]);
        SumoCar[playerid]=0;
		TogglePlayerSpectating(playerid, 0);
		LoadPlayerCoords(playerid);
		SetPlayerVirtualWorldEX(playerid, 0);
		Streamer_ToggleIdleUpdate(playerid, false);
		SetCameraBehindPlayer(playerid);
		Iter_Remove(InSumo, playerid );
		DeletePVar(playerid, "SumoShowIt");
		DeletePVar(playerid, "FixSumoSpawn");
		if(PlayerInfo[playerid][pGang] < 0) SetPlayerColor( playerid, PlayerColors[random(200)] );
		else SetPlayerColor( playerid, PlayerColors[GangInfo[PlayerInfo[playerid][pGang]][gColor]] );

     }
}
forward MoveRamps();
public MoveRamps()
{
  if(sumoramp==1) sumoramp=0;
  else sumoramp=1;
  if(sumoramp==0)
  {
	MoveDynamicObject(sumoramp1, 179.822540, 1998.599365, 59.723724, 3.0);
	MoveDynamicObject(sumoramp2, 270.009827, 1997.772705, 86.723724, 3.0);
	MoveDynamicObject(sumoramp3, 2201.137207, 1042.161377, 75.596863, 3.5);
  }
  else if(sumoramp==1)
  {
	MoveDynamicObject(sumoramp1, 179.822540, 1998.599365, 86.723724, 3.0);
	MoveDynamicObject(sumoramp2, 270.009827, 1997.772705, 59.723724, 3.0);
	MoveDynamicObject(sumoramp3, 2201.153564, 1042.153931, 43.873863, 3.5);
  }
  repaircount++;
  if(ring > 0 && sumocam != 1)
  {
	  if(SumoAutoRepair[ring-1] > 0)
	  {
		  if(repaircount >= 6)
		  {
		    repaircount=0;
		    foreach(new i : InSumo)
		    {
			    SendClientMessage(i, -1, "{70DB72}» Sumo «{FFA514} Your vehicle has been partially repaired!");

			    new Float:health;
			    new veh;
			    veh = GetPlayerVehicleID(i);
			    GetVehicleHealth(veh, health);
			    if(health >= 800) SetVehicleHealth(veh, 1000);
			    else SetVehicleHealth(veh, health+200);
		    }

		  }
	  }
  }
  return 1;
}

stock sumoshow(i)
{
		if(SumoSpec[i]==1) TogglePlayerSpectating(i, 0);
        SumoSpecID[i]=-1;
	   	if(ring==1){
		ShowRing1(i);}
		if(ring==2){
		ShowRing2(i);}
		if(ring==3){
		ShowRing3(i);}
		if(ring==4){
		ShowRing4(i);}
		if(ring==5){
		ShowRing5(i);}
		if(ring==6){
		ShowRing6(i);}
		if(ring==7){
		ShowRing7(i);}
		if(ring==8){
		ShowRing8(i);}
		if(ring==9){
		ShowRing9(i);}
		if(ring==10){
		ShowRing10(i);}
		if(ring==11){
		ShowRing11(i);}
		if(ring==12){
		ShowRing12(i);}
		if(ring==13){
		ShowRing13(i);}

}
stock possuffix(pos)
{
  new str[128];
  switch(pos)
  {
	case 1: format(str, sizeof(str), "1st");
	case 2: format(str, sizeof(str), "2nd");
	case 3: format(str, sizeof(str), "3rd");
	default: format(str, sizeof(str), "%dth", pos);
  }
  return str;
}

stock SumoKnock(playerid)
{
  if(Iter_Contains(InSumo, playerid))
  {
   SumoDied[playerid]=1;
   if(IsValidDynamic3DTextLabel(Sumo3D[playerid])) DestroyDynamic3DTextLabel(Sumo3D[playerid]);
   foreach(new i : InSumo)
   {
	  if(SumoSpec[i] == 1 && SumoSpecID[i]==playerid)
	  {
	   sumoshow(i);
	  }
   }
   Sumo3D[playerid]=INVALID_3DTEXT_ID;
   if(SumoCar[playerid] > 0) DestroyVehicleEX(SumoCar[playerid]);
   SumoCar[playerid]=0;
   SetPlayerColor(playerid, 0x969696AA);
   new dstring[144];
   if (( GetTickCount() - TickCount[playerid][LastSumo] ) >= 3000 )
   {

       new lhit=GetPVarInt(playerid, "lasthit");
       TickCount[playerid][LastSumo] = GetTickCount();
       if(SumoSecs[playerid] > 0)
       {
		   if(FallDown[playerid]==true) format(dstring, sizeof(dstring), "{70DB72}» Sumo «{FEC0F2} %s Eliminated{FFFFFF}. {BDDDFB}[Left Vehicle - Active for %d seconds]", pName[playerid], SumoSecs[playerid]);
		   else if(UnderZ[playerid]==true)
		   {
		     if(IsPlayerConnected(lhit)) format(dstring, sizeof(dstring), "{70DB72}» Sumo «{FEC0F2} %s Eliminated{FFFFFF}. {BDDDFB}[Fell Off - Active for %d seconds - Knocked by %s]", pName[playerid], SumoSecs[playerid], pName[lhit]);
			 else format(dstring, sizeof(dstring), "{70DB72}» Sumo «{FEC0F2} %s Eliminated{FFFFFF}. {BDDDFB}[Fell Off - Active for %d seconds]", pName[playerid], SumoSecs[playerid]);
		   }
		   else if(Suicide[playerid]==true) format(dstring, sizeof(dstring), "{70DB72}» Sumo «{FEC0F2} %s Eliminated{FFFFFF}. {BDDDFB}[Suicide - Active for %d seconds]", pName[playerid], SumoSecs[playerid]);
		   else if(SumoPaused[playerid]==true) format(dstring, sizeof(dstring), "{70DB72}» Sumo «{FEC0F2} %s Eliminated{FFFFFF}. {BDDDFB}[Paused - Active for %d seconds]", pName[playerid], SumoSecs[playerid]);
		   else if(SumoCamping[playerid]==true) format(dstring, sizeof(dstring), "{70DB72}» Sumo «{FEC0F2} %s Eliminated{FFFFFF}. {BDDDFB}[Camping - Active for %d seconds]", pName[playerid], SumoSecs[playerid]);
		   else
		   {
		     if(IsPlayerConnected(lhit)) format(dstring, sizeof(dstring), "{70DB72}» Sumo «{FEC0F2} %s Eliminated{FFFFFF}. {BDDDFB}[Died - Active for %d seconds - Killed by %s]", pName[playerid], SumoSecs[playerid], pName[lhit]);
			 else format(dstring, sizeof(dstring), "{70DB72}» Sumo «{FEC0F2} %s Eliminated{FFFFFF}. {BDDDFB}[Died - Active for %d seconds - Killed by nobody]", pName[playerid], SumoSecs[playerid]);
		   }
 		   foreach(new i : InSumo) SendClientMessage(i, -1, dstring);
	   }
   }
   SumoSecs[playerid]=0;

   new idd=-1;
   foreach(new i : InSumo)
   {
		if(IsPlayerInAnyVehicle(i))
		{
		  if(i != playerid) idd=i;
		}
   }
   if(idd < 0)
   {
      SetPVarInt(playerid, "SumoShowIt", true);
      sumoshow(playerid);
      SetTimerEx("sumorespawn", 12000, 0, "i", playerid);
      SendInfoText(playerid, 5000, "~y~You will respawn in 12 seconds");
   }
   else
   {
	   if(!IsValidVehicle(GetPlayerVehicleID(idd)))
	   {
	      SetPVarInt(playerid, "SumoShowIt", true);
	      sumoshow(playerid);
	      SetTimerEx("sumorespawn", 12000, 0, "i", playerid);
	      SendInfoText(playerid, 5000, "~y~You will respawn in 12 seconds");
	   }
	   else
	   {
          SumoSpec[playerid]=1;
		  SumoSpecID[playerid]=idd;
		  TogglePlayerSpectating(playerid, 1);
		  PlayerSpectateVehicle(playerid, GetPlayerVehicleID(idd));
		  SetTimerEx("sumorespawn", 12000, 0, "i", playerid);
	      SendInfoText(playerid, 5000, "~y~You will respawn in 12 seconds");
	      SetPVarInt(playerid, "FixSumoSpawn", true);
	   }


   }
  }
}
#if defined USE_POOL

forward GoPool(playerid, id);
public GoPool(playerid, id)
{
  InterpolateCameraPos(playerid, 508.1647, -81.2077, 1001.2369, 510.0244, -87.2290, 1000.6743, 3000);
  InterpolateCameraLookAt(playerid, 508.6456, -82.0829, 1000.6399, 510.0139, -86.2303, 999.7143, 3000);
  InterpolateCameraPos(id, 508.1647, -81.2077, 1001.2369, 510.0244, -87.2290, 1000.6743, 3000);
  InterpolateCameraLookAt(id, 508.6456, -82.0829, 1000.6399, 510.0139, -86.2303, 999.7143, 3000);
  SetTimerEx("GoPool2", 3500, false, "ii", playerid, id);
}
forward GoPool2(playerid, id);
public GoPool2(playerid, id)
{
	switch(random(2))
	{
		case 0:
		{
		  poolturn=playerid;
		  SendInfoText(playerid, 3000, "~y~Your Turn");
		  SendInfoText(id, 3000, "~r~Opponent's Turn");
		}
		case 1:
		{
		  poolturn=id;
		  SendInfoText(id, 3000, "Your Turn");
		  SendInfoText(playerid, 3000, "~r~Opponent's Turn");
		}
	}
	SetCameraBehindPlayer(playerid);
	SetCameraBehindPlayer(id);
	lockshooting=0;
	for(new x=0; x<sizeof(PoolBall); x++)
	{
		if(IsValidObject(PoolBall[x]))
		{
		  DestroyObject(PoolBall[x]);
		  PHY_DeleteObject(PoolBall[x]);
		}
	}

	PoolBall[0] = CreateObject(3003, 510.11218261719, -84.40771484375, 998.86785888672, 0, 0, 0);
	PoolBall[1] = CreateObject(3100, 510.10882568359, -85.166389465332, 998.86749267578, 0, 0, 0);
	PoolBall[2] = CreateObject(3101, 510.14270019531, -85.232612609863, 998.86749267578, 0, 0, 0);
	PoolBall[3] = CreateObject(3102, 510.0676574707, -85.232200622559, 998.86749267578, 0, 0, 0);
	PoolBall[4] = CreateObject(3103, 510.18600463867, -85.295257568359, 998.86749267578, 0, 0, 0);
	PoolBall[5] = CreateObject(3104, 510.11242675781, -85.297294616699, 998.86749267578, 0, 0, 0);
	PoolBall[6] = CreateObject(3105, 510.03665161133, -85.299163818359, 998.86749267578, 0, 0, 0);
	PoolBall[7] = CreateObject(3002, 510.22308349609, -85.362342834473, 998.86749267578, 0, 0, 0);
	PoolBall[8] = CreateObject(2995, 510.14828491211, -85.365989685059, 998.86749267578, 0, 0, 0);
	PoolBall[9] = CreateObject(2996, 510.07455444336, -85.365234375, 998.86749267578, 0, 0, 0);
	PoolBall[10] = CreateObject(2998, 510.00054931641, -85.363563537598, 998.86749267578, 0, 0, 0);
	PoolBall[11] = CreateObject(2999, 510.25915527344, -85.431137084961, 998.86749267578, 0, 0, 0);
	PoolBall[12] = CreateObject(3000, 510.18399047852, -85.430549621582, 998.86749267578, 0, 0, 0);
	PoolBall[13] = CreateObject(3001, 510.10900878906, -85.43196105957, 998.86749267578, 0, 0, 0);
	PoolBall[14] = CreateObject(3106, 510.03570556641, -85.432624816895, 998.86749267578, 0, 0, 0);
	PoolBall[15] = CreateObject(2997, 509.96197509766, -85.427406311035, 998.86749267578, 0, 0, 0);

	for(new i; i < sizeof PoolBall; i++)
	{
		 PHY_InitObject(PoolBall[i], 3003, _, _, PHY_MODE_2D); // Notice that I typed modelid 3003 because all the balls are equal.
		 PHY_SetObjectFriction(PoolBall[i], 0.08);
		 PHY_RollObject(PoolBall[i]);
		 PHY_SetObjectWorld(PoolBall[i], 477);
	}
}

forward SetPoolCam2(playerid, id);
public SetPoolCam2(playerid, id)
{
  if(poolmode == 2)
  {
	SetPlayerCameraPos(playerid, 510.0244, -87.2290, 1000.6743);
	SetPlayerCameraPos(id, 510.0244, -87.2290, 1000.6743);
	SetPlayerCameraLookAt(playerid, 510.0139, -86.2303, 999.7143);
	SetPlayerCameraLookAt(id, 510.0139, -86.2303, 999.7143);
  }
  return 1;
}
forward SetPoolCam(playerid, id);
public SetPoolCam(playerid, id)
{
  if(poolmode == 2)
  {
	  new moving;
	  for(new x=0; x<sizeof(PoolBall); x++)
	  {
	   if(IsValidObject(PoolBall[x]))
	   {
		 if(PHY_IsObjectUsingPhysics(PoolBall[x]))
		 {
			if(PHY_IsObjectMoving(PoolBall[x]))
			{
			  moving++;
			  break;
			}
		 }
	   }
	  }
	  if(moving > 0)
	  {
	     SetTimerEx("SetPoolCam", 2000, false, "ii", playerid, id);
	  }
	  else
	  {
		  if(poolin >0)
		  {
			poolturn=id;
			new str[50];
			format(str, sizeof(str), "Score: ~g~+%d", poolin);
			SendInfoText(id, 3000, str);
		  }
		  else
		  {
		      poolturn=playerid;
		      SendInfoText(playerid, 3000, "~y~Your Turn");
		      SendInfoText(id, 3000, "~r~Opponent's Turn");
		  }
		  SetCameraBehindPlayer(playerid);
		  SetCameraBehindPlayer(id);
		  lockshooting=0;
	  }
  }
}
stock Float:GetVectorDistance_PL(playerid, obja)
{
    new Float:pos[6];
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	GetObjectPos(obja, pos[3], pos[4], pos[5]);
	return floatsqroot(floatpower(pos[3] - pos[0], 2) + floatpower(pos[4] - pos[1], 2) + floatpower(pos[5] - pos[2], 2));
}

public PHY_OnObjectUpdate(objectid)
{
	new playerid=poollasthit;
	if(objectid != PoolBall[0] &&(IsObjectInSphere(objectid, 509.61123657, -85.79737091, 998.86785889, 0.08) ||
	IsObjectInSphere(objectid, 510.67373657, -84.84423065, 998.86785889, 0.08) ||
	IsObjectInSphere(objectid, 510.61914062, -83.88769531, 998.86785889, 0.08) ||
    IsObjectInSphere(objectid, 509.61077881, -83.89227295, 998.86785889, 0.08) ||
	IsObjectInSphere(objectid, 510.61825562, -85.80107880, 998.86785889, 0.08) ||
	IsObjectInSphere(objectid, 509.55642700, -84.84602356, 998.86785889, 0.08)))
	{
	 if(playerid == poolguy1)
	 {
        poolin++;
		PHY_DeleteObject(objectid);
		poolscore1++;
		new str[128];
		format(str, sizeof(str), "~y~%s - %d ~n~~n~%s - %d", pName[poolguy1], poolscore1, pName[poolguy2], poolscore2);
		TextDrawSetString(PoolTD3, str);
		ballscount--;
		Checkwin();
		DestroyObject(objectid);
	 }
	 else if(playerid == poolguy2)
	 {
	  if(objectid != PoolBall[0])
	  {
        poolin++;
		PHY_DeleteObject(objectid);
		poolscore2++;
		new str[128];
		format(str, sizeof(str), "~y~%s - %d ~n~~n~%s - %d", pName[poolguy1], poolscore1, pName[poolguy2], poolscore2);
		TextDrawSetString(PoolTD3, str);
		ballscount--;
		Checkwin();
		DestroyObject(objectid);
	  }
	 }
	}
	return 1;
}

stock IsObjectInSphere(objectid, Float:x, Float:y, Float:z, Float:radius2)
{
    new Float:x1, Float:y1, Float:z1, Float:tmpdis;
    GetObjectPos(objectid, x1, y1, z1);
    tmpdis = floatsqroot(floatpower(floatabs(floatsub(x, x1)), 2)+ floatpower(floatabs(floatsub(y, y1)), 2)+ floatpower(floatabs(floatsub(z, z1)), 2));
    if(tmpdis < radius2) return 1;
    return 0;
}
stock Float:GetVectorAngle_XY(Float:fx, Float:fy, Float:tx, Float:ty)
{
	new Float:vector[3];
	vector[0] = tx - fx;
	vector[1] = ty - fy;
	vector[2] = atan(-(vector[0] / vector[1]));
	if(vector[1] < 0)
	    vector[2] = vector[2] >= 180 ? vector[2] - 180 : vector[2] + 180;

	return vector[2];
}

stock BillardUpdate(playerid)
{
	if(poPlayer[playerid][Sighting] == true)
	{
	    if(GetVectorDistance_PL(playerid, PoolBall[0]) < 1.6)
	    {
	    	new key[3];
	    	new Float:pos[3];
	    	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
    		GetPlayerKeys(playerid, key[0], key[1], key[2]);
	    	if(key[2] == KEY_LEFT && poPlayer[playerid][SelectLR] < 10)
	    	{
	    	    new Float:angle;
	    	    new Float:angXY;
				GetPlayerFacingAngle(playerid, angle);

				poPlayer[playerid][SelectLR]++;

				pos[0] += floatsin(-angle - 90, degrees) / 20;
				pos[1] += floatcos(-angle - 90, degrees) / 20;

				new Float:dist = GetVectorDistance_PL(playerid, PoolBall[0]);
				new Float:pp[3];
				GetObjectPos(PoolBall[0], pp[0], pp[1], pp[2]);
				angXY = GetVectorAngle_XY(pos[0], pos[1], pp[0], pp[1]);

				if(0.9 <= dist <= 1.2)
				{
					pos[0] += floatsin(-angXY + 180, degrees) * 0.3;
					pos[1] += floatcos(-angXY + 180, degrees) * 0.3;
				}
				else if(dist < 0.9)
				{
					pos[0] += floatsin(-angXY + 180, degrees) * 0.6;
					pos[1] += floatcos(-angXY + 180, degrees) * 0.6;
				}
				SetPlayerPos(playerid, pos[0], pos[1], pos[2]);
				SetPlayerFacingAngle(playerid, angXY - 2.2);
				poPlayer[playerid][pooa] = angXY - 2.2;

				pos[0] += floatsin(-angXY - 10, degrees) * 0.2;
 				pos[1] += floatcos(-angXY - 10, degrees) * 0.2;
		   	 	SetPlayerCameraPos(playerid, pos[0], pos[1], pp[2] + 0.5);
	       		SetPlayerCameraLookAt(playerid, pp[0], pp[1], pp[2]);
	        	ApplyAnimation(playerid, "POOL", "POOL_Med_Start", 1, 0, 0, 0, 1, 0, 1);
	    	}
	    	else if(key[2] == KEY_RIGHT && poPlayer[playerid][SelectLR] > -10)
	    	{
	    	    new Float:angle;
	    	    new Float:angXY;
				GetPlayerFacingAngle(playerid, angle);

				pos[0] += floatsin(-angle + 90, degrees) / 20;
				pos[1] += floatcos(-angle + 90, degrees) / 20;

				poPlayer[playerid][SelectLR]--;

				new Float:dist = GetVectorDistance_PL(playerid, PoolBall[0]);
				new Float:pp[3];
				GetObjectPos(PoolBall[0], pp[0], pp[1], pp[2]);
				angXY = GetVectorAngle_XY(pos[0], pos[1], pp[0], pp[1]);

				if(0.9 <= dist <= 1.2)
				{
					pos[0] += floatsin(-angXY + 180, degrees) * 0.3;
					pos[1] += floatcos(-angXY + 180, degrees) * 0.3;
				}
				else if(dist < 0.9)
				{
					pos[0] += floatsin(-angXY + 180, degrees) * 0.6;
					pos[1] += floatcos(-angXY + 180, degrees) * 0.6;
				}
				SetPlayerPos(playerid, pos[0], pos[1], pos[2]);
				SetPlayerFacingAngle(playerid, angXY - 2.2);
				poPlayer[playerid][pooa] = angXY - 2.2;

				pos[0] += floatsin(-angXY - 10, degrees) * 0.2;
 				pos[1] += floatcos(-angXY - 10, degrees) * 0.2;
		    	SetPlayerCameraPos(playerid, pos[0], pos[1], pp[2] + 0.5);
	        	SetPlayerCameraLookAt(playerid, pp[0], pp[1], pp[2]);
	        	ApplyAnimation(playerid, "POOL", "POOL_Med_Start", 1, 0, 0, 0, 1, 0, 1);
	    	}
	    	else if(key[1] == KEY_UP || key[1] == KEY_DOWN)
	    	{
	    	    if(key[1] == KEY_UP && 0.0 < poPlayer[playerid][SelectUD] < 6.0)
	    	    {
	    	        poPlayer[playerid][SelectUD]=poPlayer[playerid][SelectUD]+1.0;
					new str[20];
					format(str, sizeof(str), "~r~Strength~y~ %d", floatround(poPlayer[playerid][SelectUD]));
					SendInfoText(playerid, 2000, str);

				}
	    	    else if(key[1] == KEY_DOWN && 1.0 < poPlayer[playerid][SelectUD] <= 6.0)
		  		{
	    	        poPlayer[playerid][SelectUD]=poPlayer[playerid][SelectUD]-1.0;
					new str[20];
					format(str, sizeof(str), "~r~Strength~y~ %d", floatround(poPlayer[playerid][SelectUD]));
					SendInfoText(playerid, 2000, str);


      			}
	    	}
		}
    }
    return 1;
}
stock RemoveFromPool(playerid)
{
	ResetPlayerWeaponsEX(playerid);
	SetCameraBehindPlayer(playerid);
	SetPlayerVirtualWorldEX(playerid, 0);
	LoadPlayerCoords(playerid);
	DeletePVar(playerid, "poolguy1");
	DeletePVar(playerid, "poolguy2");
	TextDrawHideForPlayer(playerid, PoolTD1);
	TextDrawHideForPlayer(playerid, PoolTD2);
	TextDrawHideForPlayer(playerid, PoolTD3);
	TogglePlayerControllable2(playerid, 1);
	poPlayer[playerid][Sighting]=false;
	RemovePlayerAttachedObject(playerid, 3);
}
stock Checkwin()
{
 if(ballscount <= 0)
 {
	  if(poolscore1 > poolscore2)
	  {

		 new str[128];
		 format(str, sizeof(str), "{FF8C00}» Pool «{7FBA00} %s has won the pool against %s.", pName[poolguy1], pName[poolguy2]);
		 SendClientMessageToAll(-1, str);
		 PoolWinner(poolscore1);
	  }
	  else if(poolscore2 > poolscore1)
	  {
		 new str[128];
		 format(str, sizeof(str), "{FF8C00}» Pool «{7FBA00} %s has won the pool against %s.", pName[poolguy2], pName[poolguy1]);
		 SendClientMessageToAll(-1, str);
		 PoolWinner(poolscore2);

	  }
	  RemoveFromPool(poolguy1);
	  RemoveFromPool(poolguy2);
	  poolscore2=0;
	  poolscore1=0;
	  poolguy1=-1;
	  poolguy2=-1;
	  poolmode=0;
 }
}

stock PoolWinner(playerid)
{

	PlayerInfo[playerid][PoolWon]++;
	new Query[256];
	format(Query, sizeof(Query), "UPDATE `users` SET `PoolWon` = %d WHERE `UserID` = '%d'", PlayerInfo[playerid][PoolWon], PlayerInfo[playerid][UserID]);
	mysql_query(GTADM, Query);
	ScoreTDupdate(playerid, 5);
	GivePlayerMoneyEX(playerid, 150000);
	if(PlayerInfo[playerid][PoolWon] >= 50) GiveMedal(playerid, 2);
}
#endif
stock IsValidState(playerid)
{
  new sestat=GetPlayerState(playerid);
  {
	switch(sestat)
	{
		case 1..6, 8:return 1;
		default:return 0;
	}
  }
  return 0;
}


stock VehicleHasDriver(vehicleid)
{
     foreach(new i : Player)
     {
        if(GetPlayerVehicleID(i)==vehicleid)
        {
			if(GetPlayerState(i) == 2) return 1;
        }
     }
     return 0;
}
stock ColorLighen(colour, Float:Amount)
{
    new a = colour & 0xFF;
	new r=min(255, ((colour >> 24) & 0xFF)+ floatround(255 * Amount));
	new g=min(255, ((colour >> 16) & 0xFF)+ floatround(255 * Amount));
	new b=min(255, ((colour >> 8) & 0xFF)+ floatround(255 * Amount));
	return (r<<24 | g<<16 | b<<8 | a);
}

stock ColorDarken(colour, Float:Amount)
{
    new a = colour & 0xFF;
	new r=max(0, ((colour >> 24) & 0xFF)- floatround(255 * Amount));
	new g=max(0, ((colour >> 16) & 0xFF)- floatround(255 * Amount));
	new b=max(0, ((colour >> 8) & 0xFF)- floatround(255 * Amount));
	return (r<<24 | g<<16 | b<<8 | a);
}

//Map loader------------------
stock pmlsplit(src[], dest[][], del = '|')
{
	new start, cur;
	for(new i; i < strlen(src) + 1; i++)
	    if(src[i] == del || i == strlen(src))
	    {
    		strmid(dest[cur], src, start, i, i - start + 1);
    		cur++;
    		start = i + 1;
	    }
}

stock GetFreeMap()
{
	for(new i = 0; i < MAX_MAPS; i++)
	{
		if(MI[i][objects][0] > 0)continue;
		curmap = i;
		return 1;
	}
	return -255;
}

stock GetMapByName(map[])
{
	for(new i = 0; i < MAX_MAPS; i++)
	{
		if(!strcmp(MI[i][mapname], map) && strlen(MI[i][mapname]) > 0 && strlen(map) > 0)return i;
	}
	return -255;
}


stock LoadSAMPMap(playerid, src[], create)
{
	new fakkkstr[128];
	if(!fexist(src))return SendClientMessage(playerid, 0xFF8800FF, "-MapLoader- {FFBB00} This file doesnt exist in maps folder!");
	if(strfind(src, ".txt") == -1) return SendClientMessage(playerid, 0xFF8800FF, "-MapLoader- {FFBB00} Failed to load the map file , make sure that the map file is in (.txt) format!");
	if(GetFreeMap() < 0)return printf(" Couldn't load the map %s (to many maps are loaded).", src); // Setting the map ID
	new File:Handler = fopen(src, io_read), count[2];
    if(!Handler) return SendClientMessage(playerid, 0xFF8800FF, "-MapLoader- {FFBB00} Objects failed to load from src!");

	format(fakkkstr, sizeof(fakkkstr), "%s", src);
    str_replace(".txt", "", fakkkstr, true, 0, -1, strlen(fakkkstr));
    str_replace("Maps/", "", fakkkstr, true, 0, -1, strlen(fakkkstr));
	if(GetMapByName(fakkkstr) >= 0) return SendClientMessage(playerid, 0xFF8800FF, "-MapLoader- {FFBB00} A map with this name already exist!");



    new Line[256], Index = -1, Model, Float:PosX, Float:PosY, Float:PosZ, Float:RotX, Float:RotY, Float:RotZ, f_World, f_Interior, isCreate, f_p, Float:f_Dist;
    while(fread(Handler, Line))
    {
		if(count[0] > 998)
		{
             SendClientMessage(playerid, 0xFF8800FF, "-MapLoader- {FFBB00}This map contains more than 1000 objects - Some objects have not been loaded!");
			 break;
		}
		Index++;
		new EOL = strfind(Line, ";", false);
		if(EOL != -1) strdel(Line, EOL - 1, sizeof Line - 1), count[1]++;
		else
		{
		    if(create == 1) printf("Error Reading object num %i from %s (; not found)", Index, src);
		    continue;
		}
		if(!sscanf(Line[20], "p<, >iffffffD(0)D(-1)D(-1)F(300.0)D(0)", Model, PosX, PosY, PosZ, RotX, RotY, RotZ, f_World, f_Interior, f_p, f_Dist, isCreate))
		{
			if(isCreate == 1) MI[curmap][objects][count[0]]=CreateObject(Model, PosX, PosY, PosZ, RotX, RotY, RotZ, f_Dist);
			else MI[curmap][objects][count[0]]=CreateDynamicObject(Model, PosX, PosY, PosZ, RotX, RotY, RotZ, f_World, f_Interior, -1, f_Dist);
			count[0]++;
			if(Model == 18090|| Model == 14537|| Model == 16151)
			{
     			AddBar(0, PosX, PosY, PosZ, RotX, RotY, RotZ, f_World, f_Interior);
			}
			if(f_World < 0) MI[curmap][m_world]=0;
			else  MI[curmap][m_world]=f_World;
			if(f_Interior < 0) MI[curmap][m_int]=0;
			else MI[curmap][m_int]=f_Interior;
		}
		else
		{
		 if(create == 1)  printf("Error Reading object num %i from %s (invalid line format)", Index, src);
		}
	}
    fclose(Handler);
//	MI[curmap][objects][0] = count[0]; // How many objects?
	if(count[0] > 0)
	{
	   format(MI[curmap][mapname], 64, fakkkstr); // Set the map title
	   if(create == 1)
	   {
		   new str[150];
		   format(str, sizeof(str), "INSERT INTO `maps` (`MapName`)VALUES ('%s');", MI[curmap][mapname]);
	       mysql_query(GTADM, str);
       }

	}
	new str[128];
	format(str, sizeof(str), "-MapLoader- {FFBB00}The Map \"%s (%d)\" has been loaded (Objects Loaded : %d || Lines : %d)!", MI[curmap][mapname], curmap, count[0], count[1]);
	SendClientMessage(playerid, 0xFF8800FF, str);
    if(create == 1) printf("MAP: %s (%d) Loaded (Objects: %d) (Lines : %d)", MI[curmap][mapname], curmap, count[0], count[1]);
    return 1;
}


stock RemoveMapObjects(playerid, map[])
{
	new count;
	new mid = GetMapByName(map);
	if(mid < 0)return SendClientMessage(playerid, 0xFF8800FF, "-MapLoader- {FFBB00} Map wasnt found!");
	for(new i = 0; i < 1000; i++)
	{
		if(MI[mid][objects][i] > 0)
		{
			if(IsValidDynamicObject(MI[mid][objects][i])) count++, DestroyDynamicObject(MI[mid][objects][i]);
			else if(IsValidObject(MI[mid][objects][i])) count++, DestroyObject(MI[mid][objects][i]);
			MI[mid][objects][i] = 0;
		}
	}
	MI[mid][mapname][0]=EOS;
	MI[mid][objects][0] = 0;
	new str[150];

    format(str, sizeof(str), "DELETE FROM `maps` WHERE `MapName` = '%s' LIMIT 1;", map);
    mysql_query(GTADM, str);

	format(str, sizeof(str), "-MapLoader- {FFBB00}The Map \"%s\" has been removed || %d objects deleted!", map, count);
	return SendClientMessage(playerid, 0xFF8800FF, str), printf("MAP %s removed || %d objects removed!", map, count);
}

stock RemoveMap(playerid, map[])
{
	new mid = GetMapByName(map);
	if(mid < 0)return SendClientMessage(playerid, 0xFF8800FF, "-MapLoader- {FFBB00} This map doesnt exist!");
	RemoveMapObjects(playerid, map);
	return 1;
}
SSCANF:rvehicle(string[])
{
	if ('0' <= string[0] <= '9')
	{
		new
			ret = strval(string);
		if (400 <= ret <= 611)
		{
			return ret;
		}
	}
	else
	{
		 for(new x=0; x != 211; x++)
		 {
         	if(strfind(vInfo[x][vName], string, true) != -1)
         	{
                return (400+x);
         	}

		 }
	}
	return -1;
}

stock SendDeathMsg(killerid, playerid, reason)
{
    #if defined USEKILLIST

    killistempty++;
	for(new x=0; x<5; x++) TextDrawDestroy(Killist[10+x]);
	oldreasons[4]=oldreasons[3];
	oldreasons[3]=oldreasons[2];
	oldreasons[2]=oldreasons[1];
	oldreasons[1]=oldreasons[0];
	oldreasons[0]=reason;

	for(new x=0; x<5; x++)
	{
		switch(oldreasons[x])
		{
			case 77:{}
			case 0:
			{
				Killist[10+x] = TextDrawCreate( 554.000000-30.0, -1+(80.0-x*20.0)+136.000000, "hud:fist");
				TextDrawBackgroundColor( Killist[10+x] , 0);
				TextDrawFont( Killist[10+x] , 4);
				TextDrawLetterSize( Killist[10+x] , 0.059999, 1.000000);
				TextDrawColor( Killist[10+x] , -1);
				TextDrawSetOutline( Killist[10+x] , 1);
				TextDrawSetProportional( Killist[10+x] , 1);
				TextDrawUseBox( Killist[10+x] , 1);
				TextDrawBoxColor( Killist[10+x] , 0);
				TextDrawTextSize( Killist[10+x] , 18.000000, 19.000000);
			}
			case 1:
			{
				Killist[10+x] = TextDrawCreate(586.000000-30.0, -1+(80.0-x*20.0)+111.000000, "brass");
				TextDrawBackgroundColor(Killist[10+x], 0);
				TextDrawFont(Killist[10+x], 5);
				TextDrawLetterSize(Killist[10+x], 2.159998, 8.199996);
				TextDrawColor(Killist[10+x], -1);
				TextDrawSetOutline(Killist[10+x], 1);
				TextDrawSetProportional(Killist[10+x], 1);
				TextDrawUseBox(Killist[10+x], 1);
				TextDrawBoxColor(Killist[10+x], 0);
				TextDrawTextSize(Killist[10+x], -70.000000, 70.000000);
				TextDrawSetPreviewModel(Killist[10+x], 331);
				TextDrawSetPreviewRot(Killist[10+x], 0.000000, 0.000000, 0.000000, 1.000000);

			}
			case 2:
			{
				//GOLF club

				Killist[10+x] = TextDrawCreate(579.000000-30.0, -1+(80.0-x*20.0)+62.000000, "brass");
				TextDrawBackgroundColor(Killist[10+x], 0);
				TextDrawFont(Killist[10+x], 5);
				TextDrawLetterSize(Killist[10+x], 2.159998, 8.199996);
				TextDrawColor(Killist[10+x], -1);
				TextDrawSetOutline(Killist[10+x], 1);
				TextDrawSetProportional(Killist[10+x], 1);
				TextDrawUseBox(Killist[10+x], 1);
				TextDrawBoxColor(Killist[10+x], 0);
				TextDrawTextSize(Killist[10+x], -48.000000, 166.000000);
				TextDrawSetPreviewModel(Killist[10+x], 333);
				TextDrawSetPreviewRot(Killist[10+x], 20.000000, 80.000000, 0.000000, 3.000000);

			}
			case 3:
			{
				//Nightstick
				Killist[10+x] = TextDrawCreate(581.000000-30.0, -1+(80.0-x*20.0)+101.000000, "Nightstick");
				TextDrawBackgroundColor(Killist[10+x], 0);
				TextDrawFont(Killist[10+x], 5);
				TextDrawLetterSize(Killist[10+x], 2.159998, 8.199996);
				TextDrawColor(Killist[10+x], -1);
				TextDrawSetOutline(Killist[10+x], 1);
				TextDrawSetProportional(Killist[10+x], 1);
				TextDrawUseBox(Killist[10+x], 1);
				TextDrawBoxColor(Killist[10+x], 0);
				TextDrawTextSize(Killist[10+x], -47.000000, 76.000000);
				TextDrawSetPreviewModel(Killist[10+x], 334);
				TextDrawSetPreviewRot(Killist[10+x], 80.000000, 60.000000, -80.000000, 2.000000);

			}
			case 4:
			{


				//Knife
				Killist[10+x] = TextDrawCreate(579.000000-30.0, -1+(80.0-x*20.0)+109.000000, "knife");
				TextDrawBackgroundColor(Killist[10+x], 0);
				TextDrawFont(Killist[10+x], 5);
				TextDrawLetterSize(Killist[10+x], 2.159998, 8.199996);
				TextDrawColor(Killist[10+x], -1);
				TextDrawSetOutline(Killist[10+x], 1);
				TextDrawSetProportional(Killist[10+x], 1);
				TextDrawUseBox(Killist[10+x], 1);
				TextDrawBoxColor(Killist[10+x], 0);
				TextDrawTextSize(Killist[10+x], -47.000000, 56.000000);
				TextDrawSetPreviewModel(Killist[10+x], 335);
				TextDrawSetPreviewRot(Killist[10+x], 80.000000, 60.000000, -80.000000, 1.000000);

			}
			case 5:
			{
				//baseball
				Killist[10+x] = TextDrawCreate(560.000000-30.0, -1+(80.0-x*20.0)+99.000000, "Baseball Bat");
				TextDrawBackgroundColor(Killist[10+x], 0);
				TextDrawFont(Killist[10+x], 5);
				TextDrawLetterSize(Killist[10+x], 2.159998, 8.199996);
				TextDrawColor(Killist[10+x], -1);
				TextDrawSetOutline(Killist[10+x], 1);
				TextDrawSetProportional(Killist[10+x], 1);
				TextDrawUseBox(Killist[10+x], 1);
				TextDrawBoxColor(Killist[10+x], 0);
				TextDrawTextSize(Killist[10+x], -47.000000, 86.000000);
				TextDrawSetPreviewModel(Killist[10+x], 336);
				TextDrawSetPreviewRot(Killist[10+x], 80.000000, 60.000000, -80.000000, 2.000000);

			}
			case 6..8:
			{
				//shovel// Pool Cue// Katana
				Killist[10+x] = TextDrawCreate(560.000000-30.0, -1+(80.0-x*20.0)+79.000000, "shovel");
				TextDrawBackgroundColor(Killist[10+x], 0);
				TextDrawFont(Killist[10+x], 5);
				TextDrawLetterSize(Killist[10+x], 2.159998, 8.199996);
				TextDrawColor(Killist[10+x], -1);
				TextDrawSetOutline(Killist[10+x], 1);
				TextDrawSetProportional(Killist[10+x], 1);
				TextDrawUseBox(Killist[10+x], 1);
				TextDrawBoxColor(Killist[10+x], 0);
				TextDrawTextSize(Killist[10+x], -39.000000, 124.000000);
				TextDrawSetPreviewModel(Killist[10+x], GetWeaponModel(oldreasons[x]));
				TextDrawSetPreviewRot(Killist[10+x], 80.000000, 60.000000, -80.000000, 2.000000);

			}
			case 9:
			{
				//Chainsaw
				Killist[10+x] = TextDrawCreate(586.000000-30.0, -1+(80.0-x*20.0)+69.000000, "chainsaw");
				TextDrawBackgroundColor(Killist[10+x], 0);
				TextDrawFont(Killist[10+x], 5);
				TextDrawLetterSize(Killist[10+x], 2.159998, 8.199996);
				TextDrawColor(Killist[10+x], -1);
				TextDrawSetOutline(Killist[10+x], 1);
				TextDrawSetProportional(Killist[10+x], 1);
				TextDrawUseBox(Killist[10+x], 1);
				TextDrawBoxColor(Killist[10+x], 0);
				TextDrawTextSize(Killist[10+x], -77.000000, 145.000000);
				TextDrawSetPreviewModel(Killist[10+x], 341);
				TextDrawSetPreviewRot(Killist[10+x], 0.000000, 20.000000, 0.000000, 4.000000);

			}
			case 10..14:
			{
				//Dildo and flowe
				Killist[10+x] = TextDrawCreate(596.000000-30.0, -1+(80.0-x*20.0)+71.000000, "dildos and flower");
				TextDrawBackgroundColor(Killist[10+x], 0);
				TextDrawFont(Killist[10+x], 5);
				TextDrawLetterSize(Killist[10+x], 2.159998, 8.199996);
				TextDrawColor(Killist[10+x], -1);
				TextDrawSetOutline(Killist[10+x], 1);
				TextDrawSetProportional(Killist[10+x], 1);
				TextDrawUseBox(Killist[10+x], 1);
				TextDrawBoxColor(Killist[10+x], 0);
				TextDrawTextSize(Killist[10+x], -77.000000, 145.000000);
				TextDrawSetPreviewModel(Killist[10+x], GetWeaponModel(oldreasons[x]));
				TextDrawSetPreviewRot(Killist[10+x], 0.000000, 90.000000, 0.000000, 4.000000);

			}
			case 15:
			{

				//cane
				Killist[10+x] = TextDrawCreate(573.000000-30.0, -1+(80.0-x*20.0)+132.000000, "cane");
				TextDrawBackgroundColor(Killist[10+x], 0);
				TextDrawFont(Killist[10+x], 5);
				TextDrawLetterSize(Killist[10+x], 2.159998, 8.199996);
				TextDrawColor(Killist[10+x], -1);
				TextDrawSetOutline(Killist[10+x], 1);
				TextDrawSetProportional(Killist[10+x], 1);
				TextDrawUseBox(Killist[10+x], 1);
				TextDrawBoxColor(Killist[10+x], 0);
				TextDrawTextSize( Killist[10+x], -19.000000, 40.000000);
				TextDrawSetPreviewModel( Killist[10+x], 326);
				TextDrawSetPreviewRot( Killist[10+x], 0.000000, -60.000000, 0.000000, 1.000000);

			}
			case 16..18:
			{
				//Gernade / Molotov / gas
				Killist[10+x] = TextDrawCreate( 579.000000-30.0, -1+(80.0-x*20.0)+121.000000, "bombs");
				TextDrawBackgroundColor( Killist[10+x], 0);
				TextDrawFont( Killist[10+x], 5);
				TextDrawLetterSize( Killist[10+x], 2.159998, 8.199996);
				TextDrawColor( Killist[10+x], -1);
				TextDrawSetOutline( Killist[10+x], 1);
				TextDrawSetProportional( Killist[10+x], 1);
				TextDrawUseBox( Killist[10+x], 1);
				TextDrawBoxColor( Killist[10+x], 0);
				TextDrawTextSize( Killist[10+x], -36.000000, 39.000000);
				TextDrawSetPreviewModel( Killist[10+x], GetWeaponModel(oldreasons[x]));
				TextDrawSetPreviewRot( Killist[10+x], 0.000000, 50.000000, 0.000000, 1.000000);

			}
			case 22..24:
			{
				//9mm s9mm Eagl
				Killist[10+x] = TextDrawCreate( 572.000000-30.0, -1+(80.0-x*20.0)+126.000000, "9mm s9mm Eagle");
				TextDrawBackgroundColor( Killist[10+x], 0);
				TextDrawFont( Killist[10+x], 5);
				TextDrawLetterSize( Killist[10+x], 2.159998, 8.199996);
				TextDrawColor( Killist[10+x], -1);
				TextDrawSetOutline( Killist[10+x], 1);
				TextDrawSetProportional( Killist[10+x], 1);
				TextDrawUseBox( Killist[10+x], 1);
				TextDrawBoxColor( Killist[10+x], 0);
				TextDrawTextSize( Killist[10+x], -36.000000, 39.000000);
				TextDrawSetPreviewModel( Killist[10+x], GetWeaponModel(oldreasons[x]));
				TextDrawSetPreviewRot( Killist[10+x], 0.000000, 0.000000, 0.000000, 1.000000);

			}
			case 25, 30, 31, 33, 34:
			{
				Killist[10+x] = TextDrawCreate( 592.000000-30.0, -1+(80.0-x*20.0)+104.000000, "9mm s9mm Eagle");
				TextDrawBackgroundColor( Killist[10+x], 0);
				TextDrawFont( Killist[10+x], 5);
				TextDrawLetterSize( Killist[10+x], 2.159998, 8.199996);
				TextDrawColor( Killist[10+x], -1);
				TextDrawSetOutline( Killist[10+x], 1);
				TextDrawSetProportional( Killist[10+x], 1);
				TextDrawUseBox( Killist[10+x], 1);
				TextDrawBoxColor( Killist[10+x], 0);
				TextDrawTextSize( Killist[10+x], -67.000000, 85.000000);
				TextDrawSetPreviewModel( Killist[10+x], GetWeaponModel(oldreasons[x]));
				TextDrawSetPreviewRot( Killist[10+x], 0.000000, -5.000000, 0.000000, 3.000000);

			}
			case 26, 27:
			{

				//26/27
				Killist[10+x] = TextDrawCreate( 594.000000-30.0, -1+(80.0-x*20.0)+103.000000, "combat shawn");
				TextDrawBackgroundColor( Killist[10+x], 0);
				TextDrawFont( Killist[10+x], 5);
				TextDrawLetterSize( Killist[10+x], 1.959998, 8.199996);
				TextDrawColor( Killist[10+x], -1);
				TextDrawSetOutline( Killist[10+x], 1);
				TextDrawSetProportional( Killist[10+x], 1);
				TextDrawUseBox( Killist[10+x], 1);
				TextDrawBoxColor( Killist[10+x], 0);
				TextDrawTextSize( Killist[10+x], -87.000000, 95.000000);
				TextDrawSetPreviewModel( Killist[10+x], GetWeaponModel(oldreasons[x]));
				TextDrawSetPreviewRot( Killist[10+x], 0.000000, -5.000000, 0.000000, 3.000000);

			}
			case 28, 32:
			{
				Killist[10+x] = TextDrawCreate( 608.000000-30.0, -1+(80.0-x*20.0)+108.000000, "uzi tec9");
				TextDrawBackgroundColor( Killist[10+x], 0);
				TextDrawFont( Killist[10+x], 5);
				TextDrawLetterSize( Killist[10+x], 1.959998, 8.199996);
				TextDrawColor( Killist[10+x], -1);
				TextDrawSetOutline( Killist[10+x], 1);
				TextDrawSetProportional( Killist[10+x], 1);
				TextDrawUseBox( Killist[10+x], 1);
				TextDrawBoxColor( Killist[10+x], 0);
				TextDrawTextSize( Killist[10+x], -107.000000, 75.000000);
				TextDrawSetPreviewModel( Killist[10+x], GetWeaponModel(oldreasons[x]));
				TextDrawSetPreviewRot( Killist[10+x], 0.000000, -5.000000, 0.000000, 3.000000);

			}
			case 29:
			{
				//mp5
				Killist[10+x] = TextDrawCreate( 608.000000-30.0, -1+(80.0-x*20.0)+113.000000, "uzi tec9");
				TextDrawBackgroundColor( Killist[10+x], 0);
				TextDrawFont( Killist[10+x], 5);
				TextDrawLetterSize( Killist[10+x], 1.959998, 8.199996);
				TextDrawColor( Killist[10+x], -1);
				TextDrawSetOutline( Killist[10+x], 1);
				TextDrawSetProportional( Killist[10+x], 1);
				TextDrawUseBox( Killist[10+x], 1);
				TextDrawBoxColor( Killist[10+x], 0);
				TextDrawTextSize( Killist[10+x], -107.000000, 75.000000);
				TextDrawSetPreviewModel( Killist[10+x], 353);
				TextDrawSetPreviewRot( Killist[10+x], 0.000000, -5.000000, 0.000000, 3.000000);

				//TWO ROCKETS
			}
			case 35, 36:
			{
			//mp5

				Killist[10+x] = TextDrawCreate( 585.000000-30.0, -1+(80.0-x*20.0)+111.000000, "uzi tec9");
				TextDrawBackgroundColor( Killist[10+x], 0);
				TextDrawFont( Killist[10+x], 5);
				TextDrawLetterSize( Killist[10+x], 1.959998, 8.199995);
				TextDrawColor( Killist[10+x], -1);
				TextDrawSetOutline( Killist[10+x], 1);
				TextDrawSetProportional( Killist[10+x], 1);
				TextDrawUseBox( Killist[10+x], 1);
				TextDrawBoxColor( Killist[10+x], 0);
				TextDrawTextSize( Killist[10+x], -40.000000, 72.000000);
				TextDrawSetPreviewModel( Killist[10+x], GetWeaponModel(oldreasons[x]));
				TextDrawSetPreviewRot( Killist[10+x], 0.000000, -5.000000, 0.000000, 3.000000);

			}
			case 37, 38:
			{
				Killist[10+x] = TextDrawCreate( 577.000000-30.0, -1+(80.0-x*20.0)+123.000000, "uzi tec9");
				TextDrawBackgroundColor( Killist[10+x], 0);
				TextDrawFont( Killist[10+x], 5);
				TextDrawLetterSize( Killist[10+x], 1.959998, 8.199995);
				TextDrawColor( Killist[10+x], -1);
				TextDrawSetOutline( Killist[10+x], 1);
				TextDrawSetProportional( Killist[10+x], 1);
				TextDrawUseBox( Killist[10+x], 1);
				TextDrawBoxColor( Killist[10+x], 0);
				TextDrawTextSize( Killist[10+x], -59.000000, 52.000000);
				TextDrawSetPreviewModel( Killist[10+x], GetWeaponModel(oldreasons[x]));
				TextDrawSetPreviewRot( Killist[10+x], 0.000000, -5.000000, 0.000000, 3.000000);

			}
			case 39, 40:
			{

				//SCACHTEL  Detonator
				Killist[10+x] = TextDrawCreate( 585.000000-30.0, -1+(80.0-x*20.0)+115.000000, "uzi tec9");
				TextDrawBackgroundColor( Killist[10+x], 0);
				TextDrawFont( Killist[10+x], 5);
				TextDrawLetterSize( Killist[10+x], 1.959998, 8.199995);
				TextDrawColor( Killist[10+x], -1);
				TextDrawSetOutline( Killist[10+x], 1);
				TextDrawSetProportional( Killist[10+x], 1);
				TextDrawUseBox( Killist[10+x], 1);
				TextDrawBoxColor( Killist[10+x], 0);
				TextDrawTextSize( Killist[10+x], -59.000000, 52.000000);
				TextDrawSetPreviewModel( Killist[10+x], GetWeaponModel(oldreasons[x]));
				TextDrawSetPreviewRot( Killist[10+x], 0.000000, -5.000000, 0.000000, 3.000000);

				//spray can
			}
			case 42:
			{
			//Fire e...
				Killist[10+x] = TextDrawCreate( 580.000000-30.0, -1+(80.0-x*20.0)+111.000000, "uzi tec9");
				TextDrawBackgroundColor( Killist[10+x], 0);
				TextDrawFont( Killist[10+x], 5);
				TextDrawLetterSize( Killist[10+x], 1.959998, 8.199995);
				TextDrawColor( Killist[10+x], -1);
				TextDrawSetOutline( Killist[10+x], 1);
				TextDrawSetProportional( Killist[10+x], 1);
				TextDrawUseBox( Killist[10+x], 1);
				TextDrawBoxColor( Killist[10+x], 0);
				TextDrawTextSize( Killist[10+x], -54.000000, 62.000000);
				TextDrawSetPreviewModel( Killist[10+x], 366);
				TextDrawSetPreviewRot( Killist[10+x], 0.000000, 0.000000, 0.000000, 3.000000);

			}
			case 51:
			{
				//reason 51
				Killist[10+x] = TextDrawCreate( 553.000000-30.0, -1+(80.0-x*20.0)+135.000000, "ld_shtr:ex3");
				TextDrawBackgroundColor( Killist[10+x], 0);
				TextDrawFont( Killist[10+x], 4);
				TextDrawLetterSize( Killist[10+x], 1.959998, 8.199995);
				TextDrawColor( Killist[10+x], -1);
				TextDrawSetOutline( Killist[10+x], 1);
				TextDrawSetProportional( Killist[10+x], 1);
				TextDrawUseBox( Killist[10+x], 1);
				TextDrawBoxColor( Killist[10+x], 0);
				TextDrawTextSize( Killist[10+x], 18.000000, 19.000000);
				TextDrawSetPreviewModel( Killist[10+x], 364);
				TextDrawSetPreviewRot( Killist[10+x], 90.000000, 0.000000, 25.000000, 1.000000);

			}
			default:
			{
				//no reason
				Killist[10+x] = TextDrawCreate( 549.000000-30.0, -1+(80.0-x*20.0)+134.000000, "ld_shtr:ex3");
				TextDrawBackgroundColor( Killist[10+x], 0);
				TextDrawFont( Killist[10+x], 5);
				TextDrawLetterSize( Killist[10+x], 1.959998, 8.199995);
				TextDrawColor( Killist[10+x], -1);
				TextDrawSetOutline( Killist[10+x], 1);
				TextDrawSetProportional( Killist[10+x], 1);
				TextDrawUseBox( Killist[10+x], 1);
				TextDrawBoxColor( Killist[10+x], 0);
				TextDrawTextSize( Killist[10+x], 24.000000, 23.000000);
				TextDrawSetPreviewModel( Killist[10+x], 1254);
				TextDrawSetPreviewRot( Killist[10+x], 0.000000, 0.000000, 0.000000, 1.000000);

			}
		}
	}

	format(oldcolor1[4], 50, "%s", oldcolor1[3]);
	format(oldcolor2[4], 50, "%s", oldcolor2[3]);

	format(oldcolor1[3], 50, "%s", oldcolor1[2]);
	format(oldcolor2[3], 50, "%s", oldcolor2[2]);

	format(oldcolor1[2], 50, "%s", oldcolor1[1]);
	format(oldcolor2[2], 50, "%s", oldcolor2[1]);

	format(oldcolor1[1], 50, "%s", oldcolor1[0]);
	format(oldcolor2[1], 50, "%s", oldcolor2[0]);

	format(oldcolor2[0], 50, "%x", GetPlayerColor(playerid));
	if(killerid != INVALID_PLAYER_ID) format(oldcolor1[0], 50, "%x", GetPlayerColor(killerid));
	else  format(oldcolor1[0], 50, "_");


	format(oldname1[4], 50, "%s", oldname1[3]);
	format(oldname2[4], 50, "%s", oldname2[3]);

	format(oldname1[3], 50, "%s", oldname1[2]);
	format(oldname2[3], 50, "%s", oldname2[2]);

	format(oldname1[2], 50, "%s", oldname1[1]);
	format(oldname2[2], 50, "%s", oldname2[1]);

	format(oldname1[1], 50, "%s", oldname1[0]);
	format(oldname2[1], 50, "%s", oldname2[0]);

	format(oldname2[0], 50, "%s", pName[playerid]);
	if(killerid != INVALID_PLAYER_ID) format(oldname1[0], 50, "%s", pName[killerid]);
	else  format(oldname1[0], 50, "_");

	TextDrawSetString(Killist[7], oldname1[0]);
	TextDrawSetString(Killist[9], oldname2[0]);

	TextDrawSetString(Killist[3], oldname1[1]);
	TextDrawSetString(Killist[5], oldname2[1]);

	TextDrawSetString(Killist[6], oldname1[2]);
	TextDrawSetString(Killist[8], oldname2[2]);

	TextDrawSetString(Killist[2], oldname1[3]);
	TextDrawSetString(Killist[4], oldname2[3]);

	TextDrawSetString(Killist[0], oldname1[4]);
	TextDrawSetString(Killist[1], oldname2[4]);

	TextDrawColor(Killist[7], hexstr(oldcolor1[0]));
	TextDrawColor(Killist[9], hexstr(oldcolor2[0]));

	TextDrawColor(Killist[3], hexstr(oldcolor1[1]));
	TextDrawColor(Killist[5], hexstr(oldcolor2[1]));

	TextDrawColor(Killist[6], hexstr(oldcolor1[2]));
	TextDrawColor(Killist[8], hexstr(oldcolor2[2]));

	TextDrawColor(Killist[2], hexstr(oldcolor1[3]));
	TextDrawColor(Killist[4], hexstr(oldcolor2[3]));

	TextDrawColor(Killist[0], hexstr(oldcolor1[4]));
	TextDrawColor(Killist[1], hexstr(oldcolor2[4]));

	foreach(new x : Player)
	{
	  if(Spawned[x] > 0 && DontShowKills[x] == 0)
	  {
	    for(new i=0; i<sizeof(Killist); i++) TextDrawShowForPlayer(x, Killist[i]);
	  }
	}
	#else
	SendDeathMessage(killerid, playerid, reason);
	#endif
}

stock ResetCarInfo(v)
{
	 VehicleInfo[v][Owned]=0;
	 VehicleInfo[v][Player]=INVALID_PLAYER_ID;
     IsHouseCar[v]=0;
     AdminCar[v]=-1;
     SCar[v]=-1;
     SOwner[v]=-1;
     CarNitro[v]=0;
}



stock CreateGangInfoTD(playerid)
{
	pGwTD1[playerid][0] = CreatePlayerTextDraw(playerid, 36.000000, 122.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, pGwTD1[playerid][0], 255);
	PlayerTextDrawFont(playerid, pGwTD1[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid, pGwTD1[playerid][0], 0.800000, 24.699995);
	PlayerTextDrawColor(playerid, pGwTD1[playerid][0], -1);
	PlayerTextDrawSetOutline(playerid, pGwTD1[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid, pGwTD1[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, pGwTD1[playerid][0], 1);
	PlayerTextDrawUseBox(playerid, pGwTD1[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, pGwTD1[playerid][0], 80);
	PlayerTextDrawTextSize(playerid, pGwTD1[playerid][0], 434.000000, 91.000000);
	PlayerTextDrawSetSelectable(playerid, pGwTD1[playerid][0], 0);

	pGwTD1[playerid][1] = CreatePlayerTextDraw(playerid, 243.000000, 115.000000, "~l~Gang Name");
	PlayerTextDrawAlignment(playerid, pGwTD1[playerid][1], 2);
	PlayerTextDrawBackgroundColor(playerid, pGwTD1[playerid][1], -16777166);
	PlayerTextDrawFont(playerid, pGwTD1[playerid][1], 3);
	PlayerTextDrawLetterSize(playerid, pGwTD1[playerid][1], 0.480000, 1.000000);
	PlayerTextDrawColor(playerid, pGwTD1[playerid][1], -1);
	PlayerTextDrawSetOutline(playerid, pGwTD1[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, pGwTD1[playerid][1], 1);
	PlayerTextDrawUseBox(playerid, pGwTD1[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, pGwTD1[playerid][1], 0);
	PlayerTextDrawTextSize(playerid, pGwTD1[playerid][1], 0.000000, 440.000000);
	PlayerTextDrawSetSelectable(playerid, pGwTD1[playerid][1], 0);

	pGwTD1[playerid][2] = CreatePlayerTextDraw(playerid, 49.000000, 134.000000, "Gang ID: ~w~15");
	PlayerTextDrawBackgroundColor(playerid, pGwTD1[playerid][2], 20);
	PlayerTextDrawFont(playerid, pGwTD1[playerid][2], 2);
	PlayerTextDrawLetterSize(playerid, pGwTD1[playerid][2], 0.250000, 1.000000);
	PlayerTextDrawColor(playerid, pGwTD1[playerid][2], -7864065);
	PlayerTextDrawSetOutline(playerid, pGwTD1[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, pGwTD1[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, pGwTD1[playerid][2], 0);

	pGwTD1[playerid][3] = CreatePlayerTextDraw(playerid, 49.000000, 148.000000, "Turfs: ~w~15");
	PlayerTextDrawBackgroundColor(playerid, pGwTD1[playerid][3], 20);
	PlayerTextDrawFont(playerid, pGwTD1[playerid][3], 2);
	PlayerTextDrawLetterSize(playerid, pGwTD1[playerid][3], 0.250000, 1.000000);
	PlayerTextDrawColor(playerid, pGwTD1[playerid][3], -7864065);
	PlayerTextDrawSetOutline(playerid, pGwTD1[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, pGwTD1[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, pGwTD1[playerid][3], 0);

	pGwTD1[playerid][4] = CreatePlayerTextDraw(playerid, 49.000000, 162.000000, "Bank: ~w~$200000000");
	PlayerTextDrawBackgroundColor(playerid, pGwTD1[playerid][4], 20);
	PlayerTextDrawFont(playerid, pGwTD1[playerid][4], 2);
	PlayerTextDrawLetterSize(playerid, pGwTD1[playerid][4], 0.250000, 1.000000);
	PlayerTextDrawColor(playerid, pGwTD1[playerid][4], -7864065);
	PlayerTextDrawSetOutline(playerid, pGwTD1[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, pGwTD1[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, pGwTD1[playerid][4], 0);

	pGwTD1[playerid][5] = CreatePlayerTextDraw(playerid, 49.000000, 193.000000, "Members:");
	PlayerTextDrawBackgroundColor(playerid, pGwTD1[playerid][5], 20);
	PlayerTextDrawFont(playerid, pGwTD1[playerid][5], 2);
	PlayerTextDrawLetterSize(playerid, pGwTD1[playerid][5], 0.250000, 1.000000);
	PlayerTextDrawColor(playerid, pGwTD1[playerid][5], -7864065);
	PlayerTextDrawSetOutline(playerid, pGwTD1[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, pGwTD1[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid, pGwTD1[playerid][5], 0);

	pGwTD1[playerid][6] = CreatePlayerTextDraw(playerid, 49.000000, 176.000000, "Gang base: ~w~The fanny batter");
	PlayerTextDrawBackgroundColor(playerid, pGwTD1[playerid][6], 20);
	PlayerTextDrawFont(playerid, pGwTD1[playerid][6], 2);
	PlayerTextDrawLetterSize(playerid, pGwTD1[playerid][6], 0.250000, 1.000000);
	PlayerTextDrawColor(playerid, pGwTD1[playerid][6], -7864065);
	PlayerTextDrawSetOutline(playerid, pGwTD1[playerid][6], 1);
	PlayerTextDrawSetProportional(playerid, pGwTD1[playerid][6], 1);
	PlayerTextDrawSetSelectable(playerid, pGwTD1[playerid][6], 0);

	//
	pGwTD2[playerid][0] = CreatePlayerTextDraw(playerid, 60.000000, 209.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, pGwTD2[playerid][0], 255);
	PlayerTextDrawFont(playerid, pGwTD2[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid, pGwTD2[playerid][0], 0.15, 0.8999);
	PlayerTextDrawColor(playerid, pGwTD2[playerid][0], 10354687);
	PlayerTextDrawSetOutline(playerid, pGwTD2[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, pGwTD2[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, pGwTD2[playerid][0], 0);

	pGwTD2[playerid][1] = CreatePlayerTextDraw(playerid, 60.000000, 221.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, pGwTD2[playerid][1], 255);
	PlayerTextDrawFont(playerid, pGwTD2[playerid][1], 1);
	PlayerTextDrawLetterSize(playerid, pGwTD2[playerid][1], 0.15, 0.8999);
	PlayerTextDrawColor(playerid, pGwTD2[playerid][1], 10354687);
	PlayerTextDrawSetOutline(playerid, pGwTD2[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, pGwTD2[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, pGwTD2[playerid][1], 0);

	pGwTD2[playerid][2] = CreatePlayerTextDraw(playerid, 60.000000, 235.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, pGwTD2[playerid][2], 255);
	PlayerTextDrawFont(playerid, pGwTD2[playerid][2], 1);
	PlayerTextDrawLetterSize(playerid, pGwTD2[playerid][2], 0.15, 0.8999);
	PlayerTextDrawColor(playerid, pGwTD2[playerid][2], 10354687);
	PlayerTextDrawSetOutline(playerid, pGwTD2[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, pGwTD2[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, pGwTD2[playerid][2], 0);

	pGwTD2[playerid][3] = CreatePlayerTextDraw(playerid, 60.000000, 249.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, pGwTD2[playerid][3], 255);
	PlayerTextDrawFont(playerid, pGwTD2[playerid][3], 1);
	PlayerTextDrawLetterSize(playerid, pGwTD2[playerid][3], 0.15, 0.8999);
	PlayerTextDrawColor(playerid, pGwTD2[playerid][3], 10354687);
	PlayerTextDrawSetOutline(playerid, pGwTD2[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, pGwTD2[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, pGwTD2[playerid][3], 0);

	pGwTD2[playerid][4] = CreatePlayerTextDraw(playerid, 60.000000, 263.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, pGwTD2[playerid][4], 255);
	PlayerTextDrawFont(playerid, pGwTD2[playerid][4], 1);
	PlayerTextDrawLetterSize(playerid, pGwTD2[playerid][4], 0.15, 0.8999);
	PlayerTextDrawColor(playerid, pGwTD2[playerid][4], 10354687);
	PlayerTextDrawSetOutline(playerid, pGwTD2[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, pGwTD2[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, pGwTD2[playerid][4], 0);

	pGwTD2[playerid][5] = CreatePlayerTextDraw(playerid, 60.000000, 277.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, pGwTD2[playerid][5], 255);
	PlayerTextDrawFont(playerid, pGwTD2[playerid][5], 1);
	PlayerTextDrawLetterSize(playerid, pGwTD2[playerid][5], 0.15, 0.8999);
	PlayerTextDrawColor(playerid, pGwTD2[playerid][5], 10354687);
	PlayerTextDrawSetOutline(playerid, pGwTD2[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, pGwTD2[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid, pGwTD2[playerid][5], 0);

	pGwTD2[playerid][6] = CreatePlayerTextDraw(playerid, 60.000000, 292.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, pGwTD2[playerid][6], 255);
	PlayerTextDrawFont(playerid, pGwTD2[playerid][6], 1);
	PlayerTextDrawLetterSize(playerid, pGwTD2[playerid][6], 0.15, 0.8999);
	PlayerTextDrawColor(playerid, pGwTD2[playerid][6], 10354687);
	PlayerTextDrawSetOutline(playerid, pGwTD2[playerid][6], 1);
	PlayerTextDrawSetProportional(playerid, pGwTD2[playerid][6], 1);
	PlayerTextDrawSetSelectable(playerid, pGwTD2[playerid][6], 0);

	pGwTD2[playerid][7] = CreatePlayerTextDraw(playerid, 60.000000, 306.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, pGwTD2[playerid][7], 255);
	PlayerTextDrawFont(playerid, pGwTD2[playerid][7], 1);
	PlayerTextDrawLetterSize(playerid, pGwTD2[playerid][7], 0.15, 0.8999);
	PlayerTextDrawColor(playerid, pGwTD2[playerid][7], 10354687);
	PlayerTextDrawSetOutline(playerid, pGwTD2[playerid][7], 1);
	PlayerTextDrawSetProportional(playerid, pGwTD2[playerid][7], 1);
	PlayerTextDrawSetSelectable(playerid, pGwTD2[playerid][7], 0);

	pGwTD2[playerid][8] = CreatePlayerTextDraw(playerid, 60.000000, 320.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, pGwTD2[playerid][8], 255);
	PlayerTextDrawFont(playerid, pGwTD2[playerid][8], 1);
	PlayerTextDrawLetterSize(playerid, pGwTD2[playerid][8], 0.15, 0.8999);
	PlayerTextDrawColor(playerid, pGwTD2[playerid][8], 10354687);
	PlayerTextDrawSetOutline(playerid, pGwTD2[playerid][8], 1);
	PlayerTextDrawSetProportional(playerid, pGwTD2[playerid][8], 1);
	PlayerTextDrawSetSelectable(playerid, pGwTD2[playerid][8], 0);

	pGwTD2[playerid][9] = CreatePlayerTextDraw(playerid, 60.000000, 334.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, pGwTD2[playerid][9], 255);
	PlayerTextDrawFont(playerid, pGwTD2[playerid][9], 1);
	PlayerTextDrawLetterSize(playerid, pGwTD2[playerid][9], 0.15, 0.8999);
	PlayerTextDrawColor(playerid, pGwTD2[playerid][9], 10354687);
	PlayerTextDrawSetOutline(playerid, pGwTD2[playerid][9], 1);
	PlayerTextDrawSetProportional(playerid, pGwTD2[playerid][9], 1);
	PlayerTextDrawSetSelectable(playerid, pGwTD2[playerid][9], 0);


	for(new x=0; x<10; x++)
	{
	 PlayerTextDrawTextSize(playerid, pGwTD2[playerid][x], 170.0, 10.0);
	}
	//
	pGwTD2[playerid][10] = CreatePlayerTextDraw(playerid, 181.000000, 207.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, pGwTD2[playerid][10], 255);
	PlayerTextDrawFont(playerid, pGwTD2[playerid][10], 1);
	PlayerTextDrawLetterSize(playerid, pGwTD2[playerid][10], 0.15, 0.8999);
	PlayerTextDrawColor(playerid, pGwTD2[playerid][10], 10354687);
	PlayerTextDrawSetOutline(playerid, pGwTD2[playerid][10], 1);
	PlayerTextDrawSetProportional(playerid, pGwTD2[playerid][10], 1);
	PlayerTextDrawSetSelectable(playerid, pGwTD2[playerid][10], 0);

	pGwTD2[playerid][11] = CreatePlayerTextDraw(playerid, 181.000000, 221.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, pGwTD2[playerid][11], 255);
	PlayerTextDrawFont(playerid, pGwTD2[playerid][11], 1);
	PlayerTextDrawLetterSize(playerid, pGwTD2[playerid][11], 0.15, 0.8999);
	PlayerTextDrawColor(playerid, pGwTD2[playerid][11], 10354687);
	PlayerTextDrawSetOutline(playerid, pGwTD2[playerid][11], 1);
	PlayerTextDrawSetProportional(playerid, pGwTD2[playerid][11], 1);
	PlayerTextDrawSetSelectable(playerid, pGwTD2[playerid][11], 0);

	pGwTD2[playerid][12] = CreatePlayerTextDraw(playerid, 181.000000, 235.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, pGwTD2[playerid][12], 255);
	PlayerTextDrawFont(playerid, pGwTD2[playerid][12], 1);
	PlayerTextDrawLetterSize(playerid, pGwTD2[playerid][12], 0.15, 0.8999);
	PlayerTextDrawColor(playerid, pGwTD2[playerid][12], 10354687);
	PlayerTextDrawSetOutline(playerid, pGwTD2[playerid][12], 1);
	PlayerTextDrawSetProportional(playerid, pGwTD2[playerid][12], 1);
	PlayerTextDrawSetSelectable(playerid, pGwTD2[playerid][12], 0);

	pGwTD2[playerid][13] = CreatePlayerTextDraw(playerid, 181.000000, 249.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, pGwTD2[playerid][13], 255);
	PlayerTextDrawFont(playerid, pGwTD2[playerid][13], 1);
	PlayerTextDrawLetterSize(playerid, pGwTD2[playerid][13], 0.15, 0.8999);
	PlayerTextDrawColor(playerid, pGwTD2[playerid][13], 10354687);
	PlayerTextDrawSetOutline(playerid, pGwTD2[playerid][13], 1);
	PlayerTextDrawSetProportional(playerid, pGwTD2[playerid][13], 1);
	PlayerTextDrawSetSelectable(playerid, pGwTD2[playerid][13], 0);

	pGwTD2[playerid][14] = CreatePlayerTextDraw(playerid, 181.000000, 263.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, pGwTD2[playerid][14], 255);
	PlayerTextDrawFont(playerid, pGwTD2[playerid][14], 1);
	PlayerTextDrawLetterSize(playerid, pGwTD2[playerid][14], 0.15, 0.8999);
	PlayerTextDrawColor(playerid, pGwTD2[playerid][14], 10354687);
	PlayerTextDrawSetOutline(playerid, pGwTD2[playerid][14], 1);
	PlayerTextDrawSetProportional(playerid, pGwTD2[playerid][14], 1);
	PlayerTextDrawSetSelectable(playerid, pGwTD2[playerid][14], 0);

	pGwTD2[playerid][15] = CreatePlayerTextDraw(playerid, 181.000000, 277.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, pGwTD2[playerid][15], 255);
	PlayerTextDrawFont(playerid, pGwTD2[playerid][15], 1);
	PlayerTextDrawLetterSize(playerid, pGwTD2[playerid][15], 0.15, 0.8999);
	PlayerTextDrawColor(playerid, pGwTD2[playerid][15], 10354687);
	PlayerTextDrawSetOutline(playerid, pGwTD2[playerid][15], 1);
	PlayerTextDrawSetProportional(playerid, pGwTD2[playerid][15], 1);
	PlayerTextDrawSetSelectable(playerid, pGwTD2[playerid][15], 0);

	pGwTD2[playerid][16] = CreatePlayerTextDraw(playerid, 181.000000, 292.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, pGwTD2[playerid][16], 255);
	PlayerTextDrawFont(playerid, pGwTD2[playerid][16], 1);
	PlayerTextDrawLetterSize(playerid, pGwTD2[playerid][16], 0.15, 0.8999);
	PlayerTextDrawColor(playerid, pGwTD2[playerid][16], 10354687);
	PlayerTextDrawSetOutline(playerid, pGwTD2[playerid][16], 1);
	PlayerTextDrawSetProportional(playerid, pGwTD2[playerid][16], 1);
	PlayerTextDrawSetSelectable(playerid, pGwTD2[playerid][16], 0);

	pGwTD2[playerid][17] = CreatePlayerTextDraw(playerid, 181.000000, 306.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, pGwTD2[playerid][17], 255);
	PlayerTextDrawFont(playerid, pGwTD2[playerid][17], 1);
	PlayerTextDrawLetterSize(playerid, pGwTD2[playerid][17], 0.15, 0.8999);
	PlayerTextDrawColor(playerid, pGwTD2[playerid][17], 10354687);
	PlayerTextDrawSetOutline(playerid, pGwTD2[playerid][17], 1);
	PlayerTextDrawSetProportional(playerid, pGwTD2[playerid][17], 1);
	PlayerTextDrawSetSelectable(playerid, pGwTD2[playerid][17], 0);

	pGwTD2[playerid][18] = CreatePlayerTextDraw(playerid, 181.000000, 320.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, pGwTD2[playerid][18], 255);
	PlayerTextDrawFont(playerid, pGwTD2[playerid][18], 1);
	PlayerTextDrawLetterSize(playerid, pGwTD2[playerid][18], 0.15, 0.8999);
	PlayerTextDrawColor(playerid, pGwTD2[playerid][18], 10354687);
	PlayerTextDrawSetOutline(playerid, pGwTD2[playerid][18], 1);
	PlayerTextDrawSetProportional(playerid, pGwTD2[playerid][18], 1);
	PlayerTextDrawSetSelectable(playerid, pGwTD2[playerid][18], 0);

	pGwTD2[playerid][19] = CreatePlayerTextDraw(playerid, 181.000000, 334.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, pGwTD2[playerid][19], 255);
	PlayerTextDrawFont(playerid, pGwTD2[playerid][19], 1);
	PlayerTextDrawLetterSize(playerid, pGwTD2[playerid][19], 0.15, 0.8999);
	PlayerTextDrawColor(playerid, pGwTD2[playerid][19], 10354687);
	PlayerTextDrawSetOutline(playerid, pGwTD2[playerid][19], 1);
	PlayerTextDrawSetProportional(playerid, pGwTD2[playerid][19], 1);
	PlayerTextDrawSetSelectable(playerid, pGwTD2[playerid][19], 0);
	for(new x=10; x<20; x++)
	{
	 PlayerTextDrawTextSize(playerid, pGwTD2[playerid][x], 300.0, 10.0);
	}
	//
	pGwTD2[playerid][20] = CreatePlayerTextDraw(playerid, 302.000000, 207.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, pGwTD2[playerid][20], 255);
	PlayerTextDrawFont(playerid, pGwTD2[playerid][20], 1);
	PlayerTextDrawLetterSize(playerid, pGwTD2[playerid][20], 0.15, 0.8999);
	PlayerTextDrawColor(playerid, pGwTD2[playerid][20], 10354687);
	PlayerTextDrawSetOutline(playerid, pGwTD2[playerid][20], 1);
	PlayerTextDrawSetProportional(playerid, pGwTD2[playerid][20], 1);
	PlayerTextDrawSetSelectable(playerid, pGwTD2[playerid][20], 0);

	pGwTD2[playerid][21] = CreatePlayerTextDraw(playerid, 302.000000, 221.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, pGwTD2[playerid][21], 255);
	PlayerTextDrawFont(playerid, pGwTD2[playerid][21], 1);
	PlayerTextDrawLetterSize(playerid, pGwTD2[playerid][21], 0.15, 0.8999);
	PlayerTextDrawColor(playerid, pGwTD2[playerid][21], 10354687);
	PlayerTextDrawSetOutline(playerid, pGwTD2[playerid][21], 1);
	PlayerTextDrawSetProportional(playerid, pGwTD2[playerid][21], 1);
	PlayerTextDrawSetSelectable(playerid, pGwTD2[playerid][21], 0);

	pGwTD2[playerid][22] = CreatePlayerTextDraw(playerid, 302.000000, 235.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, pGwTD2[playerid][22], 255);
	PlayerTextDrawFont(playerid, pGwTD2[playerid][22], 1);
	PlayerTextDrawLetterSize(playerid, pGwTD2[playerid][22], 0.15, 0.8999);
	PlayerTextDrawColor(playerid, pGwTD2[playerid][22], 10354687);
	PlayerTextDrawSetOutline(playerid, pGwTD2[playerid][22], 1);
	PlayerTextDrawSetProportional(playerid, pGwTD2[playerid][22], 1);
	PlayerTextDrawSetSelectable(playerid, pGwTD2[playerid][22], 0);

	pGwTD2[playerid][23] = CreatePlayerTextDraw(playerid, 302.000000, 249.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, pGwTD2[playerid][23], 255);
	PlayerTextDrawFont(playerid, pGwTD2[playerid][23], 1);
	PlayerTextDrawLetterSize(playerid, pGwTD2[playerid][23], 0.15, 0.8999);
	PlayerTextDrawColor(playerid, pGwTD2[playerid][23], 10354687);
	PlayerTextDrawSetOutline(playerid, pGwTD2[playerid][23], 1);
	PlayerTextDrawSetProportional(playerid, pGwTD2[playerid][23], 1);
	PlayerTextDrawSetSelectable(playerid, pGwTD2[playerid][23], 0);

	pGwTD2[playerid][24] = CreatePlayerTextDraw(playerid, 302.000000, 263.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, pGwTD2[playerid][24], 255);
	PlayerTextDrawFont(playerid, pGwTD2[playerid][24], 1);
	PlayerTextDrawLetterSize(playerid, pGwTD2[playerid][24], 0.15, 0.8999);
	PlayerTextDrawColor(playerid, pGwTD2[playerid][24], 10354687);
	PlayerTextDrawSetOutline(playerid, pGwTD2[playerid][24], 1);
	PlayerTextDrawSetProportional(playerid, pGwTD2[playerid][24], 1);
	PlayerTextDrawSetSelectable(playerid, pGwTD2[playerid][24], 0);

	pGwTD2[playerid][25] = CreatePlayerTextDraw(playerid, 302.000000, 277.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, pGwTD2[playerid][25], 255);
	PlayerTextDrawFont(playerid, pGwTD2[playerid][25], 1);
	PlayerTextDrawLetterSize(playerid, pGwTD2[playerid][25], 0.15, 0.8999);
	PlayerTextDrawColor(playerid, pGwTD2[playerid][25], 10354687);
	PlayerTextDrawSetOutline(playerid, pGwTD2[playerid][25], 1);
	PlayerTextDrawSetProportional(playerid, pGwTD2[playerid][25], 1);
	PlayerTextDrawSetSelectable(playerid, pGwTD2[playerid][25], 0);

	pGwTD2[playerid][26] = CreatePlayerTextDraw(playerid, 302.000000, 292.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, pGwTD2[playerid][26], 255);
	PlayerTextDrawFont(playerid, pGwTD2[playerid][26], 1);
	PlayerTextDrawLetterSize(playerid, pGwTD2[playerid][26], 0.15, 0.8999);
	PlayerTextDrawColor(playerid, pGwTD2[playerid][26], 10354687);
	PlayerTextDrawSetOutline(playerid, pGwTD2[playerid][26], 1);
	PlayerTextDrawSetProportional(playerid, pGwTD2[playerid][26], 1);
	PlayerTextDrawSetSelectable(playerid, pGwTD2[playerid][26], 0);

	pGwTD2[playerid][27] = CreatePlayerTextDraw(playerid, 302.000000, 306.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, pGwTD2[playerid][27], 255);
	PlayerTextDrawFont(playerid, pGwTD2[playerid][27], 1);
	PlayerTextDrawLetterSize(playerid, pGwTD2[playerid][27], 0.15, 0.8999);
	PlayerTextDrawColor(playerid, pGwTD2[playerid][27], 10354687);
	PlayerTextDrawSetOutline(playerid, pGwTD2[playerid][27], 1);
	PlayerTextDrawSetProportional(playerid, pGwTD2[playerid][27], 1);
	PlayerTextDrawSetSelectable(playerid, pGwTD2[playerid][27], 0);

	pGwTD2[playerid][28] = CreatePlayerTextDraw(playerid, 302.000000, 320.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, pGwTD2[playerid][28], 255);
	PlayerTextDrawFont(playerid, pGwTD2[playerid][28], 1);
	PlayerTextDrawLetterSize(playerid, pGwTD2[playerid][28], 0.15, 0.8999);
	PlayerTextDrawColor(playerid, pGwTD2[playerid][28], 10354687);
	PlayerTextDrawSetOutline(playerid, pGwTD2[playerid][28], 1);
	PlayerTextDrawSetProportional(playerid, pGwTD2[playerid][28], 1);
	PlayerTextDrawSetSelectable(playerid, pGwTD2[playerid][28], 0);

	pGwTD2[playerid][29] = CreatePlayerTextDraw(playerid, 302.000000, 334.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, pGwTD2[playerid][29], 255);
	PlayerTextDrawFont(playerid, pGwTD2[playerid][29], 1);
	PlayerTextDrawLetterSize(playerid, pGwTD2[playerid][29], 0.15, 0.8999);
	PlayerTextDrawColor(playerid, pGwTD2[playerid][29], 10354687);
	PlayerTextDrawSetOutline(playerid, pGwTD2[playerid][29], 1);
	PlayerTextDrawSetProportional(playerid, pGwTD2[playerid][29], 1);
	PlayerTextDrawSetSelectable(playerid, pGwTD2[playerid][29], 0);
	for(new x=20; x<30; x++)
	{
	 PlayerTextDrawTextSize(playerid, pGwTD2[playerid][x], 421.0, 10.0);
	}
}

AntiDeAMX()
{
    new a[][] =
    {
        "Unarmed (Fist)",
        "Brass K"
    };
    #pragma unused a
}
#if defined USE_WeaponDrop
stock DropPlayerWeapons(playerid)
{
    RemovePlayerPickups(playerid);
	new Float:x, Float:y, Float:z, weapcount;
	GetPlayerPos(playerid, x, y, z);
	new world = GetPlayerVirtualWorld(playerid);
	for(new i=0; i<13; i++)
	{
	    new theweapon, ammo;
	    GetPlayerWeaponData(playerid, i, theweapon, ammo);
	    if((ammo > 0 || theweapon == 1) && theweapon != 0)
	    {
			new model = GetWeaponModel(theweapon);
			if(model != -1)
			{
	        	WeaponArray[playerid][i][0] = theweapon;
	        	WeaponArray[playerid][i][1] = ammo;
	        	WeaponArray[playerid][i][2] = world;
	        	weapcount++;
			}
	    }
	}
	if(weapcount > 0)
	{
	    new weap_range;
	    weap_range=floatround(weapcount/2, floatround_ceil);
		if(weap_range == 0) weap_range=2;

		new Float:dropangle, Float:tmp;
		dropangle = 360.0 / (float(weapcount));
		tmp = dropangle;
		if(WeaponDestroyTimer[playerid] != -1) KillTimer(WeaponDestroyTimer[playerid]);
		WeaponDestroyTimer[playerid] = SetTimerEx("RemovePlayerPickups", WeaponDestroy*1000, 0, "d", playerid);
	    for(new i=0; i<13; i++)
		{
		    if((WeaponArray[playerid][i][1] > 0 || WeaponArray[playerid][i][0] == 1) && WeaponArray[playerid][i][0] > 0)
		    {
				new model = GetWeaponModel(WeaponArray[playerid][i][0]);
				if(model != -1)
				{
				    isDroped[playerid][i] = CreatePickup(model, 1, x+(floatsin(dropangle, degrees)*weap_range), y+(floatcos(dropangle, degrees)*weap_range), z, world);
					dropangle = dropangle + tmp;
				}
		    }
		}
	}
	return 1;
}

forward RemovePlayerPickups(playerid);
public RemovePlayerPickups(playerid)
{
	if(WeaponDestroyTimer[playerid] != -1) KillTimer(WeaponDestroyTimer[playerid]);
	WeaponDestroyTimer[playerid] = -1;
	for(new a=0; a<13; a++) {
    if(isDroped[playerid][a] != -1)
    {
        DestroyPickup(isDroped[playerid][a]);
        isDroped[playerid][a] = -1, WeaponArray[playerid][a][0] = -1, WeaponArray[playerid][a][1] = -1, WeaponArray[playerid][a][2] = -1;}
    }
	return 1;
}
#endif
stock ShowBank1(playerid)
{
  if(PlayerInfo[playerid][pGang] < 1)
  {
     ShowPlayerDialog(playerid, 5141, DIALOG_STYLE_LIST, "{E3E34D}Bank of GTADM", "{255F17}Private Account\n{00E5EE}Gang Account", "Select", "Exit");
  }
  else ShowPlayerDialog(playerid, 5141, DIALOG_STYLE_LIST, "{E3E34D}Bank of GTADM", "{255F17}Private Account\n{00E5EE}Gang Account", "Select", "Exit");
}

stock NoExportWaiting()
{
  if(EventType==444 && EventStarted == 1) return 1;
  return 0;
}

stock SendWarning(playerid, warningmsg[])
{
  new str[150];
  format(str, sizeof(str), ""RED_"» Error « {BABABA}%s", warningmsg);
  SendClientMessage(playerid, 0x9E1010FF, str);
  return 1;
}
stock EndTMission(playerid)
{
	for(new g=0; g<sizeof(Tanks); g++)
	{
		SetVehicleParamsForPlayer(Tanks[g], playerid, 0, 1);
		SetVehicleParamsForPlayer(Vans[g], playerid, 0, 1);
		SetVehicleParamsForPlayer(b_Vans[g], playerid, 0, 1);
		if(!VehicleHasDriver(b_Vans[g])) SetVehicleToRespawn(b_Vans[g]);
		if(!VehicleHasDriver(Vans[g])) SetVehicleToRespawn(Vans[g]);
		if(!VehicleHasDriver(Tanks[g])) SetVehicleToRespawn(Tanks[g]);
	}
	for(new f=0; f<sizeof(v_Mission_cps); f++)
	{
		TogglePlayerDynamicCP(playerid, v_Mission_cps[f], false);
		Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON , v_Mission_icons[f], E_STREAMER_PLAYER_ID, playerid);
	}
	DeletePVar(playerid, "Trucker");
	TogglePlayerDynamicCP(playerid, Trucking_Start, true);
	new v=GetPlayerVehicleID(playerid);
	if(GetVehicleTrailer(v)) SetVehicleToRespawn(GetVehicleTrailer(v));
	SetVehicleToRespawn(v);
	if(RaceStarted==0) SetPlayerRaceCheckpoint(playerid, 0, RaceInfo[RaceIDCount][StartCP][0], RaceInfo[RaceIDCount][StartCP][1], RaceInfo[RaceIDCount][StartCP][2], RaceCPs[RaceIDCount][0][0], RaceCPs[RaceIDCount][0][1], RaceCPs[RaceIDCount][0][2], 15.0);
}
stock EndTMission2(playerid)
{
	for(new g=0; g<sizeof(Tanks2); g++)
	{
		SetVehicleParamsForPlayer(Tanks2[g], playerid, 0, 1);
		if(!VehicleHasDriver(Tanks2[g])) SetVehicleToRespawn(Tanks2[g]);
	}
	for(new f=0; f<sizeof(v_Mission2_cps); f++)
	{
		TogglePlayerDynamicCP(playerid, v_Mission2_cps[f], false);
		Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON , v_Mission2_icons[f], E_STREAMER_PLAYER_ID, playerid);
	}
	DeletePVar(playerid, "Trucker2");
	TogglePlayerDynamicCP(playerid, Trucking_Start2, true);
	new v=GetPlayerVehicleID(playerid);
	if(GetVehicleTrailer(v)) SetVehicleToRespawn(GetVehicleTrailer(v));
	SetVehicleToRespawn(v);
	if(RaceStarted==0) SetPlayerRaceCheckpoint(playerid, 0, RaceInfo[RaceIDCount][StartCP][0], RaceInfo[RaceIDCount][StartCP][1], RaceInfo[RaceIDCount][StartCP][2], RaceCPs[RaceIDCount][0][0], RaceCPs[RaceIDCount][0][1], RaceCPs[RaceIDCount][0][2], 15.0);
}
stock GetPlayerTruckingLevel(playerid)
{
	 new f;
	 switch(PlayerInfo[playerid][pTrucking])
	 {
			 case 0..15: f=1;
//			 case 15..30: f=2;
			 default: f=2;
	 }
	 return f;
}



forward StartOutRun(follower, runner);
public  StartOutRun(follower, runner)
{
  Iter_Add(OutRun_Follower, follower);

  TogglePlayerControllable(runner, 1);
  TogglePlayerControllable(follower, 1);
  for(new x=0; x<6; x++)
  {
	PlayerTextDrawShow(runner, pOutRunTD[runner][x]);
	PlayerTextDrawShow(follower, pOutRunTD[follower][x]);
  }

  return 1;
}

forward OutRun();
public OutRun()
{
  foreach(new i : OutRun_Follower)
  {
	 if(i >= 0 && i < MAX_PLAYERS)
	 {
        new r = GetPVarInt(i, "OutRun_vs");

        if(GetPVarInt(r, "ORLoser") == 1)
		{
		  ORLoser(r);
		  break;
		}
		else if(GetPVarInt(i, "ORLoser") == 1)
		{
		 ORLoser(i);
		 break;
		}
		else
		{
			if(IsPlayerInAnyVehicle(i) && GetPVarInt(i, "InOutRun") && GetPVarInt(r, "InOutRun"))
	        {
					new Float:FX, Float:FY;
					GetXYInFrontOfPlayer(i, FX, FY, 13);
					new Float:X, Float:Y, Float:Z;
					GetPlayerPos(i, X, Y, Z);
					new Float:X2, Float:Y2, Float:Z2;
					GetPlayerPos(r, X2, Y2, Z2);
					new Float:VZA, Float:VZAB;
					GetVehicleZAngle(GetPlayerVehicleID(i), VZA);
					GetVehicleZAngle(GetPlayerVehicleID(r), VZAB);
					if(!IsPlayerInRangeOfPoint(r, 300, X, Y, Z))
					{
						SetPVarInt(r, "ORLoser", true);
					}


					GetVehicleVelocity(GetPlayerVehicleID(i), outVX[i], outVY[i], outVZ[i]);
					GetVehicleVelocity(GetPlayerVehicleID(r), outVX[r], outVY[r], outVZ[r]);
					outSP[i] = floatsqroot(((outVX[i]*outVX[i])+(outVY[i]*outVY[i]))+(outVZ[i]*outVZ[i]))*100;
					outSP[r] = floatsqroot(((outVX[r]*outVX[r])+(outVY[r]*outVY[r]))+(outVZ[r]*outVZ[r]))*100;

					if(IsPlayerInRangeOfPoint(r, 15, FX, FY, Z))
					{
						if(VZA >= VZAB-60 && VZA <= VZAB+60)
						{
							new next;
	                        SendInfoText(i, 1000, "~r~Your opponent is leading!");
	                        SendInfoText(r, 1000, "~g~You have got the lead!");
						    Iter_SafeRemove(OutRun_Follower, i, next);
							i=next;
							Iter_Add(OutRun_Follower, r);
						}
					}
					if(IsPlayerInRangeOfPoint(r, 25, X, Y, Z))
					{
						if(outSP[i]+25 < outSP[r])
						{
							new next;
	                        SendInfoText(i, 1000, "~r~Your opponent is leading!");
	                        SendInfoText(r, 1000, "~g~You have got the lead!");
							Iter_SafeRemove(OutRun_Follower, i, next);
							i=next;
							Iter_Add(OutRun_Follower, r);
						}
					}



					new Float:m=floatround(GetPlayerDistanceFromPoint(r, X, Y, Z));
					PlayerTextDrawTextSize(r, pOutRunTD[r][2], 308-floatround(m/2.5641025641), 50);
					PlayerTextDrawBoxColor(r, pOutRunTD[r][2], 0xE3000044);

					PlayerTextDrawTextSize(i, pOutRunTD[i][2], 308+floatround(m/2.5641025641), 50);
					PlayerTextDrawBoxColor(i, pOutRunTD[i][2], 0x00A30544);
					PlayerTextDrawShow(i, pOutRunTD[i][2]);
					PlayerTextDrawShow(r, pOutRunTD[i][2]);

			}
		}
	 }
  }
  return 1;
}


forward ORLoser(playerid);
public ORLoser(playerid)
{
    new r = GetPVarInt(playerid, "OutRun_vs");
    if(r >= 0)
	{
	   PlayerInfo[r][pOutRunz]++;

	   new str[128];
	   format(str, sizeof(str), "UPDATE `users` SET `pOutRunz` = %d WHERE `UserID` = '%d'", PlayerInfo[r][pOutRunz], PlayerInfo[r][UserID]);
	   mysql_query(GTADM, str);
	   if(PlayerInfo[r][pOutRunz] >= 10) GiveMedal(r, 85);
	}
    Iter_Remove(OutRun_Follower, playerid);
    Iter_Remove(OutRun_Follower, r);
	for(new x=0; x<6; x++)
	{
		PlayerTextDrawHide(r, pOutRunTD[r][x]);
		PlayerTextDrawHide(playerid, pOutRunTD[playerid][x]);
	}

	new shits[256];
    SendInfoText(playerid, 2000, "~r~You have lost the OutRun!");
    SendInfoText(r, 2000, "~g~You have Won the OutRun!");
	new money= GetPVarInt(playerid, "OutRun_Money");
	GivePlayerMoneyEX(r, money*2);
	ScoreTDupdate(r, 1);
	format(shits, sizeof(shits), "{AD8484} » Outrun «{919191} %s has won the outrun challenge against %s {AD8484}(Earned: $%d) {919191}(/Outrun)", pName[r], pName[playerid], money);
	SendClientMessageToAll(-1, shits);
	DeletePVar(playerid, "OutRun_Invited");
	DeletePVar(r, "OutRun_Invited");
	DeletePVar(playerid, "OutRun_Money");
	DeletePVar(r, "OutRun_Money");
	DeletePVar(playerid, "ORLoser");
	DeletePVar(r, "ORLoser");
	DeletePVar(playerid, "InOutRun");
	DeletePVar(r, "InOutRun");
	SetPVarInt(playerid, "OutRun_vs", -255);
	SetPVarInt(r, "OutRun_vs", -255);
	return true;
}

forward connectnpc1();
public connectnpc1()
{
   ConnectNPC("2ShotMaster", "2shotnpc");
   SetTimer("connectnpc2", 1000, false);
   return 1;
}
forward connectnpc2();
public connectnpc2()
{
   ConnectNPC("Jonny", "mynpc");
   SetTimer("connectnpc3", 1000, false);
   return 1;
}
forward connectnpc3();
public connectnpc3()
{
   ConnectNPC("Tram_Driver", "tram");
   SetTimer("connectnpc4", 1000, false);
   return 1;
}
forward connectnpc4();
public connectnpc4()
{
   ConnectNPC("Train_Driver", "train_ls");
   return 1;
}
